var window=global;var $CLJS=require("./cljs_env.js");require("./cljs.core.js");require("./clojure.string.js");require("./malli.core.js");require("./malli.util.js");
'use strict';var $u,fv,Lba;
$u=function(a){a=$CLJS.Uf(a);var b=$CLJS.M.h(a,$CLJS.Dl),c=$CLJS.M.h(a,$CLJS.Dk);return function(d){d=$CLJS.Uf(d);var e=$CLJS.M.h(d,$CLJS.hm);d=$CLJS.M.h(d,$CLJS.vl);e=$CLJS.is.g(e);var f=$CLJS.Uf(e);e=$CLJS.M.h(f,$CLJS.vk);f=$CLJS.M.h(f,$CLJS.cm);return $CLJS.Fb(b.g?b.g(d):b.call(null,d))?c:$CLJS.m($CLJS.m(e)?$CLJS.F.h(e,f):e)?["should be ",$CLJS.p.g(e)].join(""):$CLJS.m($CLJS.m(e)?f:e)?["should be between ",$CLJS.p.g(e)," and ",$CLJS.p.g(f)].join(""):$CLJS.m(e)?["should be at least ",$CLJS.p.g(e)].join(""):
$CLJS.m(f)?["should be at most ",$CLJS.p.g(f)].join(""):null}};$CLJS.av=new $CLJS.N("malli.error","unknown","malli.error/unknown",594142330);$CLJS.bv=new $CLJS.N("malli.error","error","malli.error/error",-522553785);$CLJS.cv=new $CLJS.N(null,"en","en",88457073);$CLJS.dv=new $CLJS.N("error","path","error/path",-419192760);$CLJS.Hba=new $CLJS.N(null,"unknown","unknown",-935977881);$CLJS.Iba=new $CLJS.N(null,"wrap","wrap",851669987);$CLJS.ev=new $CLJS.N(null,"default-locale","default-locale",-677515761);
fv=new $CLJS.N("malli.error","likely-misspelling-of","malli.error/likely-misspelling-of",1504085033);$CLJS.Jba=new $CLJS.N("malli","error","malli/error",-1152359159);$CLJS.Kba=new $CLJS.N(null,"resolve","resolve",-1584445482);Lba=new $CLJS.N(null,"_value","_value",1295875052);$CLJS.gv=new $CLJS.N(null,"locale","locale",-2115712697);$CLJS.Mba=$CLJS.Yh([$CLJS.Vt,$CLJS.Qs,$CLJS.ot,$CLJS.xt,$CLJS.Gs,$CLJS.Bs,$CLJS.zm,$CLJS.yt,$CLJS.Fs,$CLJS.Hs,$CLJS.zs,$CLJS.Ys,$CLJS.ps,$CLJS.Os,$CLJS.zt,$CLJS.pm,$CLJS.vs,$CLJS.Sj,$CLJS.jk,$CLJS.Ks,$CLJS.ls,$CLJS.sk,$CLJS.Ps,$CLJS.Us,$CLJS.st,$CLJS.ys,$CLJS.At,$CLJS.Ns,$CLJS.rs,$CLJS.Tl,$CLJS.ck,$CLJS.ym,$CLJS.Ls,new $CLJS.N("malli.error","misspelled-value","malli.error/misspelled-value",-1135752848),$CLJS.As,$CLJS.Ss,$CLJS.Fp,$CLJS.Hk,$CLJS.Rt,$CLJS.Ds,$CLJS.Ts,$CLJS.xm,$CLJS.It,$CLJS.Xt,$CLJS.Rs,
$CLJS.Jk,$CLJS.Nj,$CLJS.Cs,$CLJS.Zl,$CLJS.wn,$CLJS.Es,$CLJS.vn,$CLJS.Ms,$CLJS.ss,$CLJS.ll,$CLJS.ns,$CLJS.ts,$CLJS.xs,$CLJS.Ak,$CLJS.kl,$CLJS.Dt,$CLJS.av,$CLJS.os,$CLJS.Mt,$CLJS.ws,$CLJS.Is,$CLJS.lm,$CLJS.pk,$CLJS.mm,$CLJS.us,new $CLJS.N("malli.error","misspelled-key","malli.error/misspelled-key",616486174),$CLJS.xn,$CLJS.qs,$CLJS.Et,$CLJS.Js],[new $CLJS.k(null,1,[$CLJS.Wu,new $CLJS.k(null,1,[$CLJS.cv,"disallowed key"],null)],null),new $CLJS.k(null,1,[$CLJS.Wu,new $CLJS.k(null,1,[$CLJS.cv,"should be true"],
null)],null),new $CLJS.k(null,1,[$CLJS.Yu,new $CLJS.k(null,1,[$CLJS.cv,function(a){a=$CLJS.Uf(a);a=$CLJS.M.h(a,$CLJS.hm);return["should be ",$CLJS.p.g($CLJS.F.h(1,$CLJS.E($CLJS.js.g(a)))?$CLJS.C($CLJS.js.g(a)):["either ",$CLJS.Uu.h(", ",$CLJS.zi($CLJS.js.g(a)))," or ",$CLJS.p.g($CLJS.$d($CLJS.js.g(a)))].join(""))].join("")}],null)],null),new $CLJS.k(null,1,[$CLJS.Wu,new $CLJS.k(null,1,[$CLJS.cv,"should be a qualified symbol"],null)],null),new $CLJS.k(null,1,[$CLJS.Wu,new $CLJS.k(null,1,[$CLJS.cv,
"should be a uri"],null)],null),new $CLJS.k(null,1,[$CLJS.Wu,new $CLJS.k(null,1,[$CLJS.cv,"should be a simple keyword"],null)],null),new $CLJS.k(null,1,[$CLJS.Yu,new $CLJS.k(null,1,[$CLJS.cv,function(a){a=$CLJS.Uf(a);var b=$CLJS.M.h(a,$CLJS.hm);return"number"===typeof $CLJS.M.h(a,$CLJS.vl)?["should be at most ",$CLJS.p.g($CLJS.C($CLJS.js.g(b)))].join(""):"should be a number"}],null)],null),new $CLJS.k(null,1,[$CLJS.Yu,new $CLJS.k(null,1,[$CLJS.cv,$u(new $CLJS.k(null,2,[$CLJS.Dl,$CLJS.Ge,$CLJS.Dk,
"should be a double"],null))],null)],null),new $CLJS.k(null,1,[$CLJS.Wu,new $CLJS.k(null,1,[$CLJS.cv,"should be a uuid"],null)],null),new $CLJS.k(null,1,[$CLJS.Wu,new $CLJS.k(null,1,[$CLJS.cv,"should be an inst"],null)],null),new $CLJS.k(null,1,[$CLJS.Wu,new $CLJS.k(null,1,[$CLJS.cv,"should be a simple ident"],null)],null),new $CLJS.k(null,1,[$CLJS.Yu,new $CLJS.k(null,1,[$CLJS.cv,function(a){a=$CLJS.Uf(a);a=$CLJS.M.h(a,$CLJS.hm);return["should not be ",$CLJS.p.g($CLJS.C($CLJS.js.g(a)))].join("")}],
null)],null),new $CLJS.k(null,1,[$CLJS.Wu,new $CLJS.k(null,1,[$CLJS.cv,"should be an int"],null)],null),new $CLJS.k(null,1,[$CLJS.Wu,new $CLJS.k(null,1,[$CLJS.cv,"should be nil"],null)],null),new $CLJS.k(null,1,[$CLJS.Yu,new $CLJS.k(null,1,[$CLJS.cv,$u(new $CLJS.k(null,2,[$CLJS.Dl,$CLJS.Be,$CLJS.Dk,"should be an integer"],null))],null)],null),new $CLJS.k(null,1,[$CLJS.Yu,new $CLJS.k(null,1,[$CLJS.cv,function(a){a=$CLJS.Uf(a);var b=$CLJS.M.h(a,$CLJS.hm);return"number"===typeof $CLJS.M.h(a,$CLJS.vl)?
["should be larger than ",$CLJS.p.g($CLJS.C($CLJS.js.g(b)))].join(""):"should be a number"}],null)],null),new $CLJS.k(null,1,[$CLJS.Wu,new $CLJS.k(null,1,[$CLJS.cv,"should be a float"],null)],null),new $CLJS.k(null,1,[$CLJS.Wu,new $CLJS.k(null,1,[$CLJS.cv,"should be an ifn"],null)],null),new $CLJS.k(null,1,[$CLJS.Wu,new $CLJS.k(null,1,[$CLJS.cv,"should be a map"],null)],null),new $CLJS.k(null,1,[$CLJS.Wu,new $CLJS.k(null,1,[$CLJS.cv,"should be a vector"],null)],null),new $CLJS.k(null,1,[$CLJS.Wu,
new $CLJS.k(null,1,[$CLJS.cv,"should be any"],null)],null),new $CLJS.k(null,1,[$CLJS.Wu,new $CLJS.k(null,1,[$CLJS.cv,"should be a symbol"],null)],null),new $CLJS.k(null,1,[$CLJS.Wu,new $CLJS.k(null,1,[$CLJS.cv,"should be false"],null)],null),new $CLJS.k(null,1,[$CLJS.Wu,new $CLJS.k(null,1,[$CLJS.cv,"should be an associative"],null)],null),new $CLJS.k(null,1,[$CLJS.Wu,new $CLJS.k(null,1,[$CLJS.cv,"should match regex"],null)],null),new $CLJS.k(null,1,[$CLJS.Wu,new $CLJS.k(null,1,[$CLJS.cv,"should be an ident"],
null)],null),new $CLJS.k(null,1,[$CLJS.Wu,new $CLJS.k(null,1,[$CLJS.cv,"should be a qualified keyword"],null)],null),new $CLJS.k(null,1,[$CLJS.Wu,new $CLJS.k(null,1,[$CLJS.cv,"should be a char"],null)],null),new $CLJS.k(null,1,[$CLJS.Wu,new $CLJS.k(null,1,[$CLJS.cv,"should be a negative int"],null)],null),new $CLJS.k(null,1,[$CLJS.Yu,new $CLJS.k(null,1,[$CLJS.cv,function(a){a=$CLJS.Uf(a);var b=$CLJS.M.h(a,$CLJS.hm);a=$CLJS.M.h(a,$CLJS.vl);b=$CLJS.is.g(b);var c=$CLJS.Uf(b);b=$CLJS.M.h(c,$CLJS.vk);
c=$CLJS.M.h(c,$CLJS.cm);return"string"!==typeof a?"should be a string":$CLJS.m($CLJS.m(b)?$CLJS.F.h(b,c):b)?["should be ",$CLJS.p.g(b)," characters"].join(""):$CLJS.m($CLJS.m(b)?c:b)?["should be between ",$CLJS.p.g(b)," and ",$CLJS.p.g(c)," characters"].join(""):$CLJS.m(b)?["should be at least ",$CLJS.p.g(b)," characters"].join(""):$CLJS.m(c)?["should be at most ",$CLJS.p.g(c)," characters"].join(""):null}],null)],null),new $CLJS.k(null,1,[$CLJS.Wu,new $CLJS.k(null,1,[$CLJS.cv,"should be a symbol"],
null)],null),new $CLJS.k(null,1,[$CLJS.Yu,new $CLJS.k(null,1,[$CLJS.cv,function(a){a=$CLJS.Uf(a);var b=$CLJS.M.h(a,$CLJS.hm);return"number"===typeof $CLJS.M.h(a,$CLJS.vl)?["should be at least ",$CLJS.p.g($CLJS.C($CLJS.js.g(b)))].join(""):"should be a number"}],null)],null),new $CLJS.k(null,1,[$CLJS.Wu,new $CLJS.k(null,1,[$CLJS.cv,"should be a list"],null)],null),new $CLJS.k(null,1,[$CLJS.Yu,new $CLJS.k(null,1,[$CLJS.cv,function(a){a=$CLJS.Uf(a);a=$CLJS.M.h(a,fv);return["did you mean ",$CLJS.Uu.h(" or ",
$CLJS.xg.h($CLJS.$d,a))].join("")}],null)],null),new $CLJS.k(null,1,[$CLJS.Wu,new $CLJS.k(null,1,[$CLJS.cv,"should be a qualified ident"],null)],null),new $CLJS.k(null,1,[$CLJS.Wu,new $CLJS.k(null,1,[$CLJS.cv,"should be a coll"],null)],null),new $CLJS.k(null,1,[$CLJS.Wu,new $CLJS.k(null,1,[$CLJS.cv,"invalid function"],null)],null),new $CLJS.k(null,1,[$CLJS.Wu,new $CLJS.k(null,1,[$CLJS.cv,"should be a keyword"],null)],null),new $CLJS.k(null,1,[$CLJS.Yu,new $CLJS.k(null,1,[$CLJS.cv,function(a){a=$CLJS.Uf(a);
var b=$CLJS.M.h(a,$CLJS.hm);$CLJS.M.h(a,Lba);a=$CLJS.is.g(b);b=$CLJS.Uf(a);a=$CLJS.M.h(b,$CLJS.vk);b=$CLJS.M.h(b,$CLJS.cm);return $CLJS.m($CLJS.m(a)?$CLJS.F.h(a,b):a)?["should have ",$CLJS.p.g(a)," elements"].join(""):$CLJS.m($CLJS.m(a)?b:a)?["should have between ",$CLJS.p.g(a)," and ",$CLJS.p.g(b)," elements"].join(""):$CLJS.m(a)?["should have at least ",$CLJS.p.g(a)," elements"].join(""):$CLJS.m(b)?["should have at most ",$CLJS.p.g(b)," elements"].join(""):null}],null)],null),new $CLJS.k(null,1,
[$CLJS.Wu,new $CLJS.k(null,1,[$CLJS.cv,"should be a simple symbol"],null)],null),new $CLJS.k(null,1,[$CLJS.Wu,new $CLJS.k(null,1,[$CLJS.cv,"should be empty"],null)],null),new $CLJS.k(null,1,[$CLJS.Wu,new $CLJS.k(null,1,[$CLJS.cv,"should be an integer"],null)],null),new $CLJS.k(null,1,[$CLJS.Wu,new $CLJS.k(null,1,[$CLJS.cv,"missing required key"],null)],null),new $CLJS.k(null,1,[$CLJS.Yu,new $CLJS.k(null,1,[$CLJS.cv,function(a){var b=$CLJS.Uf(a);a=$CLJS.M.h(b,$CLJS.hm);b=$CLJS.M.h(b,$CLJS.vl);a=$CLJS.E($CLJS.js.g(a));
return["invalid tuple size ",$CLJS.p.g($CLJS.E(b)),", expected ",$CLJS.p.g(a)].join("")}],null)],null),new $CLJS.k(null,1,[$CLJS.Wu,new $CLJS.k(null,1,[$CLJS.cv,"should be zero"],null)],null),new $CLJS.k(null,1,[$CLJS.Wu,new $CLJS.k(null,1,[$CLJS.cv,"should be a keyword"],null)],null),new $CLJS.k(null,1,[$CLJS.Wu,new $CLJS.k(null,1,[$CLJS.cv,"should be nil"],null)],null),new $CLJS.k(null,1,[$CLJS.Wu,new $CLJS.k(null,1,[$CLJS.cv,"should be a qualified keyword"],null)],null),new $CLJS.k(null,1,[$CLJS.Wu,
new $CLJS.k(null,1,[$CLJS.cv,"should be a string"],null)],null),new $CLJS.k(null,1,[$CLJS.Wu,new $CLJS.k(null,1,[$CLJS.cv,"end of input"],null)],null),new $CLJS.k(null,1,[$CLJS.Wu,new $CLJS.k(null,1,[$CLJS.cv,"should be a qualified symbol"],null)],null),new $CLJS.k(null,1,[$CLJS.Wu,new $CLJS.k(null,1,[$CLJS.cv,"input remaining"],null)],null),new $CLJS.k(null,1,[$CLJS.Wu,new $CLJS.k(null,1,[$CLJS.cv,"should be a seq"],null)],null),new $CLJS.k(null,1,[$CLJS.Wu,new $CLJS.k(null,1,[$CLJS.cv,"should be a non-negative int"],
null)],null),new $CLJS.k(null,1,[$CLJS.Wu,new $CLJS.k(null,1,[$CLJS.cv,"should be a set"],null)],null),new $CLJS.k(null,1,[$CLJS.Wu,new $CLJS.k(null,1,[$CLJS.cv,"should be some"],null)],null),new $CLJS.k(null,1,[$CLJS.Wu,new $CLJS.k(null,1,[$CLJS.cv,"should be positive"],null)],null),new $CLJS.k(null,1,[$CLJS.Wu,new $CLJS.k(null,1,[$CLJS.cv,"should be a boolean"],null)],null),new $CLJS.k(null,1,[$CLJS.Wu,new $CLJS.k(null,1,[$CLJS.cv,"should be an fn"],null)],null),new $CLJS.k(null,1,[$CLJS.Wu,new $CLJS.k(null,
1,[$CLJS.cv,"should be a sequential"],null)],null),new $CLJS.k(null,1,[$CLJS.Wu,new $CLJS.k(null,1,[$CLJS.cv,"should be a uuid"],null)],null),new $CLJS.k(null,1,[$CLJS.Wu,new $CLJS.k(null,1,[$CLJS.cv,"unknown error"],null)],null),new $CLJS.k(null,1,[$CLJS.Wu,new $CLJS.k(null,1,[$CLJS.cv,"should be a number"],null)],null),new $CLJS.k(null,1,[$CLJS.Wu,new $CLJS.k(null,1,[$CLJS.cv,"invalid dispatch value"],null)],null),new $CLJS.k(null,1,[$CLJS.Wu,new $CLJS.k(null,1,[$CLJS.cv,"should be a double"],null)],
null),new $CLJS.k(null,1,[$CLJS.Wu,new $CLJS.k(null,1,[$CLJS.cv,"should be a seqable"],null)],null),new $CLJS.k(null,1,[$CLJS.Yu,new $CLJS.k(null,1,[$CLJS.cv,function(a){a=$CLJS.Uf(a);a=$CLJS.M.h(a,$CLJS.hm);return["should be ",$CLJS.p.g($CLJS.C($CLJS.js.g(a)))].join("")}],null)],null),new $CLJS.k(null,1,[$CLJS.Wu,new $CLJS.k(null,1,[$CLJS.cv,"should be a boolean"],null)],null),new $CLJS.k(null,1,[$CLJS.Yu,new $CLJS.k(null,1,[$CLJS.cv,function(a){a=$CLJS.Uf(a);var b=$CLJS.M.h(a,$CLJS.hm);return"number"===
typeof $CLJS.M.h(a,$CLJS.vl)?["should be smaller than ",$CLJS.p.g($CLJS.C($CLJS.js.g(b)))].join(""):"should be a number"}],null)],null),new $CLJS.k(null,1,[$CLJS.Wu,new $CLJS.k(null,1,[$CLJS.cv,"should be negative"],null)],null),new $CLJS.k(null,1,[$CLJS.Yu,new $CLJS.k(null,1,[$CLJS.cv,function(a){a=$CLJS.Uf(a);a=$CLJS.M.h(a,fv);return["should be spelled ",$CLJS.Uu.h(" or ",$CLJS.xg.h($CLJS.$d,a))].join("")}],null)],null),new $CLJS.k(null,1,[$CLJS.Wu,new $CLJS.k(null,1,[$CLJS.cv,"invalid type"],null)],
null),new $CLJS.k(null,1,[$CLJS.Wu,new $CLJS.k(null,1,[$CLJS.cv,"should be a positive int"],null)],null),new $CLJS.k(null,1,[$CLJS.Wu,new $CLJS.k(null,1,[$CLJS.cv,"should be any"],null)],null),new $CLJS.k(null,1,[$CLJS.Wu,new $CLJS.k(null,1,[$CLJS.cv,"should be an indexed"],null)],null)]);