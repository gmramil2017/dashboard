var window=global;var $CLJS=require("./cljs_env.js");require("./cljs.core.js");require("./clojure.string.js");require("./metabase.types.js");require("./metabase.util.malli.registry.js");
'use strict';var vK,Qga,AK,GK;vK=function(a){return $CLJS.XG(a,$CLJS.hl)||$CLJS.XG(a,$CLJS.Vj)};$CLJS.wK=new $CLJS.N("metabase.lib.schema.common","int-greater-than-zero","metabase.lib.schema.common/int-greater-than-zero",1130338092);Qga=new $CLJS.N("metabase.lib.schema.common","external-op","metabase.lib.schema.common/external-op",1918684841);$CLJS.xK=new $CLJS.N("lib","external-op","lib/external-op",-1470923877);$CLJS.yK=new $CLJS.N("mbql.clause","field","mbql.clause/field",1497292735);
$CLJS.zK=new $CLJS.N("metabase.lib.schema.common","non-blank-string","metabase.lib.schema.common/non-blank-string",-2032366619);AK=new $CLJS.N("metabase.lib.schema.common","semantic-type","metabase.lib.schema.common/semantic-type",-1623124128);$CLJS.BK=new $CLJS.N(null,"database-type","database-type",-426840562);$CLJS.CK=new $CLJS.N("metabase.lib.schema.common","int-greater-than-or-equal-to-zero","metabase.lib.schema.common/int-greater-than-or-equal-to-zero",-1646435681);
$CLJS.DK=new $CLJS.N("metabase.lib.schema.common","options","metabase.lib.schema.common/options",-1078359294);$CLJS.EK=new $CLJS.N("lib","uuid","lib/uuid",-2145250720);$CLJS.FK=new $CLJS.N("metabase.lib.schema.common","base-type","metabase.lib.schema.common/base-type",999524206);GK=new $CLJS.N("metabase.lib.schema.common","uuid","metabase.lib.schema.common/uuid",1172938098);$CLJS.rK($CLJS.zK,new $CLJS.R(null,3,5,$CLJS.S,[$CLJS.Qj,new $CLJS.R(null,2,5,$CLJS.S,[$CLJS.Tl,new $CLJS.k(null,1,[$CLJS.vk,1],null)],null),new $CLJS.R(null,3,5,$CLJS.S,[$CLJS.pt,new $CLJS.k(null,1,[$CLJS.Wu,"non-blank string"],null),$CLJS.dg($CLJS.lF)],null)],null));$CLJS.rK($CLJS.CK,new $CLJS.R(null,2,5,$CLJS.S,[$CLJS.zt,new $CLJS.k(null,1,[$CLJS.vk,0],null)],null));$CLJS.rK($CLJS.wK,new $CLJS.R(null,2,5,$CLJS.S,[$CLJS.zt,new $CLJS.k(null,1,[$CLJS.vk,1],null)],null));
$CLJS.rK(GK,new $CLJS.R(null,2,5,$CLJS.S,[$CLJS.Tl,new $CLJS.k(null,2,[$CLJS.vk,36,$CLJS.cm,36],null)],null));$CLJS.rK(AK,new $CLJS.R(null,3,5,$CLJS.S,[$CLJS.pt,new $CLJS.k(null,2,[$CLJS.Wu,"valid semantic type",$CLJS.Yu,function(a){a=$CLJS.Uf(a);a=$CLJS.M.h(a,$CLJS.vl);return["Not a valid semantic type: ",$CLJS.gj.l($CLJS.J([a]))].join("")}],null),vK],null));
$CLJS.rK($CLJS.FK,new $CLJS.R(null,3,5,$CLJS.S,[$CLJS.pt,new $CLJS.k(null,2,[$CLJS.Wu,"valid base type",$CLJS.Yu,function(a){a=$CLJS.Uf(a);a=$CLJS.M.h(a,$CLJS.vl);return["Not a valid base type: ",$CLJS.gj.l($CLJS.J([a]))].join("")}],null),function(a){return $CLJS.XG(a,$CLJS.sl)&&!vK(a)}],null));
$CLJS.rK($CLJS.DK,new $CLJS.R(null,8,5,$CLJS.S,[$CLJS.bm,new $CLJS.R(null,2,5,$CLJS.S,[$CLJS.EK,GK],null),new $CLJS.R(null,3,5,$CLJS.S,[$CLJS.LF,new $CLJS.k(null,1,[$CLJS.Wj,!0],null),new $CLJS.R(null,2,5,$CLJS.S,[$CLJS.rt,$CLJS.FK],null)],null),new $CLJS.R(null,3,5,$CLJS.S,[$CLJS.qk,new $CLJS.k(null,1,[$CLJS.Wj,!0],null),new $CLJS.R(null,2,5,$CLJS.S,[$CLJS.rt,$CLJS.FK],null)],null),new $CLJS.R(null,3,5,$CLJS.S,[$CLJS.Pl,new $CLJS.k(null,1,[$CLJS.Wj,!0],null),new $CLJS.R(null,2,5,$CLJS.S,[$CLJS.rt,
AK],null)],null),new $CLJS.R(null,3,5,$CLJS.S,[$CLJS.BK,new $CLJS.k(null,1,[$CLJS.Wj,!0],null),new $CLJS.R(null,2,5,$CLJS.S,[$CLJS.rt,$CLJS.zK],null)],null),new $CLJS.R(null,3,5,$CLJS.S,[$CLJS.V,new $CLJS.k(null,1,[$CLJS.Wj,!0],null),new $CLJS.R(null,2,5,$CLJS.S,[$CLJS.rt,$CLJS.zK],null)],null),new $CLJS.R(null,3,5,$CLJS.S,[$CLJS.YH,new $CLJS.k(null,1,[$CLJS.Wj,!0],null),new $CLJS.R(null,2,5,$CLJS.S,[$CLJS.rt,$CLJS.zK],null)],null)],null));
$CLJS.rK(Qga,new $CLJS.R(null,5,5,$CLJS.S,[$CLJS.bm,new $CLJS.R(null,2,5,$CLJS.S,[$CLJS.wl,new $CLJS.R(null,2,5,$CLJS.S,[$CLJS.lm,$CLJS.xK],null)],null),new $CLJS.R(null,2,5,$CLJS.S,[$CLJS.VI,new $CLJS.R(null,3,5,$CLJS.S,[$CLJS.Gk,$CLJS.Tl,$CLJS.Jk],null)],null),new $CLJS.R(null,3,5,$CLJS.S,[$CLJS.Sk,new $CLJS.k(null,1,[$CLJS.Wj,!0],null),$CLJS.DK],null),new $CLJS.R(null,2,5,$CLJS.S,[$CLJS.pl,new $CLJS.R(null,2,5,$CLJS.S,[$CLJS.rl,$CLJS.Et],null)],null)],null));