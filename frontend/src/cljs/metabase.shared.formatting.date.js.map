{"version":3,"sources":["metabase/shared/formatting/date.cljc"],"mappings":"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","names":["metabase.shared.formatting.date/range-separator","metabase.shared.formatting.date/parameter-formatters","metabase.shared.formatting.internal.date-builder/->formatter","metabase.shared.formatting.internal.date-formatters/big-endian-day","metabase.shared.formatting.date/format-for-parameter","value","options","metabase.shared.formatting.internal.date-options/prepare-options","t","metabase.shared.util.time.coerce_to_timestamp","cljs.core/not","metabase.shared.util.time.valid_QMARK_","temp__5802__auto__","fmt","G__81666","vec__81667","cljs.core.nth","start","end","metabase.shared.util.time.to_range","metabase.shared.util.time.same_day_QMARK_","p__81673","vec__81674","metabase.shared.formatting.date/format-range-with-unit-inner","metabase.shared.formatting.constants/condense-ranges?","metabase.shared.util.time.same_year_QMARK_","metabase.shared.formatting.internal.date-formatters/month-day-year","metabase.shared.util.time.same_month_QMARK_","metabase.shared.formatting.internal.date-formatters/month-day","metabase.shared.formatting.date/format-range-with-unit","metabase.shared.formatting.date/format-datetime-with-unit","map__81677","cljs.core/--destructure-map","cljs.core.get","is-exclude","no-range","type","unit","G__81681","cljs.core/Keyword","metabase.shared.formatting.internal.date-formatters/hour-only","metabase.shared.formatting.internal.date-formatters/weekday","cljs.core.ex_info","and__5043__auto__","cljs.core._EQ_","fexpr__81682","fexpr__81683","metabase.shared.formatting.internal.date-formatters/options->formatter"],"sourcesContent":["(ns metabase.shared.formatting.date\n  \"Formatting for dates, times, and ranges.\"\n  (:require\n   [metabase.shared.formatting.constants :as constants]\n   [metabase.shared.formatting.internal.date-builder :as builder]\n   [metabase.shared.formatting.internal.date-formatters :as formatters]\n   [metabase.shared.formatting.internal.date-options :as options]\n   [metabase.shared.util.time :as shared.ut]))\n\n(def range-separator\n  \"The range separator is a Unicode en-dash, not an ASCII hyphen.\"\n  \" \\u2013 \")\n\n;;; -------------------------------------------- Parameter Formatting ---------------------------------------------\n(def ^:private parameter-formatters\n  {:month   (builder/->formatter [:year \"-\" :month-dd])\n   :quarter (builder/->formatter [\"Q\" :quarter \"-\" :year])\n   :day     formatters/big-endian-day})\n\n(defn ^:export format-for-parameter\n  \"Returns a formatting date string for a datetime used as a parameter to a Card.\"\n  [value options]\n  (let [options (options/prepare-options options)\n        t       (shared.ut/coerce-to-timestamp value options)]\n    (if (not (shared.ut/valid? t))\n      ;; Fall back to a basic string rendering if we couldn't parse it.\n      (str value)\n      (if-let [fmt (parameter-formatters (:unit options))]\n        ;; A few units have special formats.\n        (fmt t)\n        ;; Otherwise, render as a day or day range.\n        (let [[start end] (shared.ut/to-range t options)]\n          (if (shared.ut/same-day? start end)\n            (formatters/big-endian-day start)\n            (str (formatters/big-endian-day start) \"~\" (formatters/big-endian-day end))))))))\n\n;;; ------------------------------------------------ Format Range -------------------------------------------------\n(defn- format-range-with-unit-inner [[start end] options]\n  (cond\n    ;; Uncondensed, or in different years: January 1, 2018 - January 23, 2019\n    (or (not (constants/condense-ranges? options))\n        (not (shared.ut/same-year? start end)))\n    (let [fmt (formatters/month-day-year options)]\n      (str (fmt start) range-separator (fmt end)))\n\n    ;; Condensed, but different months: January 1 - February 2, 2018\n    (not (shared.ut/same-month? start end))\n    (str ((formatters/month-day options) start)\n         range-separator\n         ((formatters/month-day-year options) end))\n\n    ;; Condensed, and same month: January 1 - 14, 2018\n    :else (str ((formatters/month-day options) start)\n               range-separator\n               ((builder/->formatter [:day-of-month-d \", \" :year]) end))))\n\n(defn ^:export format-range-with-unit\n  \"Returns a string with this datetime formatted as a range, rounded to the given `:unit`.\"\n  [value options]\n  (let [options (options/prepare-options options)\n        t       (shared.ut/coerce-to-timestamp value options)]\n    (if (shared.ut/valid? t)\n      (format-range-with-unit-inner (shared.ut/to-range t options) options)\n      ;; Best-effort fallback if we failed to parse - .toString the input.\n      (str value))))\n\n;;; ---------------------------------------------- Format Single Date -----------------------------------------------\n(defn ^:export format-datetime-with-unit\n  \"Returns a string with this datetime formatted as a single value, rounded to the given `:unit`.\"\n  [value options]\n  (let [{:keys [is-exclude no-range type unit]\n         :as options}                          (options/prepare-options options)\n        t                                      (shared.ut/coerce-to-timestamp value options)]\n    (cond\n      is-exclude (case unit\n                   :hour-of-day (formatters/hour-only t)\n                   :day-of-week (formatters/weekday t)\n                   (throw (ex-info \"is-exclude option is only compatible with hour-of-day and day-of-week units\"\n                                   {:options options})))\n\n      ;; Weeks in tooltips and cells get formatted specially.\n      (and (= unit :week) (#{\"tooltip\" \"cell\"} type) (not no-range))\n      (format-range-with-unit value options)\n\n      :else ((formatters/options->formatter options) t))))\n"]}