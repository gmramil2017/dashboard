{"version":3,"sources":["metabase/shared/formatting/internal/numbers_core.cljc"],"mappings":"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","names":["p__79615","map__79616","cljs.core/--destructure-map","cljs.core.get","metabase.shared.formatting.internal.numbers-core/default-decimal-places","currency","number-style","and__5043__auto__","cljs.core._EQ_","places","cljs.core.keyword","G__79622","fexpr__79621","cljs.core/deref","metabase.shared.util.currency/currency-map","metabase.shared.formatting.internal.numbers-core/prep-options","options","opts","cljs.core.dissoc","cljs.core.assoc","G__79624","cljs.core.merge","expand-decimals","metabase.shared.formatting.internal.numbers-core/non-breaking-space","metabase$shared$formatting$internal$numbers-core$NumberFormatter$format_number_basic$dyn","x__5393__auto__","m__5394__auto__","metabase.shared.formatting.internal.numbers-core/format-number-basic","goog/typeOf","m__5392__auto__","cljs.core/missing-protocol","metabase$shared$formatting$internal$numbers-core$NumberFormatter$split_exponent$dyn","metabase.shared.formatting.internal.numbers-core/split-exponent","metabase$shared$formatting$internal$numbers-core$NumberFormatter$wrap_currency$dyn","metabase.shared.formatting.internal.numbers-core/wrap-currency","metabase.shared.formatting.internal.numbers-core/NumberFormatter","this","number","formatted","text"],"sourcesContent":["(ns metabase.shared.formatting.internal.numbers-core\n  \"Cross-platform foundation for the number formatters.\"\n  (:require\n   [metabase.shared.util.currency :as currency]))\n\n;; Options ========================================================================================================\n(defn- default-decimal-places [{:keys [currency number-style]}]\n  (if (and currency (= number-style \"currency\"))\n    (let [places (-> currency keyword (@currency/currency-map) :decimal_digits)]\n      {:minimum-fraction-digits places\n       :maximum-fraction-digits places})\n    {:maximum-fraction-digits 2}))\n\n(defn prep-options\n  \"Transforms input options with defaults and other adjustments.\n  Defaults:\n  - `:maximum-fraction-digits` is 2 if not specified\n  - BUT if `:currency` is set, `:minimum-fraction-digits = :maximum-fraction-digits = (:decimal_digits currency)`\n\n  Adjustments:\n  - :decimals is dropped, and both min and max fraction-digits are set to that value.\"\n  [options]\n  (letfn [(expand-decimals [opts]\n            (-> opts\n                (dissoc :decimals)\n                (assoc :maximum-fraction-digits (:decimals options)\n                       :minimum-fraction-digits (:decimals options))))]\n    (cond-> (merge (default-decimal-places options) options)\n      (:decimals options) expand-decimals)))\n\n(def non-breaking-space\n  \"A Unicode non-breaking space character.\"\n  \\u00a0)\n\n;; Formatter abstraction ==========================================================================================\n(defprotocol NumberFormatter\n  (format-number-basic [this number] \"Returns a String that represents the number in this format.\")\n  (split-exponent [this formatted]\n                  \"Given a scientific notation string, split it at the locale-dependent exponent.\n                  Returns a map `{:mantissa \\\"123\\\" :exponent \\\"+4\\\"}`.\")\n  (wrap-currency [this text] \"Given an opaque string, wraps it with the currency prefix/suffix for this locale.\"))\n"]}