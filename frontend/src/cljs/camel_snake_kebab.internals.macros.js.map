{"version":3,"sources":["camel_snake_kebab/internals/macros.cljc"],"mappings":"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","names":["camel-snake-kebab.internals.macros/resolve","sym","cljs.core.sequence","cljs.core/seq","cljs.core.concat","cljs.core/List","cljs.core/eval","cljs.core/vec","camel-snake-kebab.internals.macros/type-preserving-function","case-label","first-fn","rest-fn","sep","cljs.core.symbol","camel-snake-kebab.internals.macros/type-converting-functions","type-label","camel-snake-kebab.internals.misc/convert-case","iter__5523__auto__","s__52510","cljs.core/LazySeq","temp__5804__auto__","cljs.core/chunked-seq?","c__5521__auto__","size__5522__auto__","cljs.core/count","b__52512","cljs.core/chunk-buffer","i__52511","vec__52518","cljs.core/-nth","cljs.core.nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__52509","cljs.core/chunk-rest","vec__52528","cljs.core/first","cljs.core/cons","cljs.core/rest","type-converter","make-name","cljs.core/chunk-first"],"sourcesContent":["(ns ^:no-doc camel-snake-kebab.internals.macros\n  #?(:cljs (:refer-clojure :exclude [resolve]))\n  (:require [camel-snake-kebab.internals.alter-name :refer [alter-name]]\n            [camel-snake-kebab.internals.misc :refer [convert-case]]))\n\n#?(:cljs\n   (defn resolve [sym]\n     ;; On self-hosted ClojureScript, macros are evaluated under the `:cljs` conditional branch\n     ;; In that case, we need to use `eval` in order to resolve variables instead of `resolve`\n     (eval `(~'var ~sym))))\n\n(defn type-preserving-function [case-label first-fn rest-fn sep]\n  `(defn ~(symbol (str \"->\" case-label)) [s# & rest#]\n     (let [convert-case# #(apply convert-case ~first-fn ~rest-fn ~sep % rest#)]\n       (alter-name s# convert-case#))))\n\n(defn type-converting-functions [case-label first-fn rest-fn sep]\n  (letfn [(make-name [type-label]\n            (->> (str case-label \" \" type-label)\n                 (convert-case (resolve first-fn) (resolve rest-fn) sep)\n                 (str \"->\")\n                 (symbol)))]\n    (for [[type-label type-converter] {\"string\" `identity \"symbol\" `symbol \"keyword\" `keyword}]\n      `(defn ~(make-name type-label) [s# & rest#]\n         (~type-converter (apply convert-case ~first-fn ~rest-fn ~sep (name s#) rest#))))))\n\n(defmacro defconversion [case-label first-fn rest-fn sep]\n  `(do  ~(type-preserving-function  case-label first-fn rest-fn sep)\n       ~@(type-converting-functions case-label first-fn rest-fn sep)))\n"],"x_google_ignoreList":[0]}