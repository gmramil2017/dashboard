{"version":3,"sources":["metabase/lib/limit.cljc"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AASA,AAAAA,4GAAA,wDAAA,WACGC,MAAMC,aAAaC;AADtB,AAEE,IAAAC,qBAAiB,AAAA,sFAAQ,AAACE,8BAAqBL,MAAMC;AAArD,AAAA,oBAAAE;AAAA,AAAA,YAAAA,RAAWC;AAAX,AACE,2DAAA,PAAKA,uDAAa,AAAAE,oCAAA,MAAA,OAAwBF;;AAD5C;;;AAGF,AAAA;;;;;;;;2BAAA,mCAAAG,9DAAkBE;AAAlB,AAAA,IAAAD,WAAA,AAAA;AAAA,AAAA,QAAAA;KAAA;AAAA,OAAAC,uDAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;KAAA;AAAA,OAAAA,uDAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;;AAAA,MAAA,KAAAC,MAAA,CAAA,8DAAA,AAAA;;;;;;AAAA,CAAA,yDAAA,zDAAkBD,oEAEdT,MAAMW;AAFV,AAAA;AAGG,oEAAA,7DAACC,uDAAMZ,WAASW;;;AAHnB,CAAA,yDAAA,zDAAkBF,oEAKdT,MACAC,aACAU;AAPJ,AAAA;AAQG,OAACE,qCAA4Bb,MAAMC,aAAa,WAAKa;AAAL,AACE,oBAAIH;AACF,2DAAA,pDAACI,8CAAMD,8DAAaH;;AACpB,4DAAA,rDAACK,+CAAOF;;;;;AAX/D,CAAA,mDAAA,nDAAkBL;;AAAlB,AAaA,AAAA;;;;;;;;mCAAA,2CAAAF,9EAAkBW;AAAlB,AAAA,IAAAD,WAAA,AAAA;AAAA,AAAA,QAAAA;KAAA;AAAA,OAAAC,+DAAA,CAAA,UAAA;;;KAAA;AAAA,OAAAA,+DAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;;AAAA,MAAA,KAAAR,MAAA,CAAA,8DAAA,AAAA;;;;;;AAAA,CAAA,iEAAA,jEAAkBQ,4EAEdlB;AAFJ,AAAA;AAGG,4EAAA,rEAACmB,+DAAcnB;;;AAHlB,CAAA,iEAAA,jEAAkBkB,4EAIdlB,MACAC;AALJ,AAAA;AAMG,OAAA,sFAAQ,AAACI,8BAAqBL,MAAMC;;;AANvC,CAAA,2DAAA,3DAAkBiB;;AAAlB","names":["metabase.lib.metadata.calculation/describe-top-level-key-method","query","stage-number","_k","temp__5804__auto__","limit","metabase.lib.util/query-stage","metabase.shared.util.i18n/js-i18n-n","var_args","G__80328","metabase.lib.limit/limit","js/Error","n","metabase.lib.limit.limit","metabase.lib.util/update-query-stage","stage","cljs.core.assoc","cljs.core.dissoc","G__80336","metabase.lib.limit/current-limit","metabase.lib.limit.current_limit"],"sourcesContent":["(ns metabase.lib.limit\n  (:require\n   [metabase.lib.metadata.calculation :as lib.metadata.calculation]\n   [metabase.lib.schema :as lib.schema]\n   [metabase.lib.schema.common :as lib.schema.common]\n   [metabase.lib.util :as lib.util]\n   [metabase.shared.util.i18n :as i18n]\n   [metabase.util.malli :as mu]))\n\n(defmethod lib.metadata.calculation/describe-top-level-key-method :limit\n  [query stage-number _k]\n  (when-let [limit (:limit (lib.util/query-stage query stage-number))]\n    (str limit \\space (i18n/trun \"row\" \"rows\" limit))))\n\n(mu/defn ^:export limit :- ::lib.schema/query\n  \"Set the maximum number of rows to be returned by a stage of a query to `n`. If `n` is `nil`, remove the limit.\"\n  ([query n]\n   (limit query -1 n))\n\n  ([query        :- ::lib.schema/query\n    stage-number :- :int\n    n            :- [:maybe ::lib.schema.common/int-greater-than-zero]]\n   (lib.util/update-query-stage query stage-number (fn [stage]\n                                                     (if n\n                                                       (assoc stage :limit n)\n                                                       (dissoc stage :limit))))))\n\n(mu/defn ^:export current-limit :- [:maybe ::lib.schema.common/int-greater-than-zero]\n  \"Get the maximum number of rows to be returned by a stage of a query. `nil` indicates there is no limit\"\n  ([query :- ::lib.schema/query]\n   (current-limit query -1))\n  ([query :- ::lib.schema/query\n    stage-number :- :int]\n   (:limit (lib.util/query-stage query stage-number))))\n"]}