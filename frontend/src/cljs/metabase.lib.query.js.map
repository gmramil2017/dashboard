{"version":3,"sources":["metabase/lib/query.cljc"],"mappings":"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","names":["metabase.lib.normalize/normalize","query","metabase.lib.normalize.normalize_map","cljs.core/keyword","cljs.core.partial","cljs.core/mapv","metabase.lib.metadata.calculation/metadata-method","_query","_stage-number","cljs.core.ex_info","metabase.lib.metadata.calculation/returned-columns-method","stage-number","a-query","options","metabase.lib.metadata.calculation.returned_columns","metabase.lib.util/query-stage","metabase.lib.metadata.calculation/display-name-method","x","style","metabase.lib.metadata.calculation.display_name","var_args","G__65278","metabase.lib.query/query-with-stages","js/Error","metadata-providerable","stages","metabase.lib.query.query_with_stages","metabase.lib.metadata/database","database-id","metabase.lib.metadata/->metadata-provider","G__65285","metabase.lib.query/query-with-stage","stage","metabase.lib.query/query-from-existing","metabase.lib.util/pipeline","js/metabase","js/metabase.lib","js/metabase.lib.query","js/metabase.lib.query.->query","method-table__5642__auto__","cljs.core.atom","prefer-table__5643__auto__","method-cache__5644__auto__","cached-hierarchy__5645__auto__","hierarchy__5646__auto__","cljs.core.get","fexpr__65289","cljs.core/MultiFn","cljs.core.symbol","metabase.lib.query/->query","_metadata-providerable","metabase.lib.dispatch/dispatch-value","metabase.lib.hierarchy/hierarchy","cljs.core.assoc","table-metadata","metabase.lib.query/query","p__65362","map__65363","cljs.core/--destructure-map","metabase.lib.query/saved-question-query","mbql-query","metadata","saved-question","metabase.shared.util.i18n/js-i18n","level__47249__auto__","metabase.util.log/glogi-level","logger__47250__auto__","metabase.util.log/is-loggable?","x__47251__auto__","lambdaisland.glogi.log","cljs.core/print-str","cljs.core.print_str","metabase.shared.util.i18n.js_i18n","cljs.core.pr_str","G__65364","metabase.lib.convert/->pMBQL","metabase.lib.util.update_query_stage","cljs.core/assoc","metabase.lib.util/->stage-metadata","metabase.lib.query/query-from-legacy-inner-query","inner-query","metabase.lib.convert/legacy-query-from-inner-query"],"sourcesContent":["(ns metabase.lib.query\n  (:refer-clojure :exclude [remove])\n  (:require\n   [metabase.lib.convert :as lib.convert]\n   [metabase.lib.dispatch :as lib.dispatch]\n   [metabase.lib.hierarchy :as lib.hierarchy]\n   [metabase.lib.metadata :as lib.metadata]\n   [metabase.lib.metadata.calculation :as lib.metadata.calculation]\n   [metabase.lib.normalize :as lib.normalize]\n   [metabase.lib.schema :as lib.schema]\n   [metabase.lib.schema.id :as lib.schema.id]\n   [metabase.lib.util :as lib.util]\n   [metabase.shared.util.i18n :as i18n]\n   [metabase.util.log :as log]\n   [metabase.util.malli :as mu]))\n\n(defmethod lib.normalize/normalize :mbql/query\n  [query]\n  (lib.normalize/normalize-map\n   query\n   keyword\n   {:type   keyword\n    :stages (partial mapv lib.normalize/normalize)}))\n\n(defmethod lib.metadata.calculation/metadata-method :mbql/query\n  [_query _stage-number _query]\n  ;; not i18n'ed because this shouldn't be developer-facing.\n  (throw (ex-info \"You can't calculate a metadata map for a query! Use lib.metadata.calculation/returned-columns-method instead.\"\n                  {})))\n\n(defmethod lib.metadata.calculation/returned-columns-method :mbql/query\n  [query stage-number a-query options]\n  (lib.metadata.calculation/returned-columns query stage-number (lib.util/query-stage a-query stage-number) options))\n\n(defmethod lib.metadata.calculation/display-name-method :mbql/query\n  [query stage-number x style]\n  (lib.metadata.calculation/display-name query stage-number (lib.util/query-stage x stage-number) style))\n\n(mu/defn query-with-stages :- ::lib.schema/query\n  \"Create a query from a sequence of stages.\"\n  ([metadata-providerable stages]\n   (query-with-stages (:id (lib.metadata/database metadata-providerable)) metadata-providerable stages))\n\n  ([database-id           :- ::lib.schema.id/database\n    metadata-providerable :- lib.metadata/MetadataProviderable\n    stages]\n   {:lib/type     :mbql/query\n    :lib/metadata (lib.metadata/->metadata-provider metadata-providerable)\n    :database     database-id\n    :stages       stages}))\n\n(mu/defn query-with-stage\n  \"Create a query from a specific stage.\"\n  ([metadata-providerable stage]\n   (query-with-stages metadata-providerable [stage]))\n\n  ([database-id           :- ::lib.schema.id/database\n    metadata-providerable :- lib.metadata/MetadataProviderable\n    stage]\n   (query-with-stages database-id metadata-providerable [stage])))\n\n(mu/defn ^:private query-from-existing :- ::lib.schema/query\n  [metadata-providerable :- lib.metadata/MetadataProviderable\n   query                 :- lib.util/LegacyOrPMBQLQuery]\n  (let [query (lib.util/pipeline query)]\n    (query-with-stages metadata-providerable (:stages query))))\n\n(defmulti ^:private ->query\n  \"Implementation for [[query]].\"\n  {:arglists '([metadata-providerable x])}\n  (fn [_metadata-providerable x]\n    (lib.dispatch/dispatch-value x))\n  :hierarchy lib.hierarchy/hierarchy)\n\n(defmethod ->query :dispatch-type/map\n  [metadata-providerable query]\n  (query-from-existing metadata-providerable query))\n\n;;; this should already be a query in the shape we want, but let's make sure it has the database metadata that was\n;;; passed in\n(defmethod ->query :mbql/query\n  [metadata-providerable query]\n  (assoc query :lib/metadata (lib.metadata/->metadata-provider metadata-providerable)))\n\n(defmethod ->query :metadata/table\n  [metadata-providerable table-metadata]\n  (query-with-stages metadata-providerable\n                     [{:lib/type     :mbql.stage/mbql\n                       :source-table (:id table-metadata)}]))\n\n(mu/defn query :- ::lib.schema/query\n  \"Create a new MBQL query from anything that could conceptually be an MBQL query, like a Database or Table or an\n  existing MBQL query or saved question or whatever. If the thing in question does not already include metadata, pass\n  it in separately -- metadata is needed for most query manipulation operations.\"\n  [metadata-providerable :- lib.metadata/MetadataProviderable\n   x]\n  (->query metadata-providerable x))\n\n(mu/defn saved-question-query :- ::lib.schema/query\n  \"Convenience for creating a query from a Saved Question (i.e., a Card).\"\n  [metadata-providerable :- lib.metadata/MetadataProviderable\n   {mbql-query :dataset-query, metadata :result-metadata, :as saved-question}]\n  (assert mbql-query (i18n/tru \"Saved Question is missing query\"))\n  (when-not metadata\n    (log/warn (i18n/trs \"Saved Question {0} {1} is missing result metadata\"\n                        (:id saved-question)\n                        (pr-str (:name saved-question-query)))))\n  (let [mbql-query (cond-> (assoc (lib.convert/->pMBQL mbql-query)\n                                  :lib/metadata (lib.metadata/->metadata-provider metadata-providerable))\n                     metadata\n                     (lib.util/update-query-stage -1 assoc :lib/stage-metadata (lib.util/->stage-metadata metadata)))]\n    (query metadata-providerable mbql-query)))\n\n(mu/defn query-from-legacy-inner-query :- ::lib.schema/query\n  \"Create a pMBQL query from a legacy inner query.\"\n  [metadata-providerable :- lib.metadata/MetadataProviderable\n   database-id           :- ::lib.schema.id/database\n   inner-query           :- :map]\n  (->> (lib.convert/legacy-query-from-inner-query database-id inner-query)\n       lib.convert/->pMBQL\n       (query metadata-providerable)))\n"]}