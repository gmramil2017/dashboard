{"version":3,"sources":["metabase/lib/filter/operator.cljc"],"mappings":"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","names":["var_args","G__65134","metabase.lib.filter.operator/operator-def","js/Error","tag","metabase.lib.filter.operator.operator_def","display-name-style","metabase.lib.filter.operator/key-operators","metabase.lib.filter.operator/location-operators","metabase.lib.filter.operator/temporal-operators","metabase.lib.filter.operator/coordinate-operators","metabase.lib.filter.operator/number-operators","metabase.lib.filter.operator/text-operators","metabase.lib.filter.operator/text-like-operators","metabase.lib.filter.operator/boolean-operators","metabase.lib.filter.operator/default-operators","metabase.lib.filter.operator/join-operators","cljs.core.assoc","metabase.lib.filter.operator/filter-operators","column","pred__65146","expr__65147","metabase.lib.types.isa/field-type?","metabase.lib.filter.operator/filter-operator-long-display-name","display-name-variant","G__65150","cljs.core/Keyword","G__65151","metabase.shared.util.i18n/js-i18n","G__65153","G__65154","G__65155","G__65158","G__65160","G__65165","G__65170","G__65171","G__65173","G__65174","G__65175","G__65180","G__65181","G__65183","G__65185","metabase.lib.filter.operator/filter-operator-display-name","G__65195","metabase.lib.metadata.calculation/display-name-method","p__65202","map__65203","cljs.core/--destructure-map","cljs.core.get","_query","_stage-number","short-name","G__65206","metabase.lib.metadata.calculation/display-info-method","p__65211","map__65212","default","G__65215","metabase.util/qualified-name"],"sourcesContent":["(ns metabase.lib.filter.operator\n  (:require\n   [metabase.lib.metadata :as lib.metadata]\n   [metabase.lib.metadata.calculation :as lib.metadata.calculation]\n   [metabase.lib.schema.common :as lib.schema.common]\n   [metabase.lib.schema.filter :as lib.schema.filter]\n   [metabase.lib.types.isa :as lib.types.isa]\n   [metabase.shared.util.i18n :as i18n]\n   [metabase.util :as u]\n   [metabase.util.malli :as mu]))\n\n(mu/defn operator-def :- ::lib.schema.filter/operator\n  \"Get a filter operator definition for the MBQL filter with `tag`, e.g. `:=`. In some cases various tags have alternate\n  display names used for different situations e.g. for numbers vs temporal values; pass in the\n  `display-name-style` to choose a non-default display-name.\"\n  ([tag]\n   (operator-def tag :default))\n\n  ([tag display-name-style]\n   {:lib/type             :operator/filter\n    :short                tag\n    :display-name-variant display-name-style}))\n\n(def ^:private key-operators\n  [(operator-def :=)\n   (operator-def :!=)\n   (operator-def :>)\n   (operator-def :<)\n   (operator-def :between)\n   (operator-def :>=)\n   (operator-def :<=)\n   (operator-def :is-null :is-empty)\n   (operator-def :not-null :not-empty)])\n\n(def ^:private location-operators\n  [(operator-def :=)\n   (operator-def :!=)\n   (operator-def :is-empty)\n   (operator-def :not-empty)\n   (operator-def :contains)\n   (operator-def :does-not-contain)\n   (operator-def :starts-with)\n   (operator-def :ends-with)])\n\n(def ^:private temporal-operators\n  [(operator-def :!= :excludes)\n   (operator-def :=)\n   (operator-def :< :before)\n   (operator-def :> :after)\n   (operator-def :between)\n   (operator-def :is-null :is-empty)\n   (operator-def :not-null :not-empty)])\n\n(def ^:private coordinate-operators\n  [(operator-def :=)\n   (operator-def :!=)\n   (operator-def :inside)\n   (operator-def :>)\n   (operator-def :<)\n   (operator-def :between)\n   (operator-def :>=)\n   (operator-def :<=)])\n\n(def ^:private number-operators\n  [(operator-def := :equal-to)\n   (operator-def :!= :not-equal-to)\n   (operator-def :>)\n   (operator-def :<)\n   (operator-def :between)\n   (operator-def :>=)\n   (operator-def :<=)\n   (operator-def :is-null :is-empty)\n   (operator-def :not-null :not-empty)])\n\n(def ^:private text-operators\n  [(operator-def :=)\n   (operator-def :!=)\n   (operator-def :contains)\n   (operator-def :does-not-contain)\n   (operator-def :is-null)\n   (operator-def :not-null)\n   (operator-def :is-empty)\n   (operator-def :not-empty)\n   (operator-def :starts-with)\n   (operator-def :ends-with)])\n\n(def ^:private text-like-operators\n  [(operator-def :=)\n   (operator-def :!=)\n   (operator-def :is-null)\n   (operator-def :not-null)\n   (operator-def :is-empty)\n   (operator-def :not-empty)])\n\n(def ^:private boolean-operators\n  [(operator-def :=)\n   (operator-def :is-null :is-empty)\n   (operator-def :not-null :not-empty)])\n\n(def ^:private default-operators\n  [(operator-def :=)\n   (operator-def :!=)\n   (operator-def :is-null)\n   (operator-def :not-null)])\n\n(def join-operators\n  \"Operators that should be listed as options in join conditions.\"\n  [(assoc (operator-def :=) :default true)\n   (operator-def :>)\n   (operator-def :<)\n   (operator-def :>=)\n   (operator-def :<=)\n   (operator-def :!=)])\n\n(mu/defn filter-operators :- [:sequential ::lib.schema.filter/operator]\n  \"The list of available filter operators.\n   The order of operators is relevant for the front end.\n   There are slight differences between names and ordering for the different base types.\"\n  [column :- lib.metadata/ColumnMetadata]\n  ;; The order of these clauses is important since we want to match the most relevant type\n  (condp lib.types.isa/field-type? column\n    :metabase.lib.types.constants/primary_key key-operators\n    :metabase.lib.types.constants/foreign_key key-operators\n    :metabase.lib.types.constants/location    location-operators\n    :metabase.lib.types.constants/temporal    temporal-operators\n    :metabase.lib.types.constants/coordinate  coordinate-operators\n    :metabase.lib.types.constants/number      number-operators\n    :metabase.lib.types.constants/string      text-operators\n    :metabase.lib.types.constants/string_like text-like-operators\n    :metabase.lib.types.constants/boolean     boolean-operators\n    ;; default\n    default-operators))\n\n(mu/defn ^:private filter-operator-long-display-name :- ::lib.schema.common/non-blank-string\n  [tag                  :- :keyword\n   display-name-variant :- :keyword]\n  (case tag\n    :=                (case display-name-variant\n                        :equal-to (i18n/tru \"Equal to\")\n                        :default  (i18n/tru \"Is\"))\n    :!=               (case display-name-variant\n                        :not-equal-to (i18n/tru \"Not equal to\")\n                        :excludes     (i18n/tru \"Excludes\")\n                        :default      (i18n/tru \"Is not\"))\n    :>                (case display-name-variant\n                        :after   (i18n/tru \"After\")\n                        :default (i18n/tru \"Greater than\"))\n    :<                (case display-name-variant\n                        :before  (i18n/tru \"Before\")\n                        :default (i18n/tru \"Less than\"))\n    :>=               (case display-name-variant\n                        :default (i18n/tru \"Greater than or equal to\"))\n    :<=               (case display-name-variant\n                        :default (i18n/tru \"Less than or equal to\"))\n    :between          (case display-name-variant\n                        :default (i18n/tru \"Between\"))\n    :is-null          (case display-name-variant\n                        :is-empty (i18n/tru \"Is empty\")\n                        :default  (i18n/tru \"Is null\"))\n    :not-null         (case display-name-variant\n                        :not-empty (i18n/tru \"Not empty\")\n                        :default   (i18n/tru \"Not null\"))\n    :is-empty         (case display-name-variant\n                        :default (i18n/tru \"Is empty\"))\n    :not-empty        (case display-name-variant\n                        :default (i18n/tru \"Not empty\"))\n    :contains         (case display-name-variant\n                        :default (i18n/tru \"Contains\"))\n    :does-not-contain (case display-name-variant\n                        :default (i18n/tru \"Does not contain\"))\n    :starts-with      (case display-name-variant\n                        :default (i18n/tru \"Starts with\"))\n    :ends-with        (case display-name-variant\n                        :default (i18n/tru \"Ends with\"))\n    :inside           (case display-name-variant\n                        :default (i18n/tru \"Inside\"))))\n\n(mu/defn ^:private filter-operator-display-name :- ::lib.schema.common/non-blank-string\n  [tag                  :- :keyword\n   display-name-variant :- :keyword]\n  (case tag\n    :=  \"=\"\n    :!= \"\u2260\"\n    :>  \">\"\n    :<  \"<\"\n    :>= \"\u2265\"\n    :<= \"\u2264\"\n    (filter-operator-long-display-name tag display-name-variant)))\n\n(defmethod lib.metadata.calculation/display-name-method :operator/filter\n  [_query _stage-number {short-name :short, :keys [display-name-variant]} display-name-style]\n  (case display-name-style\n    :default (filter-operator-display-name short-name display-name-variant)\n    :long    (filter-operator-long-display-name short-name display-name-variant)))\n\n(defmethod lib.metadata.calculation/display-info-method :operator/filter\n  [_query _stage-number {short-name :short, :keys [display-name-variant default]}]\n  (cond-> {:short-name        (u/qualified-name short-name)\n           :display-name      (filter-operator-display-name short-name display-name-variant)\n           :long-display-name (filter-operator-long-display-name short-name display-name-variant)}\n    default (assoc :default true)))\n"]}