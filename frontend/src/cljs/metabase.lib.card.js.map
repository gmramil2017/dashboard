{"version":3,"sources":["metabase/lib/card.cljc"],"mappings":"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","names":["metabase.lib.metadata.calculation/display-name-method","_query","_stage-number","card-metadata","_style","cljs.core.some_fn","metabase.lib.metadata.calculation/metadata-method","p__80076","map__80126","cljs.core/--destructure-map","cljs.core.get","card-name","display-name","G__80128","cljs.core/not","cljs.core.assoc","metabase.util.humanization/name->human-readable-name","metabase.lib.metadata.calculation/describe-top-level-key-method","query","stage-number","_k","map__80130","source-card","metabase.lib.util/query-stage","or__5045__auto__","temp__5804__auto__","metabase.lib.metadata/card","metabase.lib.metadata.calculation.display_name","metabase.shared.util.i18n.js_i18n","cljs.core.pr_str","metabase.lib.card/infer-returned-columns","metadata-providerable","card-query","metabase.lib.metadata.calculation.returned_columns","metabase.lib.query/query","metabase.lib.convert/->pMBQL","metabase.lib.card/Card","metabase.lib.card/card-metadata-columns","card","result-metadata","cols","cljs.core/not-empty","cljs.core/map?","cljs.core/sequential?","cljs.core.mapv","col","cljs.core.merge","field-id","e80136","metabase.lib.metadata/field","_","cljs.core/update-keys","metabase.util/->kebab-case-en","metabase.lib.card/saved-question-metadata","card-id","metabase.lib.metadata.calculation/returned-columns-method","p__80142","map__80143","unique-name-fn","_options","G__80144"],"sourcesContent":["(ns metabase.lib.card\n  (:require\n   [metabase.lib.convert :as lib.convert]\n   [metabase.lib.metadata :as lib.metadata]\n   [metabase.lib.metadata.calculation :as lib.metadata.calculation]\n   [metabase.lib.query :as lib.query]\n   [metabase.lib.schema.id :as lib.schema.id]\n   [metabase.lib.util :as lib.util]\n   [metabase.shared.util.i18n :as i18n]\n   [metabase.util :as u]\n   [metabase.util.humanization :as u.humanization]\n   [metabase.util.malli :as mu]))\n\n(defmethod lib.metadata.calculation/display-name-method :metadata/card\n  [_query _stage-number card-metadata _style]\n  ((some-fn :display-name :name) card-metadata))\n\n(defmethod lib.metadata.calculation/metadata-method :metadata/card\n  [_query _stage-number {card-name :name, :keys [display-name], :as card-metadata}]\n  (cond-> card-metadata\n    (not display-name) (assoc :display-name (u.humanization/name->human-readable-name :simple card-name))))\n\n(defmethod lib.metadata.calculation/describe-top-level-key-method :source-card\n  [query stage-number _k]\n  (let [{:keys [source-card]} (lib.util/query-stage query stage-number)]\n    (when source-card\n      (or (when-let [card-metadata (lib.metadata/card query source-card)]\n            (lib.metadata.calculation/display-name query stage-number card-metadata :long))\n          ;; If for some reason the metadata is unavailable. This is better than returning nothing I guess\n          (i18n/tru \"Saved Question {0}\" (pr-str source-card))))))\n\n(mu/defn ^:private infer-returned-columns\n  [metadata-providerable :- lib.metadata/MetadataProviderable\n   card-query            :- :map]\n  (when (some? card-query)\n    (lib.metadata.calculation/returned-columns (lib.query/query metadata-providerable (lib.convert/->pMBQL card-query)))))\n\n(def ^:private Card\n  [:map\n   {:error/message \"Card with :dataset-query\"}\n   [:dataset-query :map]])\n\n(mu/defn ^:private card-metadata-columns\n  [metadata-providerable :- lib.metadata/MetadataProviderable\n   card                  :- Card]\n  (when-let [result-metadata (or (:result-metadata card)\n                                 (:fields card)\n                                 (infer-returned-columns metadata-providerable (:dataset-query card)))]\n    ;; Card `result-metadata` SHOULD be a sequence of column infos, but just to be safe handle a map that\n    ;; contains` :columns` as well.\n    (when-let [cols (not-empty (cond\n                                 (map? result-metadata)        (:columns result-metadata)\n                                 (sequential? result-metadata) result-metadata))]\n      (mapv (fn [col]\n              (merge\n               {:base-type :type/*, :lib/type :metadata/column}\n               (when-let [field-id (:id col)]\n                 (try\n                   (lib.metadata/field metadata-providerable field-id)\n                   (catch #?(:clj Throwable :cljs :default) _\n                     nil)))\n               (update-keys col u/->kebab-case-en)\n               {:lib/type                :metadata/column\n                :lib/source              :source/card\n                :lib/card-id             (:id card)\n                :lib/source-column-alias (:name col)}))\n            cols))))\n\n(mu/defn saved-question-metadata :- [:maybe [:sequential {:min 1} lib.metadata.calculation/ColumnMetadataWithSource]]\n  \"Metadata associated with a Saved Question with `card-id`.\"\n  [metadata-providerable :- lib.metadata/MetadataProviderable\n   card-id               :- ::lib.schema.id/card]\n  ;; it seems like in some cases (unit tests) the FE is renaming `:result-metadata` to `:fields`, not 100% sure why\n  ;; but handle that case anyway. (#29739)\n  (when-let [card (lib.metadata/card metadata-providerable card-id)]\n    (card-metadata-columns metadata-providerable card)))\n\n(defmethod lib.metadata.calculation/returned-columns-method :metadata/card\n  [query _stage-number card {:keys [unique-name-fn], :as _options}]\n  (mapv (fn [col]\n          (assoc col :lib/desired-column-alias (unique-name-fn (:name col))))\n        (card-metadata-columns query card)))\n"]}