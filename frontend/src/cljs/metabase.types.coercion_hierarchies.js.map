{"version":3,"sources":["metabase/types/coercion_hierarchies.cljc"],"mappings":"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","names":["js/metabase","js/metabase.types","js/metabase.types.coercion-hierarchies","js/metabase.types.coercion-hierarchies.strategy->allowed-base-types","metabase.types.coercion-hierarchies/strategy->allowed-base-types","cljs.core.atom","js/metabase.types.coercion-hierarchies.strategy->effective-type","metabase.types.coercion-hierarchies/strategy->effective-type","js/metabase.types.coercion-hierarchies.non-descending-base-type->strategy","metabase.types.coercion-hierarchies/non-descending-base-type->strategy","cljs.core/deref","metabase.types.coercion-hierarchies/non-descending-strategies","metabase.types.coercion-hierarchies/effective-type-for-strategy","strategy","cljs.core.get","metabase.types.coercion-hierarchies/one-or-many","x","cljs.core.some_fn","cljs.core/sequential?","cljs.core/set?","cljs.core/nil?","metabase.types.coercion-hierarchies/define-types!","coercion-strategy","base-type-or-types","effective-type","base-types","cljs.core/set","cljs.core.swap_BANG_","cljs.core/assoc","metabase.types.coercion-hierarchies/define-non-inheritable-type!","cljs.core.partial","cljs.core/merge-with","clojure.set/union","cljs.core/zipmap","cljs.core.repeat","metabase.types.coercion-hierarchies/build-hierarchy","pairs","cljs.core.reduce","p__58593","vec__58594","cljs.core.nth","h","tag","parent","cljs.core.derive","fexpr__58597","cljs.core/get-global-hierarchy","metabase.types.coercion-hierarchies/base-type-hierarchy*","metabase.types.coercion-hierarchies/base-type-hierarchy","cljs.core/reset!","iter__5523__auto__","s__58602","cljs.core/LazySeq","temp__5804__auto__","cljs.core/seq","xs__6360__auto__","vec__58607","cljs.core/first","iterys__5519__auto__","s__58604","cljs.core/chunked-seq?","c__5521__auto__","size__5522__auto__","cljs.core/count","b__58606","cljs.core/chunk-buffer","i__58605","cljs.core/-nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__58603","cljs.core/chunk-rest","cljs.core/cons","cljs.core/rest","fs__5520__auto__","cljs.core.concat","iter__58601","base-type","metabase.types.coercion-hierarchies/effective-type-hierarchy*","metabase.types.coercion-hierarchies/effective-type-hierarchy","cljs.core/add-watch","fexpr__58614","_","old","new","cljs.core._EQ_","cljs.core/chunk-first"],"sourcesContent":["(ns metabase.types.coercion-hierarchies\n  (:require\n   [clojure.set :as set]))\n\n;; these need to be defonce so we don't drop our hierarchies, but defonce doesn't support docstrings:\n;; https://clojure.atlassian.net/browse/CLJ-1148\n\n(defonce ^:private\n  ^{:doc \"Map of `coercion-strategy -> #{allowed-base-type}`.\"}\n  strategy->allowed-base-types\n  (atom {}))\n\n(defonce ^:private\n  ^{:doc \"Map of coercion strategy -> resulting effective-type\"}\n  strategy->effective-type\n  (atom {}))\n\n(defonce ^:private\n  ^{:doc \"Map of base-type -> #{strategy} which are not inheritable. Eg, binary fields are marked `type/*` and may be coerced\n  to timestamps with `:Coercion/YYYYMMDDHHMMSSBytes->Temporal` but we don't want all children of `type/*` to be\n  coerced as such.\"}\n  non-descending-base-type->strategy\n  (atom {}))\n\n(defn non-descending-strategies\n  \"Get a map of strategies -> allowed-base-types. These must live outside of the hierarchy.\"\n  []\n  @non-descending-base-type->strategy)\n\n(defn effective-type-for-strategy\n  \"Gets the effective type for strategy. Essentially a getter over the\n  private strategy->effective-type.\"\n  [strategy]\n  (get @strategy->effective-type strategy))\n\n(defn- one-or-many\n  \"Ensure x is a sequential collection. Copied from metabase.util as that namespace is not amenable to cljc.\"\n  [x]\n  (if ((some-fn sequential? set? nil?) x) x [x]))\n\n(defn define-types!\n  \"Define the `base-type-or-types` allowed and the resulting `effective-type` of a `coercion-strategy`.\"\n  [coercion-strategy base-type-or-types effective-type]\n  (let [base-types (set (one-or-many base-type-or-types))]\n    (swap! strategy->allowed-base-types assoc coercion-strategy base-types))\n  (swap! strategy->effective-type assoc coercion-strategy effective-type))\n\n(defn define-non-inheritable-type!\n  \"Define coercion strategies that should not exist for all of the descendants of base-type-or-types.\"\n  [coercion-strategy base-type-or-types effective-type]\n  (swap! non-descending-base-type->strategy\n         (partial merge-with set/union)\n         (zipmap (one-or-many base-type-or-types) (repeat #{coercion-strategy})))\n  (swap! strategy->effective-type assoc coercion-strategy effective-type))\n\n(defn- build-hierarchy [pairs]\n  (reduce\n   (fn [h [tag parent]]\n     (derive h tag parent))\n   #?(:clj @#'clojure.core/global-hierarchy\n      :cljs @(#'clojure.core/get-global-hierarchy))\n   pairs))\n\n;; atom is nil => rebuild the hierarchy\n\n(def ^:private base-type-hierarchy*\n  (atom nil))\n\n(defn base-type-hierarchy\n  \"The global hierarchy, with coercion strategies added as ancestors of their allowed base type(s).\"\n  []\n  (when-not @base-type-hierarchy*\n    (locking base-type-hierarchy*\n      (when-not @base-type-hierarchy*\n        (reset! base-type-hierarchy* (build-hierarchy (for [[strategy base-types] @strategy->allowed-base-types\n                                                            base-type             base-types]\n                                                        [base-type strategy]))))))\n  @base-type-hierarchy*)\n\n(def ^:private effective-type-hierarchy*\n  (atom nil))\n\n(defn effective-type-hierarchy\n  \"The global hierarchy, with coercion strategies added as children of their resulting effective type.\"\n  []\n  (when-not @effective-type-hierarchy*\n    (locking effective-type-hierarchy*\n      (when-not @effective-type-hierarchy*\n        (reset! effective-type-hierarchy* (build-hierarchy (seq @strategy->effective-type))))))\n  @effective-type-hierarchy*)\n\n;; rebuild coercion hierarchies if the global hierarchy changes\n(add-watch\n #?(:clj #'clojure.core/global-hierarchy\n    :cljs (#'clojure.core/get-global-hierarchy))\n ::rebuild-hierarchies\n (fn [_ _ old new]\n   (when-not (= old new)\n     (reset! base-type-hierarchy* nil)\n     (reset! effective-type-hierarchy* nil))))\n\n;; rebuild coercion hierarchies if the type map atoms change\n\n(add-watch\n strategy->allowed-base-types\n ::rebuild-hierarchies\n (fn [_ _ old new]\n   (when-not (= old new)\n     (reset! base-type-hierarchy* nil))))\n\n(add-watch\n strategy->effective-type\n ::rebuild-hierarchies\n (fn [_ _ old new]\n   (when-not (= old new)\n     (reset! effective-type-hierarchy* nil))))\n"]}