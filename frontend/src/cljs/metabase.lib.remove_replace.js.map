{"version":3,"sources":["metabase/lib/remove_replace.cljc"],"mappings":"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","names":["metabase.lib.remove-replace/stage-paths","query","stage-number","joins","metabase.lib.join.joins","join-indices","cljs.core.range","cljs.core/count","join-condition-paths","iter__5523__auto__","s__80745","cljs.core/LazySeq","temp__5804__auto__","cljs.core/seq","cljs.core/chunked-seq?","c__5521__auto__","size__5522__auto__","b__80747","cljs.core/chunk-buffer","i__80746","cljs.core/-nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__80744","cljs.core/chunk-rest","cljs.core/first","cljs.core/cons","cljs.core/rest","idx","join-field-paths","s__80821","b__80823","i__80822","iter__80820","join","cljs.core.nth","cljs.core/Keyword","cljs.core.concat","p__80828","vec__80829","map__80832","cljs.core/--destructure-map","cljs.core.get","metabase.lib.remove-replace/find-matching-order-by-index","target-op","temporal-unit","binning","target-ref-id","metabase.lib.util/query-stage","medley.core.indexed","medley.core.find_first","p__80833","vec__80834","vec__80837","_idx","_dir","_","ordered-clause","cljs.core._EQ_","cljs.core/second","cljs.core/last","metabase.lib.remove-replace/sync-order-by-options-with-breakout","target-clause","new-options","temp__5802__auto__","order-by-idx","metabase.lib.util.update_query_stage","cljs.core/update-in","p1__80840#","cljs.core.comp","medley.core/remove-vals","cljs.core/nil?","cljs.core/merge","metabase.lib.remove-replace/remove-breakout-order-by","metabase.lib.util/remove-clause","cljs.core.get_in","metabase.lib.remove-replace/remove-replace-location","unmodified-query-for-stage","location","remove-replace-fn","result","target-uuid","metabase.lib.options/uuid","cljs.core.not_EQ_","cljs.core.filter","cljs.core/some?","&parents","&match","cljs.core/vector?","&match_0__80860","cljs.core/keyword-identical?","G__80910","G__80914","G__80915","G__80916","G__80917","G__80918","G__80919","G__80911","G__80912","G__80913","cljs.core.match/backtrack","e80889","js/Error","e__61771__auto__","G__80892","G__80896","G__80897","G__80898","G__80899","G__80900","G__80901","G__80893","G__80894","G__80895","e80890","e80868","&match_0__80863","e80879","e80880","e80873","&match_0__80864","&match_2__80866","e80878","e80875","e80874","metabase.lib.remove-replace/remove-local-references","metabase.lib.util/expression-name","metabase.lib.remove-replace/remove-stage-references","target-opts","stage","to-remove","cljs.core.mapcat","clauses","cljs.core.keep","clause","&match_0__80930","&match_1__80931","p1__80920#","&match_2__80932","e80936","e80935","e80934","e80933","metabase.mbql.util.match.impl/match-in-collection","match-80923","cljs.core/empty?","clojure.set/subset?","cljs.core/set","cljs.core.reduce","p__80973","vec__80974","previous-stage-number","metabase.lib.util/next-stage-number","metabase.lib.metadata.calculation.visible_columns","cljs.core/some","p__80977","map__80978","source","source-uuid","column","metabase.lib.remove-replace/remove-replace*","remove-or-replace","replacement","*enforce*-orig-val__80990","*enforce*-temp-val__80991","metabase.util.malli/*enforce*","metabase.lib.common/->op-arg","possible-location","replace?","replacement-clause","p1__80987#","p2__80988#","p3__80989#","metabase.lib.util/replace-clause","changing-breakout?","sync-breakout-ordering?","cljs.core/select-keys","var_args","G__80998","metabase.lib.remove-replace/remove-clause","metabase.lib.remove_replace.remove_clause","cljs.core/map?","metabase.lib.remove-replace/remove-join","G__81009","metabase.lib.remove-replace/replace-clause","new-clause","metabase.lib.remove_replace.replace_clause","metabase.lib.remove-replace/replace-join","metabase.lib.remove-replace/replace-join-alias","a-join","old-name","new-name","e81020","metabase.mbql.util.match.impl/replace-in-collection","replace-81016","field","field-clause","metabase.lib.util/field-clause?","metabase.lib.join/current-join-alias","metabase.lib.join/with-join-alias","metabase.lib.remove-replace/rename-join-in-stage","vec__81021","the-joins","and__5043__auto__","unique-name-fn","metabase.lib.util/unique-name-generator","cljs.core/run!","cljs.core.map","unique-name","cljs.core/assoc-in","metabase.lib.remove-replace/join-spec->clause","join-spec","cljs.core/integer?","pred","G__81032","p__81037","vec__81038","G__81043","metabase.lib.remove-replace/rename-join","metabase.lib.remove_replace.rename_join","metabase.lib.remove-replace/remove-matching-missing-columns","query-after","query-before","match-spec","removed-cols","clojure.set.difference","p1__81052#","p2__81053#","cljs.core.apply","metabase.lib.remove-replace/remove-invalidated-refs","query-without-local-refs","metabase.lib.remove-replace/join-spec->alias","metabase.lib.remove-replace/update-joins","f","join-alias","*enforce*-orig-val__81070","*enforce*-temp-val__81071","$q","metabase.lib.util/update-query-stage","metabase.util/assoc-dissoc","G__81072","G__81073","medley.core.update_existing","p1__81068#","cljs.core.mapv","metabase.lib.join/add-default-alias","G__81077","metabase.lib.remove_replace.remove_join","cljs.core/not-empty","p1__81074#","cljs.core/filterv","G__81082","new-join","metabase.lib.remove_replace.replace_join","p1__81078#","cljs.core/chunk-first"],"sourcesContent":["(ns metabase.lib.remove-replace\n  (:require\n   [clojure.set :as set]\n   [medley.core :as m]\n   [metabase.lib.common :as lib.common]\n   [metabase.lib.join :as lib.join]\n   [metabase.lib.metadata.calculation :as lib.metadata.calculation]\n   [metabase.lib.options :as lib.options]\n   [metabase.lib.util :as lib.util]\n   [metabase.mbql.util.match :as mbql.match]\n   [metabase.util :as u]\n   [metabase.util.malli :as mu]))\n\n(defn- stage-paths\n  [query stage-number]\n  (let [joins (lib.join/joins query stage-number)\n        join-indices (range (count joins))\n        join-condition-paths (for [idx join-indices]\n                               [:joins idx :conditions])\n        join-field-paths (for [idx join-indices\n                               :let [join (nth joins idx)]\n                               ;; :fields in a join can be just :all or :none (#31858)\n                               :when (not (keyword? (:fields join)))]\n                           [:joins idx :fields])]\n    (concat [[:order-by] [:breakout] [:filters] [:fields] [:aggregation] [:expressions]]\n            join-field-paths\n            join-condition-paths)))\n\n(declare remove-local-references)\n(declare remove-stage-references)\n\n(defn- find-matching-order-by-index\n  [query stage-number [target-op {:keys [temporal-unit binning]} target-ref-id]]\n  (->> (lib.util/query-stage query stage-number)\n       :order-by\n       m/indexed\n       (m/find-first (fn [[_idx [_dir _ ordered-clause]]]\n                       (and (= (first ordered-clause) target-op)\n                            (= (:temporal-unit (second ordered-clause)) temporal-unit)\n                            (= (:binning (second ordered-clause)) binning)\n                            (= (last ordered-clause) target-ref-id))))\n       first))\n\n(defn- sync-order-by-options-with-breakout\n  [query stage-number target-clause new-options]\n  (if-let [order-by-idx (find-matching-order-by-index query stage-number target-clause)]\n    (lib.util/update-query-stage\n      query stage-number\n      update-in [:order-by order-by-idx 2 1]\n      (comp #(m/remove-vals nil? %) merge)\n      new-options)\n    query))\n\n(defn- remove-breakout-order-by\n  [query stage-number target-clause]\n  (if-let [order-by-idx (find-matching-order-by-index query stage-number target-clause)]\n    (lib.util/update-query-stage\n      query\n      stage-number\n      lib.util/remove-clause\n      [:order-by]\n      (get-in (lib.util/query-stage query stage-number) [:order-by order-by-idx]))\n    query))\n\n(defn- remove-replace-location\n  [query stage-number unmodified-query-for-stage location target-clause remove-replace-fn]\n  (let [result (lib.util/update-query-stage query stage-number\n                                            remove-replace-fn location target-clause)\n        target-uuid (lib.options/uuid target-clause)]\n    (if (not= query result)\n      (mbql.match/match-one location\n        [:expressions]\n        (-> result\n            (remove-local-references\n              stage-number\n              unmodified-query-for-stage\n              :expression\n              {}\n              (lib.util/expression-name target-clause))\n            (remove-stage-references stage-number unmodified-query-for-stage target-uuid))\n\n        [:aggregation]\n        (-> result\n            (remove-local-references\n              stage-number\n              unmodified-query-for-stage\n              :aggregation\n              {}\n              target-uuid)\n            (remove-stage-references stage-number unmodified-query-for-stage target-uuid))\n\n        #_{:clj-kondo/ignore [:invalid-arity]}\n        (:or\n          [:breakout]\n          [:fields]\n          [:joins _ :fields])\n        (remove-stage-references result stage-number unmodified-query-for-stage target-uuid)\n\n        _\n        result)\n      result)))\n\n(defn- remove-local-references [query stage-number unmodified-query-for-stage target-op target-opts target-ref-id]\n  (let [stage (lib.util/query-stage query stage-number)\n        to-remove (mapcat\n                    (fn [location]\n                      (when-let [clauses (get-in stage location)]\n                        (->> clauses\n                             (keep (fn [clause]\n                                     (mbql.match/match-one clause\n                                       [target-op\n                                        (_ :guard #(or (empty? target-opts)\n                                                       (set/subset? (set target-opts) (set %))))\n                                        target-ref-id] [location clause]))))))\n                    (stage-paths query stage-number))]\n    (reduce\n     (fn [query [location target-clause]]\n       (remove-replace-location query stage-number unmodified-query-for-stage location target-clause lib.util/remove-clause))\n     query\n     to-remove)))\n\n(defn- remove-stage-references\n  [query previous-stage-number unmodified-query-for-stage target-uuid]\n  (if-let [stage-number (lib.util/next-stage-number unmodified-query-for-stage previous-stage-number)]\n    (let [stage (lib.util/query-stage unmodified-query-for-stage stage-number)\n          target-ref-id (->> (lib.metadata.calculation/visible-columns unmodified-query-for-stage stage-number stage)\n                             (some (fn [{:keys [lib/source lib/source-uuid] :as column}]\n                                     (when (and (= :source/previous-stage source) (= target-uuid source-uuid))\n                                       (:lib/desired-column-alias column)))))]\n      (if target-ref-id\n        ;; We are moving to the next stage, so pass the current query as the unmodified-query-for-stage\n        (remove-local-references query stage-number query :field {} target-ref-id)\n        query))\n    query))\n\n(defn- remove-replace* [query stage-number target-clause remove-or-replace replacement]\n  (binding [mu/*enforce* false]\n    (let [target-clause (lib.common/->op-arg target-clause)\n          stage (lib.util/query-stage query stage-number)\n          location (m/find-first\n                     (fn [possible-location]\n                       (when-let [clauses (get-in stage possible-location)]\n                         (let [target-uuid (lib.options/uuid target-clause)]\n                           (when (some (comp #{target-uuid} :lib/uuid second) clauses)\n                             possible-location))))\n                     (stage-paths query stage-number))\n          replace? (= :replace remove-or-replace)\n          replacement-clause (when replace?\n                               (lib.common/->op-arg replacement))\n          remove-replace-fn (if replace?\n                              #(lib.util/replace-clause %1 %2 %3 replacement-clause)\n                              lib.util/remove-clause)\n          changing-breakout? (= [:breakout] location)\n          sync-breakout-ordering? (and replace?\n                                    changing-breakout?\n                                    (and (= (first target-clause)\n                                            (first replacement-clause))\n                                         (= (last target-clause)\n                                            (last replacement-clause))))\n          query (cond\n                  sync-breakout-ordering?\n                  (sync-order-by-options-with-breakout\n                    query\n                    stage-number\n                    target-clause\n                    (select-keys (second replacement-clause) [:binning :temporal-unit]))\n\n                  changing-breakout?\n                  (remove-breakout-order-by query stage-number target-clause)\n\n                  :else\n                  query)]\n      (if location\n        (remove-replace-location query stage-number query location target-clause remove-replace-fn)\n        query))))\n\n(declare remove-join)\n\n(mu/defn remove-clause :- :metabase.lib.schema/query\n  \"Removes the `target-clause` from the stage specified by `stage-number` of `query`.\n  If `stage-number` is not specified, the last stage is used.\"\n  ([query :- :metabase.lib.schema/query\n    target-clause]\n   (remove-clause query -1 target-clause))\n  ([query :- :metabase.lib.schema/query\n    stage-number :- :int\n    target-clause]\n   (if (and (map? target-clause) (= (:lib/type target-clause) :mbql/join))\n     (remove-join query stage-number target-clause)\n     (remove-replace* query stage-number target-clause :remove nil))))\n\n(declare replace-join)\n\n(mu/defn replace-clause :- :metabase.lib.schema/query\n  \"Replaces the `target-clause` with `new-clause` in the `query` stage specified by `stage-number`.\n  If `stage-number` is not specified, the last stage is used.\"\n  ([query :- :metabase.lib.schema/query\n    target-clause\n    new-clause]\n   (replace-clause query -1 target-clause new-clause))\n  ([query :- :metabase.lib.schema/query\n    stage-number :- :int\n    target-clause\n    new-clause]\n   (if (and (map? target-clause) (= (:lib/type target-clause) :mbql/join))\n     (replace-join query stage-number target-clause new-clause)\n     (remove-replace* query stage-number target-clause :replace new-clause))))\n\n(defn- replace-join-alias\n  [a-join old-name new-name]\n  (mbql.match/replace a-join\n    (field :guard (fn [field-clause]\n                    (and (lib.util/field-clause? field-clause)\n                         (= (lib.join/current-join-alias field-clause) old-name))))\n    (lib.join/with-join-alias field new-name)))\n\n(defn- rename-join-in-stage\n  [stage idx new-name]\n  (let [the-joins      (:joins stage)\n        [idx old-name] (when (< -1 idx (count the-joins))\n                         [idx (get-in the-joins [idx :alias])])]\n    (if (and idx (not= old-name new-name))\n      (let [unique-name-fn (lib.util/unique-name-generator)\n            _              (run! unique-name-fn (map :alias the-joins))\n            unique-name    (unique-name-fn new-name)]\n        (-> stage\n            (assoc-in [:joins idx :alias] unique-name)\n            (replace-join-alias old-name unique-name)))\n      stage)))\n\n(defn- join-spec->clause\n  [query stage-number join-spec]\n  (if (integer? join-spec)\n    join-spec\n    (let [pred (cond-> #{join-spec}\n                 (string? join-spec) (comp :alias))]\n      (some (fn [[idx a-join]]\n              (when (pred a-join)\n                idx))\n            (m/indexed (:joins (lib.util/query-stage query stage-number)))))))\n\n(mu/defn rename-join :- :metabase.lib.schema/query\n  \"Rename the join specified by `join-spec` in `query` at `stage-number` to `new-name`.\n  The join can be specified either by itself (as returned by [[joins]]), by its alias\n  or by its index in the list of joins as returned by [[joins]].\n  If `stage-number` is not provided, the last stage is used.\n  If the specified join cannot be found, then `query` is returned as is.\n  If renaming the join to `new-name` would clash with an existing join, a\n  suffix is appended to `new-name` to make it unique.\"\n  ([query join-spec new-name]\n   (rename-join query -1 join-spec new-name))\n\n  ([query        :- :metabase.lib.schema/query\n    stage-number :- :int\n    join-spec    :- [:or :metabase.lib.schema.join/join :string :int]\n    new-name     :- :metabase.lib.schema.common/non-blank-string]\n   (if-let [idx (join-spec->clause query stage-number join-spec)]\n     (lib.util/update-query-stage query stage-number rename-join-in-stage idx new-name)\n     query)))\n\n(defn- remove-matching-missing-columns\n  [query-after query-before stage-number match-spec]\n  (let [removed-cols (set/difference\n                       (set (lib.metadata.calculation/visible-columns query-before stage-number (lib.util/query-stage query-before stage-number)))\n                       (set (lib.metadata.calculation/visible-columns query-after stage-number (lib.util/query-stage query-after stage-number))))]\n    (reduce\n      #(apply remove-local-references %1 stage-number query-after (match-spec %2))\n      query-after\n      removed-cols)))\n\n(defn- remove-invalidated-refs\n  [query-after query-before stage-number]\n  (let [query-without-local-refs (remove-matching-missing-columns\n                                   query-after\n                                   query-before\n                                   stage-number\n                                   (fn [column] [:field {:join-alias (::lib.join/join-alias column)} (:id column)]))]\n    ;; Because joins can use :all or :none, we cannot just use `remove-local-references` we have to manually look at the next stage as well\n    (if-let [stage-number (lib.util/next-stage-number query-without-local-refs stage-number)]\n      (remove-matching-missing-columns\n        query-without-local-refs\n        query-before\n        stage-number\n        (fn [column] [:field {} (:lib/desired-column-alias column)]))\n      query-without-local-refs)))\n\n(defn- join-spec->alias\n  [query stage-number join-spec]\n  (cond\n    (integer? join-spec) (get-in (lib.util/query-stage query stage-number) [:joins join-spec :alias])\n    (map? join-spec) (:alias join-spec)\n    :else join-spec))\n\n(defn- update-joins\n  ([query stage-number join-spec f]\n   (if-let [join-alias (join-spec->alias query stage-number join-spec)]\n     (binding [mu/*enforce* false]\n       (let [query-after (as-> query $q\n                           (lib.util/update-query-stage\n                             $q\n                             stage-number\n                             (fn [stage]\n                               (u/assoc-dissoc stage :joins (f (:joins stage) join-alias))))\n                           (lib.util/update-query-stage\n                             $q\n                             stage-number\n                             (fn [stage]\n                               (m/update-existing\n                                 stage\n                                 :joins\n                                 (fn [joins]\n                                   (mapv #(lib.join/add-default-alias $q stage-number %) joins))))))]\n         (remove-invalidated-refs query-after query stage-number)))\n     query)))\n\n(mu/defn remove-join :- :metabase.lib.schema/query\n  \"Remove the join specified by `join-spec` in `query` at `stage-number`.\n  The join can be specified either by itself (as returned by [[joins]]), by its alias\n  or by its index in the list of joins as returned by [[joins]].\n  If `stage-number` is not provided, the last stage is used.\n  If the specified join cannot be found, then `query` is returned as is.\n  Top level clauses containing references to the removed join are removed too.\"\n  ([query join-spec]\n   (remove-join query -1 join-spec))\n\n  ([query        :- :metabase.lib.schema/query\n    stage-number :- :int\n    join-spec    :- [:or :metabase.lib.schema.join/join :string :int]]\n   (update-joins query stage-number join-spec (fn [joins join-alias]\n                                                (not-empty (filterv #(not= (:alias %) join-alias)\n                                                                    joins))))))\n\n(mu/defn replace-join :- :metabase.lib.schema/query\n  \"Replace the join specified by `join-spec` in `query` at `stage-number` with `new-join`.\n  If `new-join` is nil, the join is removed as if by [[remove-join]].\n  The join can be specified either by itself (as returned by [[joins]]), by its alias\n  or by its index in the list of joins as returned by [[joins]].\n  If `stage-number` is not provided, the last stage is used.\n  If the specified join cannot be found, then `query` is returned as is.\n  Top level clauses containing references to the removed join are removed too.\"\n  ([query join-spec new-join]\n   (replace-join query -1 join-spec new-join))\n\n  ([query        :- :metabase.lib.schema/query\n    stage-number :- :int\n    join-spec    :- [:or :metabase.lib.schema.join/join :string :int]\n    new-join]\n   (if (nil? new-join)\n     (remove-join query stage-number join-spec)\n     (update-joins query stage-number join-spec (fn [joins join-alias]\n                                                  (mapv #(if (= (:alias %) join-alias)\n                                                           new-join\n                                                           %)\n                                                        joins))))))\n"]}