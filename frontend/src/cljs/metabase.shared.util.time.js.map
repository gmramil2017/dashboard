{"version":3,"sources":["metabase/shared/util/time.cljc"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAWA,AAAA;;;;qCAAA,rCAEEQ;6DAFFR;AAAA,AAAA,OAAAC,8CAAAC,mDAAAF;;;IAAAA;;;;EAAAA;;8DAAAA;;;IAAAA;oDAAAA;;;;;;;AAAA;;;;yCAAA,zCAIES;iEAJFT;AAAA,AAAA,OAAAC,8CAAAE,gDAAAH;;;IAAAA;;;;EAAAA;;kEAAAA;;;IAAAA;wDAAAA;;;;;;;AAAA;;;;4CAAA,5CAKEU;oEALFV;AAAA,AAAA,OAAAC,8CAAAG,mDAAAJ;;;IAAAA;;;;EAAAA;;qEAAAA;;;IAAAA;2DAAAA;;;;;;;AAAA;;;;8CAAA,9CAMEW;sEANFX;AAAA,AAAA,OAAAC,8CAAAI,qDAAAL;;;IAAAA;;;;EAAAA;;uEAAAA;;;IAAAA;6DAAAA;;;;;;;AAAA;;;;6CAAA,7CAOEY;qEAPFZ;AAAA,AAAA,OAAAC,8CAAAK,oDAAAN;;;IAAAA;;;;EAAAA;;sEAAAA;;;IAAAA;4DAAAA;;;;;;;AAAA;;;;qCAAA,rCAQEa;6DARFb;AAAA,AAAA,OAAAC,8CAAAM,4CAAAP;;;IAAAA;;;;EAAAA;;8DAAAA;;;IAAAA;oDAAAA;;;;;;AAUA,yCAAA,zCAAOc,0FAAcC;AAArB,AACE,OAACC,uGAAMC,mDAAyB,AAACC,4BAAgBH;;AAEnD,AAAA;;;;;;gDAAA,wDAAAI,xGAAeE;AAAf,AAAA,IAAAD,WAAA,AAAA;AAAA,AAAA,QAAAA;KAAA;AAAA,OAAAC,4EAAA,CAAA,UAAA;;;KAAA;AAAA,OAAAA,4EAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;;AAAA,MAAA,KAAAC,MAAA,CAAA,8DAAA,AAAA;;;;;;AAAA,CAAA,8EAAA,9EAAeD,yFAKXE;AALJ,AAKW,yFAAA,lFAACC,4EAAoBD;;;AALhC,CAAA,8EAAA,9EAAeF,yFAMXE,MAAMR;AANV,AAOG,IAAMA,cAAQ,AAACD,uCAAaC;IACtBU,OAAK,iIAAA,/GAEE,AAACC,mDAAmBH,QAA8B,AAACI,6CAAmBJ,yBAEtE,iBAAAK,oBAAK,OAASL;AAAd,AAAA,GAAAK;AACK,4BAAA,rBAACC,6CAAoCN;;AAD1CK;;gEAJF,6IAAA,vMAKoD,AAACE,mDAAyBP,SAE5E,OAASA,oBAAyC,AAACQ,6FAAyBR,MAAMR,aAChC,AAACiB,6FAAyBT,MAAMR;;AAT/F,AAUE,oBAAI,AAAA,sFAAQA;AACV,OAACkB,4CAAkBR;;AACnBA;;;;AAnBP,CAAA,wEAAA,xEAAeJ;;AAAf,AAqBA;;;;2CAAA,3CAAea,8FAGZX;AAHH,AAIE,oBACE,AAACY,+CAAeZ;AAAOA;;AADzB,GAEE,OAASA;AAAO,4DAAA,kEAAIA,lEAAMa,rDAA+BC;;AAF3D,AAGkB,MAAO,gDAAA,sDAAA,2CAAA,jJAACC,uMACgBf","names":["args__52718__auto__","cljs.core.apply","metabase.shared.util.internal.time-common/to-range","metabase.shared.util.internal.time/valid?","metabase.shared.util.internal.time/same-day?","metabase.shared.util.internal.time/same-month?","metabase.shared.util.internal.time/same-year?","metabase.shared.util.internal.time/day-diff","metabase.shared.util.time/to-range","metabase.shared.util.time/valid?","metabase.shared.util.time/same-day?","metabase.shared.util.time/same-month?","metabase.shared.util.time/same-year?","metabase.shared.util.time/day-diff","metabase.shared.util.time/prep-options","options","cljs.core.merge","metabase.shared.util.internal.time/default-options","metabase.util/normalize-map","var_args","G__80269","metabase.shared.util.time/coerce-to-timestamp","js/Error","value","metabase.shared.util.time.coerce_to_timestamp","base","metabase.shared.util.internal.time/datetime?","metabase.shared.util.internal.time/normalize","and__5043__auto__","cljs.core/re-matches","metabase.shared.util.internal.time/parse-with-zone","metabase.shared.util.internal.time-common/string->timestamp","metabase.shared.util.internal.time-common/number->timestamp","metabase.shared.util.internal.time/localize","metabase.shared.util.time/coerce-to-time","metabase.shared.util.internal.time/time?","metabase.shared.util.internal.time-common/drop-trailing-time-zone","metabase.shared.util.internal.time/parse-time-string","cljs.core.ex_info"],"sourcesContent":["(ns metabase.shared.util.time\n  \"Time parsing helper functions.\n  In Java these return [[OffsetDateTime]], in JavaScript they return Moments.\n  Most of the implementations are in the split CLJ/CLJS files [[metabase.shared.util.internal.time]].\"\n  (:require\n   [metabase.shared.util.internal.time :as internal]\n   [metabase.shared.util.internal.time-common :as common]\n   [metabase.shared.util.namespaces :as shared.ns]\n   [metabase.util :as u]))\n\n;; Importing and re-exporting some functions defined in each implementation.\n(shared.ns/import-fns\n [common\n  to-range]\n [internal\n  valid?\n  same-day?\n  same-month?\n  same-year?\n  day-diff])\n\n(defn- prep-options [options]\n  (merge internal/default-options (u/normalize-map options)))\n\n(defn ^:export coerce-to-timestamp\n  \"Parses a timestamp value into a date object. This can be a straightforward Unix timestamp or ISO format string.\n  But the `:unit` field can be used to alter the parsing to, for example, treat the input number as a day-of-week or\n  day-of-month number.\n  Returns Moments in JS and OffsetDateTimes in Java.\"\n  ([value] (coerce-to-timestamp value {}))\n  ([value options]\n   (let [options (prep-options options)\n         base (cond\n                ;; Just return an already-parsed value. (Moment in CLJS, DateTime classes in CLJ.)\n                (internal/datetime? value)                        (internal/normalize value)\n                ;; If there's a timezone offset, or Z for Zulu/UTC time, parse it directly.\n                (and (string? value)\n                     (re-matches #\".*(Z|[+-]\\d\\d:?\\d\\d)$\" value)) (internal/parse-with-zone value)\n                ;; Then we fall back to two multimethods for coercing strings and number to timestamps per the :unit.\n                (string? value)                                   (common/string->timestamp value options)\n                :else                                             (common/number->timestamp value options))]\n     (if (:local options)\n       (internal/localize base)\n       base))))\n\n(defn ^:export coerce-to-time\n  \"Parses a standalone time, or the time portion of a timestamp.\n  Accepts a platform time value (eg. Moment, OffsetTime, LocalTime) or a string.\"\n  [value]\n  (cond\n    (internal/time? value) value\n    (string? value) (-> value common/drop-trailing-time-zone internal/parse-time-string)\n    :else           (throw (ex-info \"Unknown input to coerce-to-time; expecting a string\"\n                                    {:value value}))))\n"]}