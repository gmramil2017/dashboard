{"version":3,"sources":["metabase/lib/convert.cljc"],"mappings":"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","names":["metabase.lib.convert/*pMBQL-uuid->legacy-index*","metabase.lib.convert/*legacy-index->pMBQL-uuid*","metabase.lib.convert/clean-location","almost-stage","error-type","error-location","vec__79332","cljs.core.nth","operate-on-parent?","location","cljs.core.drop_last","location-key","cljs.core/take-last","cljs.core/seq","cljs.core.update_in","error-loc","result","cljs.core.assoc","cljs.core/vector?","cljs.core.into","cljs.core.remove","cljs.core/nil?","cljs.core/map?","metabase.util/remove-nils","cljs.core.dissoc","metabase.lib.convert/stage-keys","metabase.lib.convert/clean-stage","removals","temp__5802__auto__","vec__79356","malli.core.explain","cljs.core.filter","cljs.core.comp","cljs.core/first","cljs.core.map","cljs.core.juxt","new-stage","level__47393__auto__","metabase.util.log/glogi-level","logger__47394__auto__","metabase.util.log/is-loggable?","x__47395__auto__","js/Error","lambdaisland.glogi.log","metabase.util.log.format_msg","metabase.util.colorize","cljs.core.pr_str","or__5045__auto__","malli.error.humanize","metabase.util.pprint_to_str","clojure.data/diff","cljs.core._EQ_","cljs.core.conj","metabase.lib.convert/clean","almost-query","stage-index","current-stage","cljs.core/count","cljs.core.update","cljs.core/assoc","js/metabase","js/metabase.lib","js/metabase.lib.convert","js/metabase.lib.convert.->pMBQL","method-table__5642__auto__","cljs.core.atom","prefer-table__5643__auto__","method-cache__5644__auto__","cached-hierarchy__5645__auto__","hierarchy__5646__auto__","cljs.core.get","fexpr__79380","cljs.core/MultiFn","cljs.core.symbol","metabase.lib.convert/->pMBQL","metabase.lib.dispatch/dispatch-value","metabase.lib.hierarchy/hierarchy","metabase.lib.convert/default-MBQL-clause->pMBQL","mbql-clause","vec__79389","seq__79390","first__79391","cljs.core/next","last-elem","cljs.core/peek","last-elem-option?","clause-type","args","G__79392","cljs.core/pop","options","metabase.lib.options/ensure-uuid","x","cljs.core/Keyword","query","metabase.lib.convert/legacy-default-join-alias","metabase.lib.convert/deduplicate-join-aliases","joins","unique-name-fn","metabase.lib.util/unique-name-generator","cljs.core.mapv","join","G__79409","metabase.lib.convert/stage-source-card-id->pMBQL","stage","metabase.lib.util/legacy-string-table-id->card-id","aggregations","expressions","p__79444","vec__79445","k","v","metabase.lib.util/named-expression-clause","cljs.core/not-empty","*legacy-index->pMBQL-uuid*-orig-val__79449","*legacy-index->pMBQL-uuid*-temp-val__79450","cljs.core.map_indexed","p__79455","vec__79456","map__79459","cljs.core/--destructure-map","idx","_tag","ag-uuid","medley.core.assoc_some","cljs.core.reduce","cljs.core/not","cljs.core.disj","G__79468","medley.core.update_existing","cljs.core/update-vals","tag","G__79478","fields","cljs.core/seqable?","cljs.core.keyword","xs","m","metabase.lib.util/pipeline","stages","p__79487","vec__79489","y","vec__79495","id-or-name","p__79498","vec__79499","value","opts","clojure.set/rename-keys","metabase.lib.schema.expression/type-of","p__79507","vec__79508","pred-expr-pairs","default","G__79512","p__79519","vec__79520","metabase.lib.convert/get-or-throw!","cljs.core.ex_info","p__79527","vec__79528","p__79536","vec__79537","aggregation","vec__79540","seq__79541","first__79542","cljs.core.merge","metabase.lib.convert/legacy-query-from-inner-query","database-id","inner-query","js/metabase.lib.convert.->legacy-MBQL","fexpr__79546","metabase.lib.convert/->legacy-MBQL","var_args","G__79552","metabase.lib.convert/disqualify","p__79554","vec__79555","_v","cljs.core/qualified-keyword?","cljs.core/namespace","metabase.lib.convert.disqualify","metabase.lib.convert/options->legacy-MBQL","p__79562","vec__79564","p__79569","vec__79570","seq__79571","first__79572","metabase.lib.convert/aggregation->legacy-MBQL","inner","aggregation-opts","p__79577","vec__79580","seq__79581","first__79582","metabase.lib.convert/clause-with-options->legacy-MBQL","cljs.core.concat","temp__5804__auto__","cljs.core/cons","seq__79585","chunk__79586","count__79587","i__79588","cljs.core/chunked-seq?","c__5568__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","metabase.lib.hierarchy/derive","seq__79594","chunk__79595","count__79596","i__79597","seq__79601","chunk__79602","count__79603","i__79604","input","metabase.lib.convert/stage-metadata->legacy-metadata","stage-metadata","p1__79609#","cljs.core/update-keys","metabase.util/->snake_case_en","p__79613","map__79614","metabase.lib.convert/chain-stages","p__79617","vec__79618","G__79621","G__79622","p__79625","vec__79626","p__79629","vec__79631","_","agg-uuid","ag","G__79634","p__79639","vec__79641","id","vec__79645","p__79648","vec__79649","metabase.lib.convert/update-list->legacy-boolean-expression","pMBQL-key","legacy-key","G__79656","p1__79653#","base","G__79658","clojure.string/starts-with?","cljs.core/select-keys","metabase.lib.convert/source-card->legacy-source-table","source-card-id","*pMBQL-uuid->legacy-index*-orig-val__79669","*pMBQL-uuid->legacy-index*-temp-val__79670","p__79671","vec__79673","map__79676","p1__79664#","p2__79665#","p1__79666#","iter__5523__auto__","s__79684","cljs.core/LazySeq","c__5521__auto__","size__5522__auto__","b__79686","cljs.core/chunk-buffer","i__79685","cljs.core/-nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__79683","cljs.core/rest","expression","legacy-clause","metabase.lib.util/expression-name","cljs.core/second","parameters","query-type","cljs.core/last","G__79699"],"sourcesContent":["(ns metabase.lib.convert\n  (:require\n   [clojure.data :as data]\n   [clojure.set :as set]\n   [clojure.string :as str]\n   [malli.core :as mc]\n   [malli.error :as me]\n   [medley.core :as m]\n   [metabase.lib.dispatch :as lib.dispatch]\n   [metabase.lib.hierarchy :as lib.hierarchy]\n   [metabase.lib.options :as lib.options]\n   [metabase.lib.schema :as lib.schema]\n   [metabase.lib.schema.expression :as lib.schema.expression]\n   [metabase.lib.util :as lib.util]\n   [metabase.util :as u]\n   [metabase.util.log :as log]))\n\n(def ^:private ^:dynamic *pMBQL-uuid->legacy-index*\n  {})\n\n(def ^:private ^:dynamic *legacy-index->pMBQL-uuid*\n  {})\n\n(defn- clean-location [almost-stage error-type error-location]\n  (let [operate-on-parent? #{:malli.core/missing-key :malli.core/end-of-input}\n        location (if (operate-on-parent? error-type)\n                   (drop-last 2 error-location)\n                   (drop-last 1 error-location))\n        [location-key] (if (operate-on-parent? error-type)\n                         (take-last 2 error-location)\n                         (take-last 1 error-location))]\n    (if (seq location)\n      (update-in almost-stage\n                 location\n                 (fn [error-loc]\n                   (let [result (assoc error-loc location-key nil)]\n                     (cond\n                       (vector? error-loc) (into [] (remove nil?) result)\n                       (map? error-loc) (u/remove-nils result)\n                       :else result))))\n      (dissoc almost-stage location-key))))\n\n(def ^:private stage-keys\n  #{:aggregation :breakout :expressions :fields :filters :order-by :joins})\n\n(defn- clean-stage [almost-stage]\n  (loop [almost-stage almost-stage\n         removals []]\n    (if-let [[error-type error-location] (->> (mc/explain ::lib.schema/stage.mbql almost-stage)\n                                              :errors\n                                              (filter (comp stage-keys first :in))\n                                              (map (juxt :type :in))\n                                              first)]\n      (let [new-stage (clean-location almost-stage error-type error-location)]\n        (log/warnf \"Clean: Removing bad clause in %s due to error %s:\\n%s\"\n                   (u/colorize :yellow (pr-str error-location))\n                   (u/colorize :yellow (pr-str (or error-type\n                                                   ;; if `error-type` is missing, which seems to happen sometimes,\n                                                   ;; fall back to humanizing the entire error.\n                                                   (me/humanize (mc/explain ::lib.schema/stage.mbql almost-stage)))))\n                   (u/colorize :red (u/pprint-to-str (first (data/diff almost-stage new-stage)))))\n        (if (= new-stage almost-stage)\n          almost-stage\n          (recur new-stage (conj removals [error-type error-location]))))\n      almost-stage)))\n\n(defn- clean [almost-query]\n  (loop [almost-query almost-query\n         stage-index 0]\n    (let [current-stage (nth (:stages almost-query) stage-index)\n          new-stage (clean-stage current-stage)]\n      (if (= current-stage new-stage)\n        (if (= stage-index (dec (count (:stages almost-query))))\n          almost-query\n          (recur almost-query (inc stage-index)))\n        (recur (update almost-query :stages assoc stage-index new-stage) stage-index)))))\n\n(defmulti ->pMBQL\n  \"Coerce something to pMBQL (the version of MBQL manipulated by Dashboard Lib v2) if it's not already pMBQL.\"\n  {:arglists '([x])}\n  lib.dispatch/dispatch-value\n  :hierarchy lib.hierarchy/hierarchy)\n\n(defn- default-MBQL-clause->pMBQL [mbql-clause]\n  (let [last-elem (peek mbql-clause)\n        last-elem-option? (map? last-elem)\n        [clause-type & args] (cond-> mbql-clause\n                               last-elem-option? pop)\n        options (if last-elem-option?\n                  last-elem\n                  {})]\n    (lib.options/ensure-uuid (into [clause-type options] (map ->pMBQL) args))))\n\n(defmethod ->pMBQL :default\n  [x]\n  (if (and (vector? x)\n           (keyword? (first x)))\n    (default-MBQL-clause->pMBQL x)\n    x))\n\n(defmethod ->pMBQL :mbql/query\n  [query]\n  query)\n\n(def legacy-default-join-alias\n  \"In legacy MBQL, join `:alias` was optional, and if unspecified, this was the default alias used. In reality all joins\n  normally had an explicit `:alias` since the QB would generate one and you generally need one to do useful things\n  with the join anyway.\n\n  Since the new pMBQL schema makes `:alias` required, we'll explicitly add the implicit default when we encounter a\n  join without an alias, and remove it so we can round-trip without changes.\"\n  \"__join\")\n\n(defn- deduplicate-join-aliases\n  \"Join `:alias`es had to be unique in legacy MBQL, but they were optional. Since we add [[legacy-default-join-alias]]\n  to each join that doesn't have an explicit `:alias` for pMBQL compatibility now, we need to deduplicate the aliases\n  if it is used more than once.\n\n  Only deduplicate the default `__join` aliases; we don't want the [[lib.util/unique-name-generator]] to touch other\n  aliases and truncate them or anything like that.\"\n  [joins]\n  (let [unique-name-fn (lib.util/unique-name-generator)]\n    (mapv (fn [join]\n            (cond-> join\n              (= (:alias join) legacy-default-join-alias) (update :alias unique-name-fn)))\n          joins)))\n\n(defn- stage-source-card-id->pMBQL\n  \"If a query `stage` has a legacy `card__<id>` `:source-table`, convert it to a pMBQL-style `:source-card`.\"\n  [stage]\n  (if (string? (:source-table stage))\n    (-> stage\n        (assoc :source-card (lib.util/legacy-string-table-id->card-id (:source-table stage)))\n        (dissoc :source-table))\n    stage))\n\n(defmethod ->pMBQL :mbql.stage/mbql\n  [stage]\n  (let [aggregations (->pMBQL (:aggregation stage))\n        expressions  (->> stage\n                          :expressions\n                          (mapv (fn [[k v]]\n                                  (-> v\n                                      ->pMBQL\n                                      (lib.util/named-expression-clause k))))\n                          not-empty)]\n    (binding [*legacy-index->pMBQL-uuid* (into {}\n                                               (map-indexed (fn [idx [_tag {ag-uuid :lib/uuid}]]\n                                                              [idx ag-uuid]))\n                                               aggregations)]\n      (let [stage (-> stage\n                      stage-source-card-id->pMBQL\n                      (m/assoc-some :aggregation aggregations :expressions expressions))\n            stage (reduce\n                   (fn [stage k]\n                     (if-not (get stage k)\n                       stage\n                       (update stage k ->pMBQL)))\n                   stage\n                   (disj stage-keys :aggregation :expressions))]\n        (cond-> stage\n          (:joins stage) (update :joins deduplicate-join-aliases))))))\n\n(defmethod ->pMBQL :mbql.stage/native\n  [stage]\n  (m/update-existing stage :template-tags update-vals (fn [tag] (m/update-existing tag :dimension ->pMBQL))))\n\n(defmethod ->pMBQL :mbql/join\n  [join]\n  (let [join (-> join\n                 (update :conditions ->pMBQL)\n                 (update :stages ->pMBQL))]\n    (cond-> join\n      (:fields join) (update :fields (fn [fields]\n                                       (if (seqable? fields)\n                                         (mapv ->pMBQL fields)\n                                         (keyword fields))))\n      (not (:alias join)) (assoc :alias legacy-default-join-alias))))\n\n(defmethod ->pMBQL :dispatch-type/sequential\n  [xs]\n  (mapv ->pMBQL xs))\n\n(defmethod ->pMBQL :dispatch-type/map\n  [m]\n  (if (:type m)\n    (-> (lib.util/pipeline m)\n        (update :stages (fn [stages]\n                          (mapv ->pMBQL stages)))\n        clean)\n    (update-vals m ->pMBQL)))\n\n(defmethod ->pMBQL :field\n  [[_tag x y]]\n  (let [[id-or-name options] (if (map? x)\n                               [y x]\n                               [x y])]\n    (lib.options/ensure-uuid [:field options id-or-name])))\n\n(defmethod ->pMBQL :value\n  [[_tag value opts]]\n  ;; `:value` uses `:snake_case` keys in legacy MBQL for some insane reason (actually this was to match the shape of\n  ;; the keys in Field metadata), at least for the three type keys enumerated below.\n  ;; See [[metabase.mbql.schema/ValueTypeInfo]].\n  (let [opts (set/rename-keys opts {:base_type     :base-type\n                                    :semantic_type :semantic-type\n                                    :database_type :database-type})\n        ;; in pMBQL, `:effective-type` is a required key for `:value`. `:value` SHOULD have always had `:base-type`,\n        ;; but on the off chance it did not, get the type from value so the schema doesn't fail entirely.\n        opts (assoc opts :effective-type (or (:effective-type opts)\n                                             (:base-type opts)\n                                             (lib.schema.expression/type-of value)))]\n    (lib.options/ensure-uuid [:value opts value])))\n\n(defmethod ->pMBQL :case\n  [[_tag pred-expr-pairs options]]\n  (let [default (:default options)]\n    (cond-> [:case (dissoc options :default) (mapv ->pMBQL pred-expr-pairs)]\n      :always lib.options/ensure-uuid\n      (some? default) (conj (->pMBQL default)))))\n\n(defmethod ->pMBQL :expression\n  [[tag value opts]]\n  (lib.options/ensure-uuid [tag opts value]))\n\n(defn- get-or-throw!\n  [m k]\n  (let [result (get m k ::not-found)]\n    (if-not (= result ::not-found)\n      result\n      (throw (ex-info (str \"Unable to find \" (pr-str k) \" in map.\")\n                      {:m m\n                       :k k})))))\n\n(defmethod ->pMBQL :aggregation\n  [[tag value opts]]\n  (lib.options/ensure-uuid [tag opts (get-or-throw! *legacy-index->pMBQL-uuid* value)]))\n\n(defmethod ->pMBQL :aggregation-options\n  [[_tag aggregation options]]\n  (let [[tag opts & args] (->pMBQL aggregation)]\n    (into [tag (merge opts options)] args)))\n\n(defn legacy-query-from-inner-query\n  \"Convert a legacy 'inner query' to a full legacy 'outer query' so you can pass it to stuff\n  like [[metabase.mbql.normalize/normalize]], and then probably to [[->pMBQL]].\"\n  [database-id inner-query]\n  (merge {:database database-id, :type :query}\n         (if (:native inner-query)\n           {:native (set/rename-keys inner-query {:native :query})}\n           {:query inner-query})))\n\n(defmulti ->legacy-MBQL\n  \"Coerce something to legacy MBQL (the version of MBQL understood by the query processor and Dashboard Lib v1) if it's\n  not already legacy MBQL.\"\n  {:arglists '([x])}\n  lib.dispatch/dispatch-value\n  :hierarchy lib.hierarchy/hierarchy)\n\n(defn- disqualify\n  \"Remove any keys starting with the `:lib/` namespace from map `m`.\n\n  No args = return transducer to remove `:lib/` keys from a map. One arg = update a map `m`.\"\n  ([]\n   (remove (fn [[k _v]]\n             (and (qualified-keyword? k)\n                  (= (namespace k) \"lib\")))))\n  ([m]\n   (into {} (disqualify) m)))\n\n(defn- options->legacy-MBQL\n  \"Convert an options map in an MBQL clause to the equivalent shape for legacy MBQL. Remove `:lib/*` keys and\n  `:effective-type`, which is not used in options maps in legacy MBQL.\"\n  [m]\n  (not-empty\n   (into {}\n         (comp (disqualify)\n               (remove (fn [[k _v]]\n                         (= k :effective-type))))\n         m)))\n\n(defn- aggregation->legacy-MBQL [[tag options & args]]\n  (let [inner (into [tag] (map ->legacy-MBQL) args)\n        ;; the default value of the :case expression is in the options\n        ;; in legacy MBQL\n        inner (if (and (= tag :case) (next args))\n                (conj (pop inner) {:default (peek inner)})\n                inner)]\n    (if-let [aggregation-opts (not-empty (options->legacy-MBQL options))]\n      [:aggregation-options inner aggregation-opts]\n      inner)))\n\n(defn- clause-with-options->legacy-MBQL [[k options & args]]\n  (if (map? options)\n    (into [k] (concat (map ->legacy-MBQL args)\n                      (when-let [options (options->legacy-MBQL options)]\n                        [options])))\n    (into [k] (map ->legacy-MBQL (cons options args)))))\n\n(defmethod ->legacy-MBQL :default\n  [x]\n  (cond\n    (and (vector? x)\n         (keyword? (first x))) (clause-with-options->legacy-MBQL x)\n    (map? x)                   (-> x\n                                   disqualify\n                                   (update-vals ->legacy-MBQL))\n    :else x))\n\n(doseq [tag [::aggregation ::expression]]\n  (lib.hierarchy/derive tag ::aggregation-or-expression))\n\n(doseq [tag [:count :avg :count-where :distinct\n             :max :median :min :percentile\n             :share :stddev :sum :sum-where]]\n  (lib.hierarchy/derive tag ::aggregation))\n\n(doseq [tag [:+ :- :* :/\n             :case :coalesce\n             :abs :log :exp :sqrt :ceil :floor :round :power :interval\n             :relative-datetime :time :absolute-datetime :now :convert-timezone\n             :get-week :get-year :get-month :get-day :get-hour\n             :get-minute :get-second :get-quarter\n             :datetime-add :datetime-subtract\n             :concat :substring :replace :regexextract :regex-match-first\n             :length :trim :ltrim :rtrim :upper :lower]]\n  (lib.hierarchy/derive tag ::expression))\n\n(defmethod ->legacy-MBQL ::aggregation-or-expression\n  [input]\n  (aggregation->legacy-MBQL input))\n\n(defn- stage-metadata->legacy-metadata [stage-metadata]\n  (into []\n        (comp (map #(update-keys % u/->snake_case_en))\n              (map ->legacy-MBQL))\n        (:columns stage-metadata)))\n\n(defn- chain-stages [{:keys [stages]}]\n  ;; :source-metadata aka :lib/stage-metadata is handled differently in the two formats.\n  ;; In legacy, an inner query might have both :source-query, and :source-metadata giving the metadata for that nested\n  ;; :source-query.\n  ;; In pMBQL, the :lib/stage-metadata is attached to the same stage it applies to.\n  ;; So when chaining pMBQL stages back into legacy form, if stage n has :lib/stage-metadata, stage n+1 needs\n  ;; :source-metadata attached.\n  (let [inner-query (first (reduce (fn [[inner stage-metadata] stage]\n                                     [(cond-> (->legacy-MBQL stage)\n                                        inner          (assoc :source-query inner)\n                                        stage-metadata (assoc :source-metadata (stage-metadata->legacy-metadata stage-metadata)))\n                                      ;; Get the :lib/stage-metadata off the original pMBQL stage, not the converted one.\n                                      (:lib/stage-metadata stage)])\n                                   nil\n                                   stages))]\n    (cond-> inner-query\n      ;; If this is a native query, inner query will be used like: `{:type :native :native #_inner-query {:query ...}}`\n      (:native inner-query) (set/rename-keys {:native :query}))))\n\n(defmethod ->legacy-MBQL :dispatch-type/map [m]\n  (into {}\n        (comp (disqualify)\n              (map (fn [[k v]]\n                     [k (->legacy-MBQL v)])))\n        m))\n\n(defmethod ->legacy-MBQL :aggregation [[_ opts agg-uuid :as ag]]\n  (if (map? opts)\n    (let [opts (options->legacy-MBQL opts)]\n      (cond-> [:aggregation (get-or-throw! *pMBQL-uuid->legacy-index* agg-uuid)]\n        opts (conj opts)))\n    ;; Our conversion is a bit too aggressive and we're hitting legacy refs like [:aggregation 0] inside source_metadata that are only used for legacy and thus can be ignored\n    ag))\n\n(defmethod ->legacy-MBQL :dispatch-type/sequential [xs]\n  (mapv ->legacy-MBQL xs))\n\n(defmethod ->legacy-MBQL :field [[_ opts id]]\n  ;; Fields are not like the normal clauses - they need that options field even if it's null.\n  ;; TODO: Sometimes the given field is in the legacy order - that seems wrong.\n  (let [[opts id] (if (or (nil? opts) (map? opts))\n                    [opts id]\n                    [id opts])]\n    [:field\n     (->legacy-MBQL id)\n     (options->legacy-MBQL opts)]))\n\n(defmethod ->legacy-MBQL :value\n  [[_tag opts value]]\n  (let [opts (-> opts\n                 ;; as mentioned above, `:value` in legacy MBQL expects `snake_case` keys for type info keys.\n                 (set/rename-keys  {:base-type     :base_type\n                                    :semantic-type :semantic_type\n                                    :database-type :database_type})\n                 options->legacy-MBQL)]\n    ;; in legacy MBQL, `:value` has to be three args; `opts` has to be present, but it should can be `nil` if it is\n    ;; empty.\n    [:value value opts]))\n\n(defn- update-list->legacy-boolean-expression\n  [m pMBQL-key legacy-key]\n  (cond-> m\n    (= (count (get m pMBQL-key)) 1) (m/update-existing pMBQL-key (comp ->legacy-MBQL first))\n    (> (count (get m pMBQL-key)) 1) (m/update-existing pMBQL-key #(into [:and] (map ->legacy-MBQL) %))\n    :always (set/rename-keys {pMBQL-key legacy-key})))\n\n(defmethod ->legacy-MBQL :mbql/join [join]\n  (let [base (cond-> (disqualify join)\n               (str/starts-with? (:alias join) legacy-default-join-alias) (dissoc :alias))]\n    (merge (-> base\n               (dissoc :stages :conditions)\n               (update-vals ->legacy-MBQL))\n           (-> base\n               (select-keys [:conditions])\n               (update-list->legacy-boolean-expression :conditions :condition))\n           (chain-stages base))))\n\n(defn- source-card->legacy-source-table\n  \"If a pMBQL query stage has `:source-card` convert it to legacy-style `:source-table \\\"card__<id>\\\"`.\"\n  [stage]\n  (if-let [source-card-id (:source-card stage)]\n    (-> stage\n        (dissoc :source-card)\n        (assoc :source-table (str \"card__\" source-card-id)))\n    stage))\n\n(defmethod ->legacy-MBQL :mbql.stage/mbql\n  [stage]\n  (binding [*pMBQL-uuid->legacy-index* (into {}\n                                             (map-indexed (fn [idx [_tag {ag-uuid :lib/uuid}]]\n                                                            [ag-uuid idx]))\n                                             (:aggregation stage))]\n    (reduce #(m/update-existing %1 %2 ->legacy-MBQL)\n            (-> stage\n                disqualify\n                source-card->legacy-source-table\n                (m/update-existing :aggregation #(mapv aggregation->legacy-MBQL %))\n                (m/update-existing :expressions (fn [expressions]\n                                                  (into {}\n                                                        (for [expression expressions\n                                                              :let [legacy-clause (->legacy-MBQL expression)]]\n                                                          [(lib.util/expression-name expression)\n                                                           ;; We wrap literals in :value ->pMBQL\n                                                           ;; so unwrap this direction\n                                                           (if (= :value (first legacy-clause))\n                                                             (second legacy-clause)\n                                                             legacy-clause)]))))\n                (update-list->legacy-boolean-expression :filters :filter))\n            (disj stage-keys :aggregation :filters :expressions))))\n\n(defmethod ->legacy-MBQL :mbql.stage/native [stage]\n  (-> stage\n      disqualify\n      (update-vals ->legacy-MBQL)))\n\n(defmethod ->legacy-MBQL :mbql/query [query]\n  (let [base        (disqualify query)\n        parameters  (:parameters base)\n        inner-query (chain-stages base)\n        query-type  (if (-> query :stages last :lib/type (= :mbql.stage/native))\n                      :native\n                      :query)]\n    (merge (-> base\n               (dissoc :stages :parameters)\n               (update-vals ->legacy-MBQL))\n           (cond-> {:type query-type query-type inner-query}\n             (seq parameters) (assoc :parameters parameters)))))\n"]}