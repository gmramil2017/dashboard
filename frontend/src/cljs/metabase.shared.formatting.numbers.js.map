{"version":3,"sources":["metabase/shared/formatting/numbers.cljc"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAMA,AAAA,AAEA;;;8DAAA,2CAAA,0EAAA,nLAAKA;AAKF;;;AAAcC,iEAEZ,AAACC,qBAAQF;AAGd,qEAAA,rEAAeG;AAEf,sDAAA,mFAAA,mFAAA,gBAAA,YAAA,mFAAA,aAAA,YAAA,mFAAA,UAAA,YAAA,mFAAA,OAAA,viBAAeC;AAMf,iEAAA,jEAAOC,0IAA6BC,OAAOC;AAA3C,AACE,IAAMA,cAAU,8DAAA,6GAAA,3KAACC,sDAAOD;IAClBE,YAAU,AAACC,cAAIJ;AADrB,AAEE,GACE,YAAA,XAAOA;AADT;;AAAA,GAEE,CAAGG,YAAUN;AAAiC,QAACQ,iFAAAA,qGAAAA,tBAAcL,iFAAAA,1EAAOC,iFAAAA;;AAFtE,AAGQ,IAAAK,aAAqB,AAACI,gBAAM,+CAAA,WAAAC,1DAACC;AAAD,AAAS,QAAIT,aAAU,gBAAAQ,hBAACD;GAAUZ;YAA9D,AAAAS,4CAAAD,WAAA,IAAA,nEAAOE;aAAP,AAAAD,4CAAAD,WAAA,IAAA,pEAAaG;AAAb,AACE,oDAAK,iBAAAI,WAAe,CAAGb,SAAOQ;IAAzBM,WACe,mHAAA,2CAAA,0FAAA,IAAA,2FAAA,vVAACC,uGAAMd;AADtB,AAAA,wKAAAY,SAAAC,uEAAAD,SAAAC,zPAACT,iFAAAA,oGAAAA;kDAEDI;;;;;AAEnB,GAAA,QAAAO,qCAAAC,4CAAAC,uDAAAC,+DAAAC;AAAA;AAAA,AAAA,iEAAA,iBAAAC,6BAAA,AAAAC,6CAAA,5JAAoBS;IAApBR,6BAAA,AAAAD,6CAAA;IAAAE,6BAAA,AAAAF,6CAAA;IAAAG,iCAAA,AAAAH,6CAAA;IAAAI,0BAAA,AAAAC,4CAAA,mCAAA,gEAAA,iBAAAC,eAAA;AAAA,AAAA,QAAAA,6CAAAA,+CAAAA;;AAAA,AAAA,YAAAC,kBAAA,AAAAC,+CAAA,qCAAA,0BAA2C,aAAAE,FAAKG;AAAL,AAAA,IAAAF,aAAAD;IAAAC,iBAAA,AAAAC,4BAAAD;mBAAA,AAAAN,4CAAAM,eAAA,1EAAeG;AAAf,AAA+BA;GAA1E,4DAAAV,wBAAAL,2BAAAE,2BAAAC,2BAAAC;;;AAEA,AAAAM,2GAAA,4DAAA,WAA4C/B,OAAOC;AAAnD,AACE,OAACF,+DAA4BC,OAAOC;;AAEtC,AAAA8B,2GAAA,UAAA,WAA6C/B,OAAOC;AAApD,AACE,8IAAA,1FAAK,AAACF,+DAA4B,CAAA,QAAOC,QAAQC;;AAEnD,AAAA8B,2GAAA,WAAA,WAA8C/B,OAAOC;AAArD,AACE,IAAMA,cAAU,AAACc,uGAAMd,QAAQP;IACzB2C,YAAU,AAACC,yEAAsCrC;AADvD,AAEE,GAAI,CAAG,AAACG,cAAIJ,UAAQH;AAClB,OAA0BwC,4GAAUrC;;AACpC,OAAoBqC,sGAAU,AAACtC,+DAA4BC,OAAOC;;;AAExE,AAAA8B,2GAAA,aAAA,WAAgD/B,OAAOC;AAAvD,AACE,OAACsC,qEAAkCvC,OAAO,+GAAA,2CAAA,2FAAA,IAAA,0FAAA,nVAACe,uGAAMd;;AAEnD,2DAAA,3DAAOuC,8HAAuBxC,OAAOC;AAArC,AACE,OAAC8B,6FAAuB/B,OAAO,6GAAIC,/CACA,uDAAA,vDAACC,9DACDuC;;AAGrC,4DAAA,5DAAOC,gIAAwB1C,OAAOC;AAAtC,AACE,IAAMA,cAAQ,AAACwC,8DAAkBxC;IAC3B0C,KAAG,iQAAA,/OACE,AAAA,0GAAmB1C,cAAS,AAAA,0GAAmBA,eAK/C,8HAAA,2JAAA,vRAAK,AAAC2C,cAAI,AAAA,2FAAW3C,qBAChB,AAAC2C,cAAI,AAAA,wHAA0B3C,qBAC/B,iKAAA,jKAAC4C,gDAAK,AAAA,oGAAe5C,8BACrB,CAAG,AAACG,cAAIJ,UACL,4KAAA,KAAA,/KAAI,8JAAA,9JAAC8C,6CAAE,AAAA,oGAAe7C,2CAG9B,sKAAIA,/CACA,2DAAA,3DAACC,9CACD,qMAAA,rMAAC6C,qSAAkC,iBAAAC,kBAAA,jZACnCV;IADmCW,kBAAO,AAAA,4IAAA,ZAA6BhD;AAApC,AAAA,SAAA+C,kBAAAC,mBAAAD,kBAAAC;OAfzC,AAkBQ,AAACX,yEAAsCrC;;AAnBxD,AAoBE,OAACiD,qEAAyBP,GAAG3C;;AAEjC;;;;;;;;;;;;;;;;;;;;;mDAAA,nDAAeK,8GAoBZL,OAAOC;AApBV,AAqBE,IAAAkD,aAA+E,AAACI,4BAAgBtD;IAAhGkD,iBAAA,AAAAjB,4BAAAiB;kBAAAA,dAAsElD;cAAtE,AAAA0B,4CAAAwB,eAAA,rEAAcC;8BAAd,AAAAzB,4CAAAwB,eAAA,rFAAsBE;mBAAtB,AAAA1B,4CAAAwB,eAAA,1EAA8Cf;YAA9C,AAAAT,4CAAAwB,eAAA,nEAA2DG;AAA3D,AACE,oBACE,iBAAAE,oBAAKF;AAAL,AAAA,oBAAAE;AAAW,UAAK,AAACC,qBAAKH;;AAAtBE;;;AAA+B,IAAAE,WAAe,CAAGJ,QAAMtD;IAAxB2D,WAAgC,2DAAA,3DAACzD,+CAAOD;AAAxC,AAAA,wKAAAyD,SAAAC,uEAAAD,SAAAC,zPAACtD,iFAAAA,oGAAAA;;AADlC,oBAGE,iBAAAmD,oBAAK,UAAA,TAAMxD;AAAX,AAAA,GAAAwD;AACKH;;AADLG;;;AAC+B,QAAA,gDACK,iBAAAI,WAAe,GAAG5D;IAAlB6D,WAA0B,0DAAA,4FAAA,tJAACd,8CAAM9C;AAAjC,AAAA,wKAAA2D,SAAAC,uEAAAD,SAAAC,zPAACxD,iFAAAA,oGAAAA;MADN;;AAJjC,oBAQE+C;AAA+B,OAACZ,yDAAsBxC,OAAOC;;AAR/D,GASE,2GAAA,3GAAC6C,6CAAE,AAACgB,gDAAQ1B;AACmB,OAACG,qEAAkCvC,OAAOC;;AAV3E,AAWiC,OAACyC,0DAAyB1C,OAAOC","names":["metabase.shared.formatting.numbers/compact-currency-options","metabase.shared.formatting.numbers/compact-currency-options-js","cljs.core/clj->js","metabase.shared.formatting.numbers/display-compact-decimals-cutoff","metabase.shared.formatting.numbers/humanized-powers","metabase.shared.formatting.numbers/format-number-compact-basic","number","options","cljs.core.dissoc","abs-value","cljs.core/abs","metabase.shared.formatting.numbers/format-number","vec__79784","cljs.core.nth","power","suffix","cljs.core/first","p1__79782#","cljs.core.filter","G__79791","G__79792","cljs.core.merge","js/metabase","js/metabase.shared","js/metabase.shared.formatting","js/metabase.shared.formatting.numbers","js/metabase.shared.formatting.numbers.format-number-compact*","method-table__5642__auto__","cljs.core.atom","prefer-table__5643__auto__","method-cache__5644__auto__","cached-hierarchy__5645__auto__","hierarchy__5646__auto__","cljs.core.get","fexpr__79794","cljs.core/MultiFn","cljs.core.symbol","metabase.shared.formatting.numbers/format-number-compact*","p__79795","map__79796","cljs.core/--destructure-map","_","number-style","formatter","metabase.shared.formatting.internal.numbers/number-formatter-for-options","metabase.shared.formatting.internal.numbers/format-number-scientific","metabase.shared.formatting.numbers/format-number-compact","metabase.shared.formatting.internal.numbers-core/prep-options","metabase.shared.formatting.numbers/format-number-standard","nf","cljs.core/not","cljs.core.not_EQ_","cljs.core._EQ_","cljs.core.assoc","x__5130__auto__","y__5131__auto__","metabase.shared.formatting.internal.numbers-core/format-number-basic","map__79804","compact","negative-in-parentheses","scale","metabase.util/normalize-map","and__5043__auto__","cljs.core/NaN?","G__79809","G__79810","G__79813","G__79814","cljs.core.keyword"],"sourcesContent":["(ns metabase.shared.formatting.numbers\n  (:require\n   [metabase.shared.formatting.internal.numbers :as internal]\n   [metabase.shared.formatting.internal.numbers-core :as core]\n   [metabase.util :as u]))\n\n(declare format-number)\n\n(def compact-currency-options\n  \"Extra defaults that are mixed in when formatted a currency value in compact mode.\"\n  {:currency-style \"symbol\"})\n\n#?(:cljs\n   (def ^:export compact-currency-options-js\n     \"Extra defaults that are mixed in when formatted a currency value in compact mode.\"\n     (clj->js compact-currency-options)))\n\n;; Compact form ===================================================================================================\n(def ^:private display-compact-decimals-cutoff 1000)\n\n(def ^:private humanized-powers\n  [[1000000000000 \"T\"]\n   [1000000000    \"B\"]\n   [1000000       \"M\"]\n   [1000          \"k\"]])\n\n(defn- format-number-compact-basic [number options]\n  (let [options   (dissoc options :compact :number-style)\n        abs-value (abs number)]\n    (cond\n      (zero? number) \"0\"\n      (< abs-value display-compact-decimals-cutoff) (format-number number options)\n      :else (let [[power suffix] (first (filter #(>= abs-value (first %)) humanized-powers))]\n              (str (format-number (/ number power)\n                                  (merge options {:minimum-fraction-digits 1 :maximum-fraction-digits 1}))\n                   suffix)))))\n\n(defmulti ^:private format-number-compact* (fn [_ {:keys [number-style]}] number-style))\n\n(defmethod format-number-compact* :default [number options]\n  (format-number-compact-basic number options))\n\n(defmethod format-number-compact* \"percent\" [number options]\n  (str (format-number-compact-basic (* 100 number) options) \"%\"))\n\n(defmethod format-number-compact* \"currency\" [number options]\n  (let [options   (merge options compact-currency-options)\n        formatter (internal/number-formatter-for-options options)]\n    (if (< (abs number) display-compact-decimals-cutoff)\n      (core/format-number-basic formatter number)\n      (core/wrap-currency formatter (format-number-compact-basic number options)))))\n\n(defmethod format-number-compact* \"scientific\" [number options]\n  (internal/format-number-scientific number (merge options {:maximum-fraction-digits 1 :minimum-fraction-digits 1})))\n\n(defn- format-number-compact [number options]\n  (format-number-compact* number (-> options\n                                     (dissoc :compact)\n                                     core/prep-options)))\n\n;; High-level =====================================================================================================\n(defn- format-number-standard [number options]\n  (let [options (core/prep-options options)\n        nf (cond\n             (:number-formatter options) (:number-formatter options)\n\n             ;; Hacky special case inherited from the TS version - to match classic behavior for small numbers,\n             ;; treat maximum-fraction-digits as maximum-significant-digits instead.\n             ;; \"Small\" means |x| < 1, or < 1% for percentages.\n             (and (not (:decimals options))\n                  (not (:minimum-fraction-digits options))\n                  (not= (:number-style options) \"currency\")\n                  (< (abs number)\n                     (if (= (:number-style options) \"percent\")\n                       0.01\n                       1)))\n             (-> options\n                 (dissoc :maximum-fraction-digits)\n                 (assoc :maximum-significant-digits (max 2 (:minimum-significant-digits options 0)))\n                 internal/number-formatter-for-options)\n\n             :else (internal/number-formatter-for-options options))]\n    (core/format-number-basic nf number)))\n\n(defn ^:export format-number\n  \"Formats a number according to a map of options.\n  The options:\n  - `:compact` boolean: Set true for human-readable contractions like $2.4M rather than $2,413,326.98.\n  - `:currency` string: The ISO currency code, eg. USD, RMB, EUR. **Required** when `:number-style \\\"currency\\\"`.\n  - `:currency-style` \\\"symbol\\\" | \\\"code\\\" | \\\"name\\\": Sets how the currency unit is displayed. Default is \\\"symbol\\\".\n  - `:maximum-fraction-digits` number: Show at most this many decimal places. Default 2.\n  - `:minimum-fraction-digits` number: Show at least this many decimal places. Default 0, or 2 for currencies.\n  - `:minimum-integer-digits` number: Show at least this many integer digits. Default 1.\n  - `:maximum-significant-digits` number: Show at most this many significant figures. Default not set; no extra rounding.\n  - `:minimum-significant-digits` number: Show at least this many significant figures. Default not set; no padding.\n  - `:negative-in-parentheses` boolean: True wraps negative values in parentheses; false (the default) uses minus signs.\n  - `:number-serpators` string: A two-character string \\\"ab\\\" where `a` is the decimal symbol and `b` is the grouping.\n    Default is American-style \\\".,\\\".\n  - `:number-style` \\\"currency\\\" | \\\"decimal\\\" | \\\"scientific\\\" | \\\"percent\\\": The fundamental type to display.\n      - \\\"currency\\\" renders as eg. \\\"$123.45\\\" based on the `:currency` value.\n      - \\\"percent\\\" renders eg. 0.432 as \\\"43.2%\\\".\n      - \\\"scientific\\\" renders in scientific notation with 1 integer digit: eg. 0.00432 as \\\"4.32e-3\\\".\n      - \\\"decimal\\\" (the default) is basic numeric notation.\n  - `:scale` number: Gives a factor by which to multiply the value before rendering it.\"\n  [number options]\n  (let [{:keys [compact negative-in-parentheses number-style scale] :as options} (u/normalize-map options)]\n    (cond\n      (and scale (not (NaN? scale))) (format-number (* scale number) (dissoc options :scale))\n\n      (and (neg? number)\n           negative-in-parentheses)  (str \"(\"\n                                          (format-number (- number) (assoc options :negative-in-parentheses false))\n                                          \")\")\n\n      compact                        (format-number-compact number options)\n      (= (keyword number-style)\n         :scientific)                (internal/format-number-scientific number options)\n      :else                          (format-number-standard   number options))))\n"]}