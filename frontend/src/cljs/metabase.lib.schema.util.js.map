{"version":3,"sources":["metabase/lib/schema/util.cljc"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAIA,AAAA,AAEA,gDAAA,hDAAOA,wGAAsBC;AAA7B,AACE,OAACC,6CAAK,iBAAAC,qBAAkB,iBAAAE,mBAAI,AAAA,yFAAW,AAACC,6BAAoBL;AAApC,AAAA,oBAAAI;AAAAA;;AACI,OAAA,yFAAWJ;;;AADjC,AAAA,oBAAAE;AAAA,eAAAA,XAASC;AAAT,AAAA,0FAEGA;;AAFH;;KAIA,AAACG,6CAAK,AAACC,+CAAO,WAAAC;AAAA,AAAA,IAAAC,aAAAD;QAAA,AAAAE,4CAAAD,WAAA,IAAA,/DAAME;SAAN,AAAAD,4CAAAD,WAAA,IAAA,hEAAQG;AAAR,AACE,IAAAC,eAAA,iFAAA,uEAAA,mFAAA;AAAA,AAAA,QAAAA,6CAAAA,gDAAAA,LAAmDF,4BAAAA;IAC7D,AAACG,+CAAO,WAAAC;AAAA,AAAA,IAAAC,aAAAD;SAAA,AAAAL,4CAAAM,WAAA,IAAA,hEAAMC;QAAN,AAAAP,4CAAAM,WAAA,IAAA,/DAASE;AAAT,AACE,QAACC,uEAAAA,0EAAAA,LAAcD,sDAAAA;KAC/BlB;;AAER,qDAAA,rDAAOoB,kHAA2BC;AAAlC,AACE,oDAAA,7CAACpB,8EAAQ,AAACa,+CAAOK,wCAAeE;;AAElC;;;;yCAAA,zCAAMF,0FAGHG;AAHH,AAIE,GACE,AAACC,qBAAKD;AAAU,OAACvB,8CAAqBuB;;AADxC,GAEE,AAACE,4BAAYF;AAAG,OAACF,mDAA0BE;;AAF7C,AAAA;;;;;AAKF,+CAAA,/CAAOG,sGAAqBH;AAA5B,AACE,OAACI,kDACAC,mBACA;;;AAAA,AAAA;;6BAGIC;AAHJ,AAIG,GAAM,OAASA;AAAf,AACEA;;AADF;;;6BAECC,KAAKC;AANT,AAOG,GAAI,AAACC,0BAAUF,KAAKC;AAClB,OAACE,kBAAQF;;AACT,OAACG,6CAAKJ,KAAKC;;;oBAHZD,KAAKC;;;;;6BAALD;;6BAAAA,KAAKC;;;;;;;;;CAIT,AAACX,uCAAcG;;AAElB;;;+CAAA,/CAAMY,sGAEHZ;AAFH,AAGE,OAACa,cAAI,AAACV,6CAAoBH;;AAE5B;;;uCAAA,mFAAA,kDAAA,2CAAA,oEAAA,gCAAA,3TAAKc,sXAIc,WAAAC,SAAqBK;AAArB,AAAA,IAAAJ,aAAAD;IAAAC,iBAAA,AAAAC,4BAAAD;YAAA,AAAAE,4CAAAF,eAAA,nEAAaG;AAAb,AACE,QAAA,uBAA4B,AAACE,wGAAO,AAAClB,6CAAoBgB;WAL9E,mFAAA,AAAA,yHAAA,wCAAA,gDAAA,qDAAA,sDAAA,iEAAA,yDAAA,oDAAA,6DAAA,6DAAA,mDAAA,sDAAA,AAAA,gGAAA,AAAA,4EAAA,AAAA,gCAAA,AAAA,GAAA,AAAA,EAAA,AAAA,GAAA,AAAA,GAAA,AAAA,8JAAA,AAAA,wDAAA,kBAAAP,8CAAA,AAAA,AAAAA,4DAAA","names":["metabase.lib.schema.util/collect-uuids-in-map","m","cljs.core.into","temp__5802__auto__","our-uuid","or__5045__auto__","metabase.lib.options/options","cljs.core.comp","cljs.core.remove","p__61224","vec__61225","cljs.core.nth","k","_v","fexpr__61228","cljs.core.mapcat","p__61229","vec__61230","_k","v","metabase.lib.schema.util/collect-uuids","metabase.lib.schema.util/collect-uuids-in-sequence","xs","x","cljs.core/map?","cljs.core/sequential?","metabase.lib.schema.util/find-duplicate-uuid","cljs.core.transduce","cljs.core/identity","result","seen","a-uuid","cljs.core/contains?","cljs.core/reduced","cljs.core.conj","metabase.lib.schema.util/unique-uuids?","cljs.core/not","metabase.lib.schema.util/UniqueUUIDs","p__61234","map__61235","cljs.core/--destructure-map","cljs.core.get","value","_","cljs.core.pr_str"],"sourcesContent":["(ns metabase.lib.schema.util\n  (:require\n   [metabase.lib.options :as lib.options]))\n\n(declare collect-uuids)\n\n(defn- collect-uuids-in-map [m]\n  (into (if-let [our-uuid (or (:lib/uuid (lib.options/options m))\n                              (:lib/uuid m))]\n          [our-uuid]\n          [])\n        (comp (remove (fn [[k _v]]\n                        (#{:lib/metadata :lib/stage-metadata :lib/options} k)))\n              (mapcat (fn [[_k v]]\n                        (collect-uuids v))))\n        m))\n\n(defn- collect-uuids-in-sequence [xs]\n  (into [] (mapcat collect-uuids) xs))\n\n(defn collect-uuids\n  \"Return all the `:lib/uuid`s in a part of an MBQL query (a clause or map) as a sequence. This will be used to ensure\n  there are no duplicates.\"\n  [x]\n  (cond\n    (map? x)        (collect-uuids-in-map x)\n    (sequential? x) (collect-uuids-in-sequence x)\n    :else           nil))\n\n(defn- find-duplicate-uuid [x]\n  (transduce\n   identity\n   (fn\n     ([]\n      #{})\n     ([result]\n      (when (string? result)\n        result))\n     ([seen a-uuid]\n      (if (contains? seen a-uuid)\n        (reduced a-uuid)\n        (conj seen a-uuid))))\n   (collect-uuids x)))\n\n(defn unique-uuids?\n  \"True if all the `:lib/uuid`s in something are unique.\"\n  [x]\n  (not (find-duplicate-uuid x)))\n\n(def UniqueUUIDs\n  \"Malli schema for to ensure that all `:lib/uuid`s are unique.\"\n  [:fn\n   {:error/message \"all :lib/uuids must be unique\"\n    :error/fn      (fn [{:keys [value]} _]\n                     (str \"Duplicate :lib/uuid \" (pr-str (find-duplicate-uuid value))))}\n   #'unique-uuids?])\n"]}