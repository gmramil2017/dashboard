{"version":3,"sources":["metabase/mbql/util/match/impl.cljc"],"mappings":"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","names":["metabase.mbql.util.match.impl/match-with-pred-or-class","pred-or-class","cljs.core/fn?","cljs.core.ex_info","js/Error","metabase.mbql.util.match.impl/match-in-collection","match-fn","clause-parents","form","cljs.core/vector?","cljs.core/map?","cljs.core.reduce","cljs.core/concat","iter__5523__auto__","s__62700","cljs.core/LazySeq","temp__5804__auto__","cljs.core/seq","cljs.core/chunked-seq?","c__5521__auto__","size__5522__auto__","cljs.core/count","b__62702","cljs.core/chunk-buffer","i__62701","vec__62703","cljs.core/-nth","cljs.core.nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__62699","cljs.core/chunk-rest","vec__62708","cljs.core/first","cljs.core/cons","cljs.core/rest","k","v","G__62706","G__62707","G__62711","G__62712","cljs.core.conj","cljs.core/sequential?","cljs.core.mapcat","cljs.core.partial","cljs.core/Keyword","metabase.mbql.util.match.impl/replace-in-collection","replace-fn","cljs.core.into","s__62718","b__62720","i__62719","vec__62723","iter__62717","vec__62728","G__62726","G__62727","G__62731","G__62732","cljs.core.mapv","var_args","args__5775__auto__","len__5769__auto__","i__5770__auto__","argseq__5776__auto__","cljs.core/IndexedSeq","metabase.mbql.util.match.impl/update-in-unless-empty","seq62739","G__62740","cljs.core/next","G__62741","G__62742","self__5754__auto__","m","ks","f","args","cljs.core/not","cljs.core.get_in","cljs.core.apply","cljs.core/update-in","cljs.core/chunk-first"],"sourcesContent":["(ns metabase.mbql.util.match.impl\n  \"Internal implementation of the MBQL `match` and `replace` macros. Don't use these directly.\")\n\n;; have to do this at runtime because we don't know if a symbol is a class or pred or whatever when we compile the macro\n(defn match-with-pred-or-class\n  \"Return a function to use for pattern matching via `core.match`'s `:guard` functionality based on the value of a\n  `pred-or-class` passed in as a pattern to `match` or `replace`.\n\n  (Class-based matching currently only works in Clojure. For ClojureScript, only predicate function matching works.)\"\n  [pred-or-class]\n  (cond\n    ;; TODO -- FIXME -- Figure out how to make this work in JS\n    #?@(:clj [(class? pred-or-class)\n              (partial instance? pred-or-class)])\n\n    (fn? pred-or-class)\n    pred-or-class\n\n    :else\n    ;; this is dev-specific so we don't need to localize it\n    (throw (ex-info \"Invalid pattern: don't know how to handle symbol.\" {:symbol pred-or-class}))))\n\n(defn match-in-collection\n  \"Internal impl for `match`. If `form` is a collection, call `match-fn` to recursively look for matches in it.\"\n  [match-fn clause-parents form]\n  {:pre [(fn? match-fn) (vector? clause-parents)]}\n  (cond\n    (map? form)\n    (reduce concat (for [[k v] form]\n                     (match-fn (conj clause-parents k) v)))\n\n    (sequential? form)\n    (mapcat (partial match-fn (if (keyword? (first form))\n                                (conj clause-parents (first form))\n                                clause-parents))\n            form)))\n\n(defn replace-in-collection\n  \"Inernal impl for `replace`. Recursively replace values in a collection using a `replace-fn`.\"\n  [replace-fn clause-parents form]\n  (cond\n    (map? form)\n    (into form (for [[k v] form]\n                 [k (replace-fn (conj clause-parents k) v)]))\n\n    (sequential? form)\n    (mapv (partial replace-fn (if (keyword? (first form))\n                                (conj clause-parents (first form))\n                                clause-parents))\n          form)\n    :else              form))\n\n(defn update-in-unless-empty\n  \"Like `update-in`, but only updates in the existing value is non-empty.\"\n  [m ks f & args]\n  (if-not (seq (get-in m ks))\n    m\n    (apply update-in m ks f args)))\n"]}