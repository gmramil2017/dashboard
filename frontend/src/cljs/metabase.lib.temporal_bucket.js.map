{"version":3,"sources":["metabase/lib/temporal_bucket.cljc"],"mappings":"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","names":["var_args","G__65141","metabase.lib.temporal-bucket/describe-temporal-unit","js/Error","metabase.lib.temporal_bucket.describe_temporal_unit","unit","n","cljs.core/not","cljs.core/abs","G__65142","cljs.core/Keyword","cljs.core.keyword","metabase.shared.util.i18n/js-i18n-n","vec__65190","seq__65191","cljs.core/seq","first__65192","cljs.core/first","cljs.core/next","more","clojure.string.split","cljs.core/name","clojure.string.join","cljs.core/cons","clojure.string/capitalize","metabase.lib.temporal-bucket/TemporalIntervalAmount","metabase.lib.temporal-bucket/interval-n->int","G__65204","metabase.lib.temporal-bucket/describe-temporal-interval","or__5045__auto__","cljs.core._EQ_","metabase.shared.util.i18n/js-i18n","metabase.shared.util.i18n.js_i18n","metabase.lib.temporal-bucket/describe-relative-datetime","clojure.string/lower-case","js/metabase","js/metabase.lib","js/metabase.lib.temporal-bucket","js/metabase.lib.temporal-bucket.with-temporal-bucket-method","method-table__5642__auto__","cljs.core.atom","prefer-table__5643__auto__","method-cache__5644__auto__","cached-hierarchy__5645__auto__","hierarchy__5646__auto__","cljs.core.get","fexpr__65231","cljs.core/MultiFn","cljs.core.symbol","metabase.lib.temporal-bucket/with-temporal-bucket-method","x","_unit","metabase.lib.dispatch/dispatch-value","metabase.lib.hierarchy/hierarchy","metabase.lib.temporal-bucket/with-temporal-bucket","option-or-unit","G__65246","js/metabase.lib.temporal-bucket.temporal-bucket-method","fexpr__65253","metabase.lib.temporal-bucket/temporal-bucket-method","_x","metabase.lib.temporal-bucket/temporal-bucket","temp__5804__auto__","metabase.lib.temporal-bucket/time-bucket-options","cljs.core.mapv","G__65260","cljs.core.assoc","metabase.lib.schema.temporal-bucketing/ordered-time-bucketing-units","metabase.lib.temporal-bucket/date-bucket-options","G__65261","metabase.lib.schema.temporal-bucketing/ordered-date-bucketing-units","metabase.lib.temporal-bucket/datetime-bucket-options","G__65262","metabase.lib.schema.temporal-bucketing/ordered-datetime-bucketing-units","metabase.lib.metadata.calculation/display-name-method","p__65263","map__65264","cljs.core/--destructure-map","_query","_stage-number","_style","metabase.lib.metadata.calculation/display-info-method","query","stage-number","option","cljs.core.merge","metabase.lib.metadata.calculation.display_name","cljs.core/select-keys","js/metabase.lib.temporal-bucket.available-temporal-buckets-method","fexpr__65268","metabase.lib.temporal-bucket/available-temporal-buckets-method","G__65280","metabase.lib.temporal-bucket/available-temporal-buckets","metabase.lib.temporal_bucket.available_temporal_buckets"],"sourcesContent":["(ns metabase.lib.temporal-bucket\n  (:require\n   [clojure.string :as str]\n   [metabase.lib.dispatch :as lib.dispatch]\n   [metabase.lib.hierarchy :as lib.hierarchy]\n   [metabase.lib.metadata.calculation :as lib.metadata.calculation]\n   [metabase.lib.schema :as lib.schema]\n   [metabase.lib.schema.common :as lib.schema.common]\n   [metabase.lib.schema.temporal-bucketing\n    :as lib.schema.temporal-bucketing]\n   [metabase.shared.util.i18n :as i18n]\n   [metabase.util.malli :as mu]))\n\n(mu/defn describe-temporal-unit :- :string\n  \"Get a translated description of a temporal bucketing unit.\"\n  ([]\n   (describe-temporal-unit 1 nil))\n\n  ([unit]\n   (describe-temporal-unit 1 unit))\n\n  ([n    :- :int\n    unit :- [:maybe :keyword]]\n   (if-not unit\n     \"\"\n     (let [n (abs n)]\n       (case (keyword unit)\n         :default         (i18n/trun \"Default period\"  \"Default periods\"  n)\n         :millisecond     (i18n/trun \"Millisecond\"     \"Milliseconds\"     n)\n         :second          (i18n/trun \"Second\"          \"Seconds\"          n)\n         :minute          (i18n/trun \"Minute\"          \"Minutes\"          n)\n         :hour            (i18n/trun \"Hour\"            \"Hours\"            n)\n         :day             (i18n/trun \"Day\"             \"Days\"             n)\n         :week            (i18n/trun \"Week\"            \"Weeks\"            n)\n         :month           (i18n/trun \"Month\"           \"Months\"           n)\n         :quarter         (i18n/trun \"Quarter\"         \"Quarters\"         n)\n         :year            (i18n/trun \"Year\"            \"Years\"            n)\n         :minute-of-hour  (i18n/trun \"Minute of hour\"  \"Minutes of hour\"  n)\n         :hour-of-day     (i18n/trun \"Hour of day\"     \"Hours of day\"     n)\n         :day-of-week     (i18n/trun \"Day of week\"     \"Days of week\"     n)\n         :day-of-month    (i18n/trun \"Day of month\"    \"Days of month\"    n)\n         :day-of-year     (i18n/trun \"Day of year\"     \"Days of year\"     n)\n         :week-of-year    (i18n/trun \"Week of year\"    \"Weeks of year\"    n)\n         :month-of-year   (i18n/trun \"Month of year\"   \"Months of year\"   n)\n         :quarter-of-year (i18n/trun \"Quarter of year\" \"Quarters of year\" n)\n         ;; e.g. :unknown-unit => \"Unknown unit\"\n         (let [[unit & more] (str/split (name unit) #\"-\")]\n           (str/join \\space (cons (str/capitalize unit) more))))))))\n\n(def ^:private TemporalIntervalAmount\n  [:or [:enum :current :last :next] :int])\n\n(defn- interval-n->int [n]\n  (if (number? n)\n    n\n    (case n\n      :current 0\n      :next    1\n      :last    -1\n      0)))\n\n(mu/defn describe-temporal-interval :- ::lib.schema.common/non-blank-string\n  \"Get a translated description of a temporal bucketing interval. If unit is unspecified, assume `:day`.\"\n  [n    :- TemporalIntervalAmount\n   unit :- [:maybe :keyword]]\n  (let [n    (interval-n->int n)\n        unit (or unit :day)]\n    (cond\n      (zero? n) (if (= unit :day)\n                  (i18n/tru \"Today\")\n                  (i18n/tru \"This {0}\" (describe-temporal-unit unit)))\n      (= n 1)   (if (= unit :day)\n                  (i18n/tru \"Tomorrow\")\n                  (i18n/tru \"Next {0}\" (describe-temporal-unit unit)))\n      (= n -1)  (if (= unit :day)\n                  (i18n/tru \"Yesterday\")\n                  (i18n/tru \"Previous {0}\" (describe-temporal-unit unit)))\n      (neg? n)  (i18n/tru \"Previous {0} {1}\" (abs n) (describe-temporal-unit (abs n) unit))\n      (pos? n)  (i18n/tru \"Next {0} {1}\" n (describe-temporal-unit n unit)))))\n\n(mu/defn describe-relative-datetime :- ::lib.schema.common/non-blank-string\n  \"Get a translated description of a relative datetime interval, ported from\n `frontend/src/metabase-lib/queries/utils/query-time.js`.\n\n  e.g. if the relative interval is `-1 days`, then `n` = `-1` and `unit` = `:day`.\n\n  If `:unit` is unspecified, assume `:day`.\"\n  [n    :- TemporalIntervalAmount\n   unit :- [:maybe :keyword]]\n  (let [n    (interval-n->int n)\n        unit (or unit :day)]\n    (cond\n      (zero? n)\n      (i18n/tru \"Now\")\n\n      (neg? n)\n      ;; this should legitimately be lowercasing in the user locale. I know system locale isn't necessarily the same\n      ;; thing, but it might be. This will have to do until we have some sort of user-locale lower-case functionality\n      #_ {:clj-kondo/ignore [:discouraged-var]}\n      (i18n/tru \"{0} {1} ago\" (abs n) (str/lower-case (describe-temporal-unit (abs n) unit)))\n\n      :else\n      #_ {:clj-kondo/ignore [:discouraged-var]}\n      (i18n/tru \"{0} {1} from now\" n (str/lower-case (describe-temporal-unit n unit))))))\n\n(defmulti with-temporal-bucket-method\n  \"Implementation for [[temporal-bucket]]. Implement this to tell [[temporal-bucket]] how to add a bucket to a\n  particular MBQL clause.\"\n  {:arglists '([x unit])}\n  (fn [x _unit]\n    (lib.dispatch/dispatch-value x))\n  :hierarchy lib.hierarchy/hierarchy)\n\n(mu/defn with-temporal-bucket\n  \"Add a temporal bucketing unit, e.g. `:day` or `:day-of-year`, to an MBQL clause or something that can be converted to\n  an MBQL clause. E.g. for a Field or Field metadata or `:field` clause, this might do something like this:\n\n    (temporal some-field :day)\n\n    =>\n\n    [:field 1 {:temporal-unit :day}]\n\n  Pass a `nil` `unit` to remove the temporal bucket.\"\n  [x option-or-unit :- [:maybe [:or\n                                ::lib.schema.temporal-bucketing/option\n                                ::lib.schema.temporal-bucketing/unit]]]\n  (with-temporal-bucket-method x (cond-> option-or-unit\n                                   (not (keyword? option-or-unit)) :unit)))\n\n(defmulti temporal-bucket-method\n  \"Implementation of [[temporal-bucket]]. Return the current temporal bucketing unit associated with `x`.\"\n  {:arglists '([x])}\n  lib.dispatch/dispatch-value\n  :hierarchy lib.hierarchy/hierarchy)\n\n(defmethod temporal-bucket-method :default\n  [_x]\n  nil)\n\n(mu/defn temporal-bucket :- [:maybe ::lib.schema.temporal-bucketing/option]\n  \"Get the current temporal bucketing option associated with something, if any.\"\n  [x]\n  (when-let [unit (temporal-bucket-method x)]\n    {:lib/type :option/temporal-bucketing\n     :unit unit}))\n\n(def time-bucket-options\n  \"The temporal bucketing options for time type expressions.\"\n  (mapv (fn [unit]\n          (cond-> {:lib/type :option/temporal-bucketing\n                   :unit unit}\n            (= unit :hour) (assoc :default true)))\n        lib.schema.temporal-bucketing/ordered-time-bucketing-units))\n\n(def date-bucket-options\n  \"The temporal bucketing options for date type expressions.\"\n  (mapv (fn [unit]\n          (cond-> {:lib/type :option/temporal-bucketing\n                   :unit unit}\n            (= unit :day) (assoc :default true)))\n        lib.schema.temporal-bucketing/ordered-date-bucketing-units))\n\n(def datetime-bucket-options\n  \"The temporal bucketing options for datetime type expressions.\"\n  (mapv (fn [unit]\n          (cond-> {:lib/type :option/temporal-bucketing\n                   :unit unit}\n            (= unit :day) (assoc :default true)))\n        lib.schema.temporal-bucketing/ordered-datetime-bucketing-units))\n\n(defmethod lib.metadata.calculation/display-name-method :option/temporal-bucketing\n  [_query _stage-number {:keys [unit]} _style]\n  (describe-temporal-unit unit))\n\n(defmethod lib.metadata.calculation/display-info-method :option/temporal-bucketing\n  [query stage-number option]\n  (merge {:display-name (lib.metadata.calculation/display-name query stage-number option)}\n         (select-keys option [:default :selected])))\n\n(defmulti available-temporal-buckets-method\n  \"Implementation for [[available-temporal-buckets]]. Return a set of units from\n  `:metabase.lib.schema.temporal-bucketing/unit` that are allowed to be used with `x`.\"\n  {:arglists '([query stage-number x])}\n  (fn [_query _stage-number x]\n    (lib.dispatch/dispatch-value x))\n  :hierarchy lib.hierarchy/hierarchy)\n\n(defmethod available-temporal-buckets-method :default\n  [_query _stage-number _x]\n  #{})\n\n(mu/defn available-temporal-buckets :- [:sequential [:ref ::lib.schema.temporal-bucketing/option]]\n  \"Get a set of available temporal bucketing units for `x`. Returns nil if no units are available.\"\n  ([query x]\n   (available-temporal-buckets query -1 x))\n\n  ([query        :- ::lib.schema/query\n    stage-number :- :int\n    x]\n   (available-temporal-buckets-method query stage-number x)))\n"]}