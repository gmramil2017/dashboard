{"version":3,"sources":["metabase/lib/database.cljc"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AASA;;;;;;;;;;;;;oCAAA,pCAASA,gFAQNC;AARH,AAAA;AASE,IAAAC,qBAAc,AAAA,2FAAWD;AAAzB,AAAA,oBAAAC;AAAA,AAAA,SAAAA,LAAWC;AAAX,AACE,GAAI,AAACC,gDAAKD,GAAGE;AACXF;;AACA,IAAAD,yBAA0B,AAACK,iCAAwBN;AAAnD,AAAA,oBAAAC;AAAA,AAAA,qBAAAA,jBAAWI;AAAX,AACE,IAAAJ,yBAAyB,AAACO,2BAAkBR,MAAMK;AAAlD,AAAA,oBAAAJ;AAAA,AAAA,oBAAAA,hBAAWM;AAAX,AACE,OAAA,iGAAcA;;AADhB;;;AADF;;;;AAHJ","names":["metabase.lib.database/database-id","query","temp__5804__auto__","id","cljs.core.not_EQ_","metabase.mbql.schema/saved-questions-virtual-database-id","source-card-id","metabase.lib.util/source-card-id","card-metadata","metabase.lib.metadata/card"],"sourcesContent":["(ns metabase.lib.database\n  (:require\n   [metabase.lib.metadata :as lib.metadata]\n   [metabase.lib.schema :as lib.schema]\n   [metabase.lib.schema.id :as lib.schema.id]\n   [metabase.lib.util :as lib.util]\n   [metabase.mbql.schema :as mbql.s]\n   [metabase.util.malli :as mu]))\n\n(mu/defn database-id :- [:maybe ::lib.schema.id/database]\n  \"Get the Database ID (`:database`) associated with a query. If the query is using\n  the [[mbql.s/saved-questions-virtual-database-id]] (used in some situations for queries with a `:source-card`)\n\n    {:database -1337}\n\n  we will attempt to resolve the correct Database ID by getting metadata for the source Card and returning its\n  `:database-id`; if this is not available for one reason or another this will return `nil`.\"\n  [query :- ::lib.schema/query]\n  (when-let [id (:database query)]\n    (if (not= id mbql.s/saved-questions-virtual-database-id)\n      id\n      (when-let [source-card-id (lib.util/source-card-id query)]\n        (when-let [card-metadata (lib.metadata/card query source-card-id)]\n          (:database-id card-metadata))))))\n"]}