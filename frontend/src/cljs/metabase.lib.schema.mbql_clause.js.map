{"version":3,"sources":["metabase/lib/schema/mbql_clause.cljc"],"mappings":"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","names":["js/metabase","js/metabase.lib","js/metabase.lib.schema","js/metabase.lib.schema.mbql-clause","js/metabase.lib.schema.mbql-clause.tag-registry","metabase.lib.schema.mbql-clause/tag-registry","cljs.core.atom","metabase.lib.schema.mbql-clause/tag-schema","cljs.core.into","cljs.core/deref","cljs.core.sort","metabase.lib.schema.mbql-clause/update-tag-schema!","metabase.util.malli.registry/register!","metabase.lib.schema.mbql-clause/tag->registered-schema-name","tag","cljs.core.keyword","cljs.core/name","metabase.lib.schema.mbql-clause/clause*-schema","cljs.core/first","p__59968","map__59969","cljs.core/--destructure-map","cljs.core.get","value","_","cljs.core/vector?","cljs.core.pr_str","cljs.core.map","metabase.lib.schema.mbql-clause/update-clause-schema!","cljs.core/add-watch","_key","_ref","_old-state","_new-state","cljs.core/any?","var_args","G__59979","metabase.lib.schema.mbql-clause/define-mbql-clause","js/Error","schema","schema-name","cljs.core/contains?","cljs.core.swap_BANG_","cljs.core/conj","_arrow","return-type","metabase.lib.schema.mbql_clause.define_mbql_clause","metabase.lib.schema.expression/type-of-method","_clause","args__5775__auto__","len__5769__auto__","i__5770__auto__","argseq__5776__auto__","cljs.core/IndexedSeq","metabase.lib.schema.mbql-clause/catn-clause-schema","seq59980","G__59981","cljs.core/next","self__5754__auto__","args","cljs.core/simple-keyword?","cljs.core/every?","cljs.core/keyword?","metabase.lib.schema.mbql-clause/tuple-clause-schema","seq59994","G__59995","metabase.lib.schema.mbql-clause/define-mbql-clause-with-schema-fn","seq60002","G__60003","G__60004","schema-fn","vec__60005","seq__60006","cljs.core/seq","first__60007","cljs.core._EQ_","cljs.core/cons","cljs.core/second","cljs.core.drop","cljs.core.apply","metabase.lib.schema.mbql-clause/define-tuple-mbql-clause","seq60008","G__60009","metabase.lib.schema.mbql-clause/define-catn-mbql-clause","seq60011","G__60012","metabase.lib.schema.mbql-clause/resolve-schema","metabase.util.malli.registry/resolve-schema"],"sourcesContent":["(ns metabase.lib.schema.mbql-clause\n  (:require\n   [metabase.lib.schema.common :as common]\n   [metabase.lib.schema.expression :as expression]\n   [metabase.types]\n   [metabase.util.malli :as mu]\n   [metabase.util.malli.registry :as mr]))\n\n(comment metabase.types/keep-me)\n\n(defonce ^:private ^{:doc \"Set of all registered MBQL clause tags e.g. #{:starts-with}\"} tag-registry\n  (atom #{}))\n\n(defn- tag-schema\n  \"Build the schema for `::tag`, for a valid MBQL clause tag.\"\n  []\n  (into [:enum] (sort @tag-registry)))\n\n(defn- update-tag-schema! []\n  (mr/def ::tag\n    (tag-schema)))\n\n(defn- tag->registered-schema-name\n  \"Given an MBQL clause tag like `:starts-with`, return the name of the schema we'll register for it, e.g.\n  `:mbql.clause/starts-with`.\"\n  [tag]\n  (keyword \"mbql.clause\" (name tag)))\n\n(defn- clause*-schema\n  \"Build the schema for `::clause*`, a `:multi` schema that maps MBQL clause tag -> the schema\n  in [[clause-schema-registry]].\"\n  []\n  (into [:multi {:dispatch first\n                 :error/fn (fn [{:keys [value]} _]\n                             (if (vector? value)\n                               (str \"Invalid \" (pr-str (first value)) \" clause: \" (pr-str value))\n                               \"not an MBQL clause\"))}]\n        (map (fn [tag]\n               [tag [:ref (tag->registered-schema-name tag)]]))\n        @tag-registry))\n\n(defn- update-clause-schema! []\n  (mr/def ::clause*\n    (clause*-schema)))\n\n;;; whenever [[tag-registry]] is updated, update the `::tag` and `::clause*` schemas.\n(add-watch tag-registry\n           ::update-schemas\n           (fn [_key _ref _old-state _new-state]\n             (update-tag-schema!)\n             (update-clause-schema!)))\n\n;;; create initial, empty definitions of `::tag` and `::clause*`\n(update-tag-schema!)\n(update-clause-schema!)\n\n(mr/def ::clause\n  [:and\n   [:schema\n    [:cat\n     [:schema [:ref ::tag]]\n     [:* any?]]]\n   [:ref ::clause*]])\n\n(mu/defn define-mbql-clause\n  \"Register the `schema` for an MBQL clause with `tag` keyword, and update the `:metabase.lib.schema.mbql-clause/clause`\n  so it knows about this clause. Optionally specify the [[expression/type-of]] that this clause returns, inline, if\n  the clause always returns a certain type; otherwise you can implement [[expression/type-of]] separately.\n\n  (define-mbql-clause :is-null :- :type/Boolean\n    [:tuple\n     [:= :is-null]\n     ::common/options\n     [:ref :metabase.lib.schema.expression/expression]])\"\n  ([tag :- simple-keyword?\n    schema]\n   (let [schema-name (tag->registered-schema-name tag)]\n     (mr/def schema-name schema)\n     ;; only need to update the registry and calculated schemas if this is the very first time we're defining this\n     ;; clause. Otherwise since they're wrapped in `:ref` we don't need to recalculate them. This way we can avoid tons\n     ;; of pointless recalculations every time we reload a namespace.\n     (when-not (contains? @tag-registry tag)\n       (swap! tag-registry conj tag)))\n   nil)\n\n  ([tag         :- simple-keyword?\n    _arrow      :- [:= :-]\n    return-type :- ::expression/base-type\n    schema]\n   (define-mbql-clause tag schema)\n   (defmethod expression/type-of-method tag\n     [_clause]\n     return-type)\n   nil))\n\n;;; TODO -- add more stuff.\n\n(defn catn-clause-schema\n  \"Helper intended for use with [[define-mbql-clause]]. Create an MBQL clause schema with `:catn`. Use this for clauses\n  with variable length. For clauses with fixed argument length, use [[tuple-clause-schema]] instead, since that gives\n  slight better error messages and doesn't love to complain about 'potentially recursive seqexes' when you forget to\n  wrap args in `:schema`.\"\n  [tag & args]\n  {:pre [(simple-keyword? tag)\n         (every? vector? args)\n         (every? keyword? (map first args))]}\n  [:schema\n   (into [:catn\n          {:error/message (str \"Valid \" tag \" clause\")}\n          [:tag [:= tag]]\n          [:options [:schema [:ref ::common/options]]]]\n         args)])\n\n(defn tuple-clause-schema\n  \"Helper intended for use with [[define-mbql-clause]]. Create a clause schema with `:tuple`. Use this for fixed-length\n  MBQL clause schemas. Use [[catn-clause-schema]] for variable-length schemas.\"\n  [tag & args]\n  {:pre [(simple-keyword? tag)]}\n  (into [:tuple\n         {:error/message (str \"Valid \" tag \" clause\")}\n         [:= tag]\n         [:ref ::common/options]]\n        args))\n\n;;;; Even more convenient functions!\n\n(defn- define-mbql-clause-with-schema-fn [schema-fn tag & args]\n  (let [[return-type & args] (if (= (first args) :-)\n                               (cons (second args) (drop 2 args))\n                               (cons nil args))\n        schema               (apply schema-fn tag args)]\n    (if return-type\n      (define-mbql-clause tag :- return-type schema)\n      (define-mbql-clause tag schema))))\n\n(defn define-tuple-mbql-clause\n  \"Helper. Combines [[define-mbql-clause]] and [[tuple-clause-schema]].\"\n  [tag & args]\n  (apply define-mbql-clause-with-schema-fn tuple-clause-schema tag args))\n\n(defn define-catn-mbql-clause\n  \"Helper. Combines [[define-mbql-clause]] and [[catn-clause-schema]].\"\n  [tag & args]\n  (apply define-mbql-clause-with-schema-fn catn-clause-schema tag args))\n\n(defn resolve-schema\n  \"For REPL/test usage: get the definition of the schema associated with an MBQL clause tag.\"\n  [tag]\n  (mr/resolve-schema (tag->registered-schema-name tag)))\n"]}