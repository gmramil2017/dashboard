{"version":3,"sources":["metabase/lib/types/constants.cljc"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAKG,AACE;;;;;AAAcA,6CAIZ,AAACC,+CAAO,WAAKC,EAAEC;AAAP,AAAY,IAAAC,WAAMF;AAAN,AAAA,yDAAAE,zDAASC,kEAAS,AAACC,eAAKH,KAAKA;;AAA7BC;GAApB,KAEQ,AAACG,iDAAS,8HAAA,mFAAA,uDAAA,8DAAA,tUAACC,sDAAOC;;;AAG5B;;;0CAAA,1CAAcC;;;AACd;;;0CAAA,1CAAcC;;;AACd;;;+CAAA,/CAAcC;;;AACd;;;2CAAA,3CAAcC;;;AACd;;;4CAAA,5CAAcC;;;AACd;;;4CAAA,5CAAcC;;;AACd;;;8CAAA,9CAAcC;;;AACd;;;+CAAA,/CAAcC;;;AACd;;;+CAAA,/CAAcC;;;AAGd;;;4CAAA,5CAAcC;;;AACd;;;yCAAA,zCAAcC;;;AACd;;;4CAAA,5CAAcC;;;AAEd;;;2CAAA,3CAAcC;;AAGnB;;;;gDAAA,wCAAA,wHAAA,2HAAA,+GAAA,2HAAA,kHAAA,8GAAA,gHAAA,oHAAA,mHAAA,iHAAA,kHAAA,oHAAA,0HAAA,mHAAA,uHAAA,2CAAA,uEAAA,mFAAA,wFAAA,2CAAA,yEAAA,mFAAA,qFAAA,2CAAA,uEAAA,mFAAA,uDAAA,yDAAA,4EAAA,2CAAA,uEAAA,mFAAA,uEAAA,2CAAA,yEAAA,mFAAA,kFAAA,2CAAA,0DAAA,mFAAA,gHAAA,mHAAA,oHAAA,+GAAA,yHAAA,4DAAA,mFAAA,oIAAA,2CAAA,yEAAA,mFAAA,yEAAA,uEAAA,mFAAA,iFAAA,2CAAA,uEAAA,mFAAA,kFAAA,2CAAA,yEAAA,mFAAA,gFAAA,2CAAA,yEAAA,mFAAA,mEAAA,uEAAA,mFAAA,2DAAA,oFAAA,2CAAA,0DAAA,mFAAA,wHAAA,4DAAA,mFAAA,+GAAA,oHAAA,mIAAA,2CAAA,yEAAA,mFAAA,wEAAA,uEAAA,mFAAA,4EAAA,0DAAA,mFAAA,oIAAA,2CAAA,uEAAA,mFAAA,yEAAA,2CAAA,yEAAA,mFAAA,4EAAA,uEAAA,mFAAA,oFAAA,2CAAA,0DAAA,mFAAA,mHAAA,oHAAA,rkRAAKC","names":["metabase.lib.types.constants/name->type","cljs.core.reduce","m","typ","G__63604","metabase.lib.types.constants.goog$module$goog$object.set","cljs.core/name","cljs.core.distinct","cljs.core.mapcat","cljs.core/descendants","metabase.lib.types.constants/key-number","metabase.lib.types.constants/key-string","metabase.lib.types.constants/key-string-like","metabase.lib.types.constants/key-boolean","metabase.lib.types.constants/key-temporal","metabase.lib.types.constants/key-location","metabase.lib.types.constants/key-coordinate","metabase.lib.types.constants/key-foreign-KEY","metabase.lib.types.constants/key-primary-KEY","metabase.lib.types.constants/key-summable","metabase.lib.types.constants/key-scope","metabase.lib.types.constants/key-category","metabase.lib.types.constants/key-unknown","metabase.lib.types.constants/type-hierarchies"],"sourcesContent":["(ns metabase.lib.types.constants\n  \"Ported from frontend/src/metabase-lib/types/constants.js\"\n  #?(:cljs (:require [goog.object :as gobj])))\n\n#?(:cljs\n   (do\n     (def ^:export name->type\n       \"A map of Type name (as string, without `:type/` namespace) -> type keyword\n\n         {\\\"Temporal\\\" :type/Temporal, ...}\"\n       (reduce (fn [m typ] (doto m (gobj/set (name typ) typ)))\n               #js {}\n               (distinct (mapcat descendants [:type/* :Semantic/* :Relation/*]))))\n\n     ;; primary field types used for picking operators, etc\n     (def ^:export key-number \"JS-friendly access for the number type\" ::number)\n     (def ^:export key-string \"JS-friendly access for the string type\" ::string)\n     (def ^:export key-string-like \"JS-friendly access for the string-like type\" ::string-like)\n     (def ^:export key-boolean \"JS-friendly access for the boolean type\" ::boolean)\n     (def ^:export key-temporal \"JS-friendly access for the temporal type\" ::temporal)\n     (def ^:export key-location \"JS-friendly access for the location type\" ::location)\n     (def ^:export key-coordinate \"JS-friendly access for the coordinate type\" ::coordinate)\n     (def ^:export key-foreign-KEY \"JS-friendly access for the foreign-key type\" ::foreign-key)\n     (def ^:export key-primary-KEY \"JS-friendly access for the primary-key type\" ::primary-key)\n\n     ;; other types used for various purposes\n     (def ^:export key-summable \"JS-friendly access for the summable type\" ::summable)\n     (def ^:export key-scope \"JS-friendly access for the scope type\" ::scope)\n     (def ^:export key-category \"JS-friendly access for the category type\" ::category)\n\n     (def ^:export key-unknown \"JS-friendly access for the unknown type\" ::unknown)))\n\n;; NOTE: be sure not to create cycles using the \"other\" types\n(def type-hierarchies\n  \"A front-end specific type hierarchy used by [[metabase.lib.types.isa/field-type?]].\n  It is not meant to be used directly.\"\n  {::temporal    {:effective-type [:type/Temporal]\n                  :semantic-type  [:type/Temporal]}\n   ::number      {:effective-type [:type/Number]\n                  :semantic-type  [:type/Number]}\n   ::integer     {:effective-type [:type/Integer]}\n   ::string      {:effective-type [:type/Text]\n                  :semantic-type  [:type/Text :type/Category]}\n   ::string_like {:effective-type [:type/TextLike]}\n   ::boolean     {:effective-type [:type/Boolean]}\n   ::coordinate  {:semantic-type [:type/Coordinate]}\n   ::location    {:semantic-type [:type/Address]}\n   ::entity      {:semantic-type [:type/FK :type/PK :type/Name]}\n   ::foreign_key {:semantic-type [:type/FK]}\n   ::primary_key {:semantic-type [:type/PK]}\n   ::summable    {:include [::number]\n                  :exclude [::entity ::location ::temporal]}\n   ::scope       {:include [::number ::temporal ::category ::entity ::string]\n                  :exclude [::location]}\n   ::category    {:effective-type [:type/Boolean]\n                  :semantic-type  [:type/Category]\n                  :include        [::location]}\n   ;; NOTE: this is defunct right now.  see definition of metabase.lib.types.isa/dimension?.\n   ::dimension   {:include [::temporal ::category ::entity]}})\n"]}