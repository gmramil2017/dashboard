{"version":3,"sources":["metabase/lib/aggregation.cljc"],"mappings":"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","names":["metabase.lib.aggregation/column-metadata->aggregation-ref","metadata","options","cljs.core/random-uuid","cljs.core.some_fn","ag-uuid","js/Error","metabase.lib.aggregation/resolve-aggregation","query","stage-number","map__79572","cljs.core/--destructure-map","cljs.core.get","aggregations","metabase.lib.util/query-stage","found","medley.core.find_first","cljs.core.comp","cljs.core/second","cljs.core.ex_info","metabase.shared.util.i18n.js_i18n","metabase.lib.metadata.calculation/describe-top-level-key-method","_k","temp__5804__auto__","cljs.core/not-empty","metabase.lib.util/join-strings-with-conjunction","metabase.shared.util.i18n/js-i18n","iter__5523__auto__","s__79574","cljs.core/LazySeq","cljs.core/seq","cljs.core/chunked-seq?","c__5521__auto__","size__5522__auto__","cljs.core/count","b__79576","cljs.core/chunk-buffer","i__79575","cljs.core/-nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__79573","cljs.core/chunk-rest","cljs.core/first","cljs.core/cons","cljs.core/rest","aggregation","metabase.lib.metadata.calculation.display_name","metabase.lib.metadata.calculation/metadata-method","p__79577","vec__79578","cljs.core.nth","map__79581","_ag","base-type","effective-type","_opts","index","_aggregation-ref","cljs.core.merge","metabase.lib.metadata.calculation.metadata","metabase.lib.metadata.calculation/display-name-method","p__79582","vec__79583","_tag","style","metabase.lib.hierarchy/derive","seq__79586","chunk__79587","count__79588","i__79589","c__5568__auto__","cljs.core/chunk-first","cljs.core/next","tag","p__79595","vec__79596","x","x-display-name","G__79599","cljs.core/Keyword","G__79600","metabase.lib.metadata.calculation/column-name-method","p__79605","vec__79606","_query","_stage-number","_clause","G__79609","clause","cljs.core.assoc","fexpr__79610","cljs.core/get-method","_case","_style","seq__79611","chunk__79612","count__79613","i__79614","p__79623","vec__79629","_arg","G__79632","p__79633","vec__79634","arg","G__79637","p__79638","vec__79643","_percentile","p","p__79646","vec__79647","_sum-where","_pred","p__79653","vec__79658","metabase.lib.metadata.calculation.column_name","_share","_count-where","p__79723","vec__79724","first-arg","cljs.core/select-keys","fexpr__79729","var_args","G__79748","metabase.lib.aggregation/count","metabase.lib.common/defop-create","G__79753","metabase.lib.aggregation/cum-count","metabase.lib.aggregation/count-where","y","metabase.lib.aggregation/avg","metabase.lib.aggregation/distinct","metabase.lib.aggregation/max","metabase.lib.aggregation/median","metabase.lib.aggregation/min","metabase.lib.aggregation/percentile","metabase.lib.aggregation/share","metabase.lib.aggregation/stddev","metabase.lib.aggregation/sum","metabase.lib.aggregation/cum-sum","metabase.lib.aggregation/sum-where","metabase.lib.aggregation/var","metabase.lib.ref/ref-method","aggregation-clause","metabase.lib.aggregation/Aggregatable","metabase.lib.metadata/MetricMetadata","G__79829","metabase.lib.aggregation/aggregate","aggregatable","metabase.lib.aggregation.aggregate","cljs.core._EQ_","metabase.lib.dispatch/dispatch-value","metabase.lib.ref/ref","metabase.lib.util/add-summary-clause","G__79925","metabase.lib.aggregation/aggregations","metabase.lib.aggregation.aggregations","G__79935","metabase.lib.aggregation/aggregations-metadata","metabase.lib.aggregation.aggregations_metadata","G__79947","cljs.core.into","cljs.core.map","metabase.util.assoc_default","or__5045__auto__","metabase.lib.aggregation/OperatorWithColumns","metabase.lib.metadata/ColumnMetadata","p__79954","map__79955","display-info","_display-name-style","metabase.lib.metadata.calculation/display-info-method","p__79959","map__79960","requires-column?","selected?","short-name","G__79961","metabase.util/qualified-name","metabase.lib.aggregation/aggregation-operator-columns","aggregation-operator","G__79971","metabase.lib.aggregation/available-aggregation-operators","metabase.lib.aggregation.available_aggregation_operators","db-features","metabase.lib.metadata/database","stage","columns","metabase.lib.metadata.calculation.visible_columns","with-columns","p__80002","map__80003","supported-field","operator","cljs.core/not","cols","p1__79966#","cljs.core/filterv","metabase.lib.types.isa/field-type?","cljs.core.filter","op","feature","cljs.core.keep","p1__79967#","metabase.lib.schema.aggregation/aggregation-operators","G__80019","metabase.lib.aggregation/aggregation-clause","metabase.lib.options/ensure-uuid","G__80021","G__80022","metabase.lib.util/format","column","metabase.lib.common/->op-arg","metabase.lib.aggregation/SelectedOperatorWithColumns","metabase.lib.aggregation/selected-aggregation-operators","agg-operators","agg-clause","vec__80025","_","agg-col","agg-temporal-unit","metabase.lib.options/options","cljs.core.mapv","agg-op","G__80028","medley.core.update_existing","refs","match","metabase.lib.equality.find_closest_matching_ref","metabase.lib.options.update_options","cljs.core/dissoc","r","c","G__80029","metabase.lib.temporal-bucket/with-temporal-bucket","G__80032","metabase.lib.aggregation/aggregation-ref","ag-index","metabase.lib.aggregation.aggregation_ref","temp__5802__auto__","vec__80033","map__80036"],"sourcesContent":["(ns metabase.lib.aggregation\n  (:refer-clojure :exclude [count distinct max min var])\n  (:require\n   [medley.core :as m]\n   [metabase.lib.common :as lib.common]\n   [metabase.lib.dispatch :as lib.dispatch]\n   [metabase.lib.equality :as lib.equality]\n   [metabase.lib.hierarchy :as lib.hierarchy]\n   [metabase.lib.metadata :as lib.metadata]\n   [metabase.lib.metadata.calculation :as lib.metadata.calculation]\n   [metabase.lib.options :as lib.options]\n   [metabase.lib.ref :as lib.ref]\n   [metabase.lib.schema :as lib.schema]\n   [metabase.lib.schema.aggregation :as lib.schema.aggregation]\n   [metabase.lib.schema.common :as lib.schema.common]\n   [metabase.lib.temporal-bucket :as lib.temporal-bucket]\n   [metabase.lib.types.isa :as lib.types.isa]\n   [metabase.lib.util :as lib.util]\n   [metabase.shared.util.i18n :as i18n]\n   [metabase.util :as u]\n   [metabase.util.malli :as mu]))\n\n(mu/defn column-metadata->aggregation-ref :- :mbql.clause/aggregation\n  \"Given `:metadata/column` column metadata for an aggregation, construct an `:aggregation` reference.\"\n  [metadata :- lib.metadata/ColumnMetadata]\n  (let [options {:lib/uuid       (str (random-uuid))\n                 :effective-type ((some-fn :effective-type :base-type) metadata)}\n        ag-uuid (:lib/source-uuid metadata)]\n    (assert ag-uuid \"Metadata for an aggregation reference should include :lib/source-uuid\")\n    [:aggregation options ag-uuid]))\n\n(mu/defn resolve-aggregation :- ::lib.schema.aggregation/aggregation\n  \"Resolve an aggregation with a specific `index`.\"\n  [query        :- ::lib.schema/query\n   stage-number :- :int\n   ag-uuid      :- :string]\n  (let [{aggregations :aggregation} (lib.util/query-stage query stage-number)\n        found (m/find-first (comp #{ag-uuid} :lib/uuid second) aggregations)]\n    (when-not found\n      (throw (ex-info (i18n/tru \"No aggregation with uuid {0}\" ag-uuid)\n                      {:uuid         ag-uuid\n                       :query        query\n                       :stage-number stage-number})))\n    found))\n\n(defmethod lib.metadata.calculation/describe-top-level-key-method :aggregation\n  [query stage-number _k]\n  (when-let [aggregations (not-empty (:aggregation (lib.util/query-stage query stage-number)))]\n    (lib.util/join-strings-with-conjunction\n     (i18n/tru \"and\")\n     (for [aggregation aggregations]\n       (lib.metadata.calculation/display-name query stage-number aggregation :long)))))\n\n(defmethod lib.metadata.calculation/metadata-method :aggregation\n  [query stage-number [_ag {:keys [base-type effective-type], :as _opts} index, :as _aggregation-ref]]\n  (let [aggregation (resolve-aggregation query stage-number index)]\n    (merge\n     (lib.metadata.calculation/metadata query stage-number aggregation)\n     {:lib/source :source/aggregations\n      :lib/source-uuid (:lib/uuid (second aggregation))}\n     (when base-type\n       {:base-type base-type})\n     (when effective-type\n       {:effective-type effective-type}))))\n\n;;; TODO -- merge this stuff into `defop` somehow.\n\n(defmethod lib.metadata.calculation/display-name-method :aggregation\n  [query stage-number [_tag _opts index] style]\n  (lib.metadata.calculation/display-name query stage-number (resolve-aggregation query stage-number index) style))\n\n(lib.hierarchy/derive ::count-aggregation ::aggregation)\n\n;;; count and cumulative count can both be used either with no args (count of rows) or with one arg (count of X, which\n;;; I think means count where X is not NULL or something like that. Basically `count(x)` in SQL)\n(doseq [tag [:count\n             :cum-count]]\n  (lib.hierarchy/derive tag ::count-aggregation))\n\n(defmethod lib.metadata.calculation/display-name-method ::count-aggregation\n  [query stage-number [tag _opts x] style]\n  ;; x is optional.\n  (if x\n    (let [x-display-name (lib.metadata.calculation/display-name query stage-number x style)]\n      (case tag\n        :count     (i18n/tru \"Count of {0}\" x-display-name)\n        :cum-count (i18n/tru \"Cumulative count of {0}\" x-display-name)))\n    (case tag\n      :count     (i18n/tru \"Count\")\n      :cum-count (i18n/tru \"Cumulative count\"))))\n\n(defmethod lib.metadata.calculation/column-name-method ::count-aggregation\n  [_query _stage-number [tag :as _clause]]\n  (case tag\n    :count     \"count\"\n    :cum-count \"cum_count\"))\n\n(defmethod lib.metadata.calculation/metadata-method ::count-aggregation\n  [query stage-number clause]\n  (assoc ((get-method lib.metadata.calculation/metadata-method ::aggregation) query stage-number clause)\n         :semantic-type :type/Quantity))\n\n(defmethod lib.metadata.calculation/display-name-method :case\n  [_query _stage-number _case _style]\n  (i18n/tru \"Case\"))\n\n(defmethod lib.metadata.calculation/column-name-method :case\n  [_query _stage-number _case]\n  \"case\")\n\n;;; TODO - Should `:case` derive from `::aggregation` as well???\n\n(lib.hierarchy/derive ::unary-aggregation ::aggregation)\n\n(doseq [tag [:avg\n             :cum-sum\n             :distinct\n             :max\n             :median\n             :min\n             :stddev\n             :sum\n             :var]]\n  (lib.hierarchy/derive tag ::unary-aggregation))\n\n(defmethod lib.metadata.calculation/column-name-method ::unary-aggregation\n  [_query _stage-number [tag _opts _arg]]\n  (case tag\n    :avg       \"avg\"\n    :cum-sum   \"sum\"\n    :distinct  \"count\"\n    :max       \"max\"\n    :median    \"median\"\n    :min       \"min\"\n    :stddev    \"stddev\"\n    :sum       \"sum\"\n    :var       \"var\"))\n\n\n(defmethod lib.metadata.calculation/display-name-method ::unary-aggregation\n  [query stage-number [tag _opts arg] style]\n  (let [arg (lib.metadata.calculation/display-name query stage-number arg style)]\n    (case tag\n      :avg       (i18n/tru \"Average of {0}\"            arg)\n      :cum-sum   (i18n/tru \"Cumulative sum of {0}\"     arg)\n      :distinct  (i18n/tru \"Distinct values of {0}\"    arg)\n      :max       (i18n/tru \"Max of {0}\"                arg)\n      :median    (i18n/tru \"Median of {0}\"             arg)\n      :min       (i18n/tru \"Min of {0}\"                arg)\n      :stddev    (i18n/tru \"Standard deviation of {0}\" arg)\n      :sum       (i18n/tru \"Sum of {0}\"                arg)\n      :var       (i18n/tru \"Variance of {0}\"           arg))))\n\n(defmethod lib.metadata.calculation/display-name-method :percentile\n  [query stage-number [_percentile _opts x p] style]\n  (i18n/tru \"{0}th percentile of {1}\" p (lib.metadata.calculation/display-name query stage-number x style)))\n\n(defmethod lib.metadata.calculation/column-name-method :percentile\n  [_query _stage-number _clause]\n  \"percentile\")\n\n(lib.hierarchy/derive :percentile ::aggregation)\n\n;;; we don't currently have sophisticated logic for generating nice display names for filter clauses.\n;;;\n;;; TODO : wait a minute, we do have that stuff now!\n\n(defmethod lib.metadata.calculation/display-name-method :sum-where\n  [query stage-number [_sum-where _opts x _pred] style]\n  (i18n/tru \"Sum of {0} matching condition\" (lib.metadata.calculation/display-name query stage-number x style)))\n\n(defmethod lib.metadata.calculation/column-name-method :sum-where\n  [query stage-number [_sum-where _opts x _pred]]\n  (str \"sum_where_\" (lib.metadata.calculation/column-name query stage-number x)))\n\n(lib.hierarchy/derive :sum-where ::aggregation)\n\n(defmethod lib.metadata.calculation/display-name-method :share\n  [_query _stage-number _share _style]\n  (i18n/tru \"Share of rows matching condition\"))\n\n(defmethod lib.metadata.calculation/column-name-method :share\n  [_query _stage-number _share]\n  \"share\")\n\n(lib.hierarchy/derive :share ::aggregation)\n\n(defmethod lib.metadata.calculation/display-name-method :count-where\n  [_query _stage-number _count-where _style]\n  (i18n/tru \"Count of rows matching condition\"))\n\n(defmethod lib.metadata.calculation/column-name-method :count-where\n  [_query _stage-number _count-where]\n  \"count-where\")\n\n(lib.hierarchy/derive :count-where ::aggregation)\n\n(defmethod lib.metadata.calculation/metadata-method ::aggregation\n  [query stage-number [_tag _opts first-arg :as clause]]\n  (merge\n   ;; flow the `:options` from the field we're aggregating. This is important, for some reason.\n   ;; See [[metabase.query-processor-test.aggregation-test/field-settings-for-aggregate-fields-test]]\n   (when first-arg\n     (select-keys (lib.metadata.calculation/metadata query stage-number first-arg) [:settings]))\n   ((get-method lib.metadata.calculation/metadata-method :default) query stage-number clause)))\n\n(lib.common/defop count       [] [x])\n(lib.common/defop cum-count   [] [x])\n(lib.common/defop count-where [x y])\n(lib.common/defop avg         [x])\n(lib.common/defop distinct    [x])\n(lib.common/defop max         [x])\n(lib.common/defop median      [x])\n(lib.common/defop min         [x])\n(lib.common/defop percentile  [x y])\n(lib.common/defop share       [x])\n(lib.common/defop stddev      [x])\n(lib.common/defop sum         [x])\n(lib.common/defop cum-sum     [x])\n(lib.common/defop sum-where   [x y])\n(lib.common/defop var         [x])\n\n(defmethod lib.ref/ref-method :aggregation\n  [aggregation-clause]\n  aggregation-clause)\n\n(def ^:private Aggregatable\n  \"Schema for something you can pass to [[aggregate]] to add to a query as an aggregation.\"\n  [:or\n   ::lib.schema.aggregation/aggregation\n   ::lib.schema.common/external-op\n   lib.metadata/MetricMetadata])\n\n(mu/defn aggregate :- ::lib.schema/query\n  \"Adds an aggregation to query.\"\n  ([query aggregatable]\n   (aggregate query -1 aggregatable))\n\n  ([query        :- ::lib.schema/query\n    stage-number :- :int\n    aggregatable :- Aggregatable]\n   ;; if this is a Metric metadata, convert it to `:metric` MBQL clause before adding.\n   (if (= (lib.dispatch/dispatch-value aggregatable) :metadata/metric)\n     (recur query stage-number (lib.ref/ref aggregatable))\n     (lib.util/add-summary-clause query stage-number :aggregation aggregatable))))\n\n(mu/defn aggregations :- [:maybe [:sequential ::lib.schema.aggregation/aggregation]]\n  \"Get the aggregations in a given stage of a query.\"\n  ([query]\n   (aggregations query -1))\n\n  ([query        :- ::lib.schema/query\n    stage-number :- :int]\n   (not-empty (:aggregation (lib.util/query-stage query stage-number)))))\n\n(mu/defn aggregations-metadata :- [:maybe [:sequential lib.metadata/ColumnMetadata]]\n  \"Get metadata about the aggregations in a given stage of a query.\"\n  ([query]\n   (aggregations-metadata query -1))\n\n  ([query        :- ::lib.schema/query\n    stage-number :- :int]\n   (some->> (not-empty (:aggregation (lib.util/query-stage query stage-number)))\n            (into [] (map (fn [aggregation]\n                            (let [metadata (lib.metadata.calculation/metadata query stage-number aggregation)]\n                              (-> metadata\n                                  (u/assoc-default :effective-type (or (:base-type metadata) :type/*))\n                                  (assoc :lib/source :source/aggregations\n                                         :lib/source-uuid (:lib/uuid (second aggregation)))))))))))\n\n(def ^:private OperatorWithColumns\n  [:merge\n   ::lib.schema.aggregation/operator\n   [:map\n    [:columns {:optional true} [:sequential lib.metadata/ColumnMetadata]]]])\n\n(defmethod lib.metadata.calculation/display-name-method :operator/aggregation\n  [_query _stage-number {:keys [display-info]} _display-name-style]\n  (:display-name (display-info)))\n\n(defmethod lib.metadata.calculation/display-info-method :operator/aggregation\n  [_query _stage-number {:keys [display-info requires-column? selected?] short-name :short}]\n  (cond-> (assoc (display-info)\n                 :short-name (u/qualified-name short-name)\n                 :requires-column requires-column?)\n    (some? selected?) (assoc :selected selected?)))\n\n(mu/defn aggregation-operator-columns :- [:maybe [:sequential lib.metadata/ColumnMetadata]]\n  \"Returns the columns for which `aggregation-operator` is applicable.\"\n  [aggregation-operator :- OperatorWithColumns]\n  (:columns aggregation-operator))\n\n(mu/defn available-aggregation-operators :- [:maybe [:sequential OperatorWithColumns]]\n  \"Returns the available aggegation operators for the stage with `stage-number` of `query`.\n  If `stage-number` is omitted, uses the last stage.\"\n  ([query]\n   (available-aggregation-operators query -1))\n\n  ([query :- ::lib.schema/query\n    stage-number :- :int]\n   (let [db-features (or (:features (lib.metadata/database query)) #{})\n         stage (lib.util/query-stage query stage-number)\n         columns (lib.metadata.calculation/visible-columns query stage-number stage)\n         with-columns (fn [{:keys [requires-column? supported-field] :as operator}]\n                        (cond\n                          (not requires-column?)\n                          operator\n\n                          (= supported-field :any)\n                          (assoc operator :columns columns)\n\n                          :else\n                          (when-let [cols (->> columns\n                                               (filterv #(lib.types.isa/field-type? supported-field %))\n                                               not-empty)]\n                            (assoc operator :columns cols))))]\n     (not-empty\n      (into []\n            (comp (filter (fn [op]\n                            (let [feature (:driver-feature op)]\n                              (or (nil? feature) (db-features feature)))))\n                  (keep with-columns)\n                  (map #(assoc % :lib/type :operator/aggregation)))\n            lib.schema.aggregation/aggregation-operators)))))\n\n(mu/defn aggregation-clause :- ::lib.schema.aggregation/aggregation\n  \"Returns a standalone aggregation clause for an `aggregation-operator` and\n  a `column`.\n  For aggregations requiring an argument `column` is mandatory, otherwise\n  it is optional.\"\n  ([aggregation-operator :- ::lib.schema.aggregation/operator]\n   (if-not (:requires-column? aggregation-operator)\n     (lib.options/ensure-uuid [(:short aggregation-operator) {}])\n     (throw (ex-info (lib.util/format \"aggregation operator %s requires an argument\"\n                                      (:short aggregation-operator))\n                     {:aggregation-operator aggregation-operator}))))\n\n  ([aggregation-operator :- ::lib.schema.aggregation/operator\n    column]\n   (lib.options/ensure-uuid [(:short aggregation-operator) {} (lib.common/->op-arg column)])))\n\n(def ^:private SelectedOperatorWithColumns\n  [:merge\n   ::lib.schema.aggregation/operator\n   [:map\n    [:columns {:optional true} [:sequential lib.metadata/ColumnMetadata]]\n    [:selected? {:optional true} :boolean]]])\n\n(mu/defn selected-aggregation-operators :- [:maybe [:sequential SelectedOperatorWithColumns]]\n  \"Mark the operator and the column (if any) in `agg-operators` selected by `agg-clause`.\"\n  [agg-operators :- [:maybe [:sequential OperatorWithColumns]]\n   agg-clause]\n  (when (seq agg-operators)\n    (let [[op _ agg-col] agg-clause\n          agg-temporal-unit (-> agg-col lib.options/options :temporal-unit)]\n      (mapv (fn [agg-op]\n              (cond-> agg-op\n                (= (:short agg-op) op)\n                (-> (assoc :selected? true)\n                    (m/update-existing\n                     :columns\n                     (fn [cols]\n                       (let [refs (mapv lib.ref/ref cols)\n                             match (lib.equality/find-closest-matching-ref\n                                    (lib.options/update-options agg-col dissoc :temporal-unit)\n                                    refs)]\n                         (if match\n                           (mapv (fn [r c]\n                                   (cond-> c\n                                     (= r match) (assoc :selected? true)\n\n                                     (some? agg-temporal-unit)\n                                     (lib.temporal-bucket/with-temporal-bucket agg-temporal-unit)))\n                                 refs cols)\n                           cols)))))))\n            agg-operators))))\n\n(mu/defn aggregation-ref :- :mbql.clause/aggregation\n  \"Find the aggregation at `ag-index` and create an `:aggregation` ref for it. Intended for use\n  when creating queries using threading macros e.g.\n\n    (-> (lib/query ...)\n        (lib/aggregate (lib/avg ...))\n        (as-> <> (lib/order-by <> (lib/aggregation-ref <> 0))))\"\n  ([query ag-index]\n   (aggregation-ref query -1 ag-index))\n\n  ([query        :- ::lib.schema/query\n    stage-number :- :int\n    ag-index     :- ::lib.schema.common/int-greater-than-or-equal-to-zero]\n   (if-let [[_ {ag-uuid :lib/uuid}] (get (:aggregation (lib.util/query-stage query stage-number)) ag-index)]\n     (lib.options/ensure-uuid [:aggregation {} ag-uuid])\n     (throw (ex-info (str \"Undefined aggregation \" ag-index)\n                     {:aggregation-index ag-index\n                      :query             query\n                      :stage-number      stage-number})))))\n"]}