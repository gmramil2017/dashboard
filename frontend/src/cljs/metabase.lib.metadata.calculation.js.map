{"version":3,"sources":["metabase/lib/metadata/calculation.cljc"],"mappings":"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","names":["metabase.lib.metadata.calculation/DisplayNameStyle","metabase.lib.metadata.calculation/*display-name-style*","js/metabase","js/metabase.lib","js/metabase.lib.metadata","js/metabase.lib.metadata.calculation","js/metabase.lib.metadata.calculation.display-name-method","method-table__5642__auto__","cljs.core.atom","prefer-table__5643__auto__","method-cache__5644__auto__","cached-hierarchy__5645__auto__","hierarchy__5646__auto__","cljs.core.get","fexpr__64903","cljs.core/MultiFn","cljs.core.symbol","metabase.lib.metadata.calculation/display-name-method","_query","_stage-number","x","_display-name-style","metabase.lib.dispatch/dispatch-value","metabase.lib.hierarchy/hierarchy","js/metabase.lib.metadata.calculation.column-name-method","fexpr__64909","metabase.lib.metadata.calculation/column-name-method","var_args","G__64939","metabase.lib.metadata.calculation/display-name","js/Error","query","metabase.lib.metadata.calculation.display_name","stage-number","style","or__5045__auto__","metabase.lib.options/options","e64955","e","cljs.core.ex_info","metabase.shared.util.i18n.js_i18n","cljs.core.pr_str","cljs.core/ex-message","G__64960","metabase.lib.metadata.calculation/column-name","metabase.lib.metadata.calculation.column_name","e64971","_stage","level__47254__auto__","metabase.util.log/glogi-level","logger__47255__auto__","metabase.util.log/is-loggable?","x__47256__auto__","lambdaisland.glogi.log","metabase.util.log.format_msg","cljs.core/vector?","cljs.core/Keyword","cljs.core/first","cljs.core/name","metabase.lib.metadata.calculation/slugify","s","clojure.string/replace","metabase.util.slugify","js/metabase.lib.metadata.calculation.describe-top-level-key-method","fexpr__64980","metabase.lib.metadata.calculation/describe-top-level-key-method","top-level-key","metabase.lib.metadata.calculation/TopLevelKey","G__64985","metabase.lib.metadata.calculation/describe-top-level-key","metabase.lib.metadata.calculation.describe_top_level_key","cljs.core.keyword","js/metabase.lib.metadata.calculation.type-of-method","fexpr__64989","metabase.lib.metadata.calculation/type-of-method","expr","G__64992","metabase.lib.metadata.calculation/type-of","metabase.lib.metadata.calculation.type_of","map__64993","cljs.core/--destructure-map","temporal-unit","options","and__5043__auto__","cljs.core/contains?","metabase.lib.schema.temporal-bucketing/datetime-extraction-units","calculated-type","cljs.core.isa_QMARK_","metabase.lib.schema.expression/type-of","p__64994","vec__64995","cljs.core.nth","_tag","_opts","p__64998","vec__64999","clause","js/metabase.lib.metadata.calculation.metadata-method","fexpr__65002","metabase.lib.metadata.calculation/metadata-method","e65003","G__65010","metabase.lib.metadata.calculation/metadata","metabase.lib.metadata.calculation.metadata","metabase.lib.metadata.calculation/describe-query","metabase.lib.metadata.calculation/suggested-name","cljs.core._EQ_","metabase.lib.util/query-stage","e65019","level__47249__auto__","logger__47250__auto__","x__47251__auto__","cljs.core.print_str","js/metabase.lib.metadata.calculation.display-info-method","fexpr__65020","metabase.lib.metadata.calculation/display-info-method","metabase.util.malli.registry/register!","G__65028","metabase.lib.metadata.calculation/display-info","metabase.lib.metadata.calculation.display_info","e65030","metabase.lib.metadata.calculation/default-display-info","x-metadata","cljs.core.merge","cljs.core/select-keys","temp__5804__auto__","long-display-name","effective-type","cljs.core.some_fn","table-id","cljs.core/integer?","metabase.lib.metadata/table","metabase.lib.metadata/card","metabase.lib.util/legacy-string-table-id->card-id","source","temp__5808__auto__","selected","table","metabase.lib.util/source-table-id","metabase.lib.metadata.calculation/ColumnMetadataWithSource","metabase.lib.metadata/ColumnMetadata","metabase.lib.metadata.calculation/ColumnsWithUniqueAliases","p__65051","map__65052","value","_","cljs.core.mapv","columns","cljs.core/empty?","cljs.core.apply","cljs.core/distinct?","cljs.core.map","cljs.core.comp","metabase.util/lower-case-en","metabase.lib.metadata.calculation/UniqueNameFn","metabase.lib.metadata.calculation/ReturnedColumnsOptions","metabase.lib.metadata.calculation/default-returned-columns-options","metabase.lib.util/unique-name-generator","js/metabase.lib.metadata.calculation.returned-columns-method","fexpr__65076","metabase.lib.metadata.calculation/returned-columns-method","_options","_x","G__65095","metabase.lib.metadata.calculation/returned-columns","metabase.lib.metadata.calculation.returned_columns","metabase.lib.metadata.calculation/VisibleColumnsOptions","metabase.lib.metadata.calculation/default-visible-columns-options","js/metabase.lib.metadata.calculation.visible-columns-method","fexpr__65111","metabase.lib.metadata.calculation/visible-columns-method","G__65122","metabase.lib.metadata.calculation/visible-columns","metabase.lib.metadata.calculation.visible_columns"],"sourcesContent":["(ns metabase.lib.metadata.calculation\n  (:require\n   [clojure.string :as str]\n   [metabase.lib.dispatch :as lib.dispatch]\n   [metabase.lib.hierarchy :as lib.hierarchy]\n   [metabase.lib.metadata :as lib.metadata]\n   [metabase.lib.options :as lib.options]\n   [metabase.lib.schema :as lib.schema]\n   [metabase.lib.schema.common :as lib.schema.common]\n   [metabase.lib.schema.expression :as lib.schema.expresssion]\n   [metabase.lib.schema.temporal-bucketing\n    :as lib.schema.temporal-bucketing]\n   [metabase.lib.util :as lib.util]\n   [metabase.shared.util.i18n :as i18n]\n   [metabase.util :as u]\n   [metabase.util.log :as log]\n   [metabase.util.malli :as mu]\n   [metabase.util.malli.registry :as mr]))\n\n(def DisplayNameStyle\n  \"Schema for valid values of `display-name-style` as passed to [[display-name-method]].\n\n  * `:default`: normal style used for 99% of FE stuff. For example a column that comes from a joined table might return\n    \\\"Price\\\".\n\n  * `:long`: Slightly longer style that includes a little bit of extra context, used for stuff like query suggested\n    name generation. For a joined column, this might look like \\\"Venues \u2192 Price\\\".\"\n  [:enum :default :long])\n\n(def ^:dynamic *display-name-style*\n  \"Display name style to use when not explicitly passed in to [[display-name]].\"\n  :default)\n\n(defmulti display-name-method\n  \"Calculate a nice human-friendly display name for something.\"\n  {:arglists '([query stage-number x display-name-style])}\n  (fn [_query _stage-number x _display-name-style]\n    (lib.dispatch/dispatch-value x))\n  :hierarchy lib.hierarchy/hierarchy)\n\n(defmulti column-name-method\n  \"Calculate a database-friendly name to use for something.\"\n  {:arglists '([query stage-number x])}\n  (fn [_query _stage-number x]\n    (lib.dispatch/dispatch-value x))\n  :hierarchy lib.hierarchy/hierarchy)\n\n(mu/defn ^:export display-name :- :string\n  \"Calculate a nice human-friendly display name for something. See [[DisplayNameStyle]] for a the difference between\n  different `style`s.\"\n  ([query]\n   (display-name query query))\n\n  ([query x]\n   (display-name query -1 x))\n\n  ([query stage-number x]\n   (display-name query stage-number x *display-name-style*))\n\n  ([query        :- ::lib.schema/query\n    stage-number :- :int\n    x\n    style        :- DisplayNameStyle]\n   (or\n    ;; if this is an MBQL clause with `:display-name` in the options map, then use that rather than calculating a name.\n    (:display-name (lib.options/options x))\n    (try\n      (display-name-method query stage-number x style)\n      (catch #?(:clj Throwable :cljs js/Error) e\n        (throw (ex-info (i18n/tru \"Error calculating display name for {0}: {1}\" (pr-str x) (ex-message e))\n                        {:query query, :x x}\n                        e)))))))\n\n(mu/defn column-name :- ::lib.schema.common/non-blank-string\n  \"Calculate a database-friendly name to use for an expression.\"\n  ([query x]\n   (column-name query -1 x))\n\n  ([query        :- ::lib.schema/query\n    stage-number :- :int\n    x]\n   (or\n    ;; if this is an MBQL clause with `:name` in the options map, then use that rather than calculating a name.\n    (:name (lib.options/options x))\n    (try\n      (column-name-method query stage-number x)\n      (catch #?(:clj Throwable :cljs js/Error) e\n        (throw (ex-info (i18n/tru \"Error calculating column name for {0}: {1}\" (pr-str x) (ex-message e))\n                        {:x            x\n                         :query        query\n                         :stage-number stage-number}\n                        e)))))))\n\n(defmethod display-name-method :default\n  [_query _stage-number x _stage]\n  ;; hopefully this is dev-facing only, so not i18n'ed.\n  (log/warnf \"Don't know how to calculate display name for %s. Add an impl for %s for %s\"\n             (pr-str x)\n             `display-name-method\n             (lib.dispatch/dispatch-value x))\n  (if (and (vector? x)\n           (keyword? (first x)))\n    ;; MBQL clause: just use the name of the clause.\n    (name (first x))\n    ;; anything else: use `pr-str` representation.\n    (pr-str x)))\n\n;;; TODO -- this logic is wack, we should probably be snake casing stuff and display names like\n;;;\n;;; \"Sum of Products \u2192 Price\"\n;;;\n;;; result in totally wacko column names like \"sum_products_%E2%86%92_price\", let's try to generate things that are\n;;; actually going to be allowed here.\n(defn- slugify [s]\n  (-> s\n      (str/replace #\"[\\(\\)]\" \"\")\n      (u/slugify {:unicode? true})))\n\n;;; default impl just takes the display name and slugifies it.\n(defmethod column-name-method :default\n  [query stage-number x]\n  (slugify (display-name query stage-number x)))\n\n(defmulti describe-top-level-key-method\n  \"Implementation for [[describe-top-level-key]]. Describe part of a stage of a query, e.g. the `:filters` part or the\n  `:aggregation` part. Return `nil` if there is nothing to describe.\n\n  Implementations that call [[display-name]] should specify the `:long` display name style.\"\n  {:arglists '([query stage-number top-level-key])}\n  (fn [_query _stage-number top-level-key]\n    top-level-key)\n  :hierarchy lib.hierarchy/hierarchy)\n\n(def ^:private TopLevelKey\n  \"In the interest of making this easy to use in JS-land we'll accept either strings or keywords.\"\n  [:enum :aggregation :breakout :filters :limit :order-by :source-table :source-card])\n\n(mu/defn describe-top-level-key :- [:maybe ::lib.schema.common/non-blank-string]\n  \"'top-level' here means the top level of an individual stage. Generate a human-friendly string describing a specific\n  part of an MBQL stage, or `nil` if that part doesn't exist.\"\n  ([query top-level-key]\n   (describe-top-level-key query -1 top-level-key))\n  ([query         :- ::lib.schema/query\n    stage-number  :- :int\n    top-level-key :- TopLevelKey]\n   (describe-top-level-key-method query stage-number (keyword top-level-key))))\n\n(defmulti type-of-method\n  \"Calculate the effective type of something. This differs from [[metabase.lib.schema.expression/type-of]] in that it is\n  called with a query/MetadataProvider and a stage number, allowing us to fully resolve information and return\n  complete, unambigous type information. Default implementation calls [[metabase.lib.schema.expression/type-of]].\"\n  {:arglists '([query stage-number expr])}\n  (fn [_query _stage-number expr]\n    (lib.dispatch/dispatch-value expr))\n  :hierarchy lib.hierarchy/hierarchy)\n\n(mu/defn type-of :- ::lib.schema.common/base-type\n  \"Get the effective type of an MBQL expression.\"\n  ([query x]\n   (type-of query -1 x))\n  ([query        :- ::lib.schema/query\n    stage-number :- :int\n    x]\n   ;; this logic happens here so we don't need to code up every single individual method to handle these special\n   ;; cases.\n   (let [{:keys [temporal-unit], :as options} (lib.options/options x)]\n     (or\n      ;; If the options map includes `:effective-type` we can assume you know what you are doing and that it is\n      ;; correct and just return it directly.\n      (:effective-type options)\n      ;; If `:temporal-unit` is specified (currently only supported by `:field` clauses), we should return\n      ;; `:type/Integer` if its an extraction operation, e.g. `:month-of-year` always returns an integer; otherwise we\n      ;; can return `:base-type`.\n      (when (and temporal-unit\n                 (contains? lib.schema.temporal-bucketing/datetime-extraction-units temporal-unit))\n        :type/Integer)\n      ;; otherwise if `:base-type` is specified, we can return that.\n      (:base-type options)\n      ;; if none of the special cases are true, fall back to [[type-of-method]].\n      (let [calculated-type (type-of-method query stage-number x)]\n        ;; if calculated type is not a true type but a placeholder like `:metabase.lib.schema.expression/type.unknown`\n        ;; or a union of types then fall back to `:type/*`, an actual type.\n        (if (isa? calculated-type :type/*)\n          calculated-type\n          :type/*))))))\n\n(defmethod type-of-method :default\n  [_query _stage-number expr]\n  (lib.schema.expresssion/type-of expr))\n\n;;; for MBQL clauses whose type is the same as the type of the first arg. Also used\n;;; for [[metabase.lib.schema.expression/type-of]].\n(defmethod type-of-method :lib.type-of/type-is-type-of-first-arg\n  [query stage-number [_tag _opts expr]]\n  (type-of query stage-number expr))\n\n(defmethod type-of-method :lib.type-of/type-is-temporal-type-of-first-arg\n  [query stage-number [_tag _opts expr :as clause]]\n  (if (string? expr)\n    ;; If a string, get the type filtered by this expression (eg. `:datetime-add`).\n    (lib.schema.expresssion/type-of clause)\n    ;; Otherwise, just get the type of this first arg.\n    (type-of query stage-number expr)))\n\n(defmulti metadata-method\n  \"Impl for [[metadata]]. Implementations that call [[display-name]] should use the `:default` display name style.\"\n  {:arglists '([query stage-number x])}\n  (fn [_query _stage-number x]\n    (lib.dispatch/dispatch-value x))\n  :hierarchy lib.hierarchy/hierarchy)\n\n(defmethod metadata-method :default\n  [query stage-number x]\n  (try\n    {:lib/type     :metadata/column\n     ;; TODO -- effective-type\n     :base-type    (type-of query stage-number x)\n     :name         (column-name query stage-number x)\n     :display-name (display-name query stage-number x)}\n    ;; if you see this error it's usually because you're calling [[metadata]] on something that you shouldn't be, for\n    ;; example a query\n    (catch #?(:clj Throwable :cljs js/Error) e\n      (throw (ex-info (i18n/tru \"Error calculating metadata for {0}: {1}\"\n                                (pr-str (lib.dispatch/dispatch-value x))\n                                (ex-message e))\n                      {:query query, :stage-number stage-number, :x x}\n                      e)))))\n\n(mu/defn metadata :- [:map [:lib/type [:and\n                                       :keyword\n                                       [:fn\n                                        {:error/message \":lib/type should be a :metadata/ keyword\"}\n                                        #(= (namespace %) \"metadata\")]]]]\n  \"Calculate an appropriate `:metadata/*` object for something. What this looks like depends on what we're calculating\n  metadata for. If it's a reference or expression of some sort, this should return a single `:metadata/column`\n  map (i.e., something satisfying the [[metabase.lib.metadata/ColumnMetadata]] schema.\"\n  ([query]\n   (metadata query -1 query))\n  ([query x]\n   (metadata query -1 x))\n  ([query        :- ::lib.schema/query\n    stage-number :- :int\n    x]\n   (metadata-method query stage-number x)))\n\n(mu/defn describe-query :- ::lib.schema.common/non-blank-string\n  \"Convenience for calling [[display-name]] on a query to describe the results of its final stage.\"\n  [query]\n  (display-name query query))\n\n(mu/defn suggested-name :- [:maybe ::lib.schema.common/non-blank-string]\n  \"Name you might want to use for a query when saving an previously-unsaved query. This is the same\n  as [[describe-query]] except for native queries, where we don't describe anything.\"\n  [query]\n  (when-not (= (:lib/type (lib.util/query-stage query -1)) :mbql.stage/native)\n    (try\n      (describe-query query)\n      (catch #?(:clj Throwable :cljs js/Error) e\n        (log/error e (i18n/tru \"Error calculating display name for query: {0}\" (ex-message e)))\n        nil))))\n\n(defmulti display-info-method\n  \"Implementation for [[display-info]]. Implementations that call [[display-name]] should use the `:default` display\n  name style.\"\n  {:arglists '([query stage-number x])}\n  (fn [_query _stage-number x]\n    (lib.dispatch/dispatch-value x))\n  :hierarchy lib.hierarchy/hierarchy)\n\n(mr/register! ::display-info\n  [:map\n   [:display-name :string]\n   [:long-display-name {:optional true} :string]\n   ;; for things that have a Table, e.g. a Field\n   [:table {:optional true} [:maybe [:ref ::display-info]]]\n   ;; these are derived from the `:lib/source`/`:metabase.lib.metadata/column-source`, but instead of using that value\n   ;; directly we're returning a different property so the FE doesn't break if we change those keys in the future,\n   ;; e.g. if we consolidate or split some of those keys. This is all the FE really needs to know.\n   ;;\n   ;; if this is a Column, does it come from a previous stage?\n   [:is-from-previous-stage {:optional true} [:maybe :boolean]]\n   ;; if this is a Column, does it come from a join in this stage?\n   [:is-from-join {:optional true} [:maybe :boolean]]\n   ;; if this is a Column, is it 'calculated', i.e. does it come from an expression in this stage?\n   [:is-calculated {:optional true} [:maybe :boolean]]\n   ;; if this is a Column, is it an implicitly joinable one? I.e. is it from a different table that we have not\n   ;; already joined, but could implicitly join against?\n   [:is-implicitly-joinable {:optional true} [:maybe :boolean]]\n   ;; For the `:table` field of a Column, is this the source table, or a joined table?\n   [:is-source-table {:optional true} [:maybe :boolean]]\n   ;; does this column occur in the breakout clause?\n   [:is-breakout-column {:optional true} [:maybe :boolean]]\n   ;; does this column occur in the order-by clause?\n   [:is-order-by-column {:optional true} [:maybe :boolean]]\n   ;; for joins\n   [:name {:optional true} :string]\n   ;; for aggregation operators\n   [:column-name {:optional true} :string]\n   [:description {:optional true} :string]\n   [:short-name {:optional true} :string]\n   [:requires-column {:optional true} :boolean]\n   [:selected {:optional true} :boolean]\n   ;; for binning and bucketing\n   [:default {:optional true} :boolean]\n   ;; for order by\n   [:direction {:optional true} [:enum :asc :desc]]])\n\n(mu/defn display-info :- ::display-info\n  \"Given some sort of Cljs object, return a map with the info you'd need to implement UI for it. This is mostly meant to\n  power the Frontend JavaScript UI; in JS, results will be converted to plain JavaScript objects, so avoid returning\n  things that should remain opaque.\"\n  ([query x]\n   (display-info query -1 x))\n\n  ([query        :- ::lib.schema/query\n    stage-number :- :int\n    x]\n   (try\n     (display-info-method query stage-number x)\n     (catch #?(:clj Throwable :cljs js/Error) e\n       (throw (ex-info (i18n/tru \"Error calculating display info for {0}: {1}\"\n                                 (lib.dispatch/dispatch-value x)\n                                 (ex-message e))\n                       {:query query, :stage-number stage-number, :x x}\n                       e))))))\n\n(defn default-display-info\n  \"Default implementation of [[display-info-method]], available in case you want to use this in a different\n  implementation and add additional information to it.\"\n  [query stage-number x]\n  (let [x-metadata (metadata query stage-number x)]\n    (merge\n     ;; TODO -- not 100% convinced the FE should actually have access to `:name`, can't it use `:display-name`\n     ;; everywhere? Determine whether or not this is the case.\n     (select-keys x-metadata [:name :display-name :semantic-type])\n     (when-let [long-display-name (display-name query stage-number x :long)]\n       {:long-display-name long-display-name})\n     ;; don't return `:base-type`, FE should just use `:effective-type` everywhere and not even need to know\n     ;; `:base-type` exists.\n     (when-let [effective-type ((some-fn :effective-type :base-type) x-metadata)]\n       {:effective-type effective-type})\n     (when-let [table-id (:table-id x-metadata)]\n       {:table (display-info\n                query\n                stage-number\n                ;; TODO: only ColumnMetadatas should possibly have legacy `card__<id>` `:table-id`s... we should\n                ;; probably move this special casing into [[metabase.lib.field]] instead of having it be part of the\n                ;; `:default` method.\n                (cond\n                  (integer? table-id) (lib.metadata/table query table-id)\n                  (string? table-id)  (lib.metadata/card query (lib.util/legacy-string-table-id->card-id table-id))))})\n     (when-let [source (:lib/source x-metadata)]\n       {:is-from-previous-stage (= source :source/previous-stage)\n        :is-from-join           (= source :source/joins)\n        :is-calculated          (= source :source/expressions)\n        :is-implicitly-joinable (= source :source/implicitly-joinable)})\n     (when-some [selected (:selected? x-metadata)]\n       {:selected selected})\n     (select-keys x-metadata [:breakout-position :order-by-position]))))\n\n(defmethod display-info-method :default\n  [query stage-number x]\n  (default-display-info query stage-number x))\n\n(defmethod display-info-method :metadata/table\n  [query stage-number table]\n  (merge (default-display-info query stage-number table)\n         {:is-source-table (= (lib.util/source-table-id query) (:id table))}))\n\n(def ColumnMetadataWithSource\n  \"Schema for the column metadata that should be returned by [[metadata]].\"\n  [:merge\n   lib.metadata/ColumnMetadata\n   [:map\n    [:lib/source ::lib.metadata/column-source]]])\n\n(def ColumnsWithUniqueAliases\n  \"Schema for column metadata that should be returned by [[visible-columns]]. This is mostly used\n  to power metadata calculation for stages (see [[metabase.lib.stage]].\"\n  [:and\n   [:sequential\n    [:merge\n     ColumnMetadataWithSource\n     [:map\n      [:lib/source-column-alias  ::lib.schema.common/non-blank-string]\n      [:lib/desired-column-alias [:string {:min 1, :max 60}]]]]]\n   [:fn\n    ;; should be dev-facing only, so don't need to i18n\n    {:error/message \"Column :lib/desired-column-alias values must be distinct, regardless of case, for each stage!\"\n     :error/fn      (fn [{:keys [value]} _]\n                      (str \"Column :lib/desired-column-alias values must be distinct, got: \"\n                           (pr-str (mapv :lib/desired-column-alias value))))}\n    (fn [columns]\n      (or\n       (empty? columns)\n       (apply distinct? (map (comp u/lower-case-en :lib/desired-column-alias) columns))))]])\n\n(def ^:private UniqueNameFn\n  [:=>\n   [:cat ::lib.schema.common/non-blank-string]\n   ::lib.schema.common/non-blank-string])\n\n(def ReturnedColumnsOptions\n  \"Schema for options passed to [[returned-columns]] and [[returned-columns-method]].\"\n  [:map\n   ;; has the signature (f str) => str\n   [:unique-name-fn {:optional true} UniqueNameFn]])\n\n(mu/defn ^:private default-returned-columns-options :- ReturnedColumnsOptions\n  []\n  {:unique-name-fn (lib.util/unique-name-generator)})\n\n(defmulti returned-columns-method\n  \"Impl for [[returned-columns]].\"\n  {:arglists '([query stage-number x options])}\n  (fn [_query _stage-number x _options]\n    (lib.dispatch/dispatch-value x))\n  :hierarchy lib.hierarchy/hierarchy)\n\n(defmethod returned-columns-method :dispatch-type/nil\n  [_query _stage-number _x _options]\n  [])\n\n(mu/defn returned-columns :- [:maybe ColumnsWithUniqueAliases]\n  \"Return a sequence of metadata maps for all the columns expected to be 'returned' at a query, stage of the query, or\n  join, and include the `:lib/source` of where they came from. This should only include columns that will be present\n  in the results; DOES NOT include 'expected' columns that are not 'exported' to subsequent stages.\n\n  See [[ReturnedColumnsOptions]] for allowed options and [[default-returned-columns-options]] for default values.\"\n  ([query]\n   (returned-columns query (lib.util/query-stage query -1)))\n\n  ([query x]\n   (returned-columns query -1 x))\n\n  ([query stage-number x]\n   (returned-columns query stage-number x nil))\n\n  ([query          :- ::lib.schema/query\n    stage-number   :- :int\n    x\n    options        :- [:maybe ReturnedColumnsOptions]]\n   (let [options (merge (default-returned-columns-options) options)]\n     (returned-columns-method query stage-number x options))))\n\n(def VisibleColumnsOptions\n  \"Schema for options passed to [[visible-columns]] and [[visible-columns-method]].\"\n  [:merge\n   ReturnedColumnsOptions\n   [:map\n    ;; these all default to true\n    [:include-joined?              {:optional true} :boolean]\n    [:include-expressions?         {:optional true} :boolean]\n    [:include-implicitly-joinable? {:optional true} :boolean]]])\n\n(mu/defn ^:private default-visible-columns-options :- VisibleColumnsOptions\n  []\n  (merge\n   (default-returned-columns-options)\n   {:include-joined?              true\n    :include-expressions?         true\n    :include-implicitly-joinable? true}))\n\n(defmulti visible-columns-method\n  \"Impl for [[visible-columns]].\n\n  This should mostly be similar to the implementation for [[metadata-method]], but needs to include\n  `:lib/source-column-alias` and `:lib/desired-column-alias`. `:lib/source-column-alias` should probably be the same\n  as `:name`; use the supplied `:unique-name-fn` from `options` with the signature `(f str) => str` to ensure\n  `:lib/desired-column-alias` is unique.\n\n  Also, columns that aren't 'projected' should be returned as well -- in other words, ignore `:fields`,\n  `:aggregations`, and `:breakouts`.\"\n  {:arglists '([query stage-number x options])}\n  (fn [_query _stage-number x _options]\n    (lib.dispatch/dispatch-value x))\n  :hierarchy lib.hierarchy/hierarchy)\n\n(defmethod visible-columns-method :dispatch-type/nil\n  [_query _stage-number _x _options]\n  [])\n\n;;; default impl is just the impl for [[returned-columns-method]]\n(defmethod visible-columns-method :default\n  [query stage-number x options]\n  (returned-columns-method query stage-number x options))\n\n(mu/defn visible-columns :- ColumnsWithUniqueAliases\n  \"Return a sequence of columns that should be visible *within* a given stage of something, e.g. a query stage or a\n  join query. This includes not just the columns that get returned (ones present in [[metadata]], but other columns\n  that are 'reachable' in this stage of the query. E.g. in a query like\n\n    SELECT id, name\n    FROM table\n    ORDER BY position\n\n  only `id` and `name` are 'returned' columns, but other columns such as `position` are visible in this stage as well\n  and would thus be returned by this function.\n\n  Columns from joins, expressions, and implicitly joinable columns are included automatically by default;\n  see [[VisibleColumnsOptions]] for the options for disabling these columns.\"\n  ([query]\n   (visible-columns query (lib.util/query-stage query -1)))\n\n  ([query x]\n   (visible-columns query -1 x))\n\n  ([query stage-number x]\n   (visible-columns query stage-number x nil))\n\n  ([query          :- ::lib.schema/query\n    stage-number   :- :int\n    x\n    options        :- [:maybe VisibleColumnsOptions]]\n   (let [options (merge (default-visible-columns-options) options)]\n     (visible-columns-method query stage-number x options))))\n"]}