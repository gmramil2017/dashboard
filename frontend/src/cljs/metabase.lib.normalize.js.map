{"version":3,"sources":["metabase/lib/normalize.cljc"],"mappings":"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","names":["metabase.lib.normalize/mbql-clause-type","x","and__5043__auto__","cljs.core/vector?","cljs.core.some_fn","cljs.core/keyword?","cljs.core/string?","cljs.core/first","cljs.core.keyword","metabase.lib.normalize/map-type","m","cljs.core/map?","G__65029","or__5045__auto__","cljs.core.get","metabase.lib.normalize/dispatch-value","metabase.lib.dispatch/dispatch-value","js/metabase","js/metabase.lib","js/metabase.lib.normalize","js/metabase.lib.normalize.normalize","method-table__5642__auto__","cljs.core.atom","prefer-table__5643__auto__","method-cache__5644__auto__","cached-hierarchy__5645__auto__","hierarchy__5646__auto__","fexpr__65032","cljs.core/MultiFn","cljs.core.symbol","metabase.lib.normalize/normalize","metabase.lib.hierarchy/hierarchy","metabase.lib.normalize/default-map-value-fns","cljs.core/keyword","cljs.core/constantly","var_args","G__65038","metabase.lib.normalize/normalize-map","js/Error","metabase.lib.normalize.normalize_map","key-fn","value-fns","cljs.core.merge","cljs.core.into","cljs.core.map","p__65046","vec__65047","cljs.core.nth","k","v","temp__5802__auto__","f","p__65054","vec__65055","seq__65056","cljs.core/seq","first__65057","cljs.core/next","metabase.lib.normalize/default-normalize-mbql-clause","tag","opts","args"],"sourcesContent":["(ns metabase.lib.normalize\n  (:require\n   [metabase.lib.dispatch :as lib.dispatch]\n   [metabase.lib.hierarchy :as lib.hierarchy]))\n\n(defn- mbql-clause-type [x]\n  (when (and (vector? x)\n             ((some-fn keyword? string?) (first x)))\n    (keyword (first x))))\n\n(defn- map-type [m]\n  (when (map? m)\n    (some-> (or\n             (:lib/type m)\n             (get m \"lib/type\"))\n            keyword)))\n\n(defn- dispatch-value [x]\n  (or\n   (mbql-clause-type x)\n   (map-type x)\n   (keyword (lib.dispatch/dispatch-value x))))\n\n(defmulti normalize\n  \"Ensure some part of an MBQL query `x`, e.g. a clause or map, is in the right shape after coming in from JavaScript or\n  deserialized JSON (from the app DB or a REST API request). This is intended for things that are already in a\n  generally correct pMBQL; to 'normalize' things from legacy MBQL, use [[metabase.lib.convert]].\n\n  The default implementation will keywordize keys for maps, and convert some known keys\n  using [[default-map-value-fns]]; for MBQL clauses, it will convert the clause name to a keyword and recursively\n  normalize its options and arguments. Implement this method if you need custom behavior for something.\"\n  {:arglists '([x])}\n  dispatch-value\n  :hierarchy lib.hierarchy/hierarchy)\n\n(def default-map-value-fns\n  \"Default normalization functions keys when doing map normalization.\"\n  {:base-type      keyword\n   :effective-type keyword\n   :semantic-type  keyword\n   :type           keyword\n   ;; we can calculate `:field_ref` now using [[metabase.lib.ref/ref]]; `:field_ref` is wrong half of the time anyway,\n   ;; so ignore it.\n   :field_ref      (constantly ::do-not-use-me)\n   :lib/type       keyword\n   :lib/options    normalize})\n\n(defn normalize-map\n  \"[[normalize]] a map using `key-fn` (default [[clojure.core/keyword]]) for keys and\n  `value-fns` (default [[default-map-value-fns]]; additional functions are merged into this map).\n\n  This is the default implementation for maps. Custom map implementations can call this with a different `key-fn` or\n  additional `value-fns` as needed.\"\n  ([m]\n   (normalize-map m keyword))\n\n  ([m key-fn]\n   (normalize-map m key-fn nil))\n\n  ([m key-fn value-fns]\n   (let [value-fns (merge default-map-value-fns value-fns)]\n     (into {}\n           (map (fn [[k v]]\n                  (let [k (key-fn k)]\n                    [k\n                     (if-let [f (get value-fns k)]\n                       (f v)\n                       v)])))\n           m))))\n\n(defmethod normalize :dispatch-type/map\n  [m]\n  (normalize-map m))\n\n(defn- default-normalize-mbql-clause [[tag opts & args]]\n  (into [(keyword tag) (normalize opts)]\n        (map normalize)\n        args))\n\n(defmethod normalize :default\n  [x]\n  (cond\n    (mbql-clause-type x) (default-normalize-mbql-clause x)\n    (map-type x)         (normalize-map x)\n    :else                x))\n"]}