{"version":3,"sources":["metabase/lib/js/metadata.cljs"],"mappings":"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","names":["metabase.lib.js.metadata/object-get","obj","k","metabase.lib.js.metadata.goog$module$goog$object.get","var_args","G__81263","metabase.lib.js.metadata/obj->clj","js/Error","p__81264","map__81265","cljs.core/--destructure-map","cljs.core.get","xform","metabase.lib.js.metadata.obj__GT_clj","use-plain-object?","cljs.core/map?","cljs.core.into","temp__5802__auto__","plain-object","G__81266","cljs.core.js__GT_clj","cljs.core/not-empty","cljs.core.comp","cljs.core.map","cljs.core.remove","p__81269","vec__81270","cljs.core.nth","_k","v","cljs.core._EQ_","goog/typeOf","metabase.lib.js.metadata.goog$module$goog$object.getKeys","js/metabase","js/metabase.lib","js/metabase.lib.js","js/metabase.lib.js.metadata","js/metabase.lib.js.metadata.excluded-keys","method-table__5642__auto__","cljs.core.atom","prefer-table__5643__auto__","method-cache__5644__auto__","cached-hierarchy__5645__auto__","hierarchy__5646__auto__","fexpr__81278","cljs.core/MultiFn","cljs.core.symbol","metabase.lib.js.metadata/excluded-keys","cljs.core/keyword","_","js/metabase.lib.js.metadata.parse-field-fn","fexpr__81282","metabase.lib.js.metadata/parse-field-fn","_object-type","js/metabase.lib.js.metadata.lib-type","fexpr__81285","metabase.lib.js.metadata/lib-type","metabase.lib.js.metadata/parse-object-xform","object-type","excluded-keys-set","parse-field","p__81296","vec__81297","cljs.core.keyword","metabase.util/->kebab-case-en","cljs.core/empty?","cljs.core/identity","p__81301","vec__81302","_v","cljs.core/contains?","cljs.core/not","p__81308","vec__81309","G__81316","metabase.lib.js.metadata/parse-object-fn","metabase.lib.js.metadata.parse_object_fn","opts","lib-type-name","object","e81322","parsed","cljs.core.assoc","level__47254__auto__","metabase.util.log/glogi-level","logger__47255__auto__","metabase.util.log/is-loggable?","x__47256__auto__","lambdaisland.glogi.log","metabase.util.log.format_msg","metabase.util.pprint_to_str","e","cljs.core.pr_str","cljs.core/ex-message","js/metabase.lib.js.metadata.parse-objects","fexpr__81337","metabase.lib.js.metadata/parse-objects","_metadata","js/metabase.lib.js.metadata.parse-objects-default-key","fexpr__81341","metabase.lib.js.metadata/parse-objects-default-key","metadata","parse-object","p__81345","vec__81346","cljs.core/parse-long","cljs.core/Delay","G__81356","cljs.core/Keyword","G__81360","parse-table","p__81367","vec__81368","clojure.string/starts-with?","p__81371","vec__81374","metabase.lib.js.metadata/parse-field-id","id","G__81383","cljs.core/vector?","cljs.core/second","G__81388","clojure.walk/keywordize-keys","metabase.lib.js.metadata/parse-fields","fields","cljs.core.mapv","G__81405","cljs.core.some_fn","cljs.core/sequential?","cljs.core/array?","metabase.lib.js.metadata/unwrap-card","or__5045__auto__","metabase.lib.js.metadata/assemble-card","parse-card-ignoring-plain-object","parse-card","cljs.core.merge","G__81421","cljs.core.keep","metabase.lib.util/legacy-string-table-id->card-id","metabase.lib.js.metadata/parse-objects-delay","e81440","metabase.lib.js.metadata/parse-metadata","metabase.lib.js.metadata/database","database-id","G__81445","cljs.core/deref","metabase.lib.js.metadata/table","table-id","G__81447","metabase.lib.js.metadata/field","field-id","G__81580","metabase.lib.js.metadata/card","card-id","G__81587","metabase.lib.js.metadata/metric","metric-id","G__81589","metabase.lib.js.metadata/segment","segment-id","G__81590","metabase.lib.js.metadata/tables","iter__5523__auto__","s__81592","cljs.core/LazySeq","temp__5804__auto__","cljs.core/seq","cljs.core/chunked-seq?","c__5521__auto__","size__5522__auto__","cljs.core/count","b__81594","cljs.core/chunk-buffer","i__81593","vec__81595","cljs.core/-nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__81591","cljs.core/chunk-rest","vec__81600","cljs.core/first","cljs.core/cons","cljs.core/rest","_id","table-delay","G__81604","a-table","G__81598","G__81603","and__5043__auto__","metabase.lib.js.metadata/fields","s__81606","b__81608","i__81607","vec__81609","iter__81605","vec__81626","field-delay","G__81631","a-field","G__81612","G__81629","metabase.lib.js.metadata/metrics","s__81645","b__81647","i__81646","vec__81648","iter__81644","vec__81652","metric-delay","G__81656","a-metric","G__81651","G__81655","metabase.lib.js.metadata/metadata-provider","unparsed-metadata","level__47249__auto__","logger__47250__auto__","x__47251__auto__","cljs.core/print-str","cljs.core.print_str","metabase.lib.js.metadata/t_metabase$lib$js$metadata81659","_this","clojure.walk/postwalk","form","cljs.core/delay?","cljs.core/chunk-first"],"sourcesContent":["(ns metabase.lib.js.metadata\n  (:require\n   [clojure.core.protocols]\n   [clojure.string :as str]\n   [clojure.walk :as walk]\n   [goog]\n   [goog.object :as gobject]\n   [metabase.lib.metadata.protocols :as lib.metadata.protocols]\n   [metabase.lib.util :as lib.util]\n   [metabase.util :as u]\n   [metabase.util.log :as log]))\n\n;;; metabase-lib/metadata/Metadata comes in a class like\n;;;\n;;;    {\n;;;      databases: {},\n;;;      tables: {},\n;;;      fields: {},\n;;;      metrics: {},\n;;;      segments: {},\n;;;      questions: {},\n;;;    }\n;;;\n;;; where keys are a map of String ID => metadata\n\n(defn- object-get [obj k]\n  (when obj\n    (gobject/get obj k)))\n\n(defn- obj->clj\n  \"Convert a JS object of *any* class to a ClojureScript object.\"\n  ([xform obj]\n   (obj->clj xform obj {}))\n  ([xform obj {:keys [use-plain-object?] :or {use-plain-object? true}}]\n   (if (map? obj)\n     ;; already a ClojureScript object.\n     (into {} xform obj)\n     ;; has a plain-JavaScript `_plainObject` attached: apply `xform` to it and call it a day\n     (if-let [plain-object (when use-plain-object?\n                             (some-> (object-get obj \"_plainObject\")\n                                     js->clj\n                                     not-empty))]\n       (into {} xform plain-object)\n       ;; otherwise do things the hard way and convert an arbitrary object into a Cljs map. (`js->clj` doesn't work on\n       ;; arbitrary classes other than `Object`)\n       (into {}\n             (comp\n              (map (fn [k]\n                     [k (object-get obj k)]))\n              ;; ignore values that are functions\n              (remove (fn [[_k v]]\n                        (= (goog/typeOf v) \"function\")))\n              xform)\n             (gobject/getKeys obj))))))\n\n;;; this intentionally does not use the lib hierarchy since it's not dealing with MBQL/lib keys\n(defmulti ^:private excluded-keys\n  {:arglists '([object-type])}\n  keyword)\n\n(defmethod excluded-keys :default\n  [_]\n  nil)\n\n;;; yes, the multimethod could dispatch on object-type AND k and get called for every object, but that would be slow,\n;;; by doing it this way we only need to do it once.\n(defmulti ^:private parse-field-fn\n  \"Return a function with the signature\n\n    (f k v) => v'\n\n  For parsing an individual field.\"\n  {:arglists '([object-type])}\n  keyword)\n\n(defmethod parse-field-fn :default\n  [_object-type]\n  nil)\n\n(defmulti ^:private lib-type\n  \"The metadata type that should be attached the sorts of metadatas with the `:lib/type` key, e.g. `:metadata/table`.\"\n  {:arglists '([object-type])}\n  keyword)\n\n(defn- parse-object-xform [object-type]\n  (let [excluded-keys-set (excluded-keys object-type)\n        parse-field       (parse-field-fn object-type)]\n    (comp\n     ;; convert keys to kebab-case keywords\n     (map (fn [[k v]]\n            [(keyword (u/->kebab-case-en k)) v]))\n     ;; remove [[excluded-keys]]\n     (if (empty? excluded-keys-set)\n       identity\n       (remove (fn [[k _v]]\n                 (contains? excluded-keys-set k))))\n     ;; parse each key with its [[parse-field-fn]]\n     (if-not parse-field\n       identity\n       (map (fn [[k v]]\n              [k (parse-field k v)]))))))\n\n(defn- parse-object-fn\n  ([object-type]\n   (parse-object-fn object-type {}))\n  ([object-type opts]\n   (let [xform         (parse-object-xform object-type)\n         lib-type-name (lib-type object-type)]\n     (fn [object]\n       (try\n         (let [parsed (assoc (obj->clj xform object opts) :lib/type lib-type-name)]\n           (log/debugf \"Parsed metadata %s %s\\n%s\" object-type (:id parsed) (u/pprint-to-str parsed))\n           parsed)\n         (catch js/Error e\n           (log/errorf e \"Error parsing %s %s: %s\" object-type (pr-str object) (ex-message e))\n           nil))))))\n\n(defmulti ^:private parse-objects\n  {:arglists '([object-type metadata])}\n  (fn [object-type _metadata]\n    (keyword object-type)))\n\n(defmulti ^:private parse-objects-default-key\n  \"Key to use to get unparsed objects of this type from the metadata, if you're using the default implementation\n  of [[parse-objects]].\"\n  {:arglists '([object-type])}\n  keyword)\n\n(defmethod parse-objects :default\n  [object-type metadata]\n  (let [parse-object (parse-object-fn object-type)]\n    (obj->clj (map (fn [[k v]]\n                     [(parse-long k) (delay (parse-object v))]))\n              (object-get metadata (parse-objects-default-key object-type)))))\n\n(defmethod lib-type :database\n  [_object-type]\n  :metadata/database)\n\n(defmethod excluded-keys :database\n  [_object-type]\n  #{:tables :fields})\n\n(defmethod parse-field-fn :database\n  [_object-type]\n  (fn [k v]\n    (case k\n      :dbms-version       (js->clj v :keywordize-keys true)\n      :features           (into #{} (map keyword) v)\n      :native-permissions (keyword v)\n      v)))\n\n(defmethod parse-objects-default-key :database\n  [_object-type]\n  \"databases\")\n\n(defmethod lib-type :table\n  [_object-type]\n  :metadata/table)\n\n(defmethod excluded-keys :table\n  [_object-type]\n  #{:database :fields :segments :metrics :dimension-options})\n\n(defmethod parse-field-fn :table\n  [_object-type]\n  (fn [k v]\n    (case k\n      :entity-type         (keyword v)\n      :field-order         (keyword v)\n      :initial-sync-status (keyword v)\n      :visibility-type     (keyword v)\n      v)))\n\n(defmethod parse-objects :table\n  [object-type metadata]\n  (let [parse-table (parse-object-fn object-type)]\n    (obj->clj (comp (remove (fn [[k _v]]\n                              (str/starts-with? k \"card__\")))\n                    (map (fn [[k v]]\n                           [(parse-long k) (delay (parse-table v))])))\n              (object-get metadata \"tables\"))))\n\n(defmethod lib-type :field\n  [_object-type]\n  :metadata/column)\n\n(defmethod excluded-keys :field\n  [_object-type]\n  #{:_comesFromEndpoint\n    :database\n    :default-dimension-option\n    :dimension-options\n    :dimensions\n    :metrics\n    :table})\n\n(defn- parse-field-id\n  [id]\n  (cond-> id\n    ;; sometimes instead of an ID we get a field reference\n    ;; with the name of the column in the second position\n    (vector? id) second))\n\n(defmethod parse-field-fn :field\n  [_object-type]\n  (fn [k v]\n    (case k\n      :base-type         (keyword v)\n      :coercion-strategy (keyword v)\n      :effective-type    (keyword v)\n      :fingerprint       (if (map? v)\n                           (walk/keywordize-keys v)\n                           (js->clj v :keywordize-keys true))\n      :has-field-values  (keyword v)\n      :semantic-type     (keyword v)\n      :visibility-type   (keyword v)\n      :id                (parse-field-id v)\n      v)))\n\n(defmethod parse-objects-default-key :field\n  [_object-type]\n  \"fields\")\n\n(defmethod lib-type :card\n  [_object-type]\n  :metadata/card)\n\n(defmethod excluded-keys :card\n  [_object-type]\n  #{:database\n    :db\n    :dimension-options\n    :fks\n    :metadata\n    :metrics\n    :plain-object\n    :segments\n    :schema\n    :schema-name\n    :table})\n\n(defn- parse-fields [fields]\n  (mapv (parse-object-fn :field) fields))\n\n(defmethod parse-field-fn :card\n  [_object-type]\n  (fn [k v]\n    (case k\n      :result-metadata (if ((some-fn sequential? array?) v)\n                         (parse-fields v)\n                         (js->clj v :keywordize-keys true))\n      :fields          (parse-fields v)\n      :visibility-type (keyword v)\n      :dataset-query   (js->clj v :keywordize-keys true)\n      :dataset         v\n      ;; this is not complete, add more stuff as needed.\n      v)))\n\n(defn- unwrap-card\n  \"Sometimes a card is stored in the metadata as some sort of weird object where the thing we actually want is under the\n  key `_card` (not sure why), but if it is just unwrap it and then parse it normally.\"\n  [obj]\n  (or (object-get obj \"_card\")\n      obj))\n\n(defn- assemble-card\n  [metadata id]\n  (let [parse-card-ignoring-plain-object (parse-object-fn :card {:use-plain-object? false})\n        parse-card (parse-object-fn :card)]\n    ;; The question objects might not contain the fields so we merge them\n    ;; in from the table matadata.\n    (merge\n     (-> metadata\n         (object-get \"tables\")\n         (object-get (str \"card__\" id))\n         ;; _plainObject can contain field names in the field property\n         ;; instead of the field objects themselves.  Ignoring this\n         ;; property makes sure we parse the real fields.\n         parse-card-ignoring-plain-object\n         (assoc :id id))\n     (-> metadata\n         (object-get \"questions\")\n         (object-get (str id))\n         unwrap-card\n         parse-card))))\n\n(defmethod parse-objects :card\n  [_object-type metadata]\n  (into {}\n        (map (fn [id]\n               [id (delay (assemble-card metadata id))]))\n        (-> #{}\n            (into (keep lib.util/legacy-string-table-id->card-id)\n                  (gobject/getKeys (object-get metadata \"tables\")))\n            (into (map parse-long)\n                  (gobject/getKeys (object-get metadata \"questions\"))))))\n\n(defmethod lib-type :metric\n  [_object-type]\n  :metadata/metric)\n\n(defmethod excluded-keys :metric\n  [_object-type]\n  #{:database :table})\n\n(defmethod parse-field-fn :metric\n  [_object-type]\n  (fn [_k v]\n    v))\n\n(defmethod parse-objects-default-key :metric\n  [_object-type]\n  \"metrics\")\n\n(defmethod lib-type :segment\n  [_object-type]\n  :metadata/segment)\n\n(defmethod excluded-keys :segment\n  [_object-type]\n  #{:database :table})\n\n(defmethod parse-field-fn :segment\n  [_object-type]\n  (fn [_k v]\n    v))\n\n(defmethod parse-objects-default-key :segment\n  [_object-type]\n  \"segments\")\n\n(defn- parse-objects-delay [object-type metadata]\n  (delay\n    (try\n      (parse-objects object-type metadata)\n      (catch js/Error e\n        (log/errorf e \"Error parsing %s objects: %s\" object-type (ex-message e))\n        nil))))\n\n(defn- parse-metadata [metadata]\n  {:databases (parse-objects-delay :database metadata)\n   :tables    (parse-objects-delay :table    metadata)\n   :fields    (parse-objects-delay :field    metadata)\n   :cards     (parse-objects-delay :card     metadata)\n   :metrics   (parse-objects-delay :metric   metadata)\n   :segments  (parse-objects-delay :segment  metadata)})\n\n(defn- database [metadata database-id]\n  (some-> metadata :databases deref (get database-id) deref))\n\n(defn- table [metadata table-id]\n  (some-> metadata :tables deref (get table-id) deref))\n\n(defn- field [metadata field-id]\n  (some-> metadata :fields deref (get field-id) deref))\n\n(defn- card [metadata card-id]\n  (some-> metadata :cards deref (get card-id) deref))\n\n(defn- metric [metadata metric-id]\n  (some-> metadata :metrics deref (get metric-id) deref))\n\n(defn- segment [metadata segment-id]\n  (some-> metadata :segments deref (get segment-id) deref))\n\n(defn- tables [metadata database-id]\n  (for [[_id table-delay] (some-> metadata :tables deref)\n        :let              [a-table (some-> table-delay deref)]\n        :when             (and a-table (= (:db-id a-table) database-id))]\n    a-table))\n\n(defn- fields [metadata table-id]\n  (for [[_id field-delay] (some-> metadata :fields deref)\n        :let              [a-field (some-> field-delay deref)]\n        :when             (and a-field (= (:table-id a-field) table-id))]\n    a-field))\n\n(defn- metrics [metadata table-id]\n  (for [[_id metric-delay] (some-> metadata :metrics deref)\n        :let               [a-metric (some-> metric-delay deref)]\n        :when              (and a-metric (= (:table-id a-metric) table-id))]\n    a-metric))\n\n(defn metadata-provider\n  \"Use a `metabase-lib/metadata/Metadata` as a [[metabase.lib.metadata.protocols/MetadataProvider]].\"\n  [database-id unparsed-metadata]\n  (let [metadata (parse-metadata unparsed-metadata)]\n    (log/debug \"Created metadata provider for metadata\")\n    (reify lib.metadata.protocols/MetadataProvider\n      (database [_this]            (database metadata database-id))\n      (table    [_this table-id]   (table    metadata table-id))\n      (field    [_this field-id]   (field    metadata field-id))\n      (metric   [_this metric-id]  (metric   metadata metric-id))\n      (segment  [_this segment-id] (segment  metadata segment-id))\n      (card     [_this card-id]    (card     metadata card-id))\n      (tables   [_this]            (tables   metadata database-id))\n      (fields   [_this table-id]   (fields   metadata table-id))\n      (metrics  [_this table-id]   (metrics  metadata table-id))\n\n      ;; for debugging: call [[clojure.datafy/datafy]] on one of these to parse all of our metadata and see the whole\n      ;; thing at once.\n      clojure.core.protocols/Datafiable\n      (datafy [_this]\n        (walk/postwalk\n         (fn [form]\n           (if (delay? form)\n             (deref form)\n             form))\n         metadata)))))\n"]}