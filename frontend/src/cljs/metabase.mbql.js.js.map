{"version":3,"sources":["metabase/mbql/js.cljs"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAMA;;;;;0BAAA,1BAAOA,4DAIJC;AAJH,AAKE,oBAGE,iBAAAC,oBAAKD;AAAL,AAAA,oBAAAC;AAAA,SACK,cAAWC,bAAUF,0BACrB,AAACG,oBAAI,AAAOH;;AAFjBC;;;AAE6B,IAAAG,WAAA,mDAAIJ,AAAE,nDAAOK;AAAb,AAAA,sHAAAD,8CAAAA,5JAAqBL,wDAAAA,kEAAAA;;AALpD,GAME,AAACO,qBAAKN;AAAuB,OAACO,sBAAYP,EAAED;;AAN9C,GAOE,AAACS,4BAAYR;AAAgB,OAACS,6CAAKV,wBAAOC;;AAP5C,AAQ+BA;;;;;;AAEjC;;;;;kCAAA,lCAAMU,4EAIHC;AAJH,AAKE,yCAAA,wBAAA,mDAAIA,nDAAMN,xBAAQN,lCAAOa;;AAE3B;;;;;6BAAA,7BAAeC,kEAIZF;AAJH,iGAKMA,hCAAMD,jEAAe,iEAAA,yFAAA,nJAACI,mNAAoBC","names":["metabase.mbql.js/unwrap","x","and__5043__auto__","js/Object","cljs.core/fn?","G__81359","cljs.core.js__GT_clj","cljs.core/map?","cljs.core/update-vals","cljs.core/sequential?","cljs.core.mapv","metabase.mbql.js/normalize-cljs","query","metabase.mbql.normalize/normalize","metabase.mbql.js/normalize","cljs.core.clj__GT_js","metabase.util/qualified-name"],"sourcesContent":["(ns metabase.mbql.js\n  \"JavaScript-friendly interface to metabase.mbql util functions.\"\n  (:require\n   [metabase.mbql.normalize :as mbql.normalize]\n   [metabase.util :as u]))\n\n(defn- unwrap\n  \"Sometimes JS queries are passed in with a `Join` or `Aggregation` clause object instead of a simple Array.\n  These clauses `extend Array` so `Array.isArray(x)` is true, but they're treated as opaque by `js->clj`.\n  This recurses over the whole query, unwrapping these values to their `.raw()` form.\"\n  [x]\n  (cond\n    ;; (object? x) only matches for things that are plain objects. eg. `(object? (js/Date.))` is false.\n    ;; This matches anything that descends from `Object`, like `Join` clause, and has a `.raw()` method.\n    (and x\n         (instance? js/Object x)\n         (fn? (.-raw x)))        (-> x (.raw) js->clj unwrap)\n    (map? x)                     (update-vals x unwrap)\n    (sequential? x)              (mapv unwrap x)\n    :else                        x))\n\n(defn normalize-cljs\n  \"Normalize an MBQL query, and convert it to the latest and greatest version of MBQL.\n\n  Returns the CLJS form of the normalized query. Use [[normalize]] for the JS form.\"\n  [query]\n  (-> query js->clj unwrap mbql.normalize/normalize))\n\n(defn ^:export normalize\n  \"Normalize an MBQL query, and convert it to the latest and greatest version of MBQL.\n\n  Returns the JS form of the normalized query. Use [[normalize-cljs]] for the CLJS form.\"\n  [query]\n  (-> query normalize-cljs (clj->js :keyword-fn u/qualified-name)))\n"]}