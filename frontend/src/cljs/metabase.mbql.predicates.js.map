{"version":3,"sources":["metabase/mbql/predicates.cljc"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AASA;;;AAA4BA,+CAE1B,AAACC,qBAAW,AAACC,oBAAUC;AAEzB;;;AAA4BC,6CAE1B,AAACH,qBAAW,AAACC,oBAAUG;AAEzB;;;AAAiCC,8CAE/B,AAACL,qBAAW,AAACC,oBAAUK;AAEzB;;;AAAoCC,wCAElC,AAACP,qBAAW,AAACC,oBAAUO;AAEzB;;;AAAqCC,yCAEnC,AAACT,qBAAW,AAACC,oBAAUS;AAEzB;;;AAAqCC,qDAEnC,AAACX,qBAAW,AAACC,oBAAUW;AAEzB;;;AAAoCC,uDAElC,AAACb,qBAAW,AAACC,oBAAUa","names":["metabase.mbql.predicates/DateTimeUnit?","cljs.core/complement","schema.core/checker","metabase.mbql.schema/DateTimeUnit","metabase.mbql.predicates/TimezoneId?","metabase.mbql.schema/TimezoneId","metabase.mbql.predicates/Aggregation?","metabase.mbql.schema/Aggregation","metabase.mbql.predicates/Field?","metabase.mbql.schema/Field","metabase.mbql.predicates/Filter?","metabase.mbql.schema/Filter","metabase.mbql.predicates/DatetimeExpression?","metabase.mbql.schema/DatetimeExpression","metabase.mbql.predicates/FieldOrExpressionDef?","metabase.mbql.schema/FieldOrExpressionDef"],"sourcesContent":["(ns metabase.mbql.predicates\n  \"Predicate functions for checking whether something is a valid instance of a given MBQL clause.\"\n  (:require\n   [metabase.mbql.schema :as mbql.s]\n   [schema.core :as s]))\n\n;; This namespace only covers a few things, please add more stuff here as we write the functions so we can use them\n;; elsewhere\n\n(def ^{:arglists '([unit])} DateTimeUnit?\n  \"Is `unit` a valid datetime bucketing unit?\"\n  (complement (s/checker mbql.s/DateTimeUnit)))\n\n(def ^{:arglists '([unit])} TimezoneId?\n  \"Is `unit` a valid datetime bucketing unit?\"\n  (complement (s/checker mbql.s/TimezoneId)))\n\n(def ^{:arglists '([ag-clause])} Aggregation?\n  \"Is this a valid Aggregation clause?\"\n  (complement (s/checker mbql.s/Aggregation)))\n\n(def ^{:arglists '([field-clause])} Field?\n  \"Is this a valid Field clause?\"\n  (complement (s/checker mbql.s/Field)))\n\n(def ^{:arglists '([filter-clause])} Filter?\n  \"Is this a valid `:filter` clause?\"\n  (complement (s/checker mbql.s/Filter)))\n\n(def ^{:arglists '([filter-clause])} DatetimeExpression?\n  \"Is this a valid DatetimeExpression clause?\"\n  (complement (s/checker mbql.s/DatetimeExpression)))\n\n(def ^{:arglists '([field-clause])} FieldOrExpressionDef?\n  \"Is this a something that is valid as a top-level expression definition?\"\n  (complement (s/checker mbql.s/FieldOrExpressionDef)))\n"]}