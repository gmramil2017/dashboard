{"version":3,"sources":["metabase/mbql/schema/helpers.cljc"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAOA,AAIA,iDAAA,jDAAOA,0GAAmBC,SAASC;AAAnC,AAEE,GAAA,GAAQ,AAACC,wBAAQD;AACf,OAACE,gBAAMF,WAAWD;;AAClB,IAAAI,aAAgDH;aAAhD,AAAAI,4CAAAD,WAAA,IAAA,pEAAOE;qBAAP,AAAAD,4CAAAD,WAAA,IAAA,5EAAcH;wBAAdG,pBAA6BG;AAA7B,AACE,IAAAC,WAAMF;IAANE,eAAA,EAAA,CAAAA,oBAAAC,oBAAA,AAAAD,aAAA;AAAA,AAAA,QAAAA;KAAA;AACY,OAACE,qBAAW,AAACC,kBAAQV,gBAAYD;;;KAD7C;AAEY,OAACY,kBAAQX,eAAWD;;;;AAC9B,OAACG,gBAAMI,kBAAkBP;;;;;AAEjC,AAAA;;;sCAAA,8CAAAa,pFAAMM;AAAN,AAAA,IAAAL,qBAAA;AAAA,AAAA,IAAAC,0BAAA,AAAA;AAAA,AAAA,IAAAC,wBAAA;;AAAA,AAAA,GAAA,CAAAA,wBAAAD;AAAA,AAAA,AAAAD,wBAAA,CAAA,UAAAE;;AAAA,eAAA,CAAAA,wBAAA;;;;AAAA;;;;AAAA,IAAAC,uBAAA,EAAA,CAAA,MAAA,AAAAH,4BAAA,AAAA,KAAAI,qBAAA,AAAAJ,yBAAA,KAAA,IAAA,OAAA;AAAA,AAAA,OAAAK,yEAAA,CAAA,UAAA,MAAAF;;;AAAA,AAAA,CAAA,2EAAA,3EAAME,sFAEHM,YAAcC;AAFjB,AAGE,OAACC,cACA,AAACC,eACA,AAACzB,gBAAM,AAAC0B,eAAKJ,aAAaA,aAC1B,iBAAAK,qBAAA,mDAAAC;AAAA,AAAA,YAAAC,kBAAA,KAAA;AAAA,AAAA,IAAAD,eAAAA;;AAAA,AAAA,IAAAE,qBAAA,AAAAC,cAAAH;AAAA,AAAA,GAAAE;AAAA,AAAA,IAAAF,eAAAE;AAAA,AAAA,GAAA,AAAAE,6BAAAJ;AAAA,IAAAK,kBAi7E+C,AAAAsE,sBAAA3E;IAj7E/CM,qBAAA,AAAAC,gBAAAF;IAAAG,WAAA,AAAAC,uBAAAH;AAAA,AAAA,GAAA,AAAA,iBAAAI,WAAA;;AAAA,AAAA,GAAA,CAAAA,WAAAJ;AAAA,IAAAK,aAAA,AAAAC,eAAAP,gBAAAK;eAAA,AAAApC,4CAAAqC,WAAA,IAAA,tEAAO1C;iBAAP,AAAAK,4CAAAqC,WAAA,IAAA,xEAAgBzC;AAAhB,AAAA,AAAA,AAAA2C,uBAAAL,SACE,AAACxC,+CAAkBC,SAASC;;AAD9B,eAAA,CAAAwC,WAAA;;;;AAAA;;;;;AAAA,OAAAI,qBAAA,AAAAC,gBAAAP,UAAA,AAAAQ,yCAAA,AAAAC,qBAAAjB;;AAAA,OAAAc,qBAAA,AAAAC,gBAAAP,UAAA;;;AAAA,IAAAU,aAAA,AAAA3B,gBAAAS;eAAA,AAAA1B,4CAAA4C,WAAA,IAAA,tEAAOjD;iBAAP,AAAAK,4CAAA4C,WAAA,IAAA,xEAAgBhD;AAAhB,AAAA,OAAA2B,mFAAA,AAAAmB,yCAAA,AAAAG,eAAAnB,5HACE,AAAChC,+CAAkBC,SAASC;;;AAD9B;;;;GAAA,KAAA;;AAAA,AAAA,OAAA6B,mBAA4B,kDAAA,lDAACqB,sDAAYzB;;;;AAN7C,CAAA,8DAAA,9DAAMP;;AAAN;AAAA,CAAA,wDAAA,WAAAC,nEAAMD;AAAN,AAAA,IAAAE,WAAA,AAAAC,gBAAAF;IAAAA,eAAA,AAAAG,eAAAH;AAAA,AAAA,IAAAI,qBAAA;AAAA,AAAA,OAAAA,wDAAAH,SAAAD;;;AAAA,AAYA;;;;;;gDAAA,hDAAMgC,wGAKHC,QAAQC;AALX,AAME,IAAAC,oBACC,AAACC,4BAAYF;AADd,AAAA,GAAAC;AAAA,IAAAA,wBAEC,+BAAA9C,9BAAU,AAACa,gBAAMgC;AAFlB,AAAA,GAAAC;AAGC,GAAI,AAACE,sBAAMJ;AACT,IAAAK,WAAe,AAACpC,gBAAMgC;IAAtBK,eAAC,AAACC,cAAIP;AAAN,AAAA,QAAAM,6CAAAA,2CAAAD,YAAAC,uBAAAD;;AACA,OAACG,6CAAER,QAAQ,AAAC/B,gBAAMgC;;;AALrBC;;;AAAAA;;;AAOF,AAAA;;;4CAAA,oDAAA1C,hGAAMiD;AAAN,AAAA,IAAAhD,qBAAA;AAAA,AAAA,IAAAC,0BAAA,AAAA;AAAA,AAAA,IAAAC,wBAAA;;AAAA,AAAA,GAAA,CAAAA,wBAAAD;AAAA,AAAA,AAAAD,wBAAA,CAAA,UAAAE;;AAAA,eAAA,CAAAA,wBAAA;;;;AAAA;;;;AAAA,IAAAC,uBAAA,EAAA,CAAA,MAAA,AAAAH,4BAAA,AAAA,KAAAI,qBAAA,AAAAJ,yBAAA,KAAA,IAAA,OAAA;AAAA,AAAA,OAAAgD,+EAAA7C;;;AAAA,AAAA,CAAA,iFAAA,jFAAM6C,4FAEDG;AAFL,AAGE,OAACrD,kBACA,AAACsD,8CACAC,wBACA,AAACC,+CAAOC,iBAAO,iBAAAvC,qBAAA,mDAAAwC;AAAA,AAAA,YAAAtC,kBAAA,KAAA;AAAA,AAAA,IAAAsC,eAAAA;;AAAA,AAAA,IAAArC,qBAAA,AAAAC,cAAAoC;AAAA,AAAA,GAAArC;AAAA,AAAA,IAAAqC,eAAArC;AAAA,AAAA,GAAA,AAAAE,6BAAAmC;AAAA,IAAAlC,kBAw5EgC,AAAAsE,sBAAApC;IAx5EhCjC,qBAAA,AAAAC,gBAAAF;IAAAmC,WAAA,AAAA/B,uBAAAH;AAAA,AAAA,GAAA,AAAA,iBAAAmC,WAAA;;AAAA,AAAA,GAAA,CAAAA,WAAAnC;AAAA,IAAAoC,aAAA,AAAA9B,eAAAP,gBAAAoC;kBAAA,AAAAnE,4CAAAoE,WAAA,IAAA,zEAAOhD;iBAAP,AAAApB,4CAAAoE,WAAA,IAAA,xEAAmBG;AAAnB,AAAA,AAAA,AAAAhC,uBAAA2B,SAAA,mFACG,AAACM,gDAAQzB,8CAAW3B,aAAamD;;AADpC,eAAA,CAAAJ,WAAA;;;;AAAA;;;;;AAAA,OAAA3B,qBAAA,AAAAC,gBAAAyB,UAAA,AAAAG,yCAAA,AAAA1B,qBAAAsB;;AAAA,OAAAzB,qBAAA,AAAAC,gBAAAyB,UAAA;;;AAAA,IAAAI,aAAA,AAAArD,gBAAAgD;kBAAA,AAAAjE,4CAAAsE,WAAA,IAAA,zEAAOlD;iBAAP,AAAApB,4CAAAsE,WAAA,IAAA,xEAAmBC;AAAnB,AAAA,OAAAhD,eAAA,iNAAA,AAAA8C,yCAAA,AAAAxB,eAAAoB,tLACG,AAACO,gDAAQzB,8CAAW3B,aAAamD;;;AADpC;;;;GAAA,KAAA;;AAAA,AAAA,OAAA9C,mBAA2BmC;OAE3C,CAAA,qDAA0D,kDAAA,lDAACa,uDAAc,AAACC,4CAAIzD,gBAAM2C;;;AARvF,CAAA,oEAAA,pEAAMH;;AAAN;AAAA,CAAA,8DAAA,WAAAC,zEAAMD;AAAN,AAAA,IAAAE,qBAAA;AAAA,AAAA,OAAAA,wDAAA,AAAA9B,cAAA6B;;;AAAA,AAUA;;;AAAKiB,8CAEH,wHAAA,xHAACC,sDAAcC,gBAAM,AAACC,qBAAWC;AAEnC;;;AAAKC,yCAEH,+CAAA,WAAAC,1DAACC;AAAD,AAAS,0DAAAD,iBAAA,pEAACE;GAAV;AAEF;;;;AAAKC,2DAGH,AAACF,+CAAO,WAAKG;AAAL,AACE,SAAI,qDAAA,rDAACF,mDAAKE,sEACN,qDAAA,rDAACF,mDAAKE;GAFpB;AAKF;;;AAAKC,kDAEH,2FAAA,3FAACV,sDAAcW,gBAAMC;AAEvB;;;AAAKC,2DAEH,iHAAA,jHAACb,sDAAcW,gBAAM,AAACT,qBAAWY;AAEnC;;;mCAAA,nCAAKC,mFAEFC,gBAAMA;AAET;;;AAAKC,+CAEH,AAACC,4GAAWC,oBAAUlB;AAExB;;;;yCAAA,zCAAMmB,0FAGHzB;AAHH,AAIE,sFAAA,/EAACK,sDAAcL,WAAO1C;;AAExB;;;wDAAA,xDAAMoE,wHAEHC;AAFH,AAGE,GAAI,AAACrE,cAAIqE;AACP,OAACrC,8CAAMsC,0BAAUD;;AADnB;;;AAIF;;;wCAAA,xCAAME,wFAEH7B;AAFH,AAGE,8HAAA,vHAACK,sDAAcL,WAAO0B","names":["metabase.mbql.schema.helpers/clause-arg-schema","arg-name","arg-schema","cljs.core/vector?","schema.core/one","vec__60777","cljs.core.nth","option","vector-arg-schema","G__60780","cljs.core/Keyword","schema.core/optional","schema.core/maybe","schema.core/named","var_args","args__5775__auto__","len__5769__auto__","i__5770__auto__","argseq__5776__auto__","cljs.core/IndexedSeq","metabase.mbql.schema.helpers/clause","seq60781","G__60782","cljs.core/first","cljs.core/next","self__5754__auto__","clause-name","arg-schemas","cljs.core/vec","cljs.core/cons","schema.core/eq","iter__5523__auto__","s__60784","cljs.core/LazySeq","temp__5804__auto__","cljs.core/seq","cljs.core/chunked-seq?","c__5521__auto__","size__5522__auto__","cljs.core/count","b__60786","cljs.core/chunk-buffer","i__60785","vec__60787","cljs.core/-nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__60783","cljs.core/chunk-rest","vec__60790","cljs.core/rest","cljs.core.partition","metabase.mbql.schema.helpers/is-clause?","k-or-ks","x","and__5043__auto__","cljs.core/sequential?","cljs.core/coll?","G__60798","fexpr__60797","cljs.core/set","cljs.core._EQ_","metabase.mbql.schema.helpers/one-of*","seq60799","self__5755__auto__","clause-names+schemas","cljs.core.apply","schema.core/conditional","cljs.core.reduce","cljs.core/concat","s__60806","b__60808","i__60807","vec__60812","iter__60805","vec__60815","schema","cljs.core.partial","clojure.string.join","cljs.core.map","metabase.mbql.schema.helpers/NonBlankString","schema.core.constrained","schema.core/Str","cljs.core/complement","clojure.string/blank?","metabase.mbql.schema.helpers/FieldType","p1__60818#","schema.core.pred","cljs.core.isa_QMARK_","metabase.mbql.schema.helpers/FieldSemanticOrRelationType","k","metabase.mbql.schema.helpers/IntGreaterThanZero","schema.core/Int","cljs.core/pos?","metabase.mbql.schema.helpers/IntGreaterThanOrEqualToZero","cljs.core/neg?","metabase.mbql.schema.helpers/Map","schema.core/Any","metabase.mbql.schema.helpers/KeywordOrString","schema.core.cond_pre","schema.core/Keyword","metabase.mbql.schema.helpers/non-empty","metabase.mbql.schema.helpers/empty-or-distinct?","coll","cljs.core/distinct?","metabase.mbql.schema.helpers/distinct","cljs.core/chunk-first"],"sourcesContent":["(ns metabase.mbql.schema.helpers\n  (:refer-clojure :exclude [distinct])\n  (:require\n   [clojure.string :as str]\n   [metabase.types]\n   [schema.core :as s]))\n\n(comment metabase.types/keep-me)\n\n;;; --------------------------------------------------- defclause ----------------------------------------------------\n\n(defn- clause-arg-schema [arg-name arg-schema]\n  ;; for things like optional schemas\n  (if-not (vector? arg-schema)\n    (s/one arg-schema arg-name)\n    (let [[option arg-schema :as vector-arg-schema] arg-schema]\n      (case option\n        :optional (s/optional (s/maybe arg-schema) arg-name)\n        :rest     (s/named arg-schema arg-name)\n        (s/one vector-arg-schema arg-name)))))\n\n(defn clause\n  \"Impl of `defclause` macro.\"\n  [clause-name & arg-schemas]\n  (vec\n   (cons\n    (s/one (s/eq clause-name) clause-name)\n    (for [[arg-name arg-schema] (partition 2 arg-schemas)]\n      (clause-arg-schema arg-name arg-schema)))))\n\n\n;; TODO - this is a copy of the one in the `metabase.mbql.util` namespace. We need to reorganize things a bit so we\n;; can use the same fn and avoid circular refs\n(defn is-clause?\n  \"If `x` an MBQL clause, and an instance of clauses defined by keyword(s) `k-or-ks`?\n\n    (is-clause? :count [:count 10])        ; -> true\n    (is-clause? #{:+ :- :* :/} [:+ 10 20]) ; -> true\"\n  [k-or-ks x]\n  (and\n   (sequential? x)\n   (keyword? (first x))\n   (if (coll? k-or-ks)\n     ((set k-or-ks) (first x))\n     (= k-or-ks (first x)))))\n\n(defn one-of*\n  \"Interal impl of `one-of` macro.\"\n  [& clause-names+schemas]\n  (s/named\n   (apply\n    s/conditional\n    (reduce concat (for [[clause-name schema] clause-names+schemas]\n                     [(partial is-clause? clause-name) schema])))\n   (str \"Must be a valid instance of one of these clauses: \" (str/join \", \" (map first clause-names+schemas)))))\n\n(def NonBlankString\n  \"Schema for a string that isn't blank.\"\n  (s/constrained s/Str (complement str/blank?) \"Non-blank string\"))\n\n(def FieldType\n  \"Schema for `:type/*` or one of its descendants in the Dashboard type hierarchy.\"\n  (s/pred #(isa? % :type/*) \"Valid field type\"))\n\n(def FieldSemanticOrRelationType\n  \"Schema for a `:Semantic/*` (or `:Relation/*`, until we fix this) or one of their descendents in the Dashboard\n  Hierarchical Type System (MHTS).\"\n  (s/pred (fn [k]\n            (or (isa? k :Semantic/*)\n                (isa? k :Relation/*)))\n          \"Valid semantic type\"))\n\n(def IntGreaterThanZero\n  \"Schema for a positive integer.\"\n  (s/constrained s/Int pos? \"positive integer\"))\n\n(def IntGreaterThanOrEqualToZero\n  \"Schema for an integer >= zero.\"\n  (s/constrained s/Int (complement neg?) \"integer >= 0\"))\n\n(def Map\n  \"Schema for any map.\"\n  {s/Any s/Any})\n\n(def KeywordOrString\n  \"Schema for any keyword or string.\"\n  (s/cond-pre s/Keyword s/Str))\n\n(defn non-empty\n  \"Add an addditonal constraint to `schema` (presumably an array) that requires it to be non-empty\n   (i.e., it must satisfy `seq`).\"\n  [schema]\n  (s/constrained schema seq \"Non-empty\"))\n\n(defn empty-or-distinct?\n  \"True if `coll` is either empty or distinct.\"\n  [coll]\n  (if (seq coll)\n    (apply distinct? coll)\n    true))\n\n(defn distinct\n  \"Add an additional constraint to `schema` (presumably an array) that requires all elements to be distinct.\"\n  [schema]\n  (s/constrained schema empty-or-distinct? \"distinct\"))\n"]}