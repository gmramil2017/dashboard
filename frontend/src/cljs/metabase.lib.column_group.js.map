{"version":3,"sources":["metabase/lib/column_group.cljc"],"mappings":"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","names":["metabase.lib.column-group/GroupType","metabase.lib.column-group/ColumnGroup","metabase.lib.metadata/ColumnMetadata","cljs.core/any?","metabase.lib.metadata.calculation/metadata-method","_query","_stage-number","column-group","metabase.lib.metadata.calculation/display-info-method","query","stage-number","G__80432","cljs.core/Keyword","js/Error","cljs.core.merge","stage","metabase.lib.util/query-stage","or__5045__auto__","temp__5804__auto__","table","G__80433","metabase.lib.metadata/table","metabase.lib.metadata.calculation.display_info","card","G__80434","metabase.lib.metadata/card","cljs.core/next","metabase.lib.metadata.calculation.display_name","join-alias","join","metabase.lib.join/resolve-join","fk-field-id","field","metabase.lib.metadata/field","field-info","cljs.core.assoc","metabase.lib.util/strip-id","p__80439","map__80440","cljs.core/--destructure-map","cljs.core.get","metabase.lib.column-group/column-group-info","source","column-metadata","G__80442","metabase.lib.join/current-join-alias","metabase.lib.column-group/group-columns","column-metadatas","cljs.core.mapv","p__80444","vec__80445","cljs.core.nth","group-info","columns","cljs.core/group-by","metabase.lib.column-group/columns-group-columns"],"sourcesContent":["(ns metabase.lib.column-group\n  (:require\n   [metabase.lib.join :as lib.join]\n   [metabase.lib.metadata :as lib.metadata]\n   [metabase.lib.metadata.calculation :as lib.metadata.calculation]\n   [metabase.lib.schema.common :as lib.schema.common]\n   [metabase.lib.schema.id :as lib.schema.id]\n   [metabase.lib.util :as lib.util]\n   [metabase.util.malli :as mu]))\n\n(def ^:private GroupType\n  [:enum\n   ;; the `:group-type/main` group includes all the columns from the source Table/Card/previous stage as well as ones\n   ;; added in this stage.\n   :group-type/main\n   ;; the other two group types are for various types of joins.\n   :group-type/join.explicit\n   :group-type/join.implicit])\n\n(def ^:private ColumnGroup\n  \"Schema for the metadata returned by [[group-columns]], and accepted by [[columns-group-columns]].\"\n  [:and\n   [:map\n    [:lib/type    [:= :metadata/column-group]]\n    [::group-type GroupType]\n    [::columns    [:sequential lib.metadata/ColumnMetadata]]]\n   [:multi\n    {:dispatch ::group-type}\n    [:group-type/main\n     any?]\n    [:group-type/join.explicit\n     [:map\n      [:join-alias [:ref ::lib.schema.common/non-blank-string]]]]\n    [:group-type/join.implicit\n     [:map\n      [:fk-field-id [:ref ::lib.schema.id/field]]]]]])\n\n(defmethod lib.metadata.calculation/metadata-method :metadata/column-group\n  [_query _stage-number column-group]\n  column-group)\n\n(defmethod lib.metadata.calculation/display-info-method :metadata/column-group\n  [query stage-number column-group]\n  (case (::group-type column-group)\n    :group-type/main\n    (merge\n     (let [stage (lib.util/query-stage query stage-number)]\n       (or\n        (when-let [table (some->> (:source-table stage) (lib.metadata/table query))]\n          (lib.metadata.calculation/display-info query stage-number table))\n        (when-let [card (some->> (:source-card stage) (lib.metadata/card query))]\n          (lib.metadata.calculation/display-info query stage-number card))\n        ;; for multi-stage queries return an empty string (#30108)\n        (when (next (:stages query))\n          {:display-name \"\"})\n        ;; if this is a native query or something else that doesn't have a source Table or source Card then use the\n        ;; stage display name.\n        {:display-name (lib.metadata.calculation/display-name query stage-number stage)}))\n     {:is-from-join           false\n      :is-implicitly-joinable false})\n\n    :group-type/join.explicit\n    (merge\n     (let [join-alias (:join-alias column-group)]\n       (when-let [join (lib.join/resolve-join query stage-number join-alias)]\n         (lib.metadata.calculation/display-info query stage-number join)))\n     {:is-from-join           true\n      :is-implicitly-joinable false})\n\n    :group-type/join.implicit\n    (merge\n     (let [fk-field-id (:fk-field-id column-group)]\n       (when-let [field (lib.metadata/field query fk-field-id)]\n         (let [field-info (lib.metadata.calculation/display-info query stage-number field)]\n           ;; Implicitly joined column pickers don't use the target table's name, they use the FK field's name with\n           ;; \"ID\" dropped instead.\n           ;; This is very intentional: one table might have several FKs to one foreign table, each with different\n           ;; meaning (eg. ORDERS.customer_id vs. ORDERS.supplier_id both linking to a PEOPLE table).\n           ;; See #30109 for more details.\n           (assoc field-info :fk-reference-name (lib.util/strip-id (:display-name field-info))))))\n     {:is-from-join           false\n      :is-implicitly-joinable true})))\n\n(mu/defn ^:private column-group-info :- [:map [::group-type GroupType]]\n  \"The value we should use to `group-by` inside [[group-columns]].\"\n  [{source :lib/source, :as column-metadata} :- lib.metadata/ColumnMetadata]\n  (case source\n    :source/implicitly-joinable\n    {::group-type :group-type/join.implicit, :fk-field-id (:fk-field-id column-metadata)}\n\n    :source/joins\n    {::group-type :group-type/join.explicit, :join-alias (lib.join/current-join-alias column-metadata)}\n\n    {::group-type :group-type/main}))\n\n(mu/defn group-columns :- [:sequential ColumnGroup]\n  \"Given a group of columns returned by a function like [[metabase.lib.order-by/orderable-columns]], group the columns\n  by Table or equivalent (e.g. Saved Question) so that they're in an appropriate shape for showing in the Query\n  Builder. e.g a sequence of columns like\n\n    [venues.id\n     venues.name\n     venues.category-id\n     ;; implicitly joinable\n     categories.id\n     categories.name]\n\n  would get grouped into groups like\n\n    [{::columns [venues.id\n                 venues.name\n                 venues.category-id]}\n     {::columns [categories.id\n                 categories.name]}]\n\n  Groups have the type `:metadata/column-group` and can be passed directly\n  to [[metabase.lib.metadata.calculation/display-info]].\"\n  [column-metadatas :- [:sequential lib.metadata/ColumnMetadata]]\n  (mapv (fn [[group-info columns]]\n          (assoc group-info\n                 :lib/type :metadata/column-group\n                 ::columns columns))\n        (group-by column-group-info column-metadatas)))\n\n(mu/defn columns-group-columns :- [:sequential lib.metadata/ColumnMetadata]\n  \"Get the columns associated with a column group\"\n  [column-group :- ColumnGroup]\n  (::columns column-group))\n"]}