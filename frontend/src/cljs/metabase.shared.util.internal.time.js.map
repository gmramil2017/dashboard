{"version":3,"sources":["metabase/shared/util/internal/time.cljs"],"mappings":"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","names":["metabase.shared.util.internal.time/now","js/shadow.js.shim.module$moment","metabase.shared.util.internal.time/datetime?","value","and__5043__auto__","js/shadow.js.shim.module$moment.isMoment","metabase.shared.util.internal.time/time?","metabase.shared.util.internal.time/valid?","metabase.shared.util.internal.time/normalize","metabase.shared.util.internal.time/same-day?","d1","d2","metabase.shared.util.internal.time/same-month?","metabase.shared.util.internal.time/same-year?","metabase.shared.util.internal.time/first-day-of-week","js/shadow.js.shim.module$moment.weekdays","cljs.core.keyword","metabase.shared.util.internal.time/default-options","metabase.shared.util.internal.time-common/to-range","p__80406","map__80407","cljs.core/--destructure-map","cljs.core.get","unit","c1","c2","cljs.core/name","metabase.shared.util.internal.time-common/string->timestamp","_","js/shadow.js.shim.module$moment.utc","js/shadow.js.shim.module$moment.ISO_8601","options","as-default","e80408","fexpr__80410","cljs.core/get-method","js/Error","metabase.shared.util.internal.time/magic-base-date","metabase.shared.util.internal.time-common/number->timestamp","metabase.shared.util.internal.time/parse-with-zone","js/shadow.js.shim.module$moment.parseZone","metabase.shared.util.internal.time/localize","metabase.shared.util.internal.time/parse-time-formats","metabase.shared.util.internal.time/parse-time-string","metabase.shared.util.internal.time/day-diff","before","after"],"sourcesContent":["(ns metabase.shared.util.internal.time\n  \"CLJS implementation of the time utilities on top of Moment.js.\n  See [[metabase.shared.util.time]] for the public interface.\"\n  (:require\n   [\"moment\" :as moment]\n   [metabase.shared.util.internal.time-common :as common]))\n\n(defn- now [] (moment))\n\n;;; ----------------------------------------------- predicates -------------------------------------------------------\n(defn datetime?\n  \"Given any value, check if it's a (possibly invalid) Moment.\"\n  [value]\n  (and value (moment/isMoment value)))\n\n(defn time?\n  \"checks if the provided value is a local time value.\"\n  [value]\n  (moment/isMoment value))\n\n(defn valid?\n  \"Given a Moment, check that it's valid.\"\n  [value]\n  (and (datetime? value) (.isValid ^moment/Moment value)))\n\n(defn normalize\n  \"Does nothing. Just a placeholder in CLJS; the JVM implementation does some real work.\"\n  [value]\n  value)\n\n(defn same-day?\n  \"Given two platform-specific datetimes, checks if they fall within the same day.\"\n  [^moment/Moment d1 ^moment/Moment d2]\n  (.isSame d1 d2 \"day\"))\n\n(defn same-month?\n  \"True if these two datetimes fall in the same (year and) month.\"\n  [^moment/Moment d1 ^moment/Moment d2]\n  (.isSame d1 d2 \"month\"))\n\n(defn same-year?\n  \"True if these two datetimes fall in the same year.\"\n  [^moment/Moment d1 ^moment/Moment d2]\n  (.isSame d1 d2 \"year\"))\n\n;;; ---------------------------------------------- information -------------------------------------------------------\n(defn first-day-of-week\n  \"The first day of the week varies by locale, but Dashboard has a setting that overrides it.\n  In CLJS, Moment is already configured with that setting.\"\n  []\n  (-> (moment/weekdays 0)\n      (.toLowerCase)\n      keyword))\n\n(def default-options\n  \"The default map of options - empty in CLJS.\"\n  {})\n\n;;; ------------------------------------------------ to-range --------------------------------------------------------\n(defmethod common/to-range :default [^moment/Moment value {:keys [unit]}]\n  (let [^moment/Moment c1 (.clone value)\n        ^moment/Moment c2 (.clone value)]\n    [(.startOf c1 (name unit))\n     (.endOf   c2 (name unit))]))\n\n;; NB: Only the :default for to-range is needed in CLJS, since Moment's startOf and endOf methods are doing the work.\n\n;;; -------------------------------------------- string->timestamp ---------------------------------------------------\n(defmethod common/string->timestamp :default [value _]\n  ;; Best effort to parse this unknown string format, as a local zoneless datetime, then treating it as UTC.\n  (moment/utc value moment/ISO_8601))\n\n(defmethod common/string->timestamp :day-of-week [value options]\n  ;; Try to parse as a regular timestamp; if that fails then try to treat it as a weekday name and adjust from\n  ;; the current time.\n  (let [as-default (try ((get-method common/string->timestamp :default) value options)\n                        (catch js/Error _ nil))]\n    (if (valid? as-default)\n      as-default\n      (-> (now)\n          (.isoWeekday value)\n          (.startOf \"day\")))))\n\n;;; -------------------------------------------- number->timestamp ---------------------------------------------------\n(defn- magic-base-date\n  \"Some of the date coercions are relative, and not directly involved with any particular month.\n  To avoid errors we need to use a reference date that is (a) in a month with 31 days,(b) in a leap year.\n  This uses 2016-01-01 for the purpose.\n  This is a function that returns fresh values, since Moments are mutable.\"\n  []\n  (moment \"2016-01-01\"))\n\n(defmethod common/number->timestamp :default [value _]\n  ;; If no unit is given, or the unit is not recognized, try to parse the number as year number, returning the timestamp\n  ;; for midnight UTC on January 1.\n  (moment/utc value moment/ISO_8601))\n\n(defmethod common/number->timestamp :minute-of-hour [value _]\n  (.. (now) (minute value) (startOf \"minute\")))\n\n(defmethod common/number->timestamp :hour-of-day [value _]\n  (.. (now) (hour value) (startOf \"hour\")))\n\n(defmethod common/number->timestamp :day-of-week [value _]\n  ;; Dashboard uses 1 to mean the start of the week, based on the Dashboard setting for the first day of the week.\n  ;; Moment uses 0 as the first day of the week in its configured locale.\n  (.. (now) (weekday (dec value)) (startOf \"day\")))\n\n(defmethod common/number->timestamp :day-of-month [value _]\n  ;; We force the initial date to be in a month with 31 days.\n  (.. (magic-base-date) (date value) (startOf \"day\")))\n\n(defmethod common/number->timestamp :day-of-year [value _]\n  ;; We force the initial date to be in a leap year (2016).\n  (.. (magic-base-date) (dayOfYear value) (startOf \"day\")))\n\n(defmethod common/number->timestamp :week-of-year [value _]\n  (.. (now) (week value) (startOf \"week\")))\n\n(defmethod common/number->timestamp :month-of-year [value _]\n  (.. (now) (month (dec value)) (startOf \"month\")))\n\n(defmethod common/number->timestamp :quarter-of-year [value _]\n  (.. (now) (quarter value) (startOf \"quarter\")))\n\n(defmethod common/number->timestamp :year [value _]\n  (.. (now) (year value) (startOf \"year\")))\n\n;;; ---------------------------------------------- parsing helpers ---------------------------------------------------\n(defn parse-with-zone\n  \"Parses a timestamp with Z or a timezone offset at the end.\n  This requires a different API call from timestamps without time zones in CLJS.\"\n  [value]\n  (moment/parseZone value))\n\n(defn localize\n  \"Given a freshly parsed absolute Moment, convert it to a local one.\"\n  [value]\n  (.local value))\n\n(def ^:private parse-time-formats\n  #js [\"HH:mm:ss.SSS[Z]\"\n       \"HH:mm:ss.SSS\"\n       \"HH:mm:ss\"\n       \"HH:mm\"])\n\n(defn parse-time-string\n  \"Parses a time string that has been stripped of any time zone.\"\n  [value]\n  (moment value parse-time-formats))\n\n;;; ------------------------------------------------ arithmetic ------------------------------------------------------\n\n(defn day-diff\n  \"Returns the time elapsed between `before` and `after` in days.\"\n  [^moment/Moment before ^moment/Moment after]\n  (.diff after before \"day\"))\n"]}