{"version":3,"sources":["malli/generator.cljc"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAaA,AAAA;AAAA;AAAA,AAEA,AAAA;AAAA;;;4BAAA,5BAAaO;;AAAb,IAAAP,iDAAA,WACeQ,MAAKC;AADpB,AAAA,IAAAR,kBAAA,EAAA,UAAA,OAAA,hBACeO,qBAAAA;IADfN,kBAAA,CAAAC,2BAAA,AAAAC,YAAAH;AAAA,AAAA,GAAA,GAAA,CAAAC,mBAAA;AAAA,QAAAA,gDAAAA,+DAAAA,jBACeM,2CAAAA,rCAAKC,2CAAAA;;AADpB,IAAAJ,kBAAA,CAAAF,2BAAA;AAAA,AAAA,GAAA,GAAA,CAAAE,mBAAA;AAAA,QAAAA,gDAAAA,+DAAAA,jBACeG,2CAAAA,rCAAKC,2CAAAA;;AADpB,MAAA,AAAAH,2BAAA,uBACeE;;;;AADf,AAAA;;;6BAAA,7BACGL,kEAAYK,MAAKC;AADpB,AAAA,GAAA,EAAA,GAAA,UAAA,aAAA,GAAA,CAAA,sDAAA,hFACeD,0BAAAA;AADf,OACeA,mDAAAA,MAAKC;;AADpB,OAAAT,+CACeQ,MAAKC;;;;AADpB,AAkCA;;;6BAAA,qCAAAC,lEAAMI;AAAN,AAAA,IAAAH,aAAAD;IAAAC,iBAAA,AAAAC,4BAAAD;eAAAA,XAE2CK;gCAF3C,AAAAH,4CAAAF,eAAA,vFAEYI;AAFZ,AAGE,OAACE,oBAAU,AAACC,sEAAc,WAAKC;AAAL,AACE,MAAO,AAACC,gDACA,CAAA,0GACK,sHAAA,pGAAIL,2BACF,AAACM,8CAAON,0DAEf,iBAAAO,WAAA;AAAA,AAAA,oBACEP;AAA0B,qDAAAO,SAAA,vDAACC,iHAAc,AAACF,8CAAON;;AADnDO;;;sCANpC,2CAAA,4FAAA,KAAA,/KAQ0BE,4SAEcT;;AAE1C;;;0CAAA,1CAAMU,4FAEHC;AAFH,AAEM,0BAAA,AAAA,0HAAI,AAACC,eAAKD,5JAAeE;;AAE/B,mCAAA,nCAAMC,8EAAkBH;AAAxB,AAA2B,GAAU,AAACD,wCAAkBC;AAA7B;;AAAA,AAAgCA;;;AAE3D,0BAAA,1BAAOI,4DAASC;AAAhB,AAAsB,oBAAIA;AAAK,OAACC,oEAAmBD;;AAAM,OAACC;;;AAE1D,yBAAA,zBAAmBC,0DAAQC,WAAOzB;AAAlC,AACE,AAAC0B,yGAAQ,6CAAA,AAAA,2FAAA;;AADX,0FAAA,KAEQ1B;;AAER,+BAAA,/BAAmB2B,sEAAcF,WAAOzB;AAAxC,AACE,AAAC0B,yGAAQ,6CAAA,AAAA,sGAAA;;AACT1B;;AAEF,2BAAA,3BAAM4B,8DAAUH,WAAOzB;AAAvB,AACE,IAAA6B,aAA0D,AAACK,oDAAaT,WAAOzB;IAA/E6B,iBAAA,AAAA1B,4BAAA0B;cAAA,AAAAzB,4CAAAyB,eAAA,rEAAuBG;cAAvB,AAAA5B,4CAAAyB,eAAA,rEAAwCI;UAAxC,AAAA7B,4CAAAyB,eAAA,jEAAcC;UAAd,AAAA1B,4CAAAyB,eAAA,jEAAkBE;AAAlB,AACE,oBAAM,iBAAAI,oBAAKL;AAAL,AAAA,oBAAAK;AAAA,IAAAA,wBAASH;AAAT,AAAA,oBAAAG;AAAiB,QAAGH,UAAQF;;AAA5BK;;;AAAAA;;;AAAN,AACE,qDAAA,0GAAA,2CAAA,oDAAA,uDAAA,8DAAA,nXAACC,2WAAmDJ,0DAAcF;;AADpE;;AAEA,oBAAM,iBAAAK,oBAAKJ;AAAL,AAAA,oBAAAI;AAAA,IAAAA,wBAASF;AAAT,AAAA,oBAAAE;AAAiB,QAAGF,UAAQF;;AAA5BI;;;AAAAA;;;AAAN,AACE,qDAAA,0GAAA,2CAAA,oDAAA,sDAAA,8DAAA,lXAACC,0WAAmDJ,yDAAcF;;AADpE;;AAHF,kDAAA,kDAKQ,iBAAAO,mBAAIL;AAAJ,AAAA,oBAAAK;AAAAA;;AAAYP;;KALpB,iDAMQ,iBAAAO,mBAAIJ;AAAJ,AAAA,oBAAAI;AAAAA;;AAAYN;;;;AAEtB,8BAAA,9BAAOO,oEAAatC;AAApB,AAA6B,OAACuC,2CAAY,uGAAA,2CAAA,gEAAA,MAAA,sDAAA,9QAACC,4RAAsCxC;;AAEjF,iCAAA,jCAAOyC,0EAAgBC,IAAIZ,IAAI9B;AAA/B,AACE,IAAA2C,WAAQ,oCAAA,WAAAC,/CAACC;AAAD,AAAY,OAACC,mEAAWJ,IAAIZ,IAAI,OAAAc,NAAGd;;AAA3C,AAAA,oBACE,AAAA,mIAAiB9B;AAAS,yDAAA2C,yBAAA,qGAAA,2CAAA,kDAAA,kEAAA,mEAAA,lZAACI,2DAAUC,mVAEYN,sDACNZ;;AAJ7Ca;;;AAMF,8BAAA,9BAAOM,oEAAaxB,WAAOzB;AAA3B,AACE,IAAAkD,aAAwB,AAACtB,yBAASH,WAAOzB;IAAzCkD,iBAAA,AAAA/C,4BAAA+C;UAAA,AAAA9C,4CAAA8C,eAAA,jEAAcpB;UAAd,AAAA1B,4CAAA8C,eAAA,jEAAkBnB;AAAlB,AACE,oBACE,iBAAAI,oBAAKL;AAAL,AAAA,oBAAAK;AAAS,OAACgB,6CAAErB,IAAIC;;AAAhBI;;;AAAsB,OAACiB,mCAASC,oBAAS,AAACP,mEAAWQ,gDAAsBxB;;AAD7E,oBAEE,iBAAAK,oBAAKL;AAAL,AAAA,oBAAAK;AAASJ;;AAATI;;;AAAc,OAACiB,mCAASC,oBAAS,AAACP,mEAAWQ,gDAAsBxB,IAAIC;;AAFzE,oBAGED;AAAI,OAACsB,mCAASC,oBAAS,AAACZ,+BAAea,gDAAsBxB,IAAI9B;;AAHnE,oBAIE+B;AAAI,OAACqB,mCAASC,oBAAS,mHAAA,nHAACP,mEAAWQ,oDAAwBvB;;AAJ7D,AAKQwB;;;;;;;AAEZ,4BAAA,5BAAOC,gEAAW/B,WAAOgC,EAAEzD;AAA3B,AACE,IAAA0D,aAAwB,AAAC9B,yBAASH,WAAOzB;IAAzC0D,iBAAA,AAAAvD,4BAAAuD;UAAA,AAAAtD,4CAAAsD,eAAA,jEAAc5B;UAAd,AAAA1B,4CAAAsD,eAAA,jEAAkB3B;IACZ4B,QAAM,gBAAA,kDAAIlC,lDAAOmC,hBAAWC;IAC5BnB,MAAI,CAACoB,0DAAAA,yEAAAA,jBAAUH,qDAAAA,/CAAM3D,qDAAAA;AAF3B,AAGE,GAAI,AAACgB,wCAAkB0B;AACrB,GAAI,EAAA,CAAI,iBAAAL,mBAAIP;AAAJ,AAAA,oBAAAO;AAAAA;;AAAA;;QAAJ,UAAA,CAAA,OAAiB,iBAAAA,mBAAIN;AAAJ,AAAA,oBAAAM;AAAAA;;AAAA;;;AACnB,OAACe,mCAASK,EAAE,sCAAA,tCAACM;;AACb,OAAC1D,2BAAWL;;;AACd,OAACoD,mCAASK,EAAE,kBACE,iBAAAtB,oBAAKL;AAAL,AAAA,oBAAAK;AAAS,OAACgB,6CAAErB,IAAIC;;AAAhBI;;kFADF,5EACwB,AAACW,mEAAWJ,IAAIZ,uBACtC,iBAAAK,oBAAKL;AAAL,AAAA,oBAAAK;AAASJ;;AAATI;;sFAFF,uEAAA,uGAAA,9PAEgB,AAACW,mEAAWJ,IAAIZ,IAAIC,uBAClCD,KAAI,AAACW,+BAAeC,IAAIZ,IAAI9B,2BAC5B+B,KAAI,uEAAA,vEAACe,mEAAWJ,QAAMX,KAChB,AAACe,mEAAWJ;;;;AAEtC,qCAAA,rCAAOsB,kFAAoBvC,WAAOgC,EAAEzD;AAApC,AACE,IAAAiE,aAAwB,AAACrC,yBAASH,WAAOzB;IAAzCiE,iBAAA,AAAA9D,4BAAA8D;UAAA,AAAA7D,4CAAA6D,eAAA,jEAAcnC;UAAd,AAAA1B,4CAAA6D,eAAA,jEAAkBlC;IACZ4B,QAAM,gBAAA,kDAAIlC,lDAAOmC,hBAAWC;IAC5BnB,MAAI,CAACoB,0DAAAA,yEAAAA,jBAAUH,qDAAAA,/CAAM3D,qDAAAA;AAF3B,AAGE,OAACoD,mCAASK,EAAE,EAAI,AAACzC,wCAAkB0B,MACrB,EAAI,EAAA,CAAI,iBAAAL,mBAAIP;AAAJ,AAAA,oBAAAO;AAAAA;;AAAA;;QAAJ,UAAA,CAAA,OAAiB,iBAAAA,mBAAIN;AAAJ,AAAA,oBAAAM;AAAAA;;AAAA;;SACnB,sCAAA,tCAAC0B,wEACD,AAAC1D,2BAAWL,UACd,gFAAA,2CAAA,wEAAA,wEAAA,gEAAA,3UAACkE,4EAAoBxB,mHAAmBZ,wEAAmBC;;AAE7E,2BAAA,3BAAMoC,8DAAU1C,WAAOzB;AAAvB,AACE,IAAAoE,qBAAc,AAAChD,+HAAqBK,lDAAO,AAACmC,6DAAW5D,7EAAS6D,5BAAM,iBAAAQ,WAAA;IAAAC,WAAWtE;AAAX,AAAA,0HAAAqE,SAAAC,gDAAAD,SAAAC,pLAACR,0DAAAA,6EAAAA;;AAAvE,AAAA,GAAA,CAAAM,sBAAA;AAEE,OAAC/D,2BAAWL;;AAFd,UAAAoE,NAAU1B;AAAV,AACE,wJAAA,jJAACjC,sEAAc,AAAC8D,mDAAY9C,WAAOzB,SAAS0C;;;AAGhD,6BAAA,7BAAO8B,kEAAYC;AAAnB,AACE,GAAI,6CAAA,7CAACtB,iDAAI,AAACuB,gBAAMD;AACd,OAACZ,gBAAMY;;AACP,OAACE,qCAAWF;;;AAEhB,0BAAA,1BAAMG,4DAASnD,WAAOzB;AAAtB,AACE,IAAAoE,qBAAa,AAACS,oBACA,6CAAA,7CAACC,8EAAQ,6CAAA,WAAAC,xDAACC;AAAD,AAAO,OAAC5D,iCAAiB,mHAAA2D,gEAAAA,lLAACjB,0DAAAA,oFAAAA,XAAY9D,gEAAAA;IACzC,AAAC4D,kDAAWnC,WAAOzB;AAFvC,AAAA,GAAA,CAAAoE,sBAAA;AAIE,OAAC/D,2BAAWL;;AAJd,SAAAoE,LAAUK;AAAV,AAGE,OAACD,2BAAWC;;;AAGhB,6BAAA,7BAAMQ,kEAAYxD,WAAOzB;AAAzB,AACE,IAAAoE,qBAAa,AAACS,oBACA,6CAAA,7CAACC,8EAAQ,6CAAA,WAAAI,xDAACF;AAAD,AAAO,OAAC5D,iCAAiB,iBAAA+D,WAAW,eAAAD,fAACG;IAAZD,WAAoBpF;AAApB,AAAA,0HAAAmF,SAAAC,gDAAAD,SAAAC,pLAACtB,0DAAAA,6EAAAA;;IAC7B,AAACwB,iDAAU7D,WAAOzB;AAFtC,AAAA,GAAA,CAAAoE,sBAAA;AAIE,OAAC/D,2BAAWL;;AAJd,SAAAoE,LAAUK;AAAV,AAGE,OAACD,2BAAWC;;;AAGhB,2BAAA,3BAAMc,8DAAU9D,WAAOzB;AAAvB,AACE,IAAMwF,UAAQ,AAACF,iDAAU7D;IACnBgE,YAAU,WAAKC,EAAEC;AAAP,AAAU,IAAM1E,IAAE,CAAC6C,0DAAAA,qEAAAA,bAAU6B,iDAAAA,/CAAE3F,iDAAAA;AAArB,AACE,IAAA4F,WAAS3E;AAAT,AAAA,oBACE,AAACG,iCAAiBH;AAClB,OAACmC,mCAAS,WAAKyC;AAAL,AAAA,0FAASH,EAAEG;GAArBD;;AAFFA;;;IAGtBE,WAEc,AAACG,4CAAI,WAAAC;AAAA,AAAA,IAAAC,aAAAD;QAAA,AAAAE,4CAAAD,WAAA,IAAA,/DAAMT;QAAN,AAAAU,4CAAAD,WAAA,IAAA,/DAAQR;AAAR,AAAY,OAACF,UAAUC,EAAEC;GAD9B,+CAAA,WAAAI,1DAACC;AAAD,AAAS,OAAA,2FAAA,oDAAA,eAAAD,fAAMV,pDAAKnD;GADpBsD;IAGda,4FAEa,AAACJ,4CAAI,WAAAO,zIAGL,AAACI,8CAAMC;AAHF,AAAA,IAAAJ,aAAAD;QAAA,AAAAJ,4CAAAK,WAAA,IAAA,/DAAMf;QAAN,AAAAU,4CAAAK,WAAA,IAAA,/DAAQd;AAAR,AAAY,IAAM1E,IAAE,AAACG,iCAAiB,AAACqE,UAAUC,EAAEC;AAAvC,AACE,OAACnB,2BAAW,iBAAAkC,WAAA,mFAAS,sCAAA,tCAAC3C;AAAV,AAAA,oBACE9C;AAAE,oDAAAyF,7CAACC,sDAAK1F;;AADVyF;;;GAF/B,+CAAA,WAAAJ,1DAACC;AAAD,AAAS,OAAA,2FAAA,oDAAA,eAAAD,fAAMjB,pDAAKnD;GADpBsD;AARnB,AAcE,GAAI,AAACsB,yBAAS9F,wCAAkB8E;AAC9B,OAAC1C,mCAAS,WAAA2D;AAAA,AAAA,IAAAC,aAAAD;UAAA,AAAAX,4CAAAY,WAAA,IAAA,jEAAMC;UAAN,AAAAb,4CAAAY,WAAA,IAAA,jEAAUE;AAAV,AAAgB,oDAAA,7CAACpC,gFAAQ,AAACqC,+CAAOF,IAAIC;GAAO,AAACE,2HAAU,AAACR,8CAAMC,oCAAUf,UAAUO;;AAC5F,OAAChG,2BAAWL;;;AAElB,8BAAA,9BAAMqH,oEAAa5F,WAAOzB;AAA1B,AACE,IAAAsH,aAAwB,AAAC1F,yBAASH,WAAOzB;IAAzCsH,iBAAA,AAAAnH,4BAAAmH;UAAA,AAAAlH,4CAAAkH,eAAA,jEAAcxF;UAAd,AAAA1B,4CAAAkH,eAAA,jEAAkBvF;IAAlBwF,aAC2B,4CAAA,WAAAG,vDAACzB;AAAD,AAAM,0HAAAyB,gEAAAA,lLAAC5D,0DAAAA,oFAAAA,XAAY9D,gEAAAA;GAAS,AAAC4D,kDAAWnC,WAAOzB;YAD1E,AAAAoG,4CAAAmB,WAAA,IAAA,nEACOC;YADP,AAAApB,4CAAAmB,WAAA,IAAA,nEACaE;SADbF,LACuB9C;IACjBkD,OAAK,kBACE,iBAAAxF,oBAAKL;AAAL,AAAA,oBAAAK;AAAS,OAACgB,6CAAErB,IAAIC;;AAAhBI;;MADF,2CAAA,iFAAA,ZACuCL,8BACrC,iBAAAK,oBAAKL;AAAL,AAAA,oBAAAK;AAASJ;;AAATI;;MAFF,2CAAA,wEAAA,gFAAA,uBAAA,2CAAA,gFAAA,uBAAA,2CAAA,gFAAA,AAAA,xXAE+BL,wEAAkBC,8BAC/CD,oHAAmBA,8BACnBC,oHAAmBA;;AANhC,AAQE,oBAAI,AAAC6F,eAAK5G,wCAAkByD;AAC1B,GAAI,oDAAA,pDAACtB,wDAAI,iBAAAd,mBAAIP;AAAJ,AAAA,oBAAAO;AAAAA;;AAAA;;uDAAW,iBAAAA,mBAAIN;AAAJ,AAAA,oBAAAM;AAAAA;;AAAA;;;AAClB,6CAAA,tCAAC0B;;AACD,OAAC1D,2BAAWL;;;AACd,0CAAA,WAAA6H,9CAACzE;AAAD,AAAW,oDAAA,mCAAAyE,hFAAC/C;GAAW,AAACZ,4EAAoB,AAACkD,2HAAUI,MAAMC,YAAOE;;;AA2G1E,uCAAA,vCAAOG,sFAAsBrG;AAA7B,AAAA,kDAAA,oKAAA,7GACU,wBAAA,mDAAA,oBAAIA,pBAAOsG,nDAAWC,xBAAYC,kKACnC,AAACC,gBAAOzG;;AAEjB,2BAAA,3BAAM0G,8DAAU1G,WAAOzB;AAAvB,AACE,IAAMoI,SAAO,AAACN,qCAAqBrG;AAAnC,AACE,IAAAY,mBAAI,AAACgG,gBAAM,uDAAA,mFAAA,1IAACC,+CAAOtI,iLAAmBoI;AAAtC,AAAA,oBAAA/F;AAAAA;;AACI,IAAMkG,iBAAe,KAAAC,gBAAA;AAAA,AAAO,OAACnI,2BAAWL;GAAnB;IACfyI,UAAQ,AAACC,+CAAQjH;AADvB,AAEE,IAAAkH,WAAS,iBAAAC,WAAWH;IAAXI,WAAmB,2BAAA,mFAAA,9GAACC,mBAAS9I,iLAAmBoI,eAAQG;AAAxD,AAAA,0HAAAK,SAAAC,gDAAAD,SAAAC,pLAAC/E,0DAAAA,6EAAAA;;AAAV,AAAA,GACE,AAACiF,0BAAUR;AAAgB,mDAAA,WAAAS,vDAACC;AAAD,AACE,IAAAC,WAAWT;IAAXU,WAAmB,2BAAA,mFAAA,qGAAAH,nNAACF,mBAAS9I,iLAAmBoI;AAAhD,AAAA,0HAAAc,SAAAC,gDAAAD,SAAAC,pLAACrF,0DAAAA,6EAAAA;GADH6E;;AAD7BA;;;;AAIV,gCAAA,hCAAMS,wEAAS3H,WAAOzB;AAAtB,AACE,IAAMqJ,mBAAiB,iBAAAC,WAAW,AAAA,wFAAS,AAACE,0BAAiB/H;IAAtC8H,WAA+CvJ;AAA/C,AAAA,0HAAAsJ,SAAAC,gDAAAD,SAAAC,pLAACzF,0DAAAA,6EAAAA;;AAAxB,AACE,OAACC,sCAAW,qDAAA,2CAAA,hGAAC0F,0JAAuBhI,mBAAQ;mCAAOf;AAAP,AAAU,QAACgJ,yDAAAA,mFAAAA,5BAASL,+DAAAA,9CAAiBrJ,+DAAAA;;;IAA9BU;;;;EAAAA;;oCAAAA;;;IAAAA;0BAAAA;;;;;;;AAEvD,gCAAA,hCAAMiJ,wEAAelI,WAAOzB;AAA5B,AACE,OAAC+D,sCAAW,qDAAA,2CAAA,qEAAA,kDAAA,WAAA6F,lOAACH,0JAAuBhI;AAAxB,AAAsC,wHAAAmI,+DAAAA,/KAACF,yDAAAA,mFAAAA,XAAW1J,+DAAAA;WAAUA;;AAE1E,mCAAA,nCAAM6J,8EAAkBpI,WAAOzB;AAA/B,AACE,oBAAI,AAAC8J,4BAAarI;AAChB,QAACqC,0DAAAA,8EAAAA,tBAAUrC,0DAAAA,/CAAOzB,0DAAAA;;AAClB,IAAMiB,IAAE,CAAC6C,0DAAAA,8EAAAA,tBAAUrC,0DAAAA,/CAAOzB,0DAAAA;AAA1B,AACE,IAAA+J,WAAQ9I;AAAR,AAAA,oBACE,AAACG,iCAAiBH;AADpB,kIAAA8I,3HACuB3C;;AADvB2C;;;;AAGN,mCAAA,nCAAOC,8EAAeC;AAAtB,AAAyB,GAAI,AAACC,wBAAQD;AAAG,qDAAA,9CAAC7J,4CAAI6J;;AAAKA;;;AAEnD,2BAAA,3BAAME,8DAAU1I,WAAOzB;AAAvB,AACE,IAAMyE,KACQ,4CAAA,WAAA2F,vDAACnE;AAAD,AAAM,OAAC4D,iCAAiB,iCAAAO,jCAACJ,mDAAiBhK;GAD1C,AAAC4D,kDAAWnC,WAAOzB;AAAjC,AAEE,oBAAI,AAAC4H,eAAK5G,wCAAkByD;AAC1B,OAACpE,2BAAWL;;AAGP,0CAAA,WAAAqK,9CAACjH;AAAD,AAAW,sEAAAiH,/DAACzD,8CAAM0D;qFAFlB7F,lFACA,AAACmC,8CAAMC;;;AAGlB,2BAAA,3BAAM0D,8DAAU9I,WAAOzB;AAAvB,AACE,IAAMyE,KACQ,6CAAA,WAAA+F,xDAACxF;AAAD,AAAO,OAAC6E,iCAAiB,iCAAAW,jCAACR,mDAAiBhK;GAD3C,AAAC4D,kDAAWnC,WAAOzB;AAAjC,AAEE,GAAI,AAACyK,uBAAOzJ,wCAAkByD;AAC5B,OAACpE,2BAAWL;;AACZ,OAACwE,2BAAW,6CAAA,7CAACM,8EAAQ,AAACE,6CAAK5D,kCAAkBqD;;;AAEnD,+BAAA,/BAAMiG,sEAAQjJ,WAAOzB;AAArB,AACE,IAAM2D,QAAM,2BAAA,IAAA,/BAACgH,gBAAOlJ;AAApB,AACE,IAAA2C,qBAAY,AAAChD,iCAAiB,CAAC0C,0DAAAA,yEAAAA,jBAAUH,qDAAAA,/CAAM3D,qDAAAA;AAA/C,AAAA,GAAA,CAAAoE,sBAAA;AAIE,6CAAA,tCAACL;;AAJH,QAAAK,JAAUnD;AAAV,AACE,oBAAI,AAAC6I,4BAAanG;AAChB,4CAAA,rCAACgB,wHAAY1D,EAAE,sCAAA,tCAAC8C;;AAChB,4EAAA,IAAA,zEAACjB,mEAAW7B;;;;AAGpB,8BAAA,9BAAM2J,oEAAQnJ,WAAOzB;AAArB,AACE,IAAM2D,QAAM,2BAAA,IAAA,/BAACgH,gBAAOlJ;IACdoJ,OAAK,AAAA,sIAAA,RAAe7K;IACpBA,cAAQ,uDAAA,vDAAC8K,+CAAO9K;AAFtB,AAGE,IAAAoE,qBAAY,AAAChD,iCAAiB,CAAC0C,0DAAAA,6EAAAA,rBAAUH,yDAAAA,nDAAM3D,yDAAAA;AAA/C,AAAA,GAAA,CAAAoE,sBAAA;AAME,IAAAgH,WAAMP;IAANO,eAAA,EAAA,CAAAA,oBAAAH,oBAAA,AAAAG,aAAA;AAAA,AAAA,QAAAA;KAAA;AACK,6CAAA,tCAACrH;;;KADN;AAEK,OAAC1D,2BAAWL;;;;AAFjB,MAAA,KAAAkL,MAAA,CAAA,mEAAAE;;;;AANF,QAAAhH,JAAUnD;AAAV,AACE,IAAA8J,WAAS,iBAAAC,WAAMH;IAANG,eAAA,EAAA,CAAAA,oBAAAC,oBAAA,AAAAD,aAAA;AAAA,AAAA,QAAAA;KAAA;AACK,OAAClI,mEAAW7B;;;KADjB;AAEK,wCAAA,jCAACwB,+BAAexB,MAAIjB;;;;AAFzB,MAAA,KAAAkL,MAAA,CAAA,mEAAAF;;;;AAAT,AAAA,oBAGE,AAAClB,4BAAanG;AACd,0CAAA,WAAAwH,9CAAC/H;AAAD,AAAW,sEAAA+H,/DAACvE,8CAAM0D;GAAlBS;;AAJFA;;;;AASN,8BAAA,9BAAMM,oEAAQ5J,WAAOzB;AAArB,AACE,OAAC4K,4BAAOnJ,WAAO,sDAAA,gGAAA,tJAACX,8CAAMd;;AAExB,8BAAA,9BAAMsL,oEAAa7J,WAAOzB;AAA1B,AACE,IAAM2D,QAAM,2BAAA,IAAA,/BAACgH,gBAAOlJ;AAApB,AACE,IAAA2C,qBAAY,AAAChD,iCAAiB,AAACoC,0BAAU/B,WAAO8J,mBAASvL;AAAzD,AAAA,GAAA,CAAAoE,sBAAA;AAIE,6CAAA,tCAACL;;AAJH,QAAAK,JAAUnD;AAAV,AACE,IAAAuK,WAASvK;AAAT,AAAA,oBACE,AAAC6I,4BAAanG;AACd,0CAAA,WAAA8H,9CAACrI;AAAD,AAAW,sEAAAqI,/DAAC7E,8CAAM0D;GAAlBkB;;AAFFA;;;;AAKN,uCAAA,vCAAME,sFAAsBjK,WAAOkK,iBAAiBC,uBAAuBC,KAAKnJ;AAAhF,AACE,IAAAoJ,qBAA4B,AAAA,6FAAY,AAAC5J,oDAAaT;AAAtD,AAAA,oBAAAqK;AAAA,yBAAAA,rBAASC;AAAT,AACE,OAAC3I,mCAAS,WAAKsC;AAAL,AAAQ,IAAAsG,WAAkB,AAACE,eAAKH;IAAxBE,WAA4C,AAACC,eAAKxG;AAAlD,AAAA,wGAAAsG,SAAAC,uCAAAD,SAAAC,zJAACN,iDAAAA,oEAAAA;GAAsDC;;AACzE,OAACnL,sEAAcoL,KAAKnJ;;;AAExB,yCAAA,zCAAMyJ,0FAAwB1K;AAA9B,AACE,OAACiK,qCAAqBjK,WAAO2K,kBAAQC,sCAAYC,mCAAmBC;;AAEtE,wCAAA,xCAAMC,wFAAuB/K;AAA7B,AACE,OAACiK,qCAAqBjK,WAAOgL,iBAAOC,qCAAWC,kCAAkBC;;AAEnE,+BAAA,/BAAOC,sEAAcC;AAArB,AACE,GAAI,6CAAA,7CAAC3J,iDAAI,AAACuB,gBAAMoI;AACd,OAAC/I,sCAAW,AAACF,gBAAMiJ;;AACnB,OAACC,uCAAaD;;;AAElB,GAAA,QAAAE,kCAAAC,4CAAAC;AAAA;AAAA,AAAA,oCAAA,iBAAAC,6BAAA,AAAAC,6CAAA,/HAAUQ;IAAVP,6BAAA,AAAAD,6CAAA;IAAAE,6BAAA,AAAAF,6CAAA;IAAAG,iCAAA,AAAAH,6CAAA;IAAAI,0BAAA,AAAApN,4CAAA,2CAAA,4DAAA,gGAAA,gEAAA,iBAAAqN,eAAA;AAAA,AAAA,QAAAA,6CAAAA,+CAAAA;;AAAA,AAAA,YAAAC,kBAAA,AAAAC,+CAAA,kBAAA,qBAA4B,WAAKlM,WAAOzB;AAAZ,AAAqB,OAAC6N,8CAAOpM,WAAOzB;GAAhE,wFAAAwN,wBAAAL,2BAAAE,2BAAAC,2BAAAC;;;AAEA,AAAAK,8EAAA,wFAAA,WAAwCnM,WAAOzB;AAA/C,AAAwD,OAAC8N,iCAAgB,AAACvJ,mDAAY9C,WAAOzB;;AAE7F,AAAA4N,8EAAA,+CAAA,WAAiCnM,WAAOzB;AAAxC,AAAiD,mCAAA,2CAAA,vEAACsC,yHAAkB,CAAA,yFAAA,vBAAIb,lDAAO,AAACmC,6DAAW5D,7EAAS6D;;AACpG,AAAA+J,8EAAA,iDAAA,WAAkCnM,WAAOzB;AAAzC,AAAkD,mCAAA,2CAAA,vEAACsC,yHAAkB,kEAAIb,lDAAO,AAACmC,6DAAW5D,7EAAS6D;;AACrG,AAAA+J,8EAAA,+CAAA,WAAiCnM,WAAOzB;AAAxC,AAAiD,mCAAA,2CAAA,vEAACsC,wHAAkB,CAAA,yFAAA,vBAAIb,lDAAO,AAACmC,6DAAW5D,7EAAS6D;;AACpG,AAAA+J,8EAAA,iDAAA,WAAkCnM,WAAOzB;AAAzC,AAAkD,mCAAA,2CAAA,vEAACsC,wHAAkB,kEAAIb,lDAAO,AAACmC,6DAAW5D,7EAAS6D;;AACrG,AAAA+J,8EAAA,+CAAA,WAAiCnM,WAAOzB;AAAxC,AAAiD,OAAC+D,sCAAW,AAACF,gBAAM,AAACD,kDAAWnC,WAAOzB;;AACvF,AAAA4N,8EAAA,qDAAA,WAAoCnM,WAAOzB;AAA3C,AAAoD,6EAAA,WAAA+N,jFAACtN;AAAD,AAAgB,uDAAAsN,hDAACC,iEAAO,kEAAIvM,lDAAO,AAACmC,6DAAW5D,7EAAS6D;+CAAxD,5CAAgEoK;;AACpH,AAAAL,8EAAA,AAAA,yDAAA,WAAoClN,EAAEA;AAAtC,AAAyC,4CAAA,rCAACiE,wHAAY,4BAAA,2CAAA,kDAAA,zHAACrC,yIAA4B,AAACc,mCAAS8K,cAAIC;;AACjG,AAAAP,8EAAA,AAAA,0DAAA,WAAoClN,EAAEA;AAAtC,AAAyC,4CAAA,rCAACiE,wHAAY,4BAAA,2CAAA,iDAAA,xHAACrC,yIAA4B,AAACc,mCAAS,AAACgL,6CAAKC,cAAIC,aAAGH;;AAE1G,AAAAP,8EAAA,mDAAA,WAAmCnM,WAAOzB;AAA1C,AAAmD,2MAAA,pMAACS,sEAAc,AAAC8D,mDAAY9C,WAAOzB,SAAS,AAAC8N,iCAAgBS;;AAChH,AAAAX,8EAAA,mDAAA,WAAmCnM,WAAOzB;AAA1C,AAAmD,OAACmE,yBAAS1C,WAAOzB;;AACpE,AAAA4N,8EAAA,gDAAA,WAAkCnM,WAAOzB;AAAzC,AAAkD,OAAC4E,wBAAQnD,WAAOzB;;AAClE,AAAA4N,8EAAA,kDAAA,WAAmCnM,WAAOzB;AAA1C,AAAmD,OAAC4E,wBAAQ,qDAAA,rDAAC4J,qGAAkB,AAACtM,oDAAaT,YAAQ,AAACwE,4CAAIZ,eAAK,AAACzB,kDAAWnC,aAAS,AAACgN,iDAAUhN,aAASzB;;AACxJ,AAAA4N,8EAAA,oEAAA,WAAsCnM,WAAOzB;AAA7C,AAAsD,IAAA0O,WAAW,AAAC7K,gBAAM,AAACD,kDAAWnC;IAA9BkN,WAAuC3O;AAAvC,AAAA,0HAAA0O,SAAAC,gDAAAD,SAAAC,pLAAC7K,0DAAAA,6EAAAA;;AACvD,AAAA8J,8EAAA,mDAAA,WAAmCnM,WAAOzB;AAA1C,AAAmD,OAACuF,yBAAS9D,WAAOzB;;AACpE,AAAA4N,8EAAA,yDAAA,WAAsCnM,WAAOzB;AAA7C,AAAsD,OAACqH,4BAAY5F,WAAOzB;;AAC1E,AAAA4N,8EAAA,uDAAA,WAAqCnM,WAAOzB;AAA5C,AAAqD,OAACiF,2BAAWxD,WAAOzB;;AACxE,AAAA4N,8EAAA,yDAAA,WAAsCnM,WAAOzB;AAA7C,AAAsD,OAACwD,0BAAU/B,WAAO8J,mBAASvL;;AACjF,AAAA4N,8EAAA,kEAAA,WAA0CnM,WAAOzB;AAAjD,AAA0D,OAACwD,0BAAU/B,WAAO8J,mBAASvL;;AACrF,AAAA4N,8EAAA,kDAAA,WAAmCnM,WAAOzB;AAA1C,AAAmD,OAACgE,mCAAmBvC,WAAOmN,cAAI5O;;AAClF,AAAA4N,8EAAA,qDAAA,WAAoCnM,WAAOzB;AAA3C,AAAoD,OAAC6M,6BAAa,AAACjJ,kDAAWnC,WAAOzB;;AAErF,AAAA4N,8EAAA,uDAAA,WAAqCnM,WAAOzB;AAA5C,AACE,IAAMiB,IAAE,+HAAIQ,lDAAO,AAACmC,6DAAW5D,7EAAS6D,5BAAM,iBAAAgL,WAAA,7DAAoBzN;IAApB0N,WAAW9O;AAAX,AAAA,0HAAA6O,SAAAC,gDAAAD,SAAAC,pLAAChL,0DAAAA,6EAAAA;;AAA/C,AACE,OAACU,2BAAW,iBAAAuK,WAAA,mFAAS,sCAAA,tCAAChL;AAAV,AAAA,oBACE9C;AAAE,oDAAA8N,7CAACpI,sDAAK1F;;AADV8N;;;;AAGhB,AAAAnB,8EAAA,uDAAA,WAAqCnM,WAAOzB;AAA5C,AACE,IAAMyE,KAAG,4CAAA,WAAAuK,vDAAC/I;AAAD,AAAM,0HAAA+I,gEAAAA,lLAAClL,0DAAAA,oFAAAA,XAAY9D,gEAAAA;GAAS,AAAC4D,kDAAWnC,WAAOzB;AAAxD,AACE,GAAI,AAAC8G,yBAAS9F,wCAAkByD;AAC9B,OAACmC,8CAAMC,oCAAUpC;;AACjB,OAACpE,2BAAWL;;;AAElB,AAAA4N,8EAAA,mDAAA,WAAmClN,EAAEA;AAArC,AAAwC,OAACoN,iCAAgBS;;AACzD,AAAAX,8EAAA,sDAAA,WAAoClN,EAAEA;AAAtC,AAAyCuN;;AACzC,AAAAL,8EAAA,iDAAA,WAAmClN,EAAEA;AAArC,AAAwC,6CAAA,tCAACqD;;AACzC,AAAA6J,8EAAA,0DAAA,WAAsCnM,WAAOzB;AAA7C,AAAsD,OAACiD,4BAAYxB,WAAOzB;;AAC1E,AAAA4N,8EAAA,oDAAA,WAAmCnM,WAAOzB;AAA1C,AAAmD,OAACiP,kDAAmB,AAACrN,yBAASH,WAAOzB;;AACxF,AAAA4N,8EAAA,wDAAA,WAAsCnM,WAAOzB;AAA7C,AACE,OAACuC,2CAAY,AAACC,uGAAM,iBAAM0M,QAAM,AAAChN,oDAAaT,WAAOzB;AAAjC,AAAA,kDAAA,8LAAA,9HACc,kDAAA,qEAAA,vHAACI,4CAAI8O,wIACV,kDAAA,2DAAA,7GAAC9O,4CAAI8O;KACd,AAACtN,yBAASH,WAAOzB;;AACvC,AAAA4N,8EAAA,4DAAA,WAAuClN,EAAEA;AAAzC,AAA4CyO;;AAC5C,AAAAvB,8EAAA,0DAAA,WAAuClN,EAAEA;AAAzC,AAA4C2L;;AAC5C,AAAAuB,8EAAA,0DAAA,WAAsClN,EAAEA;AAAxC,AAA2CgM;;AAC3C,AAAAkB,8EAAA,8EAAA,WAAiDnM,WAAOf;AAAxD,AAA2D,OAACyL,uCAAuB1K;;AACnF,AAAAmM,8EAAA,6EAAA,WAAgDnM,WAAOf;AAAvD,AAA0D,OAAC8L,sCAAsB/K;;AACjF,AAAAmM,8EAAA,sDAAA,WAAoClN,EAAEA;AAAtC,AAAyC0O;;AAEzC,AAAAxB,8EAAA,iDAAA,WAAkCnM,WAAOzB;AAAzC,AAAkD,OAACoJ,8BAAQ3H,WAAOzB;;AAClE,AAAA4N,8EAAA,8DAAA,WAAwCnM,WAAOzB;AAA/C,AAAwD,OAAC2J,8BAAclI,WAAOzB;;AAC9E,AAAA4N,8EAAA,AAAA,0DAAA,WAAoClN,EAAEA;AAAtC,AAAyC2L;;AACzC,AAAAuB,8EAAA,mDAAA,WAAmCnM,WAAOzB;AAA1C,AAAmD,OAACmI,yBAAS1G,WAAOzB;;AACpE,AAAA4N,8EAAA,0DAAA,WAAsCnM,WAAOzB;AAA7C,AAAsD,IAAAqP,WAAW,AAAC3G,+CAAQjH;IAApB6N,WAA4BtP;AAA5B,AAAA,0HAAAqP,SAAAC,gDAAAD,SAAAC,pLAACxL,0DAAAA,6EAAAA;;AACvD,AAAA8J,8EAAA,6EAAA,WAAyCnM,WAAOzB;AAAhD,AAAyD,IAAAuP,WAAW,AAAC7G,+CAAQjH;IAApB+N,WAA4BxP;AAA5B,AAAA,0HAAAuP,SAAAC,gDAAAD,SAAAC,pLAAC1L,0DAAAA,6EAAAA;;AAE1D,AAAA8J,8EAAA,wDAAA,WAAqCnM,WAAOzB;AAA5C,AAAqD,IAAAyP,WAAW,AAAC/G,+CAAQjH;IAApBiO,WAA4B1P;AAA5B,AAAA,0HAAAyP,SAAAC,gDAAAD,SAAAC,pLAAC5L,0DAAAA,6EAAAA;;AACtD,AAAA8J,8EAAA,uDAAA,WAAqCnM,WAAOzB;AAA5C,AAAqD,IAAA2P,WAAW,AAACjH,+CAAQjH;IAApBmO,WAA4B5P;AAA5B,AAAA,0HAAA2P,SAAAC,gDAAAD,SAAAC,pLAAC9L,0DAAAA,6EAAAA;;AACtD,AAAA8J,8EAAA,mEAAA,WAA2CnM,WAAOzB;AAAlD,AAA2D,IAAA6P,WAAW,AAACnH,+CAAQjH;IAApBqO,WAA4B9P;AAA5B,AAAA,0HAAA6P,SAAAC,gDAAAD,SAAAC,pLAAChM,0DAAAA,6EAAAA;;AAE5D,AAAA8J,8EAAA,oDAAA,WAAmCnM,WAAOzB;AAA1C,AAAmD,OAACmK,yBAAS1I,WAAOzB;;AACpE,AAAA4N,8EAAA,oDAAA,WAAoCnM,WAAOzB;AAA3C,AAAoD,OAACmK,yBAAS1I,WAAOzB;;AACrE,AAAA4N,8EAAA,iDAAA,WAAmCnM,WAAOzB;AAA1C,AAAmD,OAACuK,yBAAS9I,WAAOzB;;AACpE,AAAA4N,8EAAA,qDAAA,WAAoCnM,WAAOzB;AAA3C,AAAoD,OAACuK,yBAAS9I,WAAOzB;;AAErE,AAAA4N,8EAAA,gDAAA,WAAiCnM,WAAOzB;AAAxC,AAAiD,OAAC0K,6BAAOjJ,WAAOzB;;AAChE,AAAA4N,8EAAA,gDAAA,WAAiCnM,WAAOzB;AAAxC,AAAiD,OAAC4K,4BAAOnJ,WAAOzB;;AAChE,AAAA4N,8EAAA,+CAAA,WAAiCnM,WAAOzB;AAAxC,AAAiD,OAACqL,4BAAO5J,WAAOzB;;AAChE,AAAA4N,8EAAA,wDAAA,WAAsCnM,WAAOzB;AAA7C,AAAsD,OAACsL,4BAAY7J,WAAOzB;;AAM1E,wCAAA,xCAAO+P,wFAAuBb;AAA9B,AACE,IAAAc,WAAQ,AAAA,+FAAed;AAAvB,AAAA,GAAA,CAAAc,YAAA;AAAA;;AAAA,oCAAAA,7BAA8BnD;;;AAEhC,mCAAA,nCAAOoD,8EACJf,MAAMzN,WAAOzB;AADhB,AAEE,IAAAqC,mBAAI,AAAA,qFAAU6M;AAAd,AAAA,oBAAA7M;AAAAA;;AACI,oBAAU,AAAA,+FAAe6M;AAAzB;;AAAA,AACE,GAAI,EAAA,GAAA,eAAA,SAAA,EAAA,EAAA,WAAA,CAAAgB,gCAAA,0CAAA,KAAA,EAAA,EAAA,gDAAA,AAAAC,wEAAA,QAAA,AAAAA,9CAAYrQ,gFAAAA,5RAAU2B,uEAAAA,mDAAAA,4GAAAA,gFAAAA;AACxB,OAAC/B,2BAAW+B,WAAOzB;;AACnB,OAAC4N,gEAAkBnM,WAAO,sDAAA,tDAACX,8CAAMd,qIAAoCyB;;;;;AAE/E,sCAAA,tCAAO2O,oFAAqBlB,MAAMlP;AAAlC,AACE,IAAAqQ,WAAQ,AAAA,6FAAanB;AAArB,AAAA,GAAA,CAAAmB,YAAA;AAAA;;AAA4B,0HAAAA,wDAAAA,1KAACvM,0DAAAA,4EAAAA,XAAU9D,wDAAAA;;;AAEzC,oCAAA,pCAAOsQ,gFAAmBpB,MAAMzN,WAAOzB;AAAvC,AACE,IAAAuQ,qBAAiB,AAAA,yFAAWrB;AAA5B,AAAA,GAAA,CAAAqB,sBAAA;AAAA;;AAAA,WAAAA,PAAYC;AAAZ,AACE,OAACpN,mCAAS,AAACqN,8CAAOD,KAAK,iBAAAnO,mBAAIrC;AAAJ,AAAA,oBAAAqC;AAAAA;;AAAY,OAACoM,iDAAUhN;;MACpC,iBAAAY,mBAAI,AAAC0N,sCAAsBb;AAA3B,AAAA,oBAAA7M;AAAAA;;AAAA,IAAAA,uBACI,AAAC+N,oCAAoBlB,MAAMlP;AAD/B,AAAA,oBAAAqC;AAAAA;;AAAA,IAAAA,uBAEI,AAAC4N,iCAAiBf,MAAMzN,WAAOzB;AAFnC,AAAA,oBAAAqC;AAAAA;;AAGI,6CAAA,tCAAC0B;;;;;;;AAEnB,0BAAA,1BAAO2M,4DAASjP,WAAOzB;AAAvB,AACE,IAAMkP,QAAM,AAAC1M,uGAAM,AAACmO,yDAAkBlP,YACnB,AAACS,oDAAaT;AADjC,AAEE,IAAAY,mBAAI,AAACiO,kCAAkBpB,MAAMzN,WAAOzB;AAApC,AAAA,oBAAAqC;AAAAA;;AAAA,IAAAA,uBACI,AAAC0N,sCAAsBb;AAD3B,AAAA,oBAAA7M;AAAAA;;AAAA,IAAAA,uBAEI,AAAC+N,oCAAoBlB,MAAMlP;AAF/B,AAAA,oBAAAqC;AAAAA;;AAAA,IAAAA,uBAGI,AAAC4N,iCAAiBf,MAAMzN,WAAOzB;AAHnC,AAAA,oBAAAqC;AAAAA;;AAII,4DAAA,iGAAA,2CAAA,iEAAA,lQAACD,0PAAkCpC,kEACDyB;;;;;;AAM1C,AAAA,4BAAA,oCAAAmP,hEAAM9M;AAAN,AAAA,IAAA+M,WAAA,AAAA;AAAA,AAAA,QAAAA;KAAA;AAAA,OAAA/M,wDAAA,CAAA,UAAA;;;KAAA;AAAA,OAAAA,wDAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;;AAAA,MAAA,KAAAoH,MAAA,CAAA,8DAAA,AAAA;;;;;AAAA,CAAA,0DAAA,1DAAMpH,qEACFgN;AADJ,AAEG,6EAAA,tEAACC,wDAAUD;;;AAFd,CAAA,0DAAA,1DAAMhN,qEAGFgN,cAAQ9Q;AAHZ,AAIG,oBAAI,AAAA,oHAAWA;AAEb,OAAC0Q,wBAAQ,AAACM,gDAASF,cAAQ9Q,SAASA;;AACpC,iGAAA,+DAAA,WAAAiR,pKAACC,mBAAU,AAACF,gDAASF,cAAQ9Q;AAA7B,AAAkD,+BAAAiR,xBAACP,yCAAU1Q;;;;;AAPlE,CAAA,oDAAA,pDAAM8D;;AAAN,AASA,AAAA,2BAAA,mCAAA8M,9DAAMlH;AAAN,AAAA,IAAAyH,WAAA,AAAA;AAAA,AAAA,QAAAA;KAAA;AAAA,OAAAzH,uDAAA,CAAA,UAAA;;;KAAA;AAAA,OAAAA,uDAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;;AAAA,MAAA,KAAAwB,MAAA,CAAA,8DAAA,AAAA;;;;;AAAA,CAAA,yDAAA,zDAAMxB,oEACF4H;AADJ,AAEG,mFAAA,5EAACC,uDAASD;;;AAFb,CAAA,yDAAA,gCAAAF,zFAAM1H,oEAGF4H;AAHJ,AAAA,IAAAD,aAAAD;IAAAC,iBAAA,AAAAlR,4BAAAkR;cAAAA,VAGwDrR;WAHxD,AAAAI,4CAAAiR,eAAA,lEAG2B/P;WAH3B,AAAAlB,4CAAAiR,eAAA,qDAAA,vHAGgCG;AAHhC,AAIG,IAAM9O,MAAI,EAAI,AAAC+O,+CAAeH,uBAAgBA,qBAAe,AAACP,wDAAUO,qBAAetR;AAAvF,AACE,OAAC0R,kCAAU,AAACC,uCAAajP,IAAI,AAACrB,wBAAQC,MAAMkQ;;;AALjD,CAAA,mDAAA,nDAAM9H;;AAAN,AAOA,AAAA,yBAAA,iCAAAkH,1DAAMiB;AAAN,AAAA,IAAAD,WAAA,AAAA;AAAA,AAAA,QAAAA;KAAA;AAAA,OAAAC,qDAAA,CAAA,UAAA;;;KAAA;AAAA,OAAAA,qDAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;;AAAA,MAAA,KAAA3G,MAAA,CAAA,8DAAA,AAAA;;;;;AAAA,CAAA,uDAAA,vDAAM2G,kEACFP;AADJ,AAEG,iFAAA,1EAACU,qDAAOV;;;AAFX,CAAA,uDAAA,gCAAAQ,vFAAMD,kEAGFP;AAHJ,AAAA,IAAAS,aAAAD;IAAAC,iBAAA,AAAA5R,4BAAA4R;cAAAA,VAGwD/R;WAHxD,AAAAI,4CAAA2R,eAAA,lEAG2BzQ;WAH3B,AAAAlB,4CAAA2R,eAAA,qDAAA,vHAGgCP;AAHhC,AAIG,IAAM9O,MAAI,EAAI,AAAC+O,+CAAeH,uBAAgBA,qBAAe,AAACP,wDAAUO,qBAAetR;AAAvF,yDAEO,4CAAA,WAAAkS,iBAAAC,xEAAClM,zDAED,OAACoM,6CAAKb;AAFN,AAAM,OAACE,kCAAU,2CAAAQ,iBAAAC,5DAACR,uCAAajP;mFAD/B,AAACuP,kDAAwBT,lIAEpB,AAACY,iDAAuB,AAAC/Q,wBAAQC;;;AAPhD,CAAA,iDAAA,jDAAMuQ;;AAAN,AAcA,AAAA,mCAAA,2CAAAjB,9EAAM2B;AAAN,AAAA,IAAAD,WAAA,AAAA;AAAA,AAAA,QAAAA;KAAA;AAAA,OAAAC,+DAAA,CAAA,UAAA;;;KAAA;AAAA,OAAAA,+DAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;;AAAA,MAAA,KAAArH,MAAA,CAAA,8DAAA,AAAA;;;;;AAAA,CAAA,iEAAA,jEAAMqH,4EACFzB;AADJ,AACa,oFAAA,7EAAC4B,+DAAiB5B;;;AAD/B,CAAA,iEAAA,yBAAA0B,1FAAMD,4EAEFzB;AAFJ,AAAA,IAAA2B,aAAAD;IAAAC,iBAAA,AAAAtS,4BAAAsS;cAAAA,VAE8DzS;yBAF9D,AAAAI,4CAAAqS,eAAA,mGAAA,nLAEqBE;AAFrB,AAGG,IAAMlR,aAAO,AAACuP,gDAASF,cAAQ9Q;IACzB4S,QAAM,WAAKnR;AAAL,AACE,IAAAoR,aAA6B,AAACrJ,0BAAiB/H;IAA/CoR,iBAAA,AAAA1S,4BAAA0S;YAAA,AAAAzS,4CAAAyS,eAAA,nEAAcC;aAAd,AAAA1S,4CAAAyS,eAAA,pEAAoBE;IACdC,kBAAgB,AAACjC,wDAAU+B,MAAM9S;IACjCiT,mBAAiB,AAAC1O,mDAAYwO,OAAO/S;IACrCkT,WAAS,WAAKzP,EAAE0P;AAAP,AAAa,IAAAC,WAAkB,AAACxM,8CAAMnD,EAAE0P;AAA3B,AAAA,wGAAAC,uCAAAA,vIAACH,iDAAAA,2DAAAA;;AAH7B,AAIE,kBAAKxP;AAAL,AACE,IAAA4P,+DAAmC,4CAAA,2GAAA,WAAAG,lKAACC,+HAAeT,jLAChB,AAACU,+BAAkBf;AADnB,AAAkC,kBAAAa,XAACN,SAASzP;;IAA/E4P,iBAAA,AAAAlT,4BAAAkT;aAAA,AAAAjT,4CAAAiT,eAAA,pEAAcC;aAAd,AAAAlT,4CAAAiT,eAAA,pEAAqBE;IAEfI,WAAS,gBAAA,AAAA,2FAAIJ,3GAAiB1P;AAFpC,AAGE,GAAU,AAAOyP;AAAjB;;AAAA,AACE,IAAMM,gBAAc,AAACC,iDAAUf,MAAMa;IAC/BG,WAAS,iCAAA,KAAA,pBAAUF,oBACR,iBAAA,AAAK,OAAChN,8CAAMnD,EAAEkQ;gBAAd,GAAA,CAAAI,kBAAwD7I;AAAxD,QAAA6I,JAAkE9J;AAAlE,AAAoEA;;AAApE,AAAA,MAAA8J;;;;IACXC,iBAAe,iCAAA,KAAA,pBAAUJ,oBAAc,AAACC,iDAAUd,OAAOe;AAH/D,AAIE,IAAAG,WAAQV;IAARU,eAAA,2MAAAA,zLACEL,eAAc,8CAAAK,SAAA,vDAACnT,2JAAsB8S;IADvCK,eAAA,oNAAAA,lMAEED,gBAAe,8CAAAC,aAAA,3DAACnT,kKAAuBkT;AAFzC,AAAA,oBAGE,AAACE,qBAAWZ;sDAAY,+CAAAW,aAAA,5DAACE,qHAAeD,3KAChB,iMAAA,1LAACpJ;;AAJ3BmJ;;;;;AAfxB,AAoBE,IAAAG,cAAOE;IAAPD,cAAS,AAACxG,8CAAOpM;AAAjB,AAAA,oBAAA,CAAA2S,4CAAAA,0CAAA,iDAAAC,eAAAD,sBAAA,iDAAAC;AACM,OAACzB,MAAMnR;;AADb,oBAAA,CAAA2S,4CAAAA,0CAAA,8DAAAC,eAAAD,sBAAA,8DAAAC;AAEY,IAAME,WAAS,4CAAA,WAAAC,vDAACvO;AAAD,AAAM,sEAAAuO,/DAAC9B,gFAAmB1S;GAAS,AAACyU,qBAAYhT;AAA/D,AACE,kBAAKiT;AAAL,qBAAsB,6CAAA,WAAAC,xDAAC3P,rBAAa,OAAC4P;AAAf,AAAO,QAAAD,iDAAAA,oDAAAA,LAAGD,gCAAAA;GAAnBH;;;AACzB,4DAAA,yHAAA,2CAAA,zNAACnS,8QAA0C,AAACyS,iBAAQpT;;;;;AA3B3D,CAAA,2DAAA,3DAAM8Q;;AAAN,AA6BA,AAAA,wBAAA,gCAAA3B,xDAAMmE;AAAN,AAAA,IAAAD,WAAA,AAAA;AAAA,AAAA,QAAAA;KAAA;AAAA,OAAAC,oDAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;KAAA;AAAA,OAAAA,oDAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;;AAAA,MAAA,KAAA7J,MAAA,CAAA,8DAAA,AAAA;;;;;AAAA,CAAA,sDAAA,tDAAM6J,iEACFjE,cAAQrN;AADZ,AACe,2EAAA,pEAACuR,oDAAMlE,cAAQrN;;;AAD9B,CAAA,sDAAA,tDAAMsR,iEAEFjE,cAAQrN,EAAEzD;AAFd,AAGG,IAAMyB,aAAO,AAACuP,gDAASF,cAAQ9Q;AAA/B,AACE,OAAC6T,iDAAU,sCAAA,WAAAoB,jDAACC,2BAAkBzT;AAAnB,AAA2B,qDAAAwT,iBAAA,/DAACnU,+JAA6ByR;IAAmB9O;;;AAJ5F,CAAA,gDAAA,hDAAMsR;;AAAN","names":["malli$generator$Generator$_generator$dyn","x__5393__auto__","m__5394__auto__","malli.generator/-generator","goog/typeOf","m__5392__auto__","cljs.core/missing-protocol","malli.generator/Generator","this","options","p__52326","map__52327","cljs.core/--destructure-map","cljs.core.get","malli.generator/-never-gen","original-generator-schema","_options","cljs.core/with-meta","clojure.test.check.generators.such_that","_","cljs.core.ex_info","malli.core.form","G__52329","cljs.core.assoc","clojure.test.check.generators/any","malli.generator/-unreachable-gen?","g","cljs.core/meta","cljs.core/boolean","malli.generator/-not-unreachable","malli.generator/-random","seed","clojure.test.check.random.make_random","malli.generator/-recur","schema","cljs.core.println","malli.generator/-maybe-recur","malli.generator/-min-max","map__52377","min","max","gen-min","gen-max","malli.core.properties","and__5043__auto__","malli.core._fail_BANG_","or__5045__auto__","malli.generator/-double-gen","clojure.test.check.generators/double*","cljs.core.merge","malli.generator/gen-vector-min","gen","G__52394","p1__52393#","clojure.test.check.generators/sized","clojure.test.check.generators.vector","cljs.core.vary_meta","cljs.core/assoc","malli.generator/-string-gen","map__52395","cljs.core._EQ_","clojure.test.check.generators/fmap","clojure.string/join","clojure.test.check.generators/char-alphanumeric","clojure.test.check.generators/string-alphanumeric","malli.generator/-coll-gen","f","map__52397","child","malli.core.children","cljs.core/first","malli.generator/generator","clojure.test.check.generators/return","malli.generator/-coll-distinct-gen","map__52401","clojure.test.check.generators.vector_distinct","malli.generator/-and-gen","temp__5806__auto__","G__52403","G__52404","malli.core.validator","malli.generator/gen-one-of","gs","cljs.core/count","clojure.test.check.generators/one-of","malli.generator/-or-gen","cljs.core/not-empty","cljs.core.into","p1__52408#","cljs.core.keep","malli.generator/-multi-gen","p1__52409#","G__52410","G__52411","cljs.core/last","malli.core.entries","malli.generator/-map-gen","entries","value-gen","k","s","G__52415","v","gens-req","p1__52412#","cljs.core.remove","cljs.core.map","p__52420","vec__52421","cljs.core.nth","gen-opt","p1__52413#","cljs.core.filter","p__52485","vec__52486","G__52492","cljs.core.conj","cljs.core.apply","clojure.test.check.generators/tuple","cljs.core/not-any?","p__52499","vec__52500","req","opt","cljs.core.concat","clojure.test.check.generators.tuple","malli.generator/-map-of-gen","map__52505","vec__52506","k-gen","v-gen","p1__52503#","opts","cljs.core/some","p1__52504#","malli.generator/-identify-ref-schema","malli.core/-options","malli.core._registry","malli.registry/-schemas","malli.core/-ref","malli.generator/-ref-gen","ref-id","cljs.core/force","cljs.core.get_in","scalar-ref-gen","cljs.core/Delay","dschema","malli.core.deref","G__52523","G__52524","G__52525","cljs.core/assoc-in","cljs.core/realized?","p1__52521#","clojure.test.check.generators/recursive-gen","G__52526","G__52527","malli.generator/-=>-gen","output-generator","G__52531","G__52532","malli.core/-function-info","malli.core._instrument","malli.generator/generate","malli.generator/-function-gen","p1__52533#","malli.generator/-regex-generator","malli.core/-regex-op?","G__52545","malli.generator/entry->schema","e","cljs.core/vector?","malli.generator/-cat-gen","p1__52551#","p1__52552#","cljs.core/concat","malli.generator/-alt-gen","p1__52553#","cljs.core/every?","malli.generator/-?-gen","malli.core/-get","malli.generator/-*-gen","mode","cljs.core.dissoc","G__52574","G__52575","cljs.core/Keyword","js/Error","p1__52570#","G__52571","malli.generator/-+-gen","malli.generator/-repeat-gen","cljs.core/identity","G__52599","p1__52581#","malli.generator/-qualified-ident-gen","mk-value-with-ns","value-with-ns-gen-size","pred","temp__5802__auto__","namespace-unparsed","G__52628","G__52629","cljs.core/name","malli.generator/-qualified-keyword-gen","cljs.core/keyword","clojure.test.check.generators/keyword","cljs.core/qualified-keyword?","clojure.test.check.generators/keyword-ns","malli.generator/-qualified-symbol-gen","cljs.core/symbol","clojure.test.check.generators/symbol","cljs.core/qualified-symbol?","clojure.test.check.generators/symbol-ns","malli.generator/gen-elements","es","clojure.test.check.generators/elements","js/malli","js/malli.generator","js/malli.generator.-schema-generator","method-table__5642__auto__","cljs.core.atom","prefer-table__5643__auto__","method-cache__5644__auto__","cached-hierarchy__5645__auto__","hierarchy__5646__auto__","fexpr__52686","cljs.core/MultiFn","cljs.core.symbol","malli.generator/-schema-generator","malli.core.type","cljs.spec.gen.alpha/gen-for-pred","p1__52705#","cljs.core.not_EQ_","clojure.test.check.generators/any-printable","cljs.core/inc","clojure.test.check.generators/nat","cljs.core.comp","cljs.core/dec","cljs.core/-","cljs.core/any?","malli.core.into_schema","malli.core.options","G__52734","G__52735","cljs.core/set","G__52773","G__52774","G__52776","p1__52780#","clojure.test.check.generators/large-integer*","props","clojure.test.check.generators/boolean","clojure.test.check.generators/uuid","G__52919","G__52920","G__52925","G__52926","G__52931","G__52932","G__52934","G__52935","G__52942","G__52944","malli.generator/-create-from-elements","G__52961","malli.generator/-create-from-gen","cljs.core/PROTOCOL_SENTINEL","cljs.core/native-satisfies?","malli.generator/-create-from-schema","G__52980","malli.generator/-create-from-fmap","temp__5808__auto__","fmap","malli.core.eval","malli.generator/-create","malli.core.type_properties","var_args","G__52991","?schema","malli.generator.generator","malli.core.schema","p1__52989#","malli.core/-cached","G__52993","p__52994","map__52995","?gen-or-schema","malli.generator.generate","size","clojure.test.check.generators/generator?","clojure.test.check.rose-tree/root","clojure.test.check.generators/call-gen","G__53005","malli.generator/sample","p__53007","map__53008","malli.generator.sample","clojure.test.check.generators/make-size-range-seq","p1__52998#","p2__52999#","clojure.test.check.generators/lazy-random-states","cljs.core.take","G__53023","malli.generator/function-checker","p__53027","map__53028","malli.generator.function_checker","=>iterations","check","map__53030","input","output","input-generator","output-validator","validate","args","G__53035","map__53036","result","shrunk","p1__53014#","clojure.test.check.properties/for-all*","clojure.test.check/quick-check","smallest","explain-input","malli.core.explain","response","e53041","explain-output","G__53042","cljs.core/ex-message","cljs.core.update","pred__53045","expr__53046","cljs.core/=","checkers","p1__53018#","malli.core/-children","x","p1__53019#","cljs.core/seq","malli.core/-type","G__53050","malli.generator/check","malli.generator.check","p1__53048#","malli.core/-update-options"],"sourcesContent":[";; See also `malli.generator-ast` for viewing generators as data\n(ns malli.generator\n  (:require [clojure.spec.gen.alpha :as ga]\n            [clojure.string :as str]\n            [clojure.test.check :as check]\n            [clojure.test.check.generators :as gen]\n            [clojure.test.check.properties :as prop]\n            [clojure.test.check.random :as random]\n            [clojure.test.check.rose-tree :as rose]\n            [malli.core :as m]\n            [malli.registry :as mr]\n            #?(:clj [borkdude.dynaload :as dynaload])))\n\n(declare generator generate -create)\n\n(defprotocol Generator\n  (-generator [this options] \"returns generator for schema\"))\n\n;;\n;; generators\n;;\n\n\n;; # Notes for implementors\n;;\n;; For the most part, -schema-generator is a pretty direct translation from schemas to generators.\n;; However, the naive implementation of recursive ref's (creating a generator for the dereferenced ref\n;; and cutting off the generation at a certain depth) tends to create exponentially large test cases.\n;;\n;; We use a more sophisticated algorithm to achieve linearly sized test cases with recursive refs.\n;; The next section describes the strategy implementors should use to participate in this improved behavior.\n;; The theory behind this strategy is described in the section below (\"Approach for recursive generators\").\n;;\n;; ## Implementation strategy\n;;\n;; Say you have a composite schema you want to generate values for. You should extend `-schema-generator` and\n;; call `generator` recursively on the `m/children`. Now, for every child generator, you need to consider the case\n;; that the child generator generates no values, and how this might change the final generator.\n;;\n;; Use `-unreachable-gen?` to test whether your child generator generates no values (we'll call this an \"unreachable\" schema/generator).\n;; If your parent generator cannot generate values, use `-never-gen` to return an unreachable generator.\n;; \n;; Here are a few examples---compare them with the logic in their respective -schema-generator methods:\n;;   [:maybe M] would generate like :nil if M were unreachable.\n;;   [:map [:a M]] would itself be unreachable if M were unreachable.\n;;   [:map [:a {:optional true} M]] would generate like [:map] if M were unreachable.\n;;   [:vector M] would generate like [:= []] if M were unreachable.\n;;   [:vector {:min 1} M] would itself be unreachable if M were unreachable.\n\n(defn -never-gen\n  \"Return a generator of no values that is compatible with -unreachable-gen?.\"\n  [{::keys [original-generator-schema] :as _options}]\n  (with-meta (gen/such-that (fn [_]\n                              (throw (ex-info\n                                      (str \"Cannot generate values due to infinitely expanding schema: \"\n                                           (if original-generator-schema\n                                             (m/form original-generator-schema)\n                                             \"<no schema form>\"))\n                                      (cond-> {}\n                                        original-generator-schema (assoc :schema (m/form original-generator-schema))))))\n                            gen/any)\n             {::never-gen true\n              ::original-generator-schema original-generator-schema}))\n\n(defn -unreachable-gen?\n  \"Returns true iff generator g generators no values.\"\n  [g] (-> (meta g) ::never-gen boolean))\n\n(defn -not-unreachable [g] (when-not (-unreachable-gen? g) g))\n\n(defn- -random [seed] (if seed (random/make-random seed) (random/make-random)))\n\n(defn ^:deprecated -recur [schema options]\n  (println (str `-recur \" is deprecated, please update your generators. See instructions in malli.generator.\"))\n  [true options])\n\n(defn ^:deprecated -maybe-recur [schema options]\n  (println (str `-maybe-recur \" is deprecated, please update your generators. See instructions in malli.generator.\"))\n  options)\n\n(defn -min-max [schema options]\n  (let [{:keys [min max] gen-min :gen/min gen-max :gen/max} (m/properties schema options)]\n    (when (and min gen-min (< gen-min min))\n      (m/-fail! ::invalid-property {:key :gen/min, :value gen-min, :min min}))\n    (when (and max gen-max (> gen-max max))\n      (m/-fail! ::invalid-property {:key :gen/max, :value gen-min, :max min}))\n    {:min (or gen-min min)\n     :max (or gen-max max)}))\n\n(defn- -double-gen [options] (gen/double* (merge {:infinite? false, :NaN? false} options)))\n\n(defn- gen-vector-min [gen min options]\n  (cond-> (gen/sized #(gen/vector gen min (+ min %)))\n    (::generator-ast options) (vary-meta assoc ::generator-ast\n                                         {:op :vector-min\n                                          :generator gen\n                                          :min min})))\n\n(defn- -string-gen [schema options]\n  (let [{:keys [min max]} (-min-max schema options)]\n    (cond\n      (and min (= min max)) (gen/fmap str/join (gen/vector gen/char-alphanumeric min))\n      (and min max) (gen/fmap str/join (gen/vector gen/char-alphanumeric min max))\n      min (gen/fmap str/join (gen-vector-min gen/char-alphanumeric min options))\n      max (gen/fmap str/join (gen/vector gen/char-alphanumeric 0 max))\n      :else gen/string-alphanumeric)))\n\n(defn- -coll-gen [schema f options]\n  (let [{:keys [min max]} (-min-max schema options)\n        child (-> schema m/children first)\n        gen (generator child options)]\n    (if (-unreachable-gen? gen)\n      (if (<= (or min 0) 0 (or max 0))\n        (gen/fmap f (gen/return []))\n        (-never-gen options))\n      (gen/fmap f (cond\n                    (and min (= min max)) (gen/vector gen min)\n                    (and min max) (gen/vector gen min max)\n                    min (gen-vector-min gen min options)\n                    max (gen/vector gen 0 max)\n                    :else (gen/vector gen))))))\n\n(defn- -coll-distinct-gen [schema f options]\n  (let [{:keys [min max]} (-min-max schema options)\n        child (-> schema m/children first)\n        gen (generator child options)]\n    (gen/fmap f (if (-unreachable-gen? gen)\n                  (if (<= (or min 0) 0 (or max 0))\n                    (gen/return [])\n                    (-never-gen options))\n                  (gen/vector-distinct gen {:min-elements min, :max-elements max, :max-tries 100})))))\n\n(defn -and-gen [schema options]\n  (if-some [gen (-not-unreachable (-> schema (m/children options) first (generator options)))]\n    (gen/such-that (m/validator schema options) gen 100)\n    (-never-gen options)))\n\n(defn- gen-one-of [gs]\n  (if (= 1 (count gs))\n    (first gs)\n    (gen/one-of gs)))\n\n(defn -or-gen [schema options]\n  (if-some [gs (not-empty\n                (into [] (keep #(-not-unreachable (generator % options)))\n                      (m/children schema options)))]\n    (gen-one-of gs)\n    (-never-gen options)))\n\n(defn -multi-gen [schema options]\n  (if-some [gs (not-empty\n                (into [] (keep #(-not-unreachable (generator (last %) options)))\n                      (m/entries schema options)))]\n    (gen-one-of gs)\n    (-never-gen options)))\n\n(defn -map-gen [schema options]\n  (let [entries (m/entries schema)\n        value-gen (fn [k s] (let [g (generator s options)]\n                              (cond->> g\n                                (-not-unreachable g)\n                                (gen/fmap (fn [v] [k v])))))\n        gens-req (->> entries\n                      (remove #(-> % last m/properties :optional))\n                      (map (fn [[k s]] (value-gen k s))))\n        gen-opt (->> entries\n                     (filter #(-> % last m/properties :optional))\n                     (map (fn [[k s]] (let [g (-not-unreachable (value-gen k s))]\n                                        (gen-one-of (cond-> [(gen/return nil)]\n                                                      g (conj g))))))\n                     (apply gen/tuple))]\n    (if (not-any? -unreachable-gen? gens-req)\n      (gen/fmap (fn [[req opt]] (into {} (concat req opt))) (gen/tuple (apply gen/tuple gens-req) gen-opt))\n      (-never-gen options))))\n\n(defn -map-of-gen [schema options]\n  (let [{:keys [min max]} (-min-max schema options)\n        [k-gen v-gen :as gs] (map #(generator % options) (m/children schema options))\n        opts (cond\n               (and min (= min max)) {:num-elements min}\n               (and min max) {:min-elements min :max-elements max}\n               min {:min-elements min}\n               max {:max-elements max}\n               :else {})]\n    (if (some -unreachable-gen? gs)\n      (if (= 0 (or min 0) (or max 0))\n        (gen/return {})\n        (-never-gen options))\n      (gen/fmap #(into {} %) (gen/vector-distinct (gen/tuple k-gen v-gen) opts)))))\n\n#?(:clj\n   (defn -re-gen [schema options]\n     ;; [com.gfredericks/test.chuck \"0.2.10\"+]\n     (if-let [string-from-regex @(dynaload/dynaload 'com.gfredericks.test.chuck.generators/string-from-regex {:default nil})]\n       (let [re (or (first (m/children schema options)) (m/form schema options))]\n         (string-from-regex (re-pattern (str/replace (str re) #\"^\\^?(.*?)(\\$?)$\" \"$1\"))))\n       (m/-fail! :test-chuck-not-available))))\n\n;; # Approach for recursive generators\n;;\n;; `-ref-gen` is the only place where recursive generators can be created, and we use `gen/recursive-gen`\n;; to handle the recursion. The challenge is that gen/recursive-gen requires _two_ arguments: the base\n;; case (scalar gen) and the recursive case (container gen). We need to automatically split the schema argument into\n;; these two cases.\n;;\n;; The main insight we use is that a base case for the schema cannot contain recursive references to itself.\n;; A particularly useful base case is simply to \"delete\" all recursive references. To simulate this, we have the concept of\n;; an \"unreachable\" generator, which represents a \"deleted\" recursive reference.\n;;\n;; For infinitely expanding schemas, this will return an unreachable generator--when the base case generator is used,\n;; the error message in `-never-gen` will advise users that their schema is infinite.\n;; \n;; \n;; Examples of base cases of some recursive schemas:\n;;\n;; Schema:    [:schema {:registry {::cons [:maybe [:vector [:tuple pos-int? [:ref ::cons]]]]}} ::cons]\n;; Base case: [:schema {:registry {::cons [:nil                                            ]}} ::cons]\n;;\n;; Schema:    [:schema\n;;             {:registry {::ping [:tuple [:= \"ping\"] [:maybe [:ref ::pong]]]\n;;                         ::pong [:tuple [:= \"pong\"] [:maybe [:ref ::ping]]]}}\n;;             ::ping]\n;; Base case: [:schema\n;;             {:registry {::ping [:tuple [:= \"ping\"] [:maybe [:ref ::pong]]]\n;;                         ::pong [:tuple [:= \"pong\"] :nil                  ]}}\n;;             ::ping]\n;;\n;; Once we have the base case, we first need determine if the schema is recursive---it's recursive\n;; if more than one recursive reference was successfully \"deleted\" while creating the base case (see below for how we determine recursive references).\n;; We can then construct the recursive case by providing `gen/recursive-gen` the base case\n;; (this is why this particular base case is so useful) and then propagate the (smaller) generator\n;; supplied by `gen/recursive-gen` to convert recursive references.\n\n;; ## Identifying schema recursion\n;; \n;; Refs are uniquely identified by their paired name and scope. If we see a ref with the\n;; same name and scope as another ref we've dereferenced previously, we know that this is a recursion\n;; point back to the previously seen ref. The rest of this section explains why.\n;; \n;; Refs resolve via dynamic scope, which means its dereferenced value is the latest binding found\n;; while expanding the schema until the point of finding the ref.\n;; This makes the (runtime) scope at the ref's location part of a ref's identity---if the scope\n;; is different, then it's (possibly) not the same ref because scope determines how schemas\n;; transitively expand.\n;;\n;; To illustrate why a ref's name is an insufficient identifier, here is a schema that is equivalent to `[:= 42]`:\n;; \n;;   [:schema {:registry {::a [:schema {:registry {::a [:= 42]}}\n;;                             ;; (2)\n;;                             [:ref ::a]]}}\n;;    ;; (1)\n;;    [:ref ::a]]\n;;\n;; If we identify refs just by name, we would have incorrectly detected (2) to be an (infinitely expanding) recursive\n;; reference.\n;;\n;; In studying the previous example, we might think that since (1) and (2) deref to different schemas, it might sufficient to identify refs just by their derefs.\n;; Unfortunately this just pushes the problem elsewhere.\n;;\n;; For example, here is another schema equivalent to `[:= 42]`:\n;;\n;;   [:schema {:registry {::a [:ref ::b] ;; (2)\n;;                        ::b [:schema {:registry {::a [:ref ::b] ;; (4)\n;;                                                 ::b [:= 42]}}\n;;                             ;; (3)\n;;                             [:ref ::a]]}}\n;;    ;; (1)\n;;    [:ref ::a]]\n;;\n;; If we identified ::a by its deref, it would look like (3) deref'ing to (4)\n;; is a recursion point after witnessing (1) deref'ing to (2), since (2) == (4). Except this\n;; is wrong since it's a different ::b at (2) and (4)! OTOH, if we identified (2) and (4) with their\n;; dynamic scopes along with their form, they would be clearly different. Indeed, this\n;; is another way to identify refs: pairing their derefs with their deref's scopes.\n;; It is slightly more direct to use the ref's direct name and scope, which is why\n;; we choose that identifier. The more general insight is that any schema is identified by its form+scope\n;; (note: but only after trimming the scope of irrelevant bindings, see next pararaph).\n;; That insight may be useful for detecting recursion at places other than refs.\n;; \n;; Ref identifiers could be made smarter by trimming irrelevant entries in identifying scope.\n;; Not all scope differences are relevant, so generators may expand more than strictly necessary\n;; in the quest to find the \"same\" ref schema again. It could skip over refs that generate exactly the\n;; same values, but their scopes are uninterestingly different (eg., unused bindings are different).\n;;\n;; For example, the following schema is recursive \"in spirit\" between (1) and (2), but since ::b\n;; changes, the scope will differ, so the recursion will be detected between (2) and itself instead\n;; (where the scope is constant):\n;;\n;;   [:schema {:registry {::a [:schema {:registry {::b :boolean}}\n;;                             ;; (2)\n;;                             [:or [:ref ::a] [:ref ::b]]]}}\n;;    [:schema {:registry {::b :int}}\n;;     ;; (1)\n;;     [:or [:ref ::a] [:ref ::b]]]]\n\n(defn- -identify-ref-schema [schema]\n  {:scope (-> schema m/-options m/-registry mr/-schemas)\n   :name (m/-ref schema)})\n\n(defn -ref-gen [schema options]\n  (let [ref-id (-identify-ref-schema schema)]\n    (or (force (get-in options [::rec-gen ref-id]))\n        (let [scalar-ref-gen (delay (-never-gen options))\n              dschema (m/deref schema)]\n          (cond->> (generator dschema (assoc-in options [::rec-gen ref-id] scalar-ref-gen))\n            (realized? scalar-ref-gen) (gen/recursive-gen\n                                        #(generator dschema (assoc-in options [::rec-gen ref-id] %))))))))\n\n(defn -=>-gen [schema options]\n  (let [output-generator (generator (:output (m/-function-info schema)) options)]\n    (gen/return (m/-instrument {:schema schema} (fn [& _] (generate output-generator options))))))\n\n(defn -function-gen [schema options]\n  (gen/return (m/-instrument {:schema schema, :gen #(generate % options)} options)))\n\n(defn -regex-generator [schema options]\n  (if (m/-regex-op? schema)\n    (generator schema options)\n    (let [g (generator schema options)]\n      (cond-> g\n        (-not-unreachable g) gen/tuple))))\n\n(defn- entry->schema [e] (if (vector? e) (get e 2) e))\n\n(defn -cat-gen [schema options]\n  (let [gs (->> (m/children schema options)\n                (map #(-regex-generator (entry->schema %) options)))]\n    (if (some -unreachable-gen? gs)\n      (-never-gen options)\n      (->> gs\n           (apply gen/tuple)\n           (gen/fmap #(apply concat %))))))\n\n(defn -alt-gen [schema options]\n  (let [gs (->> (m/children schema options)\n                (keep #(-regex-generator (entry->schema %) options)))]\n    (if (every? -unreachable-gen? gs)\n      (-never-gen options)\n      (gen-one-of (into [] (keep -not-unreachable) gs)))))\n\n(defn -?-gen [schema options]\n  (let [child (m/-get schema 0 nil)]\n    (if-some [g (-not-unreachable (generator child options))]\n      (if (m/-regex-op? child)\n        (gen/one-of [g (gen/return ())])\n        (gen/vector g 0 1))\n      (gen/return ()))))\n\n(defn -*-gen [schema options]\n  (let [child (m/-get schema 0 nil)\n        mode (::-*-gen-mode options :*)\n        options (dissoc options ::-*-gen-mode)]\n    (if-some [g (-not-unreachable (generator child options))]\n      (cond->> (case mode\n                 :* (gen/vector g)\n                 :+ (gen-vector-min g 1 options))\n        (m/-regex-op? child)\n        (gen/fmap #(apply concat %)))\n      (case mode\n        :* (gen/return ())\n        :+ (-never-gen options)))))\n\n(defn -+-gen [schema options]\n  (-*-gen schema (assoc options ::-*-gen-mode :+)))\n\n(defn -repeat-gen [schema options]\n  (let [child (m/-get schema 0 nil)]\n    (if-some [g (-not-unreachable (-coll-gen schema identity options))]\n      (cond->> g\n        (m/-regex-op? child)\n        (gen/fmap #(apply concat %)))\n      (gen/return ()))))\n\n(defn -qualified-ident-gen [schema mk-value-with-ns value-with-ns-gen-size pred gen]\n  (if-let [namespace-unparsed (:namespace (m/properties schema))]\n    (gen/fmap (fn [k] (mk-value-with-ns (name namespace-unparsed) (name k))) value-with-ns-gen-size)\n    (gen/such-that pred gen)))\n\n(defn -qualified-keyword-gen [schema]\n  (-qualified-ident-gen schema keyword gen/keyword qualified-keyword? gen/keyword-ns))\n\n(defn -qualified-symbol-gen [schema]\n  (-qualified-ident-gen schema symbol gen/symbol qualified-symbol? gen/symbol-ns))\n\n(defn- gen-elements [es]\n  (if (= 1 (count es))\n    (gen/return (first es))\n    (gen/elements es)))\n\n(defmulti -schema-generator (fn [schema options] (m/type schema options)) :default ::default)\n\n(defmethod -schema-generator ::default [schema options] (ga/gen-for-pred (m/validator schema options)))\n\n(defmethod -schema-generator :> [schema options] (-double-gen {:min (-> schema (m/children options) first inc)}))\n(defmethod -schema-generator :>= [schema options] (-double-gen {:min (-> schema (m/children options) first)}))\n(defmethod -schema-generator :< [schema options] (-double-gen {:max (-> schema (m/children options) first dec)}))\n(defmethod -schema-generator :<= [schema options] (-double-gen {:max (-> schema (m/children options) first)}))\n(defmethod -schema-generator := [schema options] (gen/return (first (m/children schema options))))\n(defmethod -schema-generator :not= [schema options] (gen/such-that #(not= % (-> schema (m/children options) first)) gen/any-printable 100))\n(defmethod -schema-generator 'pos? [_ _] (gen/one-of [(-double-gen {:min 0.00001}) (gen/fmap inc gen/nat)]))\n(defmethod -schema-generator 'neg? [_ _] (gen/one-of [(-double-gen {:max -0.0001}) (gen/fmap (comp dec -) gen/nat)]))\n\n(defmethod -schema-generator :not [schema options] (gen/such-that (m/validator schema options) (ga/gen-for-pred any?) 100))\n(defmethod -schema-generator :and [schema options] (-and-gen schema options))\n(defmethod -schema-generator :or [schema options] (-or-gen schema options))\n(defmethod -schema-generator :orn [schema options] (-or-gen (m/into-schema :or (m/properties schema) (map last (m/children schema)) (m/options schema)) options))\n(defmethod -schema-generator ::m/val [schema options] (generator (first (m/children schema)) options))\n(defmethod -schema-generator :map [schema options] (-map-gen schema options))\n(defmethod -schema-generator :map-of [schema options] (-map-of-gen schema options))\n(defmethod -schema-generator :multi [schema options] (-multi-gen schema options))\n(defmethod -schema-generator :vector [schema options] (-coll-gen schema identity options))\n(defmethod -schema-generator :sequential [schema options] (-coll-gen schema identity options))\n(defmethod -schema-generator :set [schema options] (-coll-distinct-gen schema set options))\n(defmethod -schema-generator :enum [schema options] (gen-elements (m/children schema options)))\n\n(defmethod -schema-generator :maybe [schema options]\n  (let [g (-> schema (m/children options) first (generator options) -not-unreachable)]\n    (gen-one-of (cond-> [(gen/return nil)]\n                  g (conj g)))))\n\n(defmethod -schema-generator :tuple [schema options]\n  (let [gs (map #(generator % options) (m/children schema options))]\n    (if (not-any? -unreachable-gen? gs)\n      (apply gen/tuple gs)\n      (-never-gen options))))\n#?(:clj (defmethod -schema-generator :re [schema options] (-re-gen schema options)))\n(defmethod -schema-generator :any [_ _] (ga/gen-for-pred any?))\n(defmethod -schema-generator :some [_ _] gen/any-printable)\n(defmethod -schema-generator :nil [_ _] (gen/return nil))\n(defmethod -schema-generator :string [schema options] (-string-gen schema options))\n(defmethod -schema-generator :int [schema options] (gen/large-integer* (-min-max schema options)))\n(defmethod -schema-generator :double [schema options]\n  (gen/double* (merge (let [props (m/properties schema options)]\n                        {:infinite? (get props :gen/infinite? false)\n                         :NaN? (get props :gen/NaN? false)})\n                      (-min-max schema options))))\n(defmethod -schema-generator :boolean [_ _] gen/boolean)\n(defmethod -schema-generator :keyword [_ _] gen/keyword)\n(defmethod -schema-generator :symbol [_ _] gen/symbol)\n(defmethod -schema-generator :qualified-keyword [schema _] (-qualified-keyword-gen schema))\n(defmethod -schema-generator :qualified-symbol [schema _] (-qualified-symbol-gen schema))\n(defmethod -schema-generator :uuid [_ _] gen/uuid)\n\n(defmethod -schema-generator :=> [schema options] (-=>-gen schema options))\n(defmethod -schema-generator :function [schema options] (-function-gen schema options))\n(defmethod -schema-generator 'ifn? [_ _] gen/keyword)\n(defmethod -schema-generator :ref [schema options] (-ref-gen schema options))\n(defmethod -schema-generator :schema [schema options] (generator (m/deref schema) options))\n(defmethod -schema-generator ::m/schema [schema options] (generator (m/deref schema) options))\n\n(defmethod -schema-generator :merge [schema options] (generator (m/deref schema) options))\n(defmethod -schema-generator :union [schema options] (generator (m/deref schema) options))\n(defmethod -schema-generator :select-keys [schema options] (generator (m/deref schema) options))\n\n(defmethod -schema-generator :cat [schema options] (-cat-gen schema options))\n(defmethod -schema-generator :catn [schema options] (-cat-gen schema options))\n(defmethod -schema-generator :alt [schema options] (-alt-gen schema options))\n(defmethod -schema-generator :altn [schema options] (-alt-gen schema options))\n\n(defmethod -schema-generator :? [schema options] (-?-gen schema options))\n(defmethod -schema-generator :* [schema options] (-*-gen schema options))\n(defmethod -schema-generator :+ [schema options] (-+-gen schema options))\n(defmethod -schema-generator :repeat [schema options] (-repeat-gen schema options))\n\n;;\n;; Creating a generator by different means, centralized under [[-create]]\n;;\n\n(defn- -create-from-elements [props]\n  (some-> (:gen/elements props) gen-elements))\n\n(defn- -create-from-gen\n  [props schema options]\n  (or (:gen/gen props)\n      (when-not (:gen/elements props)\n        (if (satisfies? Generator schema)\n          (-generator schema options)\n          (-schema-generator schema (assoc options ::original-generator-schema schema))))))\n\n(defn- -create-from-schema [props options]\n  (some-> (:gen/schema props) (generator options)))\n\n(defn- -create-from-fmap [props schema options]\n  (when-some [fmap (:gen/fmap props)]\n    (gen/fmap (m/eval fmap (or options (m/options schema)))\n              (or (-create-from-elements props)\n                  (-create-from-schema props options)\n                  (-create-from-gen props schema options)\n                  (gen/return nil)))))\n\n(defn- -create [schema options]\n  (let [props (merge (m/type-properties schema)\n                     (m/properties schema))]\n    (or (-create-from-fmap props schema options)\n        (-create-from-elements props)\n        (-create-from-schema props options)\n        (-create-from-gen props schema options)\n        (m/-fail! ::no-generator {:options options\n                                  :schema schema}))))\n\n;;\n;; public api\n;;\n\n(defn generator\n  ([?schema]\n   (generator ?schema nil))\n  ([?schema options]\n   (if (::rec-gen options)\n     ;; disable cache while calculating recursive schemas. caches don't distinguish options.\n     (-create (m/schema ?schema options) options)\n     (m/-cached (m/schema ?schema options) :generator #(-create % options)))))\n\n(defn generate\n  ([?gen-or-schema]\n   (generate ?gen-or-schema nil))\n  ([?gen-or-schema {:keys [seed size] :or {size 30} :as options}]\n   (let [gen (if (gen/generator? ?gen-or-schema) ?gen-or-schema (generator ?gen-or-schema options))]\n     (rose/root (gen/call-gen gen (-random seed) size)))))\n\n(defn sample\n  ([?gen-or-schema]\n   (sample ?gen-or-schema nil))\n  ([?gen-or-schema {:keys [seed size] :or {size 10} :as options}]\n   (let [gen (if (gen/generator? ?gen-or-schema) ?gen-or-schema (generator ?gen-or-schema options))]\n     (->> (gen/make-size-range-seq size)\n          (map #(rose/root (gen/call-gen gen %1 %2))\n               (gen/lazy-random-states (-random seed)))\n          (take size)))))\n\n;;\n;; functions\n;;\n\n(defn function-checker\n  ([?schema] (function-checker ?schema nil))\n  ([?schema {::keys [=>iterations] :or {=>iterations 100} :as options}]\n   (let [schema (m/schema ?schema options)\n         check (fn [schema]\n                 (let [{:keys [input output]} (m/-function-info schema)\n                       input-generator (generator input options)\n                       output-validator (m/validator output options)\n                       validate (fn [f args] (output-validator (apply f args)))]\n                   (fn [f]\n                     (let [{:keys [result shrunk]} (->> (prop/for-all* [input-generator] #(validate f %))\n                                                        (check/quick-check =>iterations))\n                           smallest (-> shrunk :smallest first)]\n                       (when-not (true? result)\n                         (let [explain-input (m/explain input smallest)\n                               response (when-not explain-input\n                                          (try (apply f smallest) (catch #?(:clj Exception, :cljs js/Error) e e)))\n                               explain-output (when-not explain-input (m/explain output response))]\n                           (cond-> shrunk\n                             explain-input (assoc ::explain-input explain-input)\n                             explain-output (assoc ::explain-output explain-output)\n                             (ex-message result) (-> (update :result ex-message)\n                                                     (dissoc :result-data)))))))))]\n     (condp = (m/type schema)\n       :=> (check schema)\n       :function (let [checkers (map #(function-checker % options) (m/-children schema))]\n                   (fn [x] (->> checkers (keep #(% x)) (seq))))\n       (m/-fail! ::invalid-function-schema {:type (m/-type schema)})))))\n\n(defn check\n  ([?schema f] (check ?schema f nil))\n  ([?schema f options]\n   (let [schema (m/schema ?schema options)]\n     (m/explain (m/-update-options schema #(assoc % ::m/function-checker function-checker)) f))))\n"],"x_google_ignoreList":[0]}