{"version":3,"sources":["metabase/lib/ref.cljc"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAOA,GAAA,QAAAA,qCAAAC,yCAAAC,6CAAAC;AAAA;AAAA,AAAA;;;;8BAAA,iBAAAC,6BAAA,AAAAC,6CAAA,zHAAUS;IAAVR,6BAAA,AAAAD,6CAAA;IAAAE,6BAAA,AAAAF,6CAAA;IAAAG,iCAAA,AAAAH,6CAAA;IAAAI,0BAAA,AAAAC,4CAAA,mCAAA,gEAAA,iBAAAC,eAAA;AAAA,AAAA,QAAAA,6CAAAA,+CAAAA;;AAAA,AAAA,YAAAC,kBAAA,AAAAC,+CAAA,mBAAA,mDAAA,4DAAAJ,wBAAAL,2BAAAE,2BAAAC,2BAAAC,1MAIEO;;;AAEF;;;;;;;;uBAAA,vBAASC,sDAGNC;AAHH,AAAA;AAIE,OAACH,0DAAWG","names":["js/metabase","js/metabase.lib","js/metabase.lib.ref","js/metabase.lib.ref.ref-method","method-table__5642__auto__","cljs.core.atom","prefer-table__5643__auto__","method-cache__5644__auto__","cached-hierarchy__5645__auto__","hierarchy__5646__auto__","cljs.core.get","fexpr__62697","cljs.core/MultiFn","cljs.core.symbol","metabase.lib.ref/ref-method","metabase.lib.dispatch/dispatch-value","metabase.lib.ref/ref","x"],"sourcesContent":["(ns metabase.lib.ref\n  (:refer-clojure :exclude [ref])\n  (:require\n   [metabase.lib.dispatch :as lib.dispatch]\n   [metabase.lib.schema.ref :as lib.schema.ref]\n   [metabase.util.malli :as mu]))\n\n(defmulti ref-method\n  \"Impl for [[ref]]. This should create a new ref every time it is called, i.e. it should have a fresh UUID every time\n  you call it.\"\n  {:arglists '([x])}\n  lib.dispatch/dispatch-value)\n\n(mu/defn ref :- ::lib.schema.ref/ref\n  \"Create a fresh ref that can be added to a query, e.g. a `:field`, `:aggregation`, or `:expression` reference. Will\n  create a new UUID every time this is called.\"\n  [x :- some?]\n  (ref-method x))\n"]}