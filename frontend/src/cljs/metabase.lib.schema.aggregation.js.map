{"version":3,"sources":["metabase/lib/schema/aggregation.cljc"],"mappings":"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","names":["metabase.lib.schema.mbql_clause.define_catn_mbql_clause","metabase.lib.schema.mbql_clause.define_tuple_mbql_clause","metabase.lib.hierarchy/derive","metabase.util.malli.registry/register!","p1__60327#","cljs.core/any?","metabase.lib.schema.aggregation/aggregation-operators","metabase.shared.util.i18n/js-i18n","cljs.core.into","cljs.core.map","cljs.core/fn?"],"sourcesContent":["(ns metabase.lib.schema.aggregation\n  (:require\n   [metabase.lib.hierarchy :as lib.hierarchy]\n   [metabase.lib.schema.expression :as expression]\n   [metabase.lib.schema.mbql-clause :as mbql-clause]\n   [metabase.shared.util.i18n :as i18n]\n   [metabase.util.malli.registry :as mr]))\n\n;; count has an optional expression arg. This is the number of non-NULL values -- corresponds to count(<expr>) in SQL\n(mbql-clause/define-catn-mbql-clause :count :- :type/Integer\n  [:expression [:? [:schema [:ref ::expression/expression]]]])\n\n;; cum-count has an optional expression arg\n(mbql-clause/define-catn-mbql-clause :cum-count :- :type/Integer\n  [:expression [:? [:schema [:ref ::expression/expression]]]])\n\n(mbql-clause/define-tuple-mbql-clause :avg :- :type/Float\n  [:schema [:ref ::expression/number]])\n\n;;; number of distinct values of something.\n(mbql-clause/define-tuple-mbql-clause :distinct :- :type/Integer\n  [:schema [:ref ::expression/expression]])\n\n(mbql-clause/define-tuple-mbql-clause :count-where :- :type/Integer\n  [:schema [:ref ::expression/boolean]])\n\n;;; min and max should work on anything orderable, including numbers, temporal values, and even text values.\n(mbql-clause/define-tuple-mbql-clause :max\n  [:schema [:ref ::expression/orderable]])\n\n(lib.hierarchy/derive :max :lib.type-of/type-is-type-of-first-arg)\n\n;;; apparently median and percentile only work for numeric args in Postgres, as opposed to anything orderable. Not\n;;; sure this makes sense conceptually, but since there probably isn't as much of a use case we can keep that\n;;; restriction in MBQL for now.\n(mbql-clause/define-tuple-mbql-clause :median\n  [:schema [:ref ::expression/number]])\n\n(lib.hierarchy/derive :median :lib.type-of/type-is-type-of-first-arg)\n\n(mbql-clause/define-tuple-mbql-clause :min\n  [:schema [:ref ::expression/orderable]])\n\n(lib.hierarchy/derive :min :lib.type-of/type-is-type-of-first-arg)\n\n(mr/def ::percentile.percentile\n  [:and\n   {:error/message \"valid percentile\"}\n   [:ref ::expression/number]\n   [:fn\n    {:error/message \"percentile must be between zero and one\"}\n    #(<= 0 % 1)]])\n\n(mbql-clause/define-tuple-mbql-clause :percentile\n  #_expr       [:ref ::expression/number]\n  #_percentile [:ref ::percentile.percentile])\n\n(lib.hierarchy/derive :percentile :lib.type-of/type-is-type-of-first-arg)\n\n(mbql-clause/define-tuple-mbql-clause :share :- :type/Float\n  [:schema [:ref ::expression/boolean]])\n\n(mbql-clause/define-tuple-mbql-clause :stddev :- :type/Float\n  [:schema [:ref ::expression/number]])\n\n(mbql-clause/define-tuple-mbql-clause :sum\n  [:schema [:ref ::expression/number]])\n\n(mbql-clause/define-tuple-mbql-clause :cum-sum\n  [:schema [:ref ::expression/number]])\n\n(lib.hierarchy/derive :sum :lib.type-of/type-is-type-of-first-arg)\n\n(lib.hierarchy/derive :cum-sum :lib.type-of/type-is-type-of-first-arg)\n\n(mbql-clause/define-tuple-mbql-clause :sum-where\n  [:schema [:ref ::expression/number]]\n  [:schema [:ref ::expression/boolean]])\n\n(lib.hierarchy/derive :sum-where :lib.type-of/type-is-type-of-first-arg)\n\n(mbql-clause/define-tuple-mbql-clause :var :- :type/Float\n  #_expr [:schema [:ref ::expression/number]])\n\n(mr/def ::aggregation\n  ;; placeholder!\n  [:or\n   :mbql.clause/avg\n   :mbql.clause/count\n   :mbql.clause/cum-count\n   :mbql.clause/count-where\n   :mbql.clause/distinct\n   :mbql.clause/max\n   :mbql.clause/median\n   :mbql.clause/min\n   :mbql.clause/percentile\n   :mbql.clause/share\n   :mbql.clause/stddev\n   :mbql.clause/sum\n   :mbql.clause/cum-sum\n   :mbql.clause/sum-where\n   :mbql.clause/var\n   any?])\n\n(mr/def ::aggregations\n  [:sequential {:min 1} [:ref ::aggregation]])\n\n(def aggregation-operators\n  \"The list of available aggregation operator.\n  The order of operators is relevant for the front end.\"\n  [{:short            :count\n    :requires-column? false\n    :driver-feature   :basic-aggregations\n    :display-info     (fn []\n                        {:display-name (i18n/tru \"Count of rows\")\n                         :column-name  (i18n/tru \"Count\")\n                         :description  (i18n/tru \"Total number of rows in the answer.\")})}\n   {:short            :sum\n    :supported-field  :metabase.lib.types.constants/summable\n    :requires-column? true\n    :driver-feature   :basic-aggregations\n    :display-info     (fn []\n                        {:display-name (i18n/tru \"Sum of ...\")\n                         :column-name  (i18n/tru \"Sum\")\n                         :description  (i18n/tru \"Sum of all the values of a column.\")})}\n   {:short            :avg\n    :supported-field  :metabase.lib.types.constants/summable\n    :requires-column? true\n    :driver-feature   :basic-aggregations\n    :display-info     (fn []\n                        {:display-name (i18n/tru \"Average of ...\")\n                         :column-name  (i18n/tru \"Average\")\n                         :description  (i18n/tru \"Average of all the values of a column\")})}\n   {:short            :median\n    :supported-field  :metabase.lib.types.constants/summable\n    :requires-column? true\n    :driver-feature   :percentile-aggregations\n    :display-info     (fn []\n                        {:display-name (i18n/tru \"Median of ...\")\n                         :column-name  (i18n/tru \"Median\")\n                         :description  (i18n/tru \"Median of all the values of a column\")})}\n   {:short            :distinct\n    :supported-field  :any\n    :requires-column? true\n    :driver-feature   :basic-aggregations\n    :display-info     (fn []\n                        {:display-name (i18n/tru \"Number of distinct values of ...\")\n                         :column-name  (i18n/tru \"Distinct values\")\n                         :description  (i18n/tru \"Number of unique values of a column among all the rows in the answer.\")})}\n   {:short            :cum-sum\n    :supported-field  :metabase.lib.types.constants/summable\n    :requires-column? true\n    :driver-feature   :basic-aggregations\n    :display-info     (fn []\n                        {:display-name (i18n/tru \"Cumulative sum of ...\")\n                         :column-name  (i18n/tru \"Sum\")\n                         :description  (i18n/tru \"Additive sum of all the values of a column.\\ne.x. total revenue over time.\")})}\n   {:short            :cum-count\n    :requires-column? false\n    :driver-feature   :basic-aggregations\n    :display-info     (fn []\n                        {:display-name (i18n/tru \"Cumulative count of rows\")\n                         :column-name  (i18n/tru \"Count\")\n                         :description  (i18n/tru \"Additive count of the number of rows.\\ne.x. total number of sales over time.\")})}\n   {:short            :stddev\n    :supported-field  :metabase.lib.types.constants/summable\n    :requires-column? true\n    :driver-feature   :standard-deviation-aggregations\n    :display-info     (fn []\n                        {:display-name (i18n/tru \"Standard deviation of ...\")\n                         :column-name  (i18n/tru \"SD\")\n                         :description  (i18n/tru \"Number which expresses how much the values of a column vary among all rows in the answer.\")})}\n   {:short            :min\n    :supported-field  :metabase.lib.types.constants/scope\n    :requires-column? true\n    :driver-feature   :basic-aggregations\n    :display-info     (fn []\n                        {:display-name (i18n/tru \"Minimum of ...\")\n                         :column-name  (i18n/tru \"Min\")\n                         :description  (i18n/tru \"Minimum value of a column\")})}\n   {:short            :max\n    :supported-field  :metabase.lib.types.constants/scope\n    :requires-column? true\n    :driver-feature   :basic-aggregations\n    :display-info     (fn []\n                        {:display-name (i18n/tru \"Maximum of ...\")\n                         :column-name  (i18n/tru \"Max\")\n                         :description  (i18n/tru \"Maximum value of a column\")})}])\n\n(mr/def ::operator\n  [:map\n   [:lib/type [:= :operator/aggregation]]\n   [:short (into [:enum] (map :short) aggregation-operators)]\n   [:supported-field {:optional true} [:maybe :keyword]] ; TODO more precise type?\n   [:requires-column? :boolean]\n   [:driver-feature :keyword]           ; TODO more precise type?\n   [:display-info fn?]])\n"]}