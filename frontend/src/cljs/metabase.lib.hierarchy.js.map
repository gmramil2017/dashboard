{"version":3,"sources":["metabase/lib/hierarchy.cljc"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAGA,GAAA,QAAAA,qCAAAC,yCAAAC,mDAAAC;AAAA;AAAA,AAAA;;;AAAqDC,mCACnD,AAACC,6CAAK,AAACC;;AAET;;;gCAAA,hCAAMC,wEAEHC,IAAIC;AAFP,AAGE,AAACC,mDAAMN,iCAAUO,iBAAoBH,IAAIC;;AAH3C;;AAOA;;;oCAAA,pCAAMG,gFAEHJ,IAAIC;AAFP,AAGE,0DAAA,AAAAI,nDAACC,mEAAmBV,kCAAUI,IAAIC","names":["js/metabase","js/metabase.lib","js/metabase.lib.hierarchy","js/metabase.lib.hierarchy.hierarchy","metabase.lib.hierarchy/hierarchy","cljs.core.atom","cljs.core/make-hierarchy","metabase.lib.hierarchy/derive","tag","parent","cljs.core.swap_BANG_","cljs.core/derive","metabase.lib.hierarchy/isa?","cljs.core/deref","cljs.core.isa_QMARK_"],"sourcesContent":["(ns metabase.lib.hierarchy\n  (:refer-clojure :exclude [derive isa?]))\n\n(defonce ^{:doc \"Keyword hierarchy for MLv2 stuff.\"} hierarchy\n  (atom (make-hierarchy)))\n\n(defn derive\n  \"Like [[clojure.core/derive]], but affects [[hierarchy]] rather than the global hierarchy.\"\n  [tag parent]\n  (swap! hierarchy clojure.core/derive tag parent)\n  ;; for REPL convenience so we don't dump a lot of garbage\n  nil)\n\n(defn isa?\n  \"Like [[clojure.core/isa?]], but uses [[hierarchy]].\"\n  [tag parent]\n  (clojure.core/isa? @hierarchy tag parent))\n"]}