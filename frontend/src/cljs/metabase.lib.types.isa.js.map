{"version":3,"sources":["metabase/lib/types/isa.cljc"],"mappings":"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","names":["p__64796","map__64797","cljs.core/--destructure-map","cljs.core.get","metabase.lib.types.isa/isa?","effective-type","semantic-type","_column","type-kw","cljs.core.isa_QMARK_","metabase.lib.types.isa/field-type?","category","column","type-definition","metabase.lib.types.constants/type-hierarchies","cljs.core/some","p__64802","vec__64803","cljs.core.nth","type-type","types","and__5043__auto__","fexpr__64806","p1__64799#","p1__64800#","p1__64801#","metabase.lib.types.isa/field-type","p1__64808#","medley.core.find_first","metabase.lib.types.isa/date?","metabase.lib.types.isa/numeric?","metabase.lib.types.isa/boolean?","metabase.lib.types.isa/string?","metabase.lib.types.isa/summable?","metabase.lib.types.isa/scope?","metabase.lib.types.isa/category?","metabase.lib.types.isa/location?","metabase.lib.types.isa/description?","metabase.lib.types.isa/dimension?","cljs.core.not_EQ_","metabase.lib.types.isa/metric?","metabase.lib.types.isa/foreign-key?","metabase.lib.types.isa/primary-key?","metabase.lib.types.isa/entity-name?","metabase.lib.types.isa/any?","metabase.lib.types.isa/numeric-base-type?","metabase.lib.types.isa/date-without-time?","metabase.lib.types.isa/number?","metabase.lib.types.isa/integer?","metabase.lib.types.isa/time?","metabase.lib.types.isa/address?","metabase.lib.types.isa/city?","metabase.lib.types.isa/state?","metabase.lib.types.isa/zip-code?","metabase.lib.types.isa/country?","metabase.lib.types.isa/coordinate?","metabase.lib.types.isa/latitude?","metabase.lib.types.isa/longitude?","metabase.lib.types.isa/currency?","metabase.lib.types.isa/comment?","metabase.lib.types.isa/id?","metabase.lib.types.isa/URL?","metabase.lib.types.isa/email?","metabase.lib.types.isa/avatar-URL?","metabase.lib.types.isa/image-URL?","metabase.lib.types.isa/has-latitude-and-longitude?","columns","p1__64936#","cljs.core/every?","metabase.lib.types.isa/primary-key-pred","table-id","pk?","metabase.lib.util/legacy-string-table-id->card-id","cljs.core._EQ_"],"sourcesContent":["(ns metabase.lib.types.isa\n  \"Ported from frontend/src/metabase-lib/types/utils/isa.js\"\n  (:require\n   [medley.core :as m]\n   [metabase.lib.types.constants :as lib.types.constants]\n   [metabase.lib.util :as lib.util]\n   [metabase.types])\n  (:refer-clojure :exclude [isa? any? boolean? number? string? integer?]))\n\n(comment metabase.types/keep-me)\n\n(defn ^:export isa?\n  \"Decide if `_column` is a subtype of the type denoted by the keyword `type-kw`.\n  Both effective and semantic types are taken into account.\"\n  [{:keys [effective-type semantic-type] :as _column} type-kw]\n  (or (clojure.core/isa? effective-type type-kw)\n      (clojure.core/isa? semantic-type type-kw)))\n\n(defn ^:export field-type?\n  \"Returns if `column` is of category `category`.\n  The possible categories are the keys in [[metabase.lib.types.constants/type-hierarchies]].\"\n  [category column]\n  (let [type-definition (lib.types.constants/type-hierarchies category)]\n    (cond\n      (nil? column) false\n\n      ;; check field types\n      (some (fn [[type-type types]]\n              (and (#{:effective-type :semantic-type} type-type)\n                   (some #(clojure.core/isa? (type-type column) %) types)))\n            type-definition)\n      true\n\n      ;; recursively check if it's not an excluded type\n      (some #(field-type? % column) (:exclude type-definition))\n      false\n\n      ;; recursively check if it's an included type\n      (some #(field-type? % column) (:include type-definition))\n      true\n\n      :else false)))\n\n(defn ^:export field-type\n  \"Return the category `column` belongs to.\n  The possible categories are the keys in [[metabase.lib.types.constants/type-hierarchies]].\"\n  [column]\n  (m/find-first #(field-type? % column)\n                [::lib.types.constants/temporal\n                 ::lib.types.constants/location\n                 ::lib.types.constants/coordinate\n                 ::lib.types.constants/foreign_key\n                 ::lib.types.constants/primary_key\n                 ::lib.types.constants/boolean\n                 ::lib.types.constants/string\n                 ::lib.types.constants/string_like\n                 ::lib.types.constants/number]))\n\n(defn ^:export date?\n  \"Is `column` of a temporal type?\"\n  [column]\n  (field-type? ::lib.types.constants/temporal column))\n\n(defn ^:export numeric?\n  \"Is `column` of a numeric type?\"\n  [column]\n  (field-type? ::lib.types.constants/number column))\n\n(defn ^:export boolean?\n  \"Is `column` of a boolean type?\"\n  [column]\n  (field-type? ::lib.types.constants/boolean column))\n\n(defn ^:export string?\n  \"Is `column` of a string type?\"\n  [column]\n  (field-type? ::lib.types.constants/string column))\n\n(defn ^:export summable?\n  \"Is `column` of a summable type?\"\n  [column]\n  (field-type? ::lib.types.constants/summable column))\n\n(defn ^:export scope?\n  \"Is `column` of a scope type?\"\n  [column]\n  (field-type? ::lib.types.constants/scope column))\n\n(defn ^:export category?\n  \"Is `column` of a categorical type?\"\n  [column]\n  (field-type? ::lib.types.constants/category column))\n\n(defn ^:export location?\n  \"Is `column` of a location type?\"\n  [column]\n  (field-type? ::lib.types.constants/location column))\n\n(defn ^:export description?\n  \"Is `column` a description?\"\n  [column]\n  (clojure.core/isa? (:semantic-type column) :type/Description))\n\n(defn ^:export dimension?\n  \"Is `column` a dimension?\"\n  [column]\n  (and column\n       (not= (:lib/source column) :source/aggregation)\n       (not (description? column))))\n\n(defn ^:export metric?\n  \"Is `column` a metric?\"\n  [column]\n  (and (not= (:lib/source column) :source/breakout)\n       (summable? column)))\n\n(defn ^:export foreign-key?\n  \"Is `column` a foreign-key?\"\n  [column]\n  (clojure.core/isa? (:semantic-type column) :type/FK))\n\n(defn ^:export primary-key?\n  \"Is `column` a primary-key?\"\n  [column]\n  (clojure.core/isa? (:semantic-type column) :type/PK))\n\n(defn ^:export entity-name?\n  \"Is `column` an entity name?\"\n  [column]\n  (clojure.core/isa? (:semantic-type column) :type/Name))\n\n(defn ^:export any?\n  \"Is this `_column` whatever (including nil)?\"\n  [_column]\n  true)\n\n(defn ^:export numeric-base-type?\n  \"Is `column` a numneric base type?\"\n  [column]\n  (clojure.core/isa? (:effective-type column) :type/Number))\n\n(defn ^:export date-without-time?\n  \"Is `column` a date without time?\"\n  [column]\n  (clojure.core/isa? (:effective-type column) :type/Date))\n\n;; ZipCode, ID, etc derive from Number but should not be formatted as numbers\n(defn ^:export number?\n  \"Is `column` a number without some other semantic type (like ZIP code)?\"\n  [column]\n  (and (numeric-base-type? column)\n       (let [semantic-type (:semantic-type column)]\n         (or (nil? semantic-type)\n             ;; this is a precaution, :type/Number is not a semantic type\n             (clojure.core/isa? semantic-type :type/Number)))))\n\n(defn ^:export integer?\n  \"Is `column` a integer column?\"\n  [column]\n  (field-type? ::lib.types.constants/integer column))\n\n(defn ^:export time?\n  \"Is `column` a time?\"\n  [column]\n  (clojure.core/isa? (:effective-type column) :type/Time))\n\n(defn ^:export address?\n  \"Is `column` an address?\"\n  [column]\n  (clojure.core/isa? (:semantic-type column) :type/Address))\n\n(defn ^:export city?\n  \"Is `column` a city?\"\n  [column]\n  (clojure.core/isa? (:semantic-type column) :type/City))\n\n(defn ^:export state?\n  \"Is `column` a state?\"\n  [column]\n  (clojure.core/isa? (:semantic-type column) :type/State))\n\n(defn ^:export zip-code?\n  \"Is `column` a zip-code?\"\n  [column]\n  (clojure.core/isa? (:semantic-type column) :type/ZipCode))\n\n(defn ^:export country?\n  \"Is `column` a country?\"\n  [column]\n  (clojure.core/isa? (:semantic-type column) :type/Country))\n\n(defn ^:export coordinate?\n  \"Is `column` a coordinate?\"\n  [column]\n  (clojure.core/isa? (:semantic-type column) :type/Coordinate))\n\n(defn ^:export latitude?\n  \"Is `column` a latitude?\"\n  [column]\n  (clojure.core/isa? (:semantic-type column) :type/Latitude))\n\n(defn ^:export longitude?\n  \"Is `column` a longitude?\"\n  [column]\n  (clojure.core/isa? (:semantic-type column) :type/Longitude))\n\n(defn ^:export currency?\n  \"Is `column` a currency?\"\n  [column]\n  (clojure.core/isa? (:semantic-type column) :type/Currency))\n\n(defn ^:export comment?\n  \"Is `column` a comment?\"\n  [column]\n  (clojure.core/isa? (:semantic-type column) :type/Comment))\n\n(defn ^:export id?\n  \"Is `column` an ID?\"\n  [column]\n  (or (clojure.core/isa? (:semantic-type column) :type/FK)\n      (clojure.core/isa? (:semantic-type column) :type/PK)))\n\n(defn ^:export URL?\n  \"Is `column` a URL?\"\n  [column]\n  (clojure.core/isa? (:semantic-type column) :type/URL))\n\n(defn ^:export email?\n  \"Is `column` an email?\"\n  [column]\n  (clojure.core/isa? (:semantic-type column) :type/Email))\n\n(defn ^:export avatar-URL?\n  \"Is `column` an avatar URL?\"\n  [column]\n  (clojure.core/isa? (:semantic-type column) :type/AvatarURL))\n\n(defn ^:export image-URL?\n  \"Is `column` an image URL?\"\n  [column]\n  (clojure.core/isa? (:semantic-type column) :type/ImageURL))\n\n(defn ^:export has-latitude-and-longitude?\n  \"Does the collection `columns` contain both a latitude and a longitude column?\"\n  [columns]\n  (every? #(some % columns) [latitude? longitude?]))\n\n(defn ^:export primary-key-pred\n  \"Return a prdicate for checking if a column is a primary key.\"\n  [table-id]\n  (fn primary-key-pred-for-table-id [column]\n    (let [pk? (primary-key? column)]\n      ;; comment from isa.js:\n      ;; > FIXME: columns of nested questions at this moment miss table_id value\n      ;; > which makes it impossible to match them with their tables that are nested cards\n      (if (lib.util/legacy-string-table-id->card-id table-id)\n        pk?\n        (and pk? (= (:table-id column) table-id))))))\n"]}