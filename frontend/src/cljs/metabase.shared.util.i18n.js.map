{"version":3,"sources":["metabase/shared/util/i18n.cljs"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAOA,AAGA;;;iDAAA,jDAAOA,0GAEJC;AAFH,AAGE,4CAAA,KAAA,1CAACC,uBAAYD;;AAEf,AAAA;;;;;;;;;oCAAA,4CAAAE,hFAAMM;AAAN,AAAA,IAAAL,qBAAA;AAAA,AAAA,IAAAC,0BAAA,AAAA;AAAA,AAAA,IAAAC,wBAAA;;AAAA,AAAA,GAAA,CAAAA,wBAAAD;AAAA,AAAA,AAAAD,wBAAA,CAAA,UAAAE;;AAAA,eAAA,CAAAA,wBAAA;;;;AAAA;;;;AAAA,IAAAC,uBAAA,EAAA,CAAA,MAAA,AAAAH,4BAAA,AAAA,KAAAI,qBAAA,AAAAJ,yBAAA,KAAA,IAAA,OAAA;AAAA,AAAA,OAAAK,uEAAA,CAAA,UAAA,MAAAF;;;AAAA,AAAA,CAAA,yEAAA,zEAAME,oFAQHR,cAAgBc;AARnB,AASE,IAAMC,4GAAYf,/CACAD,nDACA,mDAAA,8DAAA,jHAACiB;AAFnB,AAGE,OAACC,8CAAMC,6BAAO,AAACC,qBAAQJ,SAAS,AAACI,qBAAQL;;;AAZ7C,CAAA,4DAAA,5DAAMN;;AAAN;AAAA,CAAA,sDAAA,WAAAC,jEAAMD;AAAN,AAAA,IAAAE,WAAA,AAAAC,gBAAAF;IAAAA,eAAA,AAAAG,eAAAH;AAAA,AAAA,IAAAI,qBAAA;AAAA,AAAA,OAAAA,wDAAAH,SAAAD;;;AAAA,AAcA,0CAAA,1CAAeW;AAEf;;;;sCAAA,tCAAMC,oFAGHrB,cAAcsB,iBAAiBC;AAHlC,AAIE,IAAMC,oBAAkB,AAACzB,+CAAqBC;IACxCe,UAAkB,AAACC,mDAAUQ,kBAAkBJ;IAC/CL,cAAkB,8EAAA,qGAAA,jLAAI,sEAAA,tEAACU,6CAAE,AAACC,gBAAMX,kGACXS,6BACDT;IACpBY,eAAkB,kBAAA,lBAACC,8BAAqBJ;AAL9C,AAME,OAACK,oCAAc,AAACC,iCAAW,AAACX,qBAAQJ,aAAS,kCAAA,hBAAIY,cAAOJ,6EACrCD,/CACDvB,vBACA,uBAAA,vBAACE,wFAAYmB,wCAAc,4CAAKG,IACnCA","names":["metabase.shared.util.i18n/escape-format-string","format-string","clojure.string/replace","var_args","args__5775__auto__","len__5769__auto__","i__5770__auto__","argseq__5776__auto__","cljs.core/IndexedSeq","metabase.shared.util.i18n/js-i18n","seq52332","G__52333","cljs.core/first","cljs.core/next","self__5754__auto__","args","strings","clojure.string.split","cljs.core.apply","js/shadow.js.shim.module$ttag.t","cljs.core/clj->js","metabase.shared.util.i18n/re-param-zero","metabase.shared.util.i18n/js-i18n-n","format-string-pl","n","format-string-esc","cljs.core._EQ_","cljs.core/count","has-n?","cljs.core/re-find","js/shadow.js.shim.module$ttag.ngettext","js/shadow.js.shim.module$ttag.msgid"],"sourcesContent":["(ns metabase.shared.util.i18n\n  (:require\n   [\"ttag\" :as ttag]\n   [clojure.string :as str])\n  (:require-macros\n   [metabase.shared.util.i18n]))\n\n(comment metabase.shared.util.i18n/keep-me\n         ttag/keep-me)\n\n(defn- escape-format-string\n  \"Converts `''` to `'` inside the string; that's `java.text.MessageFormat` escaping that isn't needed in JS.\"\n  [format-string]\n  (str/replace format-string #\"''\" \"'\"))\n\n(defn js-i18n\n  \"Format an i18n `format-string` with `args` with a translated string in the user locale.\n\n  The strings are formatted in `java.test.MessageFormat` style. That's used directly in JVM Clojure, but in CLJS we have\n  to adapt to ttag, which doesn't have the same escaping rules.\n  - 'xyz' single quotes wrap literal text which should not be interpolated, and could contain literal '{0}'.\n  - A literal single quote is written with two single quotes: `''`\n  The first part is not supported at all. `''` is converted to a single `'`.\"\n  [format-string & args]\n  (let [strings (-> format-string\n                    escape-format-string\n                    (str/split #\"\\{\\d+\\}\"))]\n    (apply ttag/t (clj->js strings) (clj->js args))))\n\n(def ^:private re-param-zero #\"\\{0\\}\")\n\n(defn js-i18n-n\n  \"Format an i18n `format-string` with the appropriate plural form based on the value `n`.\n   Allows `n` to be interpolated into the string using {0}.\"\n  [format-string format-string-pl n]\n  (let [format-string-esc (escape-format-string format-string)\n        strings           (str/split format-string-esc re-param-zero)\n        strings           (if (= (count strings) 1)\n                            [format-string-esc \"\"]\n                            strings)\n        has-n?            (re-find #\".*\\{0\\}.*\" format-string-esc)]\n    (ttag/ngettext (ttag/msgid (clj->js strings) (if has-n? n \"\"))\n                   (-> format-string-pl\n                      escape-format-string\n                      (str/replace re-param-zero (str n)))\n                   n)))\n"]}