{"version":3,"sources":["metabase/lib/field.cljc"],"mappings":"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","names":["metabase.lib.field/normalize-binning-options","opts","metabase.lib.normalize.normalize_map","cljs.core/keyword","metabase.lib.field/normalize-field-options","metabase.lib.normalize/normalize","p__80656","vec__80657","cljs.core.nth","tag","id-or-name","cljs.core.keyword","metabase.lib.field/resolve-field-id","query","stage-number","field-id","cljs.core.merge","metabase.lib.util/first-stage?","temp__5804__auto__","card-id","metabase.lib.util/source-card-id","card-metadata","metabase.lib.card/saved-question-metadata","p1__80660#","medley.core.find_first","cljs.core._EQ_","e80662","metabase.lib.metadata/field","_","metabase.lib.field/resolve-column-name-in-metadata","column-name","column-metadatas","or__5045__auto__","p1__80663#","p1__80664#","level__47249__auto__","metabase.util.log/glogi-level","logger__47250__auto__","metabase.util.log/is-loggable?","x__47251__auto__","js/Error","lambdaisland.glogi.log","cljs.core/print-str","cljs.core.print_str","metabase.shared.util.i18n.js_i18n","cljs.core.pr_str","cljs.core.mapv","metabase.lib.field/resolve-column-name","previous-stage-number","metabase.lib.util/previous-stage-number","stage","metabase.lib.util/query-stage","stage-columns","cljs.core.get_in","metabase.lib.metadata.calculation.visible_columns","column","and__5043__auto__","cljs.core/seq","G__80674","cljs.core.dissoc","metabase.lib.join/with-join-alias","cljs.core.assoc","p__80685","vec__80690","map__80693","cljs.core/--destructure-map","cljs.core.get","metabase.lib.field/resolve-field-metadata","_field","join-alias","_field-clause","metadata","base-type","effective-type","cljs.core.some_fn","binning","unit","cljs.core/integer?","G__80722","metabase.lib.field/add-parent-column-metadata","map__80725","parent-metadata","parent-name","G__80726","cljs.core.update","field-name","p__80727","map__80728","metabase.lib.field/column-metadata-effective-type","temporal-unit","column-metadata","cljs.core/contains?","metabase.lib.schema.temporal-bucketing/datetime-extraction-units","metabase.lib.metadata.calculation/type-of-method","_query","_stage-number","p__80730","vec__80731","map__80734","_tag","_opts","_id-or-name","field-ref","G__80735","metabase.lib.metadata.calculation.type_of","metabase.lib.metadata.calculation/metadata-method","p__80739","map__80740","field-metadata","p__80760","vec__80764","map__80767","source-uuid","source-field","metabase.lib.metadata.calculation.display_name","G__80775","G__80776","metabase.lib.field/table-metadata","table-id","metabase.lib.metadata/card","metabase.lib.util/legacy-string-table-id->card-id","metabase.lib.metadata/table","metabase.lib.metadata.calculation/display-name-method","p__80785","map__80786","field-display-name","fk-field-id","style","metabase.util.humanization/name->human-readable-name","join-display-name","clojure.string/includes?","temp__5802__auto__","field","metabase.lib.metadata.calculation.display_info","metabase.lib.util/strip-id","table","metabase.lib.join/current-join-alias","display-name","G__80841","G__80842","G__80843","metabase.lib.util/format","cljs.core/name","clojure.string/replace","metabase.util/capitalize-en","G__80844","G__80845","G__80846","metabase.lib.binning/binning-display-name","p__80847","vec__80850","map__80853","field-clause","G__80855","metabase.shared.util.i18n/js-i18n","metabase.lib.metadata.calculation/column-name-method","p__80861","map__80862","p__80867","vec__80869","metabase.lib.metadata.calculation.column_name","metabase.lib.metadata.calculation/display-info-method","fexpr__80877","cljs.core/get-method","card","metabase.lib.temporal-bucket/temporal-bucket-method","p__80882","vec__80886","metabase.lib.temporal-bucket/with-temporal-bucket-method","p__80905","vec__80907","options","extraction-unit?","original-effective-type","new-effective-type","metabase.lib.temporal-bucket/available-temporal-buckets-method","metabase.lib.temporal_bucket.available_temporal_buckets","metabase.lib.field/fingerprint-based-default-unit","fingerprint","e80945","map__80946","earliest","latest","days","metabase.shared.util.time.day_diff","metabase.shared.util.time.coerce_to_timestamp","cljs.core/NaN?","pred__80951","expr__80952","cljs.core/>","metabase.lib.field/mark-unit","option-key","G__80959","p1__80954#","cljs.core/some","option","G__80964","cljs.core.not_EQ_","fingerprint-default","G__80992","G__80993","cljs.core.isa_QMARK_","metabase.lib.temporal-bucket/datetime-bucket-options","metabase.lib.temporal-bucket/date-bucket-options","metabase.lib.temporal-bucket/time-bucket-options","metabase.lib.binning/binning-method","G__80994","metabase.lib.options/options","G__80995","cljs.core/constantly","metabase.lib.binning/with-binning-method","metabase.lib.options.update_options","metabase.util/assoc-dissoc","metabase.lib.binning/available-binning-strategies-method","metabase.lib.binning.available_binning_strategies","p__80999","map__81000","semantic-type","binning?","G__81001","metabase.lib.metadata/database","existing","metabase.lib.binning/binning","strategies","cljs.core/not","metabase.lib.binning/coordinate-binning-strategies","metabase.lib.binning/numeric-binning-strategies","iter__5523__auto__","s__81003","cljs.core/LazySeq","cljs.core/chunked-seq?","c__5521__auto__","size__5522__auto__","cljs.core/count","b__81005","cljs.core/chunk-buffer","i__81004","cljs.core/-nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__81002","cljs.core/chunk-rest","cljs.core/first","cljs.core/cons","cljs.core/rest","strat","G__81008","G__81010","metabase.lib.binning/strategy=","metabase.lib.ref/ref-method","p__81011","map__81012","source","G__81013","cljs.core/Keyword","metabase.lib.aggregation/column-metadata->aggregation-ref","metabase.lib.expression/column-metadata->expression-ref","inherited-column?","G__81015","fexpr__81014","cljs.core/random-uuid","source-field-id","p__81018","map__81019","metabase.lib.field/implicit-join-name","_field-metadata","table-name","source-field-id-name","metabase.lib.join/implicit-join-name","metabase.lib.field/desired-alias","metabase.lib.join/joined-field-desired-alias","metabase.lib.field/expression-refs","s__81084","b__81086","i__81085","iter__81083","col","metabase.lib.ref/ref","var_args","G__81094","metabase.lib.field/with-fields","xs","metabase.lib.field.with_fields","cljs.core/not-empty","G__81095","cljs.core.into","p1__81088#","cljs.core.remove","metabase.lib.equality.find_closest_matching_ref","metabase.lib.util.update_query_stage","G__81098","metabase.lib.field/fields","metabase.lib.field.fields","G__81160","metabase.lib.field/fieldable-columns","metabase.lib.field.fieldable_columns","current-fields","selected-column?","cljs.core/empty?","col-ref","cljs.core/boolean","fields-ref","metabase.lib.equality/ref=","cljs.core/chunk-first"],"sourcesContent":["(ns metabase.lib.field\n  (:require\n   [clojure.string :as str]\n   [medley.core :as m]\n   [metabase.lib.aggregation :as lib.aggregation]\n   [metabase.lib.binning :as lib.binning]\n   [metabase.lib.card :as lib.card]\n   [metabase.lib.equality :as lib.equality]\n   [metabase.lib.expression :as lib.expression]\n   [metabase.lib.join :as lib.join]\n   [metabase.lib.metadata :as lib.metadata]\n   [metabase.lib.metadata.calculation :as lib.metadata.calculation]\n   [metabase.lib.normalize :as lib.normalize]\n   [metabase.lib.options :as lib.options]\n   [metabase.lib.ref :as lib.ref]\n   [metabase.lib.schema :as lib.schema]\n   [metabase.lib.schema.common :as lib.schema.common]\n   [metabase.lib.schema.id :as lib.schema.id]\n   [metabase.lib.schema.ref]\n   [metabase.lib.schema.temporal-bucketing\n    :as lib.schema.temporal-bucketing]\n   [metabase.lib.temporal-bucket :as lib.temporal-bucket]\n   [metabase.lib.util :as lib.util]\n   [metabase.shared.util.i18n :as i18n]\n   [metabase.shared.util.time :as shared.ut]\n   [metabase.util :as u]\n   [metabase.util.humanization :as u.humanization]\n   [metabase.util.log :as log]\n   [metabase.util.malli :as mu]))\n\n(comment metabase.lib.schema.ref/keep-me)\n\n(defn- normalize-binning-options [opts]\n  (lib.normalize/normalize-map\n   opts\n   keyword\n   {:strategy keyword}))\n\n(defn- normalize-field-options [opts]\n  (lib.normalize/normalize-map\n   opts\n   keyword\n   {:temporal-unit keyword\n    :binning       normalize-binning-options}))\n\n(defmethod lib.normalize/normalize :field\n  [[tag opts id-or-name]]\n  [(keyword tag) (normalize-field-options opts) id-or-name])\n\n(mu/defn ^:private resolve-field-id :- lib.metadata/ColumnMetadata\n  \"Integer Field ID: get metadata from the metadata provider. If this is the first stage of the query, merge in\n  Saved Question metadata if available.\"\n  [query        :- ::lib.schema/query\n   stage-number :- :int\n   field-id     :- ::lib.schema.id/field]\n  (merge\n   (when (lib.util/first-stage? query stage-number)\n     (when-let [card-id (lib.util/source-card-id query)]\n       (when-let [card-metadata (lib.card/saved-question-metadata query card-id)]\n         (m/find-first #(= (:id %) field-id)\n                       card-metadata))))\n   (try\n     (lib.metadata/field query field-id)\n     (catch #?(:clj Throwable :cljs :default) _\n       nil))))\n\n(mu/defn ^:private resolve-column-name-in-metadata :- [:maybe lib.metadata/ColumnMetadata]\n  [column-name      :- ::lib.schema.common/non-blank-string\n   column-metadatas :- [:sequential lib.metadata/ColumnMetadata]]\n  (or (m/find-first #(= (:lib/desired-column-alias %) column-name)\n                    column-metadatas)\n      (m/find-first #(= (:name %) column-name)\n                    column-metadatas)\n      (do\n        (log/warn (i18n/tru \"Invalid :field clause: column {0} does not exist. Found: {1}\"\n                            (pr-str column-name)\n                            (pr-str (mapv :lib/desired-column-alias column-metadatas))))\n        nil)))\n\n(mu/defn ^:private resolve-column-name :- [:maybe lib.metadata/ColumnMetadata]\n  \"String column name: get metadata from the previous stage, if it exists, otherwise if this is the first stage and we\n  have a native query or a Saved Question source query or whatever get it from our results metadata.\"\n  [query        :- ::lib.schema/query\n   stage-number :- :int\n   column-name  :- ::lib.schema.common/non-blank-string]\n  (let [previous-stage-number (lib.util/previous-stage-number query stage-number)\n        stage                 (if previous-stage-number\n                                (lib.util/query-stage query previous-stage-number)\n                                (lib.util/query-stage query stage-number))\n        ;; TODO -- it seems a little icky that the existence of `:metabase.lib.stage/cached-metadata` is leaking here,\n        ;; we should look in to fixing this if we can.\n        stage-columns         (or (:metabase.lib.stage/cached-metadata stage)\n                                  (get-in stage [:lib/stage-metadata :columns])\n                                  (when (:source-card stage)\n                                    (lib.metadata.calculation/visible-columns query stage-number stage))\n                                  (log/warn (i18n/tru \"Cannot resolve column {0}: stage has no metadata\" (pr-str column-name))))]\n    (when-let [column (and (seq stage-columns)\n                           (resolve-column-name-in-metadata column-name stage-columns))]\n      (cond-> column\n        previous-stage-number (-> (dissoc :id :table-id\n                                          ::binning ::temporal-unit)\n                                  (lib.join/with-join-alias nil)\n                                  (assoc :name (or (:lib/desired-column-alias column) (:name column)))\n                                  (assoc :lib/source :source/previous-stage))))))\n\n(mu/defn ^:private resolve-field-metadata :- lib.metadata/ColumnMetadata\n  \"Resolve metadata for a `:field` ref. This is part of the implementation\n  for [[lib.metadata.calculation/metadata-method]] a `:field` clause.\"\n  [query                                                                 :- ::lib.schema/query\n   stage-number                                                          :- :int\n   [_field {:keys [join-alias], :as opts} id-or-name, :as _field-clause] :- :mbql.clause/field]\n  (let [metadata (merge\n                  (when-let [base-type (:base-type opts)]\n                    {:base-type base-type})\n                  (when-let [effective-type ((some-fn :effective-type :base-type) opts)]\n                    {:effective-type effective-type})\n                  ;; TODO -- some of the other stuff in `opts` probably ought to be merged in here as well. Also, if the Field is\n                  ;; temporally bucketed, the base-type/effective-type would probably be affected, right? We should probably be\n                  ;; taking that into consideration?\n                  (when-let [binning (:binning opts)]\n                    {::binning binning})\n                  (when-let [unit (:temporal-unit opts)]\n                    {::temporal-unit unit})\n                  (cond\n                    (integer? id-or-name) (resolve-field-id query stage-number id-or-name)\n                    join-alias            {:lib/type :metadata/column, :name id-or-name}\n                    :else                 (or (resolve-column-name query stage-number id-or-name)\n                                              {:lib/type :metadata/column\n                                               :name     id-or-name})))]\n    (cond-> metadata\n      join-alias (lib.join/with-join-alias join-alias))))\n\n(mu/defn ^:private add-parent-column-metadata\n  \"If this is a nested column, add metadata about the parent column.\"\n  [query    :- ::lib.schema/query\n   metadata :- lib.metadata/ColumnMetadata]\n  (let [parent-metadata     (lib.metadata/field query (:parent-id metadata))\n        {parent-name :name} (cond->> parent-metadata\n                              (:parent-id parent-metadata) (add-parent-column-metadata query))]\n    (update metadata :name (fn [field-name]\n                             (str parent-name \\. field-name)))))\n\n(defn- column-metadata-effective-type\n  \"Effective type of a column when taking the `::temporal-unit` into account. If we have a temporal extraction like\n  `:month-of-year`, then this actually returns an integer rather than the 'original` effective type of `:type/Date` or\n  whatever.\"\n  [{::keys [temporal-unit], :as column-metadata}]\n  (if (and temporal-unit\n           (contains? lib.schema.temporal-bucketing/datetime-extraction-units temporal-unit))\n    :type/Integer\n    ((some-fn :effective-type :base-type) column-metadata)))\n\n(defmethod lib.metadata.calculation/type-of-method :metadata/column\n  [_query _stage-number column-metadata]\n  (column-metadata-effective-type column-metadata))\n\n(defmethod lib.metadata.calculation/type-of-method :field\n  [query stage-number [_tag {:keys [temporal-unit], :as _opts} _id-or-name :as field-ref]]\n  (let [metadata (cond-> (resolve-field-metadata query stage-number field-ref)\n                   temporal-unit (assoc ::temporal-unit temporal-unit))]\n    (lib.metadata.calculation/type-of query stage-number metadata)))\n\n(defmethod lib.metadata.calculation/metadata-method :metadata/column\n  [_query _stage-number {field-name :name, :as field-metadata}]\n  (assoc field-metadata :name field-name))\n\n;;; TODO -- effective type should be affected by `temporal-unit`, right?\n(defmethod lib.metadata.calculation/metadata-method :field\n  [query\n   stage-number\n   [_tag {source-uuid :lib/uuid :keys [base-type binning effective-type join-alias source-field temporal-unit], :as opts} :as field-ref]]\n  (let [field-metadata (resolve-field-metadata query stage-number field-ref)\n        metadata       (merge\n                        {:lib/type        :metadata/column\n                         :lib/source-uuid source-uuid}\n                        field-metadata\n                        {:display-name (or (:display-name opts)\n                                           (lib.metadata.calculation/display-name query stage-number field-ref))}\n                        (when effective-type\n                          {:effective-type effective-type})\n                        (when base-type\n                          {:base-type base-type})\n                        (when temporal-unit\n                          {::temporal-unit temporal-unit})\n                        (when binning\n                          {::binning binning})\n                        (when source-field\n                          {:fk-field-id source-field}))\n        metadata       (cond-> metadata\n                         join-alias (lib.join/with-join-alias join-alias))]\n    (cond->> metadata\n      (:parent-id metadata) (add-parent-column-metadata query))))\n\n(defn- table-metadata\n  \"Work around the fact that sometimes columns in results metadata come back with legacy `card__<id>` `:table-id`s.\n  TODO: It would probably be nice to have the metadata providers parse these into a `:card-id` or something as they\n  come in, sort of like what we do with legacy queries in [[metabase.lib.convert]], but this will have to be good\n  enough for now.\"\n  [query table-id]\n  (cond\n    (string? table-id)  (lib.metadata/card query (lib.util/legacy-string-table-id->card-id table-id))\n    (integer? table-id) (lib.metadata/table query table-id)))\n\n;;; this lives here as opposed to [[metabase.lib.metadata]] because that namespace is more of an interface namespace\n;;; and moving this there would cause circular references.\n(defmethod lib.metadata.calculation/display-name-method :metadata/column\n  [query stage-number {field-display-name :display-name\n                       field-name         :name\n                       temporal-unit      :unit\n                       binning            ::binning\n                       join-alias         :source-alias\n                       fk-field-id        :fk-field-id\n                       table-id           :table-id\n                       :as                field-metadata} style]\n  (let [field-display-name (or field-display-name\n                               (u.humanization/name->human-readable-name :simple field-name))\n        join-display-name  (when (and (= style :long)\n                                      ;; don't prepend a join display name if `:display-name` already contains one!\n                                      ;; Legacy result metadata might include it for joined Fields, don't want to add\n                                      ;; it twice. Otherwise we'll end up with display names like\n                                      ;;\n                                      ;;    Products \u2192 Products \u2192 Category\n                                      (not (str/includes? field-display-name \" \u2192 \")))\n                             (or\n                               (when fk-field-id\n                                 ;; Implicitly joined column pickers don't use the target table's name, they use the FK field's name with\n                                 ;; \"ID\" dropped instead.\n                                 ;; This is very intentional: one table might have several FKs to one foreign table, each with different\n                                 ;; meaning (eg. ORDERS.customer_id vs. ORDERS.supplier_id both linking to a PEOPLE table).\n                                 ;; See #30109 for more details.\n                                 (if-let [field (lib.metadata/field query fk-field-id)]\n                                   (-> (lib.metadata.calculation/display-info query stage-number field)\n                                       :display-name\n                                       lib.util/strip-id)\n                                   (let [table (table-metadata query table-id)]\n                                     (lib.metadata.calculation/display-name query stage-number table style))))\n                               (or join-alias (lib.join/current-join-alias field-metadata))))\n        display-name       (if join-display-name\n                             (str join-display-name \" \u2192 \" field-display-name)\n                             field-display-name)]\n    (cond\n      temporal-unit (lib.util/format \"%s: %s\" display-name (-> (name temporal-unit)\n                                                               (str/replace \\- \\space)\n                                                               u/capitalize-en))\n      binning       (lib.util/format \"%s: %s\" display-name (lib.binning/binning-display-name binning field-metadata))\n      :else         display-name)))\n\n(defmethod lib.metadata.calculation/display-name-method :field\n  [query\n   stage-number\n   [_tag {:keys [binning join-alias temporal-unit source-field], :as _opts} _id-or-name, :as field-clause]\n   style]\n  (if-let [field-metadata (cond-> (resolve-field-metadata query stage-number field-clause)\n                            join-alias    (assoc :source-alias join-alias)\n                            temporal-unit (assoc :unit temporal-unit)\n                            binning       (assoc ::binning binning)\n                            source-field  (assoc :fk-field-id source-field))]\n    (lib.metadata.calculation/display-name query stage-number field-metadata style)\n    ;; mostly for the benefit of JS, which does not enforce the Malli schemas.\n    (i18n/tru \"[Unknown Field]\")))\n\n(defmethod lib.metadata.calculation/column-name-method :metadata/column\n  [_query _stage-number {field-name :name}]\n  field-name)\n\n(defmethod lib.metadata.calculation/column-name-method :field\n  [query stage-number [_tag _id-or-name, :as field-clause]]\n  (if-let [field-metadata (resolve-field-metadata query stage-number field-clause)]\n    (lib.metadata.calculation/column-name query stage-number field-metadata)\n    ;; mostly for the benefit of JS, which does not enforce the Malli schemas.\n    \"unknown_field\"))\n\n(defmethod lib.metadata.calculation/display-info-method :metadata/column\n  [query stage-number field-metadata]\n  (merge\n   ((get-method lib.metadata.calculation/display-info-method :default) query stage-number field-metadata)\n   ;; if this column comes from a source Card (Saved Question/Model/etc.) use the name of the Card as the 'table' name\n   ;; rather than the ACTUAL table name.\n   (when (= (:lib/source field-metadata) :source/card)\n     (when-let [card-id (:lib/card-id field-metadata)]\n       (when-let [card (lib.metadata/card query card-id)]\n         {:table {:name (:name card), :display-name (:name card)}})))))\n\n;;; ---------------------------------- Temporal Bucketing ----------------------------------------\n\n;;; TODO -- it's a little silly to make this a multimethod I think since there are exactly two implementations of it,\n;;; right? Or can expression and aggregation references potentially be temporally bucketed as well? Think about\n;;; whether just making this a plain function like we did for [[metabase.lib.join/with-join-alias]] makes sense or not.\n\n(defmethod lib.temporal-bucket/temporal-bucket-method :field\n  [[_tag opts _id-or-name]]\n  (:temporal-unit opts))\n\n(defmethod lib.temporal-bucket/temporal-bucket-method :metadata/column\n  [metadata]\n  (::temporal-unit metadata))\n\n(defmethod lib.temporal-bucket/with-temporal-bucket-method :field\n  [[_tag options id-or-name] unit]\n  ;; if `unit` is an extraction unit like `:month-of-year`, then the `:effective-type` of the ref changes to\n  ;; `:type/Integer` (month of year returns an int). We need to record the ORIGINAL effective type somewhere in case\n  ;; we need to refer back to it, e.g. to see what temporal buckets are available if we want to change the unit, or if\n  ;; we want to remove it later. We will record this with the key `::original-effective-type`. Note that changing the\n  ;; unit multiple times should keep the original first value of `::original-effective-type`.\n  (if unit\n    (let [extraction-unit?        (contains? lib.schema.temporal-bucketing/datetime-extraction-units unit)\n          original-effective-type ((some-fn ::original-effective-type :effective-type :base-type) options)\n          new-effective-type      (if extraction-unit?\n                                    :type/Integer\n                                    original-effective-type)\n          options                 (assoc options\n                                         :temporal-unit unit\n                                         :effective-type new-effective-type\n                                         ::original-effective-type original-effective-type)]\n      [:field options id-or-name])\n    ;; `unit` is `nil`: remove the temporal bucket.\n    (let [options (if-let [original-effective-type (::original-effective-type options)]\n                    (-> options\n                        (assoc :effective-type original-effective-type)\n                        (dissoc ::original-effective-type))\n                    options)\n          options (dissoc options :temporal-unit)]\n      [:field options id-or-name])))\n\n(defmethod lib.temporal-bucket/with-temporal-bucket-method :metadata/column\n  [metadata unit]\n  (if unit\n    (assoc metadata ::temporal-unit unit)\n    (dissoc metadata ::temporal-unit)))\n\n(defmethod lib.temporal-bucket/available-temporal-buckets-method :field\n  [query stage-number field-ref]\n  (lib.temporal-bucket/available-temporal-buckets query stage-number (resolve-field-metadata query stage-number field-ref)))\n\n(defn- fingerprint-based-default-unit [fingerprint]\n  (u/ignore-exceptions\n    (when-let [{:keys [earliest latest]} (-> fingerprint :type :type/DateTime)]\n      (let [days (shared.ut/day-diff (shared.ut/coerce-to-timestamp earliest)\n                                     (shared.ut/coerce-to-timestamp latest))]\n        (when-not (NaN? days)\n          (condp > days\n            1 :minute\n            31 :day\n            365 :week\n            :month))))))\n\n(defn- mark-unit [options option-key unit]\n  (cond->> options\n    (some #(= (:unit %) unit) options)\n    (mapv (fn [option]\n            (cond-> (dissoc option option-key)\n              (= (:unit option) unit) (assoc option-key true))))))\n\n(defmethod lib.temporal-bucket/available-temporal-buckets-method :metadata/column\n  [_query _stage-number field-metadata]\n  (if (not= (:lib/source field-metadata) :source/expressions)\n    (let [effective-type ((some-fn :effective-type :base-type) field-metadata)\n          fingerprint-default (some-> field-metadata :fingerprint fingerprint-based-default-unit)]\n      (cond-> (cond\n                (isa? effective-type :type/DateTime) lib.temporal-bucket/datetime-bucket-options\n                (isa? effective-type :type/Date)     lib.temporal-bucket/date-bucket-options\n                (isa? effective-type :type/Time)     lib.temporal-bucket/time-bucket-options\n                :else                                [])\n        fingerprint-default              (mark-unit :default fingerprint-default)\n        (::temporal-unit field-metadata) (mark-unit :selected (::temporal-unit field-metadata))))\n    []))\n\n;;; ---------------------------------------- Binning ---------------------------------------------\n(defmethod lib.binning/binning-method :field\n  [field-clause]\n  (some-> field-clause\n          lib.options/options\n          :binning\n          (assoc :lib/type    ::lib.binning/binning\n                 :metadata-fn (fn [query stage-number]\n                                (resolve-field-metadata query stage-number field-clause)))))\n\n(defmethod lib.binning/binning-method :metadata/column\n  [metadata]\n  (some-> metadata\n          ::binning\n          (assoc :lib/type    ::lib.binning/binning\n                 :metadata-fn (constantly metadata))))\n\n(defmethod lib.binning/with-binning-method :field\n  [field-clause binning]\n  (lib.options/update-options field-clause u/assoc-dissoc :binning binning))\n\n(defmethod lib.binning/with-binning-method :metadata/column\n  [metadata binning]\n  (u/assoc-dissoc metadata ::binning binning))\n\n(defmethod lib.binning/available-binning-strategies-method :field\n  [query stage-number field-ref]\n  (lib.binning/available-binning-strategies query stage-number (resolve-field-metadata query stage-number field-ref)))\n\n(defmethod lib.binning/available-binning-strategies-method :metadata/column\n  [query _stage-number {:keys [effective-type fingerprint semantic-type] :as field-metadata}]\n  (if (not= (:lib/source field-metadata) :source/expressions)\n    (let [binning?    (some-> query lib.metadata/database :features (contains? :binning))\n          fingerprint (get-in fingerprint [:type :type/Number])\n          existing    (lib.binning/binning field-metadata)\n          strategies  (cond\n                        ;; Abort if the database doesn't support binning, or this column does not have a defined range.\n                        (not (and binning?\n                                  (:min fingerprint)\n                                  (:max fingerprint)))               nil\n                        (isa? semantic-type :type/Coordinate)        (lib.binning/coordinate-binning-strategies)\n                        (and (isa? effective-type :type/Number)\n                             (not (isa? semantic-type :Relation/*))) (lib.binning/numeric-binning-strategies))]\n      ;; TODO: Include the time and date binning strategies too; see metabase.api.table/assoc-field-dimension-options.\n      (for [strat strategies]\n        (cond-> strat\n          (lib.binning/strategy= strat existing) (assoc :selected true))))\n    []))\n\n(defmethod lib.ref/ref-method :field\n  [field-clause]\n  field-clause)\n\n(defmethod lib.ref/ref-method :metadata/column\n  [{source :lib/source, :as metadata}]\n  (case source\n    :source/aggregations (lib.aggregation/column-metadata->aggregation-ref metadata)\n    :source/expressions  (lib.expression/column-metadata->expression-ref metadata)\n    (let [inherited-column? (#{:source/card :source/native :source/previous-stage} (:lib/source metadata))\n          options           (merge {:lib/uuid       (str (random-uuid))\n                                    :base-type      (:base-type metadata)\n                                    :effective-type (column-metadata-effective-type metadata)}\n                                   (when-let [join-alias (lib.join/current-join-alias metadata)]\n                                     {:join-alias join-alias})\n                                   (when-let [temporal-unit (::temporal-unit metadata)]\n                                     {:temporal-unit temporal-unit})\n                                   (when-let [binning (::binning metadata)]\n                                     {:binning binning})\n                                   (when-let [source-field-id (:fk-field-id metadata)]\n                                     {:source-field source-field-id}))]\n      [:field options (if inherited-column?\n                        (or (:lib/desired-column-alias metadata) (:name metadata))\n                        (or (:id metadata) (:name metadata)))])))\n\n(defn- implicit-join-name [query {:keys [fk-field-id table-id], :as _field-metadata}]\n  (when (and fk-field-id table-id)\n    (when-let [table (table-metadata query table-id)]\n      (let [table-name           (:name table)\n            source-field-id-name (:name (lib.metadata/field query fk-field-id))]\n        (lib.join/implicit-join-name table-name source-field-id-name)))))\n\n(mu/defn desired-alias :- ::lib.schema.common/non-blank-string\n  \"Desired alias for a Field e.g.\n\n    my_field\n\n    OR\n\n    MyJoin__my_field\n\n  You should pass the results thru a unique name function.\"\n  [query          :- ::lib.schema/query\n   field-metadata :- lib.metadata/ColumnMetadata]\n  (if-let [join-alias (or (lib.join/current-join-alias field-metadata)\n                          (implicit-join-name query field-metadata))]\n    (lib.join/joined-field-desired-alias join-alias (:name field-metadata))\n    (:name field-metadata)))\n\n(defn- expression-refs\n  \"Create refs for all the expressions in a stage of a query.\"\n  [query stage-number]\n  (for [col   (lib.metadata.calculation/visible-columns\n               query\n               stage-number\n               (lib.util/query-stage query stage-number)\n               {:include-joined?              false\n                :include-expressions?         true\n                :include-implicitly-joinable? false})\n        :when (= (:lib/source col) :source/expressions)]\n    (lib.ref/ref col)))\n\n(mu/defn with-fields :- ::lib.schema/query\n  \"Specify the `:fields` for a query. Pass `nil` or an empty sequence to remove `:fields`.\"\n  ([xs]\n   (fn [query stage-number]\n     (with-fields query stage-number xs)))\n\n  ([query xs]\n   (with-fields query -1 xs))\n\n  ([query        :- ::lib.schema/query\n    stage-number :- :int\n    xs]\n   (let [xs (not-empty (mapv lib.ref/ref xs))\n         ;; if any fields are specified, include all expressions not yet included too\n         xs (some-> xs\n                    (into (remove #(lib.equality/find-closest-matching-ref % xs))\n                          (expression-refs query stage-number)))]\n     (lib.util/update-query-stage query stage-number u/assoc-dissoc :fields xs))))\n\n(mu/defn fields :- [:maybe [:ref ::lib.schema/fields]]\n  \"Fetches the `:fields` for a query. Returns `nil` if there are no `:fields`. `:fields` should never be empty; this is\n  enforced by the Malli schema.\"\n  ([query]\n   (fields query -1))\n\n  ([query        :- ::lib.schema/query\n    stage-number :- :int]\n   (:fields (lib.util/query-stage query stage-number))))\n\n(mu/defn fieldable-columns :- [:sequential lib.metadata/ColumnMetadata]\n  \"Return a sequence of column metadatas for columns that you can specify in the `:fields` of a query. This is\n  basically just the columns returned by the source Table/Saved Question/Model or previous query stage.\n\n  Includes a `:selected?` key letting you know this column is already in `:fields` or not; if `:fields` is\n  unspecified, all these columns are returned by default, so `:selected?` is true for all columns (this is a little\n  strange but it matches the behavior of the QB UI).\"\n  ([query]\n   (fieldable-columns query -1))\n\n  ([query :- ::lib.schema/query\n    stage-number :- :int]\n   (let [current-fields   (fields query stage-number)\n         selected-column? (if (empty? current-fields)\n                            (constantly true)\n                            (fn [column]\n                              (let [col-ref (lib.ref/ref column)]\n                                (boolean\n                                 (some (fn [fields-ref]\n                                         ;; FIXME: This should use [[lib.equality/find-closest-matching-ref]] instead.\n                                         #_{:clj-kondo/ignore [:deprecated-var]}\n                                         (lib.equality/ref= col-ref fields-ref))\n                                       current-fields)))))]\n     (mapv (fn [col]\n             (assoc col :selected? (selected-column? col)))\n           (lib.metadata.calculation/visible-columns query\n                                                     stage-number\n                                                     (lib.util/query-stage query stage-number)\n                                                     {:include-joined?              false\n                                                      :include-expressions?         false\n                                                      :include-implicitly-joinable? false})))))\n"]}