{"version":3,"sources":["metabase/mbql/schema.cljc"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAyBG,AA8BH;;;4CAAA,kFAAA,gEAAA,wDAAA,2DAAA,iEAAA,wEAAA,6DAAA,2EAAA,2EAAA,yDAAA,uEAAA,0EAAA,v1BAAKA;AAKL;;;4CAAA,iFAAA,0DAAA,8DAAA,iEAAA,wEAAA,wEAAA,8EAAA,phBAAKC;AAIL;;;AAAKC,gDAEH,AAACC,gDAAUH,0CAAqBC;AAElC;;;AAAKG,gCAEH,6HAAA,7HAACC,kBACA,AAACC,8CAAMC,kBAAOP;AAMjB;;;AAAKQ,gCAEH,6HAAA,7HAACH,kBACA,AAACC,8CAAMC,kBAAON;AAGjB;;;AAAKQ,oCAEH,iIAAA,jIAACJ,kBACA,AAACC,8CAAMC,kBAAOL;AAGjB;;;AAAKQ,kCAEH,2HAAA,3HAACL,kBAEU,AAACC,8CAAMC,kBAAO,AAAQ,AAAMI;AAGzC;;;AAAKC,4CAEH,8gCAAA,9gCAACP,kBACC,gEAAA,kFAAA,4FAAA,wEAAA,wEAAA,2EAAA,2EAAA,uEAAA,iFAAA,+EAAA,mFAAA,gFAAA,95BAACC,8CAAMC;AAaX;;;AAAKM,yCAEH,kpBAAA,lpBAACR,kBACC,gEAAA,iFAAA,gEAAA,wDAAA,0DAAA,2DAAA,8DAAA,6DAAA,yDAAA,ljBAACC,8CAAMC;AAGX;;;AAAKO,wCAEH,oWAAA,pWAACT,kBACC,gEAAA,iFAAA,mEAAA,yDAAA,7QAACC,8CAAMC;AAGX,AAAeQ,4CACb,qpBAAA,rpBAACV,kBACA,gEAAA,iFAAA,gEAAA,wDAAA,0DAAA,2DAAA,iEAAA,6DAAA,yDAAA,rjBAACC,8CAAMC;AAcP,iDAAA,jDAAOS,0GACJC;AADH,AAEE,GAAM,OAASA;AAAf,AACE,qEAAA,9DAACC,gDAAK,AAAQC,WAAQF;;AADxB;;;AAGL;;;AAAyBG,6CAGdJ;AAEX;;;AAAyBK,iDAGdL;AAEX;;;AAAyBM,6CAGdN;AAEX;;;AAAKO,yCAEH,6IAAA,7IAACC,sDAAcC,4CAAuBL;AAExC;;;AAAKM,6CAEH,iJAAA,jJAACF,sDAAcC,4CAAuBJ;AAExC;;;AAAKM,yCAEH,6IAAA,7IAACH,sDAAcC,4CAAuBH;AAGxC;;;yCAAA,AAAAM,yEAAA,iIAAA,kNAAA,OAAA,mFAAA,/hBAAWC,uPACJ,AAACC,4GAAW,eAAA,fAACC,4EAAeC,6KAClBjB;AAEjB;;;gCAAA,AAAAa,yEAAA,+GAAA,oBAAA,5OAAWK,4NACJD,uBACAjB;AAYP;;;AAAmDmB,yCAEjD,+GAAA,WAAAC,1HAACE;AAAD,AACE,OAACC,cAAS,8CAAA,+EAAAH,7HAACI;qQADb,WAAAH,7QAEC,yEAAA,iIAAA,SAAA,nNAACR,8MAIST,YAETV;AARF,AAUE,sDAA6CU,9CAAS,iBAAAiB,jBAACI;oQAVzD,jQAWC,yEAAA,iIAAA,YAAA,tNAACZ,iNAEyCT,YAClCf,0FAGR,yEAAA,iIAAA,gBAAA,1NAACwB,qNAIST,YAETV;AAQJ;;;4BAAA,AAAAmB,yEAAA,uGAAA,YAAA,xNAAsBa,mNAENtB,YACTX;AAEP;;;AAAekC,6CAEb,gfAAA,hfAACL,+GACA,8FAAA,9FAACM,gDAAQJ,8HACTL,uCAEAb,+CACAK,2CAEAN,2CACAG,6FAGA,AAACO,4GAWKX;AAET;;;AAAeyB,mCAEb,+WAAA,/WAACP,+GACA,8FAAA,9FAACM,gDAAQJ,oGACTE,0BAEAnB,2CACAK,6FAGA,AAACG,4GASKX;AAET;;;AAAe0B,uCAEb,AAACf,4GAAWc,iCAAYF;AAE1B;;;;AAAKI,qCAGH,AAAAC,iIAAA,mFAAA,iBAAAC,mBAAA,AAAA,iGAAA,AAAAC,eAAA,EAAA,QAAAC,qCAAAC,0CAAAC,iDAAAC,yDAAA,AAAA,KAAAC,cAAA;AAAA,AAAApB;GAAA,AAAA,mSAAA,wCAAA,gDAAA,qDAAA,sDAAA,iEAAA,mEAAA,yDAAA,6DAAA,oDAAA,6DAAA,6DAAA,mDAAA,sDAAA,AAAA,0TAAA,AAAA,mFAAA,AAAA,4BAAA,AAAA,GAAA,AAAA,+EAAA,AAAA,EAAA,AAAA,KAAA,AAAA,IAAA,AAAA,IAAA,AAAA,qBAAA,AAAA,6CAAA,kBAAAA,wCAAA,AAAA,AAAAA,sDAAA,UAAA;AAAA,AAAA,oBAAAc;AAAAA;;AAAA,AAAA;;oDAAA,mFAAA,iBAAAA,mBAAA,AAAA,iGAAA,AAAAC,eAAA,EAAA,QAAAC,qCAAAC,0CAAAC,iDAAAG,yDAAA,AAAA,KAAAD,cAAA,5eAAQpB;AAAR,AAAAL;GAAA,AAAA,kSAAA,wCAAA,gDAAA,qDAAA,sDAAA,iEAAA,mEAAA,yDAAA,oDAAA,6DAAA,mEAAA,6DAAA,mDAAA,sDAAA,AAAA,0TAAA,AAAA,oFAAA,AAAA,4BAAA,AAAA,GAAA,AAAA,+EAAA,AAAA,EAAA,AAAA,IAAA,AAAA,IAAA,AAAA,01BAAA,AAAA,qBAAA,AAAA,+CAAA,kBAAAA,wCAAA,AAAA,AAAAA,sDAAA,UAAA;AAAA,AAAA,oBAAAmB;AAAAA;;AAAA,AAAA;;oDAAA,mFAAA,iBAAAA,mBAAA,AAAA,iGAAA,AAAAC,eAAA,EAAA,QAAAC,qCAAAC,0CAAAC,iDAAAI,4CAAA,AAAA,KAAAF,cAAA,/dAA0BzB;AAA1B,AAAAY;GAAA,AAAA,yQAAA,wCAAA,gDAAA,qDAAA,sDAAA,iEAAA,mEAAA,yDAAA,6DAAA,oDAAA,6DAAA,mEAAA,6DAAA,mDAAA,sDAAA,AAAA,0TAAA,AAAA,0DAAA,AAAA,4BAAA,AAAA,GAAA,AAAA,qDAAA,AAAA,EAAA,AAAA,KAAA,AAAA,IAAA,AAAA,IAAA,AAAA,2gBAAA,AAAA,qBAAA,AAAA,kCAAA,kBAAAA,2BAAA,AAAA,AAAAA,yCAAA,UAAA;AAAA,AAAA,oBAAAO;AAAAA;;AAAA,AAAA;;KAA4CP;AAK9C;;;;qCAAA,rCAAKgB,qFAIF,yBAAA,zBAACC,gGAA+B,AAACC,kBAAQlC,6CACzC,yBAAA,zBAACiC,yFAA+B,AAACC,kBAAQC,wCACzC,yBAAA,zBAACF,gGAA+B,AAACC,kBAAQE,0DACzC,yBAAA,zBAACH,8EAA+B,AAACC,kBAAQlD,mCACzC,yBAAA,zBAACiD,+EAA+B,AAACC,kBAAQlC,6CACzCqC,oBAAgCC;AAQnC;;;6BAAA,AAAAnC,yEAAA,wGAAA,wBAAA,tOAAsBoC,sNACXD,4BACC,AAACJ,kBAAQF;AAUrB;;;kCAAA,AAAA7B,yEAAA,kHAAA,8DAAA,UAAA,mFAAA,xXAAiDqC,+OAC/BxC,sMACU,oEAAA,pEAACyC,+CAAOC;AAEpC;;;AAAKC,2CAEH,yGAAA,4DAAA,+DAAA,pOAACC;AAEH,0CAAA,1CAAOC,4FAAoBC;AAA3B,AACE,OAAC/C,sDACA+C,WACA,WAAAC;AAAA,AAAA,IAAAC,aAAAD;IAAAC,iBAAA,AAAAC,4BAAAD;eAAA,AAAAE,4CAAAF,eAAA,tEAAaG;gBAAb,AAAAD,4CAAAF,eAAA,vEAAsBI;AAAtB,AACE,GAAI,sDAAA,tDAACC,6CAAOF;AACVC;;AADF;;GAHH;;AAQF,yCAAA,zCAAOE,0FAAmBR;AAA1B,AACE,OAAC/C,sDACA+C,WACA,WAAAS;AAAA,AAAA,IAAAC,aAAAD;IAAAC,iBAAA,AAAAP,4BAAAO;eAAA,AAAAN,4CAAAM,eAAA,tEAAaL;eAAb,AAAAD,4CAAAM,eAAA,tEAAsBC;AAAtB,AACE,GAAI,sDAAA,tDAACJ,6CAAOF;AACVM;;AADF;;GAHH;;AAQF;;;AAAKC,2CAEH,uCAAA,wCAAA,gDAAA,8DAAiCf,yCAC5B,yBAAA,zBAACV,sFAA2B0B,gDAC5B,yBAAA,zBAAC1B,yFAA2B,iHAAA,jHAAClC,sDAAc6D,gBAAM,AAACC,qBAAWC,iDAC7DzB,oBAA4BC,9jBAC7BO,vCACAS;AAEN,AAAA;;;;gEAAA,wEAAAS,xIAAME;AAAN,AAAA,IAAAD,WAAA,AAAA;AAAA,AAAA,QAAAA;KAAA;AAAA,OAAAC,4FAAA,CAAA,UAAA;;;KAAA;AAAA,OAAAA,4FAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;;AAAA,MAAA,KAAAC,MAAA,CAAA,8DAAA,AAAA;;;;;AAAA,CAAA,8FAAA,WAAAC,zGAAMF;AAAN,AAAA,IAAAG,aAAAD;IAAAC,iBAAA,AAAAnB,4BAAAmB;qBAAAA,jBAGyCG;gBAHzC,AAAArB,4CAAAkB,eAAA,vEAGYC;oBAHZ,AAAAnB,4CAAAkB,eAAA,3EAGsBE;AAHtB,AAIG,OAACE,4FAAmCH,UAAUC;;;AAJjD,CAAA,8FAAA,9FAAML,yGAMFI,UAAUC;AANd,AAOG,IAAAG,qBAAe,kBAAM,iBAAAE,oBAAUL;AAAV,AAAA,oBAAAK;AAAwBN;;AAAxBM;;MAAN,AACE,iBAAAC,cAAA,WAAAC,iBAAAC;AAAA,AAAQ,0DAAAA,iBAAAD,pEAACG;;IAATD,cAAqBV;AAArB,AAAA,GAAA,AAAAO,YAAA,4DAAAG;AACiBxG;;AADjB,GAAA,AAAAqG,YAAA,4DAAAG;AAEiBvG;;AAFjB,GAAA,AAAAoG,YAAA,mEAAAG;AAGiBtG;;AAHjB;;;;KADF;AAAf,AAAA,oBAAAgG;AAAA,YAAAA,RAASC;AAAT,AAME,OAACO,0BAAUP,MAAMJ;;AANnB;;;;AAPH,CAAA,wFAAA,xFAAML;;AAAN,AAgBA,8CAAA,9CAAOiB,oGAAwBpC;AAA/B,AAGE,sIAAA,/HAAC/C,sDACA+C,WACAmB;;AAGH,uDAAA,vDAAOkB,sHAAiCrC;AAAxC,AACE,4JAAA,rJAAC/C,sDACA+C,WACA,qBAAA,rBAACe;;AAGJ,AAAeuB,oCACb,qDAAA,4CAAA,gDAAK,yBAAA,zBAACnD,yFAA+B,AAACC,kBAAQC,wCASzC,yBAAA,zBAACF,8FAA+B,AAACC,kBAAQ,AAAC7B,4GAAWsD,gDAA2B3D,mDAUhF,yBAAA,zBAACiC,kGAA+B,AAACC,kBAAQlD,mCAMzC,yBAAA,zBAACiD,2FAA+B,AAACC,kBAAQlC,6CAKzC,yBAAA,zBAACiC,qFAA+B,AAACC,kBAAQwB,0CAEzCrB,oBAAgCC,pgCACjC4C,rDACAC;AAEN,wDAAA,xDAAOE,wHAAkCvC;AAAzC,AACE,OAAC/C,sDACA+C,WACA,WAAAwC;AAAA,AAAA,IAAAC,aAAAD;QAAA,AAAAE,4CAAAD,WAAA,IAAA,/DAAMG;iBAAN,AAAAF,4CAAAD,WAAA,IAAA,xEAAQI;IAARF,aAAA,AAAAD,4CAAAD,WAAA,IAAA;IAAAE,iBAAA,AAAAxC,4BAAAwC;gBAAA,AAAAvC,4CAAAuC,eAAA,vEAA2BpB;AAA3B,AACE,GAAI,OAASsB;AACXtB;;AADF;;GAHH;;AAQF;;;AAA6CuB,6BAE3C,sDAAI,yEAAA,0GAAA,2NAAA,9YAACzF,gMAEa,AAACE,4GAAWsD,gDAA2B3D,4DACvC,AAACkC,kBAAQ,sBAAA,wEAAA,AAAA,gHAAA,wCAAA,2DAAA,gDAAA,qDAAA,sDAAA,iEAAA,yDAAA,oDAAA,6DAAA,6DAAA,mDAAA,sDAAA,AAAA,KAAA,AAAA,0TAAA,AAAA,0EAAA,AAAA,4BAAA,AAAA,GAAA,AAAA,EAAA,AAAA,IAAA,AAAA,IAAA,AAAA,qBAAA,AAAA,KAAA,kBAAAkD,mCAAA,AAAA,AAAAA,iDAAA,/4CAACS,heACxBR;AAEN;;;AAA6CS,sCAE3C,AAAC/F,sDACA6F,2BACA,WAAAG;AAAA,AAAA,IAAAC,aAAAD;QAAA,AAAAP,4CAAAQ,WAAA,IAAA,/DAAMN;iBAAN,AAAAF,4CAAAQ,WAAA,IAAA,xEAAQL;AAAR,AACE,OAACM,yBAASN;GAHb;AAMF,AAAeO,mCACb,AAAA5E,iIAAA,mFAAA,iBAAAC,mBAAA,AAAA,iGAAA,AAAAC,eAAA,EAAA,QAAAC,qCAAAC,0CAAAC,iDAAAwE,kDAAA,AAAA,KAAAtE,cAAA;AAAA,AAAAW;GAAA,AAAA,mRAAA,wCAAA,+EAAA,gDAAA,qDAAA,sDAAA,iEAAA,mEAAA,yDAAA,oDAAA,6DAAA,mEAAA,6DAAA,mDAAA,sDAAA,AAAA,yKAAA,AAAA,0TAAA,AAAA,qEAAA,AAAA,4BAAA,AAAA,GAAA,AAAA,gEAAA,AAAA,EAAA,AAAA,IAAA,AAAA,IAAA,AAAA,4uBAAA,AAAA,qBAAA,AAAA,wCAAA,kBAAAA,iCAAA,AAAA,AAAAA,+CAAA,UAAA;AAAA,AAAA,oBAAAjB;AAAAA;;AAAA,AAAA;;6CAAA,mFAAA,iBAAAA,mBAAA,AAAA,iGAAA,AAAAC,eAAA,EAAA,QAAAC,qCAAAC,0CAAAC,iDAAAyE,6CAAA,AAAA,KAAAvE,cAAA,zdAAQW;AAAR,AAAAoD;GAAA,AAAA,0QAAA,wCAAA,uDAAA,gDAAA,qDAAA,sDAAA,iEAAA,mEAAA,yDAAA,oDAAA,6DAAA,6DAAA,mDAAA,sDAAA,AAAA,SAAA,AAAA,0TAAA,AAAA,0DAAA,AAAA,4BAAA,AAAA,GAAA,AAAA,wDAAA,AAAA,EAAA,AAAA,IAAA,AAAA,IAAA,AAAA,qBAAA,AAAA,gCAAA,kBAAAA,4BAAA,AAAA,AAAAA,0CAAA,UAAA;AAAA,AAAA,oBAAArE;AAAAA;;AAAA,AAAA;;KAAmBqE;AAGrB;;;AAAKS,6BAEH,sBAAA,uEAAA,AAAA,qGAAA,wCAAA,2DAAA,gDAAA,qDAAA,sDAAA,iEAAA,yDAAA,oDAAA,6DAAA,6DAAA,mDAAA,sDAAA,AAAA,KAAA,AAAA,0TAAA,AAAA,8DAAA,AAAA,4BAAA,AAAA,GAAA,AAAA,EAAA,AAAA,IAAA,AAAA,IAAA,AAAA,qBAAA,AAAA,KAAA,kBAAAH,kCAAA,AAAA,AAAAA,gDAAA,r3CAACL;AAkBH;;;mCAAA,AAAA1F,yEAAA,qHAAA,2CAAA,UAAA,mFAAA,zWAAWmG,4PACgB/F,0KACU,oEAAA,pEAACkC,+CAAOC;AAE7C;;;AAAK6D,mDAEH,AAACC,gBAAK,8FAAA,9FAACtF,gDAAQJ,kHACbwF,iCACAD;AAOJ;;;wCAAA,kFAAA,2DAAA,4DAAA,oEAAA,gEAAA,+DAAA,iEAAA,0DAAA,4DAAA,yDAAA,oFAAA,xvBAAKI;AAIL,AAAA,AAEA,AAAeC,2CACb,+3DAAA,/3DAAC9F,+GACA+F,wBACAC,gBAEA,AAAC1F,gDAAQJ,8CAAW2F,uCACpB,sBAAA,4EAAA,AAAA,uHAAA,wCAAA,gDAAA,qDAAA,sDAAA,iEAAA,yDAAA,oDAAA,2DAAA,6DAAA,6DAAA,mDAAA,sDAAA,AAAA,0TAAA,AAAA,iFAAA,AAAA,4BAAA,AAAA,GAAA,AAAA,EAAA,AAAA,IAAA,AAAA,KAAA,AAAA,IAAA,AAAA,qBAAA,AAAA,KAAA,kBAAAI,uCAAA,AAAA,AAAAA,qDAAA,z6CAAChB,m7CAED,8FAAA,9FAAC3E,gDAAQJ,qGACTyB,iFAGA8D;AAEH;;;yCAAA,kFAAA,2DAAA,wEAAA,qDAAA,kFAAA,sEAAA,2DAAA,qDAAA,wDAAA,iEAAA,kEAAA,iEAAA,oDAAA,gFAAA,4DAAA,4DAAA,uEAAA,oDAAA,wDAAA,0DAAA,oEAAA,6DAAA,kEAAA,+DAAA,4EAAA,yDAAA,vqDAAKS;AAQL;;;yCAAA,iFAAA,sDAAA,oDAAA,qDAAA,wDAAA,sDAAA,uDAAA,wDAAA,oDAAA,1iBAAKC;AAIL,oCAAA,kFAAA,uDAAA,8DAAA,uEAAA,qEAAA,oEAAA,gEAAA,mEAAA,sEAAA,yFAAA,wDAAA,6DAAA,4DAAA,sDAAA,4DAAA,uDAAA,6DAAA,pnCAAeC;AAEf;;;0CAAA,iFAAA,yDAAA,kFAAA,mFAAA,oDAAA,7YAAKC;AAIL,AAAA,AACA,AAAA,AACA,AAAA,AACA,AAAA,AAEA,AAAeC,4CACb,45GAAA,55GAACtG,+GACAuG,wBACAvD,gBAEA,AAAC1C,gDAAQJ,8CAAWgG,wCACpB,sBAAA,6EAAA,AAAA,0HAAA,wCAAA,gDAAA,qDAAA,sDAAA,iEAAA,yDAAA,oDAAA,2DAAA,6DAAA,6DAAA,mDAAA,sDAAA,AAAA,0TAAA,AAAA,oFAAA,AAAA,4BAAA,AAAA,GAAA,AAAA,EAAA,AAAA,IAAA,AAAA,KAAA,AAAA,IAAA,AAAA,qBAAA,AAAA,KAAA,kBAAAM,wCAAA,AAAA,AAAAA,sDAAA,l7CAACvB,47CAED,AAAC3E,gDAAQJ,8CAAWkG,mCACpB,sBAAA,uEAAA,AAAA,+GAAA,wCAAA,gDAAA,qDAAA,sDAAA,iEAAA,yDAAA,oDAAA,2DAAA,6DAAA,6DAAA,mDAAA,sDAAA,AAAA,0TAAA,AAAA,uEAAA,AAAA,4BAAA,AAAA,GAAA,AAAA,EAAA,AAAA,IAAA,AAAA,KAAA,AAAA,IAAA,AAAA,qBAAA,AAAA,KAAA,kBAAAK,kCAAA,AAAA,AAAAA,gDAAA,x4CAACxB,k5CAED,8FAAA,9FAAC3E,gDAAQJ,qGACTyB,iFAGA8D;AAEH,AAAeiB,6CACb,43GAAA,53GAAC1G,+GACA,AAACM,gDAAQJ,8CAAWkG,mCACpB,sBAAA,uEAAA,AAAA,+GAAA,wCAAA,gDAAA,qDAAA,sDAAA,iEAAA,yDAAA,oDAAA,2DAAA,6DAAA,6DAAA,mDAAA,sDAAA,AAAA,0TAAA,AAAA,uEAAA,AAAA,4BAAA,AAAA,GAAA,AAAA,EAAA,AAAA,IAAA,AAAA,KAAA,AAAA,IAAA,AAAA,qBAAA,AAAA,KAAA,kBAAAK,kCAAA,AAAA,AAAAA,gDAAA,x4CAACxB,k5CAED,8FAAA,9FAAC3E,gDAAQJ,qGACTyB,2BAEA,AAACrB,gDAAQJ,8CAAWmG,yCACpB,sBAAA,8EAAA,AAAA,6HAAA,wCAAA,gDAAA,qDAAA,sDAAA,iEAAA,yDAAA,oDAAA,2DAAA,6DAAA,6DAAA,mDAAA,sDAAA,AAAA,0TAAA,AAAA,qFAAA,AAAA,4BAAA,AAAA,GAAA,AAAA,EAAA,AAAA,IAAA,AAAA,KAAA,AAAA,IAAA,AAAA,qBAAA,AAAA,KAAA,kBAAAM,yCAAA,AAAA,AAAAA,uDAAA,z7CAAC1B,y/CAGD,AAACxF,4GAAWY,2CAAsBoF;AAErC,AAAemB,qCACb,8pNAAA,9pNAAC5G,+GACAuG,wBACAvD,gBAEA6D,yBACAC,iBAEA,AAACxG,gDAAQJ,8CAAWiG,wCACpB,sBAAA,6EAAA,AAAA,0HAAA,wCAAA,gDAAA,qDAAA,sDAAA,iEAAA,yDAAA,oDAAA,2DAAA,6DAAA,6DAAA,mDAAA,sDAAA,AAAA,0TAAA,AAAA,mFAAA,AAAA,4BAAA,AAAA,GAAA,AAAA,EAAA,AAAA,IAAA,AAAA,KAAA,AAAA,IAAA,AAAA,qBAAA,AAAA,KAAA,kBAAAY,wCAAA,AAAA,AAAAA,sDAAA,j7CAAC9B,27CAED,AAAC3E,gDAAQJ,8CAAWgG,wCACpB,sBAAA,6EAAA,AAAA,0HAAA,wCAAA,gDAAA,qDAAA,sDAAA,iEAAA,yDAAA,oDAAA,2DAAA,6DAAA,6DAAA,mDAAA,sDAAA,AAAA,0TAAA,AAAA,oFAAA,AAAA,4BAAA,AAAA,GAAA,AAAA,EAAA,AAAA,IAAA,AAAA,KAAA,AAAA,IAAA,AAAA,qBAAA,AAAA,KAAA,kBAAAM,wCAAA,AAAA,AAAAA,sDAAA,l7CAACvB,47CAED,AAAC3E,gDAAQJ,8CAAWmG,yCACpB,sBAAA,8EAAA,AAAA,6HAAA,wCAAA,gDAAA,qDAAA,sDAAA,iEAAA,yDAAA,oDAAA,2DAAA,6DAAA,6DAAA,mDAAA,sDAAA,AAAA,0TAAA,AAAA,qFAAA,AAAA,4BAAA,AAAA,GAAA,AAAA,EAAA,AAAA,IAAA,AAAA,KAAA,AAAA,IAAA,AAAA,qBAAA,AAAA,KAAA,kBAAAM,yCAAA,AAAA,AAAAA,uDAAA,z7CAAC1B,m8CAEDc,wBACAC,gBAEA,AAAC1F,gDAAQJ,8CAAW2F,uCACpB,sBAAA,4EAAA,AAAA,uHAAA,wCAAA,gDAAA,qDAAA,sDAAA,iEAAA,yDAAA,oDAAA,2DAAA,6DAAA,6DAAA,mDAAA,sDAAA,AAAA,0TAAA,AAAA,iFAAA,AAAA,4BAAA,AAAA,GAAA,AAAA,EAAA,AAAA,IAAA,AAAA,KAAA,AAAA,IAAA,AAAA,qBAAA,AAAA,KAAA,kBAAAI,uCAAA,AAAA,AAAAA,qDAAA,z6CAAChB,m7CAED,8FAAA,9FAAC3E,gDAAQJ,qGACTyB,iFAGA8D;AAEH,AAAeuB,sDACb,AAACpB,gBAAK,8FAAA,9FAACtF,gDAAQJ,4GACbN,8BACA0G;AAEJ,AAAeW,6DACb,AAACrB,gBAAKW,wBACJxD,gDACAuD;AAEJ;;;gCAAA,AAAA/G,yEAAA,8GAAA,uCAAA,uCAAA,OAAA,mFAAA,/XAAiD2H,2NAC7CN,uCAAiBA,mLAA0BA;AAE/C;;;iCAAA,AAAArH,yEAAA,iHAAA,6CAAA,mEAAA,SAAA,mFAAA,vaAAiD4H,+NAC7CrB,iDAA2BmB,oNAAwDX;AAEvF;;;8BAAA,AAAA/G,yEAAA,0GAAA,jNAAiD6H,qNAC7CtB;AAEJ;;;4BAAA,AAAAvG,yEAAA,sGAAA,3MAAiD8H,+MAC7CvB;AAEJ;;;6BAAA,AAAAvG,yEAAA,yGAAA,/MAAiD+H,mNAC7CxB;AAEJ;;;6BAAA,AAAAvG,yEAAA,yGAAA,/MAAiDgI,mNAC7CzB;AAEJ;;;6BAAA,AAAAvG,yEAAA,wGAAA,9MAAiDiI,kNAC7C1B;AAEJ;;;6BAAA,AAAAvG,yEAAA,yGAAA,/MAAiDkI,mNAC7C3B;AAEJ;;;+BAAA,AAAAvG,yEAAA,6GAAA,6CAAA,wBAAA,1RAAiDmI,yNAC7C5B,iDAA2BE,8BAAmBA;AAElD;;;8BAAA,AAAAzG,yEAAA,4GAAA,6CAAA,6CAAA,OAAA,mFAAA,vYAAiDoI,uNAC7C7B,6CAAuBA,yLAAgCA;AAE3D;;;yCAAA,AAAAvG,yEAAA,iIAAA,6CAAA,hSAAwDqI,uPACpD9B,mDAA6BE;AAEjC;;;8BAAA,AAAAzG,yEAAA,iGAAA,wDAAA,wDAAA,OAAA,mFAAA,lZAAiDsI,4MAC7Cb,wDAAkCA,oMAA2CA;AAEjF;;;yBAAA,AAAAzH,yEAAA,kGAAA,8CAAA,wDAAA,OAAA,mFAAA,pYAAiDuI,wMAC7CxB,8CAAwBU,oMAA2CA;AAEvE;;;AAAAe,+BAAA,AAAAxI,yEAAA,iGAAA,8CAAA,8CAAA,OAAA,mFAAA,lLAAsD+G,8CAAwBA,0LAAiCA;AAE/G;;;8BAAA,AAAA/G,yEAAA,kGAAA,8CAAA,8CAAA,OAAA,mFAAA,/XAAiDyI,6MAAK1B,8CAAwBA,0LAAiCA;AAE/G;;;6BAAA,AAAA/G,yEAAA,yGAAA,/MAAiD0I,mNAC7C3B;AAEJ;;;4BAAA,AAAA/G,yEAAA,wGAAA,7MAAiD2I,iNAC7C5B;AAEJ;;;6BAAA,AAAA/G,yEAAA,yGAAA,/MAAiD4I,mNAC7C7B;AAEJ;;;2BAAA,AAAA/G,yEAAA,qGAAA,zMAAiD6I,6MAC7C9B;AAEJ;;;6BAAA,AAAA/G,yEAAA,yGAAA,8CAAA,7PAA+D8I,mNAC3D/B,8CAAyBA;AAE7B;;;4BAAA,AAAA/G,yEAAA,wGAAA,7MAA+D+I,iNAC3DhC;AAEJ;;;2BAAA,AAAA/G,yEAAA,qGAAA,zMAA+DgJ,6MAC3DjC;AAEJ;;;2BAAA,AAAA/G,yEAAA,sGAAA,1MAA+DiJ,8MAC3DlC;AAEJ,AAAA,AAEA;;;AAAeE,yCAEb,sBAAA,mFAAA,AAAA,4HAAA,wCAAA,gDAAA,qDAAA,sDAAA,iEAAA,yDAAA,oDAAA,2DAAA,6DAAA,6DAAA,mDAAA,sDAAA,AAAA,0TAAA,AAAA,sFAAA,AAAA,4BAAA,AAAA,GAAA,AAAA,EAAA,AAAA,IAAA,AAAA,KAAA,AAAA,IAAA,AAAA,qBAAA,AAAA,KAAA,kBAAAiC,8CAAA,AAAA,AAAAA,4DAAA,x8CAACxD;AAYH;;;qCAAA,AAAA1F,yEAAA,yHAAA,wDAAA,wDAAA,vVAAmDmJ,oPACtChC,wDACAA,kDACAlI;AAEb;;;wCAAA,AAAAe,yEAAA,+HAAA,sDAAA,iDAAA,OAAA,mFAAA,jbAAsDoJ,2PAC3CjC,kDACAnI,iMACUE;AAGrB;;;gCAAA,AAAAc,yEAAA,+GAAA,xNAA8DqJ,+NACvDlC;AAEP;;;mCAAA,AAAAnH,yEAAA,qHAAA,jOAA8DsJ,wOACvDnC;AAEP;;;iCAAA,AAAAnH,yEAAA,iHAAA,3NAA8DuJ,kOACvDpC;AAEP;;;gCAAA,AAAAnH,yEAAA,+GAAA,kDAAA,OAAA,mFAAA,pWAA8DwJ,+NACvDrC,kMACUjI;AAEjB;;;+BAAA,AAAAc,yEAAA,4GAAA,pNAA8DyJ,2NACvDtC;AAEP;;;uCAAA,AAAAnH,yEAAA,6HAAA,7OAA8D0J,oPACvDvC;AAEP;;;gCAAA,AAAAnH,yEAAA,8GAAA,vNAA8D2J,kOACnDxC;AAEX;;;kCAAA,AAAAnH,yEAAA,mHAAA,9NAA8D4J,yOACnDzC;AAEX;;;kCAAA,AAAAnH,yEAAA,oHAAA,/NAA8D6J,0OACnD1C;AAEX;;;wCAAA,AAAAnH,yEAAA,+HAAA,sDAAA,qCAAA,OAAA,mFAAA,raAAsD8J,2PAC3C3C,gDACArI,uLACUA;AAErB,AAAeiL,8CACb,0tBAAA,1tBAACtL,kBACA,gEAAA,iFAAA,gEAAA,wDAAA,0DAAA,2DAAA,8DAAA,6DAAA,yDAAA,wEAAA,1nBAACC,8CAAMC;AAGV;;;oCAAA,AAAAqB,yEAAA,sHAAA,sDAAA,mDAAA,5UAAsDgK,8OAC3C7C,oDACAJ,iDACAgD;AAEX;;;2BAAA,AAAAE,oCAAA,/DAAyCC;AAEzC;;;yCAAA,AAAAlK,yEAAA,gIAAA,sDAAA,mDAAA,3VAAsDmK,6PAC3ChD,oDACAJ,iDACAgD;AAEX,AAAeK,gDACb,AAAAjJ,iIAAA,mFAAA,iBAAAC,mBAAA,AAAA,iGAAA,AAAAC,eAAA,EAAA,QAAAC,qCAAAC,0CAAAC,iDAAA6I,8CAAA,AAAA,KAAA3I,cAAA;AAAA,AAAA4G;GAAA,AAAA,mQAAA,wCAAA,+EAAA,gDAAA,qDAAA,sDAAA,iEAAA,mEAAA,yDAAA,oDAAA,6DAAA,mEAAA,6DAAA,mDAAA,sDAAA,AAAA,yKAAA,AAAA,0TAAA,AAAA,mDAAA,AAAA,4BAAA,AAAA,GAAA,AAAA,+CAAA,AAAA,EAAA,AAAA,IAAA,AAAA,IAAA,AAAA,+4BAAA,AAAA,qBAAA,AAAA,+BAAA,kBAAAA,6BAAA,AAAA,AAAAA,2CAAA,UAAA;AAAA,AAAA,oBAAAlH;AAAAA;;AAAA,AAAA;;yCAAA,mFAAA,iBAAAA,mBAAA,AAAA,iGAAA,AAAAC,eAAA,EAAA,QAAAC,qCAAAC,0CAAAC,iDAAA8I,oDAAA,AAAA,KAAA5I,cAAA,5dAAQ4G;AAAR,AAAA0B;GAAA,AAAA,uRAAA,wCAAA,+EAAA,gDAAA,qDAAA,sDAAA,iEAAA,mEAAA,yDAAA,oDAAA,6DAAA,mEAAA,6DAAA,mDAAA,sDAAA,AAAA,qLAAA,AAAA,0TAAA,AAAA,yEAAA,AAAA,4BAAA,AAAA,GAAA,AAAA,oEAAA,AAAA,EAAA,AAAA,IAAA,AAAA,IAAA,AAAA,2zBAAA,AAAA,qBAAA,AAAA,0CAAA,kBAAAA,mCAAA,AAAA,AAAAA,iDAAA,UAAA;AAAA,AAAA,oBAAA5I;AAAAA;;AAAA,AAAA;;+CAAA,mFAAA,iBAAAA,mBAAA,AAAA,iGAAA,AAAAC,eAAA,EAAA,QAAAC,qCAAAC,0CAAAC,iDAAA+I,yDAAA,AAAA,KAAA7I,cAAA,veAAUsI;AAAV,AAAAG;GAAA,AAAA,mSAAA,wCAAA,+EAAA,gDAAA,qDAAA,sDAAA,iEAAA,mEAAA,yDAAA,oDAAA,6DAAA,mEAAA,6DAAA,mDAAA,sDAAA,AAAA,qLAAA,AAAA,0TAAA,AAAA,mFAAA,AAAA,4BAAA,AAAA,GAAA,AAAA,8EAAA,AAAA,EAAA,AAAA,IAAA,AAAA,IAAA,AAAA,q0BAAA,AAAA,qBAAA,AAAA,+CAAA,kBAAAA,wCAAA,AAAA,AAAAA,sDAAA,UAAA;AAAA,AAAA,oBAAA/I;AAAAA;;AAAA,AAAA;;oDAAA,mFAAA,iBAAAA,mBAAA,AAAA,iGAAA,AAAAC,eAAA,EAAA,QAAAC,qCAAAC,0CAAAC,iDAAAgJ,wDAAA,AAAA,KAAA9I,cAAA,3eAAuByI;AAAvB,AAAAL;GAAA,AAAA,gSAAA,wCAAA,+EAAA,gDAAA,qDAAA,sDAAA,iEAAA,mEAAA,yDAAA,oDAAA,6DAAA,mEAAA,6DAAA,mDAAA,sDAAA,AAAA,oLAAA,AAAA,0TAAA,AAAA,iFAAA,AAAA,4BAAA,AAAA,GAAA,AAAA,6EAAA,AAAA,EAAA,AAAA,IAAA,AAAA,IAAA,AAAA,m2BAAA,AAAA,qBAAA,AAAA,8CAAA,kBAAAA,uCAAA,AAAA,AAAAA,qDAAA,UAAA;AAAA,AAAA,oBAAA1I;AAAAA;;AAAA,AAAA;;mDAAA,mFAAA,iBAAAA,mBAAA,AAAA,iGAAA,AAAAC,eAAA,EAAA,QAAAC,qCAAAC,0CAAAC,iDAAAiJ,2CAAA,AAAA,KAAA/I,cAAA,7dAAyCoI;AAAzC,AAAAI;GAAA,AAAA,qQAAA,wCAAA,+EAAA,gDAAA,qDAAA,sDAAA,iEAAA,mEAAA,yDAAA,oDAAA,6DAAA,mEAAA,6DAAA,mDAAA,sDAAA,AAAA,2JAAA,AAAA,0TAAA,AAAA,qDAAA,AAAA,4BAAA,AAAA,GAAA,AAAA,oDAAA,AAAA,EAAA,AAAA,IAAA,AAAA,IAAA,AAAA,+IAAA,AAAA,qBAAA,AAAA,iCAAA,kBAAAA,0BAAA,AAAA,AAAAA,wCAAA,UAAA;AAAA,AAAA,oBAAA9I;AAAAA;;AAAA,AAAA;;KAA0D8I;AAE5D;;;AAAK9C,0CAEH,sBAAA,oFAAA,AAAA,+HAAA,wCAAA,2DAAA,gDAAA,qDAAA,sDAAA,iEAAA,yDAAA,oDAAA,6DAAA,6DAAA,mDAAA,sDAAA,AAAA,KAAA,AAAA,0TAAA,AAAA,uFAAA,AAAA,4BAAA,AAAA,GAAA,AAAA,EAAA,AAAA,IAAA,AAAA,IAAA,AAAA,qBAAA,AAAA,KAAA,kBAAAgD,+CAAA,AAAA,AAAAA,6DAAA,/8CAAC1E;AAEH,AAAA,AAEA;;;AAAegB,wCAEb,sBAAA,kFAAA,AAAA,yHAAA,wCAAA,gDAAA,qDAAA,sDAAA,iEAAA,yDAAA,oDAAA,2DAAA,6DAAA,6DAAA,mDAAA,sDAAA,AAAA,0TAAA,AAAA,mFAAA,AAAA,4BAAA,AAAA,GAAA,AAAA,EAAA,AAAA,IAAA,AAAA,KAAA,AAAA,IAAA,AAAA,qBAAA,AAAA,KAAA,kBAAAgE,6CAAA,AAAA,AAAAA,2DAAA,/7CAAChF;AAIH,AAAA,AAEA;;;2BAAA,AAAA1F,yEAAA,qGAAA,83CAAA,+3CAAA,gBAAA,mFAAA,ziGAAW2K,wNACK,sBAAA,kEAAA,AAAA,qGAAA,wCAAA,gDAAA,qDAAA,sDAAA,iEAAA,yDAAA,oDAAA,2DAAA,6DAAA,6DAAA,mDAAA,sDAAA,AAAA,0TAAA,AAAA,6DAAA,AAAA,4BAAA,AAAA,GAAA,AAAA,EAAA,AAAA,IAAA,AAAA,KAAA,AAAA,IAAA,AAAA,qBAAA,AAAA,KAAA,kBAAAC,6BAAA,AAAA,AAAAA,2CAAA,r2CAAClF,+3CACD,sBAAA,kEAAA,AAAA,qGAAA,wCAAA,gDAAA,qDAAA,sDAAA,iEAAA,yDAAA,oDAAA,2DAAA,6DAAA,6DAAA,mDAAA,sDAAA,AAAA,0TAAA,AAAA,6DAAA,AAAA,4BAAA,AAAA,GAAA,AAAA,EAAA,AAAA,IAAA,AAAA,KAAA,AAAA,IAAA,AAAA,qBAAA,AAAA,KAAA,kBAAAkF,6BAAA,AAAA,AAAAA,2CAAA,r2CAAClF,wgDACK,sBAAA,kEAAA,AAAA,qGAAA,wCAAA,gDAAA,qDAAA,sDAAA,iEAAA,yDAAA,oDAAA,2DAAA,6DAAA,6DAAA,mDAAA,sDAAA,AAAA,0TAAA,AAAA,6DAAA,AAAA,4BAAA,AAAA,GAAA,AAAA,EAAA,AAAA,IAAA,AAAA,KAAA,AAAA,IAAA,AAAA,qBAAA,AAAA,KAAA,kBAAAkF,6BAAA,AAAA,AAAAA,2CAAA,r2CAAClF;AAEvB;;;0BAAA,AAAA1F,yEAAA,kGAAA,83CAAA,+3CAAA,gBAAA,mFAAA,riGAAW6K,oNACK,sBAAA,kEAAA,AAAA,qGAAA,wCAAA,gDAAA,qDAAA,sDAAA,iEAAA,yDAAA,oDAAA,2DAAA,6DAAA,6DAAA,mDAAA,sDAAA,AAAA,0TAAA,AAAA,6DAAA,AAAA,4BAAA,AAAA,GAAA,AAAA,EAAA,AAAA,IAAA,AAAA,KAAA,AAAA,IAAA,AAAA,qBAAA,AAAA,KAAA,kBAAAD,6BAAA,AAAA,AAAAA,2CAAA,r2CAAClF,+3CACD,sBAAA,kEAAA,AAAA,qGAAA,wCAAA,gDAAA,qDAAA,sDAAA,iEAAA,yDAAA,oDAAA,2DAAA,6DAAA,6DAAA,mDAAA,sDAAA,AAAA,0TAAA,AAAA,6DAAA,AAAA,4BAAA,AAAA,GAAA,AAAA,EAAA,AAAA,IAAA,AAAA,KAAA,AAAA,IAAA,AAAA,qBAAA,AAAA,KAAA,kBAAAkF,6BAAA,AAAA,AAAAA,2CAAA,r2CAAClF,wgDACK,sBAAA,kEAAA,AAAA,qGAAA,wCAAA,gDAAA,qDAAA,sDAAA,iEAAA,yDAAA,oDAAA,2DAAA,6DAAA,6DAAA,mDAAA,sDAAA,AAAA,0TAAA,AAAA,6DAAA,AAAA,4BAAA,AAAA,GAAA,AAAA,EAAA,AAAA,IAAA,AAAA,KAAA,AAAA,IAAA,AAAA,qBAAA,AAAA,KAAA,kBAAAkF,6BAAA,AAAA,AAAAA,2CAAA,r2CAAClF;AAEvB;;;2BAAA,AAAA1F,yEAAA,qGAAA,zMAAW8K,kNAAY,sBAAA,kEAAA,AAAA,qGAAA,wCAAA,gDAAA,qDAAA,sDAAA,iEAAA,yDAAA,oDAAA,2DAAA,6DAAA,6DAAA,mDAAA,sDAAA,AAAA,0TAAA,AAAA,6DAAA,AAAA,4BAAA,AAAA,GAAA,AAAA,EAAA,AAAA,IAAA,AAAA,KAAA,AAAA,IAAA,AAAA,qBAAA,AAAA,KAAA,kBAAAF,6BAAA,AAAA,AAAAA,2CAAA,r2CAAClF;AAExB,AAAeqF,+CACb,AAAC1E,gBAAK,8FAAA,9FAACtF,gDAAQJ,8HACdV,uCACAiG;AAEH;;;AAAe8E,0CAEb,AAACjJ,kBACA,AAAC7B,4GACAqH,iBACA9D,gBACAgD,gBACAxF,qCACA8J,6CACA1D,mCACAjF;AAEJ;;;AAAe6I,uCAEb,AAAC5E,gBAAK,8FAAA,9FAACtF,gDAAQJ,qGACbyB,2BACA,AAAClC,4GACAuD,gBACAgD,gBACAxF,qCACAoG,mCACA0D;AAeL;;;4BAAA,AAAA/K,yEAAA,iGAAA,gDAAA,yDAAA,wBAAA,mFAAA,1ZAAWkL,8MAAUF,yDAAmCA,yMAAgDA;AACxG;;;kCAAA,AAAAhL,yEAAA,oGAAA,gDAAA,yDAAA,wBAAA,mFAAA,naAAWmL,uNAAUH,yDAAmCA,yMAAgDA;AAExG;;;4BAAA,AAAAhL,yEAAA,iGAAA,6CAAA,nPAAWoL,8MAAUH,sDAAgCA;AACrD;;;4BAAA,AAAAjL,yEAAA,iGAAA,6CAAA,nPAAWqL,8MAAUJ,sDAAgCA;AACrD;;;gCAAA,AAAAjL,yEAAA,mGAAA,6CAAA,zPAAWsL,oNAAUL,sDAAgCA;AACrD;;;gCAAA,AAAAjL,yEAAA,mGAAA,6CAAA,zPAAWuL,oNAAUN,sDAAgCA;AAGrD;;;+BAAA,AAAAjL,yEAAA,6GAAA,6CAAA,2CAAA,7SAAWwL,6NAAcP,2CAAqBA,2CAAqBA;AAGnE;;;8BAAA,AAAAjL,yEAAA,2GAAA,iDAAA,iDAAA,+CAAA,+CAAA,+CAAA,jcAAmByL,8NACPR,iDACAA,+CACAA,+CACAA,+CACAA,+CACAA;AAGZ;;;+BAAA,AAAAjL,yEAAA,8GAAA,tNAAmB0L,8NAAgBxF;AACnC;;;gCAAA,AAAAlG,yEAAA,gHAAA,zNAAmB2L,iOAAgBzF;AAInC;;;gCAAA,AAAAlG,yEAAA,gHAAA,zNAAmB4L,iOAAiB1F;AACpC;;;iCAAA,AAAAlG,yEAAA,gHAAA,1NAAmB6L,kOAAiB3F;AAEpC,2CAAA,3CAAe4F,2FACZ,yBAAA,zBAAChK,oGAAgCyF;AAEpC;;;mCAAA,AAAAvH,yEAAA,oHAAA,iDAAA,2DAAA,UAAA,mFAAA,zaAAW+L,wOAAmBxF,2DAAqCA,mMAAuCuF;AAC1G;;;iCAAA,AAAA9L,yEAAA,iHAAA,iDAAA,2DAAA,UAAA,mFAAA,paAAWgM,mOAAmBzF,2DAAqCA,mMAAuCuF;AAC1G;;;gCAAA,AAAA9L,yEAAA,8GAAA,iDAAA,2DAAA,UAAA,mFAAA,haAAWiM,+NAAmB1F,2DAAqCA,mMAAuCuF;AAG1G;;;wCAAA,AAAA9L,yEAAA,+HAAA,iDAAA,2DAAA,UAAA,mFAAA,zbAAmBkM,wPACX3F,2DAAqCA,mMAAuCuF;AAEpF,2CAAA,3CAAeK,2FAGZ,yBAAA,zBAACrK,sGAAiCyF;AAcrC;;;qCAAA,AAAAvH,yEAAA,wHAAA,mCAAA,2ZAAA,iDAAA,UAAA,mFAAA,lzBAAmBoM,8OACTlG,+BACA,AAAChG,4GACAE,gBACA,yGAAA,4DAAA,qDAAA,1NAACqC,kSACFtD,oMACUgN;AAOpB;;;+BAAA,AAAAnM,yEAAA,6GAAA,rNAAmBqM,kOAAoB,AAACnM,4GAAWsD,gDAA2B3D;AAE9E,AAAA,AAEA;;;AAAe2H,yCAEb,sBAAA,mFAAA,AAAA,4HAAA,wCAAA,gDAAA,qDAAA,sDAAA,iEAAA,yDAAA,oDAAA,2DAAA,6DAAA,6DAAA,mDAAA,sDAAA,AAAA,0TAAA,AAAA,oFAAA,AAAA,4BAAA,AAAA,GAAA,AAAA,EAAA,AAAA,IAAA,AAAA,KAAA,AAAA,IAAA,AAAA,qBAAA,AAAA,KAAA,kBAAA8E,8CAAA,AAAA,AAAAA,4DAAA,t8CAAC5G;AAEH,AAAe4G,+CACb,AAAAnL,iIAAA,mFAAA,iBAAAC,mBAAA,AAAA,iGAAA,AAAAC,eAAA,EAAA,QAAAC,qCAAAC,0CAAAC,iDAAA+K,2CAAA,AAAA,KAAA7K,cAAA;AAAA,AAAAiJ;GAAA,AAAA,sQAAA,wCAAA,gDAAA,qDAAA,sDAAA,iEAAA,mEAAA,yDAAA,oDAAA,6DAAA,mEAAA,6DAAA,mDAAA,sDAAA,AAAA,0TAAA,AAAA,sDAAA,AAAA,4BAAA,AAAA,GAAA,AAAA,mDAAA,AAAA,EAAA,AAAA,IAAA,AAAA,IAAA,AAAA,ixCAAA,AAAA,qBAAA,AAAA,iCAAA,kBAAAA,0BAAA,AAAA,AAAAA,wCAAA,UAAA;AAAA,AAAA,oBAAAvJ;AAAAA;;AAAA,AAAA;;sCAAA,mFAAA,iBAAAA,mBAAA,AAAA,iGAAA,AAAAC,eAAA,EAAA,QAAAC,qCAAAC,0CAAAC,iDAAAgL,0CAAA,AAAA,KAAA9K,cAAA,/cAAQiJ;AAAR,AAAAE;GAAA,AAAA,qQAAA,wCAAA,gDAAA,qDAAA,sDAAA,iEAAA,mEAAA,yDAAA,oDAAA,6DAAA,mEAAA,6DAAA,mDAAA,sDAAA,AAAA,0TAAA,AAAA,qDAAA,AAAA,4BAAA,AAAA,GAAA,AAAA,gDAAA,AAAA,EAAA,AAAA,IAAA,AAAA,IAAA,AAAA,8wCAAA,AAAA,qBAAA,AAAA,gCAAA,kBAAAA,yBAAA,AAAA,AAAAA,uCAAA,UAAA;AAAA,AAAA,oBAAAzJ;AAAAA;;AAAA,AAAA;;qCAAA,mFAAA,iBAAAA,mBAAA,AAAA,iGAAA,AAAAC,eAAA,EAAA,QAAAC,qCAAAC,0CAAAC,iDAAAiL,2CAAA,AAAA,KAAA/K,cAAA,/cAAYmJ;AAAZ,AAAAC;GAAA,AAAA,sQAAA,wCAAA,gDAAA,qDAAA,sDAAA,iEAAA,mEAAA,yDAAA,oDAAA,6DAAA,mEAAA,6DAAA,mDAAA,sDAAA,AAAA,0TAAA,AAAA,uDAAA,AAAA,4BAAA,AAAA,GAAA,AAAA,mDAAA,AAAA,EAAA,AAAA,IAAA,AAAA,IAAA,AAAA,0eAAA,AAAA,qBAAA,AAAA,iCAAA,kBAAAA,0BAAA,AAAA,AAAAA,wCAAA,UAAA;AAAA,AAAA,oBAAA1J;AAAAA;;AAAA,AAAA;;sCAAA,mFAAA,iBAAAA,mBAAA,AAAA,iGAAA,AAAAC,eAAA,EAAA,QAAAC,qCAAAC,0CAAAC,iDAAAkL,4CAAA,AAAA,KAAAhL,cAAA,jdAAeoJ;AAAf,AAAAM;GAAA,AAAA,mQAAA,wCAAA,gDAAA,qDAAA,sDAAA,iEAAA,mEAAA,yDAAA,oDAAA,6DAAA,mEAAA,6DAAA,mDAAA,sDAAA,AAAA,0TAAA,AAAA,kDAAA,AAAA,4BAAA,AAAA,GAAA,AAAA,+CAAA,AAAA,EAAA,AAAA,IAAA,AAAA,IAAA,AAAA,8jBAAA,AAAA,qBAAA,AAAA,+BAAA,kBAAAA,2BAAA,AAAA,AAAAA,yCAAA,UAAA;AAAA,AAAA,oBAAAhK;AAAAA;;AAAA,AAAA;;uCAAA,mFAAA,iBAAAA,mBAAA,AAAA,iGAAA,AAAAC,eAAA,EAAA,QAAAC,qCAAAC,0CAAAC,iDAAAmL,gDAAA,AAAA,KAAAjL,cAAA,tdAAmB0J;AAAnB,AAAAE;GAAA,AAAA,qQAAA,wCAAA,gDAAA,qDAAA,sDAAA,iEAAA,mEAAA,yDAAA,oDAAA,6DAAA,mEAAA,6DAAA,mDAAA,sDAAA,AAAA,0TAAA,AAAA,qDAAA,AAAA,4BAAA,AAAA,GAAA,AAAA,iDAAA,AAAA,EAAA,AAAA,IAAA,AAAA,IAAA,AAAA,gkBAAA,AAAA,qBAAA,AAAA,gCAAA,kBAAAA,+BAAA,AAAA,AAAAA,6CAAA,UAAA;AAAA,AAAA,oBAAAlK;AAAAA;;AAAA,AAAA;;2CAAA,mFAAA,iBAAAA,mBAAA,AAAA,iGAAA,AAAAC,eAAA,EAAA,QAAAC,qCAAAC,0CAAAC,iDAAAoL,4CAAA,AAAA,KAAAlL,cAAA,tdAAqB4J;AAArB,AAAAD;GAAA,AAAA,mQAAA,wCAAA,gDAAA,qDAAA,sDAAA,iEAAA,mEAAA,yDAAA,oDAAA,6DAAA,mEAAA,6DAAA,mDAAA,sDAAA,AAAA,0TAAA,AAAA,mDAAA,AAAA,4BAAA,AAAA,GAAA,AAAA,+CAAA,AAAA,EAAA,AAAA,IAAA,AAAA,IAAA,AAAA,8jBAAA,AAAA,qBAAA,AAAA,+BAAA,kBAAAA,2BAAA,AAAA,AAAAA,yCAAA,UAAA;AAAA,AAAA,oBAAAjK;AAAAA;;AAAA,AAAA;;uCAAA,mFAAA,iBAAAA,mBAAA,AAAA,iGAAA,AAAAC,eAAA,EAAA,QAAAC,qCAAAC,0CAAAC,iDAAAqL,gDAAA,AAAA,KAAAnL,cAAA,tdAAwB2J;AAAxB,AAAAE;GAAA,AAAA,oQAAA,wCAAA,gDAAA,qDAAA,sDAAA,iEAAA,mEAAA,yDAAA,oDAAA,6DAAA,mEAAA,6DAAA,mDAAA,sDAAA,AAAA,0TAAA,AAAA,qDAAA,AAAA,4BAAA,AAAA,GAAA,AAAA,iDAAA,AAAA,EAAA,AAAA,IAAA,AAAA,IAAA,AAAA,gkBAAA,AAAA,qBAAA,AAAA,gCAAA,kBAAAA,+BAAA,AAAA,AAAAA,6CAAA,UAAA;AAAA,AAAA,oBAAAnK;AAAAA;;AAAA,AAAA;;2CAAA,mFAAA,iBAAAA,mBAAA,AAAA,iGAAA,AAAAC,eAAA,EAAA,QAAAC,qCAAAC,0CAAAC,iDAAAsL,4CAAA,AAAA,KAAApL,cAAA,tdAA0B6J;AAA1B,AAAAL;GAAA,AAAA,kQAAA,wCAAA,gDAAA,qDAAA,sDAAA,iEAAA,mEAAA,yDAAA,oDAAA,6DAAA,mEAAA,6DAAA,mDAAA,sDAAA,AAAA,0TAAA,AAAA,oDAAA,AAAA,4BAAA,AAAA,GAAA,AAAA,+CAAA,AAAA,EAAA,AAAA,IAAA,AAAA,IAAA,AAAA,84BAAA,AAAA,qBAAA,AAAA,+BAAA,kBAAAA,2BAAA,AAAA,AAAAA,yCAAA,UAAA;AAAA,AAAA,oBAAA9J;AAAAA;;AAAA,AAAA;;uCAAA,mFAAA,iBAAAA,mBAAA,AAAA,iGAAA,AAAAC,eAAA,EAAA,QAAAC,qCAAAC,0CAAAC,iDAAAuL,kDAAA,AAAA,KAAArL,cAAA,xdAA6BwJ;AAA7B,AAAAC;GAAA,AAAA,oQAAA,wCAAA,gDAAA,qDAAA,sDAAA,iEAAA,mEAAA,yDAAA,oDAAA,6DAAA,mEAAA,6DAAA,mDAAA,sDAAA,AAAA,0TAAA,AAAA,qDAAA,AAAA,4BAAA,AAAA,GAAA,AAAA,kDAAA,AAAA,EAAA,AAAA,IAAA,AAAA,IAAA,AAAA,i5BAAA,AAAA,qBAAA,AAAA,gCAAA,kBAAAA,iCAAA,AAAA,AAAAA,+CAAA,UAAA;AAAA,AAAA,oBAAA/J;AAAAA;;AAAA,AAAA;;KAA+B+J;AAEjC,AAAe6B,oCACb,myBAAA,nyBAACvM,+GACA,AAACM,gDAAQJ,8CAAWmG,yCAAoBM,wCACxC,AAACrG,gDAAQJ,8CAAWgG,wCAAoBM,uCACxC,AAAClG,gDAAQJ,8CAAW2F,uCAAoBI,sCACxC,AAAC3F,gDAAQJ,8CAAWiG,wCAAoBY,6FAExC,AAAArG,iIAAA,mFAAA,iBAAAC,mBAAA,AAAA,iGAAA,AAAAC,eAAA,EAAA,QAAAC,qCAAAC,0CAAAC,iDAAA+K,2CAAA,AAAA,KAAA7K,cAAA;AAAA,AAAAiJ;GAAA,AAAA,sQAAA,wCAAA,gDAAA,qDAAA,sDAAA,iEAAA,mEAAA,yDAAA,oDAAA,6DAAA,mEAAA,6DAAA,mDAAA,sDAAA,AAAA,0TAAA,AAAA,sDAAA,AAAA,4BAAA,AAAA,GAAA,AAAA,mDAAA,AAAA,EAAA,AAAA,IAAA,AAAA,IAAA,AAAA,ixCAAA,AAAA,qBAAA,AAAA,iCAAA,kBAAAA,0BAAA,AAAA,AAAAA,wCAAA,UAAA;AAAA,AAAA,oBAAAvJ;AAAAA;;AAAA,AAAA;;sCAAA,mFAAA,iBAAAA,mBAAA,AAAA,iGAAA,AAAAC,eAAA,EAAA,QAAAC,qCAAAC,0CAAAC,iDAAAgL,0CAAA,AAAA,KAAA9K,cAAA,/cAECiJ;AAFD,AAAAE;GAAA,AAAA,qQAAA,wCAAA,gDAAA,qDAAA,sDAAA,iEAAA,mEAAA,yDAAA,oDAAA,6DAAA,mEAAA,6DAAA,mDAAA,sDAAA,AAAA,0TAAA,AAAA,qDAAA,AAAA,4BAAA,AAAA,GAAA,AAAA,gDAAA,AAAA,EAAA,AAAA,IAAA,AAAA,IAAA,AAAA,8wCAAA,AAAA,qBAAA,AAAA,gCAAA,kBAAAA,yBAAA,AAAA,AAAAA,uCAAA,UAAA;AAAA,AAAA,oBAAAzJ;AAAAA;;AAAA,AAAA;;qCAAA,mFAAA,iBAAAA,mBAAA,AAAA,iGAAA,AAAAC,eAAA,EAAA,QAAAC,qCAAAC,0CAAAC,iDAAAiL,2CAAA,AAAA,KAAA/K,cAAA,/cAEKmJ;AAFL,AAAAC;GAAA,AAAA,sQAAA,wCAAA,gDAAA,qDAAA,sDAAA,iEAAA,mEAAA,yDAAA,oDAAA,6DAAA,mEAAA,6DAAA,mDAAA,sDAAA,AAAA,0TAAA,AAAA,uDAAA,AAAA,4BAAA,AAAA,GAAA,AAAA,mDAAA,AAAA,EAAA,AAAA,IAAA,AAAA,IAAA,AAAA,0eAAA,AAAA,qBAAA,AAAA,iCAAA,kBAAAA,0BAAA,AAAA,AAAAA,wCAAA,UAAA;AAAA,AAAA,oBAAA1J;AAAAA;;AAAA,AAAA;;sCAAA,mFAAA,iBAAAA,mBAAA,AAAA,iGAAA,AAAAC,eAAA,EAAA,QAAAC,qCAAAC,0CAAAC,iDAAAsL,4CAAA,AAAA,KAAApL,cAAA,jdAEQoJ;AAFR,AAAAI;GAAA,AAAA,kQAAA,wCAAA,gDAAA,qDAAA,sDAAA,iEAAA,mEAAA,yDAAA,oDAAA,6DAAA,mEAAA,6DAAA,mDAAA,sDAAA,AAAA,0TAAA,AAAA,oDAAA,AAAA,4BAAA,AAAA,GAAA,AAAA,+CAAA,AAAA,EAAA,AAAA,IAAA,AAAA,IAAA,AAAA,84BAAA,AAAA,qBAAA,AAAA,+BAAA,kBAAAA,2BAAA,AAAA,AAAAA,yCAAA,UAAA;AAAA,AAAA,oBAAA9J;AAAAA;;AAAA,AAAA;;uCAAA,mFAAA,iBAAAA,mBAAA,AAAA,iGAAA,AAAAC,eAAA,EAAA,QAAAC,qCAAAC,0CAAAC,iDAAAuL,kDAAA,AAAA,KAAArL,cAAA,xdAEYwJ;AAFZ,AAAAC;GAAA,AAAA,oQAAA,wCAAA,gDAAA,qDAAA,sDAAA,iEAAA,mEAAA,yDAAA,oDAAA,6DAAA,mEAAA,6DAAA,mDAAA,sDAAA,AAAA,0TAAA,AAAA,qDAAA,AAAA,4BAAA,AAAA,GAAA,AAAA,kDAAA,AAAA,EAAA,AAAA,IAAA,AAAA,IAAA,AAAA,i5BAAA,AAAA,qBAAA,AAAA,gCAAA,kBAAAA,iCAAA,AAAA,AAAAA,+CAAA,UAAA;AAAA,AAAA,oBAAA/J;AAAAA;;AAAA,AAAA;;6CAAA,mFAAA,iBAAAA,mBAAA,AAAA,iGAAA,AAAAC,eAAA,EAAA,QAAAC,qCAAAC,0CAAAC,iDAAAkL,4CAAA,AAAA,KAAAhL,cAAA,xdAEcyJ;AAFd,AAAAC;GAAA,AAAA,mQAAA,wCAAA,gDAAA,qDAAA,sDAAA,iEAAA,mEAAA,yDAAA,oDAAA,6DAAA,mEAAA,6DAAA,mDAAA,sDAAA,AAAA,0TAAA,AAAA,kDAAA,AAAA,4BAAA,AAAA,GAAA,AAAA,+CAAA,AAAA,EAAA,AAAA,IAAA,AAAA,IAAA,AAAA,8jBAAA,AAAA,qBAAA,AAAA,+BAAA,kBAAAA,2BAAA,AAAA,AAAAA,yCAAA,UAAA;AAAA,AAAA,oBAAAhK;AAAAA;;AAAA,AAAA;;uCAAA,mFAAA,iBAAAA,mBAAA,AAAA,iGAAA,AAAAC,eAAA,EAAA,QAAAC,qCAAAC,0CAAAC,iDAAAoL,4CAAA,AAAA,KAAAlL,cAAA,ldAEiB0J;AAFjB,AAAAC;GAAA,AAAA,mQAAA,wCAAA,gDAAA,qDAAA,sDAAA,iEAAA,mEAAA,yDAAA,oDAAA,6DAAA,mEAAA,6DAAA,mDAAA,sDAAA,AAAA,0TAAA,AAAA,mDAAA,AAAA,4BAAA,AAAA,GAAA,AAAA,+CAAA,AAAA,EAAA,AAAA,IAAA,AAAA,IAAA,AAAA,8jBAAA,AAAA,qBAAA,AAAA,+BAAA,kBAAAA,2BAAA,AAAA,AAAAA,yCAAA,UAAA;AAAA,AAAA,oBAAAjK;AAAAA;;AAAA,AAAA;;uCAAA,mFAAA,iBAAAA,mBAAA,AAAA,iGAAA,AAAAC,eAAA,EAAA,QAAAC,qCAAAC,0CAAAC,iDAAAmL,gDAAA,AAAA,KAAAjL,cAAA,tdAEmB2J;AAFnB,AAAAC;GAAA,AAAA,qQAAA,wCAAA,gDAAA,qDAAA,sDAAA,iEAAA,mEAAA,yDAAA,oDAAA,6DAAA,mEAAA,6DAAA,mDAAA,sDAAA,AAAA,0TAAA,AAAA,qDAAA,AAAA,4BAAA,AAAA,GAAA,AAAA,iDAAA,AAAA,EAAA,AAAA,IAAA,AAAA,IAAA,AAAA,gkBAAA,AAAA,qBAAA,AAAA,gCAAA,kBAAAA,+BAAA,AAAA,AAAAA,6CAAA,UAAA;AAAA,AAAA,oBAAAlK;AAAAA;;AAAA,AAAA;;2CAAA,mFAAA,iBAAAA,mBAAA,AAAA,iGAAA,AAAAC,eAAA,EAAA,QAAAC,qCAAAC,0CAAAC,iDAAAqL,gDAAA,AAAA,KAAAnL,cAAA,1dAEqB4J;AAFrB,AAAAC;GAAA,AAAA,oQAAA,wCAAA,gDAAA,qDAAA,sDAAA,iEAAA,mEAAA,yDAAA,oDAAA,6DAAA,mEAAA,6DAAA,mDAAA,sDAAA,AAAA,0TAAA,AAAA,qDAAA,AAAA,4BAAA,AAAA,GAAA,AAAA,iDAAA,AAAA,EAAA,AAAA,IAAA,AAAA,IAAA,AAAA,gkBAAA,AAAA,qBAAA,AAAA,gCAAA,kBAAAA,+BAAA,AAAA,AAAAA,6CAAA,UAAA;AAAA,AAAA,oBAAAnK;AAAAA;;AAAA,AAAA;;2CAAA,mFAAA,iBAAAA,mBAAA,AAAA,iGAAA,AAAAC,eAAA,EAAA,QAAAC,qCAAAC,0CAAAC,iDAAAyL,+CAAA,AAAA,KAAAvL,cAAA,zdAEwB6J;AAFxB,AAAAC;GAAA,AAAA,8QAAA,wCAAA,gDAAA,qDAAA,sDAAA,iEAAA,mEAAA,yDAAA,oDAAA,6DAAA,mEAAA,6DAAA,mDAAA,sDAAA,AAAA,0TAAA,AAAA,gEAAA,AAAA,4BAAA,AAAA,GAAA,AAAA,2DAAA,AAAA,EAAA,AAAA,IAAA,AAAA,IAAA,AAAA,4vBAAA,AAAA,qBAAA,AAAA,qCAAA,kBAAAA,8BAAA,AAAA,AAAAA,4CAAA,UAAA;AAAA,AAAA,oBAAApK;AAAAA;;AAAA,AAAA;;0CAAA,mFAAA,iBAAAA,mBAAA,AAAA,iGAAA,AAAAC,eAAA,EAAA,QAAAC,qCAAAC,0CAAAC,iDAAA0L,mDAAA,AAAA,KAAAxL,cAAA,5dAE2B8J;AAF3B,AAAAO;GAAA,AAAA,sRAAA,wCAAA,gDAAA,qDAAA,sDAAA,iEAAA,mEAAA,yDAAA,oDAAA,6DAAA,mEAAA,6DAAA,mDAAA,sDAAA,AAAA,0TAAA,AAAA,uEAAA,AAAA,4BAAA,AAAA,GAAA,AAAA,kEAAA,AAAA,EAAA,AAAA,IAAA,AAAA,IAAA,AAAA,m5BAAA,AAAA,qBAAA,AAAA,yCAAA,kBAAAA,kCAAA,AAAA,AAAAA,gDAAA,UAAA;AAAA,AAAA,oBAAA3K;AAAAA;;AAAA,AAAA;;8CAAA,mFAAA,iBAAAA,mBAAA,AAAA,iGAAA,AAAAC,eAAA,EAAA,QAAAC,qCAAAC,0CAAAC,iDAAA2L,iDAAA,AAAA,KAAAzL,cAAA,9dAEmCqK;AAFnC,AAAAC;GAAA,AAAA,mRAAA,wCAAA,gDAAA,qDAAA,sDAAA,iEAAA,mEAAA,yDAAA,oDAAA,6DAAA,mEAAA,6DAAA,mDAAA,sDAAA,AAAA,0TAAA,AAAA,mEAAA,AAAA,4BAAA,AAAA,GAAA,AAAA,+DAAA,AAAA,EAAA,AAAA,IAAA,AAAA,IAAA,AAAA,g5BAAA,AAAA,qBAAA,AAAA,uCAAA,kBAAAA,gCAAA,AAAA,AAAAA,8CAAA,UAAA;AAAA,AAAA,oBAAA5K;AAAAA;;AAAA,AAAA;;4CAAA,mFAAA,iBAAAA,mBAAA,AAAA,iGAAA,AAAAC,eAAA,EAAA,QAAAC,qCAAAC,0CAAAC,iDAAA4L,gDAAA,AAAA,KAAA1L,cAAA,3dAE+CsK;AAF/C,AAAAC;GAAA,AAAA,gRAAA,wCAAA,gDAAA,qDAAA,sDAAA,iEAAA,mEAAA,yDAAA,oDAAA,6DAAA,mEAAA,6DAAA,mDAAA,sDAAA,AAAA,0TAAA,AAAA,kEAAA,AAAA,4BAAA,AAAA,GAAA,AAAA,4DAAA,AAAA,EAAA,AAAA,IAAA,AAAA,IAAA,AAAA,64BAAA,AAAA,qBAAA,AAAA,sCAAA,kBAAAA,+BAAA,AAAA,AAAAA,6CAAA,UAAA;AAAA,AAAA,oBAAA7K;AAAAA;;AAAA,AAAA;;2CAAA,mFAAA,iBAAAA,mBAAA,AAAA,iGAAA,AAAAC,eAAA,EAAA,QAAAC,qCAAAC,0CAAAC,iDAAA6L,wDAAA,AAAA,KAAA3L,cAAA,leAEyDuK;AAFzD,AAAAC;GAAA,AAAA,iSAAA,wCAAA,gDAAA,qDAAA,sDAAA,iEAAA,mEAAA,yDAAA,oDAAA,6DAAA,sDAAA,mEAAA,6DAAA,mDAAA,sDAAA,AAAA,0TAAA,AAAA,iFAAA,AAAA,4BAAA,AAAA,GAAA,AAAA,6EAAA,AAAA,EAAA,AAAA,IAAA,AAAA,IAAA,AAAA,KAAA,AAAA,85BAAA,AAAA,qBAAA,AAAA,8CAAA,kBAAAA,uCAAA,AAAA,AAAAA,qDAAA,UAAA;AAAA,AAAA,oBAAA9K;AAAAA;;AAAA,AAAA;;mDAAA,mFAAA,iBAAAA,mBAAA,AAAA,iGAAA,AAAAC,eAAA,EAAA,QAAAC,qCAAAC,0CAAAC,iDAAA8L,8CAAA,AAAA,KAAA5L,cAAA,heAICwK;AAJD,AAAAT;GAAA,AAAA,4QAAA,wCAAA,gDAAA,qDAAA,sDAAA,iEAAA,mEAAA,yDAAA,oDAAA,6DAAA,sDAAA,mEAAA,6DAAA,mDAAA,sDAAA,AAAA,0TAAA,AAAA,6DAAA,AAAA,4BAAA,AAAA,GAAA,AAAA,yDAAA,AAAA,EAAA,AAAA,IAAA,AAAA,IAAA,AAAA,KAAA,AAAA,m5CAAA,AAAA,qBAAA,AAAA,oCAAA,kBAAAA,6BAAA,AAAA,AAAAA,2CAAA,UAAA;AAAA,AAAA,oBAAArK;AAAAA;;AAAA,AAAA;;yCAAA,mFAAA,iBAAAA,mBAAA,AAAA,iGAAA,AAAAC,eAAA,EAAA,QAAAC,qCAAAC,0CAAAC,iDAAA+L,gDAAA,AAAA,KAAA7L,cAAA,xdAIkB+J;AAJlB,AAAAG;GAAA,AAAA,gRAAA,wCAAA,gDAAA,qDAAA,sDAAA,iEAAA,mEAAA,yDAAA,oDAAA,6DAAA,sDAAA,mEAAA,6DAAA,mDAAA,sDAAA,AAAA,0TAAA,AAAA,gEAAA,AAAA,4BAAA,AAAA,GAAA,AAAA,8DAAA,AAAA,EAAA,AAAA,IAAA,AAAA,IAAA,AAAA,KAAA,AAAA,sVAAA,AAAA,qBAAA,AAAA,sCAAA,kBAAAA,+BAAA,AAAA,AAAAA,6CAAA,UAAA;AAAA,AAAA,oBAAAxK;AAAAA;;AAAA,AAAA;;2CAAA,mFAAA,iBAAAA,mBAAA,AAAA,iGAAA,AAAAC,eAAA,EAAA,QAAAC,qCAAAC,0CAAAC,iDAAAgM,iDAAA,AAAA,KAAA9L,cAAA,3dAIyBkK;AAJzB,AAAAC;GAAA,AAAA,mRAAA,wCAAA,gDAAA,qDAAA,sDAAA,iEAAA,mEAAA,yDAAA,oDAAA,6DAAA,sDAAA,mEAAA,6DAAA,mDAAA,sDAAA,AAAA,0TAAA,AAAA,mEAAA,AAAA,4BAAA,AAAA,GAAA,AAAA,8DAAA,AAAA,EAAA,AAAA,IAAA,AAAA,IAAA,AAAA,KAAA,AAAA,sVAAA,AAAA,qBAAA,AAAA,uCAAA,kBAAAA,gCAAA,AAAA,AAAAA,8CAAA,UAAA;AAAA,AAAA,oBAAAzK;AAAAA;;AAAA,AAAA;;4CAAA,mFAAA,iBAAAA,mBAAA,AAAA,iGAAA,AAAAC,eAAA,EAAA,QAAAC,qCAAAC,0CAAAC,iDAAAiM,+CAAA,AAAA,KAAA/L,cAAA,1dAIkCmK;AAJlC,AAAAH;GAAA,AAAA,6QAAA,wCAAA,gDAAA,qDAAA,sDAAA,iEAAA,mEAAA,yDAAA,oDAAA,6DAAA,sDAAA,mEAAA,6DAAA,mDAAA,sDAAA,AAAA,0TAAA,AAAA,+DAAA,AAAA,4BAAA,AAAA,GAAA,AAAA,4DAAA,AAAA,EAAA,AAAA,IAAA,AAAA,IAAA,AAAA,KAAA,AAAA,oVAAA,AAAA,qBAAA,AAAA,qCAAA,kBAAAA,8BAAA,AAAA,AAAAA,4CAAA,UAAA;AAAA,AAAA,oBAAAtK;AAAAA;;AAAA,AAAA;;0CAAA,mFAAA,iBAAAA,mBAAA,AAAA,iGAAA,AAAAC,eAAA,EAAA,QAAAC,qCAAAC,0CAAAC,iDAAAkM,gDAAA,AAAA,KAAAhM,cAAA,zdAI4CgK;AAJ5C,AAAAC;GAAA,AAAA,gRAAA,wCAAA,gDAAA,qDAAA,sDAAA,iEAAA,mEAAA,yDAAA,oDAAA,6DAAA,sDAAA,mEAAA,6DAAA,mDAAA,sDAAA,AAAA,0TAAA,AAAA,gEAAA,AAAA,4BAAA,AAAA,GAAA,AAAA,8DAAA,AAAA,EAAA,AAAA,IAAA,AAAA,IAAA,AAAA,KAAA,AAAA,sVAAA,AAAA,qBAAA,AAAA,sCAAA,kBAAAA,+BAAA,AAAA,AAAAA,6CAAA,UAAA;AAAA,AAAA,oBAAAvK;AAAAA;;AAAA,AAAA;;2CAAA,mFAAA,iBAAAA,mBAAA,AAAA,iGAAA,AAAAC,eAAA,EAAA,QAAAC,qCAAAC,0CAAAC,iDAAAmM,qDAAA,AAAA,KAAAjM,cAAA,/dAIoDiK;AAJpD,AAAAS;GAAA,AAAA,0RAAA,wCAAA,gDAAA,qDAAA,sDAAA,iEAAA,mEAAA,yDAAA,oDAAA,6DAAA,sDAAA,mEAAA,6DAAA,mDAAA,sDAAA,AAAA,0TAAA,AAAA,4EAAA,AAAA,4BAAA,AAAA,GAAA,AAAA,sEAAA,AAAA,EAAA,AAAA,IAAA,AAAA,IAAA,AAAA,KAAA,AAAA,u1CAAA,AAAA,qBAAA,AAAA,2CAAA,kBAAAA,oCAAA,AAAA,AAAAA,kDAAA,UAAA;AAAA,AAAA,oBAAAhL;AAAAA;;AAAA,AAAA;;gDAAA,mFAAA,iBAAAA,mBAAA,AAAA,iGAAA,AAAAC,eAAA,EAAA,QAAAC,qCAAAC,0CAAAC,iDAAAoM,+CAAA,AAAA,KAAAlM,cAAA,9dAI6D0K;AAJ7D,AAAAC;GAAA,AAAA,8QAAA,wCAAA,gDAAA,qDAAA,sDAAA,iEAAA,mEAAA,yDAAA,oDAAA,6DAAA,sDAAA,mEAAA,6DAAA,mDAAA,sDAAA,AAAA,0TAAA,AAAA,8DAAA,AAAA,4BAAA,AAAA,GAAA,AAAA,2DAAA,AAAA,EAAA,AAAA,IAAA,AAAA,IAAA,AAAA,KAAA,AAAA,ijBAAA,AAAA,qBAAA,AAAA,qCAAA,kBAAAA,8BAAA,AAAA,AAAAA,4CAAA,UAAA;AAAA,AAAA,oBAAAjL;AAAAA;;AAAA,AAAA;;KAI2EiL;AAE9E;;;AAAKzB,8BAEH,sBAAA,wEAAA,AAAA,sGAAA,wCAAA,2DAAA,gDAAA,qDAAA,sDAAA,iEAAA,yDAAA,oDAAA,6DAAA,6DAAA,mDAAA,sDAAA,AAAA,KAAA,AAAA,0TAAA,AAAA,gEAAA,AAAA,4BAAA,AAAA,GAAA,AAAA,EAAA,AAAA,IAAA,AAAA,IAAA,AAAA,qBAAA,AAAA,KAAA,kBAAAoC,mCAAA,AAAA,AAAAA,iDAAA,33CAACtH;AAEH,kCAAA,lCAAemI,qHAAY,4CAAA,5CAACC,gBAAMlD,oCAAe,mDAAA,nDAACkD,gBAAMzG;AAExD,mCAAA,nCAAe0G,sHAAaF;AAE5B,mCAAA,nCAAeG,mFACZ,yBAAA,zBAAClM,sFAAyBuF;AAE7B;;;6BAAA,AAAArH,yEAAA,uGAAA,2CAAA,UAAA,mFAAA,rVAAwDiO,uNAC9CF,2LAA+BC;AAEzC,AAAe9E,+CACb,AAAA/H,iIAAA,mFAAA,iBAAAC,mBAAA,AAAA,iGAAA,AAAAC,eAAA,EAAA,QAAAC,qCAAAC,0CAAAC,iDAAA6I,8CAAA,AAAA,KAAA3I,cAAA;AAAA,AAAA4G;GAAA,AAAA,mQAAA,wCAAA,+EAAA,gDAAA,qDAAA,sDAAA,iEAAA,mEAAA,yDAAA,oDAAA,6DAAA,mEAAA,6DAAA,mDAAA,sDAAA,AAAA,yKAAA,AAAA,0TAAA,AAAA,mDAAA,AAAA,4BAAA,AAAA,GAAA,AAAA,+CAAA,AAAA,EAAA,AAAA,IAAA,AAAA,IAAA,AAAA,+4BAAA,AAAA,qBAAA,AAAA,+BAAA,kBAAAA,6BAAA,AAAA,AAAAA,2CAAA,UAAA;AAAA,AAAA,oBAAAlH;AAAAA;;AAAA,AAAA;;yCAAA,mFAAA,iBAAAA,mBAAA,AAAA,iGAAA,AAAAC,eAAA,EAAA,QAAAC,qCAAAC,0CAAAC,iDAAA0M,yCAAA,AAAA,KAAAxM,cAAA,jdAAQ4G;AAAR,AAAAC;GAAA,AAAA,mQAAA,wCAAA,+EAAA,gDAAA,qDAAA,sDAAA,iEAAA,mEAAA,yDAAA,oDAAA,6DAAA,mEAAA,6DAAA,mDAAA,sDAAA,AAAA,yKAAA,AAAA,0TAAA,AAAA,mDAAA,AAAA,4BAAA,AAAA,GAAA,AAAA,gDAAA,AAAA,EAAA,AAAA,IAAA,AAAA,IAAA,AAAA,63BAAA,AAAA,qBAAA,AAAA,+BAAA,kBAAAA,wBAAA,AAAA,AAAAA,sCAAA,UAAA;AAAA,AAAA,oBAAAnH;AAAAA;;AAAA,AAAA;;oCAAA,mFAAA,iBAAAA,mBAAA,AAAA,iGAAA,AAAAC,eAAA,EAAA,QAAAC,qCAAAC,0CAAAC,uCAAA,AAAA,KAAAE,cAAA,zZAAU6G;AAAV,AAAAC;GAAA,AAAA,kQAAA,wCAAA,+EAAA,gDAAA,qDAAA,sDAAA,mEAAA,yDAAA,oDAAA,mEAAA,6DAAA,mDAAA,sDAAA,AAAA,yKAAA,AAAA,0TAAA,AAAA,oDAAA,AAAA,4BAAA,AAAA,+CAAA,AAAA,EAAA,AAAA,IAAA,AAAA,s1BAAA,AAAA,qBAAA,AAAA,+BAAA,kBAAAA,8BAAA,AAAA,AAAAA,4CAAA,UAAA;AAAA,AAAA,oBAAApH;AAAAA;;AAAA,AAAA;;KAAAoH,qCAAA,mFAAA,iBAAApH,mBAAA,AAAA,iGAAA,AAAAC,eAAA,EAAA,QAAAC,qCAAAC,0CAAAC,iDAAA2M,8CAAA,AAAA,KAAAzM,cAAA;AAAA,AAAA+G;GAAA,AAAA,kQAAA,wCAAA,+EAAA,gDAAA,qDAAA,sDAAA,iEAAA,mEAAA,yDAAA,oDAAA,6DAAA,mEAAA,6DAAA,mDAAA,sDAAA,AAAA,yKAAA,AAAA,0TAAA,AAAA,kDAAA,AAAA,4BAAA,AAAA,GAAA,AAAA,gDAAA,AAAA,EAAA,AAAA,IAAA,AAAA,IAAA,AAAA,u1BAAA,AAAA,qBAAA,AAAA,+BAAA,kBAAAA,6BAAA,AAAA,AAAAA,2CAAA,UAAA;AAAA,AAAA,oBAAArH;AAAAA;;AAAA,AAAA;;yCAAA,mFAAA,iBAAAA,mBAAA,AAAA,iGAAA,AAAAC,eAAA,EAAA,QAAAC,qCAAAC,0CAAAC,iDAAA4M,gDAAA,AAAA,KAAA1M,cAAA,xdAAc+G;AAAd,AAAAd;GAAA,AAAA,iRAAA,wCAAA,+EAAA,gDAAA,qDAAA,sDAAA,iEAAA,mEAAA,yDAAA,oDAAA,6DAAA,mEAAA,6DAAA,mDAAA,sDAAA,AAAA,yKAAA,AAAA,0TAAA,AAAA,kEAAA,AAAA,4BAAA,AAAA,GAAA,AAAA,4DAAA,AAAA,EAAA,AAAA,IAAA,AAAA,IAAA,AAAA,szBAAA,AAAA,qBAAA,AAAA,sCAAA,kBAAAA,+BAAA,AAAA,AAAAA,6CAAA,UAAA;AAAA,AAAA,oBAAAvG;AAAAA;;AAAA,AAAA;;2CAAA,mFAAA,iBAAAA,mBAAA,AAAA,iGAAA,AAAAC,eAAA,EAAA,QAAAC,qCAAAC,0CAAAC,iDAAA6M,8CAAA,AAAA,KAAA3M,cAAA,xdAAgBiG;AAAhB,AAAAE;GAAA,AAAA,4QAAA,wCAAA,+EAAA,gDAAA,qDAAA,sDAAA,iEAAA,mEAAA,yDAAA,oDAAA,6DAAA,mEAAA,6DAAA,mDAAA,sDAAA,AAAA,yKAAA,AAAA,0TAAA,AAAA,8DAAA,AAAA,4BAAA,AAAA,GAAA,AAAA,wDAAA,AAAA,EAAA,AAAA,IAAA,AAAA,IAAA,AAAA,qWAAA,AAAA,qBAAA,AAAA,oCAAA,kBAAAA,6BAAA,AAAA,AAAAA,2CAAA,UAAA;AAAA,AAAA,oBAAAzG;AAAAA;;AAAA,AAAA;;yCAAA,mFAAA,iBAAAA,mBAAA,AAAA,iGAAA,AAAAC,eAAA,EAAA,QAAAC,qCAAAC,0CAAAC,iDAAA8M,6CAAA,AAAA,KAAA5M,cAAA,rdAAyBmG;AAAzB,AAAAa;GAAA,AAAA,yQAAA,wCAAA,+EAAA,gDAAA,qDAAA,sDAAA,iEAAA,mEAAA,yDAAA,oDAAA,6DAAA,mEAAA,6DAAA,mDAAA,sDAAA,AAAA,yKAAA,AAAA,0TAAA,AAAA,2DAAA,AAAA,4BAAA,AAAA,GAAA,AAAA,uDAAA,AAAA,EAAA,AAAA,IAAA,AAAA,IAAA,AAAA,sWAAA,AAAA,qBAAA,AAAA,mCAAA,kBAAAA,4BAAA,AAAA,AAAAA,0CAAA,UAAA;AAAA,AAAA,oBAAAtH;AAAAA;;AAAA,AAAA;;wCAAA,mFAAA,iBAAAA,mBAAA,AAAA,iGAAA,AAAAC,eAAA,EAAA,QAAAC,qCAAAC,0CAAAC,iDAAA+M,4CAAA,AAAA,KAAA7M,cAAA,ndAAgCgH;AAAhC,AAAAC;GAAA,AAAA,yQAAA,wCAAA,+EAAA,gDAAA,qDAAA,sDAAA,iEAAA,mEAAA,yDAAA,oDAAA,6DAAA,mEAAA,6DAAA,mDAAA,sDAAA,AAAA,yKAAA,AAAA,0TAAA,AAAA,yDAAA,AAAA,4BAAA,AAAA,GAAA,AAAA,sDAAA,AAAA,EAAA,AAAA,IAAA,AAAA,IAAA,AAAA,qWAAA,AAAA,qBAAA,AAAA,kCAAA,kBAAAA,2BAAA,AAAA,AAAAA,yCAAA,UAAA;AAAA,AAAA,oBAAAvH;AAAAA;;AAAA,AAAA;;uCAAA,mFAAA,iBAAAA,mBAAA,AAAA,iGAAA,AAAAC,eAAA,EAAA,QAAAC,qCAAAC,0CAAAC,iDAAAgN,6CAAA,AAAA,KAAA9M,cAAA,ndAAsCiH;AAAtC,AAAAC;GAAA,AAAA,yQAAA,wCAAA,+EAAA,gDAAA,qDAAA,sDAAA,iEAAA,mEAAA,yDAAA,oDAAA,6DAAA,mEAAA,6DAAA,mDAAA,sDAAA,AAAA,yKAAA,AAAA,0TAAA,AAAA,2DAAA,AAAA,4BAAA,AAAA,GAAA,AAAA,uDAAA,AAAA,EAAA,AAAA,IAAA,AAAA,IAAA,AAAA,sWAAA,AAAA,qBAAA,AAAA,mCAAA,kBAAAA,4BAAA,AAAA,AAAAA,0CAAA,UAAA;AAAA,AAAA,oBAAAxH;AAAAA;;AAAA,AAAA;;wCAAA,mFAAA,iBAAAA,mBAAA,AAAA,iGAAA,AAAAC,eAAA,EAAA,QAAAC,qCAAAC,0CAAAC,iDAAAiN,2CAAA,AAAA,KAAA/M,cAAA,ldAA2CkH;AAA3C,AAAAC;GAAA,AAAA,sQAAA,wCAAA,+EAAA,gDAAA,qDAAA,sDAAA,iEAAA,mEAAA,yDAAA,oDAAA,6DAAA,mEAAA,6DAAA,mDAAA,sDAAA,AAAA,yKAAA,AAAA,0TAAA,AAAA,uDAAA,AAAA,4BAAA,AAAA,GAAA,AAAA,mDAAA,AAAA,EAAA,AAAA,IAAA,AAAA,IAAA,AAAA,kWAAA,AAAA,qBAAA,AAAA,iCAAA,kBAAAA,0BAAA,AAAA,AAAAA,wCAAA,UAAA;AAAA,AAAA,oBAAAzH;AAAAA;;AAAA,AAAA;;sCAAA,mFAAA,iBAAAA,mBAAA,AAAA,iGAAA,AAAAC,eAAA,EAAA,QAAAC,qCAAAC,0CAAAC,iDAAAkN,6CAAA,AAAA,KAAAhN,cAAA,ldAAiDmH;AAAjD,AAAAC;GAAA,AAAA,0QAAA,wCAAA,+EAAA,gDAAA,qDAAA,sDAAA,iEAAA,mEAAA,yDAAA,oDAAA,6DAAA,mEAAA,6DAAA,mDAAA,sDAAA,AAAA,sMAAA,AAAA,0TAAA,AAAA,0DAAA,AAAA,4BAAA,AAAA,GAAA,AAAA,uDAAA,AAAA,EAAA,AAAA,IAAA,AAAA,IAAA,AAAA,2jBAAA,AAAA,qBAAA,AAAA,mCAAA,kBAAAA,4BAAA,AAAA,AAAAA,0CAAA,UAAA;AAAA,AAAA,oBAAA1H;AAAAA;;AAAA,AAAA;;wCAAA,mFAAA,iBAAAA,mBAAA,AAAA,iGAAA,AAAAC,eAAA,EAAA,QAAAC,qCAAAC,0CAAAC,iDAAAmN,4CAAA,AAAA,KAAAjN,cAAA,ndAAqDoH;AAArD,AAAAC;GAAA,AAAA,wQAAA,wCAAA,+EAAA,gDAAA,qDAAA,sDAAA,iEAAA,mEAAA,yDAAA,oDAAA,6DAAA,mEAAA,6DAAA,mDAAA,sDAAA,AAAA,sMAAA,AAAA,0TAAA,AAAA,wDAAA,AAAA,4BAAA,AAAA,GAAA,AAAA,sDAAA,AAAA,EAAA,AAAA,IAAA,AAAA,IAAA,AAAA,qWAAA,AAAA,qBAAA,AAAA,kCAAA,kBAAAA,2BAAA,AAAA,AAAAA,yCAAA,UAAA;AAAA,AAAA,oBAAA3H;AAAAA;;AAAA,AAAA;;uCAAA,mFAAA,iBAAAA,mBAAA,AAAA,iGAAA,AAAAC,eAAA,EAAA,QAAAC,qCAAAC,0CAAAC,iDAAAoN,2CAAA,AAAA,KAAAlN,cAAA,jdAA2DqH;AAA3D,AAAAC;GAAA,AAAA,qQAAA,wCAAA,+EAAA,gDAAA,qDAAA,sDAAA,iEAAA,mEAAA,yDAAA,oDAAA,6DAAA,mEAAA,6DAAA,mDAAA,sDAAA,AAAA,sMAAA,AAAA,0TAAA,AAAA,uDAAA,AAAA,4BAAA,AAAA,GAAA,AAAA,mDAAA,AAAA,EAAA,AAAA,IAAA,AAAA,IAAA,AAAA,kWAAA,AAAA,qBAAA,AAAA,iCAAA,kBAAAA,0BAAA,AAAA,AAAAA,wCAAA,UAAA;AAAA,AAAA,oBAAA5H;AAAAA;;AAAA,AAAA;;sCAAA,mFAAA,iBAAAA,mBAAA,AAAA,iGAAA,AAAAC,eAAA,EAAA,QAAAC,qCAAAC,0CAAAC,iDAAAqN,2CAAA,AAAA,KAAAnN,cAAA,hdAAgEsH;AAAhE,AAAAC;GAAA,AAAA,sQAAA,wCAAA,+EAAA,gDAAA,qDAAA,sDAAA,iEAAA,mEAAA,yDAAA,oDAAA,6DAAA,mEAAA,6DAAA,mDAAA,sDAAA,AAAA,sMAAA,AAAA,0TAAA,AAAA,qDAAA,AAAA,4BAAA,AAAA,GAAA,AAAA,oDAAA,AAAA,EAAA,AAAA,IAAA,AAAA,IAAA,AAAA,mWAAA,AAAA,qBAAA,AAAA,iCAAA,kBAAAA,0BAAA,AAAA,AAAAA,wCAAA,UAAA;AAAA,AAAA,oBAAA7H;AAAAA;;AAAA,AAAA;;sCAAA,mFAAA,iBAAAA,mBAAA,AAAA,iGAAA,AAAAC,eAAA,EAAA,QAAAC,qCAAAC,0CAAAC,iDAAAsN,6CAAA,AAAA,KAAApN,cAAA,ldAAoEuH;AAApE,AAAAgF;GAAA,AAAA,wQAAA,wCAAA,+EAAA,gDAAA,qDAAA,sDAAA,iEAAA,mEAAA,yDAAA,oDAAA,6DAAA,mEAAA,6DAAA,mDAAA,sDAAA,AAAA,yLAAA,AAAA,0TAAA,AAAA,0DAAA,AAAA,4BAAA,AAAA,GAAA,AAAA,qDAAA,AAAA,EAAA,AAAA,IAAA,AAAA,IAAA,AAAA,0nBAAA,AAAA,qBAAA,AAAA,kCAAA,kBAAAA,4BAAA,AAAA,AAAAA,0CAAA,UAAA;AAAA,AAAA,oBAAA7M;AAAAA;;AAAA,AAAA;;wCAAA,mFAAA,iBAAAA,mBAAA,AAAA,iGAAA,AAAAC,eAAA,EAAA,QAAAC,qCAAAC,0CAAAC,iDAAAuN,qDAAA,AAAA,KAAArN,cAAA,5dAAwEuM;AAAxE,AAAA9E;GAAA,AAAA,0RAAA,wCAAA,+EAAA,gDAAA,qDAAA,sDAAA,iEAAA,mEAAA,yDAAA,oDAAA,6DAAA,mEAAA,6DAAA,mDAAA,sDAAA,AAAA,8KAAA,AAAA,0TAAA,AAAA,4EAAA,AAAA,4BAAA,AAAA,GAAA,AAAA,uEAAA,AAAA,EAAA,AAAA,IAAA,AAAA,IAAA,AAAA,q0BAAA,AAAA,qBAAA,AAAA,2CAAA,kBAAAA,oCAAA,AAAA,AAAAA,kDAAA,UAAA;AAAA,AAAA,oBAAA/H;AAAAA;;AAAA,AAAA;;gDAAA,mFAAA,iBAAAA,mBAAA,AAAA,iGAAA,AAAAC,eAAA,EAAA,QAAAC,qCAAAC,0CAAAC,iDAAAwN,wDAAA,AAAA,KAAAtN,cAAA,veAA6EyH;AAA7E,AAAAC;GAAA,AAAA,iSAAA,wCAAA,+EAAA,gDAAA,qDAAA,sDAAA,iEAAA,mEAAA,yDAAA,oDAAA,6DAAA,mEAAA,6DAAA,mDAAA,sDAAA,AAAA,oLAAA,AAAA,0TAAA,AAAA,iFAAA,AAAA,4BAAA,AAAA,GAAA,AAAA,6EAAA,AAAA,EAAA,AAAA,IAAA,AAAA,IAAA,AAAA,o4BAAA,AAAA,qBAAA,AAAA,8CAAA,kBAAAA,uCAAA,AAAA,AAAAA,qDAAA,UAAA;AAAA,AAAA,oBAAAhI;AAAAA;;AAAA,AAAA;;mDAAA,mFAAA,iBAAAA,mBAAA,AAAA,iGAAA,AAAAC,eAAA,EAAA,QAAAC,qCAAAC,0CAAAC,iDAAAyN,gDAAA,AAAA,KAAAvN,cAAA,leACQ0H;AADR,AAAAC;GAAA,AAAA,gRAAA,wCAAA,+EAAA,gDAAA,qDAAA,sDAAA,iEAAA,mEAAA,yDAAA,oDAAA,6DAAA,sDAAA,mEAAA,6DAAA,mDAAA,sDAAA,AAAA,oLAAA,AAAA,0TAAA,AAAA,gEAAA,AAAA,4BAAA,AAAA,GAAA,AAAA,6DAAA,AAAA,EAAA,AAAA,IAAA,AAAA,IAAA,AAAA,KAAA,AAAA,qXAAA,AAAA,qBAAA,AAAA,sCAAA,kBAAAA,+BAAA,AAAA,AAAAA,6CAAA,UAAA;AAAA,AAAA,oBAAAjI;AAAAA;;AAAA,AAAA;;2CAAA,mFAAA,iBAAAA,mBAAA,AAAA,iGAAA,AAAAC,eAAA,EAAA,QAAAC,qCAAAC,0CAAAC,iDAAA0N,mDAAA,AAAA,KAAAxN,cAAA,7dACyB2H;AADzB,AAAAC;GAAA,AAAA,sRAAA,wCAAA,+EAAA,gDAAA,qDAAA,sDAAA,iEAAA,mEAAA,yDAAA,oDAAA,6DAAA,sDAAA,mEAAA,6DAAA,mDAAA,sDAAA,AAAA,oLAAA,AAAA,0TAAA,AAAA,wEAAA,AAAA,4BAAA,AAAA,GAAA,AAAA,mEAAA,AAAA,EAAA,AAAA,IAAA,AAAA,IAAA,AAAA,KAAA,AAAA,2XAAA,AAAA,qBAAA,AAAA,yCAAA,kBAAAA,kCAAA,AAAA,AAAAA,gDAAA,UAAA;AAAA,AAAA,oBAAAlI;AAAAA;;AAAA,AAAA;;8CAAA,mFAAA,iBAAAA,mBAAA,AAAA,iGAAA,AAAAC,eAAA,EAAA,QAAAC,qCAAAC,0CAAAC,iDAAA2N,iDAAA,AAAA,KAAAzN,cAAA,9dACkC4H;AADlC,AAAAC;GAAA,AAAA,mRAAA,wCAAA,+EAAA,gDAAA,qDAAA,sDAAA,iEAAA,mEAAA,yDAAA,oDAAA,6DAAA,sDAAA,mEAAA,6DAAA,mDAAA,sDAAA,AAAA,oLAAA,AAAA,0TAAA,AAAA,mEAAA,AAAA,4BAAA,AAAA,GAAA,AAAA,+DAAA,AAAA,EAAA,AAAA,IAAA,AAAA,IAAA,AAAA,KAAA,AAAA,uXAAA,AAAA,qBAAA,AAAA,uCAAA,kBAAAA,gCAAA,AAAA,AAAAA,8CAAA,UAAA;AAAA,AAAA,oBAAAnI;AAAAA;;AAAA,AAAA;;4CAAA,mFAAA,iBAAAA,mBAAA,AAAA,iGAAA,AAAAC,eAAA,EAAA,QAAAC,qCAAAC,0CAAAC,iDAAA4N,gDAAA,AAAA,KAAA1N,cAAA,3dAC8C6H;AAD9C,AAAAC;GAAA,AAAA,gRAAA,wCAAA,+EAAA,gDAAA,qDAAA,sDAAA,iEAAA,mEAAA,yDAAA,oDAAA,6DAAA,sDAAA,mEAAA,6DAAA,mDAAA,sDAAA,AAAA,oLAAA,AAAA,0TAAA,AAAA,gEAAA,AAAA,4BAAA,AAAA,GAAA,AAAA,6DAAA,AAAA,EAAA,AAAA,IAAA,AAAA,IAAA,AAAA,KAAA,AAAA,qpBAAA,AAAA,qBAAA,AAAA,sCAAA,kBAAAA,+BAAA,AAAA,AAAAA,6CAAA,UAAA;AAAA,AAAA,oBAAApI;AAAAA;;AAAA,AAAA;;2CAAA,mFAAA,iBAAAA,mBAAA,AAAA,iGAAA,AAAAC,eAAA,EAAA,QAAAC,qCAAAC,0CAAAC,iDAAA6N,+CAAA,AAAA,KAAA3N,cAAA,zdACwD8H;AADxD,AAAAC;GAAA,AAAA,+QAAA,wCAAA,+EAAA,gDAAA,qDAAA,sDAAA,iEAAA,mEAAA,yDAAA,oDAAA,6DAAA,sDAAA,mEAAA,6DAAA,mDAAA,sDAAA,AAAA,oLAAA,AAAA,0TAAA,AAAA,+DAAA,AAAA,4BAAA,AAAA,GAAA,AAAA,0DAAA,AAAA,EAAA,AAAA,IAAA,AAAA,IAAA,AAAA,KAAA,AAAA,kXAAA,AAAA,qBAAA,AAAA,qCAAA,kBAAAA,8BAAA,AAAA,AAAAA,4CAAA,UAAA;AAAA,AAAA,oBAAArI;AAAAA;;AAAA,AAAA;;0CAAA,mFAAA,iBAAAA,mBAAA,AAAA,iGAAA,AAAAC,eAAA,EAAA,QAAAC,qCAAAC,0CAAAC,iDAAA8N,uDAAA,AAAA,KAAA5N,cAAA,heACiE+H;AADjE,AAAAC;GAAA,AAAA,6RAAA,wCAAA,+EAAA,gDAAA,qDAAA,sDAAA,iEAAA,mEAAA,yDAAA,oDAAA,6DAAA,sDAAA,mEAAA,6DAAA,mDAAA,sDAAA,AAAA,oLAAA,AAAA,0TAAA,AAAA,+EAAA,AAAA,4BAAA,AAAA,GAAA,AAAA,2EAAA,AAAA,EAAA,AAAA,IAAA,AAAA,IAAA,AAAA,KAAA,AAAA,mYAAA,AAAA,qBAAA,AAAA,6CAAA,kBAAAA,sCAAA,AAAA,AAAAA,oDAAA,UAAA;AAAA,AAAA,oBAAAtI;AAAAA;;AAAA,AAAA;;kDAAA,mFAAA,iBAAAA,mBAAA,AAAA,iGAAA,AAAAC,eAAA,EAAA,QAAAC,qCAAAC,0CAAAC,iDAAA+N,gDAAA,AAAA,KAAA7N,cAAA,jeACyEgI;AADzE,AAAAC;GAAA,AAAA,gRAAA,wCAAA,+EAAA,gDAAA,qDAAA,sDAAA,iEAAA,mEAAA,yDAAA,oDAAA,6DAAA,sDAAA,mEAAA,6DAAA,mDAAA,sDAAA,AAAA,oLAAA,AAAA,0TAAA,AAAA,kEAAA,AAAA,4BAAA,AAAA,GAAA,AAAA,4DAAA,AAAA,EAAA,AAAA,IAAA,AAAA,IAAA,AAAA,KAAA,AAAA,0XAAA,AAAA,qBAAA,AAAA,sCAAA,kBAAAA,+BAAA,AAAA,AAAAA,6CAAA,UAAA;AAAA,AAAA,oBAAAvI;AAAAA;;AAAA,AAAA;;2CAAA,mFAAA,iBAAAA,mBAAA,AAAA,iGAAA,AAAAC,eAAA,EAAA,QAAAC,qCAAAC,0CAAAC,iDAAAgO,kDAAA,AAAA,KAAA9N,cAAA,5dAEQiI;AAFR,AAAAC;GAAA,AAAA,qRAAA,wCAAA,+EAAA,gDAAA,qDAAA,sDAAA,iEAAA,mEAAA,yDAAA,oDAAA,6DAAA,sDAAA,mEAAA,6DAAA,mDAAA,sDAAA,AAAA,oLAAA,AAAA,0TAAA,AAAA,sEAAA,AAAA,4BAAA,AAAA,GAAA,AAAA,iEAAA,AAAA,EAAA,AAAA,IAAA,AAAA,IAAA,AAAA,KAAA,AAAA,+XAAA,AAAA,qBAAA,AAAA,wCAAA,kBAAAA,iCAAA,AAAA,AAAAA,+CAAA,UAAA;AAAA,AAAA,oBAAAxI;AAAAA;;AAAA,AAAA;;6CAAA,mFAAA,iBAAAA,mBAAA,AAAA,iGAAA,AAAAC,eAAA,EAAA,QAAAC,qCAAAC,0CAAAC,iDAAAiO,kDAAA,AAAA,KAAA/N,cAAA,9dAEiBkI;AAFjB,AAAAC;GAAA,AAAA,mRAAA,wCAAA,+EAAA,gDAAA,qDAAA,sDAAA,iEAAA,mEAAA,yDAAA,oDAAA,6DAAA,sDAAA,mEAAA,6DAAA,mDAAA,sDAAA,AAAA,oLAAA,AAAA,0TAAA,AAAA,qEAAA,AAAA,4BAAA,AAAA,GAAA,AAAA,kEAAA,AAAA,EAAA,AAAA,IAAA,AAAA,IAAA,AAAA,KAAA,AAAA,gYAAA,AAAA,qBAAA,AAAA,wCAAA,kBAAAA,iCAAA,AAAA,AAAAA,+CAAA,UAAA;AAAA,AAAA,oBAAAzI;AAAAA;;AAAA,AAAA;;KAE4ByI;AAE9B,AAAea,8CACb,AAAAvJ,iIAAA,mFAAA,iBAAAC,mBAAA,AAAA,iGAAA,AAAAC,eAAA,EAAA,QAAAC,qCAAAC,0CAAAC,iDAAAkO,iDAAA,AAAA,KAAAhO,cAAA;AAAA,AAAAkG;GAAA,AAAA,kRAAA,wCAAA,+EAAA,gDAAA,qDAAA,sDAAA,iEAAA,mEAAA,yDAAA,oDAAA,6DAAA,mEAAA,6DAAA,mDAAA,sDAAA,AAAA,yKAAA,AAAA,0TAAA,AAAA,oEAAA,AAAA,4BAAA,AAAA,GAAA,AAAA,+DAAA,AAAA,EAAA,AAAA,IAAA,AAAA,IAAA,AAAA,u5BAAA,AAAA,qBAAA,AAAA,uCAAA,kBAAAA,gCAAA,AAAA,AAAAA,8CAAA,UAAA;AAAA,AAAA,oBAAAxG;AAAAA;;AAAA,AAAA;;4CAAA,mFAAA,iBAAAA,mBAAA,AAAA,iGAAA,AAAAC,eAAA,EAAA,QAAAC,qCAAAC,0CAAAC,iDAAAmO,4CAAA,AAAA,KAAAjO,cAAA,vdAAQkG;AAAR,AAAAE;GAAA,AAAA,wQAAA,wCAAA,+EAAA,gDAAA,qDAAA,sDAAA,iEAAA,mEAAA,yDAAA,oDAAA,6DAAA,mEAAA,6DAAA,mDAAA,sDAAA,AAAA,yKAAA,AAAA,0TAAA,AAAA,0DAAA,AAAA,4BAAA,AAAA,GAAA,AAAA,oDAAA,AAAA,EAAA,AAAA,IAAA,AAAA,IAAA,AAAA,iWAAA,AAAA,qBAAA,AAAA,kCAAA,kBAAAA,2BAAA,AAAA,AAAAA,yCAAA,UAAA;AAAA,AAAA,oBAAA1G;AAAAA;;AAAA,AAAA;;uCAAA,mFAAA,iBAAAA,mBAAA,AAAA,iGAAA,AAAAC,eAAA,EAAA,QAAAC,qCAAAC,0CAAAC,iDAAAoO,6CAAA,AAAA,KAAAlO,cAAA,ndAAkBoG;AAAlB,AAAAE;GAAA,AAAA,wQAAA,wCAAA,+EAAA,gDAAA,qDAAA,sDAAA,iEAAA,mEAAA,yDAAA,oDAAA,6DAAA,mEAAA,6DAAA,mDAAA,sDAAA,AAAA,yKAAA,AAAA,0TAAA,AAAA,4DAAA,AAAA,4BAAA,AAAA,GAAA,AAAA,uDAAA,AAAA,EAAA,AAAA,IAAA,AAAA,IAAA,AAAA,oWAAA,AAAA,qBAAA,AAAA,mCAAA,kBAAAA,4BAAA,AAAA,AAAAA,0CAAA,UAAA;AAAA,AAAA,oBAAA5G;AAAAA;;AAAA,AAAA;;wCAAA,mFAAA,iBAAAA,mBAAA,AAAA,iGAAA,AAAAC,eAAA,EAAA,QAAAC,qCAAAC,0CAAAC,iDAAAqO,6CAAA,AAAA,KAAAnO,cAAA,pdAAuBsG;AAAvB,AAAAD;GAAA,AAAA,0QAAA,wCAAA,+EAAA,gDAAA,qDAAA,sDAAA,iEAAA,mEAAA,yDAAA,oDAAA,6DAAA,mEAAA,6DAAA,mDAAA,sDAAA,AAAA,yKAAA,AAAA,0TAAA,AAAA,0DAAA,AAAA,4BAAA,AAAA,GAAA,AAAA,uDAAA,AAAA,EAAA,AAAA,IAAA,AAAA,IAAA,AAAA,oWAAA,AAAA,qBAAA,AAAA,mCAAA,kBAAAA,4BAAA,AAAA,AAAAA,0CAAA,UAAA;AAAA,AAAA,oBAAA3G;AAAAA;;AAAA,AAAA;;wCAAA,mFAAA,iBAAAA,mBAAA,AAAA,iGAAA,AAAAC,eAAA,EAAA,QAAAC,qCAAAC,0CAAAC,iDAAAsO,+CAAA,AAAA,KAAApO,cAAA,tdAA6BqG;AAA7B,AAAAI;GAAA,AAAA,8QAAA,wCAAA,+EAAA,gDAAA,qDAAA,sDAAA,iEAAA,mEAAA,yDAAA,oDAAA,6DAAA,mEAAA,6DAAA,mDAAA,sDAAA,AAAA,yKAAA,AAAA,0TAAA,AAAA,8DAAA,AAAA,4BAAA,AAAA,GAAA,AAAA,2DAAA,AAAA,EAAA,AAAA,IAAA,AAAA,IAAA,AAAA,uuBAAA,AAAA,qBAAA,AAAA,qCAAA,kBAAAA,8BAAA,AAAA,AAAAA,4CAAA,UAAA;AAAA,AAAA,oBAAA/G;AAAAA;;AAAA,AAAA;;0CAAA,mFAAA,iBAAAA,mBAAA,AAAA,iGAAA,AAAAC,eAAA,EAAA,QAAAC,qCAAAC,0CAAAC,iDAAAuO,6CAAA,AAAA,KAAArO,cAAA,tdAAmCyG;AAAnC,AAAAD;GAAA,AAAA,0QAAA,wCAAA,+EAAA,gDAAA,qDAAA,sDAAA,iEAAA,mEAAA,yDAAA,oDAAA,6DAAA,mEAAA,6DAAA,mDAAA,sDAAA,AAAA,yKAAA,AAAA,0TAAA,AAAA,4DAAA,AAAA,4BAAA,AAAA,GAAA,AAAA,uDAAA,AAAA,EAAA,AAAA,IAAA,AAAA,IAAA,AAAA,oWAAA,AAAA,qBAAA,AAAA,mCAAA,kBAAAA,4BAAA,AAAA,AAAAA,0CAAA,UAAA;AAAA,AAAA,oBAAA9G;AAAAA;;AAAA,AAAA;;wCAAA,mFAAA,iBAAAA,mBAAA,AAAA,iGAAA,AAAAC,eAAA,EAAA,QAAAC,qCAAAC,0CAAAC,iDAAAwO,6CAAA,AAAA,KAAAtO,cAAA,pdAA2CwG;AAA3C,AAAAD;GAAA,AAAA,yQAAA,wCAAA,+EAAA,gDAAA,qDAAA,sDAAA,iEAAA,mEAAA,yDAAA,oDAAA,6DAAA,mEAAA,6DAAA,mDAAA,sDAAA,AAAA,yKAAA,AAAA,0TAAA,AAAA,2DAAA,AAAA,4BAAA,AAAA,GAAA,AAAA,sDAAA,AAAA,EAAA,AAAA,IAAA,AAAA,IAAA,AAAA,mWAAA,AAAA,qBAAA,AAAA,mCAAA,kBAAAA,4BAAA,AAAA,AAAAA,0CAAA,UAAA;AAAA,AAAA,oBAAA7G;AAAAA;;AAAA,AAAA;;wCAAA,mFAAA,iBAAAA,mBAAA,AAAA,iGAAA,AAAAC,eAAA,EAAA,QAAAC,qCAAAC,0CAAAC,iDAAAyO,8CAAA,AAAA,KAAAvO,cAAA,rdAAiDuG;AAAjD,AAAAG;GAAA,AAAA,4QAAA,wCAAA,+EAAA,gDAAA,qDAAA,sDAAA,iEAAA,mEAAA,yDAAA,oDAAA,6DAAA,mEAAA,6DAAA,mDAAA,sDAAA,AAAA,yKAAA,AAAA,0TAAA,AAAA,6DAAA,AAAA,4BAAA,AAAA,GAAA,AAAA,0DAAA,AAAA,EAAA,AAAA,IAAA,AAAA,IAAA,AAAA,21BAAA,AAAA,qBAAA,AAAA,oCAAA,kBAAAA,6BAAA,AAAA,AAAAA,2CAAA,UAAA;AAAA,AAAA,oBAAAhH;AAAAA;;AAAA,AAAA;;yCAAA,mFAAA,iBAAAA,mBAAA,AAAA,iGAAA,AAAAC,eAAA,EAAA,QAAAC,qCAAAC,0CAAAC,iDAAA0O,yDAAA,AAAA,KAAAxO,cAAA,jeAAuD0G;AAAvD,AAAAC;GAAA,AAAA,kSAAA,wCAAA,+EAAA,gDAAA,qDAAA,sDAAA,iEAAA,mEAAA,yDAAA,oDAAA,6DAAA,mEAAA,6DAAA,mDAAA,sDAAA,AAAA,sOAAA,AAAA,0TAAA,AAAA,kFAAA,AAAA,4BAAA,AAAA,GAAA,AAAA,+EAAA,AAAA,EAAA,AAAA,IAAA,AAAA,IAAA,AAAA,wjBAAA,AAAA,qBAAA,AAAA,+CAAA,kBAAAA,wCAAA,AAAA,AAAAA,sDAAA,UAAA;AAAA,AAAA,oBAAAjH;AAAAA;;AAAA,AAAA;;oDAAA,mFAAA,iBAAAA,mBAAA,AAAA,iGAAA,AAAAC,eAAA,EAAA,QAAAC,qCAAAC,0CAAAC,iDAAA4M,gDAAA,AAAA,KAAA1M,cAAA,neAA8D2G;AAA9D,AAAAV;GAAA,AAAA,iRAAA,wCAAA,+EAAA,gDAAA,qDAAA,sDAAA,iEAAA,mEAAA,yDAAA,oDAAA,6DAAA,mEAAA,6DAAA,mDAAA,sDAAA,AAAA,yKAAA,AAAA,0TAAA,AAAA,kEAAA,AAAA,4BAAA,AAAA,GAAA,AAAA,4DAAA,AAAA,EAAA,AAAA,IAAA,AAAA,IAAA,AAAA,szBAAA,AAAA,qBAAA,AAAA,sCAAA,kBAAAA,+BAAA,AAAA,AAAAA,6CAAA,UAAA;AAAA,AAAA,oBAAAvG;AAAAA;;AAAA,AAAA;;2CAAA,mFAAA,iBAAAA,mBAAA,AAAA,iGAAA,AAAAC,eAAA,EAAA,QAAAC,qCAAAC,0CAAAC,iDAAAsN,6CAAA,AAAA,KAAApN,cAAA,vdAAgFiG;AAAhF,AAAAsG;GAAA,AAAA,wQAAA,wCAAA,+EAAA,gDAAA,qDAAA,sDAAA,iEAAA,mEAAA,yDAAA,oDAAA,6DAAA,mEAAA,6DAAA,mDAAA,sDAAA,AAAA,yLAAA,AAAA,0TAAA,AAAA,0DAAA,AAAA,4BAAA,AAAA,GAAA,AAAA,qDAAA,AAAA,EAAA,AAAA,IAAA,AAAA,IAAA,AAAA,0nBAAA,AAAA,qBAAA,AAAA,kCAAA,kBAAAA,4BAAA,AAAA,AAAAA,0CAAA,UAAA;AAAA,AAAA,oBAAA7M;AAAAA;;AAAA,AAAA;;KAAyF6M;AAE3F;;;;AAAKkC,4CAGH,k9BAAA,l9BAAC1P,+GACA,AAACM,gDAAQJ,8CAAWgG,wCAAoBM,uCACxC,AAAClG,gDAAQJ,8CAAW2F,uCAAoBI,sCACxC,AAAC3F,gDAAQJ,8CAAWiG,wCAAoBY,uCACxC,AAACzG,gDAAQJ,8CAAWmG,yCAAoBM,wCACxC,8FAAA,9FAACrG,gDAAQJ,oGAA+BsN,iFACA/H;AAQ3C;;;6BAAA,AAAAlG,yEAAA,yGAAA,QAAA,mFAAA,1SAAgEoQ,uWAA2BlK;AAC3F;;;iCAAA,AAAAlG,yEAAA,kHAAA,QAAA,mFAAA,vTAAgEqQ,oXAA2BnK;AAU3F;;;2BAAA,AAAAlG,yEAAA,oGAAA,xMAAwDsQ,8NAA8BH;AACtF;;;+BAAA,AAAAnQ,yEAAA,6GAAA,rNAAwDuQ,2OAA8BJ;AACtF;;;gCAAA,AAAAnQ,yEAAA,gHAAA,zNAAwDwQ,+OAA8BL;AACtF;;;2BAAA,AAAAnQ,yEAAA,oGAAA,xMAAwDyQ,8NAA8BN;AACtF;;;2BAAA,AAAAnQ,yEAAA,oGAAA,xMAAwD0Q,8NAA8BP;AACtF;;;2BAAA,AAAAnQ,yEAAA,mGAAA,vMAAwD2Q,6NAA8BR;AAEtF;;;iCAAA,AAAAnQ,yEAAA,iHAAA,gEAAA,3RAAwD4Q,iPAClCT,iDAA2BvF;AAEjD;;;mCAAA,AAAA5K,yEAAA,oHAAA,hOAAwD6Q,uOACjDjG;AAEP;;;6BAAA,AAAA5K,yEAAA,yGAAA,/MAAwD8Q,sNACjDlG;AAEP;;;8BAAA,AAAA5K,yEAAA,2GAAA,lNAAqE+Q,wOAC/CZ;AAEtB;;;oCAAA,AAAAnQ,yEAAA,qGAAA,lNAAsEgR,wOAChDb;AAEtB;;;8BAAA,AAAAnQ,yEAAA,0GAAA,jNAA6DiR,uOACvCd;AAEtB;;;kCAAA,AAAAnQ,yEAAA,mHAAA,gEAAA,9RAA6DkR,oPACvCf,uDAAiCpJ;AAQvD;;;8BAAA,AAAA/G,yEAAA,0GAAA,jNAAmBmR,6NAAkB,AAACjR,4GAAWsD,gDAA2B3D;AAM5E,AAAeuR,gDACb,AAAC/K,gBAAK,AAACtF,gDAAQJ,8CAAWgG,wCACxBM,uCACA,AAAA9F,iIAAA,mFAAA,iBAAAC,mBAAA,AAAA,iGAAA,AAAAC,eAAA,EAAA,QAAAC,qCAAAC,0CAAAC,iDAAA6P,2CAAA,AAAA,KAAA3P,cAAA;AAAA,AAAA4O;GAAA,AAAA,uQAAA,wCAAA,+EAAA,gDAAA,qDAAA,sDAAA,iEAAA,mEAAA,yDAAA,oDAAA,6DAAA,mEAAA,6DAAA,mDAAA,sDAAA,AAAA,yLAAA,AAAA,0TAAA,AAAA,uDAAA,AAAA,4BAAA,AAAA,GAAA,AAAA,kDAAA,AAAA,EAAA,AAAA,IAAA,AAAA,IAAA,AAAA,qYAAA,AAAA,qBAAA,AAAA,iCAAA,kBAAAA,0BAAA,AAAA,AAAAA,wCAAA,UAAA;AAAA,AAAA,oBAAAlP;AAAAA;;AAAA,AAAA;;sCAAA,mFAAA,iBAAAA,mBAAA,AAAA,iGAAA,AAAAC,eAAA,EAAA,QAAAC,qCAAAC,0CAAAC,iDAAA8P,+CAAA,AAAA,KAAA5P,cAAA,pdAAQ4O;AAAR,AAAAC;GAAA,AAAA,+QAAA,wCAAA,+EAAA,gDAAA,qDAAA,sDAAA,iEAAA,mEAAA,yDAAA,oDAAA,6DAAA,mEAAA,6DAAA,mDAAA,sDAAA,AAAA,yLAAA,AAAA,0TAAA,AAAA,+DAAA,AAAA,4BAAA,AAAA,GAAA,AAAA,2DAAA,AAAA,EAAA,AAAA,IAAA,AAAA,IAAA,AAAA,8YAAA,AAAA,qBAAA,AAAA,qCAAA,kBAAAA,8BAAA,AAAA,AAAAA,4CAAA,UAAA;AAAA,AAAA,oBAAAnP;AAAAA;;AAAA,AAAA;;0CAAA,mFAAA,iBAAAA,mBAAA,AAAA,iGAAA,AAAAC,eAAA,EAAA,QAAAC,qCAAAC,0CAAAC,iDAAA+P,gDAAA,AAAA,KAAA7P,cAAA,zdAAY6O;AAAZ,AAAAC;GAAA,AAAA,gRAAA,wCAAA,+EAAA,gDAAA,qDAAA,sDAAA,iEAAA,mEAAA,yDAAA,oDAAA,6DAAA,mEAAA,6DAAA,mDAAA,sDAAA,AAAA,yLAAA,AAAA,0TAAA,AAAA,iEAAA,AAAA,4BAAA,AAAA,GAAA,AAAA,8DAAA,AAAA,EAAA,AAAA,IAAA,AAAA,IAAA,AAAA,iZAAA,AAAA,qBAAA,AAAA,sCAAA,kBAAAA,+BAAA,AAAA,AAAAA,6CAAA,UAAA;AAAA,AAAA,oBAAApP;AAAAA;;AAAA,AAAA;;2CAAA,mFAAA,iBAAAA,mBAAA,AAAA,iGAAA,AAAAC,eAAA,EAAA,QAAAC,qCAAAC,0CAAAC,iDAAAgQ,8CAAA,AAAA,KAAA9P,cAAA,xdAAoB8O;AAApB,AAAAO;GAAA,AAAA,4QAAA,wCAAA,+EAAA,gDAAA,qDAAA,sDAAA,iEAAA,mEAAA,yDAAA,oDAAA,6DAAA,mEAAA,6DAAA,mDAAA,sDAAA,AAAA,mNAAA,AAAA,0TAAA,AAAA,4DAAA,AAAA,4BAAA,AAAA,GAAA,AAAA,yDAAA,AAAA,EAAA,AAAA,IAAA,AAAA,IAAA,AAAA,4YAAA,AAAA,qBAAA,AAAA,oCAAA,kBAAAA,6BAAA,AAAA,AAAAA,2CAAA,UAAA;AAAA,AAAA,oBAAA3P;AAAAA;;AAAA,AAAA;;yCAAA,mFAAA,iBAAAA,mBAAA,AAAA,iGAAA,AAAAC,eAAA,EAAA,QAAAC,qCAAAC,0CAAAC,iDAAAiQ,2CAAA,AAAA,KAAA/P,cAAA,ndAA6BqP;AAA7B,AAAAN;GAAA,AAAA,uQAAA,wCAAA,+EAAA,gDAAA,qDAAA,sDAAA,iEAAA,mEAAA,yDAAA,oDAAA,6DAAA,mEAAA,6DAAA,mDAAA,sDAAA,AAAA,yLAAA,AAAA,0TAAA,AAAA,uDAAA,AAAA,4BAAA,AAAA,GAAA,AAAA,kDAAA,AAAA,EAAA,AAAA,IAAA,AAAA,IAAA,AAAA,qYAAA,AAAA,qBAAA,AAAA,iCAAA,kBAAAA,0BAAA,AAAA,AAAAA,wCAAA,UAAA;AAAA,AAAA,oBAAArP;AAAAA;;AAAA,AAAA;;sCAAA,mFAAA,iBAAAA,mBAAA,AAAA,iGAAA,AAAAC,eAAA,EAAA,QAAAC,qCAAAC,0CAAAC,iDAAAkQ,2CAAA,AAAA,KAAAhQ,cAAA,hdAAoC+O;AAApC,AAAAC;GAAA,AAAA,uQAAA,wCAAA,+EAAA,gDAAA,qDAAA,sDAAA,iEAAA,mEAAA,yDAAA,oDAAA,6DAAA,mEAAA,6DAAA,mDAAA,sDAAA,AAAA,yLAAA,AAAA,0TAAA,AAAA,uDAAA,AAAA,4BAAA,AAAA,GAAA,AAAA,kDAAA,AAAA,EAAA,AAAA,IAAA,AAAA,IAAA,AAAA,qYAAA,AAAA,qBAAA,AAAA,iCAAA,kBAAAA,0BAAA,AAAA,AAAAA,wCAAA,UAAA;AAAA,AAAA,oBAAAtP;AAAAA;;AAAA,AAAA;;sCAAA,mFAAA,iBAAAA,mBAAA,AAAA,iGAAA,AAAAC,eAAA,EAAA,QAAAC,qCAAAC,0CAAAC,iDAAAmQ,2CAAA,AAAA,KAAAjQ,cAAA,hdAAwCgP;AAAxC,AAAAC;GAAA,AAAA,uQAAA,wCAAA,+EAAA,gDAAA,qDAAA,sDAAA,iEAAA,mEAAA,yDAAA,oDAAA,6DAAA,mEAAA,6DAAA,mDAAA,sDAAA,AAAA,yLAAA,AAAA,0TAAA,AAAA,uDAAA,AAAA,4BAAA,AAAA,GAAA,AAAA,iDAAA,AAAA,EAAA,AAAA,IAAA,AAAA,IAAA,AAAA,oYAAA,AAAA,qBAAA,AAAA,iCAAA,kBAAAA,0BAAA,AAAA,AAAAA,wCAAA,UAAA;AAAA,AAAA,oBAAAvP;AAAAA;;AAAA,AAAA;;sCAAA,mFAAA,iBAAAA,mBAAA,AAAA,iGAAA,AAAAC,eAAA,EAAA,QAAAC,qCAAAC,0CAAAC,iDAAAoQ,8CAAA,AAAA,KAAAlQ,cAAA,ndAA4CiP;AAA5C,AAAAQ;GAAA,AAAA,4QAAA,wCAAA,gDAAA,qDAAA,sDAAA,iEAAA,mEAAA,yDAAA,oDAAA,6DAAA,sDAAA,mEAAA,6DAAA,mDAAA,sDAAA,AAAA,0TAAA,AAAA,6DAAA,AAAA,4BAAA,AAAA,GAAA,AAAA,wDAAA,AAAA,EAAA,AAAA,IAAA,AAAA,IAAA,AAAA,KAAA,AAAA,4iBAAA,AAAA,qBAAA,AAAA,oCAAA,kBAAAA,6BAAA,AAAA,AAAAA,2CAAA,UAAA;AAAA,AAAA,oBAAA/P;AAAAA;;AAAA,AAAA;;yCAAA,mFAAA,iBAAAA,mBAAA,AAAA,iGAAA,AAAAC,eAAA,EAAA,QAAAC,qCAAAC,0CAAAC,iDAAAqQ,6CAAA,AAAA,KAAAnQ,cAAA,rdAAgDyP;AAAhD,AAAAL;GAAA,AAAA,0QAAA,wCAAA,+EAAA,gDAAA,qDAAA,sDAAA,iEAAA,mEAAA,yDAAA,oDAAA,6DAAA,mEAAA,6DAAA,mDAAA,sDAAA,AAAA,yLAAA,AAAA,0TAAA,AAAA,2DAAA,AAAA,4BAAA,AAAA,GAAA,AAAA,uDAAA,AAAA,EAAA,AAAA,IAAA,AAAA,IAAA,AAAA,+UAAA,AAAA,qBAAA,AAAA,mCAAA,kBAAAA,4BAAA,AAAA,AAAAA,0CAAA,UAAA;AAAA,AAAA,oBAAA1P;AAAAA;;AAAA,AAAA;;wCAAA,mFAAA,iBAAAA,mBAAA,AAAA,iGAAA,AAAAC,eAAA,EAAA,QAAAC,qCAAAC,0CAAAC,iDAAAsQ,mDAAA,AAAA,KAAApQ,cAAA,1dAAuDoP;AAAvD,AAAAD;GAAA,AAAA,uRAAA,wCAAA,+EAAA,gDAAA,qDAAA,sDAAA,iEAAA,mEAAA,yDAAA,oDAAA,6DAAA,mEAAA,6DAAA,mDAAA,sDAAA,AAAA,yLAAA,AAAA,0TAAA,AAAA,uEAAA,AAAA,4BAAA,AAAA,GAAA,AAAA,kEAAA,AAAA,EAAA,AAAA,IAAA,AAAA,IAAA,AAAA,0VAAA,AAAA,qBAAA,AAAA,yCAAA,kBAAAA,kCAAA,AAAA,AAAAA,gDAAA,UAAA;AAAA,AAAA,oBAAAzP;AAAAA;;AAAA,AAAA;;8CAAA,mFAAA,iBAAAA,mBAAA,AAAA,iGAAA,AAAAC,eAAA,EAAA,QAAAC,qCAAAC,0CAAAC,iDAAAuQ,iDAAA,AAAA,KAAArQ,cAAA,9dAA6DmP;AAA7D,AAAAD;GAAA,AAAA,iRAAA,wCAAA,+EAAA,gDAAA,qDAAA,sDAAA,iEAAA,mEAAA,yDAAA,oDAAA,6DAAA,mEAAA,6DAAA,mDAAA,sDAAA,AAAA,yLAAA,AAAA,0TAAA,AAAA,mEAAA,AAAA,4BAAA,AAAA,GAAA,AAAA,+DAAA,AAAA,EAAA,AAAA,IAAA,AAAA,IAAA,AAAA,+kBAAA,AAAA,qBAAA,AAAA,uCAAA,kBAAAA,gCAAA,AAAA,AAAAA,8CAAA,UAAA;AAAA,AAAA,oBAAAxP;AAAAA;;AAAA,AAAA;;4CAAA,mFAAA,iBAAAA,mBAAA,AAAA,iGAAA,AAAAC,eAAA,EAAA,QAAAC,qCAAAC,0CAAAC,iDAAAsN,6CAAA,AAAA,KAAApN,cAAA,xdACQkP;AADR,AAAA3C;GAAA,AAAA,wQAAA,wCAAA,+EAAA,gDAAA,qDAAA,sDAAA,iEAAA,mEAAA,yDAAA,oDAAA,6DAAA,mEAAA,6DAAA,mDAAA,sDAAA,AAAA,yLAAA,AAAA,0TAAA,AAAA,0DAAA,AAAA,4BAAA,AAAA,GAAA,AAAA,qDAAA,AAAA,EAAA,AAAA,IAAA,AAAA,IAAA,AAAA,0nBAAA,AAAA,qBAAA,AAAA,kCAAA,kBAAAA,4BAAA,AAAA,AAAAA,0CAAA,UAAA;AAAA,AAAA,oBAAA7M;AAAAA;;AAAA,AAAA;;wCAAA,mFAAA,iBAAAA,mBAAA,AAAA,iGAAA,AAAAC,eAAA,EAAA,QAAAC,qCAAAC,0CAAAC,iDAAAwQ,8CAAA,AAAA,KAAAtQ,cAAA,rdACkBuM;AADlB,AAAAgD;GAAA,AAAA,4QAAA,wCAAA,+EAAA,gDAAA,qDAAA,sDAAA,iEAAA,mEAAA,yDAAA,oDAAA,6DAAA,mEAAA,6DAAA,mDAAA,sDAAA,AAAA,kMAAA,AAAA,0TAAA,AAAA,8DAAA,AAAA,4BAAA,AAAA,GAAA,AAAA,wDAAA,AAAA,EAAA,AAAA,IAAA,AAAA,IAAA,AAAA,2YAAA,AAAA,qBAAA,AAAA,oCAAA,kBAAAA,6BAAA,AAAA,AAAAA,2CAAA,UAAA;AAAA,AAAA,oBAAA7P;AAAAA;;AAAA,AAAA;;yCAAA,mFAAA,iBAAAA,mBAAA,AAAA,iGAAA,AAAAC,eAAA,EAAA,QAAAC,qCAAAC,0CAAAC,iDAAAyQ,kDAAA,AAAA,KAAAvQ,cAAA,1dACuBuP;AADvB,AAAAC;GAAA,AAAA,mRAAA,wCAAA,+EAAA,gDAAA,qDAAA,sDAAA,iEAAA,mEAAA,yDAAA,oDAAA,6DAAA,mEAAA,6DAAA,mDAAA,sDAAA,AAAA,kMAAA,AAAA,0TAAA,AAAA,qEAAA,AAAA,4BAAA,AAAA,GAAA,AAAA,iEAAA,AAAA,EAAA,AAAA,IAAA,AAAA,IAAA,AAAA,0nBAAA,AAAA,qBAAA,AAAA,wCAAA,kBAAAA,iCAAA,AAAA,AAAAA,+CAAA,UAAA;AAAA,AAAA,oBAAA9P;AAAAA;;AAAA,AAAA;;6CAAA,mFAAA,iBAAAA,mBAAA,AAAA,iGAAA,AAAAC,eAAA,EAAA,QAAAC,qCAAAC,0CAAAC,iDAAA0Q,oDAAA,AAAA,KAAAxQ,cAAA,heAC8BwP;AAD9B,AAAAF;GAAA,AAAA,4QAAA,wCAAA,gDAAA,qDAAA,sDAAA,iEAAA,mEAAA,yDAAA,oDAAA,6DAAA,mEAAA,6DAAA,mDAAA,sDAAA,AAAA,0TAAA,AAAA,8DAAA,AAAA,4BAAA,AAAA,GAAA,AAAA,mDAAA,AAAA,EAAA,AAAA,IAAA,AAAA,IAAA,AAAA,sYAAA,AAAA,qBAAA,AAAA,iCAAA,kBAAAA,mCAAA,AAAA,AAAAA,iDAAA,UAAA;AAAA,AAAA,oBAAA5P;AAAAA;;AAAA,AAAA;;+CAAA,mFAAA,iBAAAA,mBAAA,AAAA,iGAAA,AAAAC,eAAA,EAAA,QAAAC,qCAAAC,0CAAAC,iDAAA2Q,iDAAA,AAAA,KAAAzQ,cAAA,/dACyCsP;AADzC,AAAAX;GAAA,AAAA,iRAAA,wCAAA,+EAAA,gDAAA,qDAAA,sDAAA,iEAAA,mEAAA,yDAAA,oDAAA,6DAAA,sDAAA,mEAAA,6DAAA,mDAAA,sDAAA,AAAA,yLAAA,AAAA,0TAAA,AAAA,mEAAA,AAAA,4BAAA,AAAA,GAAA,AAAA,gEAAA,AAAA,EAAA,AAAA,IAAA,AAAA,IAAA,AAAA,KAAA,AAAA,yaAAA,AAAA,qBAAA,AAAA,uCAAA,kBAAAA,gCAAA,AAAA,AAAAA,8CAAA,UAAA;AAAA,AAAA,oBAAAjP;AAAAA;;AAAA,AAAA;;4CAAA,mFAAA,iBAAAA,mBAAA,AAAA,iGAAA,AAAAC,eAAA,EAAA,QAAAC,qCAAAC,0CAAAC,iDAAA4Q,6CAAA,AAAA,KAAA1Q,cAAA,xdAGQ2O;AAHR,AAAAD;GAAA,AAAA,yQAAA,wCAAA,+EAAA,gDAAA,qDAAA,sDAAA,iEAAA,mEAAA,yDAAA,oDAAA,6DAAA,sDAAA,mEAAA,6DAAA,mDAAA,sDAAA,AAAA,yLAAA,AAAA,0TAAA,AAAA,2DAAA,AAAA,4BAAA,AAAA,GAAA,AAAA,uDAAA,AAAA,EAAA,AAAA,IAAA,AAAA,IAAA,AAAA,KAAA,AAAA,gaAAA,AAAA,qBAAA,AAAA,mCAAA,kBAAAA,4BAAA,AAAA,AAAAA,0CAAA,UAAA;AAAA,AAAA,oBAAAhP;AAAAA;;AAAA,AAAA;;KAGkBgP;AAEtB,AAAeiC,0CACb,sBAAA,oFAAA,AAAA,6HAAA,wCAAA,2DAAA,gDAAA,qDAAA,sDAAA,iEAAA,yDAAA,oDAAA,6DAAA,6DAAA,mDAAA,sDAAA,AAAA,KAAA,AAAA,0TAAA,AAAA,uFAAA,AAAA,4BAAA,AAAA,GAAA,AAAA,EAAA,AAAA,IAAA,AAAA,IAAA,AAAA,qBAAA,AAAA,KAAA,kBAAAjB,+CAAA,AAAA,AAAAA,6DAAA,78CAAC1L;AAEH;;;0CAAA,1CAAK4M,0FAGF,yBAAA,zBAACxQ,+EAA8BjC,4CAE/B,yBAAA,zBAACiC,8FAA8BjC,4CAC/BqC,oBAA+BC;AAElC;;;2CAAA,AAAAnC,yEAAA,sIAAA,sDAAA,hTAAWuS,wQACGF,kDACAC;AAEd;;;AAAKpL,mCAEH,AAACb,gBAAK,8FAAA,9FAACtF,gDAAQJ,mIACb4R,yCACAF;AAWJ;;;2BAAA,AAAArS,yEAAA,oGAAA,xMAAWwS,gNAAYpM;AACvB;;;4BAAA,AAAApG,yEAAA,uGAAA,5MAAWyS,oNAAYrM;AAEvB;;;AAAKsM,+BAEH,AAAAvR,iIAAA,mFAAA,iBAAAC,mBAAA,AAAA,iGAAA,AAAAC,eAAA,EAAA,QAAAC,qCAAAC,0CAAAC,iDAAAmR,2CAAA,AAAA,KAAAjR,cAAA;AAAA,AAAA8Q;GAAA,AAAA,sQAAA,wCAAA,gDAAA,qDAAA,sDAAA,iEAAA,mEAAA,yDAAA,oDAAA,6DAAA,mEAAA,6DAAA,mDAAA,sDAAA,AAAA,0TAAA,AAAA,uDAAA,AAAA,4BAAA,AAAA,GAAA,AAAA,kDAAA,AAAA,EAAA,AAAA,KAAA,AAAA,KAAA,AAAA,qXAAA,AAAA,qBAAA,AAAA,iCAAA,kBAAAA,0BAAA,AAAA,AAAAA,wCAAA,UAAA;AAAA,AAAA,oBAAApR;AAAAA;;AAAA,AAAA;;sCAAA,mFAAA,iBAAAA,mBAAA,AAAA,iGAAA,AAAAC,eAAA,EAAA,QAAAC,qCAAAC,0CAAAC,iDAAAoR,4CAAA,AAAA,KAAAlR,cAAA,jdAAQ8Q;AAAR,AAAAC;GAAA,AAAA,yQAAA,wCAAA,gDAAA,qDAAA,sDAAA,iEAAA,mEAAA,yDAAA,oDAAA,6DAAA,mEAAA,6DAAA,mDAAA,sDAAA,AAAA,0TAAA,AAAA,yDAAA,AAAA,4BAAA,AAAA,GAAA,AAAA,qDAAA,AAAA,EAAA,AAAA,KAAA,AAAA,KAAA,AAAA,wXAAA,AAAA,qBAAA,AAAA,kCAAA,kBAAAA,2BAAA,AAAA,AAAAA,yCAAA,UAAA;AAAA,AAAA,oBAAArR;AAAAA;;AAAA,AAAA;;KAAYqR;AAsCd;;;AAAKI,uCAEH,yGAAA,0DAAA,sDAAA,8DAAA,yDAAA,sDAAA,tYAACpQ;AAEH;;;gDAAA,wKAAA,iGAAA,zTAAeqQ,gGAIZ,yBAAA,zBAAChR,4EAAoBjC,iGACAA,gHACAA,4CACrBqC,oBAAqBC;AAUxB;;;AAAK4Q,iDAEH,qJAAA,gDAAA,+HAAA,gHAAA,pbAACC,uGACAF,mJAC4B,eAAA,fAAC3S,8IACDN,6GACA2D,gDAE3B,yBAAA,zBAAC1B,uFAA0B0B;AAS/B;;;AAAKyP,qDAEH,qJAAA,2CAAA,2HAAA,3TAACD,uGACAF,8IACU,eAAA,fAAC3S,kIACDqD;AAEb;;;AAAe0P,4DAEb,qJAAA,rJAACF,uGACAF,8FAEC,yBAAA,zBAAChR,sFAA0BK,gBAE3B,yBAAA,zBAACL,uFAA0ByF;AAE/B,AAAA;AAAA,AAUA;;;AAAK4L,qDAEH,iKAAA,gDAAA,mIAAA,yFAAA,miDAAA,h9DAACH,uGACAE,+JACc,eAAA,fAAC/S,4IACDsF,8FAGA,sBAAA,sEAAA,AAAA,4GAAA,wCAAA,gDAAA,qDAAA,sDAAA,iEAAA,yDAAA,oDAAA,2DAAA,6DAAA,6DAAA,mDAAA,sDAAA,AAAA,0TAAA,AAAA,sEAAA,AAAA,4BAAA,AAAA,GAAA,AAAA,EAAA,AAAA,KAAA,AAAA,KAAA,AAAA,KAAA,AAAA,qBAAA,AAAA,KAAA,kBAAA2N,iCAAA,AAAA,AAAAA,+CAAA,n4CAAC1N,64CAEd,yBAAA,zBAAC5D,mIAA0BI,oBAAUC;AAEzC;;;oDAAA,iFAAA,2DAAA,8DAAA,iEAAA,/TAAKkR;AAIL;;;AAAKC,6DAEH,AAAC5U,8CAAMC,kBAAO0U;AAUhB;;;AAAKE,kDAEH,iKAAA,2CAAA,5MAACP,uGACAE,0JAGOI;AAKV;;;;AAAKE,mCAGH,+GAAA,WAAAC,1HAAChT;AAAD,AACE,yJAAA,lJAACyC,6CAAO,AAAA,mFAAAuQ;sDADV,WAAAC,9DACgCP;AADhC,AAEE,yJAAA,lJAACjQ,6CAAO,AAAA,mFAAAwQ;kDAFV,WAAAC,1DAEgCZ;AAFhC,AAGE,yJAAA,lJAAC7P,6CAAO,AAAA,mFAAAyQ;sDAHV,nDAGgCV,yGACAM;AAElC;;;AAAKK,4IAGE/T,4CAAuB2T,lJAExB,sDAAA,tDAAC5T,qLAAc,WAAKiU;AAAL,AACC,OAACC,uBAAO,WAAAC;AAAA,AAAA,IAAAC,aAAAD;eAAA,AAAA1O,4CAAA2O,WAAA,IAAA,tEAAMC;qBAAN,AAAA5O,4CAAA2O,WAAA,IAAA,5EAAeE;AAAf,AACE,OAAChR,6CAAO+Q,SAAS,AAAA,mFAAOC;GAC1BL;GAHxB;AAMN;;;mCAAA,gDAAA,nFAAKM,2IAE8BhS,gBAChC,yBAAA,zBAACL,iGAA+B8R,oCAEhC,yBAAA,zBAAC9R,2FAA+B,AAACC,kBAAQlC,6CAGzCqC,oBAAgCC;AAKnC,AAAA;AAAA,AAEA;;;AAAKiS,mCAEH,AAAC/N,gBAAK,wEAAA,xEAACgO,mDAAW9R,+EAIhB,yDAAA,2CAAA,wDAAA,5JAAC+R,wBAAgBH,sMACjB,sBAAA,qEAAA,AAAA,0GAAA,wCAAA,gDAAA,qDAAA,sDAAA,iEAAA,yDAAA,oDAAA,2DAAA,6DAAA,6DAAA,mDAAA,sDAAA,AAAA,0TAAA,AAAA,oEAAA,AAAA,4BAAA,AAAA,GAAA,AAAA,EAAA,AAAA,KAAA,AAAA,KAAA,AAAA,KAAA,AAAA,qBAAA,AAAA,KAAA,kBAAAI,gCAAA,AAAA,AAAAA,8CAAA,53CAAC7O;AAEL;;;;;;;;2CAAA,gDAAA,iGAAA,sGAAA,lSAAK8O,gJAQ8B3U,2GACAmC,6GAGAnC,4CAChC,yBAAA,zBAACiC,gGAA+B,AAACC,kBAAQE,0DAEzC,yBAAA,zBAACH,4FAA+B,AAACC,kBAAQ0S,kCACzCtS,gBAAgCA;AAEnC;;;kDAAA,lDAAKuS;AAIL;;;AAAKC,mCAEH,AAACzU,4GAAWsD,gDAA2BkR;AAEzC;;;uCAAA,iFAAA,oEAAA,qEAAA,oEAAA,rUAAKE;AAIL;;;;;AAAKC,oCAIH,AAACnW,8CAAMC,kBAAOiW;AAEhB,AAAA,AAEA;;;;;;;;;;;;;;AAAKE,mPAgBD,yBAAA,zBAAChT,gwBACD6S,5bAEA,yBAAA,zBAAC7S,m1EACDsS,5BAQAxJ,5nEAKA,yBAAA,zBAAC9I,4vEACD+S,1kFAgBA,yBAAA,zBAAC/S,4pBACD,ysDAAA,zsDAACrD,kBACA,AAACyB,4GACA,yGAAA,kDAAA,3JAACuC,sNACD,sBAAA,kEAAA,AAAA,oGAAA,wCAAA,gDAAA,qDAAA,sDAAA,iEAAA,yDAAA,oDAAA,2DAAA,6DAAA,6DAAA,mDAAA,sDAAA,AAAA,0TAAA,AAAA,4DAAA,AAAA,4BAAA,AAAA,GAAA,AAAA,EAAA,AAAA,KAAA,AAAA,KAAA,AAAA,KAAA,AAAA,qBAAA,AAAA,KAAA,kBAAAsS,6BAAA,AAAA,AAAAA,2CAAA,r2CAACrP,lkCAQH,yBAAA,zBAAC5D,ksBACDjC,/XAQA,yBAAA,zBAACiC,sxEACD,AAACC,kBAAQyB,/yFAIT,yBAAA,zBAAC1B,8sBACD,kBAAA,lBAACC,qGAASyS,v0BAEVtS,ktBAAUC,hzBACX,sDAAA,saAAA,29FAAA,v7GAACvC,s/FACA,AAACyU,mDACA,gDAAA,qEAAA,rHAACW,0LACD,AAACtR,qBAAW,mDAAA,qEAAA,xHAAC2Q;AAGlB;;;AAAKY,6BAEH,mNAAA,WAAAC,9NAACtV,sDACA,uCAAA,vCAACuV,0HAAmBL;AADrB,AAEE,OAACM,sDAA2B,AAACC,+CAAOC,sBAAM,4CAAA,wDAAAJ,pGAACK;GAF7C;AAKF;;;AAAKR,8BAEH,uNAAA,vNAACtW,kBACA,AAAC+W,sCAAiB,uCAAA,vCAACL,0HAAmBjP;AAGzC;;;AAAKqO,g5BAGD,yBAAA,zBAACzS,goCAA8BsS,1jDAC/B,yBAAA,zBAACtS,+pCAA8B6S,z5BAC/B,yBAAA,zBAAC7S,k/BAA8B,uCAAA,vCAACqT,0HAAmBjO,/gCACnD,yBAAA,zBAACpF,yjCAA8B,uCAAA,vCAACqT,0HAAmBjP,91BACnD,yBAAA,zBAACpE,0wCAA+BjC,4CAAuBsQ,5zDACvD,yBAAA,zBAACrO,0iCAA8BiT,7nCAC/B,yBAAA,zBAACjT,imCAA8B8I,xqBAC/B,yBAAA,zBAAC9I,mkCAA8B2T,x2DAC/B,yBAAA,zBAAC3T,mjCAA8B,AAAC0T,sCAAiB,uCAAA,vCAACL,0HAAmBzC,5VAKrE,yBAAA,zBAAC5Q,yoCAAsC0B,uGACAA,36DAIvC,yBAAA,zBAAC1B,qtCAA8BmT,1zCAI/B,yBAAA,zBAACnT,mqCAAiC,kBAAA,lBAACC,qGAASyS,n3CAG5CtS,ujCAA+BC,rpCAEhC,sDAAA,69DAAA,2CAAA,oGAAA,+GAAA,jxEAACvC,25EACA,WAAK8V,59EAIN,AAAC9V;AAJA,AACE,oDAAA,7CAACsD,iDAAS,AAACyS,gBAAW,4BAAA,mFAAA,oEAAA,nLAACC,sBAAYF;GAFtC,+EAMC,WAAAG;AAAA,AAAA,IAAAC,aAAAD;IAAAC,iBAAA,AAAAhT,4BAAAgT;eAAA,AAAA/S,4CAAA+S,eAAA,tEAAaC;aAAb,AAAAhT,4CAAA+S,eAAA,pEAAsBE;AAAtB,AACE,OAACC,uBAAO,AAACC,uDAAiB,AAACC,cAAIJ,UAAU,AAACI,cAAIH;GAFjD;AA+BH;;;;;;;;;;;;;;;;;;;;;;;;;;uCAAA,wCAAA,6DAAA,sDAAA,6DAAA,2DAAA,yEAAA,sEAAA,oEAAA,yEAAA,yDAAA,6DAAA,0EAAA,yDAAA,yFAAA,8DAAA,8EAAA,wEAAA,gEAAA,qEAAA,kDAAA,kEAAA,4EAAA,wEAAA,6EAAA,4DAAA,4DAAA,sDAAA,+DAAA,2CAAA,kEAAA,iFAAA,kEAAA,2DAAA,8DAAA,iEAAA,kFAAA,2CAAA,qDAAA,sDAAA,kEAAA,iFAAA,kEAAA,2DAAA,8EAAA,qEAAA,8EAAA,2CAAA,qDAAA,0DAAA,8DAAA,4DAAA,kEAAA,iFAAA,yFAAA,2CAAA,qDAAA,4DAAA,8DAAA,4DAAA,kEAAA,iFAAA,kEAAA,gEAAA,8DAAA,uDAAA,wGAAA,2CAAA,qDAAA,0DAAA,8DAAA,uDAAA,kEAAA,iFAAA,qGAAA,2CAAA,kEAAA,iFAAA,kGAAA,2CAAA,qDAAA,4DAAA,8DAAA,0DAAA,kEAAA,iFAAA,gGAAA,2CAAA,qDAAA,sDAAA,kEAAA,iFAAA,qGAAA,2CAAA,qDAAA,4DAAA,kEAAA,iFAAA,kEAAA,gEAAA,8DAAA,uDAAA,wGAAA,2CAAA,qDAAA,4DAAA,8DAAA,uDAAA,kEAAA,iFAAA,yFAAA,2CAAA,kEAAA,iFAAA,sGAAA,2CAAA,qDAAA,0DAAA,8DAAA,4DAAA,kEAAA,iFAAA,kEAAA,2EAAA,+EAAA,8DAAA,0EAAA,uDAAA,iFAAA,kFAAA,2CAAA,qDAAA,0DAAA,8DAAA,uDAAA,kEAAA,iFAAA,qHAAA,2CAAA,qDAAA,sDAAA,kEAAA,iFAAA,8EAAA,0FAAA,2CAAA,qDAAA,0DAAA,8DAAA,uDAAA,kEAAA,iFAAA,0GAAA,2CAAA,qDAAA,0DAAA,8DAAA,uDAAA,kEAAA,iFAAA,oGAAA,2CAAA,qDAAA,sDAAA,kEAAA,iFAAA,kEAAA,2DAAA,8EAAA,qEAAA,8EAAA,2CAAA,kEAAA,iFAAA,iGAAA,2CAAA,kEAAA,iFAAA,8EAAA,2CAAA,qDAAA,sDAAA,kEAAA,iFAAA,8EAAA,8FAAA,2CAAA,kEAAA,iFAAA,wGAAA,2CAAA,qDAAA,sDAAA,kEAAA,iFAAA,8EAAA,oGAAA,2CAAA,qDAAA,sDAAA,kEAAA,iFAAA,8EAAA,yGAAA,2CAAA,qDAAA,4DAAA,8DAAA,4DAAA,kEAAA,iFAAA,wFAAA,2CAAA,qDAAA,4DAAA,kEAAA,iFAAA,kEAAA,uDAAA,wFAAA,2CAAA,qDAAA,0DAAA,kEAAA,iFAAA,kEAAA,2EAAA,+EAAA,8DAAA,0EAAA,uDAAA,iFAAA,kFAAA,2CAAA,qDAAA,4DAAA,8DAAA,uDAAA,kEAAA,iFAAA,h6eAAKI;AA8FL;;;AAAKC,qCAEH,AAAC3X,8CAAMC,kBAAO,AAAC2X,eAAKF;AAEtB;;;AAAKhD,kCAEH,AAAC1U,8CAAMC,kBAAO,eAAA,fAAC4X,oEAAW,AAACD,eAAKF;AA0BlC;;;oCAAA,AAAApW,yEAAA,sHAAA,nOAAWwW,8OAET,wJAAA,2CAAA,nMAACtW,4GAAWL,yIACKA;AAEnB;;;iCAAA,AAAAG,yEAAA,gHAAA,1NAAWyW,mOACF,AAACvW,4GAAWgG,2BAAMsQ;AAE3B;;;gCAAA,AAAAxW,yEAAA,+GAAA,xNAAW0W,iOACFF;AAET;;;AAAKG,uCAIH,AAACzW,4GACAgG,2BACA,AAAA/E,iIAAA,mFAAA,iBAAAC,mBAAA,AAAA,iGAAA,AAAAC,eAAA,EAAA,QAAAC,qCAAAC,0CAAAC,iDAAAoV,iDAAA,AAAA,KAAAlV,cAAA;AAAA,AAAA+U;GAAA,AAAA,kRAAA,wCAAA,gDAAA,qDAAA,sDAAA,iEAAA,mEAAA,yDAAA,oDAAA,6DAAA,mEAAA,6DAAA,mDAAA,sDAAA,AAAA,0TAAA,AAAA,oEAAA,AAAA,4BAAA,AAAA,GAAA,AAAA,8DAAA,AAAA,EAAA,AAAA,KAAA,AAAA,KAAA,AAAA,ifAAA,AAAA,qBAAA,AAAA,uCAAA,kBAAAA,gCAAA,AAAA,AAAAA,8CAAA,UAAA;AAAA,AAAA,oBAAArV;AAAAA;;AAAA,AAAA;;4CAAA,mFAAA,iBAAAA,mBAAA,AAAA,iGAAA,AAAAC,eAAA,EAAA,QAAAC,qCAAAC,0CAAAC,iDAAAqV,gDAAA,AAAA,KAAAnV,cAAA,3dAAQ+U;AAAR,AAAAC;GAAA,AAAA,iRAAA,wCAAA,gDAAA,qDAAA,sDAAA,iEAAA,mEAAA,yDAAA,oDAAA,6DAAA,mEAAA,6DAAA,mDAAA,sDAAA,AAAA,0TAAA,AAAA,iEAAA,AAAA,4BAAA,AAAA,GAAA,AAAA,6DAAA,AAAA,EAAA,AAAA,KAAA,AAAA,KAAA,AAAA,oWAAA,AAAA,qBAAA,AAAA,sCAAA,kBAAAA,+BAAA,AAAA,AAAAA,6CAAA,UAAA;AAAA,AAAA,oBAAAtV;AAAAA;;AAAA,AAAA;;KAAkBsV;AAErB;;;;iCAAA,gDAAA,jFAAKI,sIAGwBT,mCAG1B,yBAAA,zBAACvU,4EAAyBjC,4CAC1B,yBAAA,zBAACiC,kFAAyB6U,qCAG1B,yBAAA,zBAAC7U,gFAAyBK,gBAG1B,yBAAA,zBAACL,+EAAyBjC,4CAG1B,yBAAA,zBAACiC,+EAAyBjC,4CAC1B,yBAAA,zBAACiC,sFAAyBK,gBAE1BD,oBAA0BC;AAE7B;;;qCAAA,rCAAK4U,wHAEFD;AAWH;;;gCAAA,hCAAeE,gFAGZ,yBAAA,zBAAClV,sGAAiCjC,4CAGlCqC,oBAAkCC;AAErC;;;;;AAAe8U,mCAIb,sDAAA,tDAACrX,sGAGC,yBAAA,zBAACkC,4FAAuC2T,yDAGxC,yBAAA,zBAAC3T,iHAAuC2T,yDAGxCvT,oBAAwCC,kBACzC,WAAA+U;AAAA,AAAA,IAAAC,aAAAD;IAAAC,iBAAA,AAAArU,4BAAAqU;kBAAA,AAAApU,4CAAAoU,eAAA,zEAAaC;4BAAb,AAAArU,4CAAAoU,eAAA,nFAAyBE;AAAzB,AACE,GAAA,AAAA3W,cAAQ,iBAAA8D,oBAAU4S;AAAV,AAAA,oBAAA5S;AAAsB6S;;AAAtB7S;;;AAAR;;AAEE,QAAS4S,eAAYC;;GAb1B;AAgBF;;;yCAAA,zCAAeC,yFAIZ,yBAAA,zBAACxV,kHACDyF,iBAIA,yBAAA,zBAACzF,8FACDyF,iBAKA,yBAAA,zBAACzF,iHACDyF,iBAIA,yBAAA,zBAACzF,8GACDyF,iBAKA,yBAAA,zBAACzF,qGACD,AAACC,kBAAQwF,kBAKT,yBAAA,zBAACzF,yIACD,AAACC,kBAAQwF,kBAIT,yBAAA,zBAACzF,iHACD,AAACC,kBAAQwF,kBAITrF,oBACAC;AASH;;;AAAKoV,+BAEH,yGAAA,yDAAA,0DAAA,iEAAA,qEAAA,+DAAA,iFAAA,gFAAA,uEAAA,+DAAA,4EAAA,0EAAA,uDAAA,8DAAA,n9BAAC9U;AAiBH;;;;;4BAAA,5BAAK+U,s6BAMF,yBAAA,zBAAC1V,6yBAA2C,AAACC,kBAAQwV,hyCACrD,yBAAA,zBAACzV,67BAA2C,AAACC,kBAAQyB,ziCACrD,yBAAA,zBAAC1B,o9BAA2C,AAACC,kBAAQyB,jgBACrD,yBAAA,zBAAC1B,g0BAA2C,AAACC,kBAAQyB,9lDACrD,yBAAA,zBAAC1B,y7BAA2C,AAACC,kBAAQlC,7eACrD,yBAAA,zBAACiC,m6BAA2C,AAACC,kBAAQyB,1vBACrD,yBAAA,zBAAC1B,80BAA2C,kBAAA,lBAACC,kEAASI,gBAAMA,/9CAC5D,yBAAA,zBAACL,85BAA2C,AAACC,kBAAQyB,z1BAGrD,yBAAA,zBAAC1B,04BAA2C,kBAAA,mFAAA,rGAACC,qJAAUI,gBAAMA,nqBAI7D,yBAAA,zBAACL,u4BAA2C,AAACC,kBACiBI;AAKjE;;;;;;;;;;;2DAAA,3DAAcsV;AAgBd;;;;;;AAAKC,kCAKH,AAACxX,4GAAW,AAACC,eAAKsX,0DAAqCjU;AAEzD;;;;AAAKmU,y8CAIiCD,/PAEA,yGAAA,wDAAA,jKAACjV,/8BACnC,yBAAA,zBAACX,kuBAAiCqS,7PAClC,yBAAA,zBAACrS,0sBAAiCyS,3jBAClC,yBAAA,zBAACzS,0nBAAiCiV,3pCAOlC,yBAAA,zBAACjV,grBAAiC,AAACC,kBAAQiV,5hBAC3C,yBAAA,zBAAClV,wmBAAiC,AAACC,kBAAQkV,9hBAC3C,yBAAA,zBAACnV,gkBAAiC,AAACC,kBAAQuV,7vBAM3C,yBAAA,zBAACxV,0oBAAiC,AAACC,kBAAQyV,11BAI3CtV,suBAAkCC,p0BAKnC,sDAAA,4eAAA,uIAAA,6mCAAA,txDAACvC,q4CACA,AAACyU,mDACA,gDAAA,yDAAA,zGAACW,kKACD,AAACtR,qBAAW,mDAAA,yDAAA,5GAAC2Q,rqDAEf,AAACzU,84DACA,WAAAgY,/8DAeD,AAAChY;AAfA,AAAA,IAAAiY,aAAAD;IAAAC,iBAAA,AAAA/U,4BAAA+U;cAAA,AAAA9U,4CAAA8U,eAAA,rEAAMC;WAAN,AAAA/U,4CAAA8U,eAAA,lEAAsBE;iBAAtB,AAAAhV,4CAAA8U,eAAA,xEAAmCG;AAAnC,AACE,IAAAC,WAAWD;IAAXC,eAAA,EAAA,CAAAA,oBAAAC,oBAAA,AAAAD,aAAA;AAAA,AAAA,QAAAA;KAAA;AACUH;;;KADV;AAEUC;;;;AAFV,MAAA,KAAAhU,MAAA,CAAA,mEAAAkU;;;GAFH,+KAgBA,jGACC,qBAAA,rBAACvU;AAML;;;;AAA6ByU,sCAG3B,AAACC,sBAAYT","names":["metabase.mbql.schema/date-bucketing-units","metabase.mbql.schema/time-bucketing-units","metabase.mbql.schema/datetime-bucketing-units","clojure.set.union","metabase.mbql.schema/DateUnit","schema.core/named","cljs.core.apply","schema.core/enum","metabase.mbql.schema/TimeUnit","metabase.mbql.schema/DateTimeUnit","metabase.mbql.schema/TimezoneId","js/shadow.js.shim.module$moment","metabase.mbql.schema/TemporalExtractUnits","metabase.mbql.schema/DatetimeDiffUnits","metabase.mbql.schema/ExtractWeekModes","metabase.mbql.schema/RelativeDatetimeUnit","metabase.mbql.schema/can-parse-iso-8601?","s","cljs.core.not_EQ_","js/Date","metabase.mbql.schema/can-parse-date?","metabase.mbql.schema/can-parse-datetime?","metabase.mbql.schema/can-parse-time?","metabase.mbql.schema/LiteralDateString","schema.core.constrained","metabase.mbql.schema.helpers/NonBlankString","metabase.mbql.schema/LiteralDatetimeString","metabase.mbql.schema/LiteralTimeString","metabase.mbql.schema.helpers.clause","metabase.mbql.schema/relative-datetime","schema.core.cond_pre","schema.core/eq","schema.core/Int","metabase.mbql.schema/interval","metabase.mbql.schema/absolute-datetime","p1__60880#","p1__60882#","schema.core.conditional","cljs.core/not","metabase.mbql.schema.helpers/is-clause?","cljs.core/second","metabase.mbql.schema/time","metabase.mbql.schema/DateOrDatetimeLiteral","cljs.core.partial","metabase.mbql.schema/TimeLiteral","metabase.mbql.schema/TemporalLiteral","metabase.mbql.schema/DateTimeValue","metabase.mbql.schema.helpers.one_of_STAR_","or__5045__auto__","cljs.core/meta","js/metabase","js/metabase.mbql","js/metabase.mbql.schema","js/metabase.mbql.schema.absolute-datetime","cljs.core/Var","js/metabase.mbql.schema.relative-datetime","js/metabase.mbql.schema.time","metabase.mbql.schema/ValueTypeInfo","schema.core/optional-key","schema.core/maybe","metabase.mbql.schema.helpers/FieldType","metabase.mbql.schema.helpers/FieldSemanticOrRelationType","schema.core/Keyword","schema.core/Any","metabase.mbql.schema/value","metabase.mbql.schema/expression","schema.core.pred","cljs.core/map?","metabase.mbql.schema/BinningStrategyName","schema.core.enum$","metabase.mbql.schema/validate-bin-width","schema","p__60889","map__60891","cljs.core/--destructure-map","cljs.core.get","strategy","bin-width","cljs.core._EQ_","metabase.mbql.schema/validate-num-bins","p__60892","map__60893","num-bins","metabase.mbql.schema/FieldBinningOptions","metabase.mbql.schema.helpers/IntGreaterThanZero","schema.core/Num","cljs.core/complement","cljs.core/neg?","var_args","G__60898","metabase.mbql.schema/valid-temporal-unit-for-base-type?","js/Error","p__60899","map__60900","base-type","temporal-unit","_field-options","metabase.mbql.schema.valid_temporal_unit_for_base_type_QMARK_","temp__5802__auto__","units","and__5043__auto__","pred__60902","p1__60896#","p2__60895#","expr__60903","cljs.core.isa_QMARK_","cljs.core/contains?","metabase.mbql.schema/validate-temporal-unit","metabase.mbql.schema/no-binning-options-at-top-level","metabase.mbql.schema/FieldOptions","metabase.mbql.schema/require-base-type-for-field-name","p__60908","vec__60909","cljs.core.nth","map__60912","_","id-or-name","metabase.mbql.schema/field","schema.core/recursive","metabase.mbql.schema/field:id","p__60914","vec__60915","cljs.core/integer?","metabase.mbql.schema/Field*","js/metabase.mbql.schema.expression","js/metabase.mbql.schema.field","metabase.mbql.schema/Field","metabase.mbql.schema/aggregation","metabase.mbql.schema/FieldOrAggregationReference","schema.core/if","metabase.mbql.schema/string-functions","metabase.mbql.schema/StringExpressionArg","cljs.core/string?","schema.core/Str","metabase.mbql.schema/StringExpression","metabase.mbql.schema/numeric-functions","metabase.mbql.schema/boolean-functions","metabase.mbql.schema/aggregations","metabase.mbql.schema/datetime-functions","metabase.mbql.schema/NumericExpressionArg","cljs.core/number?","metabase.mbql.schema/NumericExpression","metabase.mbql.schema/Aggregation","metabase.mbql.schema/DateTimeExpressionArg","metabase.mbql.schema/DatetimeExpression","metabase.mbql.schema/ExpressionArg","cljs.core/boolean?","schema.core/Bool","metabase.mbql.schema/BooleanExpression","metabase.mbql.schema/NumericExpressionArgOrInterval","metabase.mbql.schema/IntGreaterThanZeroOrNumericExpression","metabase.mbql.schema/coalesce","metabase.mbql.schema/substring","metabase.mbql.schema/length","metabase.mbql.schema/trim","metabase.mbql.schema/rtrim","metabase.mbql.schema/ltrim","metabase.mbql.schema/upper","metabase.mbql.schema/lower","metabase.mbql.schema/replace","metabase.mbql.schema/concat","metabase.mbql.schema/regex-match-first","metabase.mbql.schema/+","metabase.mbql.schema/-","metabase.mbql.schema//","metabase.mbql.schema/*","metabase.mbql.schema/floor","metabase.mbql.schema/ceil","metabase.mbql.schema/round","metabase.mbql.schema/abs","metabase.mbql.schema/power","metabase.mbql.schema/sqrt","metabase.mbql.schema/exp","metabase.mbql.schema/log","metabase.mbql.schema/NumericExpression*","metabase.mbql.schema/datetime-diff","metabase.mbql.schema/temporal-extract","metabase.mbql.schema/get-year","metabase.mbql.schema/get-quarter","metabase.mbql.schema/get-month","metabase.mbql.schema/get-week","metabase.mbql.schema/get-day","metabase.mbql.schema/get-day-of-week","metabase.mbql.schema/get-hour","metabase.mbql.schema/get-minute","metabase.mbql.schema/get-second","metabase.mbql.schema/convert-timezone","metabase.mbql.schema/ArithmeticDateTimeUnit","metabase.mbql.schema/datetime-add","metabase.mbql.schema.helpers/clause","metabase.mbql.schema/now","metabase.mbql.schema/datetime-subtract","metabase.mbql.schema/DatetimeExpression*","js/metabase.mbql.schema.+","js/metabase.mbql.schema.datetime-add","js/metabase.mbql.schema.datetime-subtract","js/metabase.mbql.schema.convert-timezone","js/metabase.mbql.schema.now","metabase.mbql.schema/StringExpression*","metabase.mbql.schema/and","metabase.mbql.schema/Filter","metabase.mbql.schema/or","metabase.mbql.schema/not","metabase.mbql.schema/FieldOrRelativeDatetime","metabase.mbql.schema/EqualityComparable","metabase.mbql.schema/OrderComparable","metabase.mbql.schema/=","metabase.mbql.schema/!=","metabase.mbql.schema/<","metabase.mbql.schema/>","metabase.mbql.schema/<=","metabase.mbql.schema/>=","metabase.mbql.schema/between","metabase.mbql.schema/inside","metabase.mbql.schema/is-null","metabase.mbql.schema/not-null","metabase.mbql.schema/is-empty","metabase.mbql.schema/not-empty","metabase.mbql.schema/StringFilterOptions","metabase.mbql.schema/starts-with","metabase.mbql.schema/ends-with","metabase.mbql.schema/contains","metabase.mbql.schema/does-not-contain","metabase.mbql.schema/TimeIntervalOptions","metabase.mbql.schema/time-interval","metabase.mbql.schema/segment","metabase.mbql.schema/BooleanExpression*","js/metabase.mbql.schema.and","js/metabase.mbql.schema.or","js/metabase.mbql.schema.not","js/metabase.mbql.schema.<","js/metabase.mbql.schema.<=","js/metabase.mbql.schema.>","js/metabase.mbql.schema.>=","js/metabase.mbql.schema.=","js/metabase.mbql.schema.!=","metabase.mbql.schema/Filter*","js/metabase.mbql.schema.between","js/metabase.mbql.schema.starts-with","js/metabase.mbql.schema.ends-with","js/metabase.mbql.schema.contains","js/metabase.mbql.schema.does-not-contain","js/metabase.mbql.schema.inside","js/metabase.mbql.schema.is-empty","js/metabase.mbql.schema.not-empty","js/metabase.mbql.schema.is-null","js/metabase.mbql.schema.not-null","js/metabase.mbql.schema.time-interval","js/metabase.mbql.schema.segment","metabase.mbql.schema/CaseClause","schema.core/one","metabase.mbql.schema/CaseClauses","metabase.mbql.schema/CaseOptions","metabase.mbql.schema/case","js/metabase.mbql.schema.-","js/metabase.mbql.schema.*","js/metabase.mbql.schema.coalesce","js/metabase.mbql.schema.length","js/metabase.mbql.schema.floor","js/metabase.mbql.schema.ceil","js/metabase.mbql.schema.round","js/metabase.mbql.schema.abs","js/metabase.mbql.schema.power","js/metabase.mbql.schema.sqrt","js/metabase.mbql.schema.exp","js/metabase.mbql.schema.log","js/metabase.mbql.schema.case","js/metabase.mbql.schema.datetime-diff","js/metabase.mbql.schema.temporal-extract","js/metabase.mbql.schema.get-year","js/metabase.mbql.schema.get-quarter","js/metabase.mbql.schema.get-month","js/metabase.mbql.schema.get-week","js/metabase.mbql.schema.get-day","js/metabase.mbql.schema.get-day-of-week","js/metabase.mbql.schema.get-hour","js/metabase.mbql.schema.get-minute","js/metabase.mbql.schema.get-second","js/metabase.mbql.schema.substring","js/metabase.mbql.schema.trim","js/metabase.mbql.schema.ltrim","js/metabase.mbql.schema.rtrim","js/metabase.mbql.schema.replace","js/metabase.mbql.schema.lower","js/metabase.mbql.schema.upper","js/metabase.mbql.schema.concat","js/metabase.mbql.schema.regex-match-first","metabase.mbql.schema/FieldOrExpressionDef","metabase.mbql.schema/count","metabase.mbql.schema/cum-count","metabase.mbql.schema/avg","metabase.mbql.schema/cum-sum","metabase.mbql.schema/distinct","metabase.mbql.schema/sum","metabase.mbql.schema/min","metabase.mbql.schema/max","metabase.mbql.schema/sum-where","metabase.mbql.schema/count-where","metabase.mbql.schema/share","metabase.mbql.schema/stddev","metabase.mbql.schema/ag:var","metabase.mbql.schema/median","metabase.mbql.schema/percentile","metabase.mbql.schema/metric","metabase.mbql.schema/UnnamedAggregation*","js/metabase.mbql.schema.avg","js/metabase.mbql.schema.cum-sum","js/metabase.mbql.schema.distinct","js/metabase.mbql.schema.stddev","js/metabase.mbql.schema.sum","js/metabase.mbql.schema.min","js/metabase.mbql.schema.max","js/metabase.mbql.schema.metric","js/metabase.mbql.schema.share","js/metabase.mbql.schema.count-where","js/metabase.mbql.schema.sum-where","js/metabase.mbql.schema.median","js/metabase.mbql.schema.percentile","js/metabase.mbql.schema.ag:var","js/metabase.mbql.schema.cum-count","js/metabase.mbql.schema.count","metabase.mbql.schema/UnnamedAggregation","metabase.mbql.schema/AggregationOptions","metabase.mbql.schema/aggregation-options","metabase.mbql.schema/asc","metabase.mbql.schema/desc","metabase.mbql.schema/OrderBy","js/metabase.mbql.schema.asc","js/metabase.mbql.schema.desc","metabase.mbql.schema/TemplateTagType","metabase.mbql.schema/TemplateTag:Common","metabase.mbql.schema/TemplateTag:Snippet","cljs.core.merge","metabase.mbql.schema/TemplateTag:SourceQuery","metabase.mbql.schema/TemplateTag:Value:Common","metabase.mbql.schema/TemplateTag:FieldFilter","metabase.mbql.schema/WidgetType","metabase.mbql.schema/raw-value-template-tag-types","metabase.mbql.schema/TemplateTag:RawValue:Type","metabase.mbql.schema/TemplateTag:RawValue","metabase.mbql.schema/TemplateTag","p1__61155#","p1__61156#","p1__61161#","metabase.mbql.schema/TemplateTagMap","m","cljs.core/every?","p__61221","vec__61222","tag-name","tag-definition","metabase.mbql.schema/NativeQuery","metabase.mbql.schema/SourceQuery","cljs.core.every_pred","clojure.set/rename-keys","metabase.mbql.schema/MBQLQuery","metabase.mbql.schema/SourceQueryMetadata","metabase.mbql.schema.helpers/Map","metabase.mbql.schema/source-table-card-id-regex","metabase.mbql.schema/SourceTable","metabase.mbql.schema/join-strategies","metabase.mbql.schema/JoinStrategy","metabase.mbql.schema/Join","metabase.mbql.schema/Fields","cljs.core.some_fn","metabase.mbql.schema/Joins","p1__61225#","metabase.mbql.schema.helpers/non-empty","metabase.mbql.schema.helpers/empty-or-distinct?","cljs.core.filter","cljs.core/some?","cljs.core.map","metabase.mbql.schema.helpers/distinct","metabase.mbql.schema.helpers/IntGreaterThanOrEqualToZero","query","cljs.core/count","cljs.core/select-keys","p__61226","map__61227","breakout","fields","cljs.core/empty?","clojure.set.intersection","cljs.core/set","metabase.mbql.schema/parameter-types","metabase.mbql.schema/ParameterType","cljs.core/keys","cljs.core/cons","metabase.mbql.schema/template-tag","metabase.mbql.schema/dimension","metabase.mbql.schema/variable","metabase.mbql.schema/ParameterTarget","js/metabase.mbql.schema.dimension","js/metabase.mbql.schema.variable","metabase.mbql.schema/Parameter","metabase.mbql.schema/ParameterList","metabase.mbql.schema/Settings","metabase.mbql.schema/Constraints","p__61228","map__61229","max-results","max-results-bare-rows","metabase.mbql.schema/MiddlewareOptions","metabase.mbql.schema/Context","metabase.mbql.schema/Info","metabase.mbql.schema/saved-questions-virtual-database-id","metabase.mbql.schema/DatabaseID","metabase.mbql.schema/Query","p__61230","map__61231","native","mbql","query-type","G__61232","cljs.core/Keyword","metabase.mbql.schema/validate-query","schema.core/validator"],"sourcesContent":["(ns metabase.mbql.schema\n  \"Schema for validating a *normalized* MBQL query. This is also the definitive grammar for MBQL, wow!\"\n  (:refer-clojure :exclude [count distinct min max + - / * and or not not-empty = < > <= >= time case concat replace abs])\n  #?@\n   (:clj\n    [(:require\n      [clojure.core :as core]\n      [clojure.set :as set]\n      [metabase.mbql.schema.helpers :as helpers :refer [is-clause?]]\n      [metabase.mbql.schema.macros :refer [defclause one-of]]\n      [schema.core :as s])\n     (:import\n      (java.time ZoneId)\n      (java.time.format DateTimeFormatter))]\n    :cljs\n    [(:require\n      [\"moment\" :as moment]\n      [\"moment-timezone\" :as mtz]\n      [clojure.core :as core]\n      [clojure.set :as set]\n      [metabase.mbql.schema.helpers :as helpers :refer [is-clause?]]\n      [metabase.mbql.schema.macros :refer [defclause one-of]]\n      [schema.core :as s])]))\n\n#?(:cljs\n   (comment\n     moment/keepme\n     mtz/keepme)) ;; to get the timezone list from moment\n\n;; A NOTE ABOUT METADATA:\n;;\n;; Clauses below are marked with the following tags for documentation purposes:\n;;\n;; *  Clauses marked `^:sugar` are syntactic sugar primarily intended to make generating queries easier on the\n;;    frontend. These clauses are automatically rewritten as simpler clauses by the `desugar` or `expand-macros`\n;;    middleware. Thus driver implementations do not need to handle these clauses.\n;;\n;; *  Clauses marked `^:internal` are automatically generated by `wrap-value-literals` or other middleware from values\n;;    passed in. They are not intended to be used by the frontend when generating a query. These add certain\n;;    information that simplify driver implementations. When writing MBQL queries yourself you should pretend these\n;;    clauses don't exist.\n;;\n;; *  Clauses marked `^{:requires-features #{feature+}}` require a certain set of features to be used. At some date in\n;;    the future we will likely add middleware that uses this metadata to automatically validate that a driver has the\n;;    features needed to run the query in question.\n\n;;; +----------------------------------------------------------------------------------------------------------------+\n;;; |                                                  MBQL Clauses                                                  |\n;;; +----------------------------------------------------------------------------------------------------------------+\n\n;;; ------------------------------------------------- Datetime Stuff -------------------------------------------------\n\n;; `:day-of-week` depends on the [[metabase.public-settings/start-of-week]] Setting, by default Sunday.\n;; 1 = first day of the week (e.g. Sunday)\n;; 7 = last day of the week (e.g. Saturday)\n(def date-bucketing-units\n  \"Set of valid units for bucketing or comparing against a *date* Field.\"\n  #{:default :day :day-of-week :day-of-month :day-of-year :week :week-of-year\n    :month :month-of-year :quarter :quarter-of-year :year})\n\n(def time-bucketing-units\n  \"Set of valid units for bucketing or comparing against a *time* Field.\"\n  #{:default :millisecond :second :minute :minute-of-hour :hour :hour-of-day})\n\n(def datetime-bucketing-units\n  \"Set of valid units for bucketing or comparing against a *datetime* Field.\"\n  (set/union date-bucketing-units time-bucketing-units))\n\n(def DateUnit\n  \"Valid unit for *date* bucketing.\"\n  (s/named\n   (apply s/enum date-bucketing-units)\n   \"date-bucketing-unit\"))\n\n;; it could make sense to say hour-of-day(field) =  hour-of-day(\"2018-10-10T12:00\")\n;; but it does not make sense to say month-of-year(field) = month-of-year(\"08:00:00\"),\n;; does it? So we'll restrict the set of units a TimeValue can have to ones that have no notion of day/date.\n(def TimeUnit\n  \"Valid unit for *time* bucketing.\"\n  (s/named\n   (apply s/enum time-bucketing-units)\n   \"time-bucketing-unit\"))\n\n(def DateTimeUnit\n  \"Valid unit for *datetime* bucketing.\"\n  (s/named\n   (apply s/enum datetime-bucketing-units)\n   \"datetime-bucketing-unit\"))\n\n(def TimezoneId\n  \"Valid timezone id.\"\n  (s/named\n    #?(:clj  (apply s/enum (ZoneId/getAvailableZoneIds)) ;; 600 timezones on java 17\n       :cljs (apply s/enum (.names (.-tz moment))))      ;; 596 timezones on moment-timezone 0.5.38\n    \"timezone-id\"))\n\n(def TemporalExtractUnits\n  \"Valid units to extract from a temporal.\"\n  (s/named\n    (apply s/enum #{:year-of-era\n                    :quarter-of-year\n                    :month-of-year\n                    :week-of-year-iso\n                    :week-of-year-us\n                    :week-of-year-instance\n                    :day-of-month\n                    :day-of-week\n                    :hour-of-day\n                    :minute-of-hour\n                    :second-of-minute})\n    \"temporal-extract-units\"))\n\n(def DatetimeDiffUnits\n  \"Valid units for a datetime-diff clause.\"\n  (s/named\n    (apply s/enum #{:second :minute :hour :day :week :month :quarter :year})\n    \"datetime-diff-units\"))\n\n(def ExtractWeekModes\n  \"Valid modes to extract weeks.\"\n  (s/named\n    (apply s/enum #{:iso :us :instance})\n    \"extract-week-modes\"))\n\n(def ^:private RelativeDatetimeUnit\n  (s/named\n   (apply s/enum #{:default :minute :hour :day :week :month :quarter :year})\n   \"relative-datetime-unit\"))\n\n#?(:clj\n   (defn- can-parse-iso-8601?\n     [^DateTimeFormatter formatter ^String s]\n     (when (string? s)\n       (try\n         (.parse formatter s)\n         true\n         (catch Throwable _\n           false))))\n\n   :cljs\n   (defn- can-parse-iso-8601?\n     [s]\n     (when (string? s)\n       (not= (.parse js/Date s) ##NaN))))\n\n(def ^{:arglists '([s])} can-parse-date?\n  \"Returns whether a string can be parsed to an ISO 8601 date or not.\"\n  #?(:clj (partial can-parse-iso-8601? DateTimeFormatter/ISO_DATE)\n     :cljs can-parse-iso-8601?))\n\n(def ^{:arglists '([s])} can-parse-datetime?\n  \"Returns whether a string can be parsed to an ISO 8601 datetime or not.\"\n  #?(:clj (partial can-parse-iso-8601? DateTimeFormatter/ISO_DATE_TIME)\n     :cljs can-parse-iso-8601?))\n\n(def ^{:arglists '([s])} can-parse-time?\n  \"Returns whether a string can be parsed to an ISO 8601 time or not.\"\n  #?(:clj (partial can-parse-iso-8601? DateTimeFormatter/ISO_TIME)\n     :cljs can-parse-iso-8601?))\n\n(def LiteralDateString\n  \"Schema for an ISO-8601-formatted date string literal.\"\n  (s/constrained helpers/NonBlankString can-parse-date? \"valid ISO-8601 datetime string literal\"))\n\n(def LiteralDatetimeString\n  \"Schema for an ISO-8601-formattedor datetime string literal.\"\n  (s/constrained helpers/NonBlankString can-parse-datetime? \"valid ISO-8601 datetime string literal\"))\n\n(def LiteralTimeString\n  \"Schema for an ISO-8601-formatted time string literal.\"\n  (s/constrained helpers/NonBlankString can-parse-time? \"valid ISO-8601 time string literal\"))\n\n;; TODO - `unit` is not allowed if `n` is `current`\n(defclause relative-datetime\n  n    (s/cond-pre (s/eq :current) s/Int)\n  unit (optional RelativeDatetimeUnit))\n\n(defclause interval\n  n    s/Int\n  unit RelativeDatetimeUnit)\n\n;; This clause is automatically generated by middleware when datetime literals (literal strings or one of the Java\n;; types) are encountered. Unit is inferred by looking at the Field the timestamp is compared against. Implemented\n;; mostly to convenience driver implementations. You don't need to use this form directly when writing MBQL; datetime\n;; literal strings are preferred instead.\n;;\n;; example:\n;; [:= [:field 10 {:temporal-unit :day}] \"2018-10-02\"]\n;;\n;; becomes:\n;; [:= [:field 10 {:temporal-unit :day}] [:absolute-datetime #inst \"2018-10-02\" :day]]\n(def ^:internal ^{:clause-name :absolute-datetime} absolute-datetime\n  \"Schema for an `:absolute-datetime` clause.\"\n  (s/conditional\n   #(core/not (is-clause? :absolute-datetime %))\n   (helpers/clause\n    :absolute-datetime\n    \"t\"\n    #?(:clj (s/cond-pre java.time.LocalDate java.time.LocalDateTime java.time.OffsetDateTime java.time.ZonedDateTime)\n       :cljs js/Date)\n    \"unit\"\n    DateTimeUnit)\n\n   #(instance? #?(:clj java.time.LocalDate :cljs js/Date) (second %))\n   (helpers/clause\n    :absolute-datetime\n    \"date\" #?(:clj java.time.LocalDate :cljs js/Date)\n    \"unit\" DateUnit)\n\n   :else\n   (helpers/clause\n    :absolute-datetime\n    \"datetime\"\n    #?(:clj (s/cond-pre java.time.LocalDateTime java.time.OffsetDateTime java.time.ZonedDateTime)\n       :cljs js/Date)\n    \"unit\"\n    DateTimeUnit)))\n\n\n;; almost exactly the same as `absolute-datetime`, but generated in some sitations where the literal in question was\n;; clearly a time (e.g. \"08:00:00.000\") and/or the Field derived from `:type/Time` and/or the unit was a\n;; time-bucketing unit\n;;\n;; TODO - should we have a separate `date` type as well\n(defclause ^:internal time\n  time #?(:clj (s/cond-pre java.time.LocalTime java.time.OffsetTime)\n          :cljs js/Date)\n  unit TimeUnit)\n\n(def ^:private DateOrDatetimeLiteral\n  \"Schema for a valid date or datetime literal.\"\n  (s/conditional\n   (partial is-clause? :absolute-datetime)\n   absolute-datetime\n\n   can-parse-datetime?\n   LiteralDatetimeString\n\n   can-parse-date?\n   LiteralDateString\n\n   :else\n   (s/cond-pre\n    ;; literal datetime strings and Java types will get transformed to `absolute-datetime` clauses automatically by\n    ;; middleware so drivers don't need to deal with these directly. You only need to worry about handling\n    ;; `absolute-datetime` clauses.\n    #?@(:clj\n        [java.time.LocalDate\n         java.time.LocalDateTime\n         java.time.OffsetDateTime\n         java.time.ZonedDateTime]\n\n        :cljs\n        [js/Date]))))\n\n(def ^:private TimeLiteral\n  \"Schema for valid time literals.\"\n  (s/conditional\n   (partial is-clause? :time)\n   time\n\n   can-parse-time?\n   LiteralTimeString\n\n   :else\n   (s/cond-pre\n    ;; literal datetime strings and Java types will get transformed to `time` clauses automatically by\n    ;; middleware so drivers don't need to deal with these directly. You only need to worry about handling\n    ;; `time` clauses.\n    #?@(:clj\n        [java.time.LocalTime\n         java.time.OffsetTime]\n\n        :cljs\n        [js/Date]))))\n\n(def ^:private TemporalLiteral\n  \"Schema for valid temporal literals.\"\n  (s/cond-pre TimeLiteral DateOrDatetimeLiteral))\n\n(def DateTimeValue\n  \"Schema for a datetime value drivers will personally have to handle, either an `absolute-datetime` form or a\n  `relative-datetime` form.\"\n  (one-of absolute-datetime relative-datetime time))\n\n\n;;; -------------------------------------------------- Other Values --------------------------------------------------\n\n(def ValueTypeInfo\n  \"Type info about a value in a `:value` clause. Added automatically by `wrap-value-literals` middleware to values in\n  filter clauses based on the Field in the clause.\"\n  ;; TODO -- these should use `lisp-case` like everything else in MBQL.\n  {(s/optional-key :database_type) (s/maybe helpers/NonBlankString)\n   (s/optional-key :base_type)     (s/maybe helpers/FieldType)\n   (s/optional-key :semantic_type) (s/maybe helpers/FieldSemanticOrRelationType)\n   (s/optional-key :unit)          (s/maybe DateTimeUnit)\n   (s/optional-key :name)          (s/maybe helpers/NonBlankString)\n   s/Keyword                       s/Any})\n\n;; Arguments to filter clauses are automatically replaced with [:value <value> <type-info>] clauses by the\n;; `wrap-value-literals` middleware. This is done to make it easier to implement query processors, because most driver\n;; implementations dispatch off of Object type, which is often not enough to make informed decisions about how to\n;; treat certain objects. For example, a string compared against a Postgres UUID Field needs to be parsed into a UUID\n;; object, since text <-> UUID comparison doesn't work in Postgres. For this reason, raw literals in `:filter`\n;; clauses are wrapped in `:value` clauses and given information about the type of the Field they will be compared to.\n(defclause ^:internal value\n  value    s/Any\n  type-info (s/maybe ValueTypeInfo))\n\n\n;;; ----------------------------------------------------- Fields -----------------------------------------------------\n\n;; Expression *references* refer to a something in the `:expressions` clause, e.g. something like\n;;\n;;    [:+ [:field 1 nil] [:field 2 nil]]\n;;\n;; As of 0.42.0 `:expression` references can have an optional options map\n(defclause ^{:requires-features #{:expressions}} expression\n  expression-name helpers/NonBlankString\n  options         (optional (s/pred map? \"map\")))\n\n(def BinningStrategyName\n  \"Schema for a valid value for the `strategy-name` param of a [[field]] clause with `:binning` information.\"\n  (s/enum :num-bins :bin-width :default))\n\n(defn- validate-bin-width [schema]\n  (s/constrained\n   schema\n   (fn [{:keys [strategy bin-width]}]\n     (if (core/= strategy :bin-width)\n       bin-width\n       true))\n   \"You must specify :bin-width when using the :bin-width strategy.\"))\n\n(defn- validate-num-bins [schema]\n  (s/constrained\n   schema\n   (fn [{:keys [strategy num-bins]}]\n     (if (core/= strategy :num-bins)\n       num-bins\n       true))\n   \"You must specify :num-bins when using the :num-bins strategy.\"))\n\n(def FieldBinningOptions\n  \"Schema for `:binning` options passed to a `:field` clause.\"\n  (-> {:strategy                   BinningStrategyName\n       (s/optional-key :num-bins)  helpers/IntGreaterThanZero\n       (s/optional-key :bin-width) (s/constrained s/Num (complement neg?) \"bin width must be >= 0.\")\n       s/Keyword                   s/Any}\n      validate-bin-width\n      validate-num-bins))\n\n(defn valid-temporal-unit-for-base-type?\n  \"Whether `temporal-unit` (e.g. `:day`) is valid for the given `base-type` (e.g. `:type/Date`). If either is `nil` this\n  will return truthy. Accepts either map of `field-options` or `base-type` and `temporal-unit` passed separately.\"\n  ([{:keys [base-type temporal-unit] :as _field-options}]\n   (valid-temporal-unit-for-base-type? base-type temporal-unit))\n\n  ([base-type temporal-unit]\n   (if-let [units (when (core/and temporal-unit base-type)\n                    (condp #(isa? %2 %1) base-type\n                      :type/Date     date-bucketing-units\n                      :type/Time     time-bucketing-units\n                      :type/DateTime datetime-bucketing-units\n                      nil))]\n     (contains? units temporal-unit)\n     true)))\n\n(defn- validate-temporal-unit [schema]\n  ;; TODO - consider breaking this out into separate constraints for the three different types so we can generate more\n  ;; specific error messages\n  (s/constrained\n   schema\n   valid-temporal-unit-for-base-type?\n   \"Invalid :temporal-unit for the specified :base-type.\"))\n\n(defn- no-binning-options-at-top-level [schema]\n  (s/constrained\n   schema\n   (complement :strategy)\n   \"Found :binning keys at the top level of :field options. binning-related options belong under the :binning key.\"))\n\n(def ^:private FieldOptions\n  (-> {(s/optional-key :base-type)     (s/maybe helpers/FieldType)\n       ;;\n       ;; replaces `fk->`\n       ;;\n       ;; `:source-field` is used to refer to a Field from a different Table you would like IMPLICITLY JOINED to the\n       ;; source table.\n       ;;\n       ;; If both `:source-field` and `:join-alias` are supplied, `:join-alias` should be used to perform the join;\n       ;; `:source-field` should be for information purposes only.\n       (s/optional-key :source-field)  (s/maybe (s/cond-pre helpers/IntGreaterThanZero helpers/NonBlankString))\n       ;;\n       ;; `:temporal-unit` is used to specify DATE BUCKETING for a Field that represents a moment in time of some sort.\n       ;;\n       ;; There is no requirement that all `:type/Temporal` derived Fields specify a `:temporal-unit`, but for legacy\n       ;; reasons `:field` clauses that refer to `:type/DateTime` Fields will be automatically \"bucketed\" in the\n       ;; `:breakout` and `:filter` clauses, but nowhere else. Auto-bucketing only applies to `:filter` clauses when\n       ;; values for comparison are `yyyy-MM-dd` date strings. See the `auto-bucket-datetimes` middleware for more\n       ;; details. `:field` clauses elsewhere will not be automatically bucketed, so drivers still need to make sure they\n       ;; do any special datetime handling for plain `:field` clauses when their Field derives from `:type/DateTime`.\n       (s/optional-key :temporal-unit) (s/maybe DateTimeUnit)\n       ;;\n       ;; replaces `joined-field`\n       ;;\n       ;; `:join-alias` is used to refer to a Field from a different Table/nested query that you are EXPLICITLY\n       ;; JOINING against.\n       (s/optional-key :join-alias)    (s/maybe helpers/NonBlankString)\n       ;;\n       ;; replaces `binning-strategy`\n       ;;\n       ;; Using binning requires the driver to support the `:binning` feature.\n       (s/optional-key :binning)       (s/maybe FieldBinningOptions)\n       ;;\n       s/Keyword                       s/Any}\n      validate-temporal-unit\n      no-binning-options-at-top-level))\n\n(defn- require-base-type-for-field-name [schema]\n  (s/constrained\n   schema\n   (fn [[_ id-or-name {:keys [base-type]}]]\n     (if (string? id-or-name)\n       base-type\n       true))\n   \":field clauses using a string field name must specify :base-type.\"))\n\n(def ^{:clause-name :field, :added \"0.39.0\"} field\n  \"Schema for a `:field` clause.\"\n  (-> (helpers/clause\n       :field\n       \"id-or-name\" (s/cond-pre helpers/IntGreaterThanZero helpers/NonBlankString)\n       \"options\"    (s/maybe (s/recursive #'FieldOptions)))\n      require-base-type-for-field-name))\n\n(def ^{:clause-name :field, :added \"0.39.0\"} field:id\n  \"Schema for a `:field` clause, with the added constraint that it must use an integer Field ID.\"\n  (s/constrained\n   field\n   (fn [[_ id-or-name]]\n     (integer? id-or-name))\n   \"Must be a :field with an integer Field ID.\"))\n\n(def ^:private Field*\n  (one-of expression field))\n\n;; TODO -- consider renaming this FieldOrExpression\n(def Field\n  \"Schema for either a `:field` clause (reference to a Field) or an `:expression` clause (reference to an expression).\"\n  (s/recursive #'Field*))\n\n;; aggregate field reference refers to an aggregation, e.g.\n;;\n;;    {:aggregation [[:count]]\n;;     :order-by    [[:asc [:aggregation 0]]]} ;; refers to the 0th aggregation, `:count`\n;;\n;; Currently aggregate Field references can only be used inside order-by clauses. In the future once we support SQL\n;; `HAVING` we can allow them in filter clauses too\n;;\n;; TODO - shouldn't we allow composing aggregations in expressions? e.g.\n;;\n;;    {:order-by [[:asc [:+ [:aggregation 0] [:aggregation 1]]]]}\n;;\n;; TODO - it would be nice if we could check that there's actually an aggregation with the corresponding index,\n;; wouldn't it\n;;\n;; As of 0.42.0 `:aggregation` references can have an optional options map.\n(defclause aggregation\n  aggregation-clause-index s/Int\n  options                  (optional (s/pred map? \"map\")))\n\n(def FieldOrAggregationReference\n  \"Schema for any type of valid Field clause, or for an indexed reference to an aggregation clause.\"\n  (s/if (partial is-clause? :aggregation)\n    aggregation\n    Field))\n\n\n;;; -------------------------------------------------- Expressions ---------------------------------------------------\n\n;; Expressions are \"calculated column\" definitions, defined once and then used elsewhere in the MBQL query.\n\n(def string-functions\n  \"Functions that return string values. Should match [[StringExpression]].\"\n  #{:substring :trim :rtrim :ltrim :upper :lower :replace :concat :regex-match-first :coalesce :case})\n\n(declare StringExpression)\n\n(def ^:private StringExpressionArg\n  (s/conditional\n   string?\n   s/Str\n\n   (partial is-clause? string-functions)\n   (s/recursive #'StringExpression)\n\n   (partial is-clause? :value)\n   value\n\n   :else\n   Field))\n\n(def numeric-functions\n  \"Functions that return numeric values. Should match [[NumericExpression]].\"\n  #{:+ :- :/ :* :coalesce :length :round :ceil :floor :abs :power :sqrt :log :exp :case :datetime-diff\n    ;; extraction functions (get some component of a given temporal value/column)\n    :temporal-extract\n    ;; SUGAR drivers do not need to implement\n    :get-year :get-quarter :get-month :get-week :get-day :get-day-of-week :get-hour :get-minute :get-second})\n\n(def boolean-functions\n  \"Functions that return boolean values. Should match [[BooleanExpression]].\"\n  #{:and :or :not :< :<= :> :>= := :!=})\n\n(def ^:private aggregations #{:sum :avg :stddev :var :median :percentile :min :max :cum-count :cum-sum :count-where :sum-where :share :distinct :metric :aggregation-options :count})\n\n(def datetime-functions\n  \"Functions that return Date or DateTime values. Should match [[DatetimeExpression]].\"\n  #{:+ :datetime-add :datetime-subtract :convert-timezone :now})\n\n(declare NumericExpression)\n(declare BooleanExpression)\n(declare DatetimeExpression)\n(declare Aggregation)\n\n(def ^:private NumericExpressionArg\n  (s/conditional\n   number?\n   s/Num\n\n   (partial is-clause? numeric-functions)\n   (s/recursive #'NumericExpression)\n\n   (partial is-clause? aggregations)\n   (s/recursive #'Aggregation)\n\n   (partial is-clause? :value)\n   value\n\n   :else\n   Field))\n\n(def ^:private DateTimeExpressionArg\n  (s/conditional\n   (partial is-clause? aggregations)\n   (s/recursive #'Aggregation)\n\n   (partial is-clause? :value)\n   value\n\n   (partial is-clause? datetime-functions)\n   (s/recursive #'DatetimeExpression)\n\n   :else\n   (s/cond-pre DateOrDatetimeLiteral Field)))\n\n(def ^:private ExpressionArg\n  (s/conditional\n   number?\n   s/Num\n\n   boolean?\n   s/Bool\n\n   (partial is-clause? boolean-functions)\n   (s/recursive #'BooleanExpression)\n\n   (partial is-clause? numeric-functions)\n   (s/recursive #'NumericExpression)\n\n   (partial is-clause? datetime-functions)\n   (s/recursive #'DatetimeExpression)\n\n   string?\n   s/Str\n\n   (partial is-clause? string-functions)\n   (s/recursive #'StringExpression)\n\n   (partial is-clause? :value)\n   value\n\n   :else\n   Field))\n\n(def ^:private NumericExpressionArgOrInterval\n  (s/if (partial is-clause? :interval)\n    interval\n    NumericExpressionArg))\n\n(def ^:private IntGreaterThanZeroOrNumericExpression\n  (s/if number?\n    helpers/IntGreaterThanZero\n    NumericExpressionArg))\n\n(defclause ^{:requires-features #{:expressions}} coalesce\n  a ExpressionArg, b ExpressionArg, more (rest ExpressionArg))\n\n(defclause ^{:requires-features #{:expressions}} substring\n  s StringExpressionArg, start IntGreaterThanZeroOrNumericExpression, length (optional NumericExpressionArg))\n\n(defclause ^{:requires-features #{:expressions}} length\n  s StringExpressionArg)\n\n(defclause ^{:requires-features #{:expressions}} trim\n  s StringExpressionArg)\n\n(defclause ^{:requires-features #{:expressions}} rtrim\n  s StringExpressionArg)\n\n(defclause ^{:requires-features #{:expressions}} ltrim\n  s StringExpressionArg)\n\n(defclause ^{:requires-features #{:expressions}} upper\n  s StringExpressionArg)\n\n(defclause ^{:requires-features #{:expressions}} lower\n  s StringExpressionArg)\n\n(defclause ^{:requires-features #{:expressions}} replace\n  s StringExpressionArg, match s/Str, replacement s/Str)\n\n(defclause ^{:requires-features #{:expressions}} concat\n  a StringExpressionArg, b StringExpressionArg, more (rest StringExpressionArg))\n\n(defclause ^{:requires-features #{:expressions :regex}} regex-match-first\n  s StringExpressionArg, pattern s/Str)\n\n(defclause ^{:requires-features #{:expressions}} +\n  x NumericExpressionArgOrInterval, y NumericExpressionArgOrInterval, more (rest NumericExpressionArgOrInterval))\n\n(defclause ^{:requires-features #{:expressions}} -\n  x NumericExpressionArg, y NumericExpressionArgOrInterval, more (rest NumericExpressionArgOrInterval))\n\n(defclause ^{:requires-features #{:expressions}} /, x NumericExpressionArg, y NumericExpressionArg, more (rest NumericExpressionArg))\n\n(defclause ^{:requires-features #{:expressions}} *, x NumericExpressionArg, y NumericExpressionArg, more (rest NumericExpressionArg))\n\n(defclause ^{:requires-features #{:expressions}} floor\n  x NumericExpressionArg)\n\n(defclause ^{:requires-features #{:expressions}} ceil\n  x NumericExpressionArg)\n\n(defclause ^{:requires-features #{:expressions}} round\n  x NumericExpressionArg)\n\n(defclause ^{:requires-features #{:expressions}} abs\n  x NumericExpressionArg)\n\n(defclause ^{:requires-features #{:advanced-math-expressions}} power\n  x NumericExpressionArg,  y NumericExpressionArg)\n\n(defclause ^{:requires-features #{:advanced-math-expressions}} sqrt\n  x NumericExpressionArg)\n\n(defclause ^{:requires-features #{:advanced-math-expressions}} exp\n  x NumericExpressionArg)\n\n(defclause ^{:requires-features #{:advanced-math-expressions}} log\n  x NumericExpressionArg)\n\n(declare NumericExpression*)\n\n(def ^:private NumericExpression\n  \"Schema for the definition of a numeric expression. All numeric expressions evaluate to numeric values.\"\n  (s/recursive #'NumericExpression*))\n\n;; The result is positive if x <= y, and negative otherwise.\n;;\n;; Days, weeks, months, and years are only counted if they are whole to the \"day\".\n;; For example, `datetimeDiff(\"2022-01-30\", \"2022-02-28\", \"month\")` returns 0 months.\n;;\n;; If the values are datetimes, the time doesn't matter for these units.\n;; For example, `datetimeDiff(\"2022-01-01T09:00:00\", \"2022-01-02T08:00:00\", \"day\")` returns 1 day even though it is less than 24 hours.\n;;\n;; Hours, minutes, and seconds are only counted if they are whole.\n;; For example, datetimeDiff(\"2022-01-01T01:00:30\", \"2022-01-01T02:00:29\", \"hour\") returns 0 hours.\n(defclause ^{:requires-features #{:datetime-diff}} datetime-diff\n  datetime-x DateTimeExpressionArg\n  datetime-y DateTimeExpressionArg\n  unit       DatetimeDiffUnits)\n\n(defclause ^{:requires-features #{:temporal-extract}} temporal-extract\n  datetime DateTimeExpressionArg\n  unit     TemporalExtractUnits\n  mode     (optional ExtractWeekModes)) ;; only for get-week\n\n;; SUGAR CLAUSE: get-year, get-month... clauses are all sugars clause that will be rewritten as [:temporal-extract column :year]\n(defclause ^{:requires-features #{:temporal-extract}} ^:sugar get-year\n  date DateTimeExpressionArg)\n\n(defclause ^{:requires-features #{:temporal-extract}} ^:sugar get-quarter\n  date DateTimeExpressionArg)\n\n(defclause ^{:requires-features #{:temporal-extract}} ^:sugar get-month\n  date DateTimeExpressionArg)\n\n(defclause ^{:requires-features #{:temporal-extract}} ^:sugar get-week\n  date DateTimeExpressionArg\n  mode (optional ExtractWeekModes))\n\n(defclause ^{:requires-features #{:temporal-extract}} ^:sugar get-day\n  date DateTimeExpressionArg)\n\n(defclause ^{:requires-features #{:temporal-extract}} ^:sugar get-day-of-week\n  date DateTimeExpressionArg)\n\n(defclause ^{:requires-features #{:temporal-extract}} ^:sugar get-hour\n  datetime DateTimeExpressionArg)\n\n(defclause ^{:requires-features #{:temporal-extract}} ^:sugar get-minute\n  datetime DateTimeExpressionArg)\n\n(defclause ^{:requires-features #{:temporal-extract}} ^:sugar get-second\n  datetime DateTimeExpressionArg)\n\n(defclause ^{:requires-features #{:convert-timezone}} convert-timezone\n  datetime DateTimeExpressionArg\n  to       TimezoneId\n  from     (optional TimezoneId))\n\n(def ^:private ArithmeticDateTimeUnit\n  (s/named\n   (apply s/enum #{:millisecond :second :minute :hour :day :week :month :quarter :year})\n   \"arithmetic-datetime-unit\"))\n\n(defclause ^{:requires-features #{:date-arithmetics}} datetime-add\n  datetime DateTimeExpressionArg\n  amount   NumericExpressionArg\n  unit     ArithmeticDateTimeUnit)\n\n(defclause ^{:requires-features #{:now}} now)\n\n(defclause ^{:requires-features #{:date-arithmetics}} datetime-subtract\n  datetime DateTimeExpressionArg\n  amount   NumericExpressionArg\n  unit     ArithmeticDateTimeUnit)\n\n(def ^:private DatetimeExpression*\n  (one-of + datetime-add datetime-subtract convert-timezone now))\n\n(def DatetimeExpression\n  \"Schema for the definition of a date function expression.\"\n  (s/recursive #'DatetimeExpression*))\n\n(declare StringExpression*)\n\n(def ^:private StringExpression\n  \"Schema for the definition of an string expression.\"\n  (s/recursive #'StringExpression*))\n\n;;; ----------------------------------------------------- Filter -----------------------------------------------------\n\n(declare Filter)\n\n(defclause and\n  first-clause  (s/recursive #'Filter)\n  second-clause (s/recursive #'Filter)\n  other-clauses (rest (s/recursive #'Filter)))\n\n(defclause or\n  first-clause  (s/recursive #'Filter)\n  second-clause (s/recursive #'Filter)\n  other-clauses (rest (s/recursive #'Filter)))\n\n(defclause not, clause (s/recursive #'Filter))\n\n(def ^:private FieldOrRelativeDatetime\n  (s/if (partial is-clause? :relative-datetime)\n   relative-datetime\n   Field))\n\n(def ^:private EqualityComparable\n  \"Schema for things that make sense in a `=` or `!=` filter, i.e. things that can be compared for equality.\"\n  (s/maybe\n   (s/cond-pre\n    s/Bool\n    s/Num\n    s/Str\n    TemporalLiteral\n    FieldOrRelativeDatetime\n    ExpressionArg\n    value)))\n\n(def ^:private OrderComparable\n  \"Schema for things that make sense in a filter like `>` or `<`, i.e. things that can be sorted.\"\n  (s/if (partial is-clause? :value)\n    value\n    (s/cond-pre\n     s/Num\n     s/Str\n     TemporalLiteral\n     ExpressionArg\n     FieldOrRelativeDatetime)))\n\n;; For all of the non-compound Filter clauses below the first arg is an implicit Field ID\n\n;; These are SORT OF SUGARY, because extra values will automatically be converted a compound clauses. Driver\n;; implementations only need to handle the 2-arg forms.\n;;\n;; `=` works like SQL `IN` with more than 2 args\n;;\n;;    [:= [:field 1 nil] 2 3] --[DESUGAR]--> [:or [:= [:field 1 nil] 2] [:= [:field 1 nil] 3]]\n;;\n;; `!=` works like SQL `NOT IN` with more than 2 args\n;;\n;;    [:!= [:field 1 nil] 2 3] --[DESUGAR]--> [:and [:!= [:field 1 nil] 2] [:!= [:field 1 nil] 3]]\n\n(defclause =,  field EqualityComparable, value-or-field EqualityComparable, more-values-or-fields (rest EqualityComparable))\n(defclause !=, field EqualityComparable, value-or-field EqualityComparable, more-values-or-fields (rest EqualityComparable))\n\n(defclause <,  field OrderComparable, value-or-field OrderComparable)\n(defclause >,  field OrderComparable, value-or-field OrderComparable)\n(defclause <=, field OrderComparable, value-or-field OrderComparable)\n(defclause >=, field OrderComparable, value-or-field OrderComparable)\n\n;; :between is INCLUSIVE just like SQL !!!\n(defclause between field OrderComparable, min OrderComparable, max OrderComparable)\n\n;; SUGAR CLAUSE: This is automatically written as a pair of `:between` clauses by the `:desugar` middleware.\n(defclause ^:sugar inside\n  lat-field OrderComparable\n  lon-field OrderComparable\n  lat-max   OrderComparable\n  lon-min   OrderComparable\n  lat-min   OrderComparable\n  lon-max   OrderComparable)\n\n;; SUGAR CLAUSES: These are rewritten as `[:= <field> nil]` and `[:not= <field> nil]` respectively\n(defclause ^:sugar is-null,  field Field)\n(defclause ^:sugar not-null, field Field)\n\n;; These are rewritten as `[:or [:= <field> nil] [:= <field> \"\"]]` and\n;; `[:and [:not= <field> nil] [:not= <field> \"\"]]`\n(defclause ^:sugar is-empty,  field Field)\n(defclause ^:sugar not-empty, field Field)\n\n(def ^:private StringFilterOptions\n  {(s/optional-key :case-sensitive) s/Bool}) ; default true\n\n(defclause starts-with, field StringExpressionArg, string-or-field StringExpressionArg, options (optional StringFilterOptions))\n(defclause ends-with,   field StringExpressionArg, string-or-field StringExpressionArg, options (optional StringFilterOptions))\n(defclause contains,    field StringExpressionArg, string-or-field StringExpressionArg, options (optional StringFilterOptions))\n\n;; SUGAR: this is rewritten as [:not [:contains ...]]\n(defclause ^:sugar does-not-contain\n  field StringExpressionArg, string-or-field StringExpressionArg, options (optional StringFilterOptions))\n\n(def ^:private TimeIntervalOptions\n  ;; Should we include partial results for the current day/month/etc? Defaults to `false`; set this to `true` to\n  ;; include them.\n  {(s/optional-key :include-current) s/Bool}) ; default false\n\n;; Filter subclause. Syntactic sugar for specifying a specific time interval.\n;;\n;; Return rows where datetime Field 100's value is in the current month\n;;\n;;    [:time-interval [:field 100 nil] :current :month]\n;;\n;; Return rows where datetime Field 100's value is in the current month, including partial results for the\n;; current day\n;;\n;;    [:time-interval [:field 100 nil] :current :month {:include-current true}]\n;;\n;; SUGAR: This is automatically rewritten as a filter clause with a relative-datetime value\n(defclause ^:sugar time-interval\n  field   Field\n  n       (s/cond-pre\n           s/Int\n           (s/enum :current :last :next))\n  unit    RelativeDatetimeUnit\n  options (optional TimeIntervalOptions))\n\n;; A segment is a special `macro` that saves some pre-definied filter clause, e.g. [:segment 1]\n;; this gets replaced by a normal Filter clause in MBQL macroexpansion\n;;\n;; It can also be used for GA, which looks something like `[:segment \"gaid::-11\"]`. GA segments aren't actually MBQL\n;; segments and pass-thru to GA.\n(defclause ^:sugar segment, segment-id (s/cond-pre helpers/IntGreaterThanZero helpers/NonBlankString))\n\n(declare BooleanExpression*)\n\n(def ^:private BooleanExpression\n  \"Schema for the definition of an arithmetic expression.\"\n  (s/recursive #'BooleanExpression*))\n\n(def ^:private BooleanExpression*\n  (one-of and or not < <= > >= = !=))\n\n(def ^:private Filter*\n  (s/conditional\n   (partial is-clause? datetime-functions) DatetimeExpression\n   (partial is-clause? numeric-functions)  NumericExpression\n   (partial is-clause? string-functions)   StringExpression\n   (partial is-clause? boolean-functions)  BooleanExpression\n   :else\n   (one-of\n    ;; filters drivers must implement\n    and or not = != < > <= >= between starts-with ends-with contains\n    ;; SUGAR filters drivers do not need to implement\n    does-not-contain inside is-empty not-empty is-null not-null time-interval segment)))\n\n(def Filter\n  \"Schema for a valid MBQL `:filter` clause.\"\n  (s/recursive #'Filter*))\n\n(def ^:private CaseClause [(s/one Filter \"pred\") (s/one ExpressionArg \"expr\")])\n\n(def ^:private CaseClauses [CaseClause])\n\n(def ^:private CaseOptions\n  {(s/optional-key :default) ExpressionArg})\n\n(defclause ^{:requires-features #{:basic-aggregations}} case\n  clauses CaseClauses, options (optional CaseOptions))\n\n(def ^:private NumericExpression*\n  (one-of + - / * coalesce length floor ceil round abs power sqrt exp log case datetime-diff\n          temporal-extract get-year get-quarter get-month get-week get-day get-day-of-week\n          get-hour get-minute get-second))\n\n(def ^:private StringExpression*\n  (one-of substring trim ltrim rtrim replace lower upper concat regex-match-first coalesce case))\n\n(def FieldOrExpressionDef\n  \"Schema for anything that is accepted as a top-level expression definition, either an arithmetic expression such as a\n  `:+` clause or a `:field` clause.\"\n  (s/conditional\n   (partial is-clause? numeric-functions)  NumericExpression\n   (partial is-clause? string-functions)   StringExpression\n   (partial is-clause? boolean-functions)  BooleanExpression\n   (partial is-clause? datetime-functions) DatetimeExpression\n   (partial is-clause? :case)              case\n   :else                                   Field))\n\n;;; -------------------------------------------------- Aggregations --------------------------------------------------\n\n;; For all of the 'normal' Aggregations below (excluding Metrics) fields are implicit Field IDs\n\n;; cum-sum and cum-count are SUGAR because they're implemented in middleware. The clauses are swapped out with\n;; `count` and `sum` aggregations respectively and summation is done in Clojure-land\n(defclause ^{:requires-features #{:basic-aggregations}} ^:sugar count,     field (optional Field))\n(defclause ^{:requires-features #{:basic-aggregations}} ^:sugar cum-count, field (optional Field))\n\n;; technically aggregations besides count can also accept expressions as args, e.g.\n;;\n;;    [[:sum [:+ [:field 1 nil] [:field 2 nil]]]]\n;;\n;; Which is equivalent to SQL:\n;;\n;;    SUM(field_1 + field_2)\n\n(defclause ^{:requires-features #{:basic-aggregations}} avg,      field-or-expression FieldOrExpressionDef)\n(defclause ^{:requires-features #{:basic-aggregations}} cum-sum,  field-or-expression FieldOrExpressionDef)\n(defclause ^{:requires-features #{:basic-aggregations}} distinct, field-or-expression FieldOrExpressionDef)\n(defclause ^{:requires-features #{:basic-aggregations}} sum,      field-or-expression FieldOrExpressionDef)\n(defclause ^{:requires-features #{:basic-aggregations}} min,      field-or-expression FieldOrExpressionDef)\n(defclause ^{:requires-features #{:basic-aggregations}} max,      field-or-expression FieldOrExpressionDef)\n\n(defclause ^{:requires-features #{:basic-aggregations}} sum-where\n  field-or-expression FieldOrExpressionDef, pred Filter)\n\n(defclause ^{:requires-features #{:basic-aggregations}} count-where\n  pred Filter)\n\n(defclause ^{:requires-features #{:basic-aggregations}} share\n  pred Filter)\n\n(defclause ^{:requires-features #{:standard-deviation-aggregations}} stddev\n  field-or-expression FieldOrExpressionDef)\n\n(defclause ^{:requires-features #{:standard-deviation-aggregations}} [ag:var var]\n  field-or-expression FieldOrExpressionDef)\n\n(defclause ^{:requires-features #{:percentile-aggregations}} median\n  field-or-expression FieldOrExpressionDef)\n\n(defclause ^{:requires-features #{:percentile-aggregations}} percentile\n  field-or-expression FieldOrExpressionDef, percentile NumericExpressionArg)\n\n\n;; Metrics are just 'macros' (placeholders for other aggregations with optional filter and breakout clauses) that get\n;; expanded to other aggregations/etc. in the expand-macros middleware\n;;\n;; METRICS WITH STRING IDS, e.g. `[:metric \"ga:sessions\"]`, are Google Analytics metrics, not Dashboard metrics! They\n;; pass straight thru to the GA query processor.\n(defclause ^:sugar metric, metric-id (s/cond-pre helpers/IntGreaterThanZero helpers/NonBlankString))\n\n;; the following are definitions for expression aggregations, e.g.\n;;\n;;    [:+ [:sum [:field 10 nil]] [:sum [:field 20 nil]]]\n\n(def ^:private UnnamedAggregation*\n  (s/if (partial is-clause? numeric-functions)\n    NumericExpression\n    (one-of avg cum-sum distinct stddev sum min max metric share count-where\n            sum-where case median percentile ag:var\n            ;; SUGAR clauses\n            cum-count count)))\n\n(def ^:private UnnamedAggregation\n  (s/recursive #'UnnamedAggregation*))\n\n(def AggregationOptions\n  \"Additional options for any aggregation clause when wrapping it in `:aggregation-options`.\"\n  {;; name to use for this aggregation in the native query instead of the default name (e.g. `count`)\n   (s/optional-key :name)         helpers/NonBlankString\n   ;; user-facing display name for this aggregation instead of the default one\n   (s/optional-key :display-name) helpers/NonBlankString\n   s/Keyword                      s/Any})\n\n(defclause aggregation-options\n  aggregation UnnamedAggregation\n  options     AggregationOptions)\n\n(def Aggregation\n  \"Schema for anything that is a valid `:aggregation` clause.\"\n  (s/if (partial is-clause? :aggregation-options)\n    aggregation-options\n    UnnamedAggregation))\n\n\n;;; ---------------------------------------------------- Order-By ----------------------------------------------------\n\n;; order-by is just a series of `[<direction> <field>]` clauses like\n;;\n;;    {:order-by [[:asc [:field 1 nil]], [:desc [:field 2 nil]]]}\n;;\n;; Field ID is implicit in these clauses\n\n(defclause asc,  field FieldOrAggregationReference)\n(defclause desc, field FieldOrAggregationReference)\n\n(def OrderBy\n  \"Schema for an `order-by` clause subclause.\"\n  (one-of asc desc))\n\n\n;;; +----------------------------------------------------------------------------------------------------------------+\n;;; |                                                    Queries                                                     |\n;;; +----------------------------------------------------------------------------------------------------------------+\n\n;;; ---------------------------------------------- Native [Inner] Query ----------------------------------------------\n\n;; Template tags are used to specify {{placeholders}} in native queries that are replaced with some sort of value when\n;; the query itself runs. There are four basic types of template tag for native queries:\n;;\n;; 1. Field filters, which are used like\n;;\n;;        SELECT * FROM table WHERE {{field_filter}}\n;;\n;;   These reference specific Fields and are replaced with entire conditions, e.g. `some_field > 1000`\n;;\n;; 2. Raw values, which are used like\n;;\n;;        SELECT * FROM table WHERE my_field = {{x}}\n;;\n;;   These are replaced with raw values.\n;;\n;; 3. Native query snippets, which might be used like\n;;\n;;        SELECT * FROM ({{snippet: orders}}) source\n;;\n;;    These are replaced with `NativeQuerySnippet`s from the application database.\n;;\n;; 4. Source query Card IDs, which are used like\n;;\n;;        SELECT * FROM ({{#123}}) source\n;;\n;;   These are replaced with the query from the Card with that ID.\n;;\n;; Field filters and raw values usually have their value specified by `:parameters` (see [[Parameters]] below).\n\n(def TemplateTagType\n  \"Schema for valid values of template tag `:type`.\"\n  (s/enum :snippet :card :dimension :number :text :date))\n\n(def ^:private TemplateTag:Common\n  \"Things required by all template tag types.\"\n  {;; TODO -- `:id` is actually 100% required but we have a lot of tests that don't specify it because this constraint\n   ;; wasn't previously enforced; we need to go in and fix those tests and make this non-optional\n   (s/optional-key :id) helpers/NonBlankString\n   :name                helpers/NonBlankString\n   :display-name        helpers/NonBlankString\n   s/Keyword            s/Any})\n\n;; Example:\n;;\n;;    {:id           \"c2fc7310-44eb-4f21-c3a0-63806ffb7ddd\"\n;;     :name         \"snippet: select\"\n;;     :display-name \"Snippet: select\"\n;;     :type         :snippet\n;;     :snippet-name \"select\"\n;;     :snippet-id   1}\n(def TemplateTag:Snippet\n  \"Schema for a native query snippet template tag.\"\n  (merge\n   TemplateTag:Common\n   {:type                      (s/eq :snippet)\n    :snippet-name              helpers/NonBlankString\n    :snippet-id                helpers/IntGreaterThanZero\n    ;; database to which this Snippet belongs. Doesn't always seen to be specified.\n    (s/optional-key :database) helpers/IntGreaterThanZero}))\n\n;; Example:\n;;\n;;    {:id           \"fc5e14d9-7d14-67af-66b2-b2a6e25afeaf\"\n;;     :name         \"#1635\"\n;;     :display-name \"#1635\"\n;;     :type         :card\n;;     :card-id      1635}\n(def TemplateTag:SourceQuery\n  \"Schema for a source query template tag.\"\n  (merge\n   TemplateTag:Common\n   {:type    (s/eq :card)\n    :card-id helpers/IntGreaterThanZero}))\n\n(def ^:private TemplateTag:Value:Common\n  \"Stuff shared between the Field filter and raw value template tag schemas.\"\n  (merge\n   TemplateTag:Common\n   {;; default value for this parameter\n    (s/optional-key :default)  s/Any\n    ;; whether or not a value for this parameter is required in order to run the query\n    (s/optional-key :required) s/Bool}))\n\n(declare ParameterType WidgetType)\n\n;; Example:\n;;\n;;    {:id           \"c20851c7-8a80-0ffa-8a99-ae636f0e9539\"\n;;     :name         \"date\"\n;;     :display-name \"Date\"\n;;     :type         :dimension,\n;;     :dimension    [:field 4 nil]\n;;     :widget-type  :date/all-options}\n(def TemplateTag:FieldFilter\n  \"Schema for a field filter template tag.\"\n  (merge\n   TemplateTag:Value:Common\n   {:type        (s/eq :dimension)\n    :dimension   field\n    ;; which type of widget the frontend should show for this Field Filter; this also affects which parameter types\n    ;; are allowed to be specified for it.\n    :widget-type (s/recursive #'WidgetType)\n    ;; optional map to be appended to filter clause\n    (s/optional-key :options) {s/Keyword s/Any}}))\n\n(def raw-value-template-tag-types\n  \"Set of valid values of `:type` for raw value template tags.\"\n  #{:number :text :date :boolean})\n\n(def TemplateTag:RawValue:Type\n  \"Valid values of `:type` for raw value template tags.\"\n  (apply s/enum raw-value-template-tag-types))\n\n;; Example:\n;;\n;;    {:id           \"35f1ecd4-d622-6d14-54be-750c498043cb\"\n;;     :name         \"id\"\n;;     :display-name \"Id\"\n;;     :type         :number\n;;     :required     true\n;;     :default      \"1\"}\n(def TemplateTag:RawValue\n  \"Schema for a raw value template tag.\"\n  (merge\n   TemplateTag:Value:Common\n   ;; `:type` is used be the FE to determine which type of widget to display for the template tag, and to determine\n   ;; which types of parameters are allowed to be passed in for this template tag.\n   {:type TemplateTag:RawValue:Type}))\n\n;; TODO -- if we were using core.spec here I would make this a multimethod-based spec instead and have it dispatch off\n;; of `:type`. Then we could make it possible to add new types dynamically\n\n(def TemplateTag\n  \"Schema for a template tag as specified in a native query. There are four types of template tags, differentiated by\n  `:type` (see comments above).\"\n  (s/conditional\n   #(core/= (:type %) :dimension) TemplateTag:FieldFilter\n   #(core/= (:type %) :snippet)   TemplateTag:Snippet\n   #(core/= (:type %) :card)      TemplateTag:SourceQuery\n   :else                          TemplateTag:RawValue))\n\n(def TemplateTagMap\n  \"Schema for the `:template-tags` map passed in as part of a native query.\"\n  ;; map of template tag name -> template tag definition\n  (-> {helpers/NonBlankString TemplateTag}\n      ;; make sure people don't try to pass in a `:name` that's different from the actual key in the map.\n      (s/constrained (fn [m]\n                      (every? (fn [[tag-name tag-definition]]\n                                (core/= tag-name (:name tag-definition)))\n                              m))\n                    \"keys in template tag map must match the :name of their values\")))\n\n(def NativeQuery\n  \"Schema for a valid, normalized native [inner] query.\"\n  {:query                          s/Any\n   (s/optional-key :template-tags) TemplateTagMap\n   ;; collection (table) this query should run against. Needed for MongoDB\n   (s/optional-key :collection)    (s/maybe helpers/NonBlankString)\n   ;; other stuff gets added in my different bits of QP middleware to record bits of state or pass info around.\n   ;; Everyone else can ignore them.\n   s/Keyword                       s/Any})\n\n\n;;; ----------------------------------------------- MBQL [Inner] Query -----------------------------------------------\n\n(declare Query MBQLQuery)\n\n(def SourceQuery\n  \"Schema for a valid value for a `:source-query` clause.\"\n  (s/if (every-pred map? :native)\n    ;; when using native queries as source queries the schema is exactly the same except use `:native` in place of\n    ;; `:query` for reasons I do not fully remember (perhaps to make it easier to differentiate them from MBQL source\n    ;; queries).\n    (set/rename-keys NativeQuery {:query :native})\n    (s/recursive #'MBQLQuery)))\n\n(def SourceQueryMetadata\n  \"Schema for the expected keys for a single column in `:source-metadata` (`:source-metadata` is a sequence of these\n  entries), if it is passed in to the query.\n\n  This metadata automatically gets added for all source queries that are referenced via the `card__id` `:source-table`\n  form; for explicit `:source-query`s you should usually include this information yourself when specifying explicit\n  `:source-query`s.\"\n  ;; TODO - there is a very similar schema in `metabase.sync.analyze.query-results`; see if we can merge them\n  {:name                           helpers/NonBlankString\n   :base_type                      helpers/FieldType\n   ;; this is only used by the annotate post-processing stage, not really needed at all for pre-processing, might be\n   ;; able to remove this as a requirement\n   :display_name                   helpers/NonBlankString\n   (s/optional-key :semantic_type) (s/maybe helpers/FieldSemanticOrRelationType)\n   ;; you'll need to provide this in order to use BINNING\n   (s/optional-key :fingerprint)   (s/maybe helpers/Map)\n   s/Any                           s/Any})\n\n(def source-table-card-id-regex\n  \"Pattern that matches `card__id` strings that can be used as the `:source-table` of MBQL queries.\"\n  #\"^card__[1-9]\\d*$\")\n\n(def SourceTable\n  \"Schema for a valid value for the `:source-table` clause of an MBQL query.\"\n  (s/cond-pre helpers/IntGreaterThanZero source-table-card-id-regex))\n\n(def join-strategies\n  \"Valid values of the `:strategy` key in a join map.\"\n  #{:left-join :right-join :inner-join :full-join})\n\n(def JoinStrategy\n  \"Strategy that should be used to perform the equivalent of a SQL `JOIN` against another table or a nested query.\n  These correspond 1:1 to features of the same name in driver features lists; e.g. you should check that the current\n  driver supports `:full-join` before generating a Join clause using that strategy.\"\n  (apply s/enum join-strategies))\n\n(declare Fields)\n\n(def Join\n  \"Perform the equivalent of a SQL `JOIN` with another Table or nested `:source-query`. JOINs are either explicitly\n  specified in the incoming query, or implicitly generated when one uses a `:field` clause with `:source-field`.\n\n  In the top-level query, you can reference Fields from the joined table or nested query by including `:source-field`\n  in the `:field` options (known as implicit joins); for explicit joins, you *must* specify `:join-alias` yourself; in\n  the `:field` options, e.g.\n\n    ;; for joins against other Tables/MBQL source queries\n    [:field 1 {:join-alias \\\"my_join_alias\\\"}]\n\n    ;; for joins against native queries\n    [:field \\\"my_field\\\" {:base-type :field/Integer, :join-alias \\\"my_join_alias\\\"}]\"\n  (->\n   {;; *What* to JOIN. Self-joins can be done by using the same `:source-table` as in the query where this is specified.\n    ;; YOU MUST SUPPLY EITHER `:source-table` OR `:source-query`, BUT NOT BOTH!\n    (s/optional-key :source-table)\n    SourceTable\n\n    (s/optional-key :source-query)\n    SourceQuery\n    ;;\n    ;; The condition on which to JOIN. Can be anything that is a valid `:filter` clause. For automatically-generated\n    ;; JOINs this is always\n    ;;\n    ;;    [:= <source-table-fk-field> [:field <dest-table-pk-field> {:join-alias <join-table-alias>}]]\n    ;;\n    :condition\n    Filter\n    ;;\n    ;; Defaults to `:left-join`; used for all automatically-generated JOINs\n    ;;\n    ;; Driver implementations: this is guaranteed to be present after pre-processing.\n    (s/optional-key :strategy)\n    JoinStrategy\n    ;;\n    ;; The Fields to include in the results *if* a top-level `:fields` clause *is not* specified. This can be either\n    ;; `:none`, `:all`, or a sequence of Field clauses.\n    ;;\n    ;; *  `:none`: no Fields from the joined table or nested query are included (unless indirectly included by\n    ;;    breakouts or other clauses). This is the default, and what is used for automatically-generated joins.\n    ;;\n    ;; *  `:all`: will include all of the Fields from the joined table or query\n    ;;\n    ;; *  a sequence of Field clauses: include only the Fields specified. Valid clauses are the same as the top-level\n    ;;    `:fields` clause. This should be non-empty and all elements should be distinct. The normalizer will\n    ;;    automatically remove duplicate fields for you, and replace empty clauses with `:none`.\n    ;;\n    ;; Driver implementations: you can ignore this clause. Relevant fields will be added to top-level `:fields` clause\n    ;; with appropriate aliases.\n    (s/optional-key :fields)\n    (s/named\n     (s/cond-pre\n      (s/enum :all :none)\n      (s/recursive #'Fields))\n     \"Valid Join `:fields`: `:all`, `:none`, or a sequence of `:field` clauses that have `:join-alias`.\")\n    ;;\n    ;; The name used to alias the joined table or query. This is usually generated automatically and generally looks\n    ;; like `table__via__field`. You can specify this yourself if you need to reference a joined field with a\n    ;; `:join-alias` in the options.\n    ;;\n    ;; Driver implementations: This is guaranteed to be present after pre-processing.\n    (s/optional-key :alias)\n    helpers/NonBlankString\n    ;;\n    ;; Used internally, only for annotation purposes in post-processing. When a join is implicitly generated via a\n    ;; `:field` clause with `:source-field`, the ID of the foreign key field in the source Table will\n    ;; be recorded here. This information is used to add `fk_field_id` information to the `:cols` in the query\n    ;; results; I believe this is used to facilitate drill-thru? :shrug:\n    ;;\n    ;; Don't set this information yourself. It will have no effect.\n    (s/optional-key :fk-field-id)\n    (s/maybe helpers/IntGreaterThanZero)\n    ;;\n    ;; Metadata about the source query being used, if pulled in from a Card via the `:source-table \"card__id\"` syntax.\n    ;; added automatically by the `resolve-card-id-source-tables` middleware.\n    (s/optional-key :source-metadata)\n    (s/maybe [SourceQueryMetadata])\n\n    s/Keyword s/Any}\n   (s/constrained\n    (every-pred\n     (some-fn :source-table :source-query)\n     (complement (every-pred :source-table :source-query)))\n    \"Joins must have either a `source-table` or `source-query`, but not both.\")))\n\n(def Joins\n  \"Schema for a valid sequence of `Join`s. Must be a non-empty sequence, and `:alias`, if specified, must be unique.\"\n  (s/constrained\n   (helpers/non-empty [Join])\n   #(helpers/empty-or-distinct? (filter some? (map :alias %)))\n   \"All join aliases must be unique.\"))\n\n(def Fields\n  \"Schema for valid values of the MBQL `:fields` clause.\"\n  (s/named\n   (helpers/distinct (helpers/non-empty [Field]))\n   \"Distinct, non-empty sequence of Field clauses\"))\n\n(def MBQLQuery\n  \"Schema for a valid, normalized MBQL [inner] query.\"\n  (->\n   {(s/optional-key :source-query) SourceQuery\n    (s/optional-key :source-table) SourceTable\n    (s/optional-key :aggregation)  (helpers/non-empty [Aggregation])\n    (s/optional-key :breakout)     (helpers/non-empty [Field])\n    (s/optional-key :expressions)  {helpers/NonBlankString FieldOrExpressionDef}\n    (s/optional-key :fields)       Fields\n    (s/optional-key :filter)       Filter\n    (s/optional-key :limit)        helpers/IntGreaterThanOrEqualToZero\n    (s/optional-key :order-by)     (helpers/distinct (helpers/non-empty [OrderBy]))\n    ;; page = page num, starting with 1. items = number of items per page.\n    ;; e.g.\n    ;; {:page 1, :items 10} = items 1-10\n    ;; {:page 2, :items 10} = items 11-20\n    (s/optional-key :page)         {:page  helpers/IntGreaterThanZero\n                                    :items helpers/IntGreaterThanZero}\n    ;;\n    ;; Various bits of middleware add additonal keys, such as `fields-is-implicit?`, to record bits of state or pass\n    ;; info to other pieces of middleware. Everyone else can ignore them.\n    (s/optional-key :joins)        Joins\n    ;;\n    ;; Info about the columns of the source query. Added in automatically by middleware. This metadata is primarily\n    ;; used to let power things like binning when used with Field Literals instead of normal Fields\n    (s/optional-key :source-metadata) (s/maybe [SourceQueryMetadata])\n    ;;\n    ;; Other keys are added by middleware or frontend client for various purposes\n    s/Keyword                      s/Any}\n\n   (s/constrained\n    (fn [query]\n      (core/= 1 (core/count (select-keys query [:source-query :source-table]))))\n    \"Query must specify either `:source-table` or `:source-query`, but not both.\")\n\n   (s/constrained\n    (fn [{:keys [breakout fields]}]\n      (empty? (set/intersection (set breakout) (set fields))))\n    \"Fields specified in `:breakout` should not be specified in `:fields`; this is implied.\")))\n\n\n;;; ----------------------------------------------------- Params -----------------------------------------------------\n\n;; `:parameters` specify the *values* of parameters previously definied for a Dashboard or Card (native query template\n;; tag parameters.) See [[TemplateTag]] above for more information on the later.\n\n;; There are three things called 'type' in play when we talk about parameters and template tags.\n;;\n;; Two are used when the parameters are specified/declared, in a [[TemplateTag]] or in a Dashboard parameter:\n;;\n;; 1. Dashboard parameter/template tag `:type` -- `:dimension` (for a Field filter parameter),\n;;    otherwise `:text`, `:number`, `:boolean`, or `:date`\n;;\n;; 2. `:widget-type` -- only specified for Field filter parameters (where type is `:dimension`). This tells the FE\n;;    what type of widget to display, and also tells us what types of parameters we should allow. Examples:\n;;    `:date/all-options`, `:category`, etc.\n;;\n;; One type is used in the [[Parameter]] list (`:parameters`):\n;;\n;; 3. Parameter `:type` -- specifies the type of the value being passed in. e.g. `:text` or `:string/!=`\n;;\n;; Note that some types that makes sense as widget types (e.g. `:date/all-options`) but not as actual value types are\n;; currently still allowed for backwards-compatibility purposes -- currently the FE client will just parrot back the\n;; `:widget-type` in some cases. In these cases, the backend is just supposed to infer the actual type of the\n;; parameter value.\n\n(def parameter-types\n  \"Map of parameter-type -> info. Info is a map with the following keys:\n\n  ### `:type`\n\n  The general type of this parameter. `:numeric`, `:string`, `:boolean`, or `:date`, if applicable. Some parameter\n  types like `:id` and `:category` don't have a particular `:type`. This is offered mostly so we can group stuff\n  together or determine things like whether a given parameter is a date parameter.\n\n  ### `:operator`\n\n  Signifies this is one of the new 'operator' parameter types added in 0.39.0 or so. These parameters can only be used\n  for [[TemplateTag:FieldFilter]]s or for Dashboard parameters mapped to MBQL queries. The value of this key is the\n  arity for the parameter, either `:unary`, `:binary`, or `:variadic`. See\n  the [[metabase.driver.common.parameters.operators]] namespace for more information.\n\n  ### `:allowed-for`\n\n  [[Parameter]]s with this `:type` may be supplied for [[TemplateTag]]s with these `:type`s (or `:widget-type` if\n  `:type` is `:dimension`) types. Example: it is ok to pass a parameter of type `:date/range` for template tag with\n  `:widget-type` `:date/all-options`; but it is NOT ok to pass a parameter of type `:date/range` for a template tag\n  with a widget type `:date`. Why? It's a potential security risk if someone creates a Card with an \\\"exact-match\\\"\n  Field filter like `:date` or `:text` and you pass in a parameter like `string/!=` `NOTHING_WILL_MATCH_THIS`.\n  Non-exact-match parameters can be abused to enumerate *all* the rows in a table when the parameter was supposed to\n  lock the results down to a single row or set of rows.\"\n  {;; the basic raw-value types. These can be used with [[TemplateTag:RawValue]] template tags as well as\n   ;; [[TemplateTag:FieldFilter]] template tags.\n   :number  {:type :numeric, :allowed-for #{:number :number/= :id :category :location/zip_code}}\n   :text    {:type :string,  :allowed-for #{:text :string/= :id :category\n                                            :location/city :location/state :location/zip_code :location/country}}\n   :date    {:type :date,    :allowed-for #{:date :date/single :date/all-options :id :category}}\n   ;; I don't think `:boolean` is actually used on the FE at all.\n   :boolean {:type :boolean, :allowed-for #{:boolean :id :category}}\n\n   ;; as far as I can tell this is basically just an alias for `:date`... I'm not sure what the difference is TBH\n   :date/single {:type :date, :allowed-for #{:date :date/single :date/all-options :id :category}}\n\n   ;; everything else can't be used with raw value template tags -- they can only be used with Dashboard parameters\n   ;; for MBQL queries or Field filters in native queries\n\n   ;; `:id` and `:category` conceptually aren't types in a \"the parameter value is of this type\" sense, but they are\n   ;; widget types. They have something to do with telling the frontend to show FieldValues list/search widgets or\n   ;; something like that.\n   ;;\n   ;; Apparently the frontend might still pass in parameters with these types, in which case we're supposed to infer\n   ;; the actual type of the parameter based on the Field we're filtering on. Or something like that. Parameters with\n   ;; these types are only allowed if the widget type matches exactly, but you can also pass in something like a\n   ;; `:number/=` for a parameter with widget type `:category`.\n   ;;\n   ;; TODO FIXME -- actually, it turns out the the FE client passes parameter type `:category` for parameters in\n   ;; public Cards. Who knows why! For now, we'll continue allowing it. But we should fix it soon. See\n   ;; [[metabase.api.public-test/execute-public-card-with-parameters-test]]\n   :id       {:allowed-for #{:id}}\n   :category {:allowed-for #{:category #_FIXME :number :text :date :boolean}}\n\n   ;; Like `:id` and `:category`, the `:location/*` types are primarily widget types. They don't really have a meaning\n   ;; as a parameter type, so in an ideal world they wouldn't be allowed; however it seems like the FE still passed\n   ;; these in as parameter type on occasion anyway. In this case the backend is just supposed to infer the actual\n   ;; type -- which should be `:text` and, in the case of ZIP code, possibly `:number`.\n   ;;\n   ;; As with `:id` and `:category`, it would be preferable to just pass in a parameter with type `:text` or `:number`\n   ;; for these widget types, but for compatibility we'll allow them to continue to be used as parameter types for the\n   ;; time being. We'll only allow that if the widget type matches exactly, however.\n   :location/city     {:allowed-for #{:location/city}}\n   :location/state    {:allowed-for #{:location/state}}\n   :location/zip_code {:allowed-for #{:location/zip_code}}\n   :location/country  {:allowed-for #{:location/country}}\n\n   ;; date range types -- these match a range of dates\n   :date/range        {:type :date, :allowed-for #{:date/range :date/all-options}}\n   :date/month-year   {:type :date, :allowed-for #{:date/month-year :date/all-options}}\n   :date/quarter-year {:type :date, :allowed-for #{:date/quarter-year :date/all-options}}\n   :date/relative     {:type :date, :allowed-for #{:date/relative :date/all-options}}\n\n   ;; Like `:id` and `:category` above, `:date/all-options` is primarily a widget type. It means that we should allow\n   ;; any date option above.\n   :date/all-options {:type :date, :allowed-for #{:date/all-options}}\n\n   ;; \"operator\" parameter types.\n   :number/!=               {:type :numeric, :operator :variadic, :allowed-for #{:number/!=}}\n   :number/<=               {:type :numeric, :operator :unary, :allowed-for #{:number/<=}}\n   :number/=                {:type :numeric, :operator :variadic, :allowed-for #{:number/= :number :id :category\n                                                                                 :location/zip_code}}\n   :number/>=               {:type :numeric, :operator :unary, :allowed-for #{:number/>=}}\n   :number/between          {:type :numeric, :operator :binary, :allowed-for #{:number/between}}\n   :string/!=               {:type :string, :operator :variadic, :allowed-for #{:string/!=}}\n   :string/=                {:type :string, :operator :variadic, :allowed-for #{:string/= :text :id :category\n                                                                                :location/city :location/state\n                                                                                :location/zip_code :location/country}}\n   :string/contains         {:type :string, :operator :unary, :allowed-for #{:string/contains}}\n   :string/does-not-contain {:type :string, :operator :unary, :allowed-for #{:string/does-not-contain}}\n   :string/ends-with        {:type :string, :operator :unary, :allowed-for #{:string/ends-with}}\n   :string/starts-with      {:type :string, :operator :unary, :allowed-for #{:string/starts-with}}})\n\n(def ParameterType\n  \"Schema for valid values of `:type` for a [[Parameter]].\"\n  (apply s/enum (keys parameter-types)))\n\n(def WidgetType\n  \"Schema for valid values of `:widget-type` for a [[TemplateTag:FieldFilter]].\"\n  (apply s/enum (cons :none (keys parameter-types))))\n\n;; the next few clauses are used for parameter `:target`... this maps the parameter to an actual template tag in a\n;; native query or Field for MBQL queries.\n;;\n;; examples:\n;;\n;;    {:target [:dimension [:template-tag \"my_tag\"]]}\n;;    {:target [:dimension [:template-tag {:id \"my_tag_id\"}]]}\n;;    {:target [:variable [:template-tag \"another_tag\"]]}\n;;    {:target [:variable [:template-tag {:id \"another_tag_id\"}]]}\n;;    {:target [:dimension [:field 100 nil]]}\n;;    {:target [:field 100 nil]}\n;;\n;; I'm not 100% clear on which situations we'll get which version. But I think the following is generally true:\n;;\n;; * Things are wrapped in `:dimension` when we're dealing with Field filter template tags\n;; * Raw value template tags wrap things in `:variable` instead\n;; * Dashboard parameters are passed in with plain Field clause targets.\n;;\n;; One more thing to note: apparently `:expression`... is allowed below as well. I'm not sure how this is actually\n;; supposed to work, but we have test #18747 that attempts to set it. I'm not convinced this should actually be\n;; allowed.\n\n;; this is the reference like [:template-tag <whatever>], not the [[TemplateTag]] schema for when it's declared in\n;; `:template-tags`\n(defclause template-tag\n  tag-name\n  (s/cond-pre helpers/NonBlankString\n              {:id helpers/NonBlankString}))\n\n(defclause dimension\n  target (s/cond-pre Field template-tag))\n\n(defclause variable\n  target template-tag)\n\n(def ParameterTarget\n  \"Schema for the value of `:target` in a [[Parameter]].\"\n  ;; not 100% sure about this but `field` on its own comes from a Dashboard parameter and when it's wrapped in\n  ;; `dimension` it comes from a Field filter template tag parameter (don't quote me on this -- working theory)\n  (s/cond-pre\n   Field\n   (one-of dimension variable)))\n\n(def Parameter\n  \"Schema for the *value* of a parameter (e.g. a Dashboard parameter or a native query template tag) as passed in as\n  part of the `:parameters` list in a query.\"\n  {:type                     ParameterType\n   ;; TODO -- these definitely SHOULD NOT be optional but a ton of tests aren't passing them in like they should be.\n   ;; At some point we need to go fix those tests and then make these keys required\n   (s/optional-key :id)      helpers/NonBlankString\n   (s/optional-key :target)  ParameterTarget\n   ;; not specified if the param has no value. TODO - make this stricter; type of `:value` should be validated based\n   ;; on the [[ParameterType]]\n   (s/optional-key :value)   s/Any\n   ;; the name of the parameter we're trying to set -- this is actually required now I think, or at least needs to get\n   ;; merged in appropriately\n   (s/optional-key :name)    helpers/NonBlankString\n   ;; The following are not used by the code in this namespace but may or may not be specified depending on what the\n   ;; code that constructs the query params is doing. We can go ahead and ignore these when present.\n   (s/optional-key :slug)    helpers/NonBlankString\n   (s/optional-key :default) s/Any\n   ;; various other keys are used internally by the frontend\n   s/Keyword                 s/Any})\n\n(def ParameterList\n  \"Schema for a list of `:parameters` as passed in to a query.\"\n  [Parameter]\n  #_(->\n     ;; TODO -- disabled for now since it breaks tests. Also, I'm not sure whether these should be distinct by\n     ;; `:name` or `:id`... at any rate, neither is currently required.\n     ;;\n     (s/constrained (fn [parameters]\n                      (apply distinct? (map :id parameters)))\n                    \"Cannot specify parameter more than once; IDs must be distinct\")))\n\n;;; ---------------------------------------------------- Options -----------------------------------------------------\n\n(def ^:private Settings\n  \"Options that tweak the behavior of the query processor.\"\n  ;; The timezone the query should be ran in, overriding the default report timezone for the instance.\n  {(s/optional-key :report-timezone) helpers/NonBlankString\n   ;; other Settings might be used somewhere, but I don't know about them. Add them if you come across them for\n   ;; documentation purposes\n   s/Keyword                         s/Any})\n\n(def ^:private Constraints\n  \"Additional constraints added to a query limiting the maximum number of rows that can be returned. Mostly useful\n  because native queries don't support the MBQL `:limit` clause. For MBQL queries, if `:limit` is set, it will\n  override these values.\"\n  (s/constrained\n   { ;; maximum number of results to allow for a query with aggregations. If `max-results-bare-rows` is unset, this\n    ;; applies to all queries\n    (s/optional-key :max-results)           helpers/IntGreaterThanOrEqualToZero\n    ;; maximum number of results to allow for a query with no aggregations.\n    ;; If set, this should be LOWER than `:max-results`\n    (s/optional-key :max-results-bare-rows) helpers/IntGreaterThanOrEqualToZero\n    ;; other Constraints might be used somewhere, but I don't know about them. Add them if you come across them for\n    ;; documentation purposes\n    s/Keyword                               s/Any}\n   (fn [{:keys [max-results max-results-bare-rows]}]\n     (if-not (core/and max-results max-results-bare-rows)\n       true\n       (core/>= max-results max-results-bare-rows)))\n   \"max-results-bare-rows must be less or equal to than max-results\"))\n\n(def ^:private MiddlewareOptions\n  \"Additional options that can be used to toggle middleware on or off.\"\n  {;; should we skip adding results_metadata to query results after running the query? Used by\n   ;; `metabase.query-processor.middleware.results-metadata`; default `false`\n   (s/optional-key :skip-results-metadata?)\n   s/Bool\n\n   ;; should we skip converting datetime types to ISO-8601 strings with appropriate timezone when post-processing\n   ;; results? Used by `metabase.query-processor.middleware.format-rows`; default `false`\n   (s/optional-key :format-rows?)\n   s/Bool\n\n   ;; disable the MBQL->native middleware. If you do this, the query will not work at all, so there are no cases where\n   ;; you should set this yourself. This is only used by the [[metabase.query-processor/preprocess]] function to get\n   ;; the fully pre-processed query without attempting to convert it to native.\n   (s/optional-key :disable-mbql->native?)\n   s/Bool\n\n   ;; Disable applying a default limit on the query results. Handled in the `add-default-limit` middleware.\n   ;; If true, this will override the `:max-results` and `:max-results-bare-rows` values in [[Constraints]].\n   (s/optional-key :disable-max-results?)\n   s/Bool\n\n   ;; Userland queries are ones ran as a result of an API call, Pulse, or the like. Special handling is done in the\n   ;; `process-userland-query` middleware for such queries -- results are returned in a slightly different format, and\n   ;; QueryExecution entries are normally saved, unless you pass `:no-save` as the option.\n   (s/optional-key :userland-query?)\n   (s/maybe s/Bool)\n\n   ;; Whether to add some default `max-results` and `max-results-bare-rows` constraints. By default, none are added,\n   ;; although the functions that ultimately power most API endpoints tend to set this to `true`. See\n   ;; `add-constraints` middleware for more details.\n   (s/optional-key :add-default-userland-constraints?)\n   (s/maybe s/Bool)\n\n   ;; Whether to process a question's visualization settings and include them in the result metadata so that they can\n   ;; incorporated into an export. Used by `metabase.query-processor.middleware.visualization-settings`; default `false`.\n   (s/optional-key :process-viz-settings?)\n   (s/maybe s/Bool)\n\n   ;; other middleware options might be used somewhere, but I don't know about them. Add them if you come across them\n   ;; for documentation purposes\n   s/Keyword\n   s/Any})\n\n\n;;; ------------------------------------------------------ Info ------------------------------------------------------\n\n;; This stuff is used for informational purposes, primarily to record QueryExecution entries when a query is ran. Pass\n;; them along if applicable when writing code that creates queries, but when working on middleware and the like you\n;; can most likely ignore this stuff entirely.\n\n(def Context\n  \"Schema for `info.context`; used for informational purposes to record how a query was executed.\"\n  (s/enum :action\n          :ad-hoc\n          :collection\n          :csv-download\n          :dashboard\n          :embedded-dashboard\n          :embedded-question\n          :json-download\n          :map-tiles\n          :public-dashboard\n          :public-question\n          :pulse\n          :question\n          :xlsx-download))\n\n;; TODO - this schema is somewhat misleading because if you use a function like\n;; `qp/process-query-and-save-with-max-results-constraints!` some of these keys (e.g. `:context`) are in fact required\n(def Info\n  \"Schema for query `:info` dictionary, which is used for informational purposes to record information about how a query\n  was executed in QueryExecution and other places. It is considered bad form for middleware to change its behavior\n  based on this information, don't do it!\"\n  {;; These keys are nice to pass in if you're running queries on the backend and you know these values. They aren't\n   ;; used for permissions checking or anything like that so don't try to be sneaky\n   (s/optional-key :context)                   (s/maybe Context)\n   (s/optional-key :executed-by)               (s/maybe helpers/IntGreaterThanZero)\n   (s/optional-key :action-id)                 (s/maybe helpers/IntGreaterThanZero)\n   (s/optional-key :card-id)                   (s/maybe helpers/IntGreaterThanZero)\n   (s/optional-key :card-name)                 (s/maybe helpers/NonBlankString)\n   (s/optional-key :dashboard-id)              (s/maybe helpers/IntGreaterThanZero)\n   (s/optional-key :alias/escaped->original)   (s/maybe {s/Any s/Any})\n   (s/optional-key :pulse-id)                  (s/maybe helpers/IntGreaterThanZero)\n   ;; Metadata for datasets when querying the dataset. This ensures that user edits to dataset metadata are blended in\n   ;; with runtime computed metadata so that edits are saved.\n   (s/optional-key :metadata/dataset-metadata) (s/maybe [{s/Any s/Any}])\n   ;; `:hash` gets added automatically by `process-query-and-save-execution!`, so don't try passing\n   ;; these in yourself. In fact, I would like this a lot better if we could take these keys out of `:info` entirely\n   ;; and have the code that saves QueryExceutions figure out their values when it goes to save them\n   (s/optional-key :query-hash)                (s/maybe #?(:clj (Class/forName \"[B\")\n                                                           :cljs s/Any))})\n\n\n;;; --------------------------------------------- Dashboard [Outer] Query ---------------------------------------------\n\n(def ^Integer saved-questions-virtual-database-id\n  \"The ID used to signify that a database is 'virtual' rather than physical.\n\n   A fake integer ID is used so as to minimize the number of changes that need to be made on the frontend -- by using\n   something that would otherwise be a legal ID, *nothing* need change there, and the frontend can query against this\n   'database' none the wiser. (This integer ID is negative which means it will never conflict with a *real* database\n   ID.)\n\n   This ID acts as a sort of flag. The relevant places in the middleware can check whether the DB we're querying is\n   this 'virtual' database and take the appropriate actions.\"\n  -1337)\n;; To the reader: yes, this seems sort of hacky, but one of the goals of the Nested Query Initiative\u2122 was to minimize\n;; if not completely eliminate any changes to the frontend. After experimenting with several possible ways to do this\n;; implementation seemed simplest and best met the goal. Luckily this is the only place this \"magic number\" is defined\n;; and the entire frontend can remain blissfully unaware of its value.\n\n(def DatabaseID\n  \"Schema for a valid `:database` ID, in the top-level 'outer' query. Either a positive integer (referring to an\n  actual Database), or the saved questions virtual ID, which is a placeholder used for queries using the\n  `:source-table \\\"card__id\\\"` shorthand for a source query resolved by middleware (since clients might not know the\n  actual DB for that source query.)\"\n  (s/cond-pre (s/eq saved-questions-virtual-database-id) helpers/IntGreaterThanZero))\n\n(def Query\n  \"Schema for an [outer] query, e.g. the sort of thing you'd pass to the query processor or save in\n  `Card.dataset_query`.\"\n  (->\n   {:database                         DatabaseID\n    ;; Type of query. `:query` = MBQL; `:native` = native. TODO - consider normalizing `:query` to `:mbql`\n    :type                             (s/enum :query :native)\n    (s/optional-key :native)          NativeQuery\n    (s/optional-key :query)           MBQLQuery\n    (s/optional-key :parameters)      ParameterList\n    ;;\n    ;; OPTIONS\n    ;;\n    ;; These keys are used to tweak behavior of the Query Processor.\n    ;; TODO - can we combine these all into a single `:options` map?\n    ;;\n    (s/optional-key :settings)        (s/maybe Settings)\n    (s/optional-key :constraints)     (s/maybe Constraints)\n    (s/optional-key :middleware)      (s/maybe MiddlewareOptions)\n    ;;\n    ;; INFO\n    ;;\n    ;; Used when recording info about this run in the QueryExecution log; things like context query was ran in and\n    ;; User who ran it\n    (s/optional-key :info)            (s/maybe Info)\n    ;;\n    ;; Other various keys get stuck in the query dictionary at some point or another by various pieces of QP\n    ;; middleware to record bits of state. Everyone else can ignore them.\n    s/Keyword                         s/Any}\n   ;;\n   ;; CONSTRAINTS\n   ;;\n   ;; Make sure we have the combo of query `:type` and `:native`/`:query`\n   (s/constrained\n    (every-pred\n     (some-fn :native :query)\n     (complement (every-pred :native :query)))\n    \"Query must specify either `:native` or `:query`, but not both.\")\n   (s/constrained\n    (fn [{native :native, mbql :query, query-type :type}]\n      (core/case query-type\n        :native native\n        :query  mbql))\n    \"Native queries must specify `:native`; MBQL queries must specify `:query`.\")\n   ;;\n   ;; `:source-metadata` is added to queries when `card__id` source queries are resolved. It contains info about the\n   ;; columns in the source query.\n   ;;\n   ;; Where this is added was changed in Dashboard 0.33.0 -- previously, when `card__id` source queries were resolved,\n   ;; the middleware would add `:source-metadata` to the top-level; to support joins against source queries, this has\n   ;; been changed so it is always added at the same level the resolved `:source-query` is added.\n   ;;\n   ;; This should automatically be fixed by `normalize`; if we encounter it, it means some middleware is not\n   ;; functioning properly\n   (s/constrained\n    (complement :source-metadata)\n    \"`:source-metadata` should be added in the same level as `:source-query` (i.e., the 'inner' MBQL query.)\")))\n\n\n;;; --------------------------------------------------- Validators ---------------------------------------------------\n\n(def ^{:arglists '([query])} validate-query\n  \"Compiled schema validator for an [outer] Dashboard query. (Pre-compling a validator is more efficient; use this\n  instead of calling `(s/validate Query query)` or similar.\"\n  (s/validator Query))\n"]}