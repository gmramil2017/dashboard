{"version":3,"sources":["metabase/lib/order_by.cljc"],"mappings":"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","names":["metabase.lib.hierarchy/derive","metabase.lib.metadata.calculation/describe-top-level-key-method","query","stage-number","_k","temp__5804__auto__","order-bys","cljs.core/not-empty","metabase.lib.util/query-stage","metabase.shared.util.i18n.js_i18n","metabase.lib.util/join-strings-with-conjunction","metabase.shared.util.i18n/js-i18n","iter__5523__auto__","s__80818","cljs.core/LazySeq","cljs.core/seq","cljs.core/chunked-seq?","c__5521__auto__","size__5522__auto__","cljs.core/count","b__80820","cljs.core/chunk-buffer","i__80819","cljs.core/-nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__80817","cljs.core/chunk-rest","cljs.core/first","cljs.core/cons","cljs.core/rest","order-by","metabase.lib.metadata.calculation.display_name","metabase.lib.metadata.calculation/display-name-method","p__80834","vec__80835","cljs.core.nth","tag","_opts","expr","style","expr-display-name","G__80838","cljs.core/Keyword","js/Error","metabase.lib.metadata.calculation/display-info-method","p__80839","vec__80840","cljs.core.assoc","metabase.lib.metadata.calculation.display_info","js/metabase","js/metabase.lib","js/metabase.lib.order-by","js/metabase.lib.order-by.order-by-clause-method","method-table__5642__auto__","cljs.core.atom","prefer-table__5643__auto__","method-cache__5644__auto__","cached-hierarchy__5645__auto__","hierarchy__5646__auto__","cljs.core.get","fexpr__80852","cljs.core/MultiFn","cljs.core.symbol","metabase.lib.order-by/order-by-clause-method","metabase.lib.dispatch/dispatch-value","metabase.lib.hierarchy/hierarchy","clause","metabase.lib.options/ensure-uuid","x","cljs.core.ex_info","metabase.lib.ref/ref","metabase.lib.order-by/with-direction","direction","cljs.core/vec","var_args","G__80878","metabase.lib.order-by/order-by-clause","orderable","metabase.lib.order_by.order_by_clause","or__5045__auto__","G__80896","metabase.lib.order-by/order-by","metabase.lib.order_by.order_by","new-order-by","G__80907","metabase.lib.util.update_query_stage","cljs.core/update","cljs.core.conj","G__80936","metabase.lib.order-by/order-bys","metabase.lib.order_by.order_bys","p__80941","map__80942","cljs.core/--destructure-map","metabase.lib.order-by/orderable-column?","base-type","_column-metadata","cljs.core/some","orderable-base-type","cljs.core.isa_QMARK_","metabase.lib.schema.expression/orderable-types","G__80974","metabase.lib.order-by/orderable-columns","metabase.lib.order_by.orderable_columns","indexed-order-bys","cljs.core.map_indexed","p__80980","vec__80981","pos","_tag","order-by-pos","p__80985","vec__80986","existing-order-by","a-ref","metabase.lib.equality/=","metabase.lib.util/with-default-effective-type","breakouts","metabase.lib.breakout/breakouts-metadata","aggregations","metabase.lib.aggregation.aggregations_metadata","columns","cljs.core.concat","stage","metabase.lib.metadata.calculation.visible_columns","G__80999","cljs.core.into","cljs.core.comp","cljs.core.filter","cljs.core.map","col","G__81001","metabase.lib.order-by/opposite-direction","metabase.lib.order-by/change-direction","current-order-by","lib-uuid","metabase.lib.options/uuid","&parents","&match","cljs.core/vector?","&match_1__81023","p1__81011#","cljs.core.match/backtrack","e81026","e__62528__auto__","e81025","metabase.mbql.util.match.impl/replace-in-collection","replace-81014","cljs.core._EQ_","cljs.core/chunk-first"],"sourcesContent":["(ns metabase.lib.order-by\n  (:require\n   [metabase.lib.aggregation :as lib.aggregation]\n   [metabase.lib.breakout :as lib.breakout]\n   [metabase.lib.dispatch :as lib.dispatch]\n   [metabase.lib.equality :as lib.equality]\n   [metabase.lib.hierarchy :as lib.hierarchy]\n   [metabase.lib.metadata :as lib.metadata]\n   [metabase.lib.metadata.calculation :as lib.metadata.calculation]\n   [metabase.lib.options :as lib.options]\n   [metabase.lib.ref :as lib.ref]\n   [metabase.lib.schema :as lib.schema]\n   [metabase.lib.schema.expression :as lib.schema.expression]\n   [metabase.lib.schema.order-by :as lib.schema.order-by]\n   [metabase.lib.util :as lib.util]\n   [metabase.mbql.util.match :as mbql.u.match]\n   [metabase.shared.util.i18n :as i18n]\n   [metabase.util.malli :as mu]))\n\n(lib.hierarchy/derive :asc  ::order-by-clause)\n(lib.hierarchy/derive :desc ::order-by-clause)\n\n(defmethod lib.metadata.calculation/describe-top-level-key-method :order-by\n  [query stage-number _k]\n  (when-let [order-bys (not-empty (:order-by (lib.util/query-stage query stage-number)))]\n    (i18n/tru \"Sorted by {0}\"\n              (lib.util/join-strings-with-conjunction\n               (i18n/tru \"and\")\n               (for [order-by order-bys]\n                 (lib.metadata.calculation/display-name query stage-number order-by :long))))))\n\n(defmethod lib.metadata.calculation/display-name-method ::order-by-clause\n  [query stage-number [tag _opts expr] style]\n  (let [expr-display-name (lib.metadata.calculation/display-name query stage-number expr style)]\n    (case tag\n      :asc  (i18n/tru \"{0} ascending\"  expr-display-name)\n      :desc (i18n/tru \"{0} descending\" expr-display-name))))\n\n(defmethod lib.metadata.calculation/display-info-method ::order-by-clause\n  [query stage-number [tag _opts expr]]\n  (assoc (lib.metadata.calculation/display-info query stage-number expr)\n         :direction tag))\n\n(defmulti ^:private order-by-clause-method\n  {:arglists '([orderable])}\n  lib.dispatch/dispatch-value\n  :hierarchy lib.hierarchy/hierarchy)\n\n(defmethod order-by-clause-method ::order-by-clause\n  [clause]\n  (lib.options/ensure-uuid clause))\n\n;;; by default, try to convert `x` to a ref and then order by `:asc`\n(defmethod order-by-clause-method :default\n  [x]\n  (when (nil? x)\n    (throw (ex-info (i18n/tru \"Can''t order by nil\") {})))\n  (lib.options/ensure-uuid [:asc (lib.ref/ref x)]))\n\n(mu/defn ^:private with-direction :- ::lib.schema.order-by/order-by\n  \"Update the direction of an order by clause.\"\n  [clause    :- ::lib.schema.order-by/order-by\n   direction :- ::lib.schema.order-by/direction]\n  (assoc (vec clause) 0 direction))\n\n(mu/defn order-by-clause\n  \"Create an order-by clause independently of a query, e.g. for `replace` or whatever.\"\n  ([orderable]\n   (order-by-clause orderable :asc))\n\n  ([orderable :- some?\n    direction :- [:maybe [:enum :asc :desc]]]\n   (-> (order-by-clause-method orderable)\n       (with-direction (or direction :asc)))))\n\n(mu/defn order-by\n  \"Add an MBQL order-by clause (i.e., `:asc` or `:desc`) from something that you can theoretically sort by -- maybe a\n  Field, or `:field` clause, or expression of some sort, etc.\n\n  You can teach Dashboard lib how to generate order by clauses for different things by implementing the\n  underlying [[order-by-clause-method]] multimethod.\"\n  ([query orderable]\n   (order-by query -1 orderable nil))\n\n  ([query orderable direction]\n   (order-by query -1 orderable direction))\n\n  ([query\n    stage-number :- [:maybe :int]\n    orderable    :- some?\n    direction    :- [:maybe [:enum :asc :desc]]]\n   (let [stage-number (or stage-number -1)\n         new-order-by (cond-> (order-by-clause-method orderable)\n                        direction (with-direction direction))]\n     (lib.util/update-query-stage query stage-number update :order-by (fn [order-bys]\n                                                                        (conj (vec order-bys) new-order-by))))))\n\n(mu/defn order-bys :- [:maybe [:sequential ::lib.schema.order-by/order-by]]\n  \"Get the order-by clauses in a query.\"\n  ([query :- ::lib.schema/query]\n   (order-bys query -1))\n  ([query :- ::lib.schema/query\n    stage-number :- :int]\n   (not-empty (get (lib.util/query-stage query stage-number) :order-by))))\n\n(defn- orderable-column? [{:keys [base-type], :as _column-metadata}]\n  (some (fn [orderable-base-type]\n          (isa? base-type orderable-base-type))\n        lib.schema.expression/orderable-types))\n\n(mu/defn orderable-columns :- [:sequential lib.metadata/ColumnMetadata]\n  \"Get column metadata for all the columns you can order by in a given `stage-number` of a `query`. Rules are as\n  follows:\n\n  1. If the stage has aggregations or breakouts, you can only order by those columns. E.g.\n\n         SELECT id, count(*) AS count FROM core_user GROUP BY id ORDER BY count ASC;\n\n     You can't ORDER BY something not in the SELECT, e.g. ORDER BY user.first_name would not make sense here.\n\n  2. If the stage has no aggregations or breakouts, you can order by any visible Field:\n\n     a. You can filter by any custom `:expressions` in this stage of the query\n\n     b. You can filter by any Field 'exported' by the previous stage of the query, if there is one; otherwise you can\n        filter by any Fields from the current `:source-table`.\n\n     c. You can filter by any Fields exported by any explicit joins\n\n     d. You can filter by and Fields in Tables that are implicitly joinable.\"\n  ([query :- ::lib.schema/query]\n   (orderable-columns query -1))\n\n  ([query        :- ::lib.schema/query\n    stage-number :- :int]\n   (let [indexed-order-bys (map-indexed (fn [pos [_tag _opts expr]]\n                                          [pos expr])\n                                        (order-bys query stage-number))\n         order-by-pos\n         (fn [x]\n           (some (fn [[pos existing-order-by]]\n                   (let [a-ref (lib.ref/ref x)]\n                     (when (or (lib.equality/= a-ref existing-order-by)\n                               (lib.equality/= a-ref (lib.util/with-default-effective-type existing-order-by)))\n                       pos)))\n                 indexed-order-bys))\n\n         breakouts          (not-empty (lib.breakout/breakouts-metadata query stage-number))\n         aggregations       (not-empty (lib.aggregation/aggregations-metadata query stage-number))\n         columns            (if (or breakouts aggregations)\n                              (concat breakouts aggregations)\n                              (let [stage (lib.util/query-stage query stage-number)]\n                                (lib.metadata.calculation/visible-columns query stage-number stage)))]\n     (some->> (not-empty columns)\n              (into [] (comp (filter orderable-column?)\n                             (map (fn [col]\n                                    (let [pos (order-by-pos col)]\n                                      (cond-> col\n                                        pos (assoc :order-by-position pos)))))))))))\n\n(def ^:private opposite-direction\n  {:asc :desc\n   :desc :asc})\n\n(mu/defn change-direction :- ::lib.schema/query\n  \"Flip the direction of `current-order-by` in `query`.\"\n  ([query :- ::lib.schema/query\n    current-order-by :- ::lib.schema.order-by/order-by]\n   (let [lib-uuid (lib.options/uuid current-order-by)]\n     (mbql.u.match/replace query\n       [direction (_ :guard #(= (:lib/uuid %) lib-uuid)) _]\n       (assoc &match 0 (opposite-direction direction))))))\n"]}