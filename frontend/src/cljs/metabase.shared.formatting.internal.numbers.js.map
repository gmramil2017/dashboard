{"version":3,"sources":["metabase/shared/formatting/internal/numbers.cljs"],"mappings":"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","names":["metabase.shared.formatting.internal.numbers/default-number-separators","metabase.shared.formatting.internal.numbers/adjust-number-separators","text","separators","and__5043__auto__","cljs.core.not_EQ_","decimal","cljs.core/first","grouping","or__5045__auto__","cljs.core/second","transform","clojure.string/replace","metabase.shared.formatting.internal.numbers/fix-currency-symbols","currency","sym","metabase.shared.util.currency/currency-symbol","cljs.core/name","metabase.shared.formatting.internal.numbers-core/non-breaking-space","metabase.shared.formatting.internal.numbers/base-format-scientific","nf","number","p__79686","map__79687","cljs.core/--destructure-map","cljs.core.get","type","value","G__79688","parts","cljs.core.js__GT_clj","p1__79676#","cljs.core/some","cljs.core._EQ_","vec__79689","cljs.core.nth","pre","post","p1__79677#","cljs.core/split-with","cljs.core.concat","cljs.core.apply","cljs.core/str","cljs.core.map","metabase.shared.formatting.internal.numbers/number-formatter-for-options-baseline","options","default-fraction-digits","js/Intl.NumberFormat","cljs.core/clj->js","metabase.util/remove-nils","metabase.shared.formatting.internal.numbers/currency-symbols?","style","metabase.shared.formatting.internal.numbers/formatter-fn","G__79707","p1__79704#","p1__79705#","metabase.shared.formatting.internal.numbers/number-formatter-for-options","symbols?","formatter","metabase.shared.formatting.internal.numbers/t_metabase$shared$formatting$internal$numbers79720","_","G__79727","iter__5523__auto__","s__79731","cljs.core/LazySeq","temp__5804__auto__","cljs.core/seq","cljs.core/chunked-seq?","c__5521__auto__","size__5522__auto__","cljs.core/count","b__79733","cljs.core/chunk-buffer","i__79732","map__79738","cljs.core/-nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__79730","cljs.core/chunk-rest","map__79740","cljs.core/cons","cljs.core/rest","fexpr__79739","fexpr__79741","formatted","cljs.core.ex_info","metabase.shared.formatting.internal.numbers/format-number-scientific","metabase.shared.formatting.internal.numbers-core/prep-options","cljs.core/chunk-first"],"sourcesContent":["(ns metabase.shared.formatting.internal.numbers\n  \"ClojureScript implementation of number formatting.\n  Implements the [[NumberFormatter]] protocol from numbers_core, plus some helpers.\"\n  (:require\n   [clojure.string :as str]\n   [metabase.shared.formatting.internal.numbers-core :as core]\n   [metabase.shared.util.currency :as currency]\n   [metabase.util :as u]))\n\n(def ^:private default-number-separators \".,\")\n\n(defn- adjust-number-separators [text separators]\n  (if (and separators\n           (not= separators default-number-separators))\n    (let [decimal    (first separators)\n          grouping   (or (second separators) \"\") ; grouping separators are optional\n          transform  {\",\" grouping \".\" decimal}]\n      (str/replace text #\"[\\.,]\" transform))\n    text))\n\n(defn- fix-currency-symbols [text currency]\n  (let [sym (currency/currency-symbol currency)]\n    (-> text\n        ;; Some have spaces and some don't - remove the space if it's there.\n        (str/replace (str (name currency) core/non-breaking-space) sym)\n        (str/replace (name currency) sym))))\n\n(defn- base-format-scientific [nf number]\n  (letfn [(transform [{:keys [type value]}]\n            (case type\n              \"exponentSeparator\" \"e\"\n              value))]\n    (let [parts  (js->clj (.formatToParts nf number) {:keywordize-keys true})\n          ;; If there's no exponent minus sign, add a plus sign.\n          parts  (if (some #(= (:type %) \"exponentMinusSign\") parts)\n                   parts\n                   (let [[pre post] (split-with #(not= (:type %) \"exponentInteger\") parts)]\n                     (concat pre [{:type \"exponentPlusSign\" :value \"+\"}] post)))]\n      (apply str (map transform parts)))))\n\n;; Core internals =================================================================================================\n;; TODO(braden) We could get more nicely localized currency values by using the user's locale.\n;; The problem is that then we don't know what the number separators are. We could determine it\n;; with a simple test like formatting 12345.67, though.\n;; Using \"en\" here means, among other things, that currency values are not localized as well\n;; as they could be. Many European languages put currency signs as suffixes, eg. 123 euros is:\n;; - \"\u20ac123.00\" in \"en\"\n;; - \"\u20ac123,00\" with \"en\" but fixing up the separators for a German locale\n;; - \"123,00 \u20ac\" in actual German convention, which is what we would get with a native \"de\" locale here.\n(defn- number-formatter-for-options-baseline [options]\n  (let [default-fraction-digits (when (= (:number-style options) \"currency\")\n                                  2)]\n    (js/Intl.NumberFormat.\n      \"en\"\n      (clj->js (u/remove-nils\n                 {:style    (when-not (= (:number-style options) \"scientific\")\n                              (:number-style options \"decimal\"))\n                  :notation (when (= (:number-style options) \"scientific\")\n                              \"scientific\")\n                  :currency (:currency options)\n                  :currencyDisplay (:currency-style options)\n                  ;; Always use grouping separators, but we may remove them per number_separators.\n                  :useGrouping              true\n                  :minimumIntegerDigits     (:minimum-integer-digits     options)\n                  :minimumFractionDigits    (:minimum-fraction-digits    options default-fraction-digits)\n                  :maximumFractionDigits    (:maximum-fraction-digits    options default-fraction-digits)\n                  :minimumSignificantDigits (:minimum-significant-digits options)\n                  :maximumSignificantDigits (:maximum-significant-digits options)})))))\n\n(defn- currency-symbols? [options]\n  (let [style (:currency-style options)]\n    (and (:currency options)\n         (or (nil? style)\n             (= style \"symbol\")))))\n\n(defn- formatter-fn [nf options]\n  (case (:number-style options)\n    \"scientific\" #(base-format-scientific nf %)\n    #(.format nf %)))\n\n(defn number-formatter-for-options\n  \"The key function implemented for each language, and called by the top-level number formatting.\n  Returns a [[core/NumberFormatter]] instance for each set of options.\n  These formatters are reusable, but this does no caching.\"\n  [options]\n  (let [nf        (number-formatter-for-options-baseline options)\n        symbols?  (currency-symbols? options)\n        formatter (formatter-fn nf options)]\n    (reify\n      core/NumberFormatter\n      (format-number-basic [_ number]\n        (cond-> (formatter number)\n          true     (adjust-number-separators (:number-separators options))\n          symbols? (fix-currency-symbols (:currency options))))\n\n      (wrap-currency [_ text]\n        ;; Intl.NumberFormat.formatToParts(1) returns, eg. [currency, integer, decimal, fraction]\n        ;; Keep only currency and integer, and replace integer's :value with our provided text.\n        (apply str (for [{:keys [type value]} (js->clj (.formatToParts nf 1) :keywordize-keys true)\n                         :when (#{\"currency\" \"integer\"} type)]\n                     (if (= type \"integer\")\n                       text\n                       value))))\n\n      (split-exponent [_ formatted] (throw (ex-info \"split-exponent not implemented\" {:text formatted}))))))\n\n;; Scientific notation ============================================================================================\n(defn format-number-scientific\n  \"Formats a number in scientific notation. The wrangling required differs by platform.\"\n  [number options]\n  (-> (core/prep-options options)\n      number-formatter-for-options\n      (core/format-number-basic number)))\n"]}