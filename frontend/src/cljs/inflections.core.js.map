{"version":3,"sources":["inflections/core.cljc"],"mappings":"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","names":["inflections.core/coerce","obj","s","cljs.core/Keyword","cljs.core.keyword","cljs.core/Symbol","cljs.core.symbol","this__5343__auto__","k__5344__auto__","this__5345__auto__","k59959","else__5346__auto__","G__59963","pattern","replacement","cljs.core.get","__extmap","this__5363__auto__","f__5364__auto__","init__5365__auto__","cljs.core.reduce","ret__5366__auto__","p__59964","vec__59965","k__5367__auto__","cljs.core.nth","v__5368__auto__","this__5358__auto__","writer__5359__auto__","opts__5360__auto__","pr-pair__5361__auto__","keyval__5362__auto__","cljs.core/pr-sequential-writer","cljs.core.concat","cljs.core/PersistentVector","G__59958","cljs.core/RecordIter","cljs.core/-iterator","cljs.core/nil-iter","this__5341__auto__","__meta","this__5338__auto__","__hash","this__5347__auto__","cljs.core/count","this__5339__auto__","h__5154__auto__","coll__5340__auto__","cljs.core/hash-unordered-coll","this59960","other59961","cljs.core._EQ_","this__5353__auto__","k__5354__auto__","cljs.core/contains?","cljs.core.dissoc","cljs.core/-with-meta","cljs.core.into","cljs.core/not-empty","this__5350__auto__","G__59973","this__5351__auto__","k__5352__auto__","pred__59974","cljs.core/keyword-identical?","expr__59975","cljs.core.assoc","this__5356__auto__","cljs.core/seq","cljs.core/MapEntry","this__5342__auto__","this__5348__auto__","entry__5349__auto__","cljs.core/vector?","cljs.core/-nth","cljs.core/-conj","inflections.core/Rule","this__5389__auto__","cljs.core/List","writer__5390__auto__","cljs.core/-write","G__59962","extmap__5385__auto__","G__59982","cljs.core/record?","inflections.core/->Rule","inflections.core/map->Rule","inflections.core/add-rule!","rules","rule","cljs.core/set","cljs.core/deref","cljs.core.swap_BANG_","cljs.core/conj","var_args","args__5775__auto__","len__5769__auto__","i__5770__auto__","argseq__5776__auto__","cljs.core/IndexedSeq","inflections.core/slurp-rules","seq59987","self__5755__auto__","patterns-and-replacements","p1__59986#","cljs.core.map","cljs.core.apply","cljs.core.partition","inflections.core/resolve-rule","word","and__5043__auto__","cljs.core/re-find","clojure.string/replace","inflections.core/resolve-rules","cljs.core/first","p1__59997#","cljs.core.keep","inflections.core/reset-rules!","cljs.core/reset!","inflections.core/str-name","x","temp__5802__auto__","ns","cljs.core/namespace","cljs.core/name","inflections.core/*uncountable-words*","cljs.core.atom","inflections.core/*acronyms*","inflections.core/acronym","G__60010","clojure.string/lower-case","inflections.core/add-acronym!","cljs.core/assoc","inflections.core/delete-acronym!","cljs.core/dissoc","inflections.core/countable?","inflections.core/uncountable?","cljs.core/not","inflections.core/add-uncountable!","inflections.core/delete-uncountable!","cljs.core/disj","inflections.core/*plural-rules*","inflections.core/plural","or__5045__auto__","clojure.string/blank?","cljs.core/rseq","inflections.core/plural!","seq60015","seq__60020","chunk__60021","count__60022","i__60023","temp__5804__auto__","cljs.core/chunked-seq?","c__5568__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/next","inflections.core/init-plural-rules!","inflections.core.plural_BANG_","inflections.core/*singular-rules*","inflections.core/singular","s'","inflections.core/singular!","seq60039","seq__60041","chunk__60042","count__60043","i__60044","inflections.core/init-singular-rules!","inflections.core.singular_BANG_","inflections.core/*irregular-words*","cljs.core/sorted-set","inflections.core/irregular?","inflections.core/add-irregular!","singular","plural","cljs.core/re-pattern","inflections.core/delete-irregular!","inflections.core/init-irregular-words!","cljs.core.doall","p1__60057#","cljs.core/second","inflections.core/camel-case","p__60063","vec__60064","seq60061","G__60062","self__5754__auto__","mode","inflections.core.camel_case","clojure.string/upper-case","cljs.core/fn?","G__60069","cljs.core/str","cljs.core/rest","p1__60058#","p1__60060#","vec__60073","_","letter-to-uppercase","inflections.core/capitalize","acronym","word'","cljs.core.subs","inflections.core/titleize","clojure.string.join","clojure.string.split","inflections.core/dasherize","inflections.core/demodulize","inflections.core/hyphenate","inflections.core/ordinalize","number","no.en.core/parse-integer","cljs.core.range","cljs.core/mod","modulus","inflections.core/parameterize","p__60079","vec__60080","seq60077","G__60078","sep","inflections.core/pluralize","p__60093","vec__60094","seq60090","G__60091","G__60092","count","inflections.core/underscore","inflections.core/foreign-key","p__60104","vec__60105","seq60102","G__60103","x'","inflections.core/transform-keys","m","f","cljs.core/map?","memo","key","value","p1__60108#","cljs.core.mapv","cljs.core/sequential?","p1__60109#","cljs.core/keys","inflections.core/transform-values","inflections.core/camel-case-keys","p__60113","vec__60114","seq60111","G__60112","p1__60110#","clojure.walk/keywordize-keys","inflections.core/hyphenate-keys","inflections.core/hyphenate-values","inflections.core/stringify-keys","p1__60118#","inflections.core/stringify-values","p1__60122#","inflections.core/underscore-keys","inflections.core/init-inflections!"],"sourcesContent":["(ns inflections.core\n  (:refer-clojure :exclude [replace])\n  (:require [clojure.string :refer [blank? lower-case upper-case replace split join]]\n            [clojure.walk :refer [keywordize-keys]]\n            [no.en.core :refer [parse-integer]]))\n\n(defn coerce\n  \"Coerce the string `s` to the type of `obj`.\"\n  [obj s]\n  (cond\n    (keyword? obj)\n    (keyword s)\n    (symbol? obj)\n    (symbol s)\n    :else s))\n\n;; RULES\n\n(defrecord Rule [pattern replacement])\n\n(defn add-rule! [rules rule]\n  (if-not (contains? (set (deref rules)) rule)\n    (swap! rules conj rule)))\n\n(defn slurp-rules\n  \"Returns a seq of rules, where the pattern and replacement must be\n  given in pairs of two elements.\"\n  [& patterns-and-replacements]\n  (map #(apply ->Rule %) (partition 2 patterns-and-replacements)))\n\n(defn resolve-rule [rule word]\n  (when (and rule word)\n    (let [pattern (:pattern rule)\n          replacement (:replacement rule)]\n      (if (re-find pattern word)\n        (replace word pattern replacement)))))\n\n(defn resolve-rules [rules word]\n  (first (keep #(resolve-rule % word) rules)))\n\n(defn reset-rules!\n  \"Resets the list of plural rules.\"\n  [rules] (reset! rules []))\n\n(defn str-name\n  \"Same as `clojure.core/name`, but keeps the namespace for keywords\n  and symbols.\"\n  [x]\n  (cond\n    (nil? x)\n    x\n    (string? x)\n    x\n    (or (keyword? x)\n        (symbol? x))\n    (if-let [ns (namespace x)]\n      (str ns \"/\" (name x))\n      (name x))))\n\n(def ^{:dynamic true} *uncountable-words*\n  (atom #{\"air\" \"alcohol\" \"art\" \"blood\" \"butter\" \"cheese\" \"chewing\" \"coffee\"\n          \"confusion\" \"cotton\" \"education\" \"electricity\" \"entertainment\" \"equipment\"\n          \"experience\" \"fiction\" \"fish\" \"food\" \"forgiveness\" \"fresh\" \"gold\" \"gossip\" \"grass\"\n          \"ground\" \"gum\" \"happiness\" \"history\" \"homework\" \"honey\" \"ice\" \"information\" \"jam\"\n          \"knowledge\" \"lightning\" \"liquid\" \"literature\" \"love\" \"luck\" \"luggage\" \"meat\" \"milk\"\n          \"mist\" \"money\" \"music\" \"news\" \"oil\" \"oxygen\" \"paper\" \"patience\" \"peanut\" \"pepper\"\n          \"petrol\" \"pork\" \"power\" \"pressure\" \"research\" \"rice\" \"sadness\" \"series\" \"sheep\"\n          \"shopping\" \"silver\" \"snow\" \"space\" \"species\" \"speed\" \"steam\" \"sugar\" \"sunshine\" \"tea\"\n          \"tennis\" \"thunder\" \"time\" \"toothpaste\" \"traffic\" \"up\" \"vinegar\" \"washing\" \"wine\"\n          \"wood\" \"wool\"}))\n\n(def ^{:dynamic true} *acronyms*\n  (atom {\"hst\" \"HST\"\n         \"nasa\" \"NASA\"}))\n\n(defn acronym\n  \"Returns the the acronym for `s` if it is one, otherwise nil.\"\n  [s]\n  (when s\n    (some->> (str-name s)\n             (lower-case)\n             (get @*acronyms*)\n             (coerce s))))\n\n(defn add-acronym!\n  \"Adds `word` to the set of `*acronyms*`.\"\n  [word] (swap! *acronyms* assoc (lower-case (str-name word)) (str-name word)))\n\n(defn delete-acronym!\n  \"Delete `word` from the set of `*acronyms*`.\"\n  [word] (swap! *acronyms* dissoc (lower-case (str-name word))))\n\n(defn countable?\n  \"Returns true if `s` is countable, otherwise false.\"\n  [s]\n  (when s (not (contains? @*uncountable-words* (lower-case (str-name s))))))\n\n(defn uncountable?\n  \"Returns true if `x` is uncountable, otherwise false.\"\n  [x]\n  (when x (not (countable? x))))\n\n(defn add-uncountable!\n  \"Adds `word` to the set of `*uncountable-words*`.\"\n  [word] (swap! *uncountable-words* conj (lower-case (str-name word))))\n\n(defn delete-uncountable!\n  \"Delete `word` from the set of `*uncountable-words*`.\"\n  [word] (swap! *uncountable-words* disj (lower-case (str-name word))))\n\n;; PLURAL\n\n(def ^{:dynamic true} *plural-rules*\n  (atom []))\n\n(defn plural\n  \"Returns the plural of s.\"\n  [s]\n  (let [s (str-name s)]\n    (if (or (blank? s)\n            (uncountable? s))\n      s (resolve-rules (rseq @*plural-rules*) s))))\n\n(defn plural!\n  \"Define rule(s) to map words from singular to plural.\\n\n  Examples: (plural! #\\\"$(?i)\\\" \\\"s\\\")\n            (plural! #\\\"(ax|test)is$(?i)\\\" \\\"$1es\\\"\n                     #\\\"(octop|vir)us$(?i)\\\" \\\"$1i\\\")\"\n  [& patterns-and-replacements]\n  (doseq [rule (apply slurp-rules patterns-and-replacements)]\n    (add-rule! *plural-rules* rule)))\n\n(defn init-plural-rules! []\n  (plural!\n   #\"(?i)$\" \"s\"\n   #\"(?i)s$\" \"s\"\n   #\"(?i)(ax|test)is$\" \"$1es\"\n   #\"(?i)(octop|vir)us$\" \"$1i\"\n   #\"(?i)(alias|status)$\" \"$1es\"\n   #\"(?i)(bu)s$\" \"$1ses\"\n   #\"(?i)(buffal|tomat)o$\" \"$1oes\"\n   #\"(?i)([ti])um$\" \"$1a\"\n   #\"(?i)sis$\" \"ses\"\n   #\"(?i)(?:([^f])fe|([lr])f)$\" \"$1$2ves\"\n   #\"(?i)(hive)$\" \"$1s\"\n   #\"(?i)([^aeiouy]|qu)y$\" \"$1ies\"\n   #\"(?i)(x|ch|ss|sh)$\" \"$1es\"\n   #\"(?i)(matr|vert|ind)(?:ix|ex)$\" \"$1ices\"\n   #\"(?i)([m|l])ouse$\" \"$1ice\"\n   #\"(?i)^(ox)$\" \"$1en\"\n   #\"(?i)(quiz)$\" \"$1zes\"))\n\n;; SINGULAR\n\n(def ^{:dynamic true} *singular-rules*\n  (atom []))\n\n(defn singular\n  \"Returns the singular of s.\"\n  [s]\n  (let [s' (str-name s)]\n    (if-not (uncountable? s')\n      (coerce s (or (resolve-rules (rseq @*singular-rules*) s') s'))\n      s)))\n\n(defn singular!\n  \"Define rule(s) to map words from singular to plural.\\n\n  Examples: (singular! #\\\"(n)ews$(?i)\\\" \\\"$1ews\\\")\n            (singular! #\\\"(m)ovies$(?i)\\\" \\\"$1ovie\\\"\n                       #\\\"([m|l])ice$(?i)\\\" \\\"$1ouse\\\")\"\n  [& patterns-and-replacements]\n  (doseq [rule (apply slurp-rules patterns-and-replacements)]\n    (add-rule! *singular-rules* rule)))\n\n(defn init-singular-rules! []\n  (singular!\n   #\"(?i)s$\" \"\"\n   #\"(?i)(ss)$\" \"$1\"\n   #\"(?i)(n)ews$\" \"$1ews\"\n   #\"(?i)([ti])a$\" \"$1um\"\n   #\"(?i)((a)naly|(b)a|(d)iagno|(p)arenthe|(p)rogno|(s)ynop|(t)he)(sis|ses)$\" \"$1$2sis\"\n   #\"(?i)(^analy)(sis|ses)$\" \"$1sis\"\n   #\"(?i)([^f])ves$\" \"$1fe\"\n   #\"(?i)(hive)s$\" \"$1\"\n   #\"(?i)(tive)s$\" \"$1\"\n   #\"(?i)([lr])ves$\" \"$1f\"\n   #\"(?i)([^aeiouy]|qu)ies$\" \"$1y\"\n   #\"(?i)(s)eries$\" \"$1eries\"\n   #\"(?i)(m)ovies$\" \"$1ovie\"\n   #\"(?i)(x|ch|ss|sh)es$\" \"$1\"\n   #\"(?i)([m|l])ice$\" \"$1ouse\"\n   #\"(?i)(bus)(es)?$\" \"$1\"\n   #\"(?i)(o)es$\" \"$1\"\n   #\"(?i)(shoe)s$\" \"$1\"\n   #\"(?i)(cris|ax|test)(is|es)$\" \"$1is\"\n   #\"(?i)(octop|vir)(us|i)$\" \"$1us\"\n   #\"(?i)(alias|status)(es)?$\" \"$1\"\n   #\"(?i)^(ox)en\" \"$1\"\n   #\"(?i)(vert|ind)ices$\" \"$1ex\"\n   #\"(?i)(matr)ices$\" \"$1ix\"\n   #\"(?i)(quiz)zes$\" \"$1\"\n   #\"(?i)(database)s$\" \"$1\"))\n\n;; IRREGULAR\n\n(def ^{:dynamic true} *irregular-words*\n  (atom (sorted-set)))\n\n(defn irregular?\n  \"Returns true if `word` is an irregular word, otherwise false.\"\n  [word]\n  (when word\n    (contains? @*irregular-words* (lower-case (str-name word)))))\n\n(defn add-irregular!\n  \"Add `singular` and `plural` to the set of `*irregular-words*`.\"\n  [singular plural]\n  (let [singular (lower-case (str-name singular))\n        plural (lower-case (str-name plural))]\n    (delete-uncountable! singular)\n    (delete-uncountable! plural)\n    (singular! (re-pattern (str \"^\" plural \"$\")) singular)\n    (plural! (re-pattern (str \"^\" singular \"$\")) plural)\n    (swap! *irregular-words* conj singular)\n    (swap! *irregular-words* conj plural)))\n\n(defn delete-irregular!\n  \"Delete `singular` and `plural` from the set of *irregular-words*.\"\n  [singular plural]\n  (let [singular (lower-case (str-name singular))\n        plural (lower-case (str-name plural))]\n    (swap! *irregular-words* disj singular)\n    (swap! *irregular-words* disj plural)))\n\n(defn init-irregular-words! []\n  (doall\n   (map #(add-irregular! (first %) (second %))\n        [[\"amenity\" \"amenities\"]\n         [\"child\" \"children\"]\n         [\"cow\" \"kine\"]\n         [\"foot\" \"feet\"]\n         [\"louse\" \"lice\"]\n         [\"mailman\" \"mailmen\"]\n         [\"man\" \"men\"]\n         [\"mouse\" \"mice\"]\n         [\"move\" \"moves\"]\n         [\"ox\" \"oxen\"]\n         [\"person\" \"people\"]\n         [\"sex\" \"sexes\"]\n         [\"tooth\" \"teeth\"]\n         [\"woman\" \"women\"]])))\n\n(defn camel-case\n  \"Convert `word` to camel case. By default, camel-case converts to\n  UpperCamelCase. If the argument to camel-case is set to :lower then\n  camel-case produces lowerCamelCase.\n\n  Examples:\n\n    (camel-case \\\"active_record\\\")\n    ;=> \\\"ActiveRecord\\\"\n\n    (camel-case \\\"active_record\\\" :lower)\n    ;=> \\\"activeRecord\\\"\n\n    (camel-case \\\"active_record/errors\\\")\n    ;=> \\\"ActiveRecord/Errors\\\"\n\n    (camel-case \\\"active_record/errors\\\" :lower)\n    ;=> \\\"activeRecord/Errors\\\"\"\n  [word & [mode]]\n  (when word\n    (->> (let [word (str-name word)]\n           (cond\n             (= mode :lower) (camel-case word lower-case)\n             (= mode :upper) (camel-case word upper-case)\n             (fn? mode) (str (mode (str (first word)))\n                             (apply str (rest (camel-case word nil))))\n             :else (-> (replace word #\"/(.?)\" #(str \"/\" (upper-case (nth % 1))))\n                       (replace #\"(^|_|-)(.)\"\n                                #?(:clj\n                                   #(str (if (#{\\_ \\-} (nth % 1))\n                                           (nth % 1))\n                                         (upper-case (nth % 2)))\n                                   :cljs\n                                   #(let [[_ _ letter-to-uppercase] %]\n                                      (upper-case letter-to-uppercase)))))))\n         (coerce word))))\n\n(defn capitalize\n  \"Convert the first letter in `word` to upper case.\n\n  Examples:\n\n    (capitalize \\\"hello\\\")\n    ;=> \\\"Hello\\\"\n\n    (capitalize \\\"HELLO\\\")\n    ;=> \\\"Hello\\\"\n\n    (capitalize \\\"abc123\\\")\n    ;=> \\\"Abc123\\\"\"\n  [word]\n  (when word\n    (if-let [acronym (acronym word)]\n      acronym\n      (let [word' (str-name word)]\n        (->> (str (upper-case (str (first word')))\n                  (when (next word') (lower-case (subs word' 1))))\n             (coerce word))))))\n\n(defn titleize\n  \"Convert `s` into a title.\"\n  [s]\n  (when s\n    (join \" \" (map capitalize (split (str-name s) #\"[-_./ ]\")))))\n\n(defn dasherize\n  \"Replaces all underscores in `s` with dashes.\n\n  Examples:\n\n    (dasherize \\\"puni_puni\\\")\n    ;=> \\\"puni-puni\\\"\"\n  [s]\n  (when s\n    (->> (replace (str-name s) #\"_\" \"-\")\n         (coerce s))))\n\n(defn demodulize\n  \"Removes the module part from `x`.\n\n  Examples:\n\n    (demodulize \\\"inflections.MyRecord\\\")\n    ;=> \\\"MyRecord\\\"\n\n    (demodulize \\\"ActiveRecord::CoreExtensions::String::Inflections\\\")\n    ;=> \\\"Inflections\\\"\n\n    (demodulize \\\"Inflections\\\")\n    ;=> \\\"Inflections\\\"\"\n  [x]\n  (when x\n    (->> (replace (str-name x) #\"^.*(::|\\.)\" \"\")\n         (coerce x))))\n\n(defn hyphenate\n  \"Hyphenate x, which is the same as threading `x` through the str,\n  underscore and dasherize fns.\n\n  Examples:\n\n    (hyphenate 'Continent)\n    ; => \\\"continent\\\"\n\n    (hyphenate \\\"CountryFlag\\\")\n    ; => \\\"country-flag\\\"\"\n  [x]\n  (when x\n    (->> (-> (str-name x)\n             (replace #\"([A-Z]+)([A-Z][a-z])\" \"$1-$2\")\n             (replace #\"([a-z\\d])([A-Z])\" \"$1-$2\")\n             (replace #\"\\s+\" \"-\")\n             (replace #\"_\" \"-\")\n             (lower-case))\n         (coerce x))))\n\n(defn ordinalize\n  \"Turns `x` into an ordinal string used to denote the position in an\n  ordered sequence such as 1st, 2nd, 3rd, 4th, etc.\n\n  Examples:\n\n    (ordinalize \\\"1\\\")\n    ;=> \\\"1st\\\"\n\n    (ordinalize \\\"23\\\")\n    ;=> \\\"23rd\\\"\"\n  [x]\n  (if-let [number (parse-integer x)]\n    (if (contains? (set (range 11 14)) (mod number 100))\n      (str number \"th\")\n      (let [modulus (mod number 10)]\n        (cond\n          (= modulus 1) (str number \"st\")\n          (= modulus 2) (str number \"nd\")\n          (= modulus 3) (str number \"rd\")\n          :else (str number \"th\"))))))\n\n(defn parameterize\n  \"Replaces special characters in `x` with the default separator\n  \\\"-\\\". so that it may be used as part of a pretty URL.\n\n  Examples:\n\n    (parameterize \\\"Donald E. Knuth\\\")\n    ; => \\\"donald-e-knuth\\\"\n\n    (parameterize \\\"Donald E. Knuth\\\" \\\"_\\\")\n    ; => \\\"donald_e_knuth\\\"\"\n  [x & [sep]]\n  (when x\n    (let [sep (or sep \"-\")]\n      (-> (str-name x)\n          #?(:clj (replace #\"(?i)[^a-z0-9]+\" sep)\n             :cljs (replace #\"[^A-Za-z0-9]+\" sep))\n          (replace #\"\\++\" sep)\n          (replace (re-pattern (str sep \"{2,}\")) sep)\n          (replace (re-pattern (str \"(?i)(^\" sep \")|(\" sep \"$)\")) \"\")\n          lower-case))))\n\n(defn pluralize\n  \"Attempts to pluralize the word unless count is 1. If plural is\n  supplied, it will use that when count is > 1, otherwise it will use\n  the inflector to determine the plural form.\"\n  [count singular & [plural]]\n  (str count \" \" (if (= 1 count) singular (or plural (inflections.core/plural singular)))))\n\n(defn underscore\n  \"The reverse of camel-case. Makes an underscored, lowercase form from\n  the expression in the string.\n\n  Examples:\n\n    (underscore \\\"ActiveRecord\\\")\n    ;=> \\\"active_record\\\"\n\n    (underscore \\\"ActiveRecord::Errors\\\")\n    ;=> \\\"active_record::errors\\\"\"\n  [x]\n  (when x\n    (->> (-> (str-name x)\n             (replace #\"([A-Z\\d]+)([A-Z][a-z])\" \"$1_$2\")\n             (replace #\"([a-z\\d])([A-Z])\" \"$1_$2\")\n             (replace #\"-\" \"_\")\n             lower-case)\n         (coerce x))))\n\n(defn foreign-key\n  \"Converts `x` into a foreign key. The default separator \\\"_\\\" is\n  placed between the name and \\\"id\\\".\n\n\n  Examples:\n\n    (foreign-key \\\"Message\\\")\n    ;=> \\\"message_id\\\"\n\n    (foreign-key \\\"Message\\\" false)\n    ;=> \\\"messageid\\\"\n\n    (foreign-key \\\"Admin::Post\\\")\n    ;=> \\\"post_id\\\"\"\n  [x & [sep]]\n  (let [x' (str-name x)]\n    (when-not (blank? x')\n      (->> (str (underscore (hyphenate (singular (demodulize x'))))\n                (or sep \"_\") \"id\")\n           (coerce x)))))\n\n;; TRANSFORMATIONS ON MAPS\n\n(defn transform-keys\n  \"Recursively transform all keys in the map `m` by applying `f` on them.\"\n  [m f]\n  (if (map? m)\n    (reduce\n     (fn [memo key]\n       (let [value (get m key)]\n         (-> (dissoc memo key)\n             (assoc (f key)\n                    (cond\n                      (map? value)\n                      (transform-keys value f)\n                      (vector? value)\n                      (mapv #(transform-keys % f) value)\n                      (sequential? value)\n                      (map #(transform-keys % f) value)\n                      :else value)))))\n     m (keys m))\n    m))\n\n(defn transform-values\n  \"Recursively transform all map values of m by applying f on them.\"\n  [m f]\n  (if (map? m)\n    (reduce\n     (fn [memo key]\n       (let [value (get m key)]\n         (assoc memo key (if (map? value) (transform-values value f) (f value)))))\n     m (keys m))\n    m))\n\n(defn camel-case-keys\n  \"Recursively apply camel-case on all keys of m.\"\n  [m & [mode]]\n  (-> (transform-keys m #(camel-case %1 mode))\n      (keywordize-keys)))\n\n(defn hyphenate-keys\n  \"Recursively apply hyphenate on all keys of m.\"\n  [m] (transform-keys m hyphenate))\n\n(defn hyphenate-values\n  \"Recursively apply hyphenate on all values of m.\"\n  [m] (transform-values m hyphenate))\n\n(defn stringify-keys\n  \"Recursively transform all keys of m into strings.\"\n  [m] (transform-keys m #(if (keyword? %) (str-name %) (str %))))\n\n(defn stringify-values\n  \"Recursively transform all values of m into strings.\"\n  [m] (transform-values m #(if (keyword? %) (str-name %) (str %))))\n\n(defn underscore-keys\n  \"Recursively apply underscore on all keys of m.\"\n  [m] (transform-keys m underscore))\n\n(defn init-inflections!\n  \"Initialize the Inflections library with defaults.\"\n  []\n  (init-plural-rules!)\n  (init-singular-rules!)\n  (init-irregular-words!))\n\n(init-inflections!)\n"],"x_google_ignoreList":[0]}