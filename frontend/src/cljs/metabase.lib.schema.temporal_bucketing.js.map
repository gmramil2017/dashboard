{"version":3,"sources":["metabase/lib/schema/temporal_bucketing.cljc"],"mappings":"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","names":["metabase.lib.schema.temporal-bucketing/ordered-date-extraction-units","metabase.lib.schema.temporal-bucketing/date-extraction-units","cljs.core/set","metabase.util.malli.registry/register!","cljs.core.into","metabase.lib.schema.temporal-bucketing/ordered-date-truncation-units","metabase.lib.schema.temporal-bucketing/date-truncation-units","metabase.lib.schema.temporal-bucketing/ordered-date-bucketing-units","cljs.core.distinct","cljs.core.concat","metabase.lib.schema.temporal-bucketing/date-bucketing-units","metabase.lib.schema.temporal-bucketing/ordered-time-extraction-units","metabase.lib.schema.temporal-bucketing/time-extraction-units","metabase.lib.schema.temporal-bucketing/ordered-time-truncation-units","metabase.lib.schema.temporal-bucketing/time-truncation-units","metabase.lib.schema.temporal-bucketing/ordered-time-bucketing-units","cljs.core.comp","cljs.core.remove","metabase.lib.schema.temporal-bucketing/time-bucketing-units","metabase.lib.schema.temporal-bucketing/ordered-datetime-bucketing-units","metabase.lib.schema.temporal-bucketing/datetime-bucketing-units","metabase.lib.schema.temporal-bucketing/temporal-bucketing-units","cljs.core.conj","metabase.lib.schema.temporal-bucketing/datetime-truncation-units","clojure.set.union","metabase.lib.schema.temporal-bucketing/datetime-extraction-units","metabase.lib.schema.temporal-bucketing/date-interval-units","metabase.lib.schema.temporal-bucketing/time-interval-units","metabase.lib.schema.temporal-bucketing/datetime-interval-units"],"sourcesContent":["(ns metabase.lib.schema.temporal-bucketing\n  \"Malli schema for temporal bucketing units and expressions.\"\n  (:require\n   [clojure.set :as set]\n   [metabase.util.malli.registry :as mr]))\n\n(def ordered-date-extraction-units\n  \"Units that you can EXTRACT from a date or datetime. These return integers in temporal bucketing expressions.\n  The front end shows the options in this order.\"\n  [:day-of-week\n   :day-of-month\n   :day-of-year\n   :week-of-year\n   :month-of-year\n   :quarter-of-year\n   :year])\n\n(def date-extraction-units\n  \"Units that you can EXTRACT from a date or datetime. These return integers in temporal bucketing expressions.\"\n  (set ordered-date-extraction-units))\n\n(mr/def ::unit.date.extract\n  (into [:enum {:error/message \"Valid date extraction unit\"}] date-extraction-units))\n\n(def ordered-date-truncation-units\n  \"Units that you can TRUNCATE a date or datetime to. In temporal bucketing expressions these return a `:type/Date`.\n  The front end shows the options in this order.\"\n  [:day :week :month :quarter :year])\n\n(def date-truncation-units\n  \"Units that you can TRUNCATE a date or datetime to. In temporal bucketing expressions these return a `:type/Date`.\"\n  (set ordered-date-truncation-units))\n\n(mr/def ::unit.date.truncate\n  (into [:enum {:error/message \"Valid date truncation unit\"}] date-truncation-units))\n\n(def ordered-date-bucketing-units\n  \"Valid date or datetime bucketing units for either truncation or extraction operations.\n  The front end shows the options in this order.\"\n  (into [] (distinct) (concat ordered-date-truncation-units ordered-date-extraction-units)))\n\n(def date-bucketing-units\n  \"Valid date or datetime bucketing units for either truncation or extraction operations.\"\n  (set ordered-date-bucketing-units))\n\n(mr/def ::unit.date\n  (into [:enum {:error/message \"Valid date bucketing unit\"}] date-bucketing-units))\n\n(def ordered-time-extraction-units\n  \"Units that you can EXTRACT from a time or datetime. These return integers in temporal bucketing expressions.\n  The front end shows the options in this order.\"\n  [:minute-of-hour :hour-of-day])\n\n(def time-extraction-units\n  \"Units that you can EXTRACT from a time or datetime. These return integers in temporal bucketing expressions.\"\n  (set ordered-time-extraction-units))\n\n(mr/def ::unit.time.extract\n  (into [:enum {:error/message \"Valid time extraction unit\"}] time-extraction-units))\n\n(def ordered-time-truncation-units\n  \"Units you can TRUNCATE a time or datetime to. These return the same type as the expression being bucketed in temporal\n  bucketing expressions. The front end shows the options in this order.\"\n  [:millisecond :second :minute :hour])\n\n(def time-truncation-units\n  \"Units you can TRUNCATE a time or datetime to. These return the same type as the expression being bucketed in temporal\n  bucketing expressions.\"\n  (set ordered-time-truncation-units))\n\n(mr/def ::unit.time.truncate\n  (into [:enum {:error/message \"Valid time truncation unit\"}] time-truncation-units))\n\n(def ordered-time-bucketing-units\n  \"Valid time bucketing units for either truncation or extraction operations.\n  The front end shows the options in this order.\"\n  (into []\n        (comp (remove #{:millisecond :second})\n              (distinct))\n        (concat ordered-time-truncation-units ordered-time-extraction-units)))\n\n(def time-bucketing-units\n  \"Valid time bucketing units for either truncation or extraction operations.\"\n  (set ordered-time-extraction-units))\n\n(mr/def ::unit.time\n  (into [:enum {:error/message \"Valid time bucketing unit\"}] time-bucketing-units))\n\n(def ordered-datetime-bucketing-units\n  \"Valid datetime bucketing units for either truncation or extraction operations.\n  The front end shows the options in this order.\"\n  (into []\n        (comp (remove #{:millisecond :second})\n              (distinct))\n        (concat ordered-time-truncation-units ordered-date-truncation-units\n                ordered-time-extraction-units ordered-date-extraction-units)))\n\n(def datetime-bucketing-units\n  \"Valid datetime bucketing units for either truncation or extraction operations.\"\n  (set ordered-datetime-bucketing-units))\n\n(mr/def ::unit.date-time\n  (into [:enum {:error/message \"Valid datetime bucketing unit\"}] datetime-bucketing-units))\n\n(def temporal-bucketing-units\n  \"This is the same as [[datetime-bucketing-units]], but also includes `:default`.\"\n  (conj datetime-bucketing-units :default))\n\n(mr/def ::unit\n  (into [:enum {:error/message \"Valid temporal bucketing unit\"}] temporal-bucketing-units))\n\n(def datetime-truncation-units\n  \"Valid TRUNCATION units for a datetime.\"\n  (set/union date-truncation-units time-truncation-units))\n\n(mr/def ::unit.date-time.truncate\n  (into [:enum {:error/message \"Valid datetime truncation unit\"}] datetime-truncation-units))\n\n(def datetime-extraction-units\n  \"Valid EXTRACTION units for a datetime. Extraction units return integers!\"\n  (set/union date-extraction-units time-extraction-units))\n\n(mr/def ::unit.date-time.extract\n  (into [:enum {:error/message \"Valid datetime extraction unit\"}] datetime-extraction-units))\n\n(def date-interval-units\n  \"Date units that are valid in intervals or clauses like `:datetime-add`. This is a superset\n  of [[date-truncation-units]].\"\n  ;; it's the same but also includes `:year`, not normally allowed as a date truncation unit; `:year` is interpreted\n  ;; as extraction instead.\n  (conj date-truncation-units :year))\n\n(mr/def ::unit.date.interval\n  (into [:enum {:error/message \"Valid date interval unit\"}] date-interval-units))\n\n(def time-interval-units\n  \"Time units that are valid in intervals or clauses like `:datetime-add`. Currently the same\n  as [[time-truncation-units]].\"\n  time-truncation-units)\n\n(mr/def ::unit.time.interval\n  (into [:enum {:error/message \"Valid time interval unit\"}] time-interval-units))\n\n(def datetime-interval-units\n  \"Units valid in intervals or clauses like `:datetime-add` for datetimes.\"\n  (set/union date-interval-units time-interval-units))\n\n(mr/def ::unit.date-time.interval\n  (into [:enum {:error/message \"Valid datetime interval unit\"}] datetime-interval-units))\n\n(mr/def ::option\n  [:map\n   [:lib/type [:= :option/temporal-bucketing]]\n   [:unit ::unit]\n   [:default {:optional true} :boolean]])\n"]}