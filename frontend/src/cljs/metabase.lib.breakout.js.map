{"version":3,"sources":["metabase/lib/breakout.cljc"],"mappings":"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","names":["metabase.lib.metadata.calculation/describe-top-level-key-method","query","stage-number","_k","temp__5804__auto__","breakouts","cljs.core/not-empty","metabase.lib.util/query-stage","metabase.shared.util.i18n.js_i18n","clojure.string.join","metabase.shared.util.i18n/js-i18n","iter__5523__auto__","s__80049","cljs.core/LazySeq","cljs.core/seq","cljs.core/chunked-seq?","c__5521__auto__","size__5522__auto__","cljs.core/count","b__80051","cljs.core/chunk-buffer","i__80050","cljs.core/-nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__80048","cljs.core/chunk-rest","cljs.core/first","cljs.core/cons","cljs.core/rest","breakout","metabase.lib.metadata.calculation.display_name","var_args","G__80063","metabase.lib.breakout/breakout","js/Error","expr","metabase.lib.breakout.breakout","metabase.lib.ref/ref","cljs.core/fn?","metabase.lib.util/add-summary-clause","G__80075","metabase.lib.breakout/breakouts","metabase.lib.breakout.breakouts","metabase.lib.breakout/breakouts-metadata","G__80129","cljs.core.mapv","field-ref","metabase.lib.metadata.calculation.metadata","cljs.core.assoc","G__80134","metabase.lib.breakout/breakoutable-columns","metabase.lib.breakout.breakoutable_columns","columns","stage","s__80155","b__80157","i__80156","iter__80154","col","metabase.lib.metadata.calculation.visible_columns","ref->existing-index","cljs.core.into","cljs.core.map_indexed","index","breakout-ref","matching-ref","metabase.lib.equality.find_closest_matching_ref","cljs.core.map","G__80166","pos","G__80167","G__80168","cljs.core.dissoc","cljs.core/chunk-first"],"sourcesContent":["(ns metabase.lib.breakout\n  (:require\n   [clojure.string :as str]\n   [metabase.lib.equality :as lib.equality]\n   [metabase.lib.metadata :as lib.metadata]\n   [metabase.lib.metadata.calculation :as lib.metadata.calculation]\n   [metabase.lib.ref :as lib.ref]\n   [metabase.lib.schema :as lib.schema]\n   [metabase.lib.schema.expression :as lib.schema.expression]\n   [metabase.lib.util :as lib.util]\n   [metabase.shared.util.i18n :as i18n]\n   [metabase.util.malli :as mu]))\n\n(defmethod lib.metadata.calculation/describe-top-level-key-method :breakout\n  [query stage-number _k]\n  (when-let [breakouts (not-empty (:breakout (lib.util/query-stage query stage-number)))]\n    (i18n/tru \"Grouped by {0}\"\n              (str/join (str \\space (i18n/tru \"and\") \\space)\n                        (for [breakout breakouts]\n                          (lib.metadata.calculation/display-name query stage-number breakout :long))))))\n\n(mu/defn breakout :- ::lib.schema/query\n  \"Add a new breakout on an expression, presumably a Field reference.\"\n  ([query expr]\n   (breakout query -1 expr))\n\n  ([query        :- ::lib.schema/query\n    stage-number :- :int\n    expr         :- some?]\n   (let [expr (lib.ref/ref (if (fn? expr)\n                             (expr query stage-number)\n                             expr))]\n     (lib.util/add-summary-clause query stage-number :breakout expr))))\n\n(mu/defn breakouts :- [:maybe [:sequential ::lib.schema.expression/expression]]\n  \"Return the current breakouts\"\n  ([query]\n   (breakouts query -1))\n  ([query :- ::lib.schema/query\n    stage-number :- :int]\n   (not-empty (:breakout (lib.util/query-stage query stage-number)))))\n\n(mu/defn breakouts-metadata :- [:maybe [:sequential lib.metadata/ColumnMetadata]]\n  \"Get metadata about the breakouts in a given stage of a `query`.\"\n  [query        :- ::lib.schema/query\n   stage-number :- :int]\n  (some->> (not-empty (:breakout (lib.util/query-stage query stage-number)))\n           (mapv (fn [field-ref]\n                   (-> (lib.metadata.calculation/metadata query stage-number field-ref)\n                       (assoc :lib/source :source/breakouts))))))\n\n(mu/defn breakoutable-columns :- [:sequential lib.metadata/ColumnMetadata]\n  \"Get column metadata for all the columns that can be broken out by in\n  the stage number `stage-number` of the query `query`\n  If `stage-number` is omitted, the last stage is used.\n  The rules for determining which columns can be broken out by are as follows:\n\n  1. custom `:expressions` in this stage of the query\n\n  2. Fields 'exported' by the previous stage of the query, if there is one;\n     otherwise Fields from the current `:source-table`\n\n  3. Fields exported by explicit joins\n\n  4. Fields in Tables that are implicitly joinable.\"\n\n  ([query :- ::lib.schema/query]\n   (breakoutable-columns query -1))\n\n  ([query        :- ::lib.schema/query\n    stage-number :- :int]\n   (let [columns             (let [stage (lib.util/query-stage query stage-number)]\n                               ;; pre-calculate refs for the visible columns so we can use them as keys when\n                               ;; using [[lib.equality/find-closest-matching-ref]] below. We'll remove them before\n                               ;; returning them\n                               (for [col (lib.metadata.calculation/visible-columns query stage-number stage)]\n                                 (assoc col ::ref (lib.ref/ref col))))\n         ref->existing-index (into {}\n                                   (map-indexed (fn [index breakout-ref]\n                                                  (when-let [matching-ref (lib.equality/find-closest-matching-ref\n                                                                           query\n                                                                           breakout-ref\n                                                                           (map ::ref columns))]\n                                                    [matching-ref index])))\n                                   (breakouts query stage-number))]\n     (some->> (not-empty columns)\n              (into [] (map (fn [col]\n                              (let [pos (ref->existing-index (::ref col))]\n                                (cond-> col\n                                  pos  (assoc :breakout-position pos)\n                                  true (dissoc ::ref))))))))))\n"]}