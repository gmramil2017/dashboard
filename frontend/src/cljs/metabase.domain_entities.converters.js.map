{"version":3,"sources":["metabase/domain_entities/converters.cljs"],"mappings":"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","names":["metabase.domain-entities.converters/decode-map","schema","_","by-prop","cljs.core.into","iter__5523__auto__","s__56830","cljs.core/LazySeq","temp__5804__auto__","cljs.core/seq","cljs.core/chunked-seq?","c__5521__auto__","size__5522__auto__","cljs.core/count","b__56832","cljs.core/chunk-buffer","i__56831","vec__56842","cljs.core/-nth","cljs.core.nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__56829","cljs.core/chunk-rest","vec__56846","cljs.core/first","cljs.core/cons","cljs.core/rest","map-key","props","malli.core.children","or__5045__auto__","cljs.core.get","metabase.util/->snake_case_en","metabase.util/qualified-name","x","cljs.core/map?","cljs.core/object?","s__56853","b__56855","i__56854","iter__56852","prop","cljs.core/js-keys","js-val","cljs.core.get_in","cljs.core.keyword","metabase.util/->kebab-case-en","cljs.core.ex_info","malli.core.form","metabase.domain-entities.converters/infer-child-decoder","p1__56865#","mapping","s__56868","b__56870","i__56869","iter__56867","c","cljs.core/Keyword","cljs.core/name","metabase.domain-entities.converters/infer-child-encoder","p1__56879#","s__56883","b__56885","i__56884","iter__56882","metabase.domain-entities.converters/decode-map-of","keydec","s__56903","b__56905","i__56904","iter__56902","js/Object.keys","metabase.domain-entities.converters/encode-map","keyenc","cljs.core/reduce-kv","obj","k","v","metabase.domain-entities.converters/identity-transformers","cljs.core/zipmap","cljs.core.repeat","cljs.core/identity","metabase.domain-entities.converters/js-transformer","malli.transform.transformer","p1__56929#","p1__56927#","p1__56928#","p1__56926#","p1__56930#","cljs.core.merge","cljs.core/keyword","cljs.core/parse-uuid","and__5043__auto__","cljs.core/vec","vec__56939","p1__56931#","key-schema","malli.core.decoder","p1__56932#","p1__56935#","cljs.core/namespace","cljs.core/str","cljs.core/clj->js","p1__56933#","js-props","s__56948","b__56950","i__56949","vec__56962","iter__56947","vec__56971","metabase.domain-entities.converters/incoming","metabase.domain-entities.converters/outgoing","malli.core.encoder","cljs.core/chunk-first"],"sourcesContent":["(ns metabase.domain-entities.converters\n  (:require\n    [malli.core :as mc]\n    [malli.transform :as mtx]\n    [metabase.util :as u]))\n\n(defn- decode-map [schema _]\n  (let [by-prop (into {} (for [[map-key props] (mc/children schema)]\n                           [(or (get props :js/prop)\n                                (u/->snake_case_en (u/qualified-name map-key)))\n                            {:map-key map-key}]))]\n    {:enter (fn [x]\n              (cond\n                (map? x) x\n                (object? x)\n                (into {} (for [prop (js-keys x)\n                               :let [js-val  (unchecked-get x prop)\n                                     map-key (or (get-in by-prop [prop :map-key])\n                                                 (keyword (u/->kebab-case-en prop)))]]\n                           [map-key js-val]))))\n     :leave (fn [x]\n              (if (object? x)\n                (throw (ex-info \"decode-map leaving with a JS object not a CLJS map\"\n                                {:value  x\n                                 :schema (mc/form schema)}))\n                x))}))\n\n(defn- infer-child-decoder [schema _]\n  (let [mapping (into {} (for [c (mc/children schema)]\n                           (if (keyword? c)\n                             [(name c) c]\n                             [c c])))]\n    {:enter #(mapping % %)}))\n\n(defn- infer-child-encoder [schema _]\n  (let [mapping (into {} (for [c (mc/children schema)]\n                           (if (keyword? c)\n                             [c (name c)]\n                             [c c])))]\n    {:enter #(mapping % %)}))\n\n(defn- decode-map-of [keydec x]\n  (cond\n    (map? x)    x\n    (object? x) (into {} (for [prop (js/Object.keys x)]\n                           [(keydec prop) (unchecked-get x prop)]))))\n\n(defn- encode-map [x keyenc]\n  (cond\n    (object? x) x\n    (map? x) (reduce-kv (fn [obj k v]\n                          (unchecked-set obj (keyenc k) v)\n                          obj)\n                        #js {}\n                        x)))\n\n(def ^:private identity-transformers\n  (-> ['string? :string\n       'number? :number\n       'int?    :int\n       'double? :double\n       'float?  :float]\n      (zipmap (repeat {:enter identity}))))\n\n(def js-transformer\n  \"Malli transformer for converting JavaScript data to and from CLJS data.\n\n  This is a bit more flexible than a JSON transformer. In particular, it normalizes the keys of `:map`\n  schema objects to `:kebab-case-keywords`, and restores them to strings with the original spelling when\n  converting back.\n\n  **On keyword conversion**\n\n  Note that `\\\"snake_case\\\"` is the default spelling we expect in the JS data.\n  This can be overridden with the `{:js/prop \\\"correctSpelling\\\"}` property on the schema, eg.\n  ```\n  [:map\n   [:camel-case {:js/prop \\\"camelCase\\\"} string?]\n   [:kebab-case {:js/prop \\\"kebab-case\\\"} number?]\n   [:snake-case [:enum \\\"foo\\\" \\\"bar\\\"]]]\n  ```\n\n  Observe that `:snake-case` does not need a `:js/prop` setting, since that is the default.\n\n  **On `:map-of`**\n\n  Note that `:map-of` is not `:map`. The spelling of the keys in a `:map-of` is not changed. If the key\n  schema is `keyword?`, they will be converted to keywords and back, but with the original spelling.\n\n  **On sequences**\n  `:tuple`, `:vector` and `:sequential` all get transformed into CLJS vectors. When converting back to JS,\n  they are JS arrays.\"\n  (mtx/transformer\n    {:name :js\n     :decoders\n     (merge identity-transformers\n            {:keyword           keyword\n             'keyword?          keyword\n             :qualified-keyword keyword\n             :uuid              parse-uuid\n             :vector            {:enter #(and % (vec %))}\n             :sequential        {:enter #(and % (vec %))}\n             :tuple             {:enter #(and % (vec %))}\n             :cat               {:enter #(and % (vec %))}\n             :catn              {:enter #(and % (vec %))}\n             :enum              {:compile infer-child-decoder}\n             :=                 {:compile infer-child-decoder}\n             :map               {:compile decode-map}\n             :map-of            {:compile (fn [schema _]\n                                            (let [[key-schema] (mc/children schema)\n                                                  keydec (mc/decoder key-schema js-transformer)]\n                                              {:enter #(decode-map-of keydec %)}))}})\n     :encoders\n     (merge identity-transformers\n            {:keyword           name\n             'keyword?          name\n             :qualified-keyword #(str (namespace %) \"/\" (name %))\n             :uuid              str\n             :vector            {:leave clj->js}\n             :sequential        {:leave clj->js}\n             :tuple             {:leave clj->js}\n             :enum              {:compile infer-child-encoder}\n             :=                 {:compile infer-child-encoder}\n             :map               {:compile\n                                 (fn [schema _]\n                                   (let [js-props (into {} (for [[k props] (mc/children schema)\n                                                                 :when (:js/prop props)]\n                                                             [k (:js/prop props)]))\n                                         keyenc   (fn [k] (or (get js-props k)\n                                                              (u/->snake_case_en (u/qualified-name k))))]\n                                     {:leave #(encode-map % keyenc)}))}\n             :map-of            {:leave #(encode-map % name)}})}))\n\n(defn incoming\n  \"Returns a function for converting a JS value into CLJS data structures, based on a schema.\"\n  [schema]\n  ;; TODO This should be a mc/coercer that decodes and then validates, throwing if it doesn't match.\n  ;; However, enabling that now breaks loads of tests that pass input data with lots of holes. The JS\n  ;; tests (as opposed to TS) are particularly bad for this.\n  ;; Don't forget the nested `mc/decoder` calls elsewhere in this file!\n  (mc/decoder schema js-transformer))\n\n(defn outgoing\n  \"Returns a function for converting a CLJS value back into a plain JS one, based on its schema.\"\n  [schema]\n  (mc/encoder schema js-transformer))\n"]}