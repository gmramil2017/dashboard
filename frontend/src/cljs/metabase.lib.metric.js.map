{"version":3,"sources":["metabase/lib/metric.cljc"],"mappings":"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","names":["metabase.lib.metric/resolve-metric","query","metric-id","cljs.core/integer?","metabase.lib.metadata/metric","p__81363","map__81365","cljs.core/--destructure-map","cljs.core.get","metabase.lib.metric/metric-definition","definition","_metric-metadata","metabase.lib.convert/legacy-query-from-inner-query","js/Number.MAX_SAFE_INTEGER","metabase.mbql.normalize/normalize","metabase.lib.convert/->pMBQL","metabase.lib.util/query-stage","metabase.lib.ref/ref-method","p__81372","map__81373","id","metric-metadata","effective-type","or__5045__auto__","temp__5804__auto__","aggregation","cljs.core/first","ag-effective-type","metabase.lib.schema.expression/type-of","cljs.core.isa_QMARK_","options","G__81382","cljs.core/random-uuid","cljs.core.assoc","metabase.lib.metadata.calculation/type-of-method","stage-number","vec__81385","cljs.core.nth","cljs.core/not-empty","metabase.lib.metadata.calculation.type_of","p__81393","vec__81394","_tag","_opts","metric-id-or-name","metabase.lib.metric/fallback-display-name","metabase.shared.util.i18n/js-i18n","metabase.lib.metadata.calculation/display-name-method","_query","_stage-number","_style","cljs.core.some_fn","p__81399","vec__81401","style","metabase.lib.metadata.calculation.display_name","metabase.lib.metric/aggregating-by-metric?","map__81409","aggregations","cljs.core/boolean","cljs.core/some","p__81412","vec__81414","tag","clause","cljs.core._EQ_","vec__81417","metabase.lib.metadata.calculation/display-info-method","p__81422","map__81423","description","cljs.core.merge","fexpr__81424","cljs.core/get-method","p__81430","vec__81431","temp__5802__auto__","metabase.lib.metadata.calculation.display_info","metabase.lib.metadata.calculation/column-name-method","p__81434","vec__81435","metabase.lib.metadata.calculation.column_name","metabase.lib.metric/available-metrics","source-table-id","metabase.lib.util/source-table-id","metabase.lib.metadata.protocols/metrics","metabase.lib.metadata/->metadata-provider"],"sourcesContent":["(ns metabase.lib.metric\n  \"A Metric is a saved MBQL query stage snippet with EXACTLY ONE `:aggregation` and optionally a `:filter` (boolean)\n  expression. Can be passed into the `:aggregation`s list.\"\n  (:require\n   [metabase.lib.convert :as lib.convert]\n   [metabase.lib.metadata :as lib.metadata]\n   [metabase.lib.metadata.calculation :as lib.metadata.calculation]\n   [metabase.lib.metadata.protocols :as lib.metadata.protocols]\n   [metabase.lib.ref :as lib.ref]\n   [metabase.lib.schema :as lib.schema]\n   [metabase.lib.schema.expression :as lib.schema.expression]\n   [metabase.lib.schema.id :as lib.schema.id]\n   [metabase.lib.util :as lib.util]\n   [metabase.mbql.normalize :as mbql.normalize]\n   [metabase.shared.util.i18n :as i18n]\n   [metabase.util.malli :as mu]))\n\n(defn- resolve-metric [query metric-id]\n  (when (integer? metric-id)\n    (lib.metadata/metric query metric-id)))\n\n(mu/defn ^:private metric-definition :- [:maybe ::lib.schema/stage.mbql]\n  [{:keys [definition], :as _metric-metadata} :- lib.metadata/MetricMetadata]\n  (when definition\n    (if (:mbql/type definition)\n      definition\n      ;; legacy; needs conversion\n      (->\n        ;; database-id cannot be nil, but gets thrown out\n        (lib.convert/legacy-query-from-inner-query #?(:clj Integer/MAX_VALUE :cljs js/Number.MAX_SAFE_INTEGER) definition)\n        mbql.normalize/normalize\n        lib.convert/->pMBQL\n        (lib.util/query-stage -1)))))\n\n(defmethod lib.ref/ref-method :metadata/metric\n  [{:keys [id], :as metric-metadata}]\n  (let [effective-type (or (:effective-type metric-metadata)\n                           (:base-type metric-metadata)\n                           (when-let [aggregation (first (:aggregation (metric-definition metric-metadata)))]\n                             (let [ag-effective-type (lib.schema.expression/type-of aggregation)]\n                               (when (isa? ag-effective-type :type/*)\n                                 ag-effective-type))))\n        options (cond-> {:lib/uuid (str (random-uuid))}\n                  effective-type (assoc :effective-type effective-type))]\n    [:metric options id]))\n\n(defmethod lib.metadata.calculation/type-of-method :metadata/metric\n  [query stage-number metric-metadata]\n  (or\n   (when-let [[aggregation] (not-empty (:aggregation (metric-definition metric-metadata)))]\n     (lib.metadata.calculation/type-of query stage-number aggregation))\n   :type/*))\n\n(defmethod lib.metadata.calculation/type-of-method :metric\n  [query stage-number [_tag _opts metric-id-or-name]]\n  (or (when-let [metric-metadata (resolve-metric query metric-id-or-name)]\n        (lib.metadata.calculation/type-of query stage-number metric-metadata))\n      :type/*))\n\n(defn- fallback-display-name []\n  (i18n/tru \"[Unknown Metric]\"))\n\n(defmethod lib.metadata.calculation/display-name-method :metadata/metric\n  [_query _stage-number metric-metadata _style]\n  (or ((some-fn :display-name :name) metric-metadata)\n      (fallback-display-name)))\n\n(defmethod lib.metadata.calculation/display-name-method :metric\n  [query stage-number [_tag _opts metric-id-or-name] style]\n  (or (when-let [metric-metadata (resolve-metric query metric-id-or-name)]\n        (lib.metadata.calculation/display-name query stage-number metric-metadata style))\n      (fallback-display-name)))\n\n(mu/defn ^:private aggregating-by-metric? :- :boolean\n  \"Whether a given stage of a query currently includes a `:metric` ref clause in its aggregations.\"\n  [query        :- ::lib.schema/query\n   stage-number :- :int\n   metric-id    :- ::lib.schema.id/metric]\n  (let [{aggregations :aggregation} (lib.util/query-stage query stage-number)]\n    (boolean\n     (some (fn [[tag :as clause]]\n             (when (= tag :metric)\n               (let [[_tag _opts id] clause]\n                 (= id metric-id))))\n           aggregations))))\n\n(defmethod lib.metadata.calculation/display-info-method :metadata/metric\n  [query stage-number {:keys [id description], :as metric-metadata}]\n  (merge\n   ((get-method lib.metadata.calculation/display-info-method :default) query stage-number metric-metadata)\n   {:description description}\n   (when (aggregating-by-metric? query stage-number id)\n     {:selected true})))\n\n(defmethod lib.metadata.calculation/display-info-method :metric\n  [query stage-number [_tag _opts metric-id-or-name]]\n  (if-let [metric-metadata (resolve-metric query metric-id-or-name)]\n    (lib.metadata.calculation/display-info query stage-number metric-metadata)\n    {:effective-type    :type/*\n     :display-name      (fallback-display-name)\n     :long-display-name (fallback-display-name)}))\n\n(defmethod lib.metadata.calculation/column-name-method :metric\n  [query stage-number [_tag _opts metric-id-or-name]]\n  (or (when-let [metric-metadata (resolve-metric query metric-id-or-name)]\n        (lib.metadata.calculation/column-name query stage-number metric-metadata))\n      \"metric\"))\n\n(mu/defn available-metrics :- [:maybe [:sequential {:min 1} lib.metadata/MetricMetadata]]\n  \"Get a list of Metrics that you may consider using as aggregations for a query. Only Metrics that have the same\n  `table-id` as the `source-table` for this query will be suggested.\"\n  [query :- ::lib.schema/query]\n  (when-let [source-table-id (lib.util/source-table-id query)]\n    (not-empty (lib.metadata.protocols/metrics (lib.metadata/->metadata-provider query) source-table-id))))\n"]}