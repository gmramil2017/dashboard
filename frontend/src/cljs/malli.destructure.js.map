{"version":3,"sources":["malli/destructure.cljc"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAKA,qCAAA,rCAAMA,kFAAYC;AAAlB,AAAqB,SAAI,AAACC,qBAAKD,QAAG,EAAK,AAACE,yBAASF,QAAG,AAACG,uBAAO,WAAKC;AAAL,AAAQ,SAAK,AAACC,wBAAQD,QAAG,6CAAA,7CAACE,iDAAI,AAACC,gBAAMH;GAAMJ;;AACvG,0CAAA,1CAAMQ,4FAAiBC;AAAvB,AAA0B,IAAAC,oBAAK,AAACC,mCAAmBF;AAAzB,AAAA,GAAAC;AAA4B,IAAAE,WAAA,eAAIH,fAAEK;IAAND,eAAA,iFAAA,YAAA;AAAA,AAAA,QAAAA,6CAAAA,2CAAAD,YAAAC,uBAAAD;;AAA5BF;;;AAC1B,AAAKK,4BAAQ,8BAAA,2CAAA,qDAAA,AAAA,+DAAA,sDAAA,mCAAA,tRAACC,2UAAuDjB;AACrE,AAAKkB,0BAAM,0BAAA,2CAAA,qDAAA,AAAA,2DAAA,rLAACC,0OAAsC,WAAKC;AAAL,AAAA;;AAElD,4BAAA,5BAAMC,gEAASC;AAAf,AACE,uDAAA,mFAAA,0DAAA,2CAAA,6DAAA,wCAAA,SAAA,SAAA,MAAA,MAAA,UAAA,UAAA,MAAA,YAAA,SAAA,OAAA,mFAAA,2EAAA,mFAAA,mDAAA,2CAAA,6GAAA,mFAAA,gDAAA,mFAAA,uDAAA,mFAAA,+CAAA,6DAAA,mFAAA,gGAAA,mFAAA,uDAAA,mFAAA,+CAAA,6DAAA,mFAAA,gGAAA,mFAAA,uDAAA,mFAAA,+CAAA,8DAAA,mFAAA,gGAAA,mFAAA,uDAAA,mFAAA,+CAAA,wDAAA,mFAAA,6HAAA,mFAAA,uDAAA,mFAAA,+CAAA,yDAAA,iBAAA,mFAAA,uDAAA,mFAAA,kGAAA,mFAAA,gGAAA,mFAAA,uDAAA,mFAAA,mDAAA,+DAAA,mFAAA,iDAAA,mFAAA,oDAAA,mFAAA,oDAAA,0BAAA,mFAAA,oDAAA,mFAAA,oDAAA,kBAAA,mFAAA,gDAAA,oBAAA,mFAAA,0DAAA,iCAAA,mFAAA,oDAAA,mFAAA,uDAAA,mFAAA,gDAAA,sBAAA,mFAAA,sDAAA,mFAAA,gDAAA,mFAAA,oDAAA,mFAAA,kDAAA,cAAA,mFAAA,oDAAA,8CAAA,mFAAA,kDAAA,mFAAA,oDAAA,iBAAA,mFAAA,mDAAA,cAAA,mFAAA,mDAAA,mFAAA,0DAAA,mFAAA,mDAAA,yCAAA,mFAAA,+CAAA,AAAA,iTAAA,mFAAA,oDAAA,mFAAA,uDAAA,mFAAA,gDAAA,sBAAA,mFAAA,sDAAA,mFAAA,gDAAA,mFAAA,oDAAA,mFAAA,kDAAA,cAAA,mFAAA,oDAAA,sCAAA,mFAAA,iDAAA,mFAAA,gDAAA,mFAAA,oDAAA,mFAAA,iDAAA,aAAA,mFAAA,oDAAA,iBAAA,mFAAA,0DAAA,mFAAA,gDAAA,mFAAA,oDAAA,mFAAA,gDAAA,oBAAA,mFAAA,0DAAA,yEAAA,mFAAA,+CAAA,mEAAA,zzUAACC,2tBAEsBC,pLAGMC,gyNACH,kCAAA,mFAAA,+CAAA,lJAAIH,0MAAuBJ,huNAChCF,knBAE6BU,4fACAA,6fACAA,ufACFC,+BAAeH,0oBAE5Bf,4LAA0BiB,yUACdF;;AA8BjD,AAAKI,4BAAQ,0BAAA,1BAACP;AACd,AAAKQ,uCAAmB,0BAAA,1BAACR;AAEzB,AAAA,AAEA,gCAAA,hCAAMS,wEAAO7B;AAAb,AAAgB,oDAAA,7CAACM,gGAAON;;AACxB,kCAAA,lCAAM8B,4EAAS9B;AAAf,AAAkB,SAAK,AAACK,wBAAQL,QAAG,6CAAA,7CAACM,oGAAS,AAACyB,gBAAM/B;;AAEpD,4BAAA,oCAAAgC,hEAAMI,yEAAiCI;AAAvC,AAAA,IAAAP,aAAAD;IAAAC,iBAAA,AAAAC,4BAAAD;SAAA,AAAAE,4CAAAF,eAAA,hEAAuBI;YAAvB,AAAAF,4CAAAF,eAAA,nEAA0BK;WAA1B,AAAAH,4CAAAF,eAAA,lEAAgCM;AAAhC,AACE,IAAAE,mBAAI,iBAAAC,WAASL;IAATK,eAAA,EAAA,CAAAA,YAAA,OAAA,KAAA,AAAA,wFAAAA;IAAAA,eAAA,EAAA,CAAAA,gBAAA,OAAA,KAAA,AAAA,wFAAAA;AAAA,AAAA,GAAA,CAAAA,gBAAA;AAAA;;AAA4B,oDAAA,mFAAA,kEAAAA,lMAACC;;;AAAjC,AAAA,oBAAAF;AAAAA;;AACI,IAAMG,MAAI,4CAAA,WAAAC,vDAACC;AAAD,AAAM,IAAMC,IAAE,yHAAAF,yBAAA,gDAAAA,yBAAA,1NAACG,6DAAAA,6FAAAA,jBAAaR,yEAAAA;AAAtB,AAAsC,IAAAS,WAASF;AAAT,AAAA,GAAW,GAAK,AAACjB,gCAAQiB;AAAI,oDAAA,mFAAA,wDAAAE,xLAACN;;AAA9BM;;GAA2CX;IAC3FY,KAAG,kBAAIX,MAAK,iBAAAY,WAAY,AAAA,kFAAMZ;IAAlBa,WAAwBZ;IAAxBa,WAAA;AAAA,AAAA,gIAAAF,SAAAC,SAAAC,mDAAAF,SAAAC,SAAAC,/MAACL,6DAAAA,yFAAAA;KAAV,mFAAA,gDAAA;AADT,AAAA,0FAAA,uDAEU,wQAAA,mFAAA,zVAAI,AAACM,cAAIV,mDAAgB,6CAAA,mFAAA,hIAACW,4LAAKX,zOAAK,AAACD,8OAAKO,2IAAWA;;;AAErE,oCAAA,pCAAMM,gFAAiBC;AAAvB,AACE,IAAAC,qBAAA,0DAAAC;AAAA,AAAA,YAAAC,kBAAA,KAAA;AAAA,AAAA,IAAAD,eAAAA;;AAAA,AAAA,IAAAE,qBAAA,AAAAP,cAAAK;AAAA,AAAA,GAAAE;AAAA,AAAA,IAAAC,mBAAAD;AAAA,AAAA,IAAAE,aAAA,AAAAhC,gBAAA+B;QAAA,AAAAE,4CAAAD,WAAA,IAAA,/DAAOtD;SAAP,AAAAuD,4CAAAD,WAAA,IAAA,hEAASqB;AAAT,AAAA,oBACY,AAAC5E,wCAAgBC;AAD7B,IAEY4E,IAAE,iBAAAC,WAAiC,AAACxE,eAAKL;IAAvC8E,eAAA,2CAAA,yBAAA,lBAASC,yBAAgBC;AAAzB,AAAA,QAAAF,6CAAAA,2CAAAD,YAAAC,uBAAAD;;AAFd,AAAA,oBAGYD;AAHZ,IAAApB,uBAAA;+EAAAC;AAAA,AAAA,YAAAN,kBAAA,KAAA;;AAAA,AAAA,IAAAM,eAAAA;;AAAA,AAAA,IAAAL,yBAAA,AAAAP,cAAAY;AAAA,AAAA,GAAAL;AAAA,AAAA,IAAAK,eAAAL;AAAA,AAAA,GAAA,AAAAM,6BAAAD;AAAA,IAAAE,kBAq4EiD,AAAAkH,sBAAApH;IAr4EjDG,qBAAA,AAAA9D,gBAAA6D;IAAAE,WAAA,AAAAC,uBAAAF;AAAA,AAAA,GAAA,AAAA,iBAAAG,WAAA;;AAAA,AAAA,GAAA,CAAAA,WAAAH;AAAA,QAAA,AAAAI,eAAAL,gBAAAI,nCAGekB;AAHf,AAAA,AAAA,AAAAhB,uBAAAJ,SAGqB,iBAAAqB,WAAG,AAACI,oBAAUtF;IAAdmF,WAAiB,4CAAKF;AAAtB,AAAA,0EAAAC,SAAAC,wBAAAD,SAAAC,5GAACP,kCAAAA,qDAAAA;;;AAHtB,eAAA,CAAAb,WAAA;;;;AAAA;;;;;AAAA,OAAAG,qBAAA,AAAAC,gBAAAN,UAAA,AAAAO,8DAAA,AAAAC,qBAAAZ;;AAAA,OAAAS,qBAAA,AAAAC,gBAAAN,UAAA;;;AAAA,QAAA,AAAAvC,gBAAAmC,pBAGewB;AAHf,AAAA,OAAAX,eAGqB,iBAAAc,WAAG,AAACE,oBAAUtF;IAAdqF,WAAiB,4CAAKJ;AAAtB,AAAA,0EAAAG,SAAAC,wBAAAD,SAAAC,5GAACT,kCAAAA,qDAAAA;KAHtB,AAAAR,8DAAA,AAAAG,eAAAd;;;AAAA;;;;;CAAA,KAAA;;;IAAAe,mBAAA,AAAA3B,cAAA,AAAAW,qBAGiBmB;AAHjB,AAAA,GAAAH;AAAA,OAAAC,+CAAAD,iBAAA,AAAAE,gDAAA,AAAAH,eAAArB;;AAAA,eAAA,AAAAqB,eAAArB;;;;;AAAA,eAAA,AAAAqB,eAAArB;;;;;AAAA,eAAA,AAAAqB,eAAArB;;;;;AAAA;;;;GAAA,KAAA;;AAAA,AAAA,OAAAD,mBAAaD;;AAKf,0BAAA,kCAAAuC,SAAAC,rEAAMI;AAAN,AAAA,IAAAH,aAAAF;IAAAE,iBAAA,AAAAhE,4BAAAgE;UAAAA,NAAyCO;WAAzC,AAAAtE,4CAAA+D,eAAA,lEAAqBI;WAArB,AAAAnE,4CAAA+D,eAAA,lEAA0BK;WAA1B,AAAApE,4CAAA+D,eAAA,lEAA+BM;IAA/BL,aAAAF;IAAAE,iBAAA,AAAAjE,4BAAAiE;cAAAA,VAA8F3D;IAA9F4D,aAAA,AAAAjE,4CAAAgE,eAAA,kGAAA;AAAA,AACE,IAAMO,MAAI,WAAKrB,EAAEsB;AAAP,AAAW,OAAC7D,4CAAI,WAAKrC;AAAL,AAAA,kLAAA,xFAAS,CAAC4E,kCAAAA,qCAAAA,LAAE5E,iBAAAA;GAAUkG;;AAAhD,wDACO,AAACzB,sDAAO,AAACwB,IAAIlB,kBAAQc,MAAM,AAACI,IAAIE,cAAIL,wDAAM,AAACG,IAAIG,mBAASL,MAChD,AAAC1D,4CAAI,WAAKrC,xSAElB,OAAC8G;AAFY,AAAA,0FAAS9G,EAAE,kBAAI,iBAAAC,oBAAK0F;AAAL,AAAA,oBAAA1F;AAAgB,OAACC,mCAAmBF;;AAApCC;;QAAJ,FAA4CD;GAAU,AAAC+C,kCAAgBiD,MACvF,AAAC3D,4CAAI,WAAAgE;AAAA,AAAA,IAAAC,aAAAD;QAAA,AAAA9C,4CAAA+C,WAAA,IAAA,/DAAMtG;QAAN,AAAAuD,4CAAA+C,WAAA,IAAA,/DAAQrB;AAAR,AAAA,0FAAaA,EAAE,iBAAAsB,WAAA,2CAAA,oDAAkBvG;IAAlBwG,WAAqBzE;IAArB0E,WAAA;AAAA,AAAA,gIAAAF,SAAAC,SAAAC,mDAAAF,SAAAC,SAAAC,/MAAClE,6DAAAA,yFAAAA;;GAAqC,+CAAA,WAAAmE,1DAACC;AAAD,AAAS,OAACC,+BAAa,cAAAF,dAACG;GAAQb;;AAG3G,yBAAA,qCAAAe,9DAAMK,0DAAMpB,aAC8DlE;AAD1E,AAAA,IAAAkF,aAAAD;IAAAC,iBAAA,AAAAvF,4BAAAuF;cAAAA,VACiEjF;IADjE4D,aAAA,AAAAjE,4CAAAsF,eAAA,kGAAA;IAAAC,gBAAA,AAAAvF,4CAAAsF,eAAA;IAAAE,cAAA,AAAAxF,4CAAAsF,eAAA;IAAAG,kBAAA,AAAAzF,4CAAAsF,eAAA,6GAAA;AAAA,AAEE,IAAMnB,OAAK,AAACD,wBAAMI,IAAIjE;IAChBsF,aAAQ,WAAAC;AAAA,AAAA,IAAAC,aAAAD;QAAA,AAAA/D,4CAAAgE,WAAA,IAAA,/DAAMvH;QAAN,AAAAuD,4CAAAgE,WAAA,IAAA,/DAAQC;AAAR,AAAY,IAAMC,MAAI,iBAAAxH,oBAAK0F;AAAL,AAAA,oBAAA1F;AAAgB,OAACC,mCAAmBF;;AAApCC;;;AAAV,AACE,oBAAM,iBAAAA,oBAAKwH;AAAL,AAAA,oBAAAxH;AAASgH;;AAAThH;;;AAAwBD;;AAA9B,oBACMiH;AADN,0FACqBjH,EAAEwH;;AADvB,AAEY,IAAAE,WAAA,qFAAA,2CAAA,6DAAA,1GAAS1H;AAAT,AAAA,GAA6B,AAAC2H,cAAIF;AAAK,oDAAAC,7CAACxF,sDAAKsF;;AAA7CE;;;;;;IAClCE,WAAM,WAAAC;AAAA,AAAA,IAAAC,aAAAD;QAAA,AAAAtE,4CAAAuE,WAAA,IAAA,/DAAM9H;QAAN,AAAAuD,4CAAAuE,WAAA,IAAA,/DAAQN;AAAR,AAAA,0FAAA,oDAAA,mFAAA,+CAAsBxH,UAAG,kBAAI,iBAAAC,oBAAK0F;AAAL,AAAA,oBAAA1F;AAAgB,OAACC,mCAAmBF;;AAApCC;;MAAwCD,EAAEwH;;IAC7EO,aAAO,iBAAAC,WAAA,mFAAA;IAAAA,eAAA,uMAAAA,rLAAed,aAAY,6CAAAc,SAAA,2CAAA,yDAAA,1JAAC9F;AAA5B,AAAA,AAAyD,oDAAA8F,7CAAClF,0DAAK,AAACT,4CAAIgF,WAAQxB;;;AANzF,AAOE,oBAAI,iBAAA7D,mBAAIF;AAAJ,AAAA,oBAAAE;AAAAA;;AAASmF;;;AAAb,0FAAA,qDAAA,mFAAA,sEAAA,mFAAA,tGACeY,mNAAmB,6CAAA,mFAAA,hIAACjF,yLAAY,AAACT,4CAAIuF,SAAM/B,1QACxB,iBAAAoC,7CACA,iBAAAC;AADA,AAAA,GAAQ,AAACP,cAAIT;AAAa,oDAAAe,SAAA,mFAAA,oDAAA,mDAAA,hPAAC/F;;AAA3B+F;;;IACAC,eAAA,AAAiB,6CAAA,mFAAA,wDAAAA,xLAAChG;;AAAlB,AAAA,GAA6B,AAACyF,cAAI7F;AAAM,oDAAA,mFAAA,kEAAAoG,lMAAChG;;AAAzCgG;;;;AAChCH;;;AAEN,+BAAA,uCAAAI,tEAAM5F,+EAAgDR,QAAQD;AAA9D,AAAA,IAAAsG,aAAAD;IAAAC,iBAAA,AAAA3G,4BAAA2G;UAAAA,NAAiDE;IAAjDD,aAAA,AAAA3G,4CAAA0G,eAAA;QAAA,AAAA7E,4CAAA8E,WAAA,IAAA,/DAAoBrI;QAApB,AAAAuD,4CAAA8E,WAAA,IAAA,/DAAsBpD;iBAAtB,AAAAvD,4CAAA0G,eAAA,xEAA8BL;AAA9B,AACE,oBAAM,iBAAA9H,oBAAK8H;AAAL,AAAA,oBAAA9H;AAAY6B;;AAAZ7B;;;AAAkB,IAAMqC,IAAE,qIAAA,4DAAA,hMAACC,6DAAAA,gFAAAA,rBAAW+F,4DAAAA,xDAAIvG,4DAAAA;AAAxB,AAAwC,GAAI,AAACX,8BAAMkB;AAAGyF;;AAAOzF;;;AAArF,oBACMyF;AAAOA;;AADb,GAEM,6CAAA,7CAAClI,gGAAOG;AAAG,OAAC2B,0BAAQsD,EAAElD;;AAF5B,GAGM,6CAAA,7CAAClC,gGAAOG;AAAG,OAACoH,uBAAKnC,EAAElD,QAAQD;;AAHjC,oBAIMA;AAJN,0FAAA,gDAAA;;AAAA,AAAA;;;;;;;;AAOF,4BAAA,oCAAAyG,hEAAME,yEAA8B1G;AAApC,AAAA,IAAAyG,aAAAD;IAAAC,iBAAA,AAAA/G,4BAAA+G;YAAA,AAAA9G,4CAAA8G,eAAA,nEAAuB3G;WAAvB,AAAAH,4CAAA8G,eAAA,lEAA6B1G;AAA7B,AACE,IAAA4G,WAAA;IAAAA,eAAA,kBACE,iBAAA1G,mBAAI,AAACa,cAAIhB;AAAT,AAAA,GAAAG;AAAAA;;AAAgBF;;yGADlB4G,nGACwB,KAAAC,2BAAA,KAAA,EAAA,IAAA,AAAAA,sCAAA,CAAAD,UAAA;IADxBA,eAAA,EAEE,AAAC7F,cAAIhB,QAAO,6CAAA6G,7CAAC5F,0DAAK,4CAAA,WAAA8F,vDAACvG;AAAD,AAAM,oCAAAuG,yBAAA,tDAACrG,8CAAaR;WAFxC2G,RAEuD7G;AAFvD,AAAA,oBAGEC;AAAK,oDAAA4G,7CAACxG,0DAAK,6HAAA,7HAACK,6BAAW,AAAA,kFAAMT,MAAMC;;AAHrC2G;;;AAKF,kCAAA,lCAAMG,4EAAetJ;AAArB,AACE,4BAAA,WAAAuJ,hCAACC;AAAD,AAAe,IAAAC,WAAAF;AAAA,AAAA,oBAAU,iBAAA7I,oBAAK,qBAAA6I,rBAACtJ;AAAN,AAAA,GAAAS;AAAc,OAAA,8EAAA6I;;AAAd7I;;;AAAsB,6DAAA+I,SAAA,kGAAA,jKAACC;;AAAjCD;;GAAqDzJ;;AAEtE,AAAA,qCAAA,6CAAA2J,lFAAME;AAAN,AAAA,IAAAD,WAAA,AAAA;AAAA,AAAA,QAAAA;KAAA;AAAA,OAAAC,iEAAA,CAAA,UAAA;;;KAAA;AAAA,OAAAA,iEAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;;AAAA,MAAA,KAAAC,MAAA,CAAA,8DAAA,AAAA;;;;;AAAA,CAAA,mEAAA,nEAAMD,8EACFE;AADJ,AACc,iFAAA,1EAACC,iEAAiBD;;;AADhC,CAAA,mEAAA,nEAAMF,8EAEFE,SAASvH;AAFb,AAGG,IAAMyH,cAAS,WAAKC;AAAL,AAAA,0FAAA,iLAAA,hIAAmB,AAAChB,0BAAQ,AAACiB,+CAAQvI,qCAAmBsI,SAAS1H;;AAAhF,AACE,QAAM,AAACM,4CAAImH,YAASF,5DAAUK;AAA9B,AAAgC,GAAI,AAACC,eAAKD;AAAG,oDAAA,mFAAA,hIAAC7G,sMAAiB6G;;AAAG,OAACrI,gBAAMqI;;;;AAJ9E,CAAA,6DAAA,7DAAMP;;AAAN,AAUA,AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;0BAAA,kCAAAF,5DAAMY;AAAN,AAAA,IAAAD,WAAA,AAAA;AAAA,AAAA,QAAAA;KAAA;AAAA,OAAAC,sDAAA,CAAA,UAAA;;;KAAA;AAAA,OAAAA,sDAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;;AAAA,MAAA,KAAAT,MAAA,CAAA,8DAAA,AAAA;;;;;AAAA,CAAA,wDAAA,xDAAMS,mEA8BFL;AA9BJ,AA8Ba,qEAAA,9DAACQ,sDAAMR;;;AA9BpB,CAAA,wDAAA,mBAAAM,3EAAMD,mEA+BFL;AA/BJ,AAAA,IAAAO,aAAAD;IAAAC,iBAAA,AAAAvI,4BAAAuI;cAAAA,VA+BoEjI;IA/BpEnB,iBAAA,AAAAc,4CAAAsI,eAAA,0GAAA;AAAA,AAgCG,IAAME,eAAa,kBAAItJ,gBAAeO,qCAAmBD;IACnDiJ,SAAO,AAACT,+CAAQQ,aAAaT;IAC7BW,kIAAcD,hCAAO,AAACtB,3EAAe,AAACwB,iDAAUnJ;IAChDoJ,sBAAQ,AAAC7B,0BAAQ0B,OAAOpI;AAH9B,AAIE,GAAM,6CAAA,7CAAClC,0HAAcuK;AAArB,AAA+B,qDAAA,4GAAA,2CAAA,5MAACG,wQAAqCd;;AAArE;;AAJF,kDAAA,2EAAA,gEAAA,iFAAA,zJAKgBA,iEAAiBU,mEAAiBC,+EAAkBE;;;AArCvE,CAAA,kDAAA,lDAAMR;;AAAN,AAuCA,AAAA;;;0BAAA,kCAAAZ,5DAAMuB;AAAN,AAAA,IAAAD,WAAA,AAAA;AAAA,AAAA,QAAAA;KAAA;AAAA,OAAAC,sDAAA,CAAA,UAAA;;;KAAA;AAAA,OAAAA,sDAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;;AAAA,MAAA,KAAApB,MAAA,CAAA,8DAAA,AAAA;;;;;AAAA,CAAA,wDAAA,xDAAMoB,mEAEFC;AAFJ,AAES,kEAAA,3DAACC,sDAAMD;;;AAFhB,CAAA,wDAAA,xDAAMD,mEAGFC,KAAI3I;AAHR,kLAGqB2I,fAAIE,nKAAe,wEAAA,AAAA,2FAAA,5JAACrB,kLAAiBxH;;;AAH1D,CAAA,kDAAA,lDAAM0I;;AAAN","names":["malli.destructure/-map-like?","x","cljs.core/map?","cljs.core/seqable?","cljs.core/every?","e","cljs.core/vector?","cljs.core._EQ_","cljs.core/count","malli.destructure/-qualified-key?","k","and__5043__auto__","cljs.core/qualified-keyword?","G__52331","fexpr__52330","cljs.core/name","malli.destructure/MapLike","malli.core/-collection-schema","malli.destructure/Never","malli.core/-simple-schema","_","malli.destructure/-create","inline-schemas","malli.core.schema","cljs.core/any?","cljs.core/symbol?","cljs.core/ident?","cljs.core/simple-symbol?","malli.destructure/Binding","malli.destructure/SchematizedBinding","malli.destructure/-any?","malli.destructure/-maybe?","cljs.core/first","p__52347","map__52348","cljs.core/--destructure-map","cljs.core.get","malli.destructure/-vector","as","elems","rest","options","or__5045__auto__","G__52349","cljs.core.conj","ess","p1__52343#","cljs.core.map","s","malli.destructure/-transform","G__52354","rs","G__52358","G__52359","G__52360","cljs.core/seq","cljs.core.into","malli.destructure/-qualified-keys","m","iter__5523__auto__","s__52365","cljs.core/LazySeq","temp__5804__auto__","xs__6360__auto__","vec__52370","cljs.core.nth","iterys__5519__auto__","s__52367","cljs.core/chunked-seq?","c__5521__auto__","size__5522__auto__","b__52369","cljs.core/chunk-buffer","i__52368","cljs.core/-nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__52366","cljs.core/chunk-rest","cljs.core/cons","cljs.core/rest","fs__5520__auto__","cljs.core.concat","iter__52364","vs","f","G__52374","fexpr__52373","cljs.core/keyword","cljs.core/symbol","v","G__52432","G__52433","G__52436","G__52437","cljs.core/namespace","p__52443","p__52444","map__52445","map__52446","references","malli.destructure/-keys","keys","strs","syms","arg","any","ks","cljs.core/str","cljs.core/identity","p__52449","vec__52450","G__52453","G__52455","G__52456","p1__52438#","cljs.core.filter","malli.impl.util/-tagged?","cljs.core/key","cljs.core.distinct","p__52457","map__52458","required-keys","closed-maps","sequential-maps","malli.destructure/-map","->entry","p__52466","vec__52467","t","ref","G__52473","cljs.core/not","->arg","p__52474","vec__52475","schema","G__52481","G__52543","G__52542","p__52546","map__52547","vec__52548","all","p__52578","map__52579","malli.destructure/-schema","G__52582","cljs.core/PersistentVector","p1__52577#","malli.destructure/-unschematize","p1__52600#","clojure.walk/prewalk","G__52608","cljs.core.dissoc","var_args","G__52627","malli.destructure/-function-schema","js/Error","arglists","malli.destructure._function_schema","->schema","arglist","malli.core.parse","$","cljs.core/next","G__52639","malli.destructure/parse","p__52680","map__52681","malli.destructure.parse","parse-scheme","parsed","arglist'","malli.core.unparse","schema'","malli.core._fail_BANG_","G__52689","malli.destructure/infer","var","malli.destructure.infer","cljs.core/meta","cljs.core/chunk-first"],"sourcesContent":["(ns malli.destructure\n  (:require [clojure.walk :as walk]\n            [malli.core :as m]\n            [malli.impl.util :as miu]))\n\n(defn -map-like? [x] (or (map? x) (and (seqable? x) (every? (fn [e] (and (vector? e) (= 2 (count e)))) x))))\n(defn -qualified-key? [k] (and (qualified-keyword? k) (-> k name #{\"keys\" \"syms\"})))\n(def MapLike (m/-collection-schema {:type 'MapLike, :empty {}, :pred -map-like?}))\n(def Never (m/-simple-schema {:type 'Never, :pred (fn [_] false)}))\n\n(defn -create [inline-schemas]\n  (m/schema\n   [:schema\n    {:registry {\"Schema\" any?\n                \"Amp\" [:= '&]\n                \"As\" [:= :as]\n                \"Symbol\" [:and symbol? [:not \"Amp\"]]\n                \"Separator\" (if inline-schemas [:= :-] Never)\n                \"Map\" [MapLike\n                       [:or\n                        [:tuple [:= :keys] [:vector ident?]]\n                        [:tuple [:= :strs] [:vector ident?]]\n                        [:tuple [:= :syms] [:vector ident?]]\n                        [:tuple [:= :or] [:map-of simple-symbol? any?]]\n                        [:tuple [:= :as] \"Symbol\"]\n                        [:tuple [:fn -qualified-key?] [:vector ident?]]\n                        [:tuple [:ref \"ArgType\"] any?]]]\n                \"Vector\" [:catn\n                          [:elems [:* \"Arg\"]]\n                          [:rest [:? [:catn\n                                      [:amp \"Amp\"]\n                                      [:arg \"Arg\"]]]]\n                          [:as [:? [:catn\n                                    [:as \"As\"]\n                                    [:sym \"Symbol\"]\n                                    [:schema [:? [:catn\n                                                  [:- \"Separator\"]\n                                                  [:schema \"Schema\"]]]]]]]]\n                \"ArgType\" [:orn\n                           [:sym \"Symbol\"]\n                           [:map \"Map\"]\n                           [:vec [:schema [:ref \"Vector\"]]]]\n                \"Arg\" [:alt\n                       [:catn\n                        [:arg \"ArgType\"]]\n                       [:catn\n                        [:arg \"ArgType\"]\n                        [:- \"Separator\"]\n                        [:schema \"Schema\"]]]\n                \"Binding\" [:catn\n                           [:elems [:* \"Arg\"]]\n                           [:rest [:? [:catn\n                                       [:amp \"Amp\"]\n                                       [:arg \"Arg\"]]]]]}}\n    \"Binding\"]))\n\n(def Binding (-create false))\n(def SchematizedBinding (-create true))\n\n(declare -transform)\n\n(defn -any? [x] (= :any x))\n(defn -maybe? [x] (and (vector? x) (= :maybe (first x))))\n\n(defn -vector [{:keys [as elems rest]} options]\n  (or (some->> as :schema :schema (conj [:schema]))\n      (let [ess (map #(let [s (-transform % options false)] (cond->> s (not (-maybe? s)) (conj [:?]))) elems)\n            rs (if rest (-transform (:arg rest) options true) [:* :any])]\n        [:maybe (if (seq ess) (-> [:cat] (into ess) (conj rs)) [:cat rs])])))\n\n(defn -qualified-keys [m]\n  (for [[k vs] m\n        :when (-qualified-key? k)\n        :let [f ({\"keys\" keyword, \"syms\" symbol} (name k))]\n        :when f, v vs] (f (namespace k) (str v))))\n\n(defn -keys [{:keys [keys strs syms] :as arg} {:keys [::references] :or {references true} :as options}]\n  (let [any (fn [f ks] (map (fn [k] [(f k) :any]) ks))]\n    (->> (concat (any keyword keys) (any str strs) (any identity syms)\n                 (map (fn [k] [k (if (and references (qualified-keyword? k)) k :any)]) (-qualified-keys arg))\n                 (map (fn [[k v]] [v (-transform {:arg k} options false)]) (filter #(miu/-tagged? (key %)) arg)))\n         (distinct))))\n\n(defn -map [arg {:keys [::references ::required-keys ::closed-maps ::sequential-maps]\n                 :or {references true, sequential-maps true} :as options} rest]\n  (let [keys (-keys arg options)\n        ->entry (fn [[k t]] (let [ref (and references (qualified-keyword? k))]\n                              (cond (and ref required-keys) k\n                                    required-keys [k t]\n                                    :else (cond-> [k {:optional true}] (not ref) (conj t)))))\n        ->arg (fn [[k t]] [:cat [:= k] (if (and references (qualified-keyword? k)) k t)])\n        schema (cond-> [:map] closed-maps (conj {:closed true}) :always (into (map ->entry keys)))]\n    (if (or rest sequential-maps)\n      [:altn [:map schema] [:args (-> (into [:alt] (map ->arg keys))\n                                      (cond-> (not closed-maps) (conj [:cat :any :any]))\n                                      (cond->> :always (conj [:*]) (not rest) (conj [:schema])))]]\n      schema)))\n\n(defn -transform [{[k v] :arg schema :schema :as all} options rest]\n  (cond (and schema rest) (let [s (-transform all options false)] (if (-any? s) schema s))\n        schema schema\n        (= :vec k) (-vector v options)\n        (= :map k) (-map v options rest)\n        rest [:* :any]\n        :else :any))\n\n(defn -schema [{:keys [elems rest]} options]\n  (cond-> :cat\n    (or (seq elems) rest) (vector)\n    (seq elems) (into (map #(-transform % options false) elems))\n    rest (conj (-transform (:arg rest) options true))))\n\n(defn -unschematize [x]\n  (walk/prewalk #(cond-> % (and (map? %) (:- %)) (dissoc :- :schema)) x))\n\n(defn -function-schema\n  ([arglists] (-function-schema arglists nil))\n  ([arglists options]\n   (let [->schema (fn [arglist] [:=> (-schema (m/parse SchematizedBinding arglist) options) :any])]\n     (as-> (map ->schema arglists) $ (if (next $) (into [:function] $) (first $))))))\n\n;;\n;; public api\n;;\n\n(defn parse\n  \"Takes a destructuring bindings vector (arglist)\n   and returns a map with keys:\n\n   | key            | description |\n   | ---------------|-------------|\n   | `:raw-arglist` | the original arglist (can have type-hints)\n   | `:arglist`     | simplified clojure arglist (no type-hints)\n   | `:schema`      | extracted malli schema\n   | `:parsed`      | full parse results\n\n   Parsing can be configured using the following options:\n\n   | key                    | description |\n   | -----------------------|-------------|\n   | `::md/inline-schemas`  | support plumatic-style inline schemas (true)\n   | `::md/sequential-maps` | support sequential maps in non-rest position (true)\n   | `::md/references`      | qualified schema references used (true)\n   | `::md/required-keys`   | destructured keys are required (false)\n   | `::md/closed-maps`     | destructured maps are closed (false)\n\n   Examples:\n\n      (require '[malli.destructure :as md])\n\n      (-> '[a b & cs] (md/parse) :schema)\n      ; => [:cat :any :any [:* :any]]\n\n      (-> '[a :- :string, b & cs :- [:* :int]] (md/parse) :schema)\n      ; => [:cat :string :any [:* :int]]\"\n  ([arglist] (parse arglist nil))\n  ([arglist {:keys [::inline-schemas] :or {inline-schemas true} :as options}]\n   (let [parse-scheme (if inline-schemas SchematizedBinding Binding)\n         parsed (m/parse parse-scheme arglist)\n         arglist' (->> parsed (-unschematize) (m/unparse Binding))\n         schema' (-schema parsed options)]\n     (when (= ::m/invalid arglist') (m/-fail! ::invalid-arglist {:arglist arglist}))\n     {:raw-arglist arglist, :parsed parsed, :arglist arglist', :schema schema'})))\n\n(defn infer\n  \"Infers a schema from a function Var. Best effort.\"\n  ([var] (infer var nil))\n  ([var options] (-> var meta :arglists (-function-schema options))))\n"],"x_google_ignoreList":[0]}