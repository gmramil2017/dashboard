{"version":3,"sources":["metabase/util/humanization.cljc"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAKA,GAAA,QAAAA,qCAAAC,0CAAAC,uDAAAC;AAAA;AAAA,AAAA;;;;;;;;0DAAA,iBAAAC,6BAAA,AAAAC,6CAAA,rJAAUS;IAAVR,6BAAA,AAAAD,6CAAA;IAAAE,6BAAA,AAAAF,6CAAA;IAAAG,iCAAA,AAAAH,6CAAA;IAAAI,0BAAA,AAAAC,4CAAA,mCAAA,gEAAA,iBAAAC,eAAA;AAAA,AAAA,QAAAA,6CAAAA,+CAAAA;;AAAA,AAAA,YAAAC,kBAAA,AAAAC,+CAAA,6BAAA,6BAQE,WAAKE,SAASC;AAAd,AACE,OAACC,gDAAQF;GATb,4DAAAN,wBAAAL,2BAAAE,2BAAAC,2BAAAC;;;AAWA,sCAAA,iFAAA,WAAA,UAAA,WAAA,YAAA,UAAA,7KAAuBU;AAGvB,6CAAA,7CAAOC,kGAAiBC;AAAxB,AACE,GAAI,AAACC,0BAAUH,AAAA,kKAAS,AAACI,4BAAgBF;AACvC,OAACG,4BAAgBH;;AAEjB,GAAI,AAACI,6CAAEJ,KAAK,AAACG,4BAAgBH;AAC3B,OAACK,0BAAeL;;AAChB,QAAK,AAACK,0BAAe,kDAAA,IAAA,tDAACC,6CAAKN,eAAW,kDAAA,lDAACM,6CAAKN;;;;AAGlD,AAAAN,oGAAA,yDAAA,WACGa,UAAUC;AADb,AAGE,GAAM,AAACC,cAAID;AAAX,AACE,IAAME,YAAU,kDAAA,lDAACC,sDAAa,iBAAAC,qBAAA,iDAAAC;AAAA,AAAA,YAAAC,kBAAA,KAAA;AAAA,AAAA,IAAAD,eAAAA;;AAAA,AAAA,IAAAE,qBAAA,AAAAN,cAAAI;AAAA,AAAA,GAAAE;AAAA,AAAA,IAAAF,eAAAE;AAAA,AAAA,GAAA,AAAAC,6BAAAH;AAAA,IAAAI,kBA46EiB,AAAAoB,sBAAAxB;IA56EjBK,qBAAA,AAAAC,gBAAAF;IAAAG,WAAA,AAAAC,uBAAAH;AAAA,AAAA,GAAA,AAAA,iBAAAI,WAAA;;AAAA,AAAA,GAAA,CAAAA,WAAAJ;AAAA,WAAA,AAAAK,eAAAN,gBAAAK,tCAAMU;AAAN,AAAA,GACY,GAAK,AAACE,4BAAWF;AAD7B,AAAA,AAAAR,uBAAAJ,SAEE,AAACrB,2CAAgBiC;;AAFnB,eAAA,CAAAV,WAAA;;;;AAAA,eAAA,CAAAA,WAAA;;;;;AAAA;;;;;AAAA,OAAAG,qBAAA,AAAAC,gBAAAN,UAAA,AAAAO,uCAAA,AAAAC,qBAAAf;;AAAA,OAAAY,qBAAA,AAAAC,gBAAAN,UAAA;;;AAAA,WAAA,AAAAS,gBAAAhB,vBAAMmB;AAAN,AAAA,GACY,GAAK,AAACE,4BAAWF;AAD7B,OAAAF,gEAAA,AAAAH,uCAAA,AAAAI,eAAAlB,vGAEE,AAACd,2CAAgBiC;;AAFnB,eAAA,AAAAD,eAAAlB;;;;;;AAAA;;;;GAAA,KAAA;;AAAA,AAAA,OAAAD,mBAAY,qDAAA,rDAACqB,mDAAUzB;;AAArD,AAGE,GAAI,AAAC0B,4BAAWxB;AACdF;;AACAE;;;AANN;;;AASF,AAAAhB,oGAAA,qDAAA,WACGa,UAAUC;AADb,AAEEA;;AAIF,AAAAd,oGAAA,6DAAA,WACGC,SAASa;AADZ,AAEE,IAAA2B,eAAC,6EAAA,7EAACC,qBAAW1C;AAAb,AAAA,QAAAyC,6CAAAA,yDAAAA,dAAgDxC,qCAAAA,5BAASa,qCAAAA","names":["js/metabase","js/metabase.util","js/metabase.util.humanization","js/metabase.util.humanization.name->human-readable-name","method-table__5642__auto__","cljs.core.atom","prefer-table__5643__auto__","method-cache__5644__auto__","cached-hierarchy__5645__auto__","hierarchy__5646__auto__","cljs.core.get","fexpr__80005","cljs.core/MultiFn","cljs.core.symbol","metabase.util.humanization/name->human-readable-name","strategy","_s","cljs.core.keyword","metabase.util.humanization/acronyms","metabase.util.humanization/capitalize-word","word","cljs.core/contains?","metabase.util/lower-case-en","metabase.util/upper-case-en","cljs.core._EQ_","clojure.string/capitalize","cljs.core.subs","_strategy","s","cljs.core/seq","humanized","clojure.string.join","iter__5523__auto__","s__80041","cljs.core/LazySeq","temp__5804__auto__","cljs.core/chunked-seq?","c__5521__auto__","size__5522__auto__","cljs.core/count","b__80043","cljs.core/chunk-buffer","i__80042","cljs.core/-nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__80040","cljs.core/chunk-rest","cljs.core/first","cljs.core/cons","cljs.core/rest","part","clojure.string.split","clojure.string/blank?","fexpr__80046","cljs.core/get-method","cljs.core/chunk-first"],"sourcesContent":["(ns metabase.util.humanization\n  (:require\n   [clojure.string :as str]\n   [metabase.util :as u]))\n\n(defmulti name->human-readable-name\n  \"Convert a name, such as `num_toucans`, to a human-readable name, such as `Num Toucans`.\n\n    (name->human-readable-name :simple \\\"cool_toucans\\\") ;-> \\\"Cool Toucans\\\"\n\n    ;; specifiy a different strategy:\n    (name->human-readable-name :none \\\"cool_toucans\\\") ;-> \\\"cool_toucans\\\"\"\n  {:arglists '([strategy s])}\n  (fn [strategy _s]\n    (keyword strategy)))\n\n(def ^:private ^:const acronyms\n  #{\"id\" \"url\" \"ip\" \"uid\" \"uuid\" \"guid\"})\n\n(defn- capitalize-word [word]\n  (if (contains? acronyms (u/lower-case-en word))\n    (u/upper-case-en word)\n    ;; We are assuming that ALL_UPPER_CASE means we should be Title Casing\n    (if (= word (u/upper-case-en word))\n      (str/capitalize word)\n      (str (str/capitalize (subs word 0 1)) (subs word 1)))))\n\n;; simple replaces hyphens and underscores with spaces and capitalizes\n(defmethod name->human-readable-name :simple\n  [_strategy s]\n  ;; explode on hyphens, underscores, and spaces\n  (when (seq s)\n    (let [humanized (str/join \" \" (for [part  (str/split s #\"[-_\\s]+\")\n                                        :when (not (str/blank? part))]\n                                    (capitalize-word part)))]\n      (if (str/blank? humanized)\n        s\n        humanized))))\n\n;;; `:none` is just an identity implementation\n(defmethod name->human-readable-name :none\n  [_strategy s]\n  s)\n\n;;; `:advanced` doesn't exist anymore, it used to be super fancy and do neat things. On the off chance someone still\n;;; tries to use it, just do the same thing `:simple` does.\n(defmethod name->human-readable-name :advanced\n  [strategy s]\n  ((get-method name->human-readable-name :simple) strategy s))\n"]}