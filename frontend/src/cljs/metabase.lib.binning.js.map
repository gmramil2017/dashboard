{"version":3,"sources":["metabase/lib/binning.cljc"],"mappings":"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","names":["js/metabase","js/metabase.lib","js/metabase.lib.binning","js/metabase.lib.binning.with-binning-method","method-table__5642__auto__","cljs.core.atom","prefer-table__5643__auto__","method-cache__5644__auto__","cached-hierarchy__5645__auto__","hierarchy__5646__auto__","cljs.core.get","fexpr__79825","cljs.core/MultiFn","cljs.core.symbol","metabase.lib.binning/with-binning-method","x","_binning","metabase.lib.dispatch/dispatch-value","metabase.lib.hierarchy/hierarchy","metabase.lib.binning/with-binning","binning","cljs.core/contains?","js/metabase.lib.binning.binning-method","fexpr__79851","metabase.lib.binning/binning-method","_x","metabase.lib.binning/binning","js/metabase.lib.binning.available-binning-strategies-method","fexpr__79916","metabase.lib.binning/available-binning-strategies-method","_query","_stage-number","var_args","G__79927","metabase.lib.binning/available-binning-strategies","js/Error","query","metabase.lib.binning.available_binning_strategies","stage-number","metabase.lib.binning/default-auto-bin","metabase.shared.util.i18n/js-i18n","metabase.lib.binning/with-binning-option-type","m","cljs.core.assoc","metabase.lib.binning/*numeric-binning-strategies","cljs.core/Delay","cljs.core.mapv","cljs.core/deref","metabase.lib.binning/numeric-binning-strategies","metabase.lib.binning/*coordinate-binning-strategies","metabase.lib.binning/coordinate-binning-strategies","p__79981","map__79982","cljs.core/--destructure-map","metabase.lib.binning/binning-display-name","bin-width","num-bins","strategy","binning-options","field-metadata","G__79984","cljs.core/Keyword","metabase.shared.util.i18n/js-i18n-n","metabase.shared.formatting.numbers/format-number","cljs.core.isa_QMARK_","metabase.lib.metadata.calculation/display-info-method","binning-option","cljs.core/select-keys","binning-value","fexpr__79989","cljs.core.merge","cljs.core._EQ_","metabase.lib.binning/strategy=","column-binning"],"sourcesContent":["(ns metabase.lib.binning\n  (:require\n    [metabase.lib.dispatch :as lib.dispatch]\n    [metabase.lib.hierarchy :as lib.hierarchy]\n    [metabase.lib.metadata.calculation :as lib.metadata.calculation]\n    [metabase.lib.schema :as lib.schema]\n    [metabase.lib.schema.binning :as lib.schema.binning]\n    [metabase.shared.formatting.numbers :as fmt.num]\n    [metabase.shared.util.i18n :as i18n]\n    [metabase.util.malli :as mu]))\n\n(defmulti with-binning-method\n  \"Implementation for [[with-binning]]. Implement this to tell [[with-binning]] how to add binning to a particular MBQL\n  clause.\"\n  {:arglists '([x binning])}\n  (fn [x _binning]\n    (lib.dispatch/dispatch-value x)) :hierarchy lib.hierarchy/hierarchy)\n\n(mu/defn with-binning\n  \"Add binning to an MBQL clause or something that can be converted to an MBQL clause.\n  Eg. for a Field or Field metadata or `:field` clause, this might do something like this:\n\n    (with-binning some-field (bin-by :num-bins 4))\n\n    =>\n\n    [:field {:binning {:strategy :num-bins :num-bins 4}} 1]\n\n  Pass `nil` `binning` to remove any binning.\"\n  [x binning :- [:maybe [:or ::lib.schema.binning/binning ::lib.schema.binning/binning-option]]]\n  (with-binning-method x (if (contains? binning :mbql)\n                           (:mbql binning)\n                           binning)))\n\n(defmulti binning-method\n  \"Implementation of [[binning]]. Return the current binning options associated with `x`.\"\n  {:arglists '([x])}\n  lib.dispatch/dispatch-value\n  :hierarchy lib.hierarchy/hierarchy)\n\n(defmethod binning-method :default\n  [_x]\n  nil)\n\n(mu/defn binning :- [:maybe ::lib.schema.binning/binning]\n  \"Get the current binning options associated with `x`, if any.\"\n  [x]\n  (binning-method x))\n\n(defmulti available-binning-strategies-method\n  \"Implementation for [[available-binning-strategies]]. Return a set of binning strategies from\n  `:metabase.lib.schema.binning/binning-strategies` that are allowed to be used with `x`.\"\n  {:arglists '([query stage-number x])}\n  (fn [_query _stage-number x]\n    (lib.dispatch/dispatch-value x))\n  :hierarchy lib.hierarchy/hierarchy)\n\n(defmethod available-binning-strategies-method :default\n  [_query _stage-number _x]\n  nil)\n\n(mu/defn available-binning-strategies :- [:sequential [:ref ::lib.schema.binning/binning-option]]\n  \"Get a set of available binning strategies for `x`. Returns nil if none are available.\"\n  ([query x]\n   (available-binning-strategies query -1 x))\n\n  ([query        :- ::lib.schema/query\n    stage-number :- :int\n    x]\n   (available-binning-strategies-method query stage-number x)))\n\n(defn- default-auto-bin []\n  {:display-name (i18n/tru \"Auto bin\")\n   :default      true\n   :mbql         {:strategy :default}})\n\n(defn- with-binning-option-type [m]\n  (assoc m :lib/type :option/binning))\n\n(def ^:private *numeric-binning-strategies\n  (delay (mapv with-binning-option-type\n               [(default-auto-bin)\n                {:display-name (i18n/tru \"10 bins\")  :mbql {:strategy :num-bins :num-bins 10}}\n                {:display-name (i18n/tru \"50 bins\")  :mbql {:strategy :num-bins :num-bins 50}}\n                {:display-name (i18n/tru \"100 bins\") :mbql {:strategy :num-bins :num-bins 100}}])))\n\n(defn numeric-binning-strategies\n  \"List of binning options for numeric fields. These split the data evenly into a fixed number of bins.\"\n  []\n  @*numeric-binning-strategies)\n\n(def ^:private *coordinate-binning-strategies\n  (delay\n    (mapv with-binning-option-type\n          [(default-auto-bin)\n           {:display-name (i18n/tru \"Bin every 0.1 degrees\") :mbql {:strategy :bin-width :bin-width 0.1}}\n           {:display-name (i18n/tru \"Bin every 1 degree\")    :mbql {:strategy :bin-width :bin-width 1.0}}\n           {:display-name (i18n/tru \"Bin every 10 degrees\")  :mbql {:strategy :bin-width :bin-width 10.0}}\n           {:display-name (i18n/tru \"Bin every 20 degrees\")  :mbql {:strategy :bin-width :bin-width 20.0}}])))\n\n(defn coordinate-binning-strategies\n  \"List of binning options for coordinate fields (ie. latitude and longitude). These split the data into as many\n  ranges as necessary, with each range being a certain number of degrees wide.\"\n  []\n  @*coordinate-binning-strategies)\n\n(defn binning-display-name\n  \"This is implemented outside of [[lib.metadata.calculation/display-name]] because it needs access to the field type.\n  It's called directly by `:field` or `:metadata/column`'s [[lib.metadata.calculation/display-name]].\"\n  [{:keys [bin-width num-bins strategy] :as binning-options} field-metadata]\n  (when binning-options\n    (case strategy\n      :num-bins  (i18n/trun \"{0} bin\" \"{0} bins\" num-bins)\n      :bin-width (str (fmt.num/format-number bin-width {})\n                      (when (isa? (:semantic-type field-metadata) :type/Coordinate)\n                        \"\u00b0\"))\n      :default   (i18n/tru \"Auto binned\"))))\n\n(defmethod lib.metadata.calculation/display-info-method :option/binning\n  [_query _stage-number binning-option]\n  (select-keys binning-option [:display-name :default :selected]))\n\n(defmethod lib.metadata.calculation/display-info-method ::binning\n  [query stage-number binning-value]\n  (let [field-metadata ((:metadata-fn binning-value) query stage-number)]\n    (merge {:display-name (binning-display-name binning-value field-metadata)}\n           (when (= :default (:strategy binning-value))\n             {:default true}))))\n\n(mu/defn strategy= :- boolean?\n  \"Given a binning option (as returned by [[available-binning-strategies]]) and the binning value (possibly nil) from\n  a column, check if they match.\"\n  [binning-option :- ::lib.schema.binning/binning-option\n   column-binning :- [:maybe ::lib.schema.binning/binning]]\n  (= (:mbql binning-option)\n     (select-keys column-binning [:strategy :num-bins :bin-width])))\n"]}