["^ ","~:output",["^ ","~:js","goog.provide('metabase.shared.util.internal.time');\nmetabase.shared.util.internal.time.now = (function metabase$shared$util$internal$time$now(){\nreturn shadow.js.shim.module$moment();\n});\n/**\n * Given any value, check if it's a (possibly invalid) Moment.\n */\nmetabase.shared.util.internal.time.datetime_QMARK_ = (function metabase$shared$util$internal$time$datetime_QMARK_(value){\nvar and__5043__auto__ = value;\nif(cljs.core.truth_(and__5043__auto__)){\nreturn shadow.js.shim.module$moment.isMoment(value);\n} else {\nreturn and__5043__auto__;\n}\n});\n/**\n * checks if the provided value is a local time value.\n */\nmetabase.shared.util.internal.time.time_QMARK_ = (function metabase$shared$util$internal$time$time_QMARK_(value){\nreturn shadow.js.shim.module$moment.isMoment(value);\n});\n/**\n * Given a Moment, check that it's valid.\n */\nmetabase.shared.util.internal.time.valid_QMARK_ = (function metabase$shared$util$internal$time$valid_QMARK_(value){\nvar and__5043__auto__ = metabase.shared.util.internal.time.datetime_QMARK_(value);\nif(cljs.core.truth_(and__5043__auto__)){\nreturn value.isValid();\n} else {\nreturn and__5043__auto__;\n}\n});\n/**\n * Does nothing. Just a placeholder in CLJS; the JVM implementation does some real work.\n */\nmetabase.shared.util.internal.time.normalize = (function metabase$shared$util$internal$time$normalize(value){\nreturn value;\n});\n/**\n * Given two platform-specific datetimes, checks if they fall within the same day.\n */\nmetabase.shared.util.internal.time.same_day_QMARK_ = (function metabase$shared$util$internal$time$same_day_QMARK_(d1,d2){\nreturn d1.isSame(d2,\"day\");\n});\n/**\n * True if these two datetimes fall in the same (year and) month.\n */\nmetabase.shared.util.internal.time.same_month_QMARK_ = (function metabase$shared$util$internal$time$same_month_QMARK_(d1,d2){\nreturn d1.isSame(d2,\"month\");\n});\n/**\n * True if these two datetimes fall in the same year.\n */\nmetabase.shared.util.internal.time.same_year_QMARK_ = (function metabase$shared$util$internal$time$same_year_QMARK_(d1,d2){\nreturn d1.isSame(d2,\"year\");\n});\n/**\n * The first day of the week varies by locale, but Dashboard has a setting that overrides it.\n *   In CLJS, Moment is already configured with that setting.\n */\nmetabase.shared.util.internal.time.first_day_of_week = (function metabase$shared$util$internal$time$first_day_of_week(){\nreturn cljs.core.keyword.cljs$core$IFn$_invoke$arity$1(shadow.js.shim.module$moment.weekdays((0)).toLowerCase());\n});\n/**\n * The default map of options - empty in CLJS.\n */\nmetabase.shared.util.internal.time.default_options = cljs.core.PersistentArrayMap.EMPTY;\nmetabase.shared.util.internal.time_common.to_range.cljs$core$IMultiFn$_add_method$arity$3(null,new cljs.core.Keyword(null,\"default\",\"default\",-1987822328),(function (value,p__80406){\nvar map__80407 = p__80406;\nvar map__80407__$1 = cljs.core.__destructure_map(map__80407);\nvar unit = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__80407__$1,new cljs.core.Keyword(null,\"unit\",\"unit\",375175175));\nvar c1 = value.clone();\nvar c2 = value.clone();\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [c1.startOf(cljs.core.name(unit)),c2.endOf(cljs.core.name(unit))], null);\n}));\nmetabase.shared.util.internal.time_common.string__GT_timestamp.cljs$core$IMultiFn$_add_method$arity$3(null,new cljs.core.Keyword(null,\"default\",\"default\",-1987822328),(function (value,_){\nreturn shadow.js.shim.module$moment.utc(value,shadow.js.shim.module$moment.ISO_8601);\n}));\nmetabase.shared.util.internal.time_common.string__GT_timestamp.cljs$core$IMultiFn$_add_method$arity$3(null,new cljs.core.Keyword(null,\"day-of-week\",\"day-of-week\",1639326729),(function (value,options){\nvar as_default = (function (){try{var fexpr__80410 = cljs.core.get_method(metabase.shared.util.internal.time_common.string__GT_timestamp,new cljs.core.Keyword(null,\"default\",\"default\",-1987822328));\nreturn (fexpr__80410.cljs$core$IFn$_invoke$arity$2 ? fexpr__80410.cljs$core$IFn$_invoke$arity$2(value,options) : fexpr__80410.call(null,value,options));\n}catch (e80408){if((e80408 instanceof Error)){\nvar _ = e80408;\nreturn null;\n} else {\nthrow e80408;\n\n}\n}})();\nif(cljs.core.truth_(metabase.shared.util.internal.time.valid_QMARK_(as_default))){\nreturn as_default;\n} else {\nreturn metabase.shared.util.internal.time.now().isoWeekday(value).startOf(\"day\");\n}\n}));\n/**\n * Some of the date coercions are relative, and not directly involved with any particular month.\n *   To avoid errors we need to use a reference date that is (a) in a month with 31 days,(b) in a leap year.\n *   This uses 2016-01-01 for the purpose.\n *   This is a function that returns fresh values, since Moments are mutable.\n */\nmetabase.shared.util.internal.time.magic_base_date = (function metabase$shared$util$internal$time$magic_base_date(){\nreturn shadow.js.shim.module$moment(\"2016-01-01\");\n});\nmetabase.shared.util.internal.time_common.number__GT_timestamp.cljs$core$IMultiFn$_add_method$arity$3(null,new cljs.core.Keyword(null,\"default\",\"default\",-1987822328),(function (value,_){\nreturn shadow.js.shim.module$moment.utc(value,shadow.js.shim.module$moment.ISO_8601);\n}));\nmetabase.shared.util.internal.time_common.number__GT_timestamp.cljs$core$IMultiFn$_add_method$arity$3(null,new cljs.core.Keyword(null,\"minute-of-hour\",\"minute-of-hour\",1903220478),(function (value,_){\nreturn metabase.shared.util.internal.time.now().minute(value).startOf(\"minute\");\n}));\nmetabase.shared.util.internal.time_common.number__GT_timestamp.cljs$core$IMultiFn$_add_method$arity$3(null,new cljs.core.Keyword(null,\"hour-of-day\",\"hour-of-day\",2086777099),(function (value,_){\nreturn metabase.shared.util.internal.time.now().hour(value).startOf(\"hour\");\n}));\nmetabase.shared.util.internal.time_common.number__GT_timestamp.cljs$core$IMultiFn$_add_method$arity$3(null,new cljs.core.Keyword(null,\"day-of-week\",\"day-of-week\",1639326729),(function (value,_){\nreturn metabase.shared.util.internal.time.now().weekday((value - (1))).startOf(\"day\");\n}));\nmetabase.shared.util.internal.time_common.number__GT_timestamp.cljs$core$IMultiFn$_add_method$arity$3(null,new cljs.core.Keyword(null,\"day-of-month\",\"day-of-month\",-1096650288),(function (value,_){\nreturn metabase.shared.util.internal.time.magic_base_date().date(value).startOf(\"day\");\n}));\nmetabase.shared.util.internal.time_common.number__GT_timestamp.cljs$core$IMultiFn$_add_method$arity$3(null,new cljs.core.Keyword(null,\"day-of-year\",\"day-of-year\",478600113),(function (value,_){\nreturn metabase.shared.util.internal.time.magic_base_date().dayOfYear(value).startOf(\"day\");\n}));\nmetabase.shared.util.internal.time_common.number__GT_timestamp.cljs$core$IMultiFn$_add_method$arity$3(null,new cljs.core.Keyword(null,\"week-of-year\",\"week-of-year\",-910114435),(function (value,_){\nreturn metabase.shared.util.internal.time.now().week(value).startOf(\"week\");\n}));\nmetabase.shared.util.internal.time_common.number__GT_timestamp.cljs$core$IMultiFn$_add_method$arity$3(null,new cljs.core.Keyword(null,\"month-of-year\",\"month-of-year\",760756492),(function (value,_){\nreturn metabase.shared.util.internal.time.now().month((value - (1))).startOf(\"month\");\n}));\nmetabase.shared.util.internal.time_common.number__GT_timestamp.cljs$core$IMultiFn$_add_method$arity$3(null,new cljs.core.Keyword(null,\"quarter-of-year\",\"quarter-of-year\",-472803491),(function (value,_){\nreturn metabase.shared.util.internal.time.now().quarter(value).startOf(\"quarter\");\n}));\nmetabase.shared.util.internal.time_common.number__GT_timestamp.cljs$core$IMultiFn$_add_method$arity$3(null,new cljs.core.Keyword(null,\"year\",\"year\",335913393),(function (value,_){\nreturn metabase.shared.util.internal.time.now().year(value).startOf(\"year\");\n}));\n/**\n * Parses a timestamp with Z or a timezone offset at the end.\n *   This requires a different API call from timestamps without time zones in CLJS.\n */\nmetabase.shared.util.internal.time.parse_with_zone = (function metabase$shared$util$internal$time$parse_with_zone(value){\nreturn shadow.js.shim.module$moment.parseZone(value);\n});\n/**\n * Given a freshly parsed absolute Moment, convert it to a local one.\n */\nmetabase.shared.util.internal.time.localize = (function metabase$shared$util$internal$time$localize(value){\nreturn value.local();\n});\nmetabase.shared.util.internal.time.parse_time_formats = [\"HH:mm:ss.SSS[Z]\",\"HH:mm:ss.SSS\",\"HH:mm:ss\",\"HH:mm\"];\n/**\n * Parses a time string that has been stripped of any time zone.\n */\nmetabase.shared.util.internal.time.parse_time_string = (function metabase$shared$util$internal$time$parse_time_string(value){\nreturn shadow.js.shim.module$moment(value,metabase.shared.util.internal.time.parse_time_formats);\n});\n/**\n * Returns the time elapsed between `before` and `after` in days.\n */\nmetabase.shared.util.internal.time.day_diff = (function metabase$shared$util$internal$time$day_diff(before,after){\nreturn after.diff(before,\"day\");\n});\n","~:ns-info",["^ ","~:rename-macros",null,"~:renames",["^ "],"~:meta",["^ ","~:doc","CLJS implementation of the time utilities on top of Moment.js.\n  See [[metabase.shared.util.time]] for the public interface.","~:file","metabase/shared/util/internal/time.cljs","~:line",1,"~:column",5,"~:end-line",1,"~:end-column",39],"~:ns-aliases",["^ ","~$cljs.loader","~$shadow.loader","~$clojure.pprint","~$cljs.pprint","~$clojure.spec.alpha","~$cljs.spec.alpha","~$clojure.core","~$cljs.core","~$clojure.spec.gen.alpha","~$cljs.spec.gen.alpha","~$clojure.core.match","~$cljs.core.match"],"~:use-macros",null,"~:excludes",["~#set",[]],"~:name","~$metabase.shared.util.internal.time","~:reader-aliases",["^ "],"~:js-aliases",["^ ","moment","~$shadow.js.shim.module$moment"],"~:op","~:ns","~:imports",null,"~:requires",["^ ","~$metabase.shared.util.internal.time-common","^V","~$common","^V","^D","^D","~$goog","^X","^Q","^Q","~$moment","^Q"],"~:seen",["^K",["~:require"]],"~:uses",null,"~:require-macros",["^ ","^D","^D"],"~:form",["~#list",["~$ns","^M","CLJS implementation of the time utilities on top of Moment.js.\n  See [[metabase.shared.util.time]] for the public interface.",["^13",["^[",["moment","~:as","^Y"],["^V","^15","^W"]]]]],"~:flags",["^ ","^[",["^K",[]]],"~:js-deps",["^ ","^P",["^ ","^15","^Y"]],"~:deps",["^X","^D","^Q","^V"]],"^S","^M","~:resource-id",["~:shadow.build.classpath/resource","metabase/shared/util/internal/time.cljs"],"~:compiled-at",1692014630584,"^N",["^ ","^V","^V","^W","^V","^D","^D","^X","^X","^Q","^Q","^Y","^Q"],"~:resource-name","metabase/shared/util/internal/time.cljs","~:warnings",[],"~:source","(ns metabase.shared.util.internal.time\n  \"CLJS implementation of the time utilities on top of Moment.js.\n  See [[metabase.shared.util.time]] for the public interface.\"\n  (:require\n   [\"moment\" :as moment]\n   [metabase.shared.util.internal.time-common :as common]))\n\n(defn- now [] (moment))\n\n;;; ----------------------------------------------- predicates -------------------------------------------------------\n(defn datetime?\n  \"Given any value, check if it's a (possibly invalid) Moment.\"\n  [value]\n  (and value (moment/isMoment value)))\n\n(defn time?\n  \"checks if the provided value is a local time value.\"\n  [value]\n  (moment/isMoment value))\n\n(defn valid?\n  \"Given a Moment, check that it's valid.\"\n  [value]\n  (and (datetime? value) (.isValid ^moment/Moment value)))\n\n(defn normalize\n  \"Does nothing. Just a placeholder in CLJS; the JVM implementation does some real work.\"\n  [value]\n  value)\n\n(defn same-day?\n  \"Given two platform-specific datetimes, checks if they fall within the same day.\"\n  [^moment/Moment d1 ^moment/Moment d2]\n  (.isSame d1 d2 \"day\"))\n\n(defn same-month?\n  \"True if these two datetimes fall in the same (year and) month.\"\n  [^moment/Moment d1 ^moment/Moment d2]\n  (.isSame d1 d2 \"month\"))\n\n(defn same-year?\n  \"True if these two datetimes fall in the same year.\"\n  [^moment/Moment d1 ^moment/Moment d2]\n  (.isSame d1 d2 \"year\"))\n\n;;; ---------------------------------------------- information -------------------------------------------------------\n(defn first-day-of-week\n  \"The first day of the week varies by locale, but Dashboard has a setting that overrides it.\n  In CLJS, Moment is already configured with that setting.\"\n  []\n  (-> (moment/weekdays 0)\n      (.toLowerCase)\n      keyword))\n\n(def default-options\n  \"The default map of options - empty in CLJS.\"\n  {})\n\n;;; ------------------------------------------------ to-range --------------------------------------------------------\n(defmethod common/to-range :default [^moment/Moment value {:keys [unit]}]\n  (let [^moment/Moment c1 (.clone value)\n        ^moment/Moment c2 (.clone value)]\n    [(.startOf c1 (name unit))\n     (.endOf   c2 (name unit))]))\n\n;; NB: Only the :default for to-range is needed in CLJS, since Moment's startOf and endOf methods are doing the work.\n\n;;; -------------------------------------------- string->timestamp ---------------------------------------------------\n(defmethod common/string->timestamp :default [value _]\n  ;; Best effort to parse this unknown string format, as a local zoneless datetime, then treating it as UTC.\n  (moment/utc value moment/ISO_8601))\n\n(defmethod common/string->timestamp :day-of-week [value options]\n  ;; Try to parse as a regular timestamp; if that fails then try to treat it as a weekday name and adjust from\n  ;; the current time.\n  (let [as-default (try ((get-method common/string->timestamp :default) value options)\n                        (catch js/Error _ nil))]\n    (if (valid? as-default)\n      as-default\n      (-> (now)\n          (.isoWeekday value)\n          (.startOf \"day\")))))\n\n;;; -------------------------------------------- number->timestamp ---------------------------------------------------\n(defn- magic-base-date\n  \"Some of the date coercions are relative, and not directly involved with any particular month.\n  To avoid errors we need to use a reference date that is (a) in a month with 31 days,(b) in a leap year.\n  This uses 2016-01-01 for the purpose.\n  This is a function that returns fresh values, since Moments are mutable.\"\n  []\n  (moment \"2016-01-01\"))\n\n(defmethod common/number->timestamp :default [value _]\n  ;; If no unit is given, or the unit is not recognized, try to parse the number as year number, returning the timestamp\n  ;; for midnight UTC on January 1.\n  (moment/utc value moment/ISO_8601))\n\n(defmethod common/number->timestamp :minute-of-hour [value _]\n  (.. (now) (minute value) (startOf \"minute\")))\n\n(defmethod common/number->timestamp :hour-of-day [value _]\n  (.. (now) (hour value) (startOf \"hour\")))\n\n(defmethod common/number->timestamp :day-of-week [value _]\n  ;; Dashboard uses 1 to mean the start of the week, based on the Dashboard setting for the first day of the week.\n  ;; Moment uses 0 as the first day of the week in its configured locale.\n  (.. (now) (weekday (dec value)) (startOf \"day\")))\n\n(defmethod common/number->timestamp :day-of-month [value _]\n  ;; We force the initial date to be in a month with 31 days.\n  (.. (magic-base-date) (date value) (startOf \"day\")))\n\n(defmethod common/number->timestamp :day-of-year [value _]\n  ;; We force the initial date to be in a leap year (2016).\n  (.. (magic-base-date) (dayOfYear value) (startOf \"day\")))\n\n(defmethod common/number->timestamp :week-of-year [value _]\n  (.. (now) (week value) (startOf \"week\")))\n\n(defmethod common/number->timestamp :month-of-year [value _]\n  (.. (now) (month (dec value)) (startOf \"month\")))\n\n(defmethod common/number->timestamp :quarter-of-year [value _]\n  (.. (now) (quarter value) (startOf \"quarter\")))\n\n(defmethod common/number->timestamp :year [value _]\n  (.. (now) (year value) (startOf \"year\")))\n\n;;; ---------------------------------------------- parsing helpers ---------------------------------------------------\n(defn parse-with-zone\n  \"Parses a timestamp with Z or a timezone offset at the end.\n  This requires a different API call from timestamps without time zones in CLJS.\"\n  [value]\n  (moment/parseZone value))\n\n(defn localize\n  \"Given a freshly parsed absolute Moment, convert it to a local one.\"\n  [value]\n  (.local value))\n\n(def ^:private parse-time-formats\n  #js [\"HH:mm:ss.SSS[Z]\"\n       \"HH:mm:ss.SSS\"\n       \"HH:mm:ss\"\n       \"HH:mm\"])\n\n(defn parse-time-string\n  \"Parses a time string that has been stripped of any time zone.\"\n  [value]\n  (moment value parse-time-formats))\n\n;;; ------------------------------------------------ arithmetic ------------------------------------------------------\n\n(defn day-diff\n  \"Returns the time elapsed between `before` and `after` in days.\"\n  [^moment/Moment before ^moment/Moment after]\n  (.diff after before \"day\"))\n","~:reader-features",["^K",["~:cljs-release","~:cljs-dev","~:cljs"]],"~:cljc",false,"~:source-map-compact",["^ ","mappings","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","names",["metabase.shared.util.internal.time/now","js/shadow.js.shim.module$moment","metabase.shared.util.internal.time/datetime?","value","and__5043__auto__","js/shadow.js.shim.module$moment.isMoment","metabase.shared.util.internal.time/time?","metabase.shared.util.internal.time/valid?","metabase.shared.util.internal.time/normalize","metabase.shared.util.internal.time/same-day?","d1","d2","metabase.shared.util.internal.time/same-month?","metabase.shared.util.internal.time/same-year?","metabase.shared.util.internal.time/first-day-of-week","js/shadow.js.shim.module$moment.weekdays","cljs.core.keyword","metabase.shared.util.internal.time/default-options","metabase.shared.util.internal.time-common/to-range","p__80406","map__80407","cljs.core/--destructure-map","cljs.core.get","unit","c1","c2","cljs.core/name","metabase.shared.util.internal.time-common/string->timestamp","_","js/shadow.js.shim.module$moment.utc","js/shadow.js.shim.module$moment.ISO_8601","options","as-default","e80408","fexpr__80410","cljs.core/get-method","js/Error","metabase.shared.util.internal.time/magic-base-date","metabase.shared.util.internal.time-common/number->timestamp","metabase.shared.util.internal.time/parse-with-zone","js/shadow.js.shim.module$moment.parseZone","metabase.shared.util.internal.time/localize","metabase.shared.util.internal.time/parse-time-formats","metabase.shared.util.internal.time/parse-time-string","metabase.shared.util.internal.time/day-diff","before","after"]],"~:used-vars",["^K",["~$cljs.core/--destructure-map","~$metabase.shared.util.internal.time/same-year?","~$cljs.core/keyword","~$metabase.shared.util.internal.time/magic-base-date","~$cljs.core/get-method","~$metabase.shared.util.internal.time/normalize","~$metabase.shared.util.internal.time-common/string->timestamp","~$metabase.shared.util.internal.time/datetime?","~$metabase.shared.util.internal.time/same-day?","~$js/shadow.js.shim.module$moment","~$metabase.shared.util.internal.time/time?","~$js/shadow.js.shim.module$moment.weekdays","~$metabase.shared.util.internal.time/now","~$metabase.shared.util.internal.time/default-options","~$metabase.shared.util.internal.time/parse-with-zone","~$js/shadow.js.shim.module$moment.parseZone","~$metabase.shared.util.internal.time/localize","~$cljs.core/-add-method","~$metabase.shared.util.internal.time-common/to-range","~$cljs.core/get","~$metabase.shared.util.internal.time/valid?","~$metabase.shared.util.internal.time/parse-time-string","~$js/shadow.js.shim.module$moment.ISO_8601","~$metabase.shared.util.internal.time/day-diff","~$metabase.shared.util.internal.time/same-month?","~$js/shadow.js.shim.module$moment.utc","~$metabase.shared.util.internal.time/parse-time-formats","~$js/shadow.js.shim.module$moment.isMoment","~$metabase.shared.util.internal.time/first-day-of-week","~$cljs.core/name","~$js/Error","~$metabase.shared.util.internal.time-common/number->timestamp"]]],"~:cache-keys",["~#cmap",[["^1:","goog/dom/tagname.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","~:shadow.build.compiler/resolve",["^ ","~:require-id",null,"~:deps-ids",["^K",[]],"~:deps-syms",["^X","~$goog.dom.HtmlElement"]]],["^1:","metabase/shared/util/internal/time_common.cljc"],["163f2e345dbdab8903e43302a6f45950d2b8975d","^2>",["^ ","^2?",null,"^2@",["^K",[]],"^2A",["^X","^D"]]],["^1:","goog/html/trustedtypes.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2>",["^ ","^2?",null,"^2@",["^K",[]],"^2A",["^X"]]],["^1:","goog/labs/useragent/browser.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2>",["^ ","^2?",null,"^2@",["^K",[]],"^2A",["^X","~$goog.labs.userAgent.util","~$goog.labs.userAgent.highEntropy.highEntropyValue","~$goog.asserts","~$goog.string.internal","~$goog.labs.userAgent.highEntropy.highEntropyData","~$goog.labs.userAgent"]]],["^1:","goog/html/safeurl.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2>",["^ ","^2?",null,"^2@",["^K",[]],"^2A",["^X","^2E","~$goog.fs.url","~$goog.html.TrustedResourceUrl","~$goog.string.Const","~$goog.string.TypedString","^2F"]]],["^1:","goog/array/array.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2>",["^ ","^2?",null,"^2@",["^K",[]],"^2A",["^X","^2E"]]],["~:shadow.build.js-support/require","moment"],["^Q","shadow.js.shim.module$moment.js","require","^2>",["^ ","^2?",null,"^2@",["^K",[]],"^2A",["^X"]]],["^1:","goog/debug/error.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2>",["^ ","^2?",null,"^2@",["^K",[]],"^2A",["^X"]]],["^1:","goog/flags/flags.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2>",["^ ","^2?",null,"^2@",["^K",[]],"^2A",["^X"]]],["^1:","goog/dom/nodetype.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2>",["^ ","^2?",null,"^2@",["^K",[]],"^2A",["^X"]]],["^1:","goog/labs/useragent/highentropy/highentropyvalue.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2>",["^ ","^2?",null,"^2@",["^K",[]],"^2A",["^X","^2C","^2F"]]],["^1:","goog/string/typedstring.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2>",["^ ","^2?",null,"^2@",["^K",[]],"^2A",["^X"]]],["^1:","goog/object/object.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2>",["^ ","^2?",null,"^2@",["^K",[]],"^2A",["^X"]]],["^1:","goog/dom/asserts.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2>",["^ ","^2?",null,"^2@",["^K",[]],"^2A",["^X","^2E"]]],"~:SHADOW-TIMESTAMP",[1689947046000,1689947046000,1689947050000],["^1:","goog/math/long.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2>",["^ ","^2?",null,"^2@",["^K",[]],"^2A",["^X","^2E","~$goog.reflect"]]],["^1:","goog/html/trustedresourceurl.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2>",["^ ","^2?",null,"^2@",["^K",[]],"^2A",["^X","^2E","~$goog.fs.blob","^2I","~$goog.html.SafeScript","~$goog.html.trustedtypes","^2K","^2L"]]],["^1:","goog/string/internal.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2>",["^ ","^2?",null,"^2@",["^K",[]],"^2A",["^X"]]],["^1:","goog/functions/functions.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2>",["^ ","^2?",null,"^2@",["^K",[]],"^2A",["^X"]]],["^1:","goog/html/safestyle.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2>",["^ ","^2?",null,"^2@",["^K",[]],"^2A",["^X","^2K","~$goog.html.SafeUrl","^2L","^2E","^2F"]]],["^1:","goog/dom/safe.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2>",["^ ","^2?",null,"^2@",["^K",[]],"^2A",["^X","^2E","~$goog.asserts.dom","~$goog.dom.asserts","~$goog.functions","~$goog.html.SafeHtml","^2Q","~$goog.html.SafeStyle","^2S","^2J","~$goog.html.uncheckedconversions","^2K","^2F"]]],["^1:","goog/asserts/dom.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2>",["^ ","^2?",null,"^2@",["^K",[]],"^2A",["^X","~$goog.dom.TagName","^2E","~$goog.dom.element"]]],["^1:","goog/html/safehtml.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2>",["^ ","^2?",null,"^2@",["^K",[]],"^2A",["^X","^2K","^2Q","^2X","~$goog.html.SafeStyleSheet","^2S","^2Z","^2J","^2L","^2E","~$goog.labs.userAgent.browser","~$goog.array","~$goog.object","^2F","~$goog.dom.tags","^2R"]]],["^1:","goog/dom/tags.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2>",["^ ","^2?",null,"^2@",["^K",[]],"^2A",["^X","^33"]]],["^1:","goog/fs/blob.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2>",["^ ","^2?",null,"^2@",["^K",[]],"^2A",["^X"]]],["^1:","goog/asserts/asserts.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2>",["^ ","^2?",null,"^2@",["^K",[]],"^2A",["^X","~$goog.debug.Error","~$goog.dom.NodeType"]]],["^1:","goog/uri/uri.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2>",["^ ","^2?",null,"^2@",["^K",[]],"^2A",["^X","^32","^2E","~$goog.collections.maps","~$goog.string","~$goog.structs","~$goog.uri.utils","~$goog.uri.utils.ComponentIndex","~$goog.uri.utils.StandardQueryParam"]]],["^1:","goog/labs/useragent/highentropy/highentropydata.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2>",["^ ","^2?",null,"^2@",["^K",[]],"^2A",["^X","^2D"]]],["^1:","goog/collections/maps.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2>",["^ ","^2?",null,"^2@",["^K",[]],"^2A",["^X"]]],["^1:","goog/fs/url.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2>",["^ ","^2?",null,"^2@",["^K",[]],"^2A",["^X"]]],["^1:","goog/base.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2>",["^ ","^2?",null,"^2@",["^K",[]],"^2A",[]]],["^1:","goog/structs/structs.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2>",["^ ","^2?",null,"^2@",["^K",[]],"^2A",["^X","^32","^33"]]],["^1:","goog/string/string.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2>",["^ ","^2?",null,"^2@",["^K",[]],"^2A",["^X","~$goog.dom.safe","^2Y","^2K","^2F"]]],["^1:","goog/reflect/reflect.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2>",["^ ","^2?",null,"^2@",["^K",[]],"^2A",["^X"]]],["^1:","goog/labs/useragent/util.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2>",["^ ","^2?",null,"^2@",["^K",[]],"^2A",["^X","^2F","^2H"]]],["^1:","goog/string/stringbuffer.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2>",["^ ","^2?",null,"^2@",["^K",[]],"^2A",["^X"]]],["^1:","goog/labs/useragent/useragent.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2>",["^ ","^2?",null,"^2@",["^K",[]],"^2A",["^X","~$goog.flags"]]],["^1:","goog/dom/element.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2>",["^ ","^2?",null,"^2@",["^K",[]],"^2A",["^X","^36","^2Z"]]],["^1:","goog/html/uncheckedconversions.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2>",["^ ","^2?",null,"^2@",["^K",[]],"^2A",["^X","^2E","^2W","^2Q","^2X","^30","^2S","^2J","^2K","^2F"]]],["^1:","goog/dom/htmlelement.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2>",["^ ","^2?",null,"^2@",["^K",[]],"^2A",["^X"]]],["^1:","cljs/core.cljs"],["bc14df6666853ed869d7b88aaa864111c65d0c7f","^2>",["^ ","^2?",null,"^2@",["^K",[]],"^2A",["^X","~$goog.math.Long","~$goog.math.Integer","^38","^33","^32","~$goog.Uri","~$goog.string.StringBuffer"]]],["^1:","goog/html/safescript.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2>",["^ ","^2?",null,"^2@",["^K",[]],"^2A",["^X","^2K","^2L","^2R","^2E"]]],["^1:","goog/html/safestylesheet.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2>",["^ ","^2?",null,"^2@",["^K",[]],"^2A",["^X","^2K","^2X","^2L","^33","^2E","^2F"]]],["^1:","goog/math/integer.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2>",["^ ","^2?",null,"^2@",["^K",[]],"^2A",["^X","^2O"]]],["^1:","metabase/shared/util/internal/time.cljs"],["f92eec2c1c2703a1da00865534752f78d04a0561","^2>",["^ ","^2?",null,"^2@",["^K",[]],"^2A",["^X","^D","^Q","^V"]]],["^1:","goog/uri/utils.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2>",["^ ","^2?",null,"^2@",["^K",[]],"^2A",["^X","^2E","^38"]]],["^1:","goog/string/const.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2>",["^ ","^2?",null,"^2@",["^K",[]],"^2A",["^X","^2E","^2L"]]]]],"~:clj-info",["^ ","jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/analyzer/impl.cljc",1689947050000,"jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/source_map/base64_vlq.clj",1689947050000,"jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/instant.clj",1689947050000,"jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/externs.clj",1689947050000,"jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/vendor/clojure/tools/reader/default_data_readers.clj",1689947050000,"jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/compiler.cljc",1689947050000,"jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/env.cljc",1689947050000,"jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/analyzer/impl/namespaces.cljc",1689947050000,"jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/source_map.clj",1689947050000,"jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/util.cljc",1689947050000,"jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/analyzer.cljc",1689947050000,"jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/analyzer/passes.cljc",1689947050000,"jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/vendor/clojure/data/json.clj",1689947050000,"jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/source_map/base64.clj",1689947050000,"jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/vendor/clojure/tools/reader/reader_types.clj",1689947050000,"jar:file:/root/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/set.clj",1689946092000,"jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/vendor/clojure/tools/reader/impl/inspect.clj",1689947050000,"jar:file:/root/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/string.clj",1689946092000,"jar:file:/root/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/core.clj",1689946092000,"jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/analyzer/passes/and_or.cljc",1689947050000,"jar:file:/root/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/pprint.clj",1689946092000,"jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/js_deps.cljc",1689947050000,"jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/core.cljc",1689947050000,"jar:file:/root/.m2/repository/binaryage/devtools/1.0.6/devtools-1.0.6.jar!/devtools/defaults.clj",1689947054000,"jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/vendor/clojure/tools/reader.clj",1689947050000,"jar:file:/root/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/edn.clj",1689946092000,"jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/vendor/clojure/tools/reader/impl/errors.clj",1689947050000,"jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/tagged_literals.cljc",1689947050000,"jar:file:/root/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/java/io.clj",1689946092000,"jar:file:/root/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/instant.clj",1689946092000],"~:analyzer",["^ ","^3",null,"^4",["^ "],"^5",["^ ","^6","CLJS implementation of the time utilities on top of Moment.js.\n  See [[metabase.shared.util.time]] for the public interface.","^7","metabase/shared/util/internal/time.cljs","^8",1,"^9",5,"^:",1,"^;",39],"^<",["^ ","^=","^>","^?","^@","^A","^B","^C","^D","^E","^F","^G","^H"],"^I",null,"^J",["^K",[]],"~:shadow/js-access-properties",["^K",["endOf","Moment","parseZone","isoWeekday","weekdays","isMoment","diff","utc","ISO_8601","week","quarter","isValid","startOf","isSame","date","dayOfYear"]],"^L","^M","^N",["^ "],"^O",["^ ","^P","^Q"],"^T",null,"^U",["^ ","^V","^V","^W","^V","^D","^D","^X","^X","^Q","^Q","^Y","^Q"],"^Z",["^K",["^["]],"~:shadow/js-access-global",["^K",["Error"]],"^10",null,"~:defs",["^ ","~$same-day?",["^ ","~:protocol-inline",null,"^5",["^ ","^7","metabase/shared/util/internal/time.cljs","^8",31,"^9",7,"^:",31,"^;",16,"~:arglists",["^13",["~$quote",["^13",[["~$d1","~$d2"]]]]],"^6","Given two platform-specific datetimes, checks if they fall within the same day."],"^L","^1P","^7","metabase/shared/util/internal/time.cljs","^;",16,"~:method-params",["^13",[["^4>","^4?"]]],"~:protocol-impl",null,"~:arglists-meta",["^13",[null,null]],"^9",1,"~:variadic?",false,"^8",31,"~:ret-tag","~$any","^:",31,"~:max-fixed-arity",2,"~:fn-var",true,"^4<",["^13",["^4=",["^13",[["^4>","^4?"]]]]],"^6","Given two platform-specific datetimes, checks if they fall within the same day."],"~$datetime?",["^ ","^4;",null,"^5",["^ ","^7","metabase/shared/util/internal/time.cljs","^8",11,"^9",7,"^:",11,"^;",16,"^4<",["^13",["^4=",["^13",[["~$value"]]]]],"^6","Given any value, check if it's a (possibly invalid) Moment."],"^L","^1O","^7","metabase/shared/util/internal/time.cljs","^;",16,"^4@",["^13",[["^4I"]]],"^4A",null,"^4B",["^13",[null,null]],"^9",1,"^4C",false,"^8",11,"^4D",["^K",[null,"~$js"]],"^:",11,"^4F",1,"^4G",true,"^4<",["^13",["^4=",["^13",[["^4I"]]]]],"^6","Given any value, check if it's a (possibly invalid) Moment."],"~$normalize",["^ ","^4;",null,"^5",["^ ","^7","metabase/shared/util/internal/time.cljs","^8",26,"^9",7,"^:",26,"^;",16,"^4<",["^13",["^4=",["^13",[["^4I"]]]]],"^6","Does nothing. Just a placeholder in CLJS; the JVM implementation does some real work."],"^L","^1M","^7","metabase/shared/util/internal/time.cljs","^;",16,"^4@",["^13",[["^4I"]]],"^4A",null,"^4B",["^13",[null,null]],"^9",1,"^4C",false,"^8",26,"^:",26,"^4F",1,"^4G",true,"^4<",["^13",["^4=",["^13",[["^4I"]]]]],"^6","Does nothing. Just a placeholder in CLJS; the JVM implementation does some real work."],"~$time?",["^ ","^4;",null,"^5",["^ ","^7","metabase/shared/util/internal/time.cljs","^8",16,"^9",7,"^:",16,"^;",12,"^4<",["^13",["^4=",["^13",[["^4I"]]]]],"^6","checks if the provided value is a local time value."],"^L","^1R","^7","metabase/shared/util/internal/time.cljs","^;",12,"^4@",["^13",[["^4I"]]],"^4A",null,"^4B",["^13",[null,null]],"^9",1,"^4C",false,"^8",16,"^4D","^4J","^:",16,"^4F",1,"^4G",true,"^4<",["^13",["^4=",["^13",[["^4I"]]]]],"^6","checks if the provided value is a local time value."],"~$default-options",["^ ","^5",["^ ","^7","metabase/shared/util/internal/time.cljs","^8",55,"^9",6,"^:",55,"^;",21],"^L","^1U","^7","metabase/shared/util/internal/time.cljs","^;",21,"^9",1,"^8",55,"^:",55,"~:tag","~$cljs.core/IMap","^6","The default map of options - empty in CLJS."],"~$parse-with-zone",["^ ","^4;",null,"^5",["^ ","^7","metabase/shared/util/internal/time.cljs","^8",130,"^9",7,"^:",130,"^;",22,"^4<",["^13",["^4=",["^13",[["^4I"]]]]],"^6","Parses a timestamp with Z or a timezone offset at the end.\n  This requires a different API call from timestamps without time zones in CLJS."],"^L","^1V","^7","metabase/shared/util/internal/time.cljs","^;",22,"^4@",["^13",[["^4I"]]],"^4A",null,"^4B",["^13",[null,null]],"^9",1,"^4C",false,"^8",130,"^4D","^4J","^:",130,"^4F",1,"^4G",true,"^4<",["^13",["^4=",["^13",[["^4I"]]]]],"^6","Parses a timestamp with Z or a timezone offset at the end.\n  This requires a different API call from timestamps without time zones in CLJS."],"~$now",["^ ","^4;",null,"^5",["^ ","^7","metabase/shared/util/internal/time.cljs","^8",8,"^9",8,"^:",8,"^;",11,"~:private",true,"^4<",["^13",["^4=",["^13",[[]]]]]],"^4R",true,"^L","^1T","^7","metabase/shared/util/internal/time.cljs","^;",11,"^4@",["^13",[[]]],"^4A",null,"^4B",["^13",[null,null]],"^9",1,"^4C",false,"^8",8,"^4D","^4J","^:",8,"^4F",0,"^4G",true,"^4<",["^13",["^4=",["^13",[[]]]]]],"~$valid?",["^ ","^4;",null,"^5",["^ ","^7","metabase/shared/util/internal/time.cljs","^8",21,"^9",7,"^:",21,"^;",13,"^4<",["^13",["^4=",["^13",[["^4I"]]]]],"^6","Given a Moment, check that it's valid."],"^L","^20","^7","metabase/shared/util/internal/time.cljs","^;",13,"^4@",["^13",[["^4I"]]],"^4A",null,"^4B",["^13",[null,null]],"^9",1,"^4C",false,"^8",21,"^4D",["^K",[null,"^4E","^4J"]],"^:",21,"^4F",1,"^4G",true,"^4<",["^13",["^4=",["^13",[["^4I"]]]]],"^6","Given a Moment, check that it's valid."],"~$day-diff",["^ ","^4;",null,"^5",["^ ","^7","metabase/shared/util/internal/time.cljs","^8",154,"^9",7,"^:",154,"^;",15,"^4<",["^13",["^4=",["^13",[["~$before","~$after"]]]]],"^6","Returns the time elapsed between `before` and `after` in days."],"^L","^23","^7","metabase/shared/util/internal/time.cljs","^;",15,"^4@",["^13",[["^4U","^4V"]]],"^4A",null,"^4B",["^13",[null,null]],"^9",1,"^4C",false,"^8",154,"^4D","^4E","^:",154,"^4F",2,"^4G",true,"^4<",["^13",["^4=",["^13",[["^4U","^4V"]]]]],"^6","Returns the time elapsed between `before` and `after` in days."],"~$parse-time-string",["^ ","^4;",null,"^5",["^ ","^7","metabase/shared/util/internal/time.cljs","^8",147,"^9",7,"^:",147,"^;",24,"^4<",["^13",["^4=",["^13",[["^4I"]]]]],"^6","Parses a time string that has been stripped of any time zone."],"^L","^21","^7","metabase/shared/util/internal/time.cljs","^;",24,"^4@",["^13",[["^4I"]]],"^4A",null,"^4B",["^13",[null,null]],"^9",1,"^4C",false,"^8",147,"^4D","^4J","^:",147,"^4F",1,"^4G",true,"^4<",["^13",["^4=",["^13",[["^4I"]]]]],"^6","Parses a time string that has been stripped of any time zone."],"~$localize",["^ ","^4;",null,"^5",["^ ","^7","metabase/shared/util/internal/time.cljs","^8",136,"^9",7,"^:",136,"^;",15,"^4<",["^13",["^4=",["^13",[["^4I"]]]]],"^6","Given a freshly parsed absolute Moment, convert it to a local one."],"^L","^1X","^7","metabase/shared/util/internal/time.cljs","^;",15,"^4@",["^13",[["^4I"]]],"^4A",null,"^4B",["^13",[null,null]],"^9",1,"^4C",false,"^8",136,"^4D","^4E","^:",136,"^4F",1,"^4G",true,"^4<",["^13",["^4=",["^13",[["^4I"]]]]],"^6","Given a freshly parsed absolute Moment, convert it to a local one."],"~$same-year?",["^ ","^4;",null,"^5",["^ ","^7","metabase/shared/util/internal/time.cljs","^8",41,"^9",7,"^:",41,"^;",17,"^4<",["^13",["^4=",["^13",[["^4>","^4?"]]]]],"^6","True if these two datetimes fall in the same year."],"^L","^1I","^7","metabase/shared/util/internal/time.cljs","^;",17,"^4@",["^13",[["^4>","^4?"]]],"^4A",null,"^4B",["^13",[null,null]],"^9",1,"^4C",false,"^8",41,"^4D","^4E","^:",41,"^4F",2,"^4G",true,"^4<",["^13",["^4=",["^13",[["^4>","^4?"]]]]],"^6","True if these two datetimes fall in the same year."],"~$parse-time-formats",["^ ","^5",["^ ","^7","metabase/shared/util/internal/time.cljs","^8",141,"^9",16,"^:",141,"^;",34,"^4R",true],"^4R",true,"^L","^26","^7","metabase/shared/util/internal/time.cljs","^;",34,"^9",1,"^8",141,"^:",141,"^4N","~$array"],"~$same-month?",["^ ","^4;",null,"^5",["^ ","^7","metabase/shared/util/internal/time.cljs","^8",36,"^9",7,"^:",36,"^;",18,"^4<",["^13",["^4=",["^13",[["^4>","^4?"]]]]],"^6","True if these two datetimes fall in the same (year and) month."],"^L","^24","^7","metabase/shared/util/internal/time.cljs","^;",18,"^4@",["^13",[["^4>","^4?"]]],"^4A",null,"^4B",["^13",[null,null]],"^9",1,"^4C",false,"^8",36,"^4D","^4E","^:",36,"^4F",2,"^4G",true,"^4<",["^13",["^4=",["^13",[["^4>","^4?"]]]]],"^6","True if these two datetimes fall in the same (year and) month."],"~$first-day-of-week",["^ ","^4;",null,"^5",["^ ","^7","metabase/shared/util/internal/time.cljs","^8",47,"^9",7,"^:",47,"^;",24,"^4<",["^13",["^4=",["^13",[[]]]]],"^6","The first day of the week varies by locale, but Dashboard has a setting that overrides it.\n  In CLJS, Moment is already configured with that setting."],"^L","^28","^7","metabase/shared/util/internal/time.cljs","^;",24,"^4@",["^13",[[]]],"^4A",null,"^4B",["^13",[null,null]],"^9",1,"^4C",false,"^8",47,"^4D",["^K",["~$cljs.core/Keyword","~$clj-nil"]],"^:",47,"^4F",0,"^4G",true,"^4<",["^13",["^4=",["^13",[[]]]]],"^6","The first day of the week varies by locale, but Dashboard has a setting that overrides it.\n  In CLJS, Moment is already configured with that setting."],"~$magic-base-date",["^ ","^4;",null,"^5",["^ ","^7","metabase/shared/util/internal/time.cljs","^8",85,"^9",8,"^:",85,"^;",23,"^4R",true,"^4<",["^13",["^4=",["^13",[[]]]]],"^6","Some of the date coercions are relative, and not directly involved with any particular month.\n  To avoid errors we need to use a reference date that is (a) in a month with 31 days,(b) in a leap year.\n  This uses 2016-01-01 for the purpose.\n  This is a function that returns fresh values, since Moments are mutable."],"^4R",true,"^L","^1K","^7","metabase/shared/util/internal/time.cljs","^;",23,"^4@",["^13",[[]]],"^4A",null,"^4B",["^13",[null,null]],"^9",1,"^4C",false,"^8",85,"^4D","^4J","^:",85,"^4F",0,"^4G",true,"^4<",["^13",["^4=",["^13",[[]]]]],"^6","Some of the date coercions are relative, and not directly involved with any particular month.\n  To avoid errors we need to use a reference date that is (a) in a month with 31 days,(b) in a leap year.\n  This uses 2016-01-01 for the purpose.\n  This is a function that returns fresh values, since Moments are mutable."]],"^11",["^ ","^D","^D"],"~:cljs.analyzer/constants",["^ ","^Z",["^K",["~:else","~:unit","~:default","~:day-of-week","~:hour-of-day","~:month-of-year","~:day-of-month","~:year","~:day-of-year","~:week-of-year","~:quarter-of-year","~:minute-of-hour"]],"~:order",["^58","^57","^59","^56","^5A","^5:","^5<","^5>","^5?","^5;","^5@","^5="]],"^16",["^ ","^[",["^K",[]]],"^17",["^ ","^P",["^ ","^15","^Y"]],"^18",["^X","^D","^Q","^V"]],"^S","^M","~:ns-specs",["^ "],"~:ns-spec-vars",["^K",[]],"~:compiler-options",["^2=",[["^5E","~:static-fns"],true,["^5E","~:shadow-tweaks"],null,["^5E","~:source-map-inline"],null,["^5E","~:elide-asserts"],false,["^5E","~:optimize-constants"],null,["^5E","^1="],null,["^5E","~:external-config"],null,["^5E","~:tooling-config"],null,["^5E","~:emit-constants"],null,["^5E","~:load-tests"],null,["^5E","~:form-size-threshold"],null,["^5E","~:global-goog-object&array"],null,["^5E","~:data-readers"],null,["^5E","~:infer-externs"],"~:auto",["^5E","^1?"],["^K",["^1@","^1A"]],["~:js-options","~:js-provider"],"^[",["~:mode"],"~:dev",["^5E","~:fn-invoke-direct"],null,["^5E","~:source-map"],"/dev/null"]]]