["^ ","~:output",["^ ","~:js","goog.provide('metabase.lib.convert');\nmetabase.lib.convert._STAR_pMBQL_uuid__GT_legacy_index_STAR_ = cljs.core.PersistentArrayMap.EMPTY;\nmetabase.lib.convert._STAR_legacy_index__GT_pMBQL_uuid_STAR_ = cljs.core.PersistentArrayMap.EMPTY;\nmetabase.lib.convert.clean_location = (function metabase$lib$convert$clean_location(almost_stage,error_type,error_location){\nvar operate_on_parent_QMARK_ = new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(\"malli.core\",\"missing-key\",\"malli.core/missing-key\",1439107666),null,new cljs.core.Keyword(\"malli.core\",\"end-of-input\",\"malli.core/end-of-input\",-491237771),null], null), null);\nvar location__$1 = (cljs.core.truth_((operate_on_parent_QMARK_.cljs$core$IFn$_invoke$arity$1 ? operate_on_parent_QMARK_.cljs$core$IFn$_invoke$arity$1(error_type) : operate_on_parent_QMARK_.call(null,error_type)))?cljs.core.drop_last.cljs$core$IFn$_invoke$arity$2((2),error_location):cljs.core.drop_last.cljs$core$IFn$_invoke$arity$2((1),error_location));\nvar vec__79332 = (cljs.core.truth_((operate_on_parent_QMARK_.cljs$core$IFn$_invoke$arity$1 ? operate_on_parent_QMARK_.cljs$core$IFn$_invoke$arity$1(error_type) : operate_on_parent_QMARK_.call(null,error_type)))?cljs.core.take_last((2),error_location):cljs.core.take_last((1),error_location));\nvar location_key = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__79332,(0),null);\nif(cljs.core.seq(location__$1)){\nreturn cljs.core.update_in.cljs$core$IFn$_invoke$arity$3(almost_stage,location__$1,(function (error_loc){\nvar result = cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(error_loc,location_key,null);\nif(cljs.core.vector_QMARK_(error_loc)){\nreturn cljs.core.into.cljs$core$IFn$_invoke$arity$3(cljs.core.PersistentVector.EMPTY,cljs.core.remove.cljs$core$IFn$_invoke$arity$1(cljs.core.nil_QMARK_),result);\n} else {\nif(cljs.core.map_QMARK_(error_loc)){\nreturn metabase.util.remove_nils(result);\n} else {\nreturn result;\n\n}\n}\n}));\n} else {\nreturn cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(almost_stage,location_key);\n}\n});\nmetabase.lib.convert.stage_keys = new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 7, [new cljs.core.Keyword(null,\"filters\",\"filters\",974726919),null,new cljs.core.Keyword(null,\"fields\",\"fields\",-1932066230),null,new cljs.core.Keyword(null,\"joins\",\"joins\",1033962699),null,new cljs.core.Keyword(null,\"expressions\",\"expressions\",255689909),null,new cljs.core.Keyword(null,\"breakout\",\"breakout\",-732419050),null,new cljs.core.Keyword(null,\"order-by\",\"order-by\",1527318070),null,new cljs.core.Keyword(null,\"aggregation\",\"aggregation\",1597476696),null], null), null);\nmetabase.lib.convert.clean_stage = (function metabase$lib$convert$clean_stage(almost_stage){\nvar almost_stage__$1 = almost_stage;\nvar removals = cljs.core.PersistentVector.EMPTY;\nwhile(true){\nvar temp__5802__auto__ = cljs.core.first(cljs.core.map.cljs$core$IFn$_invoke$arity$2(cljs.core.juxt.cljs$core$IFn$_invoke$arity$2(new cljs.core.Keyword(null,\"type\",\"type\",1174270348),new cljs.core.Keyword(null,\"in\",\"in\",-1531184865)),cljs.core.filter.cljs$core$IFn$_invoke$arity$2(cljs.core.comp.cljs$core$IFn$_invoke$arity$3(metabase.lib.convert.stage_keys,cljs.core.first,new cljs.core.Keyword(null,\"in\",\"in\",-1531184865)),new cljs.core.Keyword(null,\"errors\",\"errors\",-908790718).cljs$core$IFn$_invoke$arity$1(malli.core.explain.cljs$core$IFn$_invoke$arity$2(new cljs.core.Keyword(\"metabase.lib.schema\",\"stage.mbql\",\"metabase.lib.schema/stage.mbql\",1051351388),almost_stage__$1)))));\nif(cljs.core.truth_(temp__5802__auto__)){\nvar vec__79356 = temp__5802__auto__;\nvar error_type = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__79356,(0),null);\nvar error_location = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__79356,(1),null);\nvar new_stage = metabase.lib.convert.clean_location(almost_stage__$1,error_type,error_location);\nvar level__47393__auto___79823 = metabase.util.log.glogi_level(new cljs.core.Keyword(null,\"warn\",\"warn\",-436710552));\nvar logger__47394__auto___79824 = \"metabase.lib.convert\";\nif(cljs.core.truth_(metabase.util.log.is_loggable_QMARK_(logger__47394__auto___79824,level__47393__auto___79823))){\nvar x__47395__auto___79825 = \"Clean: Removing bad clause in %s due to error %s:\\n%s\";\nif((x__47395__auto___79825 instanceof Error)){\nlambdaisland.glogi.log.cljs$core$IFn$_invoke$arity$4(logger__47394__auto___79824,level__47393__auto___79823,metabase.util.log.format_msg.cljs$core$IFn$_invoke$arity$variadic(metabase.util.colorize.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"yellow\",\"yellow\",-881035449),cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([error_location], 0))], 0)),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([metabase.util.colorize.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"yellow\",\"yellow\",-881035449),cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([(function (){var or__5045__auto__ = error_type;\nif(cljs.core.truth_(or__5045__auto__)){\nreturn or__5045__auto__;\n} else {\nreturn malli.error.humanize.cljs$core$IFn$_invoke$arity$1(malli.core.explain.cljs$core$IFn$_invoke$arity$2(new cljs.core.Keyword(\"metabase.lib.schema\",\"stage.mbql\",\"metabase.lib.schema/stage.mbql\",1051351388),almost_stage__$1));\n}\n})()], 0))], 0)),metabase.util.colorize.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"red\",\"red\",-969428204),metabase.util.pprint_to_str.cljs$core$IFn$_invoke$arity$1(cljs.core.first(clojure.data.diff(almost_stage__$1,new_stage)))], 0))], 0)),x__47395__auto___79825);\n} else {\nlambdaisland.glogi.log.cljs$core$IFn$_invoke$arity$4(logger__47394__auto___79824,level__47393__auto___79823,metabase.util.log.format_msg.cljs$core$IFn$_invoke$arity$variadic(x__47395__auto___79825,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([metabase.util.colorize.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"yellow\",\"yellow\",-881035449),cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([error_location], 0))], 0)),metabase.util.colorize.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"yellow\",\"yellow\",-881035449),cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([(function (){var or__5045__auto__ = error_type;\nif(cljs.core.truth_(or__5045__auto__)){\nreturn or__5045__auto__;\n} else {\nreturn malli.error.humanize.cljs$core$IFn$_invoke$arity$1(malli.core.explain.cljs$core$IFn$_invoke$arity$2(new cljs.core.Keyword(\"metabase.lib.schema\",\"stage.mbql\",\"metabase.lib.schema/stage.mbql\",1051351388),almost_stage__$1));\n}\n})()], 0))], 0)),metabase.util.colorize.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"red\",\"red\",-969428204),metabase.util.pprint_to_str.cljs$core$IFn$_invoke$arity$1(cljs.core.first(clojure.data.diff(almost_stage__$1,new_stage)))], 0))], 0)),null);\n}\n} else {\n}\n\nif(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(new_stage,almost_stage__$1)){\nreturn almost_stage__$1;\n} else {\nvar G__79829 = new_stage;\nvar G__79830 = cljs.core.conj.cljs$core$IFn$_invoke$arity$2(removals,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [error_type,error_location], null));\nalmost_stage__$1 = G__79829;\nremovals = G__79830;\ncontinue;\n}\n} else {\nreturn almost_stage__$1;\n}\nbreak;\n}\n});\nmetabase.lib.convert.clean = (function metabase$lib$convert$clean(almost_query){\nvar almost_query__$1 = almost_query;\nvar stage_index = (0);\nwhile(true){\nvar current_stage = cljs.core.nth.cljs$core$IFn$_invoke$arity$2(new cljs.core.Keyword(null,\"stages\",\"stages\",-442109532).cljs$core$IFn$_invoke$arity$1(almost_query__$1),stage_index);\nvar new_stage = metabase.lib.convert.clean_stage(current_stage);\nif(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(current_stage,new_stage)){\nif(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(stage_index,(cljs.core.count(new cljs.core.Keyword(null,\"stages\",\"stages\",-442109532).cljs$core$IFn$_invoke$arity$1(almost_query__$1)) - (1)))){\nreturn almost_query__$1;\n} else {\nvar G__79832 = almost_query__$1;\nvar G__79833 = (stage_index + (1));\nalmost_query__$1 = G__79832;\nstage_index = G__79833;\ncontinue;\n}\n} else {\nvar G__79834 = cljs.core.update.cljs$core$IFn$_invoke$arity$5(almost_query__$1,new cljs.core.Keyword(null,\"stages\",\"stages\",-442109532),cljs.core.assoc,stage_index,new_stage);\nvar G__79835 = stage_index;\nalmost_query__$1 = G__79834;\nstage_index = G__79835;\ncontinue;\n}\nbreak;\n}\n});\nif((typeof metabase !== 'undefined') && (typeof metabase.lib !== 'undefined') && (typeof metabase.lib.convert !== 'undefined') && (typeof metabase.lib.convert.__GT_pMBQL !== 'undefined')){\n} else {\n/**\n * Coerce something to pMBQL (the version of MBQL manipulated by Dashboard Lib v2) if it's not already pMBQL.\n */\nmetabase.lib.convert.__GT_pMBQL = (function (){var method_table__5642__auto__ = cljs.core.atom.cljs$core$IFn$_invoke$arity$1(cljs.core.PersistentArrayMap.EMPTY);\nvar prefer_table__5643__auto__ = cljs.core.atom.cljs$core$IFn$_invoke$arity$1(cljs.core.PersistentArrayMap.EMPTY);\nvar method_cache__5644__auto__ = cljs.core.atom.cljs$core$IFn$_invoke$arity$1(cljs.core.PersistentArrayMap.EMPTY);\nvar cached_hierarchy__5645__auto__ = cljs.core.atom.cljs$core$IFn$_invoke$arity$1(cljs.core.PersistentArrayMap.EMPTY);\nvar hierarchy__5646__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$3(new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"hierarchy\",\"hierarchy\",-1053470341),metabase.lib.hierarchy.hierarchy], null),new cljs.core.Keyword(null,\"hierarchy\",\"hierarchy\",-1053470341),(function (){var fexpr__79380 = cljs.core.get_global_hierarchy;\nreturn (fexpr__79380.cljs$core$IFn$_invoke$arity$0 ? fexpr__79380.cljs$core$IFn$_invoke$arity$0() : fexpr__79380.call(null));\n})());\nreturn (new cljs.core.MultiFn(cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(\"metabase.lib.convert\",\"->pMBQL\"),metabase.lib.dispatch.dispatch_value,new cljs.core.Keyword(null,\"default\",\"default\",-1987822328),hierarchy__5646__auto__,method_table__5642__auto__,prefer_table__5643__auto__,method_cache__5644__auto__,cached_hierarchy__5645__auto__));\n})();\n}\nmetabase.lib.convert.default_MBQL_clause__GT_pMBQL = (function metabase$lib$convert$default_MBQL_clause__GT_pMBQL(mbql_clause){\nvar last_elem = cljs.core.peek(mbql_clause);\nvar last_elem_option_QMARK_ = cljs.core.map_QMARK_(last_elem);\nvar vec__79389 = (function (){var G__79392 = mbql_clause;\nif(last_elem_option_QMARK_){\nreturn cljs.core.pop(G__79392);\n} else {\nreturn G__79392;\n}\n})();\nvar seq__79390 = cljs.core.seq(vec__79389);\nvar first__79391 = cljs.core.first(seq__79390);\nvar seq__79390__$1 = cljs.core.next(seq__79390);\nvar clause_type = first__79391;\nvar args = seq__79390__$1;\nvar options = ((last_elem_option_QMARK_)?last_elem:cljs.core.PersistentArrayMap.EMPTY);\nreturn metabase.lib.options.ensure_uuid(cljs.core.into.cljs$core$IFn$_invoke$arity$3(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [clause_type,options], null),cljs.core.map.cljs$core$IFn$_invoke$arity$1(metabase.lib.convert.__GT_pMBQL),args));\n});\nmetabase.lib.convert.__GT_pMBQL.cljs$core$IMultiFn$_add_method$arity$3(null,new cljs.core.Keyword(null,\"default\",\"default\",-1987822328),(function (x){\nif(((cljs.core.vector_QMARK_(x)) && ((cljs.core.first(x) instanceof cljs.core.Keyword)))){\nreturn metabase.lib.convert.default_MBQL_clause__GT_pMBQL(x);\n} else {\nreturn x;\n}\n}));\nmetabase.lib.convert.__GT_pMBQL.cljs$core$IMultiFn$_add_method$arity$3(null,new cljs.core.Keyword(\"mbql\",\"query\",\"mbql/query\",-1285688662),(function (query){\nreturn query;\n}));\n/**\n * In legacy MBQL, join `:alias` was optional, and if unspecified, this was the default alias used. In reality all joins\n *   normally had an explicit `:alias` since the QB would generate one and you generally need one to do useful things\n *   with the join anyway.\n * \n *   Since the new pMBQL schema makes `:alias` required, we'll explicitly add the implicit default when we encounter a\n *   join without an alias, and remove it so we can round-trip without changes.\n */\nmetabase.lib.convert.legacy_default_join_alias = \"__join\";\n/**\n * Join `:alias`es had to be unique in legacy MBQL, but they were optional. Since we add [[legacy-default-join-alias]]\n *   to each join that doesn't have an explicit `:alias` for pMBQL compatibility now, we need to deduplicate the aliases\n *   if it is used more than once.\n * \n *   Only deduplicate the default `__join` aliases; we don't want the [[lib.util/unique-name-generator]] to touch other\n *   aliases and truncate them or anything like that.\n */\nmetabase.lib.convert.deduplicate_join_aliases = (function metabase$lib$convert$deduplicate_join_aliases(joins){\nvar unique_name_fn = metabase.lib.util.unique_name_generator();\nreturn cljs.core.mapv.cljs$core$IFn$_invoke$arity$2((function (join){\nvar G__79409 = join;\nif(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(new cljs.core.Keyword(null,\"alias\",\"alias\",-2039751630).cljs$core$IFn$_invoke$arity$1(join),metabase.lib.convert.legacy_default_join_alias)){\nreturn cljs.core.update.cljs$core$IFn$_invoke$arity$3(G__79409,new cljs.core.Keyword(null,\"alias\",\"alias\",-2039751630),unique_name_fn);\n} else {\nreturn G__79409;\n}\n}),joins);\n});\n/**\n * If a query `stage` has a legacy `card__<id>` `:source-table`, convert it to a pMBQL-style `:source-card`.\n */\nmetabase.lib.convert.stage_source_card_id__GT_pMBQL = (function metabase$lib$convert$stage_source_card_id__GT_pMBQL(stage){\nif(typeof new cljs.core.Keyword(null,\"source-table\",\"source-table\",-225307692).cljs$core$IFn$_invoke$arity$1(stage) === 'string'){\nreturn cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(stage,new cljs.core.Keyword(null,\"source-card\",\"source-card\",-1580820390),metabase.lib.util.legacy_string_table_id__GT_card_id(new cljs.core.Keyword(null,\"source-table\",\"source-table\",-225307692).cljs$core$IFn$_invoke$arity$1(stage))),new cljs.core.Keyword(null,\"source-table\",\"source-table\",-225307692));\n} else {\nreturn stage;\n}\n});\nmetabase.lib.convert.__GT_pMBQL.cljs$core$IMultiFn$_add_method$arity$3(null,new cljs.core.Keyword(\"mbql.stage\",\"mbql\",\"mbql.stage/mbql\",1578747798),(function (stage){\nvar aggregations = metabase.lib.convert.__GT_pMBQL.cljs$core$IFn$_invoke$arity$1(new cljs.core.Keyword(null,\"aggregation\",\"aggregation\",1597476696).cljs$core$IFn$_invoke$arity$1(stage));\nvar expressions = cljs.core.not_empty(cljs.core.mapv.cljs$core$IFn$_invoke$arity$2((function (p__79444){\nvar vec__79445 = p__79444;\nvar k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__79445,(0),null);\nvar v = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__79445,(1),null);\nreturn metabase.lib.util.named_expression_clause(metabase.lib.convert.__GT_pMBQL.cljs$core$IFn$_invoke$arity$1(v),k);\n}),new cljs.core.Keyword(null,\"expressions\",\"expressions\",255689909).cljs$core$IFn$_invoke$arity$1(stage)));\nvar _STAR_legacy_index__GT_pMBQL_uuid_STAR__orig_val__79449 = metabase.lib.convert._STAR_legacy_index__GT_pMBQL_uuid_STAR_;\nvar _STAR_legacy_index__GT_pMBQL_uuid_STAR__temp_val__79450 = cljs.core.into.cljs$core$IFn$_invoke$arity$3(cljs.core.PersistentArrayMap.EMPTY,cljs.core.map_indexed.cljs$core$IFn$_invoke$arity$1((function (idx,p__79455){\nvar vec__79456 = p__79455;\nvar _tag = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__79456,(0),null);\nvar map__79459 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__79456,(1),null);\nvar map__79459__$1 = cljs.core.__destructure_map(map__79459);\nvar ag_uuid = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__79459__$1,new cljs.core.Keyword(\"lib\",\"uuid\",\"lib/uuid\",-2145250720));\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [idx,ag_uuid], null);\n})),aggregations);\n(metabase.lib.convert._STAR_legacy_index__GT_pMBQL_uuid_STAR_ = _STAR_legacy_index__GT_pMBQL_uuid_STAR__temp_val__79450);\n\ntry{var stage__$1 = medley.core.assoc_some.cljs$core$IFn$_invoke$arity$variadic(metabase.lib.convert.stage_source_card_id__GT_pMBQL(stage),new cljs.core.Keyword(null,\"aggregation\",\"aggregation\",1597476696),aggregations,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"expressions\",\"expressions\",255689909),expressions], 0));\nvar stage__$2 = cljs.core.reduce.cljs$core$IFn$_invoke$arity$3((function (stage__$2,k){\nif(cljs.core.not(cljs.core.get.cljs$core$IFn$_invoke$arity$2(stage__$2,k))){\nreturn stage__$2;\n} else {\nreturn cljs.core.update.cljs$core$IFn$_invoke$arity$3(stage__$2,k,metabase.lib.convert.__GT_pMBQL);\n}\n}),stage__$1,cljs.core.disj.cljs$core$IFn$_invoke$arity$variadic(metabase.lib.convert.stage_keys,new cljs.core.Keyword(null,\"aggregation\",\"aggregation\",1597476696),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"expressions\",\"expressions\",255689909)], 0)));\nvar G__79468 = stage__$2;\nif(cljs.core.truth_(new cljs.core.Keyword(null,\"joins\",\"joins\",1033962699).cljs$core$IFn$_invoke$arity$1(stage__$2))){\nreturn cljs.core.update.cljs$core$IFn$_invoke$arity$3(G__79468,new cljs.core.Keyword(null,\"joins\",\"joins\",1033962699),metabase.lib.convert.deduplicate_join_aliases);\n} else {\nreturn G__79468;\n}\n}finally {(metabase.lib.convert._STAR_legacy_index__GT_pMBQL_uuid_STAR_ = _STAR_legacy_index__GT_pMBQL_uuid_STAR__orig_val__79449);\n}}));\nmetabase.lib.convert.__GT_pMBQL.cljs$core$IMultiFn$_add_method$arity$3(null,new cljs.core.Keyword(\"mbql.stage\",\"native\",\"mbql.stage/native\",359422194),(function (stage){\nreturn medley.core.update_existing.cljs$core$IFn$_invoke$arity$4(stage,new cljs.core.Keyword(null,\"template-tags\",\"template-tags\",1853115685),cljs.core.update_vals,(function (tag){\nreturn medley.core.update_existing.cljs$core$IFn$_invoke$arity$3(tag,new cljs.core.Keyword(null,\"dimension\",\"dimension\",543254198),metabase.lib.convert.__GT_pMBQL);\n}));\n}));\nmetabase.lib.convert.__GT_pMBQL.cljs$core$IMultiFn$_add_method$arity$3(null,new cljs.core.Keyword(\"mbql\",\"join\",\"mbql/join\",-709512370),(function (join){\nvar join__$1 = cljs.core.update.cljs$core$IFn$_invoke$arity$3(cljs.core.update.cljs$core$IFn$_invoke$arity$3(join,new cljs.core.Keyword(null,\"conditions\",\"conditions\",-1647236270),metabase.lib.convert.__GT_pMBQL),new cljs.core.Keyword(null,\"stages\",\"stages\",-442109532),metabase.lib.convert.__GT_pMBQL);\nvar G__79478 = join__$1;\nvar G__79478__$1 = (cljs.core.truth_(new cljs.core.Keyword(null,\"fields\",\"fields\",-1932066230).cljs$core$IFn$_invoke$arity$1(join__$1))?cljs.core.update.cljs$core$IFn$_invoke$arity$3(G__79478,new cljs.core.Keyword(null,\"fields\",\"fields\",-1932066230),(function (fields){\nif(cljs.core.seqable_QMARK_(fields)){\nreturn cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(metabase.lib.convert.__GT_pMBQL,fields);\n} else {\nreturn cljs.core.keyword.cljs$core$IFn$_invoke$arity$1(fields);\n}\n})):G__79478);\nif(cljs.core.not(new cljs.core.Keyword(null,\"alias\",\"alias\",-2039751630).cljs$core$IFn$_invoke$arity$1(join__$1))){\nreturn cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__79478__$1,new cljs.core.Keyword(null,\"alias\",\"alias\",-2039751630),metabase.lib.convert.legacy_default_join_alias);\n} else {\nreturn G__79478__$1;\n}\n}));\nmetabase.lib.convert.__GT_pMBQL.cljs$core$IMultiFn$_add_method$arity$3(null,new cljs.core.Keyword(\"dispatch-type\",\"sequential\",\"dispatch-type/sequential\",1056993969),(function (xs){\nreturn cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(metabase.lib.convert.__GT_pMBQL,xs);\n}));\nmetabase.lib.convert.__GT_pMBQL.cljs$core$IMultiFn$_add_method$arity$3(null,new cljs.core.Keyword(\"dispatch-type\",\"map\",\"dispatch-type/map\",-758153422),(function (m){\nif(cljs.core.truth_(new cljs.core.Keyword(null,\"type\",\"type\",1174270348).cljs$core$IFn$_invoke$arity$1(m))){\nreturn metabase.lib.convert.clean(cljs.core.update.cljs$core$IFn$_invoke$arity$3(metabase.lib.util.pipeline(m),new cljs.core.Keyword(null,\"stages\",\"stages\",-442109532),(function (stages){\nreturn cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(metabase.lib.convert.__GT_pMBQL,stages);\n})));\n} else {\nreturn cljs.core.update_vals(m,metabase.lib.convert.__GT_pMBQL);\n}\n}));\nmetabase.lib.convert.__GT_pMBQL.cljs$core$IMultiFn$_add_method$arity$3(null,new cljs.core.Keyword(null,\"field\",\"field\",-1302436500),(function (p__79487){\nvar vec__79489 = p__79487;\nvar _tag = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__79489,(0),null);\nvar x = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__79489,(1),null);\nvar y = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__79489,(2),null);\nvar vec__79495 = ((cljs.core.map_QMARK_(x))?new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [y,x], null):new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [x,y], null));\nvar id_or_name = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__79495,(0),null);\nvar options = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__79495,(1),null);\nreturn metabase.lib.options.ensure_uuid(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"field\",\"field\",-1302436500),options,id_or_name], null));\n}));\nmetabase.lib.convert.__GT_pMBQL.cljs$core$IMultiFn$_add_method$arity$3(null,new cljs.core.Keyword(null,\"value\",\"value\",305978217),(function (p__79498){\nvar vec__79499 = p__79498;\nvar _tag = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__79499,(0),null);\nvar value = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__79499,(1),null);\nvar opts = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__79499,(2),null);\nvar opts__$1 = clojure.set.rename_keys(opts,new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null,\"base_type\",\"base_type\",1908272670),new cljs.core.Keyword(null,\"base-type\",\"base-type\",1167971299),new cljs.core.Keyword(null,\"semantic_type\",\"semantic_type\",272485089),new cljs.core.Keyword(null,\"semantic-type\",\"semantic-type\",-310722107),new cljs.core.Keyword(null,\"database_type\",\"database_type\",-54700895),new cljs.core.Keyword(null,\"database-type\",\"database-type\",-426840562)], null));\nvar opts__$2 = cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(opts__$1,new cljs.core.Keyword(null,\"effective-type\",\"effective-type\",-355725458),(function (){var or__5045__auto__ = new cljs.core.Keyword(null,\"effective-type\",\"effective-type\",-355725458).cljs$core$IFn$_invoke$arity$1(opts__$1);\nif(cljs.core.truth_(or__5045__auto__)){\nreturn or__5045__auto__;\n} else {\nvar or__5045__auto____$1 = new cljs.core.Keyword(null,\"base-type\",\"base-type\",1167971299).cljs$core$IFn$_invoke$arity$1(opts__$1);\nif(cljs.core.truth_(or__5045__auto____$1)){\nreturn or__5045__auto____$1;\n} else {\nreturn metabase.lib.schema.expression.type_of(value);\n}\n}\n})());\nreturn metabase.lib.options.ensure_uuid(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"value\",\"value\",305978217),opts__$2,value], null));\n}));\nmetabase.lib.convert.__GT_pMBQL.cljs$core$IMultiFn$_add_method$arity$3(null,new cljs.core.Keyword(null,\"case\",\"case\",1143702196),(function (p__79507){\nvar vec__79508 = p__79507;\nvar _tag = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__79508,(0),null);\nvar pred_expr_pairs = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__79508,(1),null);\nvar options = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__79508,(2),null);\nvar default$ = new cljs.core.Keyword(null,\"default\",\"default\",-1987822328).cljs$core$IFn$_invoke$arity$1(options);\nvar G__79512 = new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"case\",\"case\",1143702196),cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(options,new cljs.core.Keyword(null,\"default\",\"default\",-1987822328)),cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(metabase.lib.convert.__GT_pMBQL,pred_expr_pairs)], null);\nvar G__79512__$1 = metabase.lib.options.ensure_uuid(G__79512)\n;\nif((!((default$ == null)))){\nreturn cljs.core.conj.cljs$core$IFn$_invoke$arity$2(G__79512__$1,metabase.lib.convert.__GT_pMBQL.cljs$core$IFn$_invoke$arity$1(default$));\n} else {\nreturn G__79512__$1;\n}\n}));\nmetabase.lib.convert.__GT_pMBQL.cljs$core$IMultiFn$_add_method$arity$3(null,new cljs.core.Keyword(null,\"expression\",\"expression\",202311876),(function (p__79519){\nvar vec__79520 = p__79519;\nvar tag = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__79520,(0),null);\nvar value = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__79520,(1),null);\nvar opts = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__79520,(2),null);\nreturn metabase.lib.options.ensure_uuid(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [tag,opts,value], null));\n}));\nmetabase.lib.convert.get_or_throw_BANG_ = (function metabase$lib$convert$get_or_throw_BANG_(m,k){\nvar result = cljs.core.get.cljs$core$IFn$_invoke$arity$3(m,k,new cljs.core.Keyword(\"metabase.lib.convert\",\"not-found\",\"metabase.lib.convert/not-found\",967996550));\nif((!(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(result,new cljs.core.Keyword(\"metabase.lib.convert\",\"not-found\",\"metabase.lib.convert/not-found\",967996550))))){\nreturn result;\n} else {\nthrow cljs.core.ex_info.cljs$core$IFn$_invoke$arity$2([\"Unable to find \",cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([k], 0)),\" in map.\"].join(''),new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"m\",\"m\",1632677161),m,new cljs.core.Keyword(null,\"k\",\"k\",-2146297393),k], null));\n}\n});\nmetabase.lib.convert.__GT_pMBQL.cljs$core$IMultiFn$_add_method$arity$3(null,new cljs.core.Keyword(null,\"aggregation\",\"aggregation\",1597476696),(function (p__79527){\nvar vec__79528 = p__79527;\nvar tag = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__79528,(0),null);\nvar value = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__79528,(1),null);\nvar opts = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__79528,(2),null);\nreturn metabase.lib.options.ensure_uuid(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [tag,opts,metabase.lib.convert.get_or_throw_BANG_(metabase.lib.convert._STAR_legacy_index__GT_pMBQL_uuid_STAR_,value)], null));\n}));\nmetabase.lib.convert.__GT_pMBQL.cljs$core$IMultiFn$_add_method$arity$3(null,new cljs.core.Keyword(null,\"aggregation-options\",\"aggregation-options\",-1904917550),(function (p__79536){\nvar vec__79537 = p__79536;\nvar _tag = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__79537,(0),null);\nvar aggregation = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__79537,(1),null);\nvar options = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__79537,(2),null);\nvar vec__79540 = metabase.lib.convert.__GT_pMBQL.cljs$core$IFn$_invoke$arity$1(aggregation);\nvar seq__79541 = cljs.core.seq(vec__79540);\nvar first__79542 = cljs.core.first(seq__79541);\nvar seq__79541__$1 = cljs.core.next(seq__79541);\nvar tag = first__79542;\nvar first__79542__$1 = cljs.core.first(seq__79541__$1);\nvar seq__79541__$2 = cljs.core.next(seq__79541__$1);\nvar opts = first__79542__$1;\nvar args = seq__79541__$2;\nreturn cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [tag,cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([opts,options], 0))], null),args);\n}));\n/**\n * Convert a legacy 'inner query' to a full legacy 'outer query' so you can pass it to stuff\n *   like [[metabase.mbql.normalize/normalize]], and then probably to [[->pMBQL]].\n */\nmetabase.lib.convert.legacy_query_from_inner_query = (function metabase$lib$convert$legacy_query_from_inner_query(database_id,inner_query){\nreturn cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"database\",\"database\",1849087575),database_id,new cljs.core.Keyword(null,\"type\",\"type\",1174270348),new cljs.core.Keyword(null,\"query\",\"query\",-1288509510)], null),(cljs.core.truth_(new cljs.core.Keyword(null,\"native\",\"native\",-613060878).cljs$core$IFn$_invoke$arity$1(inner_query))?new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"native\",\"native\",-613060878),clojure.set.rename_keys(inner_query,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"native\",\"native\",-613060878),new cljs.core.Keyword(null,\"query\",\"query\",-1288509510)], null))], null):new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"query\",\"query\",-1288509510),inner_query], null))], 0));\n});\nif((typeof metabase !== 'undefined') && (typeof metabase.lib !== 'undefined') && (typeof metabase.lib.convert !== 'undefined') && (typeof metabase.lib.convert.__GT_legacy_MBQL !== 'undefined')){\n} else {\n/**\n * Coerce something to legacy MBQL (the version of MBQL understood by the query processor and Dashboard Lib v1) if it's\n *   not already legacy MBQL.\n */\nmetabase.lib.convert.__GT_legacy_MBQL = (function (){var method_table__5642__auto__ = cljs.core.atom.cljs$core$IFn$_invoke$arity$1(cljs.core.PersistentArrayMap.EMPTY);\nvar prefer_table__5643__auto__ = cljs.core.atom.cljs$core$IFn$_invoke$arity$1(cljs.core.PersistentArrayMap.EMPTY);\nvar method_cache__5644__auto__ = cljs.core.atom.cljs$core$IFn$_invoke$arity$1(cljs.core.PersistentArrayMap.EMPTY);\nvar cached_hierarchy__5645__auto__ = cljs.core.atom.cljs$core$IFn$_invoke$arity$1(cljs.core.PersistentArrayMap.EMPTY);\nvar hierarchy__5646__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$3(new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"hierarchy\",\"hierarchy\",-1053470341),metabase.lib.hierarchy.hierarchy], null),new cljs.core.Keyword(null,\"hierarchy\",\"hierarchy\",-1053470341),(function (){var fexpr__79546 = cljs.core.get_global_hierarchy;\nreturn (fexpr__79546.cljs$core$IFn$_invoke$arity$0 ? fexpr__79546.cljs$core$IFn$_invoke$arity$0() : fexpr__79546.call(null));\n})());\nreturn (new cljs.core.MultiFn(cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(\"metabase.lib.convert\",\"->legacy-MBQL\"),metabase.lib.dispatch.dispatch_value,new cljs.core.Keyword(null,\"default\",\"default\",-1987822328),hierarchy__5646__auto__,method_table__5642__auto__,prefer_table__5643__auto__,method_cache__5644__auto__,cached_hierarchy__5645__auto__));\n})();\n}\n/**\n * Remove any keys starting with the `:lib/` namespace from map `m`.\n * \n *   No args = return transducer to remove `:lib/` keys from a map. One arg = update a map `m`.\n */\nmetabase.lib.convert.disqualify = (function metabase$lib$convert$disqualify(var_args){\nvar G__79552 = arguments.length;\nswitch (G__79552) {\ncase 0:\nreturn metabase.lib.convert.disqualify.cljs$core$IFn$_invoke$arity$0();\n\nbreak;\ncase 1:\nreturn metabase.lib.convert.disqualify.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\n(metabase.lib.convert.disqualify.cljs$core$IFn$_invoke$arity$0 = (function (){\nreturn cljs.core.remove.cljs$core$IFn$_invoke$arity$1((function (p__79554){\nvar vec__79555 = p__79554;\nvar k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__79555,(0),null);\nvar _v = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__79555,(1),null);\nreturn ((cljs.core.qualified_keyword_QMARK_(k)) && (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(cljs.core.namespace(k),\"lib\")));\n}));\n}));\n\n(metabase.lib.convert.disqualify.cljs$core$IFn$_invoke$arity$1 = (function (m){\nreturn cljs.core.into.cljs$core$IFn$_invoke$arity$3(cljs.core.PersistentArrayMap.EMPTY,metabase.lib.convert.disqualify.cljs$core$IFn$_invoke$arity$0(),m);\n}));\n\n(metabase.lib.convert.disqualify.cljs$lang$maxFixedArity = 1);\n\n/**\n * Convert an options map in an MBQL clause to the equivalent shape for legacy MBQL. Remove `:lib/*` keys and\n *   `:effective-type`, which is not used in options maps in legacy MBQL.\n */\nmetabase.lib.convert.options__GT_legacy_MBQL = (function metabase$lib$convert$options__GT_legacy_MBQL(m){\nreturn cljs.core.not_empty(cljs.core.into.cljs$core$IFn$_invoke$arity$3(cljs.core.PersistentArrayMap.EMPTY,cljs.core.comp.cljs$core$IFn$_invoke$arity$2(metabase.lib.convert.disqualify.cljs$core$IFn$_invoke$arity$0(),cljs.core.remove.cljs$core$IFn$_invoke$arity$1((function (p__79562){\nvar vec__79564 = p__79562;\nvar k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__79564,(0),null);\nvar _v = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__79564,(1),null);\nreturn cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(k,new cljs.core.Keyword(null,\"effective-type\",\"effective-type\",-355725458));\n}))),m));\n});\nmetabase.lib.convert.aggregation__GT_legacy_MBQL = (function metabase$lib$convert$aggregation__GT_legacy_MBQL(p__79569){\nvar vec__79570 = p__79569;\nvar seq__79571 = cljs.core.seq(vec__79570);\nvar first__79572 = cljs.core.first(seq__79571);\nvar seq__79571__$1 = cljs.core.next(seq__79571);\nvar tag = first__79572;\nvar first__79572__$1 = cljs.core.first(seq__79571__$1);\nvar seq__79571__$2 = cljs.core.next(seq__79571__$1);\nvar options = first__79572__$1;\nvar args = seq__79571__$2;\nvar inner = cljs.core.into.cljs$core$IFn$_invoke$arity$3(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [tag], null),cljs.core.map.cljs$core$IFn$_invoke$arity$1(metabase.lib.convert.__GT_legacy_MBQL),args);\nvar inner__$1 = ((((cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(tag,new cljs.core.Keyword(null,\"case\",\"case\",1143702196))) && (cljs.core.next(args))))?cljs.core.conj.cljs$core$IFn$_invoke$arity$2(cljs.core.pop(inner),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"default\",\"default\",-1987822328),cljs.core.peek(inner)], null)):inner);\nvar temp__5802__auto__ = cljs.core.not_empty(metabase.lib.convert.options__GT_legacy_MBQL(options));\nif(cljs.core.truth_(temp__5802__auto__)){\nvar aggregation_opts = temp__5802__auto__;\nreturn new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"aggregation-options\",\"aggregation-options\",-1904917550),inner__$1,aggregation_opts], null);\n} else {\nreturn inner__$1;\n}\n});\nmetabase.lib.convert.clause_with_options__GT_legacy_MBQL = (function metabase$lib$convert$clause_with_options__GT_legacy_MBQL(p__79577){\nvar vec__79580 = p__79577;\nvar seq__79581 = cljs.core.seq(vec__79580);\nvar first__79582 = cljs.core.first(seq__79581);\nvar seq__79581__$1 = cljs.core.next(seq__79581);\nvar k = first__79582;\nvar first__79582__$1 = cljs.core.first(seq__79581__$1);\nvar seq__79581__$2 = cljs.core.next(seq__79581__$1);\nvar options = first__79582__$1;\nvar args = seq__79581__$2;\nif(cljs.core.map_QMARK_(options)){\nreturn cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [k], null),cljs.core.concat.cljs$core$IFn$_invoke$arity$2(cljs.core.map.cljs$core$IFn$_invoke$arity$2(metabase.lib.convert.__GT_legacy_MBQL,args),(function (){var temp__5804__auto__ = metabase.lib.convert.options__GT_legacy_MBQL(options);\nif(cljs.core.truth_(temp__5804__auto__)){\nvar options__$1 = temp__5804__auto__;\nreturn new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [options__$1], null);\n} else {\nreturn null;\n}\n})()));\n} else {\nreturn cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [k], null),cljs.core.map.cljs$core$IFn$_invoke$arity$2(metabase.lib.convert.__GT_legacy_MBQL,cljs.core.cons(options,args)));\n}\n});\nmetabase.lib.convert.__GT_legacy_MBQL.cljs$core$IMultiFn$_add_method$arity$3(null,new cljs.core.Keyword(null,\"default\",\"default\",-1987822328),(function (x){\nif(((cljs.core.vector_QMARK_(x)) && ((cljs.core.first(x) instanceof cljs.core.Keyword)))){\nreturn metabase.lib.convert.clause_with_options__GT_legacy_MBQL(x);\n} else {\nif(cljs.core.map_QMARK_(x)){\nreturn cljs.core.update_vals(metabase.lib.convert.disqualify.cljs$core$IFn$_invoke$arity$1(x),metabase.lib.convert.__GT_legacy_MBQL);\n} else {\nreturn x;\n\n}\n}\n}));\nvar seq__79585_79853 = cljs.core.seq(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"metabase.lib.convert\",\"aggregation\",\"metabase.lib.convert/aggregation\",108290790),new cljs.core.Keyword(\"metabase.lib.convert\",\"expression\",\"metabase.lib.convert/expression\",1648102782)], null));\nvar chunk__79586_79854 = null;\nvar count__79587_79855 = (0);\nvar i__79588_79856 = (0);\nwhile(true){\nif((i__79588_79856 < count__79587_79855)){\nvar tag_79858 = chunk__79586_79854.cljs$core$IIndexed$_nth$arity$2(null,i__79588_79856);\nmetabase.lib.hierarchy.derive(tag_79858,new cljs.core.Keyword(\"metabase.lib.convert\",\"aggregation-or-expression\",\"metabase.lib.convert/aggregation-or-expression\",1924029672));\n\n\nvar G__79859 = seq__79585_79853;\nvar G__79860 = chunk__79586_79854;\nvar G__79861 = count__79587_79855;\nvar G__79862 = (i__79588_79856 + (1));\nseq__79585_79853 = G__79859;\nchunk__79586_79854 = G__79860;\ncount__79587_79855 = G__79861;\ni__79588_79856 = G__79862;\ncontinue;\n} else {\nvar temp__5804__auto___79863 = cljs.core.seq(seq__79585_79853);\nif(temp__5804__auto___79863){\nvar seq__79585_79864__$1 = temp__5804__auto___79863;\nif(cljs.core.chunked_seq_QMARK_(seq__79585_79864__$1)){\nvar c__5568__auto___79865 = cljs.core.chunk_first(seq__79585_79864__$1);\nvar G__79866 = cljs.core.chunk_rest(seq__79585_79864__$1);\nvar G__79867 = c__5568__auto___79865;\nvar G__79868 = cljs.core.count(c__5568__auto___79865);\nvar G__79869 = (0);\nseq__79585_79853 = G__79866;\nchunk__79586_79854 = G__79867;\ncount__79587_79855 = G__79868;\ni__79588_79856 = G__79869;\ncontinue;\n} else {\nvar tag_79870 = cljs.core.first(seq__79585_79864__$1);\nmetabase.lib.hierarchy.derive(tag_79870,new cljs.core.Keyword(\"metabase.lib.convert\",\"aggregation-or-expression\",\"metabase.lib.convert/aggregation-or-expression\",1924029672));\n\n\nvar G__79871 = cljs.core.next(seq__79585_79864__$1);\nvar G__79872 = null;\nvar G__79873 = (0);\nvar G__79874 = (0);\nseq__79585_79853 = G__79871;\nchunk__79586_79854 = G__79872;\ncount__79587_79855 = G__79873;\ni__79588_79856 = G__79874;\ncontinue;\n}\n} else {\n}\n}\nbreak;\n}\nvar seq__79594_79875 = cljs.core.seq(new cljs.core.PersistentVector(null, 12, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"count\",\"count\",2139924085),new cljs.core.Keyword(null,\"avg\",\"avg\",197406200),new cljs.core.Keyword(null,\"count-where\",\"count-where\",385407720),new cljs.core.Keyword(null,\"distinct\",\"distinct\",-1788879121),new cljs.core.Keyword(null,\"max\",\"max\",61366548),new cljs.core.Keyword(null,\"median\",\"median\",569566131),new cljs.core.Keyword(null,\"min\",\"min\",444991522),new cljs.core.Keyword(null,\"percentile\",\"percentile\",-601188752),new cljs.core.Keyword(null,\"share\",\"share\",-589433933),new cljs.core.Keyword(null,\"stddev\",\"stddev\",-865474939),new cljs.core.Keyword(null,\"sum\",\"sum\",136986814),new cljs.core.Keyword(null,\"sum-where\",\"sum-where\",2135348428)], null));\nvar chunk__79595_79876 = null;\nvar count__79596_79877 = (0);\nvar i__79597_79878 = (0);\nwhile(true){\nif((i__79597_79878 < count__79596_79877)){\nvar tag_79879 = chunk__79595_79876.cljs$core$IIndexed$_nth$arity$2(null,i__79597_79878);\nmetabase.lib.hierarchy.derive(tag_79879,new cljs.core.Keyword(\"metabase.lib.convert\",\"aggregation\",\"metabase.lib.convert/aggregation\",108290790));\n\n\nvar G__79880 = seq__79594_79875;\nvar G__79881 = chunk__79595_79876;\nvar G__79882 = count__79596_79877;\nvar G__79883 = (i__79597_79878 + (1));\nseq__79594_79875 = G__79880;\nchunk__79595_79876 = G__79881;\ncount__79596_79877 = G__79882;\ni__79597_79878 = G__79883;\ncontinue;\n} else {\nvar temp__5804__auto___79884 = cljs.core.seq(seq__79594_79875);\nif(temp__5804__auto___79884){\nvar seq__79594_79885__$1 = temp__5804__auto___79884;\nif(cljs.core.chunked_seq_QMARK_(seq__79594_79885__$1)){\nvar c__5568__auto___79886 = cljs.core.chunk_first(seq__79594_79885__$1);\nvar G__79887 = cljs.core.chunk_rest(seq__79594_79885__$1);\nvar G__79888 = c__5568__auto___79886;\nvar G__79889 = cljs.core.count(c__5568__auto___79886);\nvar G__79890 = (0);\nseq__79594_79875 = G__79887;\nchunk__79595_79876 = G__79888;\ncount__79596_79877 = G__79889;\ni__79597_79878 = G__79890;\ncontinue;\n} else {\nvar tag_79891 = cljs.core.first(seq__79594_79885__$1);\nmetabase.lib.hierarchy.derive(tag_79891,new cljs.core.Keyword(\"metabase.lib.convert\",\"aggregation\",\"metabase.lib.convert/aggregation\",108290790));\n\n\nvar G__79892 = cljs.core.next(seq__79594_79885__$1);\nvar G__79893 = null;\nvar G__79894 = (0);\nvar G__79895 = (0);\nseq__79594_79875 = G__79892;\nchunk__79595_79876 = G__79893;\ncount__79596_79877 = G__79894;\ni__79597_79878 = G__79895;\ncontinue;\n}\n} else {\n}\n}\nbreak;\n}\nvar seq__79601_79896 = cljs.core.seq(cljs.core.PersistentVector.fromArray([new cljs.core.Keyword(null,\"+\",\"+\",1913524883),new cljs.core.Keyword(null,\"-\",\"-\",-2112348439),new cljs.core.Keyword(null,\"*\",\"*\",-1294732318),new cljs.core.Keyword(null,\"/\",\"/\",1282502798),new cljs.core.Keyword(null,\"case\",\"case\",1143702196),new cljs.core.Keyword(null,\"coalesce\",\"coalesce\",654622029),new cljs.core.Keyword(null,\"abs\",\"abs\",-246026477),new cljs.core.Keyword(null,\"log\",\"log\",-1595516004),new cljs.core.Keyword(null,\"exp\",\"exp\",-261706262),new cljs.core.Keyword(null,\"sqrt\",\"sqrt\",-1270051929),new cljs.core.Keyword(null,\"ceil\",\"ceil\",-1824929952),new cljs.core.Keyword(null,\"floor\",\"floor\",1882041021),new cljs.core.Keyword(null,\"round\",\"round\",2009433328),new cljs.core.Keyword(null,\"power\",\"power\",-937852079),new cljs.core.Keyword(null,\"interval\",\"interval\",1708495417),new cljs.core.Keyword(null,\"relative-datetime\",\"relative-datetime\",1285169278),new cljs.core.Keyword(null,\"time\",\"time\",1385887882),new cljs.core.Keyword(null,\"absolute-datetime\",\"absolute-datetime\",-560340465),new cljs.core.Keyword(null,\"now\",\"now\",-1650525531),new cljs.core.Keyword(null,\"convert-timezone\",\"convert-timezone\",-124803001),new cljs.core.Keyword(null,\"get-week\",\"get-week\",-888059349),new cljs.core.Keyword(null,\"get-year\",\"get-year\",-936011274),new cljs.core.Keyword(null,\"get-month\",\"get-month\",-369374731),new cljs.core.Keyword(null,\"get-day\",\"get-day\",127568857),new cljs.core.Keyword(null,\"get-hour\",\"get-hour\",622714059),new cljs.core.Keyword(null,\"get-minute\",\"get-minute\",1468086343),new cljs.core.Keyword(null,\"get-second\",\"get-second\",-2065946318),new cljs.core.Keyword(null,\"get-quarter\",\"get-quarter\",1327778593),new cljs.core.Keyword(null,\"datetime-add\",\"datetime-add\",209603411),new cljs.core.Keyword(null,\"datetime-subtract\",\"datetime-subtract\",275307697),new cljs.core.Keyword(null,\"concat\",\"concat\",-2108183992),new cljs.core.Keyword(null,\"substring\",\"substring\",1140866276),new cljs.core.Keyword(null,\"replace\",\"replace\",-786587770),new cljs.core.Keyword(null,\"regexextract\",\"regexextract\",689742894),new cljs.core.Keyword(null,\"regex-match-first\",\"regex-match-first\",-657299718),new cljs.core.Keyword(null,\"length\",\"length\",588987862),new cljs.core.Keyword(null,\"trim\",\"trim\",774319767),new cljs.core.Keyword(null,\"ltrim\",\"ltrim\",1654269283),new cljs.core.Keyword(null,\"rtrim\",\"rtrim\",-661336449),new cljs.core.Keyword(null,\"upper\",\"upper\",246243906),new cljs.core.Keyword(null,\"lower\",\"lower\",1120320821)], true));\nvar chunk__79602_79897 = null;\nvar count__79603_79898 = (0);\nvar i__79604_79899 = (0);\nwhile(true){\nif((i__79604_79899 < count__79603_79898)){\nvar tag_79956 = chunk__79602_79897.cljs$core$IIndexed$_nth$arity$2(null,i__79604_79899);\nmetabase.lib.hierarchy.derive(tag_79956,new cljs.core.Keyword(\"metabase.lib.convert\",\"expression\",\"metabase.lib.convert/expression\",1648102782));\n\n\nvar G__79957 = seq__79601_79896;\nvar G__79958 = chunk__79602_79897;\nvar G__79959 = count__79603_79898;\nvar G__79960 = (i__79604_79899 + (1));\nseq__79601_79896 = G__79957;\nchunk__79602_79897 = G__79958;\ncount__79603_79898 = G__79959;\ni__79604_79899 = G__79960;\ncontinue;\n} else {\nvar temp__5804__auto___79961 = cljs.core.seq(seq__79601_79896);\nif(temp__5804__auto___79961){\nvar seq__79601_79962__$1 = temp__5804__auto___79961;\nif(cljs.core.chunked_seq_QMARK_(seq__79601_79962__$1)){\nvar c__5568__auto___79963 = cljs.core.chunk_first(seq__79601_79962__$1);\nvar G__79964 = cljs.core.chunk_rest(seq__79601_79962__$1);\nvar G__79965 = c__5568__auto___79963;\nvar G__79966 = cljs.core.count(c__5568__auto___79963);\nvar G__79967 = (0);\nseq__79601_79896 = G__79964;\nchunk__79602_79897 = G__79965;\ncount__79603_79898 = G__79966;\ni__79604_79899 = G__79967;\ncontinue;\n} else {\nvar tag_79968 = cljs.core.first(seq__79601_79962__$1);\nmetabase.lib.hierarchy.derive(tag_79968,new cljs.core.Keyword(\"metabase.lib.convert\",\"expression\",\"metabase.lib.convert/expression\",1648102782));\n\n\nvar G__79969 = cljs.core.next(seq__79601_79962__$1);\nvar G__79970 = null;\nvar G__79971 = (0);\nvar G__79972 = (0);\nseq__79601_79896 = G__79969;\nchunk__79602_79897 = G__79970;\ncount__79603_79898 = G__79971;\ni__79604_79899 = G__79972;\ncontinue;\n}\n} else {\n}\n}\nbreak;\n}\nmetabase.lib.convert.__GT_legacy_MBQL.cljs$core$IMultiFn$_add_method$arity$3(null,new cljs.core.Keyword(\"metabase.lib.convert\",\"aggregation-or-expression\",\"metabase.lib.convert/aggregation-or-expression\",1924029672),(function (input){\nreturn metabase.lib.convert.aggregation__GT_legacy_MBQL(input);\n}));\nmetabase.lib.convert.stage_metadata__GT_legacy_metadata = (function metabase$lib$convert$stage_metadata__GT_legacy_metadata(stage_metadata){\nreturn cljs.core.into.cljs$core$IFn$_invoke$arity$3(cljs.core.PersistentVector.EMPTY,cljs.core.comp.cljs$core$IFn$_invoke$arity$2(cljs.core.map.cljs$core$IFn$_invoke$arity$1((function (p1__79609_SHARP_){\nreturn cljs.core.update_keys(p1__79609_SHARP_,metabase.util.__GT_snake_case_en);\n})),cljs.core.map.cljs$core$IFn$_invoke$arity$1(metabase.lib.convert.__GT_legacy_MBQL)),new cljs.core.Keyword(null,\"columns\",\"columns\",1998437288).cljs$core$IFn$_invoke$arity$1(stage_metadata));\n});\nmetabase.lib.convert.chain_stages = (function metabase$lib$convert$chain_stages(p__79613){\nvar map__79614 = p__79613;\nvar map__79614__$1 = cljs.core.__destructure_map(map__79614);\nvar stages = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__79614__$1,new cljs.core.Keyword(null,\"stages\",\"stages\",-442109532));\nvar inner_query = cljs.core.first(cljs.core.reduce.cljs$core$IFn$_invoke$arity$3((function (p__79617,stage){\nvar vec__79618 = p__79617;\nvar inner = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__79618,(0),null);\nvar stage_metadata = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__79618,(1),null);\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var G__79621 = metabase.lib.convert.__GT_legacy_MBQL.cljs$core$IFn$_invoke$arity$1(stage);\nvar G__79621__$1 = (cljs.core.truth_(inner)?cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__79621,new cljs.core.Keyword(null,\"source-query\",\"source-query\",198004422),inner):G__79621);\nif(cljs.core.truth_(stage_metadata)){\nreturn cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__79621__$1,new cljs.core.Keyword(null,\"source-metadata\",\"source-metadata\",-477816085),metabase.lib.convert.stage_metadata__GT_legacy_metadata(stage_metadata));\n} else {\nreturn G__79621__$1;\n}\n})(),new cljs.core.Keyword(\"lib\",\"stage-metadata\",\"lib/stage-metadata\",1079153610).cljs$core$IFn$_invoke$arity$1(stage)], null);\n}),null,stages));\nvar G__79622 = inner_query;\nif(cljs.core.truth_(new cljs.core.Keyword(null,\"native\",\"native\",-613060878).cljs$core$IFn$_invoke$arity$1(inner_query))){\nreturn clojure.set.rename_keys(G__79622,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"native\",\"native\",-613060878),new cljs.core.Keyword(null,\"query\",\"query\",-1288509510)], null));\n} else {\nreturn G__79622;\n}\n});\nmetabase.lib.convert.__GT_legacy_MBQL.cljs$core$IMultiFn$_add_method$arity$3(null,new cljs.core.Keyword(\"dispatch-type\",\"map\",\"dispatch-type/map\",-758153422),(function (m){\nreturn cljs.core.into.cljs$core$IFn$_invoke$arity$3(cljs.core.PersistentArrayMap.EMPTY,cljs.core.comp.cljs$core$IFn$_invoke$arity$2(metabase.lib.convert.disqualify.cljs$core$IFn$_invoke$arity$0(),cljs.core.map.cljs$core$IFn$_invoke$arity$1((function (p__79625){\nvar vec__79626 = p__79625;\nvar k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__79626,(0),null);\nvar v = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__79626,(1),null);\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [k,metabase.lib.convert.__GT_legacy_MBQL.cljs$core$IFn$_invoke$arity$1(v)], null);\n}))),m);\n}));\nmetabase.lib.convert.__GT_legacy_MBQL.cljs$core$IMultiFn$_add_method$arity$3(null,new cljs.core.Keyword(null,\"aggregation\",\"aggregation\",1597476696),(function (p__79629){\nvar vec__79631 = p__79629;\nvar _ = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__79631,(0),null);\nvar opts = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__79631,(1),null);\nvar agg_uuid = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__79631,(2),null);\nvar ag = vec__79631;\nif(cljs.core.map_QMARK_(opts)){\nvar opts__$1 = metabase.lib.convert.options__GT_legacy_MBQL(opts);\nvar G__79634 = new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"aggregation\",\"aggregation\",1597476696),metabase.lib.convert.get_or_throw_BANG_(metabase.lib.convert._STAR_pMBQL_uuid__GT_legacy_index_STAR_,agg_uuid)], null);\nif(cljs.core.truth_(opts__$1)){\nreturn cljs.core.conj.cljs$core$IFn$_invoke$arity$2(G__79634,opts__$1);\n} else {\nreturn G__79634;\n}\n} else {\nreturn ag;\n}\n}));\nmetabase.lib.convert.__GT_legacy_MBQL.cljs$core$IMultiFn$_add_method$arity$3(null,new cljs.core.Keyword(\"dispatch-type\",\"sequential\",\"dispatch-type/sequential\",1056993969),(function (xs){\nreturn cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(metabase.lib.convert.__GT_legacy_MBQL,xs);\n}));\nmetabase.lib.convert.__GT_legacy_MBQL.cljs$core$IMultiFn$_add_method$arity$3(null,new cljs.core.Keyword(null,\"field\",\"field\",-1302436500),(function (p__79639){\nvar vec__79641 = p__79639;\nvar _ = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__79641,(0),null);\nvar opts = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__79641,(1),null);\nvar id = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__79641,(2),null);\nvar vec__79645 = (((((opts == null)) || (cljs.core.map_QMARK_(opts))))?new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [opts,id], null):new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [id,opts], null));\nvar opts__$1 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__79645,(0),null);\nvar id__$1 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__79645,(1),null);\nreturn new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"field\",\"field\",-1302436500),metabase.lib.convert.__GT_legacy_MBQL.cljs$core$IFn$_invoke$arity$1(id__$1),metabase.lib.convert.options__GT_legacy_MBQL(opts__$1)], null);\n}));\nmetabase.lib.convert.__GT_legacy_MBQL.cljs$core$IMultiFn$_add_method$arity$3(null,new cljs.core.Keyword(null,\"value\",\"value\",305978217),(function (p__79648){\nvar vec__79649 = p__79648;\nvar _tag = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__79649,(0),null);\nvar opts = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__79649,(1),null);\nvar value = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__79649,(2),null);\nvar opts__$1 = metabase.lib.convert.options__GT_legacy_MBQL(clojure.set.rename_keys(opts,new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null,\"base-type\",\"base-type\",1167971299),new cljs.core.Keyword(null,\"base_type\",\"base_type\",1908272670),new cljs.core.Keyword(null,\"semantic-type\",\"semantic-type\",-310722107),new cljs.core.Keyword(null,\"semantic_type\",\"semantic_type\",272485089),new cljs.core.Keyword(null,\"database-type\",\"database-type\",-426840562),new cljs.core.Keyword(null,\"database_type\",\"database_type\",-54700895)], null)));\nreturn new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"value\",\"value\",305978217),value,opts__$1], null);\n}));\nmetabase.lib.convert.update_list__GT_legacy_boolean_expression = (function metabase$lib$convert$update_list__GT_legacy_boolean_expression(m,pMBQL_key,legacy_key){\nvar G__79656 = m;\nvar G__79656__$1 = ((cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(cljs.core.count(cljs.core.get.cljs$core$IFn$_invoke$arity$2(m,pMBQL_key)),(1)))?medley.core.update_existing.cljs$core$IFn$_invoke$arity$3(G__79656,pMBQL_key,cljs.core.comp.cljs$core$IFn$_invoke$arity$2(metabase.lib.convert.__GT_legacy_MBQL,cljs.core.first)):G__79656);\nvar G__79656__$2 = (((cljs.core.count(cljs.core.get.cljs$core$IFn$_invoke$arity$2(m,pMBQL_key)) > (1)))?medley.core.update_existing.cljs$core$IFn$_invoke$arity$3(G__79656__$1,pMBQL_key,(function (p1__79653_SHARP_){\nreturn cljs.core.into.cljs$core$IFn$_invoke$arity$3(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"and\",\"and\",-971899817)], null),cljs.core.map.cljs$core$IFn$_invoke$arity$1(metabase.lib.convert.__GT_legacy_MBQL),p1__79653_SHARP_);\n})):G__79656__$1);\nreturn clojure.set.rename_keys(G__79656__$2,cljs.core.PersistentArrayMap.createAsIfByAssoc([pMBQL_key,legacy_key]));\n\n});\nmetabase.lib.convert.__GT_legacy_MBQL.cljs$core$IMultiFn$_add_method$arity$3(null,new cljs.core.Keyword(\"mbql\",\"join\",\"mbql/join\",-709512370),(function (join){\nvar base = (function (){var G__79658 = metabase.lib.convert.disqualify.cljs$core$IFn$_invoke$arity$1(join);\nif(clojure.string.starts_with_QMARK_(new cljs.core.Keyword(null,\"alias\",\"alias\",-2039751630).cljs$core$IFn$_invoke$arity$1(join),metabase.lib.convert.legacy_default_join_alias)){\nreturn cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(G__79658,new cljs.core.Keyword(null,\"alias\",\"alias\",-2039751630));\n} else {\nreturn G__79658;\n}\n})();\nreturn cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([cljs.core.update_vals(cljs.core.dissoc.cljs$core$IFn$_invoke$arity$variadic(base,new cljs.core.Keyword(null,\"stages\",\"stages\",-442109532),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"conditions\",\"conditions\",-1647236270)], 0)),metabase.lib.convert.__GT_legacy_MBQL),metabase.lib.convert.update_list__GT_legacy_boolean_expression(cljs.core.select_keys(base,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"conditions\",\"conditions\",-1647236270)], null)),new cljs.core.Keyword(null,\"conditions\",\"conditions\",-1647236270),new cljs.core.Keyword(null,\"condition\",\"condition\",1668437652)),metabase.lib.convert.chain_stages(base)], 0));\n}));\n/**\n * If a pMBQL query stage has `:source-card` convert it to legacy-style `:source-table \"card__<id>\"`.\n */\nmetabase.lib.convert.source_card__GT_legacy_source_table = (function metabase$lib$convert$source_card__GT_legacy_source_table(stage){\nvar temp__5802__auto__ = new cljs.core.Keyword(null,\"source-card\",\"source-card\",-1580820390).cljs$core$IFn$_invoke$arity$1(stage);\nif(cljs.core.truth_(temp__5802__auto__)){\nvar source_card_id = temp__5802__auto__;\nreturn cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(stage,new cljs.core.Keyword(null,\"source-card\",\"source-card\",-1580820390)),new cljs.core.Keyword(null,\"source-table\",\"source-table\",-225307692),[\"card__\",cljs.core.str.cljs$core$IFn$_invoke$arity$1(source_card_id)].join(''));\n} else {\nreturn stage;\n}\n});\nmetabase.lib.convert.__GT_legacy_MBQL.cljs$core$IMultiFn$_add_method$arity$3(null,new cljs.core.Keyword(\"mbql.stage\",\"mbql\",\"mbql.stage/mbql\",1578747798),(function (stage){\nvar _STAR_pMBQL_uuid__GT_legacy_index_STAR__orig_val__79669 = metabase.lib.convert._STAR_pMBQL_uuid__GT_legacy_index_STAR_;\nvar _STAR_pMBQL_uuid__GT_legacy_index_STAR__temp_val__79670 = cljs.core.into.cljs$core$IFn$_invoke$arity$3(cljs.core.PersistentArrayMap.EMPTY,cljs.core.map_indexed.cljs$core$IFn$_invoke$arity$1((function (idx,p__79671){\nvar vec__79673 = p__79671;\nvar _tag = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__79673,(0),null);\nvar map__79676 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__79673,(1),null);\nvar map__79676__$1 = cljs.core.__destructure_map(map__79676);\nvar ag_uuid = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__79676__$1,new cljs.core.Keyword(\"lib\",\"uuid\",\"lib/uuid\",-2145250720));\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [ag_uuid,idx], null);\n})),new cljs.core.Keyword(null,\"aggregation\",\"aggregation\",1597476696).cljs$core$IFn$_invoke$arity$1(stage));\n(metabase.lib.convert._STAR_pMBQL_uuid__GT_legacy_index_STAR_ = _STAR_pMBQL_uuid__GT_legacy_index_STAR__temp_val__79670);\n\ntry{return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3((function (p1__79664_SHARP_,p2__79665_SHARP_){\nreturn medley.core.update_existing.cljs$core$IFn$_invoke$arity$3(p1__79664_SHARP_,p2__79665_SHARP_,metabase.lib.convert.__GT_legacy_MBQL);\n}),metabase.lib.convert.update_list__GT_legacy_boolean_expression(medley.core.update_existing.cljs$core$IFn$_invoke$arity$3(medley.core.update_existing.cljs$core$IFn$_invoke$arity$3(metabase.lib.convert.source_card__GT_legacy_source_table(metabase.lib.convert.disqualify.cljs$core$IFn$_invoke$arity$1(stage)),new cljs.core.Keyword(null,\"aggregation\",\"aggregation\",1597476696),(function (p1__79666_SHARP_){\nreturn cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(metabase.lib.convert.aggregation__GT_legacy_MBQL,p1__79666_SHARP_);\n})),new cljs.core.Keyword(null,\"expressions\",\"expressions\",255689909),(function (expressions){\nreturn cljs.core.into.cljs$core$IFn$_invoke$arity$2(cljs.core.PersistentArrayMap.EMPTY,(function (){var iter__5523__auto__ = (function metabase$lib$convert$iter__79683(s__79684){\nreturn (new cljs.core.LazySeq(null,(function (){\nvar s__79684__$1 = s__79684;\nwhile(true){\nvar temp__5804__auto__ = cljs.core.seq(s__79684__$1);\nif(temp__5804__auto__){\nvar s__79684__$2 = temp__5804__auto__;\nif(cljs.core.chunked_seq_QMARK_(s__79684__$2)){\nvar c__5521__auto__ = cljs.core.chunk_first(s__79684__$2);\nvar size__5522__auto__ = cljs.core.count(c__5521__auto__);\nvar b__79686 = cljs.core.chunk_buffer(size__5522__auto__);\nif((function (){var i__79685 = (0);\nwhile(true){\nif((i__79685 < size__5522__auto__)){\nvar expression = cljs.core._nth(c__5521__auto__,i__79685);\nvar legacy_clause = metabase.lib.convert.__GT_legacy_MBQL.cljs$core$IFn$_invoke$arity$1(expression);\ncljs.core.chunk_append(b__79686,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [metabase.lib.util.expression_name(expression),((cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(new cljs.core.Keyword(null,\"value\",\"value\",305978217),cljs.core.first(legacy_clause)))?cljs.core.second(legacy_clause):legacy_clause)], null));\n\nvar G__79976 = (i__79685 + (1));\ni__79685 = G__79976;\ncontinue;\n} else {\nreturn true;\n}\nbreak;\n}\n})()){\nreturn cljs.core.chunk_cons(cljs.core.chunk(b__79686),metabase$lib$convert$iter__79683(cljs.core.chunk_rest(s__79684__$2)));\n} else {\nreturn cljs.core.chunk_cons(cljs.core.chunk(b__79686),null);\n}\n} else {\nvar expression = cljs.core.first(s__79684__$2);\nvar legacy_clause = metabase.lib.convert.__GT_legacy_MBQL.cljs$core$IFn$_invoke$arity$1(expression);\nreturn cljs.core.cons(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [metabase.lib.util.expression_name(expression),((cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(new cljs.core.Keyword(null,\"value\",\"value\",305978217),cljs.core.first(legacy_clause)))?cljs.core.second(legacy_clause):legacy_clause)], null),metabase$lib$convert$iter__79683(cljs.core.rest(s__79684__$2)));\n}\n} else {\nreturn null;\n}\nbreak;\n}\n}),null,null));\n});\nreturn iter__5523__auto__(expressions);\n})());\n})),new cljs.core.Keyword(null,\"filters\",\"filters\",974726919),new cljs.core.Keyword(null,\"filter\",\"filter\",-948537934)),cljs.core.disj.cljs$core$IFn$_invoke$arity$variadic(metabase.lib.convert.stage_keys,new cljs.core.Keyword(null,\"aggregation\",\"aggregation\",1597476696),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"filters\",\"filters\",974726919),new cljs.core.Keyword(null,\"expressions\",\"expressions\",255689909)], 0)));\n}finally {(metabase.lib.convert._STAR_pMBQL_uuid__GT_legacy_index_STAR_ = _STAR_pMBQL_uuid__GT_legacy_index_STAR__orig_val__79669);\n}}));\nmetabase.lib.convert.__GT_legacy_MBQL.cljs$core$IMultiFn$_add_method$arity$3(null,new cljs.core.Keyword(\"mbql.stage\",\"native\",\"mbql.stage/native\",359422194),(function (stage){\nreturn cljs.core.update_vals(metabase.lib.convert.disqualify.cljs$core$IFn$_invoke$arity$1(stage),metabase.lib.convert.__GT_legacy_MBQL);\n}));\nmetabase.lib.convert.__GT_legacy_MBQL.cljs$core$IMultiFn$_add_method$arity$3(null,new cljs.core.Keyword(\"mbql\",\"query\",\"mbql/query\",-1285688662),(function (query){\nvar base = metabase.lib.convert.disqualify.cljs$core$IFn$_invoke$arity$1(query);\nvar parameters = new cljs.core.Keyword(null,\"parameters\",\"parameters\",-1229919748).cljs$core$IFn$_invoke$arity$1(base);\nvar inner_query = metabase.lib.convert.chain_stages(base);\nvar query_type = ((cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(new cljs.core.Keyword(\"lib\",\"type\",\"lib/type\",1175424801).cljs$core$IFn$_invoke$arity$1(cljs.core.last(new cljs.core.Keyword(null,\"stages\",\"stages\",-442109532).cljs$core$IFn$_invoke$arity$1(query))),new cljs.core.Keyword(\"mbql.stage\",\"native\",\"mbql.stage/native\",359422194)))?new cljs.core.Keyword(null,\"native\",\"native\",-613060878):new cljs.core.Keyword(null,\"query\",\"query\",-1288509510));\nreturn cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([cljs.core.update_vals(cljs.core.dissoc.cljs$core$IFn$_invoke$arity$variadic(base,new cljs.core.Keyword(null,\"stages\",\"stages\",-442109532),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"parameters\",\"parameters\",-1229919748)], 0)),metabase.lib.convert.__GT_legacy_MBQL),(function (){var G__79699 = cljs.core.PersistentArrayMap.createAsIfByAssoc([new cljs.core.Keyword(null,\"type\",\"type\",1174270348),query_type,query_type,inner_query]);\nif(cljs.core.seq(parameters)){\nreturn cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__79699,new cljs.core.Keyword(null,\"parameters\",\"parameters\",-1229919748),parameters);\n} else {\nreturn G__79699;\n}\n})()], 0));\n}));\n","~:ns-info",["^ ","~:rename-macros",null,"~:renames",["^ "],"~:meta",["^ ","~:file","metabase/lib/convert.cljc","~:line",1,"~:column",5,"~:end-line",1,"~:end-column",25],"~:ns-aliases",["^ ","~$cljs.loader","~$shadow.loader","~$clojure.pprint","~$cljs.pprint","~$clojure.spec.alpha","~$cljs.spec.alpha","~$clojure.core","~$cljs.core","~$clojure.spec.gen.alpha","~$cljs.spec.gen.alpha","~$clojure.core.match","~$cljs.core.match"],"~:use-macros",null,"~:excludes",["~#set",[]],"~:name","~$metabase.lib.convert","~:reader-aliases",["^ "],"~:op","~:ns","~:imports",null,"~:requires",["^ ","~$metabase.lib.schema","^R","~$set","~$clojure.set","~$mc","~$malli.core","~$me","~$malli.error","~$log","~$metabase.util.log","~$data","~$clojure.data","~$u","~$metabase.util","^X","^X","~$lib.schema.expression","~$metabase.lib.schema.expression","^C","^C","~$metabase.lib.util","^14","~$goog","^15","~$lib.schema","^R","~$lib.options","~$metabase.lib.options","^V","^V","^13","^13","~$lib.hierarchy","~$metabase.lib.hierarchy","^T","^T","~$m","~$medley.core","^11","^11","~$lib.util","^14","~$lib.dispatch","~$metabase.lib.dispatch","^Z","^Z","~$str","~$clojure.string","^1:","^1:","^18","^18","^1@","^1@","^10","^10","^1>","^1>","^1;","^1;"],"~:seen",["^J",["~:require"]],"~:uses",null,"~:require-macros",["^ ","^U","^V","^Y","^Z","~$u","^11","^12","^13","^C","^C","^V","^V","^13","^13","^11","^11","^Z","^Z"],"~:form",["~#list",["~$ns","^L",["^1F",["^1B",["^10","~:as","^["],["^T","^1H","^S"],["^1@","^1H","^1?"],["^V","^1H","^U"],["^X","^1H","^W"],["^1;","^1H","~$m"],["^1>","^1H","^1="],["^1:","^1H","^19"],["^18","^1H","^17"],["^R","^1H","^16"],["^13","^1H","^12"],["^14","^1H","^1<"],["^11","^1H","~$u"],["^Z","^1H","^Y"]]]]],"~:flags",["^ ","^1B",["^J",[]]],"~:js-deps",["^ "],"~:deps",["^15","^C","^10","^T","^1@","^V","^X","^1;","^1>","^1:","^18","^R","^13","^14","^11","^Z"]],"^O","^L","~:resource-id",["~:shadow.build.classpath/resource","metabase/lib/convert.cljc"],"~:compiled-at",1692014630074,"^M",["^ ","^R","^R","^S","^T","^U","^V","^W","^X","^Y","^Z","^[","^10","~$u","^11","^X","^X","^12","^13","^C","^C","^14","^14","^15","^15","^16","^R","^17","^18","^V","^V","^13","^13","^19","^1:","^T","^T","~$m","^1;","^11","^11","^1<","^14","^1=","^1>","^Z","^Z","^1?","^1@","^1:","^1:","^18","^18","^1@","^1@","^10","^10","^1>","^1>","^1;","^1;"],"~:resource-name","metabase/lib/convert.cljc","~:warnings",[],"~:source","(ns metabase.lib.convert\n  (:require\n   [clojure.data :as data]\n   [clojure.set :as set]\n   [clojure.string :as str]\n   [malli.core :as mc]\n   [malli.error :as me]\n   [medley.core :as m]\n   [metabase.lib.dispatch :as lib.dispatch]\n   [metabase.lib.hierarchy :as lib.hierarchy]\n   [metabase.lib.options :as lib.options]\n   [metabase.lib.schema :as lib.schema]\n   [metabase.lib.schema.expression :as lib.schema.expression]\n   [metabase.lib.util :as lib.util]\n   [metabase.util :as u]\n   [metabase.util.log :as log]))\n\n(def ^:private ^:dynamic *pMBQL-uuid->legacy-index*\n  {})\n\n(def ^:private ^:dynamic *legacy-index->pMBQL-uuid*\n  {})\n\n(defn- clean-location [almost-stage error-type error-location]\n  (let [operate-on-parent? #{:malli.core/missing-key :malli.core/end-of-input}\n        location (if (operate-on-parent? error-type)\n                   (drop-last 2 error-location)\n                   (drop-last 1 error-location))\n        [location-key] (if (operate-on-parent? error-type)\n                         (take-last 2 error-location)\n                         (take-last 1 error-location))]\n    (if (seq location)\n      (update-in almost-stage\n                 location\n                 (fn [error-loc]\n                   (let [result (assoc error-loc location-key nil)]\n                     (cond\n                       (vector? error-loc) (into [] (remove nil?) result)\n                       (map? error-loc) (u/remove-nils result)\n                       :else result))))\n      (dissoc almost-stage location-key))))\n\n(def ^:private stage-keys\n  #{:aggregation :breakout :expressions :fields :filters :order-by :joins})\n\n(defn- clean-stage [almost-stage]\n  (loop [almost-stage almost-stage\n         removals []]\n    (if-let [[error-type error-location] (->> (mc/explain ::lib.schema/stage.mbql almost-stage)\n                                              :errors\n                                              (filter (comp stage-keys first :in))\n                                              (map (juxt :type :in))\n                                              first)]\n      (let [new-stage (clean-location almost-stage error-type error-location)]\n        (log/warnf \"Clean: Removing bad clause in %s due to error %s:\\n%s\"\n                   (u/colorize :yellow (pr-str error-location))\n                   (u/colorize :yellow (pr-str (or error-type\n                                                   ;; if `error-type` is missing, which seems to happen sometimes,\n                                                   ;; fall back to humanizing the entire error.\n                                                   (me/humanize (mc/explain ::lib.schema/stage.mbql almost-stage)))))\n                   (u/colorize :red (u/pprint-to-str (first (data/diff almost-stage new-stage)))))\n        (if (= new-stage almost-stage)\n          almost-stage\n          (recur new-stage (conj removals [error-type error-location]))))\n      almost-stage)))\n\n(defn- clean [almost-query]\n  (loop [almost-query almost-query\n         stage-index 0]\n    (let [current-stage (nth (:stages almost-query) stage-index)\n          new-stage (clean-stage current-stage)]\n      (if (= current-stage new-stage)\n        (if (= stage-index (dec (count (:stages almost-query))))\n          almost-query\n          (recur almost-query (inc stage-index)))\n        (recur (update almost-query :stages assoc stage-index new-stage) stage-index)))))\n\n(defmulti ->pMBQL\n  \"Coerce something to pMBQL (the version of MBQL manipulated by Dashboard Lib v2) if it's not already pMBQL.\"\n  {:arglists '([x])}\n  lib.dispatch/dispatch-value\n  :hierarchy lib.hierarchy/hierarchy)\n\n(defn- default-MBQL-clause->pMBQL [mbql-clause]\n  (let [last-elem (peek mbql-clause)\n        last-elem-option? (map? last-elem)\n        [clause-type & args] (cond-> mbql-clause\n                               last-elem-option? pop)\n        options (if last-elem-option?\n                  last-elem\n                  {})]\n    (lib.options/ensure-uuid (into [clause-type options] (map ->pMBQL) args))))\n\n(defmethod ->pMBQL :default\n  [x]\n  (if (and (vector? x)\n           (keyword? (first x)))\n    (default-MBQL-clause->pMBQL x)\n    x))\n\n(defmethod ->pMBQL :mbql/query\n  [query]\n  query)\n\n(def legacy-default-join-alias\n  \"In legacy MBQL, join `:alias` was optional, and if unspecified, this was the default alias used. In reality all joins\n  normally had an explicit `:alias` since the QB would generate one and you generally need one to do useful things\n  with the join anyway.\n\n  Since the new pMBQL schema makes `:alias` required, we'll explicitly add the implicit default when we encounter a\n  join without an alias, and remove it so we can round-trip without changes.\"\n  \"__join\")\n\n(defn- deduplicate-join-aliases\n  \"Join `:alias`es had to be unique in legacy MBQL, but they were optional. Since we add [[legacy-default-join-alias]]\n  to each join that doesn't have an explicit `:alias` for pMBQL compatibility now, we need to deduplicate the aliases\n  if it is used more than once.\n\n  Only deduplicate the default `__join` aliases; we don't want the [[lib.util/unique-name-generator]] to touch other\n  aliases and truncate them or anything like that.\"\n  [joins]\n  (let [unique-name-fn (lib.util/unique-name-generator)]\n    (mapv (fn [join]\n            (cond-> join\n              (= (:alias join) legacy-default-join-alias) (update :alias unique-name-fn)))\n          joins)))\n\n(defn- stage-source-card-id->pMBQL\n  \"If a query `stage` has a legacy `card__<id>` `:source-table`, convert it to a pMBQL-style `:source-card`.\"\n  [stage]\n  (if (string? (:source-table stage))\n    (-> stage\n        (assoc :source-card (lib.util/legacy-string-table-id->card-id (:source-table stage)))\n        (dissoc :source-table))\n    stage))\n\n(defmethod ->pMBQL :mbql.stage/mbql\n  [stage]\n  (let [aggregations (->pMBQL (:aggregation stage))\n        expressions  (->> stage\n                          :expressions\n                          (mapv (fn [[k v]]\n                                  (-> v\n                                      ->pMBQL\n                                      (lib.util/named-expression-clause k))))\n                          not-empty)]\n    (binding [*legacy-index->pMBQL-uuid* (into {}\n                                               (map-indexed (fn [idx [_tag {ag-uuid :lib/uuid}]]\n                                                              [idx ag-uuid]))\n                                               aggregations)]\n      (let [stage (-> stage\n                      stage-source-card-id->pMBQL\n                      (m/assoc-some :aggregation aggregations :expressions expressions))\n            stage (reduce\n                   (fn [stage k]\n                     (if-not (get stage k)\n                       stage\n                       (update stage k ->pMBQL)))\n                   stage\n                   (disj stage-keys :aggregation :expressions))]\n        (cond-> stage\n          (:joins stage) (update :joins deduplicate-join-aliases))))))\n\n(defmethod ->pMBQL :mbql.stage/native\n  [stage]\n  (m/update-existing stage :template-tags update-vals (fn [tag] (m/update-existing tag :dimension ->pMBQL))))\n\n(defmethod ->pMBQL :mbql/join\n  [join]\n  (let [join (-> join\n                 (update :conditions ->pMBQL)\n                 (update :stages ->pMBQL))]\n    (cond-> join\n      (:fields join) (update :fields (fn [fields]\n                                       (if (seqable? fields)\n                                         (mapv ->pMBQL fields)\n                                         (keyword fields))))\n      (not (:alias join)) (assoc :alias legacy-default-join-alias))))\n\n(defmethod ->pMBQL :dispatch-type/sequential\n  [xs]\n  (mapv ->pMBQL xs))\n\n(defmethod ->pMBQL :dispatch-type/map\n  [m]\n  (if (:type m)\n    (-> (lib.util/pipeline m)\n        (update :stages (fn [stages]\n                          (mapv ->pMBQL stages)))\n        clean)\n    (update-vals m ->pMBQL)))\n\n(defmethod ->pMBQL :field\n  [[_tag x y]]\n  (let [[id-or-name options] (if (map? x)\n                               [y x]\n                               [x y])]\n    (lib.options/ensure-uuid [:field options id-or-name])))\n\n(defmethod ->pMBQL :value\n  [[_tag value opts]]\n  ;; `:value` uses `:snake_case` keys in legacy MBQL for some insane reason (actually this was to match the shape of\n  ;; the keys in Field metadata), at least for the three type keys enumerated below.\n  ;; See [[metabase.mbql.schema/ValueTypeInfo]].\n  (let [opts (set/rename-keys opts {:base_type     :base-type\n                                    :semantic_type :semantic-type\n                                    :database_type :database-type})\n        ;; in pMBQL, `:effective-type` is a required key for `:value`. `:value` SHOULD have always had `:base-type`,\n        ;; but on the off chance it did not, get the type from value so the schema doesn't fail entirely.\n        opts (assoc opts :effective-type (or (:effective-type opts)\n                                             (:base-type opts)\n                                             (lib.schema.expression/type-of value)))]\n    (lib.options/ensure-uuid [:value opts value])))\n\n(defmethod ->pMBQL :case\n  [[_tag pred-expr-pairs options]]\n  (let [default (:default options)]\n    (cond-> [:case (dissoc options :default) (mapv ->pMBQL pred-expr-pairs)]\n      :always lib.options/ensure-uuid\n      (some? default) (conj (->pMBQL default)))))\n\n(defmethod ->pMBQL :expression\n  [[tag value opts]]\n  (lib.options/ensure-uuid [tag opts value]))\n\n(defn- get-or-throw!\n  [m k]\n  (let [result (get m k ::not-found)]\n    (if-not (= result ::not-found)\n      result\n      (throw (ex-info (str \"Unable to find \" (pr-str k) \" in map.\")\n                      {:m m\n                       :k k})))))\n\n(defmethod ->pMBQL :aggregation\n  [[tag value opts]]\n  (lib.options/ensure-uuid [tag opts (get-or-throw! *legacy-index->pMBQL-uuid* value)]))\n\n(defmethod ->pMBQL :aggregation-options\n  [[_tag aggregation options]]\n  (let [[tag opts & args] (->pMBQL aggregation)]\n    (into [tag (merge opts options)] args)))\n\n(defn legacy-query-from-inner-query\n  \"Convert a legacy 'inner query' to a full legacy 'outer query' so you can pass it to stuff\n  like [[metabase.mbql.normalize/normalize]], and then probably to [[->pMBQL]].\"\n  [database-id inner-query]\n  (merge {:database database-id, :type :query}\n         (if (:native inner-query)\n           {:native (set/rename-keys inner-query {:native :query})}\n           {:query inner-query})))\n\n(defmulti ->legacy-MBQL\n  \"Coerce something to legacy MBQL (the version of MBQL understood by the query processor and Dashboard Lib v1) if it's\n  not already legacy MBQL.\"\n  {:arglists '([x])}\n  lib.dispatch/dispatch-value\n  :hierarchy lib.hierarchy/hierarchy)\n\n(defn- disqualify\n  \"Remove any keys starting with the `:lib/` namespace from map `m`.\n\n  No args = return transducer to remove `:lib/` keys from a map. One arg = update a map `m`.\"\n  ([]\n   (remove (fn [[k _v]]\n             (and (qualified-keyword? k)\n                  (= (namespace k) \"lib\")))))\n  ([m]\n   (into {} (disqualify) m)))\n\n(defn- options->legacy-MBQL\n  \"Convert an options map in an MBQL clause to the equivalent shape for legacy MBQL. Remove `:lib/*` keys and\n  `:effective-type`, which is not used in options maps in legacy MBQL.\"\n  [m]\n  (not-empty\n   (into {}\n         (comp (disqualify)\n               (remove (fn [[k _v]]\n                         (= k :effective-type))))\n         m)))\n\n(defn- aggregation->legacy-MBQL [[tag options & args]]\n  (let [inner (into [tag] (map ->legacy-MBQL) args)\n        ;; the default value of the :case expression is in the options\n        ;; in legacy MBQL\n        inner (if (and (= tag :case) (next args))\n                (conj (pop inner) {:default (peek inner)})\n                inner)]\n    (if-let [aggregation-opts (not-empty (options->legacy-MBQL options))]\n      [:aggregation-options inner aggregation-opts]\n      inner)))\n\n(defn- clause-with-options->legacy-MBQL [[k options & args]]\n  (if (map? options)\n    (into [k] (concat (map ->legacy-MBQL args)\n                      (when-let [options (options->legacy-MBQL options)]\n                        [options])))\n    (into [k] (map ->legacy-MBQL (cons options args)))))\n\n(defmethod ->legacy-MBQL :default\n  [x]\n  (cond\n    (and (vector? x)\n         (keyword? (first x))) (clause-with-options->legacy-MBQL x)\n    (map? x)                   (-> x\n                                   disqualify\n                                   (update-vals ->legacy-MBQL))\n    :else x))\n\n(doseq [tag [::aggregation ::expression]]\n  (lib.hierarchy/derive tag ::aggregation-or-expression))\n\n(doseq [tag [:count :avg :count-where :distinct\n             :max :median :min :percentile\n             :share :stddev :sum :sum-where]]\n  (lib.hierarchy/derive tag ::aggregation))\n\n(doseq [tag [:+ :- :* :/\n             :case :coalesce\n             :abs :log :exp :sqrt :ceil :floor :round :power :interval\n             :relative-datetime :time :absolute-datetime :now :convert-timezone\n             :get-week :get-year :get-month :get-day :get-hour\n             :get-minute :get-second :get-quarter\n             :datetime-add :datetime-subtract\n             :concat :substring :replace :regexextract :regex-match-first\n             :length :trim :ltrim :rtrim :upper :lower]]\n  (lib.hierarchy/derive tag ::expression))\n\n(defmethod ->legacy-MBQL ::aggregation-or-expression\n  [input]\n  (aggregation->legacy-MBQL input))\n\n(defn- stage-metadata->legacy-metadata [stage-metadata]\n  (into []\n        (comp (map #(update-keys % u/->snake_case_en))\n              (map ->legacy-MBQL))\n        (:columns stage-metadata)))\n\n(defn- chain-stages [{:keys [stages]}]\n  ;; :source-metadata aka :lib/stage-metadata is handled differently in the two formats.\n  ;; In legacy, an inner query might have both :source-query, and :source-metadata giving the metadata for that nested\n  ;; :source-query.\n  ;; In pMBQL, the :lib/stage-metadata is attached to the same stage it applies to.\n  ;; So when chaining pMBQL stages back into legacy form, if stage n has :lib/stage-metadata, stage n+1 needs\n  ;; :source-metadata attached.\n  (let [inner-query (first (reduce (fn [[inner stage-metadata] stage]\n                                     [(cond-> (->legacy-MBQL stage)\n                                        inner          (assoc :source-query inner)\n                                        stage-metadata (assoc :source-metadata (stage-metadata->legacy-metadata stage-metadata)))\n                                      ;; Get the :lib/stage-metadata off the original pMBQL stage, not the converted one.\n                                      (:lib/stage-metadata stage)])\n                                   nil\n                                   stages))]\n    (cond-> inner-query\n      ;; If this is a native query, inner query will be used like: `{:type :native :native #_inner-query {:query ...}}`\n      (:native inner-query) (set/rename-keys {:native :query}))))\n\n(defmethod ->legacy-MBQL :dispatch-type/map [m]\n  (into {}\n        (comp (disqualify)\n              (map (fn [[k v]]\n                     [k (->legacy-MBQL v)])))\n        m))\n\n(defmethod ->legacy-MBQL :aggregation [[_ opts agg-uuid :as ag]]\n  (if (map? opts)\n    (let [opts (options->legacy-MBQL opts)]\n      (cond-> [:aggregation (get-or-throw! *pMBQL-uuid->legacy-index* agg-uuid)]\n        opts (conj opts)))\n    ;; Our conversion is a bit too aggressive and we're hitting legacy refs like [:aggregation 0] inside source_metadata that are only used for legacy and thus can be ignored\n    ag))\n\n(defmethod ->legacy-MBQL :dispatch-type/sequential [xs]\n  (mapv ->legacy-MBQL xs))\n\n(defmethod ->legacy-MBQL :field [[_ opts id]]\n  ;; Fields are not like the normal clauses - they need that options field even if it's null.\n  ;; TODO: Sometimes the given field is in the legacy order - that seems wrong.\n  (let [[opts id] (if (or (nil? opts) (map? opts))\n                    [opts id]\n                    [id opts])]\n    [:field\n     (->legacy-MBQL id)\n     (options->legacy-MBQL opts)]))\n\n(defmethod ->legacy-MBQL :value\n  [[_tag opts value]]\n  (let [opts (-> opts\n                 ;; as mentioned above, `:value` in legacy MBQL expects `snake_case` keys for type info keys.\n                 (set/rename-keys  {:base-type     :base_type\n                                    :semantic-type :semantic_type\n                                    :database-type :database_type})\n                 options->legacy-MBQL)]\n    ;; in legacy MBQL, `:value` has to be three args; `opts` has to be present, but it should can be `nil` if it is\n    ;; empty.\n    [:value value opts]))\n\n(defn- update-list->legacy-boolean-expression\n  [m pMBQL-key legacy-key]\n  (cond-> m\n    (= (count (get m pMBQL-key)) 1) (m/update-existing pMBQL-key (comp ->legacy-MBQL first))\n    (> (count (get m pMBQL-key)) 1) (m/update-existing pMBQL-key #(into [:and] (map ->legacy-MBQL) %))\n    :always (set/rename-keys {pMBQL-key legacy-key})))\n\n(defmethod ->legacy-MBQL :mbql/join [join]\n  (let [base (cond-> (disqualify join)\n               (str/starts-with? (:alias join) legacy-default-join-alias) (dissoc :alias))]\n    (merge (-> base\n               (dissoc :stages :conditions)\n               (update-vals ->legacy-MBQL))\n           (-> base\n               (select-keys [:conditions])\n               (update-list->legacy-boolean-expression :conditions :condition))\n           (chain-stages base))))\n\n(defn- source-card->legacy-source-table\n  \"If a pMBQL query stage has `:source-card` convert it to legacy-style `:source-table \\\"card__<id>\\\"`.\"\n  [stage]\n  (if-let [source-card-id (:source-card stage)]\n    (-> stage\n        (dissoc :source-card)\n        (assoc :source-table (str \"card__\" source-card-id)))\n    stage))\n\n(defmethod ->legacy-MBQL :mbql.stage/mbql\n  [stage]\n  (binding [*pMBQL-uuid->legacy-index* (into {}\n                                             (map-indexed (fn [idx [_tag {ag-uuid :lib/uuid}]]\n                                                            [ag-uuid idx]))\n                                             (:aggregation stage))]\n    (reduce #(m/update-existing %1 %2 ->legacy-MBQL)\n            (-> stage\n                disqualify\n                source-card->legacy-source-table\n                (m/update-existing :aggregation #(mapv aggregation->legacy-MBQL %))\n                (m/update-existing :expressions (fn [expressions]\n                                                  (into {}\n                                                        (for [expression expressions\n                                                              :let [legacy-clause (->legacy-MBQL expression)]]\n                                                          [(lib.util/expression-name expression)\n                                                           ;; We wrap literals in :value ->pMBQL\n                                                           ;; so unwrap this direction\n                                                           (if (= :value (first legacy-clause))\n                                                             (second legacy-clause)\n                                                             legacy-clause)]))))\n                (update-list->legacy-boolean-expression :filters :filter))\n            (disj stage-keys :aggregation :filters :expressions))))\n\n(defmethod ->legacy-MBQL :mbql.stage/native [stage]\n  (-> stage\n      disqualify\n      (update-vals ->legacy-MBQL)))\n\n(defmethod ->legacy-MBQL :mbql/query [query]\n  (let [base        (disqualify query)\n        parameters  (:parameters base)\n        inner-query (chain-stages base)\n        query-type  (if (-> query :stages last :lib/type (= :mbql.stage/native))\n                      :native\n                      :query)]\n    (merge (-> base\n               (dissoc :stages :parameters)\n               (update-vals ->legacy-MBQL))\n           (cond-> {:type query-type query-type inner-query}\n             (seq parameters) (assoc :parameters parameters)))))\n","~:reader-features",["^J",["~:cljs-release","~:cljs-dev","~:cljs"]],"~:cljc",true,"~:source-map-compact",["^ ","mappings","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","names",["metabase.lib.convert/*pMBQL-uuid->legacy-index*","metabase.lib.convert/*legacy-index->pMBQL-uuid*","metabase.lib.convert/clean-location","almost-stage","error-type","error-location","vec__79332","cljs.core.nth","operate-on-parent?","location","cljs.core.drop_last","location-key","cljs.core/take-last","cljs.core/seq","cljs.core.update_in","error-loc","result","cljs.core.assoc","cljs.core/vector?","cljs.core.into","cljs.core.remove","cljs.core/nil?","cljs.core/map?","metabase.util/remove-nils","cljs.core.dissoc","metabase.lib.convert/stage-keys","metabase.lib.convert/clean-stage","removals","temp__5802__auto__","vec__79356","malli.core.explain","cljs.core.filter","cljs.core.comp","cljs.core/first","cljs.core.map","cljs.core.juxt","new-stage","level__47393__auto__","metabase.util.log/glogi-level","logger__47394__auto__","metabase.util.log/is-loggable?","x__47395__auto__","js/Error","lambdaisland.glogi.log","metabase.util.log.format_msg","metabase.util.colorize","cljs.core.pr_str","or__5045__auto__","malli.error.humanize","metabase.util.pprint_to_str","clojure.data/diff","cljs.core._EQ_","cljs.core.conj","metabase.lib.convert/clean","almost-query","stage-index","current-stage","cljs.core/count","cljs.core.update","cljs.core/assoc","js/metabase","js/metabase.lib","js/metabase.lib.convert","js/metabase.lib.convert.->pMBQL","method-table__5642__auto__","cljs.core.atom","prefer-table__5643__auto__","method-cache__5644__auto__","cached-hierarchy__5645__auto__","hierarchy__5646__auto__","cljs.core.get","fexpr__79380","cljs.core/MultiFn","cljs.core.symbol","metabase.lib.convert/->pMBQL","metabase.lib.dispatch/dispatch-value","metabase.lib.hierarchy/hierarchy","metabase.lib.convert/default-MBQL-clause->pMBQL","mbql-clause","vec__79389","seq__79390","first__79391","cljs.core/next","last-elem","cljs.core/peek","last-elem-option?","clause-type","args","G__79392","cljs.core/pop","options","metabase.lib.options/ensure-uuid","x","cljs.core/Keyword","query","metabase.lib.convert/legacy-default-join-alias","metabase.lib.convert/deduplicate-join-aliases","joins","unique-name-fn","metabase.lib.util/unique-name-generator","cljs.core.mapv","join","G__79409","metabase.lib.convert/stage-source-card-id->pMBQL","stage","metabase.lib.util/legacy-string-table-id->card-id","aggregations","expressions","p__79444","vec__79445","k","v","metabase.lib.util/named-expression-clause","cljs.core/not-empty","*legacy-index->pMBQL-uuid*-orig-val__79449","*legacy-index->pMBQL-uuid*-temp-val__79450","cljs.core.map_indexed","p__79455","vec__79456","map__79459","cljs.core/--destructure-map","idx","_tag","ag-uuid","medley.core.assoc_some","cljs.core.reduce","cljs.core/not","cljs.core.disj","G__79468","medley.core.update_existing","cljs.core/update-vals","tag","G__79478","fields","cljs.core/seqable?","cljs.core.keyword","xs","m","metabase.lib.util/pipeline","stages","p__79487","vec__79489","y","vec__79495","id-or-name","p__79498","vec__79499","value","opts","clojure.set/rename-keys","metabase.lib.schema.expression/type-of","p__79507","vec__79508","pred-expr-pairs","default","G__79512","p__79519","vec__79520","metabase.lib.convert/get-or-throw!","cljs.core.ex_info","p__79527","vec__79528","p__79536","vec__79537","aggregation","vec__79540","seq__79541","first__79542","cljs.core.merge","metabase.lib.convert/legacy-query-from-inner-query","database-id","inner-query","js/metabase.lib.convert.->legacy-MBQL","fexpr__79546","metabase.lib.convert/->legacy-MBQL","var_args","G__79552","metabase.lib.convert/disqualify","p__79554","vec__79555","_v","cljs.core/qualified-keyword?","cljs.core/namespace","metabase.lib.convert.disqualify","metabase.lib.convert/options->legacy-MBQL","p__79562","vec__79564","p__79569","vec__79570","seq__79571","first__79572","metabase.lib.convert/aggregation->legacy-MBQL","inner","aggregation-opts","p__79577","vec__79580","seq__79581","first__79582","metabase.lib.convert/clause-with-options->legacy-MBQL","cljs.core.concat","temp__5804__auto__","cljs.core/cons","seq__79585","chunk__79586","count__79587","i__79588","cljs.core/chunked-seq?","c__5568__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","metabase.lib.hierarchy/derive","seq__79594","chunk__79595","count__79596","i__79597","seq__79601","chunk__79602","count__79603","i__79604","input","metabase.lib.convert/stage-metadata->legacy-metadata","stage-metadata","p1__79609#","cljs.core/update-keys","metabase.util/->snake_case_en","p__79613","map__79614","metabase.lib.convert/chain-stages","p__79617","vec__79618","G__79621","G__79622","p__79625","vec__79626","p__79629","vec__79631","_","agg-uuid","ag","G__79634","p__79639","vec__79641","id","vec__79645","p__79648","vec__79649","metabase.lib.convert/update-list->legacy-boolean-expression","pMBQL-key","legacy-key","G__79656","p1__79653#","base","G__79658","clojure.string/starts-with?","cljs.core/select-keys","metabase.lib.convert/source-card->legacy-source-table","source-card-id","*pMBQL-uuid->legacy-index*-orig-val__79669","*pMBQL-uuid->legacy-index*-temp-val__79670","p__79671","vec__79673","map__79676","p1__79664#","p2__79665#","p1__79666#","iter__5523__auto__","s__79684","cljs.core/LazySeq","c__5521__auto__","size__5522__auto__","b__79686","cljs.core/chunk-buffer","i__79685","cljs.core/-nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__79683","cljs.core/rest","expression","legacy-clause","metabase.lib.util/expression-name","cljs.core/second","parameters","query-type","cljs.core/last","G__79699"]],"~:used-vars",["^J",["~$metabase.lib.util/legacy-string-table-id->card-id","~$cljs.core/--destructure-map","~$metabase.lib.util/pipeline","~$cljs.core/comp","~$cljs.core/rest","~$metabase.lib.convert/aggregation->legacy-MBQL","~$metabase.lib.convert/stage-metadata->legacy-metadata","~$cljs.core/keyword","~$malli.core/explain","~$metabase.lib.convert/*pMBQL-uuid->legacy-index*","~$cljs.core/MultiFn","~$clojure.string/starts-with?","~$js/metabase.lib.convert.->pMBQL","~$metabase.lib.convert/clean-stage","~$metabase.lib.util/unique-name-generator","~$metabase.util/remove-nils","~$cljs.core/vector?","~$cljs.core/filter","~$cljs.core/=","~$metabase.lib.convert/*legacy-index->pMBQL-uuid*","~$cljs.core/update-keys","~$cljs.core/count","~$metabase.lib.options/ensure-uuid","~$metabase.lib.convert/->pMBQL","~$cljs.core/reduce","~$cljs.core/seq","~$cljs.core/chunk-first","~$cljs.core/Keyword","~$cljs.core/last","~$cljs.core/chunk","~$cljs.core/mapv","~$cljs.core/dissoc","~$cljs.core/LazySeq","~$cljs.core/chunk-rest","~$lambdaisland.glogi/log","~$cljs.core/atom","~$cljs.core/qualified-keyword?","~$cljs.core/concat","~$metabase.lib.util/named-expression-clause","~$metabase.util/colorize","~$metabase.util.log/is-loggable?","~$cljs.core/pop","~$cljs.core/pr-str","~$metabase.lib.schema.expression/type-of","~$metabase.lib.convert/clause-with-options->legacy-MBQL","~$metabase.lib.hierarchy/derive","~$js/metabase.lib.convert","~$cljs.core/into","~$cljs.core/map?","~$cljs.core/conj","~$metabase.lib.convert/default-MBQL-clause->pMBQL","~$metabase.lib.convert/update-list->legacy-boolean-expression","~$cljs.core/update","~$metabase.util.log/format-msg","~$cljs.core/namespace","~$cljs.core/juxt","~$cljs.core/peek","~$cljs.core/map","~$metabase.lib.convert/stage-keys","~$metabase.lib.convert/clean","~$medley.core/update-existing","~$cljs.core/update-vals","~$metabase.lib.convert/get-or-throw!","~$clojure.set/rename-keys","~$cljs.core/-add-method","~$metabase.lib.convert/source-card->legacy-source-table","~$cljs.core/get","~$clojure.data/diff","~$js/metabase.lib","~$medley.core/assoc-some","~$cljs.core/chunk-append","~$cljs.core/-nth","~$cljs.core/remove","~$cljs.core/drop-last","~$cljs.core/not-empty","~$metabase.util.log/glogi-level","~$cljs.core/symbol","~$metabase.lib.convert/options->legacy-MBQL","~$metabase.lib.convert/legacy-query-from-inner-query","~$cljs.core/nil?","~$metabase.lib.convert/disqualify","~$cljs.core/nth","~$cljs.core/ex-info","~$cljs.core/second","~$metabase.lib.dispatch/dispatch-value","~$metabase.lib.hierarchy/hierarchy","~$cljs.core/next","~$metabase.lib.util/expression-name","~$metabase.lib.convert/chain-stages","~$cljs.core/select-keys","~$cljs.core/chunk-cons","~$cljs.core/not","~$js/metabase.lib.convert.->legacy-MBQL","~$cljs.core/disj","~$cljs.core/cons","~$cljs.core/assoc","~$js/metabase","~$cljs.core/chunk-buffer","~$cljs.core/seqable?","~$cljs.core/map-indexed","~$metabase.lib.convert/deduplicate-join-aliases","~$metabase.lib.convert/clean-location","~$metabase.util/pprint-to-str","~$metabase.lib.convert/stage-source-card-id->pMBQL","~$cljs.core/take-last","~$cljs.core/first","~$metabase.lib.convert/->legacy-MBQL","~$cljs.core/merge","~$cljs.core/update-in","~$js/Error","~$metabase.lib.convert/legacy-default-join-alias","~$malli.error/humanize","~$cljs.core/chunked-seq?","~$metabase.util/->snake_case_en"]]],"~:cache-keys",["~#cmap",[["^1M","camel_snake_kebab/internals/misc.cljc"],["5ae08f83ceb8959971e6334596bff0214bf6fdf2","~:shadow.build.compiler/resolve",["^ ","~:require-id",null,"~:deps-ids",["^J",[]],"~:deps-syms",["^15","^C","~$camel-snake-kebab.internals.string-separator","^1@"]]],["^1M","goog/dom/tagname.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4K",["^ ","^4L",null,"^4M",["^J",[]],"^4N",["^15","~$goog.dom.HtmlElement"]]],["^1M","metabase/shared/util/i18n.cljs"],["6c3c8615004b349dae9851ed547d516d45e04bd0","^4K",["^ ","^4L",null,"^4M",["^J",[]],"^4N",["^15","^C","~$shadow.js.shim.module$ttag","^1@"]]],["^1M","goog/labs/useragent/platform.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4K",["^ ","^4L",null,"^4M",["^J",[]],"^4N",["^15","~$goog.string.internal","~$goog.labs.userAgent.util","~$goog.labs.userAgent.highEntropy.highEntropyValue","~$goog.labs.userAgent.highEntropy.highEntropyData","~$goog.labs.userAgent"]]],["^1M","metabase/types.cljc"],["00232bf78b259e26a21c218c8f2d746ba7003a15","^4K",["^ ","^4L",null,"^4M",["^J",[]],"^4N",["^15","^C","^T","~$metabase.types.coercion-hierarchies","^11"]]],["^1M","cljs/spec/gen/alpha.cljs"],["bc14df6666853ed869d7b88aaa864111c65d0c7f","^4K",["^ ","^4L",null,"^4M",["^J",[]],"^4N",["^15","^C","~$goog.Uri"]]],["^1M","metabase/lib/util.cljc"],["11c3262368d876979e323f3e646aab21fbf9b86e","^4K",["^ ","^4L",null,"^4M",["^J",[]],"^4N",["^15","^C","~$shadow.js.shim.module$crc_32","~$goog.string","~$goog.string.format","^T","^1@","^1;","~$metabase.lib.common","^18","^R","~$metabase.lib.schema.common","^13","~$metabase.lib.schema.id","~$metabase.mbql.util","~$metabase.shared.util.i18n","^11","~$metabase.util.malli"]]],["^1M","lambdaisland/glogi.cljs"],["76286836d4172602aa08006b2a754dda736ffe09","^4K",["^ ","^4L",null,"^4M",["^J",[]],"^4N",["^15","^C","~$goog.log","~$goog.debug.Console","~$goog.array","^1@","~$goog.object","~$goog.debug.FancyWindow","~$goog.debug.DivConsole"]]],["^1M","goog/math/math.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4K",["^ ","^4L",null,"^4M",["^J",[]],"^4N",["^15","~$goog.asserts"]]],["^1M","goog/html/trustedtypes.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4K",["^ ","^4L",null,"^4M",["^J",[]],"^4N",["^15"]]],["^1M","goog/string/stringformat.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4K",["^ ","^4L",null,"^4M",["^J",[]],"^4N",["^15","^4Z"]]],["^1M","malli/registry.cljc"],["514c6f7d69d7e40b56fa75bfd1a49a683ca15982","^4K",["^ ","^4L",null,"^4M",["^J",[]],"^4N",["^15","^C"]]],["^1M","goog/labs/useragent/browser.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4K",["^ ","^4L",null,"^4M",["^J",[]],"^4N",["^15","^4S","^4T","^5<","^4R","^4U","^4V"]]],["^1M","goog/html/safeurl.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4K",["^ ","^4L",null,"^4M",["^J",[]],"^4N",["^15","^5<","~$goog.fs.url","~$goog.html.TrustedResourceUrl","~$goog.string.Const","~$goog.string.TypedString","^4R"]]],["^1M","goog/style/style.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4K",["^ ","^4L",null,"^4M",["^J",[]],"^4N",["^15","^5<","~$goog.dom","~$goog.dom.NodeType","~$goog.dom.TagName","~$goog.dom.safe","~$goog.dom.vendor","~$goog.html.SafeStyleSheet","~$goog.math.Box","~$goog.math.Coordinate","~$goog.math.Rect","~$goog.math.Size","^59","~$goog.reflect","^4Z","~$goog.userAgent"]]],["^1M","goog/array/array.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4K",["^ ","^4L",null,"^4M",["^J",[]],"^4N",["^15","^5<"]]],["~:shadow.build.js-support/require","moment"],["~$shadow.js.shim.module$moment","shadow.js.shim.module$moment.js","require","^4K",["^ ","^4L",null,"^4M",["^J",[]],"^4N",["^15"]]],["^5M","moment-timezone"],["~$shadow.js.shim.module$moment_timezone","shadow.js.shim.module$moment_timezone.js","require","^4K",["^ ","^4L",null,"^4M",["^J",[]],"^4N",["^15"]]],["^1M","metabase/mbql/schema/macros.cljs"],["2af09bd42ffb1e15b66723cf7ba15db7dc75d10b","^4K",["^ ","^4L",null,"^4M",["^J",[]],"^4N",["^15","^C"]]],["^1M","metabase/lib/schema/mbql_clause.cljc"],["e5bdd00c58db706b1219843528fd3cd9dd8ab728","^4K",["^ ","^4L",null,"^4M",["^J",[]],"^4N",["^15","^C","^51","^13","~$metabase.types","^55","~$metabase.util.malli.registry"]]],["^1M","goog/useragent/useragent.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4K",["^ ","^4L",null,"^4M",["^J",[]],"^4N",["^15","~$goog.labs.userAgent.browser","~$goog.labs.userAgent.engine","~$goog.labs.userAgent.platform","^4S","^5K","^4R"]]],["^1M","malli/generator.cljc"],["514c6f7d69d7e40b56fa75bfd1a49a683ca15982","^4K",["^ ","^4L",null,"^4M",["^J",[]],"^4N",["^15","^C","^E","^1@","~$clojure.test.check","~$clojure.test.check.generators","~$clojure.test.check.properties","~$clojure.test.check.random","~$clojure.test.check.rose-tree","^V","~$malli.registry"]]],["^1M","clojure/test/check/properties.cljc"],["f33d988fd57bc9c11af1952db81c10f319c91416","^4K",["^ ","^4L",null,"^4M",["^J",[]],"^4N",["^15","^C","^5V","~$clojure.test.check.results"]]],["^1M","clojure/test/check/generators.cljc"],["f33d988fd57bc9c11af1952db81c10f319c91416","^4K",["^ ","^4L",null,"^4M",["^J",[]],"^4N",["^15","^C","^1@","^5X","^5Y","^4Z"]]],["^1M","goog/debug/error.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4K",["^ ","^4L",null,"^4M",["^J",[]],"^4N",["^15"]]],["^1M","metabase/lib/common.cljc"],["a3bc6343077ef13a3da77612b68f23f9b2a3d890","^4K",["^ ","^4L",null,"^4M",["^J",[]],"^4N",["^15","^C","^1>","^1:","^18","~$metabase.lib.ref","^51","^55"]]],["^1M","metabase/lib/schema/util.cljc"],["14a9e8a90c56f5e44b4ecd361e962722fd97aecf","^4K",["^ ","^4L",null,"^4M",["^J",[]],"^4N",["^15","^C","^18"]]],["^1M","goog/flags/flags.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4K",["^ ","^4L",null,"^4M",["^J",[]],"^4N",["^15"]]],["^1M","malli/util.cljc"],["514c6f7d69d7e40b56fa75bfd1a49a683ca15982","^4K",["^ ","^4L",null,"^4M",["^J",[]],"^4N",["^15","^C","^C","^V"]]],["^1M","clojure/test/check/random/doubles.cljs"],["f33d988fd57bc9c11af1952db81c10f319c91416","^4K",["^ ","^4L",null,"^4M",["^J",[]],"^4N",["^15","^C","~$clojure.test.check.random.longs"]]],["^1M","net/cgrand/macrovich.cljc"],["abcb26cbfe0f8eef363b25525210c0fe1eb1f693","^4K",["^ ","^4L",null,"^4M",["^J",[]],"^4N",["^15","^C"]]],["^1M","malli/destructure.cljc"],["514c6f7d69d7e40b56fa75bfd1a49a683ca15982","^4K",["^ ","^4L",null,"^4M",["^J",[]],"^4N",["^15","^C","~$clojure.walk","^V","~$malli.impl.util"]]],["^1M","schema/spec/variant.cljc"],["0dacc3066a87f33088c9a332b6c21e8b0560011c","^4K",["^ ","^4L",null,"^4M",["^J",[]],"^4N",["^15","^C","~$schema.utils","~$schema.spec.core"]]],["^1M","goog/structs/circularbuffer.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4K",["^ ","^4L",null,"^4M",["^J",[]],"^4N",["^15"]]],["^1M","weavejester/dependency.cljc"],["7fd7f8879313f6a7e295f7447e668bdf492c42c1","^4K",["^ ","^4L",null,"^4M",["^J",[]],"^4N",["^15","^C","^T"]]],["^1M","metabase/lib/schema/common.cljc"],["3f51a06335a7cb84c835d859c422919499874414","^4K",["^ ","^4L",null,"^4M",["^J",[]],"^4N",["^15","^C","^1@","^5P","^5Q"]]],["^1M","goog/dom/nodetype.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4K",["^ ","^4L",null,"^4M",["^J",[]],"^4N",["^15"]]],["^1M","goog/labs/useragent/highentropy/highentropyvalue.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4K",["^ ","^4L",null,"^4M",["^J",[]],"^4N",["^15","^4S","^4R"]]],["^1M","cljs/pprint.cljs"],["bc14df6666853ed869d7b88aaa864111c65d0c7f","^4K",["^ ","^4L",null,"^4M",["^J",[]],"^4N",["^15","^C","^1@","^4Z","~$goog.string.StringBuffer"]]],["^1M","metabase/lib/schema/template_tag.cljc"],["f1b6289b8e576857fe667aed3da134e4ad1ea26a","^4K",["^ ","^4L",null,"^4M",["^J",[]],"^4N",["^15","^C","^V","^51","^52","~$metabase.mbql.schema","^5Q"]]],["^1M","metabase/lib/schema/ref.cljc"],["5037a60b3d2f427702cf5cedf23f02bcc394d051","^4K",["^ ","^4L",null,"^4M",["^J",[]],"^4N",["^15","^C","^1@","^1>","^1:","^51","^13","^52","~$metabase.lib.schema.mbql-clause","~$metabase.lib.schema.temporal-bucketing","^5P","^5Q"]]],["^1M","clojure/test/check/rose_tree.cljc"],["f33d988fd57bc9c11af1952db81c10f319c91416","^4K",["^ ","^4L",null,"^4M",["^J",[]],"^4N",["^15","^C"]]],["^1M","clojure/test/check/impl.cljc"],["f33d988fd57bc9c11af1952db81c10f319c91416","^4K",["^ ","^4L",null,"^4M",["^J",[]],"^4N",["^15","^C"]]],["^1M","camel_snake_kebab/internals/string_separator.cljc"],["5ae08f83ceb8959971e6334596bff0214bf6fdf2","^4K",["^ ","^4L",null,"^4M",["^J",[]],"^4N",["^15","^C","^1@"]]],["^1M","clojure/test/check/random.cljs"],["f33d988fd57bc9c11af1952db81c10f319c91416","^4K",["^ ","^4L",null,"^4M",["^J",[]],"^4N",["^15","^C","~$clojure.test.check.random.doubles","^61"]]],["^1M","metabase/lib/schema/expression/arithmetic.cljc"],["e6936a3e0b11bc3cd40d4e396c708af4622c21cb","^4K",["^ ","^4L",null,"^4M",["^J",[]],"^4N",["^15","^C","^V","^1;","^1:","^51","^13","^68","^69","^5P","^5Q"]]],["^1M","goog/string/typedstring.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4K",["^ ","^4L",null,"^4M",["^J",[]],"^4N",["^15"]]],["^1M","metabase/lib/schema/expression/string.cljc"],["b2d7de575aaaa880fdc88dfc31642c8e002c3669","^4K",["^ ","^4L",null,"^4M",["^J",[]],"^4N",["^15","^C","^13","^68"]]],["^1M","goog/object/object.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4K",["^ ","^4L",null,"^4M",["^J",[]],"^4N",["^15"]]],["^1M","metabase/lib/schema/filter.cljc"],["0147dea423ebfd097bf1edb97f0325c9e2908a85","^4K",["^ ","^4L",null,"^4M",["^J",[]],"^4N",["^15","^C","^51","^13","^68","^69","^5Q"]]],["^1M","goog/dom/asserts.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4K",["^ ","^4L",null,"^4M",["^J",[]],"^4N",["^15","^5<"]]],"~:SHADOW-TIMESTAMP",[1689947046000,1689947046000,1689947050000],["^1M","metabase/lib/ref.cljc"],["86a9fbeddec3e58f7bb54e61f5342658b370fb3b","^4K",["^ ","^4L",null,"^4M",["^J",[]],"^4N",["^15","^C","^1>","~$metabase.lib.schema.ref","^55"]]],["^1M","goog/math/long.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4K",["^ ","^4L",null,"^4M",["^J",[]],"^4N",["^15","^5<","^5K"]]],["^1M","goog/html/trustedresourceurl.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4K",["^ ","^4L",null,"^4M",["^J",[]],"^4N",["^15","^5<","~$goog.fs.blob","^5=","~$goog.html.SafeScript","~$goog.html.trustedtypes","^5?","^5@"]]],["^1M","schema/spec/leaf.cljc"],["0dacc3066a87f33088c9a332b6c21e8b0560011c","^4K",["^ ","^4L",null,"^4M",["^J",[]],"^4N",["^15","^C","^65"]]],["^1M","metabase/util/format.cljc"],["875f86a08288cb3ad5a6f15df988897eaf8613af","^4K",["^ ","^4L",null,"^4M",["^J",[]],"^4N",["^15","^C","^4Z"]]],["^1M","goog/math/irect.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4K",["^ ","^4L",null,"^4M",["^J",[]],"^4N",["^15"]]],["^1M","goog/math/box.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4K",["^ ","^4L",null,"^4M",["^J",[]],"^4N",["^15","^5<","^5H"]]],["^1M","metabase/lib/options.cljc"],["1870276153adf026e09a3e9ed1ba8beaad80e1c8","^4K",["^ ","^4L",null,"^4M",["^J",[]],"^4N",["^15","^C","^51","^54","^11","^55"]]],["^1M","goog/string/internal.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4K",["^ ","^4L",null,"^4M",["^J",[]],"^4N",["^15"]]],["^1M","clojure/test/check.cljc"],["f33d988fd57bc9c11af1952db81c10f319c91416","^4K",["^ ","^4L",null,"^4M",["^J",[]],"^4N",["^15","^C","^5V","^5X","^5[","^5Y","~$clojure.test.check.impl"]]],["^1M","goog/functions/functions.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4K",["^ ","^4L",null,"^4M",["^J",[]],"^4N",["^15"]]],["^1M","goog/html/safestyle.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4K",["^ ","^4L",null,"^4M",["^J",[]],"^4N",["^15","^5?","~$goog.html.SafeUrl","^5@","^5<","^4R"]]],["^1M","goog/dom/safe.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4K",["^ ","^4L",null,"^4M",["^J",[]],"^4N",["^15","^5<","~$goog.asserts.dom","~$goog.dom.asserts","~$goog.functions","~$goog.html.SafeHtml","^6>","~$goog.html.SafeStyle","^6A","^5>","~$goog.html.uncheckedconversions","^5?","^4R"]]],["^1M","goog/asserts/dom.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4K",["^ ","^4L",null,"^4M",["^J",[]],"^4N",["^15","^5C","^5<","~$goog.dom.element"]]],["^1M","medley/core.cljc"],["f5117fa4c15ff14c4a0ab7db414b0f102afb0b8a","^4K",["^ ","^4L",null,"^4M",["^J",[]],"^4N",["^15","^C"]]],["^1M","clojure/walk.cljs"],["bc14df6666853ed869d7b88aaa864111c65d0c7f","^4K",["^ ","^4L",null,"^4M",["^J",[]],"^4N",["^15","^C"]]],["^1M","metabase/lib/schema/expression/conditional.cljc"],["226c4623394b90853fcb014e9a95e84ffc8bd6db","^4K",["^ ","^4L",null,"^4M",["^J",[]],"^4N",["^15","^C","^T","^13","^68","^5P","^5Q"]]],["^1M","lambdaisland/glogi/console.cljs"],["76286836d4172602aa08006b2a754dda736ffe09","^4K",["^ ","^4L",null,"^4M",["^J",[]],"^4N",["^15","^C","~$lambdaisland.glogi","~$lambdaisland.glogi.print","^59","^57"]]],["^1M","goog/html/safehtml.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4K",["^ ","^4L",null,"^4M",["^J",[]],"^4N",["^15","^5?","^6>","^6F","^5F","^6A","^5C","^5>","^5@","^5<","^5R","^58","^59","^4R","~$goog.dom.tags","^6?"]]],["^1M","goog/dom/tags.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4K",["^ ","^4L",null,"^4M",["^J",[]],"^4N",["^15","^59"]]],["^1M","goog/math/size.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4K",["^ ","^4L",null,"^4M",["^J",[]],"^4N",["^15"]]],["^1M","malli/error.cljc"],["514c6f7d69d7e40b56fa75bfd1a49a683ca15982","^4K",["^ ","^4L",null,"^4M",["^J",[]],"^4N",["^15","^C","^1@","^V","~$malli.util"]]],["^1M","metabase/lib/dispatch.cljc"],["914208cd51b78412eff1b402519bbb422845497a","^4K",["^ ","^4L",null,"^4M",["^J",[]],"^4N",["^15","^C","^11"]]],["^1M","metabase/util/malli.cljc"],["0f9ba23be6bb9fa629617001e985b988d2322b17","^4K",["^ ","^4L",null,"^4M",["^J",[]],"^4N",["^15","^C","^C","^V","~$malli.destructure","^X","~$malli.generator","^6L","^54","^11"]]],["^1M","goog/labs/useragent/engine.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4K",["^ ","^4L",null,"^4M",["^J",[]],"^4N",["^15","^58","^4R","^4S"]]],["^1M","goog/fs/blob.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4K",["^ ","^4L",null,"^4M",["^J",[]],"^4N",["^15"]]],["^1M","metabase/mbql/schema/helpers.cljc"],["b1f6002b97b59423b504abb666e13c9b0228b768","^4K",["^ ","^4L",null,"^4M",["^J",[]],"^4N",["^15","^C","^1@","^5P","~$schema.core"]]],["^1M","goog/dom/dom.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4K",["^ ","^4L",null,"^4M",["^J",[]],"^4N",["^15","^58","^5<","^6B","~$goog.dom.BrowserFeature","^5B","^5C","^5D","^6E","^6G","^5H","^5J","^59","^4Z","^5?","~$goog.string.Unicode","^5L"]]],["^1M","borkdude/dynaload.cljc"],["accd696ba364b850b4d92e38f5a34d0e828a0ad1","^4K",["^ ","^4L",null,"^4M",["^J",[]],"^4N",["^15","^C"]]],["^1M","metabase/util/log.cljs"],["7d8a3bf01eb27c2ba7269dc90dc218e46bcc1d3a","^4K",["^ ","^4L",null,"^4M",["^J",[]],"^4N",["^15","^C","^56","^4Z","^4[","^6I","~$lambdaisland.glogi.console"]]],["^1M","goog/asserts/asserts.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4K",["^ ","^4L",null,"^4M",["^J",[]],"^4N",["^15","~$goog.debug.Error","^5B"]]],["^1M","goog/debug/relativetimeprovider.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4K",["^ ","^4L",null,"^4M",["^J",[]],"^4N",["^15"]]],["^1M","malli/sci.cljc"],["514c6f7d69d7e40b56fa75bfd1a49a683ca15982","^4K",["^ ","^4L",null,"^4M",["^J",[]],"^4N",["^15","^C","~$borkdude.dynaload"]]],["^1M","metabase/lib/schema/expression.cljc"],["f5c5c3ff3dc0f9a8b407cd7d06a68c6787061991","^4K",["^ ","^4L",null,"^4M",["^J",[]],"^4N",["^15","^C","^1>","^1:","^51","^54","^5P","^55","^5Q"]]],["^1M","goog/math/rect.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4K",["^ ","^4L",null,"^4M",["^J",[]],"^4N",["^15","^5<","^5G","^5H","~$goog.math.IRect","^5J"]]],["^1M","flatland/ordered/map.cljs"],["3a9cb9d79e47d77ecd4f4d550371ecf01464c461","^4K",["^ ","^4L",null,"^4M",["^J",[]],"^4N",["^15","^C"]]],["^1M","goog/uri/uri.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4K",["^ ","^4L",null,"^4M",["^J",[]],"^4N",["^15","^58","^5<","~$goog.collections.maps","^4Z","~$goog.structs","~$goog.uri.utils","~$goog.uri.utils.ComponentIndex","~$goog.uri.utils.StandardQueryParam"]]],["^1M","metabase/util/malli/registry.cljc"],["921d4f259bbe54cbeb6b88ae56937df492bdfb5e","^4K",["^ ","^4L",null,"^4M",["^J",[]],"^4N",["^15","^C","^V","^5Z","^6L"]]],["^1M","goog/labs/useragent/highentropy/highentropydata.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4K",["^ ","^4L",null,"^4M",["^J",[]],"^4N",["^15","^4T"]]],["^1M","metabase/types/coercion_hierarchies.cljc"],["c3d70ef6080e044d61f13ff6bfd76490e2dcd0ac","^4K",["^ ","^4L",null,"^4M",["^J",[]],"^4N",["^15","^C","^T"]]],["^1M","goog/collections/maps.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4K",["^ ","^4L",null,"^4M",["^J",[]],"^4N",["^15"]]],["^1M","goog/debug/divconsole.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4K",["^ ","^4L",null,"^4M",["^J",[]],"^4N",["^15","~$goog.debug.HtmlFormatter","~$goog.dom.DomHelper","^5C","^5D","^6E","^5F","^56","^5?","~$goog.style"]]],["^1M","schema/spec/collection.cljc"],["0dacc3066a87f33088c9a332b6c21e8b0560011c","^4K",["^ ","^4L",null,"^4M",["^J",[]],"^4N",["^15","^C","^64","^65"]]],["^1M","malli/impl/util.cljc"],["514c6f7d69d7e40b56fa75bfd1a49a683ca15982","^4K",["^ ","^4L",null,"^4M",["^J",[]],"^4N",["^15","^C"]]],["^1M","metabase/lib/schema/order_by.cljc"],["3f577f71e4ecba1aa1061f2228f6026ab45312ff","^4K",["^ ","^4L",null,"^4M",["^J",[]],"^4N",["^15","^C","^13","^68","^5Q"]]],["^1M","schema/utils.cljc"],["0dacc3066a87f33088c9a332b6c21e8b0560011c","^4K",["^ ","^4L",null,"^4M",["^J",[]],"^4N",["^15","^C","^4[","^59","^4Z","^1@"]]],["^1M","metabase/lib/schema/aggregation.cljc"],["ea4a70903cfc3ffeaa60ebdedb5ea00892da4dbe","^4K",["^ ","^4L",null,"^4M",["^J",[]],"^4N",["^15","^C","^1:","^13","^68","^54","^5Q"]]],["^1M","cljs/core/match.cljs"],["f419c02deee501e9f4b29f81215ba81ffcefe9b6","^4K",["^ ","^4L",null,"^4M",["^J",[]],"^4N",["^15","^C"]]],["^1M","goog/debug/fancywindow.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4K",["^ ","^4L",null,"^4M",["^J",[]],"^4N",["^15","^58","^5<","~$goog.debug.DebugWindow","^70","^5C","^5D","^6E","^5F","^56","^59","^4Z","^5?","^5L"]]],["^1M","goog/debug/formatter.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4K",["^ ","^4L",null,"^4M",["^J",[]],"^4N",["^15","~$goog.debug","~$goog.debug.RelativeTimeProvider","^6E","^6A","^6G","^56","^5?"]]],["^1M","metabase/shared/util/namespaces.cljs"],["00687008abd6eb291bc9d5ff1fff73210e0bbe6e","^4K",["^ ","^4L",null,"^4M",["^J",[]],"^4N",["^15","^C"]]],["^1M","metabase/mbql/util/match/impl.cljc"],["4150e01975339d308f5cfedda77875eda19c030d","^4K",["^ ","^4L",null,"^4M",["^J",[]],"^4N",["^15","^C"]]],["^1M","goog/fs/url.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4K",["^ ","^4L",null,"^4M",["^J",[]],"^4N",["^15"]]],["^1M","goog/base.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4K",["^ ","^4L",null,"^4M",["^J",[]],"^4N",[]]],["^1M","goog/structs/structs.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4K",["^ ","^4L",null,"^4M",["^J",[]],"^4N",["^15","^58","^59"]]],["^1M","clojure/string.cljs"],["bc14df6666853ed869d7b88aaa864111c65d0c7f","^4K",["^ ","^4L",null,"^4M",["^J",[]],"^4N",["^15","^C","^4Z","^66"]]],["^1M","metabase/lib/schema/temporal_bucketing.cljc"],["9cb7bba3e46e1de2fbb37d61df332336da6d9f66","^4K",["^ ","^4L",null,"^4M",["^J",[]],"^4N",["^15","^C","^T","^5Q"]]],["^1M","metabase/util.cljc"],["2eb945a6741f1450ecac08a9087b862ce52b9e3a","^4K",["^ ","^4L",null,"^4M",["^J",[]],"^4N",["^15","^C","~$camel-snake-kebab.internals.macros","^10","^?","^T","^1@","^62","~$flatland.ordered.map","^1;","^54","~$metabase.shared.util.namespaces","~$metabase.util.format","^Z","~$net.cgrand.macrovich","~$weavejester.dependency"]]],["^1M","clojure/test/check/random/longs/bit_count_impl.cljs"],["f33d988fd57bc9c11af1952db81c10f319c91416","^4K",["^ ","^4L",null,"^4M",["^J",[]],"^4N",["^15","^C"]]],["^1M","malli/impl/regex.cljc"],["514c6f7d69d7e40b56fa75bfd1a49a683ca15982","^4K",["^ ","^4L",null,"^4M",["^J",[]],"^4N",["^15","^C","^63"]]],["^1M","camel_snake_kebab/internals/macros.cljc"],["5ae08f83ceb8959971e6334596bff0214bf6fdf2","^4K",["^ ","^4L",null,"^4M",["^J",[]],"^4N",["^15","^C","~$camel-snake-kebab.internals.alter-name","~$camel-snake-kebab.internals.misc"]]],["^1M","metabase/lib/schema/expression/temporal.cljc"],["f1f22c1655e7d335b884a22b010f2b8b08ad1e94","^4K",["^ ","^4L",null,"^4M",["^J",[]],"^4N",["^15","^C","^T","^V","^1:","^51","^13","~$metabase.lib.schema.literal","^68","^69","^5Q","^5N","^5O"]]],["^1M","goog/string/string.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4K",["^ ","^4L",null,"^4M",["^J",[]],"^4N",["^15","^5D","^6G","^5?","^4R"]]],["^1M","schema/core.cljc"],["0dacc3066a87f33088c9a332b6c21e8b0560011c","^4K",["^ ","^4L",null,"^4M",["^J",[]],"^4N",["^15","^C","^1@","^64","^65","~$schema.spec.leaf","~$schema.spec.variant","~$schema.spec.collection"]]],["^1M","metabase/mbql/schema.cljc"],["c51bf2a180ecbc12d6a1cd42a4049323f46a0085","^4K",["^ ","^4L",null,"^4M",["^J",[]],"^4N",["^15","^C","^5N","^5O","^C","^T","~$metabase.mbql.schema.helpers","~$metabase.mbql.schema.macros","^6O"]]],["^1M","metabase/mbql/util/match.cljs"],["d65aaa9fbcb7960b90ba7ca97258b1dc8a40be2b","^4K",["^ ","^4L",null,"^4M",["^J",[]],"^4N",["^15","^C","^G","~$metabase.mbql.util.match.impl"]]],["^1M","malli/core.cljc"],["514c6f7d69d7e40b56fa75bfd1a49a683ca15982","^4K",["^ ","^4L",null,"^4M",["^J",[]],"^4N",["^15","^C","^C","~$malli.impl.regex","^63","^5Z","~$malli.sci"]]],["^1M","metabase/lib/schema.cljc"],["122fe4013d55087fc7287141eb7dc6f630436424","^4K",["^ ","^4L",null,"^4M",["^J",[]],"^4N",["^15","^C","~$metabase.lib.schema.aggregation","^51","^13","~$metabase.lib.schema.expression.arithmetic","~$metabase.lib.schema.expression.conditional","~$metabase.lib.schema.expression.string","~$metabase.lib.schema.expression.temporal","~$metabase.lib.schema.filter","^52","~$metabase.lib.schema.join","^7=","~$metabase.lib.schema.order-by","^6<","~$metabase.lib.schema.template-tag","~$metabase.lib.schema.util","~$metabase.mbql.util.match","^5Q"]]],["^1M","clojure/data.cljs"],["bc14df6666853ed869d7b88aaa864111c65d0c7f","^4K",["^ ","^4L",null,"^4M",["^J",[]],"^4N",["^15","^C","^T"]]],["^1M","goog/reflect/reflect.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4K",["^ ","^4L",null,"^4M",["^J",[]],"^4N",["^15"]]],["^1M","goog/labs/useragent/util.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4K",["^ ","^4L",null,"^4M",["^J",[]],"^4N",["^15","^4R","^4V"]]],["^1M","goog/debug/debug.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4K",["^ ","^4L",null,"^4M",["^J",[]],"^4N",["^15","^58","~$goog.debug.errorcontext"]]],["^1M","goog/string/stringbuffer.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4K",["^ ","^4L",null,"^4M",["^J",[]],"^4N",["^15"]]],["^1M","schema/spec/core.cljc"],["0dacc3066a87f33088c9a332b6c21e8b0560011c","^4K",["^ ","^4L",null,"^4M",["^J",[]],"^4N",["^15","^C","^64"]]],["^5M","ttag"],["^4Q","shadow.js.shim.module$ttag.js","require","^4K",["^ ","^4L",null,"^4M",["^J",[]],"^4N",["^15"]]],["^1M","goog/math/coordinate.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4K",["^ ","^4L",null,"^4M",["^J",[]],"^4N",["^15","~$goog.math"]]],["^1M","goog/debug/errorcontext.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4K",["^ ","^4L",null,"^4M",["^J",[]],"^4N",["^15"]]],["^1M","metabase/lib/convert.cljc"],["02b5f0cb2d10c8707d14831510e21c7d65dc15b4","^4K",["^ ","^4L",null,"^4M",["^J",[]],"^4N",["^15","^C","^10","^T","^1@","^V","^X","^1;","^1>","^1:","^18","^R","^13","^14","^11","^Z"]]],["^1M","goog/labs/useragent/useragent.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4K",["^ ","^4L",null,"^4M",["^J",[]],"^4N",["^15","~$goog.flags"]]],["^1M","goog/dom/element.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4K",["^ ","^4L",null,"^4M",["^J",[]],"^4N",["^15","^5B","^5C"]]],["^1M","goog/html/uncheckedconversions.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4K",["^ ","^4L",null,"^4M",["^J",[]],"^4N",["^15","^5<","^6E","^6>","^6F","^5F","^6A","^5>","^5?","^4R"]]],["^1M","goog/debug/debugwindow.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4K",["^ ","^4L",null,"^4M",["^J",[]],"^4N",["^15","^6[","^5D","^6E","^5F","^56","^5?","~$goog.structs.CircularBuffer","^5L"]]],["^1M","metabase/mbql/util.cljc"],["2532d5faa94d2a89dd06e529c641d594e298e2aa","^4K",["^ ","^4L",null,"^4M",["^J",[]],"^4N",["^15","^C","^1@","~$metabase.mbql.predicates","^67","^7A","^7P","^54","^6O"]]],["^1M","goog/dom/htmlelement.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4K",["^ ","^4L",null,"^4M",["^J",[]],"^4N",["^15"]]],["^1M","cljs/core.cljs"],["bc14df6666853ed869d7b88aaa864111c65d0c7f","^4K",["^ ","^4L",null,"^4M",["^J",[]],"^4N",["^15","~$goog.math.Long","~$goog.math.Integer","^4Z","^59","^58","^4X","^66"]]],["^1M","goog/html/safescript.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4K",["^ ","^4L",null,"^4M",["^J",[]],"^4N",["^15","^5?","^5@","^6?","^5<"]]],["^1M","clojure/test/check/random/longs.cljs"],["f33d988fd57bc9c11af1952db81c10f319c91416","^4K",["^ ","^4L",null,"^4M",["^J",[]],"^4N",["^15","^C","~$clojure.test.check.random.longs.bit-count-impl","^7V","^C"]]],["^1M","goog/log/log.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4K",["^ ","^4L",null,"^4M",["^J",[]],"^4N",["^15","^5<","^73"]]],["^1M","camel_snake_kebab/internals/alter_name.cljc"],["5ae08f83ceb8959971e6334596bff0214bf6fdf2","^4K",["^ ","^4L",null,"^4M",["^J",[]],"^4N",["^15","^C"]]],["^1M","goog/html/safestylesheet.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4K",["^ ","^4L",null,"^4M",["^J",[]],"^4N",["^15","^5?","^6F","^5@","^59","^5<","^4R"]]],["^1M","goog/math/integer.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4K",["^ ","^4L",null,"^4M",["^J",[]],"^4N",["^15","^5K"]]],["^1M","goog/debug/console.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4K",["^ ","^4L",null,"^4M",["^J",[]],"^4N",["^15","~$goog.debug.TextFormatter","^56"]]],["^1M","lambdaisland/glogi/print.cljs"],["76286836d4172602aa08006b2a754dda736ffe09","^4K",["^ ","^4L",null,"^4M",["^J",[]],"^4N",["^15","^C","^6I","^59"]]],["^1M","goog/dom/browserfeature.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4K",["^ ","^4L",null,"^4M",["^J",[]],"^4N",["^15","^5L"]]],["^1M","clojure/set.cljs"],["bc14df6666853ed869d7b88aaa864111c65d0c7f","^4K",["^ ","^4L",null,"^4M",["^J",[]],"^4N",["^15","^C"]]],["^1M","goog/uri/utils.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4K",["^ ","^4L",null,"^4M",["^J",[]],"^4N",["^15","^5<","^4Z"]]],["^1M","goog/string/const.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4K",["^ ","^4L",null,"^4M",["^J",[]],"^4N",["^15","^5<","^5@"]]],["^1M","metabase/lib/schema/id.cljc"],["7cdfc70702a9a9e04b75ca7c9dc898ddf546f99d","^4K",["^ ","^4L",null,"^4M",["^J",[]],"^4N",["^15","^C","^51","^67","^5Q"]]],["^1M","goog/dom/vendor.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4K",["^ ","^4L",null,"^4M",["^J",[]],"^4N",["^15","^4Z","^5L"]]],["^1M","metabase/lib/schema/literal.cljc"],["f8f31bfaef820ab25b896b49fd404b937d0df64e","^4K",["^ ","^4L",null,"^4M",["^J",[]],"^4N",["^15","^C","^V","^51","^13","^68","^5Q"]]],["^1M","metabase/lib/hierarchy.cljc"],["c9d228603522de5c85546fb645c59736d4eb94d2","^4K",["^ ","^4L",null,"^4M",["^J",[]],"^4N",["^15","^C"]]],["^1M","metabase/mbql/predicates.cljc"],["20ab1a5ccd943c35c646c5f7396ea40f9bfa7ac4","^4K",["^ ","^4L",null,"^4M",["^J",[]],"^4N",["^15","^C","^67","^6O"]]],["^1M","clojure/test/check/results.cljc"],["f33d988fd57bc9c11af1952db81c10f319c91416","^4K",["^ ","^4L",null,"^4M",["^J",[]],"^4N",["^15","^C"]]],["^5M","crc-32"],["^4Y","shadow.js.shim.module$crc_32.js","require","^4K",["^ ","^4L",null,"^4M",["^J",[]],"^4N",["^15"]]],["^1M","metabase/lib/schema/join.cljc"],["924e0ca4abbab776fa05357d6d22bafb8a596648","^4K",["^ ","^4L",null,"^4M",["^J",[]],"^4N",["^15","^C","^51","^13","^54","^5Q"]]]]],"~:clj-info",["^ ","jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/analyzer/impl.cljc",1689947050000,"jar:file:/root/.m2/repository/instaparse/instaparse/1.4.12/instaparse-1.4.12.jar!/instaparse/line_col.clj",1689946146000,"jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/source_map/base64_vlq.clj",1689947050000,"jar:file:/root/.m2/repository/instaparse/instaparse/1.4.12/instaparse-1.4.12.jar!/instaparse/viz.clj",1689946146000,"jar:file:/root/.m2/repository/org/clojure/tools.namespace/1.4.4/tools.namespace-1.4.4.jar!/clojure/tools/namespace/parse.cljc",1689946139000,"jar:file:/root/.m2/repository/weavejester/dependency/0.2.1/dependency-0.2.1.jar!/weavejester/dependency.cljc",1689946093000,"jar:file:/root/.m2/repository/instaparse/instaparse/1.4.12/instaparse-1.4.12.jar!/instaparse/transform.clj",1689946146000,"jar:file:/root/.m2/repository/ring/ring-codec/1.2.0/ring-codec-1.2.0.jar!/ring/util/codec.clj",1689946172000,"file:/home/gmrworkspace/dashboard/src/metabase/lib/hierarchy.cljc",1690286812000,"jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/instant.clj",1689947050000,"jar:file:/root/.m2/repository/org/clojure/tools.reader/1.3.6/tools.reader-1.3.6.jar!/clojure/tools/reader/default_data_readers.clj",1689946174000,"jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/pprint.cljc",1689947050000,"jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/externs.clj",1689947050000,"file:/home/gmrworkspace/dashboard/shared/src/metabase/mbql/util/match.clj",1690286812000,"jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/vendor/clojure/tools/reader/default_data_readers.clj",1689947050000,"file:/home/gmrworkspace/dashboard/shared/src/metabase/mbql/schema/helpers.cljc",1692013156305,"jar:file:/root/.m2/repository/prismatic/schema/1.4.1/schema-1.4.1.jar!/schema/core.cljc",1689946172000,"file:/home/gmrworkspace/dashboard/shared/src/metabase/shared/util/i18n.clj",1690286812000,"jar:file:/root/.m2/repository/org/clojure/tools.reader/1.3.6/tools.reader-1.3.6.jar!/clojure/tools/reader/edn.clj",1689946174000,"jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/compiler.cljc",1689947050000,"jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/env.cljc",1689947050000,"jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/analyzer/impl/namespaces.cljc",1689947050000,"jar:file:/root/.m2/repository/prismatic/schema/1.4.1/schema-1.4.1.jar!/schema/macros.clj",1689946172000,"file:/home/gmrworkspace/dashboard/src/metabase/util/i18n/plural.clj",1690286813000,"jar:file:/root/.m2/repository/metosin/malli/0.10.2/malli-0.10.2.jar!/malli/core.cljc",1689946170000,"jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/source_map.clj",1689947050000,"jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/util.cljc",1689947050000,"file:/home/gmrworkspace/dashboard/src/metabase/util.cljc",1690286813000,"jar:file:/root/.m2/repository/nano-id/nano-id/1.0.0/nano-id-1.0.0.jar!/nano_id/core.cljc",1689946171000,"file:/home/gmrworkspace/dashboard/src/metabase/lib/dispatch.cljc",1690286812000,"file:/home/gmrworkspace/dashboard/src/metabase/lib/schema/common.cljc",1690286812000,"file:/home/gmrworkspace/dashboard/src/metabase/plugins/classloader.clj",1692013156125,"jar:file:/root/.m2/repository/medley/medley/1.4.0/medley-1.4.0.jar!/medley/core.cljc",1689946185000,"jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/analyzer.cljc",1689947050000,"jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/analyzer/passes.cljc",1689947050000,"jar:file:/root/.m2/repository/org/clojure/test.check/1.1.1/test.check-1.1.1.jar!/clojure/test/check/random.clj",1689946177000,"jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/vendor/clojure/data/json.clj",1689947050000,"file:/home/gmrworkspace/dashboard/src/metabase/util/format.cljc",1690286813000,"jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/source_map/base64.clj",1689947050000,"jar:file:/root/.m2/repository/riddley/riddley/0.2.0/riddley-0.2.0.jar!/riddley/walk.clj",1689946160000,"file:/home/gmrworkspace/dashboard/src/metabase/lib/schema/ref.cljc",1690286812000,"jar:file:/root/.m2/repository/instaparse/instaparse/1.4.12/instaparse-1.4.12.jar!/instaparse/reduction.clj",1689946146000,"jar:file:/root/.m2/repository/org/tcrawley/dynapath/1.1.0/dynapath-1.1.0.jar!/dynapath/util.clj",1689946174000,"jar:file:/root/.m2/repository/camel-snake-kebab/camel-snake-kebab/0.4.3/camel-snake-kebab-0.4.3.jar!/camel_snake_kebab/internals/macros.cljc",1689946178000,"file:/home/gmrworkspace/dashboard/shared/src/metabase/mbql/util/match/impl.cljc",1690286812000,"jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/vendor/clojure/tools/reader/reader_types.clj",1689947050000,"jar:file:/root/.m2/repository/instaparse/instaparse/1.4.12/instaparse-1.4.12.jar!/instaparse/auto_flatten_seq.clj",1689946146000,"jar:file:/root/.m2/repository/instaparse/instaparse/1.4.12/instaparse-1.4.12.jar!/instaparse/core.clj",1689946146000,"jar:file:/root/.m2/repository/metosin/malli/0.10.2/malli-0.10.2.jar!/malli/generator.cljc",1689946170000,"file:/home/gmrworkspace/dashboard/src/metabase/lib/schema/id.cljc",1690286812000,"jar:file:/root/.m2/repository/org/clojure/core.cache/1.0.225/core.cache-1.0.225.jar!/clojure/core/cache.clj",1689946183000,"file:/home/gmrworkspace/dashboard/src/metabase/lib/schema/expression.cljc",1690286812000,"jar:file:/root/.m2/repository/metosin/malli/0.10.2/malli-0.10.2.jar!/malli/sci.cljc",1689946170000,"jar:file:/root/.m2/repository/potemkin/potemkin/0.4.6/potemkin-0.4.6.jar!/potemkin/types.clj",1689946176000,"jar:file:/root/.m2/repository/org/clojure/test.check/1.1.1/test.check-1.1.1.jar!/clojure/test/check/properties.cljc",1689946177000,"jar:file:/root/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/set.clj",1689946092000,"jar:file:/root/.m2/repository/org/clojure/math.numeric-tower/0.0.5/math.numeric-tower-0.0.5.jar!/clojure/math/numeric_tower.clj",1689946148000,"jar:file:/root/.m2/repository/net/cgrand/macrovich/0.2.1/macrovich-0.2.1.jar!/net/cgrand/macrovich.cljc",1689946165000,"jar:file:/root/.m2/repository/colorize/colorize/0.1.1/colorize-0.1.1.jar!/colorize/core.clj",1689946104000,"jar:file:/root/.m2/repository/borkdude/dynaload/0.3.5/dynaload-0.3.5.jar!/borkdude/dynaload.cljc",1689946165000,"jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/vendor/clojure/tools/reader/impl/inspect.clj",1689947050000,"file:/home/gmrworkspace/dashboard/src/metabase/lib/options.cljc",1692013156125,"jar:file:/root/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/string.clj",1689946092000,"jar:file:/root/.m2/repository/potemkin/potemkin/0.4.6/potemkin-0.4.6.jar!/potemkin.clj",1689946176000,"jar:file:/root/.m2/repository/instaparse/instaparse/1.4.12/instaparse-1.4.12.jar!/instaparse/failure.clj",1689946146000,"jar:file:/root/.m2/repository/prismatic/schema/1.4.1/schema-1.4.1.jar!/schema/spec/variant.cljc",1689946172000,"jar:file:/root/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/core.clj",1689946092000,"file:/home/gmrworkspace/dashboard/src/metabase/util/i18n/impl.clj",1692013156125,"jar:file:/root/.m2/repository/org/clojure/tools.namespace/1.4.4/tools.namespace-1.4.4.jar!/clojure/tools/namespace/dependency.cljc",1689946139000,"jar:file:/root/.m2/repository/prismatic/schema/1.4.1/schema-1.4.1.jar!/schema/spec/leaf.cljc",1689946172000,"jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/analyzer/passes/and_or.cljc",1689947050000,"jar:file:/root/.m2/repository/org/clojure/test.check/1.1.1/test.check-1.1.1.jar!/clojure/test/check.cljc",1689946177000,"jar:file:/root/.m2/repository/riddley/riddley/0.2.0/riddley-0.2.0.jar!/riddley/compiler.clj",1689946160000,"jar:file:/root/.m2/repository/org/clojure/core.memoize/1.0.257/core.memoize-1.0.257.jar!/clojure/core/memoize.clj",1689946178000,"jar:file:/root/.m2/repository/metosin/malli/0.10.2/malli-0.10.2.jar!/malli/destructure.cljc",1689946170000,"jar:file:/root/.m2/repository/instaparse/instaparse/1.4.12/instaparse-1.4.12.jar!/instaparse/print.clj",1689946146000,"jar:file:/root/.m2/repository/org/clojure/tools.namespace/1.4.4/tools.namespace-1.4.4.jar!/clojure/tools/namespace/track.cljc",1689946139000,"jar:file:/root/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/pprint.clj",1689946092000,"jar:file:/root/.m2/repository/org/clojure/java.classpath/1.0.0/java.classpath-1.0.0.jar!/clojure/java/classpath.clj",1689946162000,"jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/js_deps.cljc",1689947050000,"jar:file:/root/.m2/repository/metosin/malli/0.10.2/malli-0.10.2.jar!/malli/impl/regex.cljc",1689946170000,"jar:file:/root/.m2/repository/cheshire/cheshire/5.11.0/cheshire-5.11.0.jar!/cheshire/factory.clj",1689946173000,"jar:file:/root/.m2/repository/org/clojure/tools.reader/1.3.6/tools.reader-1.3.6.jar!/clojure/tools/reader/impl/errors.clj",1689946174000,"jar:file:/root/.m2/repository/metosin/malli/0.10.2/malli-0.10.2.jar!/malli/experimental.cljc",1689946170000,"jar:file:/root/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/walk.clj",1689946092000,"jar:file:/root/.m2/repository/org/clojure/tools.reader/1.3.6/tools.reader-1.3.6.jar!/clojure/tools/reader.clj",1689946174000,"file:/home/gmrworkspace/dashboard/src/metabase/lib/common.cljc",1690286812000,"jar:file:/root/.m2/repository/prismatic/schema/1.4.1/schema-1.4.1.jar!/schema/spec/core.cljc",1689946172000,"jar:file:/root/.m2/repository/org/clojure/test.check/1.1.1/test.check-1.1.1.jar!/clojure/test/check/generators.cljc",1689946177000,"jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/core.cljc",1689947050000,"jar:file:/root/.m2/repository/cheshire/cheshire/5.11.0/cheshire-5.11.0.jar!/cheshire/generate.clj",1689946173000,"jar:file:/root/.m2/repository/metosin/malli/0.10.2/malli-0.10.2.jar!/malli/experimental/time.cljc",1689946170000,"jar:file:/root/.m2/repository/org/clojure/tools.reader/1.3.6/tools.reader-1.3.6.jar!/clojure/tools/reader/reader_types.clj",1689946174000,"file:/home/gmrworkspace/dashboard/shared/src/metabase/mbql/schema.cljc",1692013156305,"jar:file:/root/.m2/repository/cheshire/cheshire/5.11.0/cheshire-5.11.0.jar!/cheshire/parse.clj",1689946173000,"file:/home/gmrworkspace/dashboard/src/metabase/util/i18n.clj",1692013156125,"jar:file:/root/.m2/repository/instaparse/instaparse/1.4.12/instaparse-1.4.12.jar!/instaparse/cfg.clj",1689946146000,"jar:file:/root/.m2/repository/cheshire/cheshire/5.11.0/cheshire-5.11.0.jar!/cheshire/core.clj",1689946173000,"jar:file:/root/.m2/repository/metosin/malli/0.10.2/malli-0.10.2.jar!/malli/impl/util.cljc",1689946170000,"jar:file:/root/.m2/repository/metosin/malli/0.10.2/malli-0.10.2.jar!/malli/registry.cljc",1689946170000,"jar:file:/root/.m2/repository/instaparse/instaparse/1.4.12/instaparse-1.4.12.jar!/instaparse/gll.clj",1689946146000,"jar:file:/root/.m2/repository/binaryage/devtools/1.0.6/devtools-1.0.6.jar!/devtools/defaults.clj",1689947054000,"jar:file:/root/.m2/repository/metosin/malli/0.10.2/malli-0.10.2.jar!/malli/instrument.clj",1689946170000,"jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/vendor/clojure/tools/reader.clj",1689947050000,"jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/spec/gen/alpha.cljc",1689947050000,"file:/home/gmrworkspace/dashboard/src/metabase/lib/ref.cljc",1690286812000,"jar:file:/root/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/edn.clj",1689946092000,"jar:file:/root/.m2/repository/nano-id/nano-id/1.0.0/nano-id-1.0.0.jar!/nano_id/random.cljc",1689946171000,"jar:file:/root/.m2/repository/environ/environ/1.2.0/environ-1.2.0.jar!/environ/core.cljc",1689946163000,"jar:file:/root/.m2/repository/prismatic/schema/1.4.1/schema-1.4.1.jar!/schema/spec/collection.cljc",1689946172000,"jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/vendor/clojure/tools/reader/impl/errors.clj",1689947050000,"jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/tagged_literals.cljc",1689947050000,"jar:file:/root/.m2/repository/instaparse/instaparse/1.4.12/instaparse-1.4.12.jar!/instaparse/repeat.clj",1689946146000,"jar:file:/root/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/java/io.clj",1689946092000,"jar:file:/root/.m2/repository/org/clojure/test.check/1.1.1/test.check-1.1.1.jar!/clojure/test/check/results.cljc",1689946177000,"jar:file:/root/.m2/repository/com/lambdaisland/glogi/1.2.164/glogi-1.2.164.jar!/lambdaisland/glogi.clj",1689947043000,"jar:file:/root/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/instant.clj",1689946092000,"file:/home/gmrworkspace/dashboard/shared/src/metabase/shared/util/namespaces.clj",1690286812000,"jar:file:/root/.m2/repository/org/clojure/tools.namespace/1.4.4/tools.namespace-1.4.4.jar!/clojure/tools/namespace/file.clj",1689946139000,"jar:file:/root/.m2/repository/org/clojure/core.match/1.0.1/core.match-1.0.1.jar!/cljs/core/match.clj",1689946174000,"jar:file:/root/.m2/repository/org/clojure/spec.alpha/0.3.218/spec.alpha-0.3.218.jar!/clojure/spec/gen/alpha.clj",1689946117000,"jar:file:/root/.m2/repository/metosin/malli/0.10.2/malli-0.10.2.jar!/malli/error.cljc",1689946170000,"file:/home/gmrworkspace/dashboard/shared/src/metabase/mbql/schema/macros.clj",1690286812000,"jar:file:/root/.m2/repository/prismatic/schema/1.4.1/schema-1.4.1.jar!/schema/utils.cljc",1689946172000,"file:/home/gmrworkspace/dashboard/src/metabase/util/malli/registry.cljc",1690286813000,"file:/home/gmrworkspace/dashboard/src/metabase/config.clj",1692013154929,"file:/home/gmrworkspace/dashboard/src/metabase/util/log.clj",1690286813000,"file:/home/gmrworkspace/dashboard/src/metabase/util/malli.cljc",1690286813000,"jar:file:/root/.m2/repository/org/clojure/test.check/1.1.1/test.check-1.1.1.jar!/clojure/test/check/rose_tree.cljc",1689946177000,"jar:file:/root/.m2/repository/org/clojure/tools.reader/1.3.6/tools.reader-1.3.6.jar!/clojure/tools/reader/impl/inspect.clj",1689946174000,"jar:file:/root/.m2/repository/instaparse/instaparse/1.4.12/instaparse-1.4.12.jar!/instaparse/combinators_source.clj",1689946146000,"jar:file:/root/.m2/repository/instaparse/instaparse/1.4.12/instaparse-1.4.12.jar!/instaparse/abnf.clj",1689946146000,"jar:file:/root/.m2/repository/org/clojure/tools.namespace/1.4.4/tools.namespace-1.4.4.jar!/clojure/tools/namespace/find.clj",1689946139000,"jar:file:/root/.m2/repository/org/tcrawley/dynapath/1.1.0/dynapath-1.1.0.jar!/dynapath/dynamic_classpath.clj",1689946174000,"file:/home/gmrworkspace/dashboard/src/metabase/lib/schema/temporal_bucketing.cljc",1690286812000,"jar:file:/root/.m2/repository/cheshire/cheshire/5.11.0/cheshire-5.11.0.jar!/cheshire/generate_seq.clj",1689946173000,"file:/home/gmrworkspace/dashboard/src/metabase/lib/schema/mbql_clause.cljc",1690286812000,"jar:file:/root/.m2/repository/metosin/malli/0.10.2/malli-0.10.2.jar!/malli/util.cljc",1689946170000,"file:/home/gmrworkspace/dashboard/src/metabase/util/jvm.clj",1692013156125],"~:analyzer",["^ ","^3",null,"^4",["^ "],"^5",["^ ","^6","metabase/lib/convert.cljc","^7",1,"^8",5,"^9",1,"^:",25],"^;",["^ ","^<","^=","^>","^?","^@","^A","^B","^C","^D","^E","^F","^G"],"^H",null,"^I",["^J",[]],"^K","^L","^M",["^ "],"^P",null,"^Q",["^ ","^R","^R","^S","^T","^U","^V","^W","^X","^Y","^Z","^[","^10","~$u","^11","^X","^X","^12","^13","^C","^C","^14","^14","^15","^15","^16","^R","^17","^18","^V","^V","^13","^13","^19","^1:","^T","^T","~$m","^1;","^11","^11","^1<","^14","^1=","^1>","^Z","^Z","^1?","^1@","^1:","^1:","^18","^18","^1@","^1@","^10","^10","^1>","^1>","^1;","^1;"],"^1A",["^J",["^1B"]],"~:shadow/js-access-global",["^J",["Error"]],"^1C",null,"~:defs",["^ ","~$source-card->legacy-source-table",["^ ","~:protocol-inline",null,"^5",["^ ","^6","metabase/lib/convert.cljc","^7",416,"^8",8,"^9",416,"^:",40,"~:private",true,"~:arglists",["^1F",["~$quote",["^1F",[["~$stage"]]]]],"~:doc","If a pMBQL query stage has `:source-card` convert it to legacy-style `:source-table \"card__<id>\"`."],"^;;",true,"^K","^3D","^6","metabase/lib/convert.cljc","^:",40,"~:method-params",["^1F",[["^;>"]]],"~:protocol-impl",null,"~:arglists-meta",["^1F",[null,null]],"^8",1,"~:variadic?",false,"^7",416,"~:ret-tag",["^J",[null,"~$clj","~$any"]],"^9",416,"~:max-fixed-arity",1,"~:fn-var",true,"^;<",["^1F",["^;=",["^1F",[["^;>"]]]]],"^;?","If a pMBQL query stage has `:source-card` convert it to legacy-style `:source-table \"card__<id>\"`."],"~$disqualify",["^ ","^;:",null,"^5",["^ ","^;;",true,"^6","metabase/lib/convert.cljc","^:",18,"~:top-fn",["^ ","^;C",false,"~:fixed-arity",1,"^;G",1,"^;@",[[],["~$m"]],"^;<",["^1F",[[],["~$m"]]],"^;B",["^1F",[null,null]]],"^8",8,"^7",260,"^9",260,"^;<",["^1F",["^;=",["^1F",[[],["~$m"]]]]],"^;?","Remove any keys starting with the `:lib/` namespace from map `m`.\n\n  No args = return transducer to remove `:lib/` keys from a map. One arg = update a map `m`."],"^;;",true,"^K","^3S","^6","metabase/lib/convert.cljc","^:",18,"^;J",["^ ","^;C",false,"^;K",1,"^;G",1,"^;@",[[],["~$m"]],"^;<",["^1F",[[],["~$m"]]],"^;B",["^1F",[null,null]]],"^;@",[[],["~$m"]],"^;A",null,"^;K",1,"^;B",["^1F",[null,null]],"^8",1,"^;C",false,"~:methods",[["^ ","^;K",0,"^;C",false,"~:tag","~$function"],["^ ","^;K",1,"^;C",false,"^;M","^;F"]],"^7",260,"^9",260,"^;G",1,"^;H",true,"^;<",["^1F",[[],["~$m"]]],"^;?","Remove any keys starting with the `:lib/` namespace from map `m`.\n\n  No args = return transducer to remove `:lib/` keys from a map. One arg = update a map `m`."],"~$chain-stages",["^ ","^;:",null,"^5",["^ ","^6","metabase/lib/convert.cljc","^7",339,"^8",8,"^9",339,"^:",20,"^;;",true,"^;<",["^1F",["^;=",["^1F",[[["^ ","~:keys",["~$stages"]]]]]]]],"^;;",true,"^K","^3[","^6","metabase/lib/convert.cljc","^:",20,"^;@",["^1F",[["~$p__79613"]]],"^;A",null,"^;B",["^1F",[null,null]],"^8",1,"^;C",false,"^7",339,"^;D",["^J",[null,"^;F","~$clj-nil"]],"^9",339,"^;G",1,"^;H",true,"^;<",["^1F",["^;=",["^1F",[[["^ ","^;P",["^;Q"]]]]]]]],"~$options->legacy-MBQL",["^ ","^;:",null,"^5",["^ ","^6","metabase/lib/convert.cljc","^7",271,"^8",8,"^9",271,"^:",28,"^;;",true,"^;<",["^1F",["^;=",["^1F",[["~$m"]]]]],"^;?","Convert an options map in an MBQL clause to the equivalent shape for legacy MBQL. Remove `:lib/*` keys and\n  `:effective-type`, which is not used in options maps in legacy MBQL."],"^;;",true,"^K","^3P","^6","metabase/lib/convert.cljc","^:",28,"^;@",["^1F",[["~$m"]]],"^;A",null,"^;B",["^1F",[null,null]],"^8",1,"^;C",false,"^7",271,"^;D",["^J",[null,"^;S"]],"^9",271,"^;G",1,"^;H",true,"^;<",["^1F",["^;=",["^1F",[["~$m"]]]]],"^;?","Convert an options map in an MBQL clause to the equivalent shape for legacy MBQL. Remove `:lib/*` keys and\n  `:effective-type`, which is not used in options maps in legacy MBQL."],"~$clean",["^ ","^;:",null,"^5",["^ ","^6","metabase/lib/convert.cljc","^7",67,"^8",8,"^9",67,"^:",13,"^;;",true,"^;<",["^1F",["^;=",["^1F",[["~$almost-query"]]]]]],"^;;",true,"^K","^3>","^6","metabase/lib/convert.cljc","^:",13,"^;@",["^1F",[["^;V"]]],"^;A",null,"^;B",["^1F",[null,null]],"^8",1,"^;C",false,"^7",67,"^;D","^;F","^9",67,"^;G",1,"^;H",true,"^;<",["^1F",["^;=",["^1F",[["^;V"]]]]]],"~$get-or-throw!",["^ ","^;:",null,"^5",["^ ","^6","metabase/lib/convert.cljc","^7",226,"^8",8,"^9",226,"^:",21,"^;;",true,"^;<",["^1F",["^;=",["^1F",[["~$m","~$k"]]]]]],"^;;",true,"^K","^3A","^6","metabase/lib/convert.cljc","^:",21,"^;@",["^1F",[["~$m","~$k"]]],"^;A",null,"^;B",["^1F",[null,null]],"^8",1,"^;C",false,"^7",226,"^;D",["^J",[null,"^;F"]],"^9",226,"^;G",2,"^;H",true,"^;<",["^1F",["^;=",["^1F",[["~$m","~$k"]]]]]],"~$legacy-query-from-inner-query",["^ ","^;:",null,"^5",["^ ","^6","metabase/lib/convert.cljc","^7",244,"^8",7,"^9",244,"^:",36,"^;<",["^1F",["^;=",["^1F",[["~$database-id","~$inner-query"]]]]],"^;?","Convert a legacy 'inner query' to a full legacy 'outer query' so you can pass it to stuff\n  like [[metabase.mbql.normalize/normalize]], and then probably to [[->pMBQL]]."],"^K","^3Q","^6","metabase/lib/convert.cljc","^:",36,"^;@",["^1F",[["^;Y","^;Z"]]],"^;A",null,"^;B",["^1F",[null,null]],"^8",1,"^;C",false,"^7",244,"^;D",["^J",["^;F","^;S"]],"^9",244,"^;G",2,"^;H",true,"^;<",["^1F",["^;=",["^1F",[["^;Y","^;Z"]]]]],"^;?","Convert a legacy 'inner query' to a full legacy 'outer query' so you can pass it to stuff\n  like [[metabase.mbql.normalize/normalize]], and then probably to [[->pMBQL]]."],"~$legacy-default-join-alias",["^ ","^5",["^ ","^6","metabase/lib/convert.cljc","^7",105,"^8",6,"^9",105,"^:",31],"^K","^4E","^6","metabase/lib/convert.cljc","^:",31,"^8",1,"^7",105,"^9",105,"^;M","~$string","^;?","In legacy MBQL, join `:alias` was optional, and if unspecified, this was the default alias used. In reality all joins\n  normally had an explicit `:alias` since the QB would generate one and you generally need one to do useful things\n  with the join anyway.\n\n  Since the new pMBQL schema makes `:alias` required, we'll explicitly add the implicit default when we encounter a\n  join without an alias, and remove it so we can round-trip without changes."],"~$deduplicate-join-aliases",["^ ","^;:",null,"^5",["^ ","^6","metabase/lib/convert.cljc","^7",114,"^8",8,"^9",114,"^:",32,"^;;",true,"^;<",["^1F",["^;=",["^1F",[["~$joins"]]]]],"^;?","Join `:alias`es had to be unique in legacy MBQL, but they were optional. Since we add [[legacy-default-join-alias]]\n  to each join that doesn't have an explicit `:alias` for pMBQL compatibility now, we need to deduplicate the aliases\n  if it is used more than once.\n\n  Only deduplicate the default `__join` aliases; we don't want the [[lib.util/unique-name-generator]] to touch other\n  aliases and truncate them or anything like that."],"^;;",true,"^K","^4;","^6","metabase/lib/convert.cljc","^:",32,"^;@",["^1F",[["^<2"]]],"^;A",null,"^;B",["^1F",[null,null]],"^8",1,"^;C",false,"^7",114,"^;D","^;E","^9",114,"^;G",1,"^;H",true,"^;<",["^1F",["^;=",["^1F",[["^<2"]]]]],"^;?","Join `:alias`es had to be unique in legacy MBQL, but they were optional. Since we add [[legacy-default-join-alias]]\n  to each join that doesn't have an explicit `:alias` for pMBQL compatibility now, we need to deduplicate the aliases\n  if it is used more than once.\n\n  Only deduplicate the default `__join` aliases; we don't want the [[lib.util/unique-name-generator]] to touch other\n  aliases and truncate them or anything like that."],"~$stage-source-card-id->pMBQL",["^ ","^;:",null,"^5",["^ ","^6","metabase/lib/convert.cljc","^7",128,"^8",8,"^9",128,"^:",35,"^;;",true,"^;<",["^1F",["^;=",["^1F",[["^;>"]]]]],"^;?","If a query `stage` has a legacy `card__<id>` `:source-table`, convert it to a pMBQL-style `:source-card`."],"^;;",true,"^K","^4>","^6","metabase/lib/convert.cljc","^:",35,"^;@",["^1F",[["^;>"]]],"^;A",null,"^;B",["^1F",[null,null]],"^8",1,"^;C",false,"^7",128,"^;D",["^J",[null,"^;E","^;S"]],"^9",128,"^;G",1,"^;H",true,"^;<",["^1F",["^;=",["^1F",[["^;>"]]]]],"^;?","If a query `stage` has a legacy `card__<id>` `:source-table`, convert it to a pMBQL-style `:source-card`."],"~$->legacy-MBQL",["^ ","^5",["^ ","^6","metabase/lib/convert.cljc","^7",253,"^8",11,"^9",253,"^:",24,"^;<",["^1F",["^;=",["^1F",[["~$x"]]]]],"^;?","Coerce something to legacy MBQL (the version of MBQL understood by the query processor and Dashboard Lib v1) if it's\n  not already legacy MBQL."],"^K","^4A","^6","metabase/lib/convert.cljc","^:",24,"^8",1,"^7",253,"^9",253,"^;M","^29","^;<",["^1F",["^;=",["^1F",[["~$x"]]]]],"^;?","Coerce something to legacy MBQL (the version of MBQL understood by the query processor and Dashboard Lib v1) if it's\n  not already legacy MBQL."],"~$*legacy-index->pMBQL-uuid*",["^ ","^5",["^ ","^6","metabase/lib/convert.cljc","^7",21,"^8",26,"^9",21,"^:",52,"~:dynamic",true,"^;;",true],"^;;",true,"^K","^2B","^6","metabase/lib/convert.cljc","^:",52,"^8",1,"^<6",true,"^7",21,"^9",21,"^;M","^;F"],"~$clean-location",["^ ","^;:",null,"^5",["^ ","^6","metabase/lib/convert.cljc","^7",24,"^8",8,"^9",24,"^:",22,"^;;",true,"^;<",["^1F",["^;=",["^1F",[["~$almost-stage","~$error-type","~$error-location"]]]]]],"^;;",true,"^K","^4<","^6","metabase/lib/convert.cljc","^:",22,"^;@",["^1F",[["^<8","^<9","^<:"]]],"^;A",null,"^;B",["^1F",[null,null]],"^8",1,"^;C",false,"^7",24,"^;D",["^J",["^;E","^;F","^;S"]],"^9",24,"^;G",3,"^;H",true,"^;<",["^1F",["^;=",["^1F",[["^<8","^<9","^<:"]]]]]],"~$stage-keys",["^ ","^5",["^ ","^6","metabase/lib/convert.cljc","^7",43,"^8",16,"^9",43,"^:",26,"^;;",true],"^;;",true,"^K","^3=","^6","metabase/lib/convert.cljc","^:",26,"^8",1,"^7",43,"^9",43,"^;M","~$cljs.core/ISet"],"~$*pMBQL-uuid->legacy-index*",["^ ","^5",["^ ","^6","metabase/lib/convert.cljc","^7",18,"^8",26,"^9",18,"^:",52,"^<6",true,"^;;",true],"^;;",true,"^K","^28","^6","metabase/lib/convert.cljc","^:",52,"^8",1,"^<6",true,"^7",18,"^9",18,"^;M","^;F"],"~$clean-stage",["^ ","^;:",null,"^5",["^ ","^6","metabase/lib/convert.cljc","^7",46,"^8",8,"^9",46,"^:",19,"^;;",true,"^;<",["^1F",["^;=",["^1F",[["^<8"]]]]]],"^;;",true,"^K","^2<","^6","metabase/lib/convert.cljc","^:",19,"^;@",["^1F",[["^<8"]]],"^;A",null,"^;B",["^1F",[null,null]],"^8",1,"^;C",false,"^7",46,"^;D","^;F","^9",46,"^;G",1,"^;H",true,"^;<",["^1F",["^;=",["^1F",[["^<8"]]]]]],"~$->pMBQL",["^ ","^5",["^ ","^6","metabase/lib/convert.cljc","^7",78,"^8",11,"^9",78,"^:",18,"^;<",["^1F",["^;=",["^1F",[["~$x"]]]]],"^;?","Coerce something to pMBQL (the version of MBQL manipulated by Dashboard Lib v2) if it's not already pMBQL."],"^K","^2F","^6","metabase/lib/convert.cljc","^:",18,"^8",1,"^7",78,"^9",78,"^;M","^29","^;<",["^1F",["^;=",["^1F",[["~$x"]]]]],"^;?","Coerce something to pMBQL (the version of MBQL manipulated by Dashboard Lib v2) if it's not already pMBQL."],"~$default-MBQL-clause->pMBQL",["^ ","^;:",null,"^5",["^ ","^6","metabase/lib/convert.cljc","^7",84,"^8",8,"^9",84,"^:",34,"^;;",true,"^;<",["^1F",["^;=",["^1F",[["~$mbql-clause"]]]]]],"^;;",true,"^K","^35","^6","metabase/lib/convert.cljc","^:",34,"^;@",["^1F",[["^<A"]]],"^;A",null,"^;B",["^1F",[null,null]],"^8",1,"^;C",false,"^7",84,"^;D",["^J",[null,"^;E","^;F","^;S"]],"^9",84,"^;G",1,"^;H",true,"^;<",["^1F",["^;=",["^1F",[["^<A"]]]]]],"~$update-list->legacy-boolean-expression",["^ ","^;:",null,"^5",["^ ","^6","metabase/lib/convert.cljc","^7",398,"^8",8,"^9",398,"^:",46,"^;;",true,"^;<",["^1F",["^;=",["^1F",[["~$m","~$pMBQL-key","~$legacy-key"]]]]]],"^;;",true,"^K","^36","^6","metabase/lib/convert.cljc","^:",46,"^;@",["^1F",[["~$m","^<C","^<D"]]],"^;A",null,"^;B",["^1F",[null,null]],"^8",1,"^;C",false,"^7",398,"^;D",["^J",[null,"^;F"]],"^9",398,"^;G",3,"^;H",true,"^;<",["^1F",["^;=",["^1F",[["~$m","^<C","^<D"]]]]]],"~$clause-with-options->legacy-MBQL",["^ ","^;:",null,"^5",["^ ","^6","metabase/lib/convert.cljc","^7",293,"^8",8,"^9",293,"^:",40,"^;;",true,"^;<",["^1F",["^;=",["^1F",[[["~$k","~$options","~$&","~$args"]]]]]]],"^;;",true,"^K","^2[","^6","metabase/lib/convert.cljc","^:",40,"^;@",["^1F",[["~$p__79577"]]],"^;A",null,"^;B",["^1F",[null,null]],"^8",1,"^;C",false,"^7",293,"^;D",["^J",[null,"^;E","^;F"]],"^9",293,"^;G",1,"^;H",true,"^;<",["^1F",["^;=",["^1F",[[["~$k","^<F","~$&","^<G"]]]]]]],"~$aggregation->legacy-MBQL",["^ ","^;:",null,"^5",["^ ","^6","metabase/lib/convert.cljc","^7",282,"^8",8,"^9",282,"^:",32,"^;;",true,"^;<",["^1F",["^;=",["^1F",[[["~$tag","^<F","~$&","^<G"]]]]]]],"^;;",true,"^K","^24","^6","metabase/lib/convert.cljc","^:",32,"^;@",["^1F",[["~$p__79569"]]],"^;A",null,"^;B",["^1F",[null,null]],"^8",1,"^;C",false,"^7",282,"^;D",["^J",["^;E","~$cljs.core/IVector","^;F"]],"^9",282,"^;G",1,"^;H",true,"^;<",["^1F",["^;=",["^1F",[[["^<J","^<F","~$&","^<G"]]]]]]],"~$stage-metadata->legacy-metadata",["^ ","^;:",null,"^5",["^ ","^6","metabase/lib/convert.cljc","^7",333,"^8",8,"^9",333,"^:",39,"^;;",true,"^;<",["^1F",["^;=",["^1F",[["~$stage-metadata"]]]]]],"^;;",true,"^K","^25","^6","metabase/lib/convert.cljc","^:",39,"^;@",["^1F",[["^<N"]]],"^;A",null,"^;B",["^1F",[null,null]],"^8",1,"^;C",false,"^7",333,"^;D","^;F","^9",333,"^;G",1,"^;H",true,"^;<",["^1F",["^;=",["^1F",[["^<N"]]]]]]],"^1D",["^ ","^U","^V","^Y","^Z","~$u","^11","^12","^13","^C","^C","^V","^V","^13","^13","^11","^11","^Z","^Z"],"~:cljs.analyzer/constants",["^ ","^1A",["^J",["~:lib/uuid","~:ceil","~:database_type","~:semantic_type","~:lib/type","~:get-quarter","~:min","~:errors","~:upper","~:*","~:ltrim","~:base-type","~:expression","~:substring","~:stages","~:template-tags","~:semantic-type","~:stddev","~:now","~:metabase.lib.convert/not-found","~:else","~:source-query","~:metabase.lib.convert/aggregation","~:replace","~:convert-timezone","~:get-minute","~:filters","~:yellow","~:sqrt","~:metabase.lib.convert/aggregation-or-expression","~:default","~:concat","~:count-where","~:warn","~:columns","~:m","~:-","~:value","~:time","~:exp","~:fields","~:mbql/query","~:lib/stage-metadata","~:joins","~:get-hour","~:get-week","~:source-metadata","~:sum-where","~:field","~:type","~:coalesce","~:regexextract","~:/","~:database-type","~:mbql/join","~:effective-type","~:k","~:absolute-datetime","~:distinct","~:round","~:percentile","~:datetime-subtract","~:dispatch-type/sequential","~:power","~:alias","~:mbql.stage/native","~:get-second","~:filter","~:malli.core/missing-key","~:native","~:dispatch-type/map","~:conditions","~:aggregation-options","~:+","~:abs","~:datetime-add","~:median","~:share","~:max","~:condition","~:case","~:red","~:source-table","~:expressions","~:lower","~:get-month","~:count","~:malli.core/end-of-input","~:breakout","~:length","~:get-year","~:order-by","~:dimension","~:mbql.stage/mbql","~:and","~:database","~:trim","~:avg","~:aggregation","~:interval","~:get-day","~:source-card","~:regex-match-first","~:query","~:hierarchy","~:metabase.lib.schema/stage.mbql","~:parameters","~:log","~:floor","~:relative-datetime","~:always","~:sum","~:metabase.lib.convert/expression","~:base_type","~:in","~:rtrim"]],"~:order",["^>7","^>I","^=7","^==","^=I","^=L","^>E","^>J","^>M","^>T","^=R","^?8","^<W","^>[","^=D","^=>","^>C","^=1","^>Z","^=A","^=J","^>3","^>D","^>W","^>O","^<P","^>4","^=2","^>N","^=V","^>:","^>1","^>9","^=Q","^=F","^?7","^<S","^<R","^<Z","^=3","^=U","^=W","^>B","^?4","^<[","^=6","~:m","~:k","^>;","^>Q","^>Y","^>8","^=9","^?6","^=@","^>H","^>S","^=C","^=Y","^>@","^>>","^<V","^=[","^>?","^=4","^?5","^=P","~:+","~:-","~:*","~:/","^=S","^><","^?1","^=H","^=?","^<Q","^?2","^=Z","^>2","^>U","^?3","^=G","^=X","^=5","^=;","^=N","^>L","^>G","^>V","^=M","^=<","^>5","^<U","^>=","^>0","^=B","^=0","^=:","^=T","^>X","^>K","^>R","^<Y","^?9","^<X","^>F","^=E","^=8","^=O","^=K","^>P","^>A","^>6","^?0","^<T"]],"^1I",["^ ","^1B",["^J",[]]],"^1J",["^ "],"^1K",["^15","^C","^10","^T","^1@","^V","^X","^1;","^1>","^1:","^18","^R","^13","^14","^11","^Z"]],"^O","^L","~:ns-specs",["^ "],"~:ns-spec-vars",["^J",[]],"~:compiler-options",["^4J",[["^?=","~:static-fns"],true,["^?=","~:shadow-tweaks"],null,["^?=","~:source-map-inline"],null,["^?=","~:elide-asserts"],false,["^?=","~:optimize-constants"],null,["^?=","^1P"],null,["^?=","~:external-config"],null,["^?=","~:tooling-config"],null,["^?=","~:emit-constants"],null,["^?=","~:load-tests"],null,["^?=","~:form-size-threshold"],null,["^?=","~:global-goog-object&array"],null,["^?=","~:data-readers"],null,["^?=","~:infer-externs"],"~:auto",["^?=","^1R"],["^J",["^1S","^1T"]],["~:js-options","~:js-provider"],"^1B",["~:mode"],"~:dev",["^?=","~:fn-invoke-direct"],null,["^?=","~:source-map"],"/dev/null"]]]