["^ ","~:output",["^ ","~:js","goog.provide('metabase.lib.aggregation');\n/**\n * Inputs: [metadata :- lib.metadata/ColumnMetadata]\n *   Return: :mbql.clause/aggregation\n *        \n * \n *   Given `:metadata/column` column metadata for an aggregation, construct an `:aggregation` reference.\n */\nmetabase.lib.aggregation.column_metadata__GT_aggregation_ref = (function metabase$lib$aggregation$column_metadata__GT_aggregation_ref(metadata){\n\nvar options = new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(\"lib\",\"uuid\",\"lib/uuid\",-2145250720),cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.random_uuid()),new cljs.core.Keyword(null,\"effective-type\",\"effective-type\",-355725458),cljs.core.some_fn.cljs$core$IFn$_invoke$arity$2(new cljs.core.Keyword(null,\"effective-type\",\"effective-type\",-355725458),new cljs.core.Keyword(null,\"base-type\",\"base-type\",1167971299))(metadata)], null);\nvar ag_uuid = new cljs.core.Keyword(\"lib\",\"source-uuid\",\"lib/source-uuid\",1828897581).cljs$core$IFn$_invoke$arity$1(metadata);\nif(cljs.core.truth_(ag_uuid)){\n} else {\nthrow (new Error([\"Assert failed: \",\"Metadata for an aggregation reference should include :lib/source-uuid\",\"\\n\",\"ag-uuid\"].join('')));\n}\n\nreturn new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"aggregation\",\"aggregation\",1597476696),options,ag_uuid], null);\n});\n/**\n * Inputs: [query :- :metabase.lib.schema/query stage-number :- :int ag-uuid :- :string]\n *   Return: :metabase.lib.schema.aggregation/aggregation\n *        \n * \n *   Resolve an aggregation with a specific `index`.\n */\nmetabase.lib.aggregation.resolve_aggregation = (function metabase$lib$aggregation$resolve_aggregation(query,stage_number,ag_uuid){\n\nvar map__79337 = metabase.lib.util.query_stage(query,stage_number);\nvar map__79337__$1 = cljs.core.__destructure_map(map__79337);\nvar aggregations = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__79337__$1,new cljs.core.Keyword(null,\"aggregation\",\"aggregation\",1597476696));\nvar found = medley.core.find_first.cljs$core$IFn$_invoke$arity$2(cljs.core.comp.cljs$core$IFn$_invoke$arity$3(cljs.core.PersistentHashSet.createAsIfByAssoc([ag_uuid]),new cljs.core.Keyword(\"lib\",\"uuid\",\"lib/uuid\",-2145250720),cljs.core.second),aggregations);\nif(cljs.core.truth_(found)){\n} else {\nthrow cljs.core.ex_info.cljs$core$IFn$_invoke$arity$2(metabase.shared.util.i18n.js_i18n.cljs$core$IFn$_invoke$arity$variadic(\"No aggregation with uuid {0}\",cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([ag_uuid], 0)),new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null,\"uuid\",\"uuid\",-2145095719),ag_uuid,new cljs.core.Keyword(null,\"query\",\"query\",-1288509510),query,new cljs.core.Keyword(null,\"stage-number\",\"stage-number\",-1752729638),stage_number], null));\n}\n\nreturn found;\n});\nmetabase.lib.metadata.calculation.describe_top_level_key_method.cljs$core$IMultiFn$_add_method$arity$3(null,new cljs.core.Keyword(null,\"aggregation\",\"aggregation\",1597476696),(function (query,stage_number,_k){\nvar temp__5804__auto__ = cljs.core.not_empty(new cljs.core.Keyword(null,\"aggregation\",\"aggregation\",1597476696).cljs$core$IFn$_invoke$arity$1(metabase.lib.util.query_stage(query,stage_number)));\nif(cljs.core.truth_(temp__5804__auto__)){\nvar aggregations = temp__5804__auto__;\nreturn metabase.lib.util.join_strings_with_conjunction(metabase.shared.util.i18n.js_i18n(\"and\"),(function (){var iter__5523__auto__ = (function metabase$lib$aggregation$iter__79345(s__79346){\nreturn (new cljs.core.LazySeq(null,(function (){\nvar s__79346__$1 = s__79346;\nwhile(true){\nvar temp__5804__auto____$1 = cljs.core.seq(s__79346__$1);\nif(temp__5804__auto____$1){\nvar s__79346__$2 = temp__5804__auto____$1;\nif(cljs.core.chunked_seq_QMARK_(s__79346__$2)){\nvar c__5521__auto__ = cljs.core.chunk_first(s__79346__$2);\nvar size__5522__auto__ = cljs.core.count(c__5521__auto__);\nvar b__79348 = cljs.core.chunk_buffer(size__5522__auto__);\nif((function (){var i__79347 = (0);\nwhile(true){\nif((i__79347 < size__5522__auto__)){\nvar aggregation = cljs.core._nth(c__5521__auto__,i__79347);\ncljs.core.chunk_append(b__79348,metabase.lib.metadata.calculation.display_name.cljs$core$IFn$_invoke$arity$4(query,stage_number,aggregation,new cljs.core.Keyword(null,\"long\",\"long\",-171452093)));\n\nvar G__79805 = (i__79347 + (1));\ni__79347 = G__79805;\ncontinue;\n} else {\nreturn true;\n}\nbreak;\n}\n})()){\nreturn cljs.core.chunk_cons(cljs.core.chunk(b__79348),metabase$lib$aggregation$iter__79345(cljs.core.chunk_rest(s__79346__$2)));\n} else {\nreturn cljs.core.chunk_cons(cljs.core.chunk(b__79348),null);\n}\n} else {\nvar aggregation = cljs.core.first(s__79346__$2);\nreturn cljs.core.cons(metabase.lib.metadata.calculation.display_name.cljs$core$IFn$_invoke$arity$4(query,stage_number,aggregation,new cljs.core.Keyword(null,\"long\",\"long\",-171452093)),metabase$lib$aggregation$iter__79345(cljs.core.rest(s__79346__$2)));\n}\n} else {\nreturn null;\n}\nbreak;\n}\n}),null,null));\n});\nreturn iter__5523__auto__(aggregations);\n})());\n} else {\nreturn null;\n}\n}));\nmetabase.lib.metadata.calculation.metadata_method.cljs$core$IMultiFn$_add_method$arity$3(null,new cljs.core.Keyword(null,\"aggregation\",\"aggregation\",1597476696),(function (query,stage_number,p__79359){\nvar vec__79360 = p__79359;\nvar _ag = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__79360,(0),null);\nvar map__79363 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__79360,(1),null);\nvar map__79363__$1 = cljs.core.__destructure_map(map__79363);\nvar _opts = map__79363__$1;\nvar base_type = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__79363__$1,new cljs.core.Keyword(null,\"base-type\",\"base-type\",1167971299));\nvar effective_type = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__79363__$1,new cljs.core.Keyword(null,\"effective-type\",\"effective-type\",-355725458));\nvar index = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__79360,(2),null);\nvar _aggregation_ref = vec__79360;\nvar aggregation = metabase.lib.aggregation.resolve_aggregation(query,stage_number,index);\nreturn cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([metabase.lib.metadata.calculation.metadata.cljs$core$IFn$_invoke$arity$3(query,stage_number,aggregation),new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(\"lib\",\"source\",\"lib/source\",-434086550),new cljs.core.Keyword(\"source\",\"aggregations\",\"source/aggregations\",-1828710137),new cljs.core.Keyword(\"lib\",\"source-uuid\",\"lib/source-uuid\",1828897581),new cljs.core.Keyword(\"lib\",\"uuid\",\"lib/uuid\",-2145250720).cljs$core$IFn$_invoke$arity$1(cljs.core.second(aggregation))], null),(cljs.core.truth_(base_type)?new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"base-type\",\"base-type\",1167971299),base_type], null):null),(cljs.core.truth_(effective_type)?new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"effective-type\",\"effective-type\",-355725458),effective_type], null):null)], 0));\n}));\nmetabase.lib.metadata.calculation.display_name_method.cljs$core$IMultiFn$_add_method$arity$3(null,new cljs.core.Keyword(null,\"aggregation\",\"aggregation\",1597476696),(function (query,stage_number,p__79372,style){\nvar vec__79373 = p__79372;\nvar _tag = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__79373,(0),null);\nvar _opts = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__79373,(1),null);\nvar index = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__79373,(2),null);\nreturn metabase.lib.metadata.calculation.display_name.cljs$core$IFn$_invoke$arity$4(query,stage_number,metabase.lib.aggregation.resolve_aggregation(query,stage_number,index),style);\n}));\nmetabase.lib.hierarchy.derive(new cljs.core.Keyword(\"metabase.lib.aggregation\",\"count-aggregation\",\"metabase.lib.aggregation/count-aggregation\",-21314018),new cljs.core.Keyword(\"metabase.lib.aggregation\",\"aggregation\",\"metabase.lib.aggregation/aggregation\",1701573815));\nvar seq__79376_79900 = cljs.core.seq(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"count\",\"count\",2139924085),new cljs.core.Keyword(null,\"cum-count\",\"cum-count\",-1964431543)], null));\nvar chunk__79377_79901 = null;\nvar count__79378_79902 = (0);\nvar i__79379_79903 = (0);\nwhile(true){\nif((i__79379_79903 < count__79378_79902)){\nvar tag_79904 = chunk__79377_79901.cljs$core$IIndexed$_nth$arity$2(null,i__79379_79903);\nmetabase.lib.hierarchy.derive(tag_79904,new cljs.core.Keyword(\"metabase.lib.aggregation\",\"count-aggregation\",\"metabase.lib.aggregation/count-aggregation\",-21314018));\n\n\nvar G__79905 = seq__79376_79900;\nvar G__79906 = chunk__79377_79901;\nvar G__79907 = count__79378_79902;\nvar G__79908 = (i__79379_79903 + (1));\nseq__79376_79900 = G__79905;\nchunk__79377_79901 = G__79906;\ncount__79378_79902 = G__79907;\ni__79379_79903 = G__79908;\ncontinue;\n} else {\nvar temp__5804__auto___79909 = cljs.core.seq(seq__79376_79900);\nif(temp__5804__auto___79909){\nvar seq__79376_79910__$1 = temp__5804__auto___79909;\nif(cljs.core.chunked_seq_QMARK_(seq__79376_79910__$1)){\nvar c__5568__auto___79911 = cljs.core.chunk_first(seq__79376_79910__$1);\nvar G__79912 = cljs.core.chunk_rest(seq__79376_79910__$1);\nvar G__79913 = c__5568__auto___79911;\nvar G__79914 = cljs.core.count(c__5568__auto___79911);\nvar G__79915 = (0);\nseq__79376_79900 = G__79912;\nchunk__79377_79901 = G__79913;\ncount__79378_79902 = G__79914;\ni__79379_79903 = G__79915;\ncontinue;\n} else {\nvar tag_79916 = cljs.core.first(seq__79376_79910__$1);\nmetabase.lib.hierarchy.derive(tag_79916,new cljs.core.Keyword(\"metabase.lib.aggregation\",\"count-aggregation\",\"metabase.lib.aggregation/count-aggregation\",-21314018));\n\n\nvar G__79917 = cljs.core.next(seq__79376_79910__$1);\nvar G__79918 = null;\nvar G__79919 = (0);\nvar G__79920 = (0);\nseq__79376_79900 = G__79917;\nchunk__79377_79901 = G__79918;\ncount__79378_79902 = G__79919;\ni__79379_79903 = G__79920;\ncontinue;\n}\n} else {\n}\n}\nbreak;\n}\nmetabase.lib.metadata.calculation.display_name_method.cljs$core$IMultiFn$_add_method$arity$3(null,new cljs.core.Keyword(\"metabase.lib.aggregation\",\"count-aggregation\",\"metabase.lib.aggregation/count-aggregation\",-21314018),(function (query,stage_number,p__79393,style){\nvar vec__79394 = p__79393;\nvar tag = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__79394,(0),null);\nvar _opts = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__79394,(1),null);\nvar x = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__79394,(2),null);\nif(cljs.core.truth_(x)){\nvar x_display_name = metabase.lib.metadata.calculation.display_name.cljs$core$IFn$_invoke$arity$4(query,stage_number,x,style);\nvar G__79397 = tag;\nvar G__79397__$1 = (((G__79397 instanceof cljs.core.Keyword))?G__79397.fqn:null);\nswitch (G__79397__$1) {\ncase \"count\":\nreturn metabase.shared.util.i18n.js_i18n.cljs$core$IFn$_invoke$arity$variadic(\"Count of {0}\",cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([x_display_name], 0));\n\nbreak;\ncase \"cum-count\":\nreturn metabase.shared.util.i18n.js_i18n.cljs$core$IFn$_invoke$arity$variadic(\"Cumulative count of {0}\",cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([x_display_name], 0));\n\nbreak;\ndefault:\nthrow (new Error([\"No matching clause: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(G__79397__$1)].join('')));\n\n}\n} else {\nvar G__79398 = tag;\nvar G__79398__$1 = (((G__79398 instanceof cljs.core.Keyword))?G__79398.fqn:null);\nswitch (G__79398__$1) {\ncase \"count\":\nreturn metabase.shared.util.i18n.js_i18n(\"Count\");\n\nbreak;\ncase \"cum-count\":\nreturn metabase.shared.util.i18n.js_i18n(\"Cumulative count\");\n\nbreak;\ndefault:\nthrow (new Error([\"No matching clause: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(G__79398__$1)].join('')));\n\n}\n}\n}));\nmetabase.lib.metadata.calculation.column_name_method.cljs$core$IMultiFn$_add_method$arity$3(null,new cljs.core.Keyword(\"metabase.lib.aggregation\",\"count-aggregation\",\"metabase.lib.aggregation/count-aggregation\",-21314018),(function (_query,_stage_number,p__79399){\nvar vec__79400 = p__79399;\nvar tag = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__79400,(0),null);\nvar _clause = vec__79400;\nvar G__79404 = tag;\nvar G__79404__$1 = (((G__79404 instanceof cljs.core.Keyword))?G__79404.fqn:null);\nswitch (G__79404__$1) {\ncase \"count\":\nreturn \"count\";\n\nbreak;\ncase \"cum-count\":\nreturn \"cum_count\";\n\nbreak;\ndefault:\nthrow (new Error([\"No matching clause: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(G__79404__$1)].join('')));\n\n}\n}));\nmetabase.lib.metadata.calculation.metadata_method.cljs$core$IMultiFn$_add_method$arity$3(null,new cljs.core.Keyword(\"metabase.lib.aggregation\",\"count-aggregation\",\"metabase.lib.aggregation/count-aggregation\",-21314018),(function (query,stage_number,clause){\nreturn cljs.core.assoc.cljs$core$IFn$_invoke$arity$3((function (){var fexpr__79415 = cljs.core.get_method(metabase.lib.metadata.calculation.metadata_method,new cljs.core.Keyword(\"metabase.lib.aggregation\",\"aggregation\",\"metabase.lib.aggregation/aggregation\",1701573815));\nreturn (fexpr__79415.cljs$core$IFn$_invoke$arity$3 ? fexpr__79415.cljs$core$IFn$_invoke$arity$3(query,stage_number,clause) : fexpr__79415.call(null,query,stage_number,clause));\n})(),new cljs.core.Keyword(null,\"semantic-type\",\"semantic-type\",-310722107),new cljs.core.Keyword(\"type\",\"Quantity\",\"type/Quantity\",-1936151227));\n}));\nmetabase.lib.metadata.calculation.display_name_method.cljs$core$IMultiFn$_add_method$arity$3(null,new cljs.core.Keyword(null,\"case\",\"case\",1143702196),(function (_query,_stage_number,_case,_style){\nreturn metabase.shared.util.i18n.js_i18n(\"Case\");\n}));\nmetabase.lib.metadata.calculation.column_name_method.cljs$core$IMultiFn$_add_method$arity$3(null,new cljs.core.Keyword(null,\"case\",\"case\",1143702196),(function (_query,_stage_number,_case){\nreturn \"case\";\n}));\nmetabase.lib.hierarchy.derive(new cljs.core.Keyword(\"metabase.lib.aggregation\",\"unary-aggregation\",\"metabase.lib.aggregation/unary-aggregation\",1064133592),new cljs.core.Keyword(\"metabase.lib.aggregation\",\"aggregation\",\"metabase.lib.aggregation/aggregation\",1701573815));\nvar seq__79418_79924 = cljs.core.seq(new cljs.core.PersistentVector(null, 9, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"avg\",\"avg\",197406200),new cljs.core.Keyword(null,\"cum-sum\",\"cum-sum\",2064902349),new cljs.core.Keyword(null,\"distinct\",\"distinct\",-1788879121),new cljs.core.Keyword(null,\"max\",\"max\",61366548),new cljs.core.Keyword(null,\"median\",\"median\",569566131),new cljs.core.Keyword(null,\"min\",\"min\",444991522),new cljs.core.Keyword(null,\"stddev\",\"stddev\",-865474939),new cljs.core.Keyword(null,\"sum\",\"sum\",136986814),new cljs.core.Keyword(null,\"var\",\"var\",-769682797)], null));\nvar chunk__79419_79925 = null;\nvar count__79420_79926 = (0);\nvar i__79421_79927 = (0);\nwhile(true){\nif((i__79421_79927 < count__79420_79926)){\nvar tag_79928 = chunk__79419_79925.cljs$core$IIndexed$_nth$arity$2(null,i__79421_79927);\nmetabase.lib.hierarchy.derive(tag_79928,new cljs.core.Keyword(\"metabase.lib.aggregation\",\"unary-aggregation\",\"metabase.lib.aggregation/unary-aggregation\",1064133592));\n\n\nvar G__79929 = seq__79418_79924;\nvar G__79930 = chunk__79419_79925;\nvar G__79931 = count__79420_79926;\nvar G__79932 = (i__79421_79927 + (1));\nseq__79418_79924 = G__79929;\nchunk__79419_79925 = G__79930;\ncount__79420_79926 = G__79931;\ni__79421_79927 = G__79932;\ncontinue;\n} else {\nvar temp__5804__auto___79933 = cljs.core.seq(seq__79418_79924);\nif(temp__5804__auto___79933){\nvar seq__79418_79934__$1 = temp__5804__auto___79933;\nif(cljs.core.chunked_seq_QMARK_(seq__79418_79934__$1)){\nvar c__5568__auto___79935 = cljs.core.chunk_first(seq__79418_79934__$1);\nvar G__79936 = cljs.core.chunk_rest(seq__79418_79934__$1);\nvar G__79937 = c__5568__auto___79935;\nvar G__79938 = cljs.core.count(c__5568__auto___79935);\nvar G__79939 = (0);\nseq__79418_79924 = G__79936;\nchunk__79419_79925 = G__79937;\ncount__79420_79926 = G__79938;\ni__79421_79927 = G__79939;\ncontinue;\n} else {\nvar tag_79940 = cljs.core.first(seq__79418_79934__$1);\nmetabase.lib.hierarchy.derive(tag_79940,new cljs.core.Keyword(\"metabase.lib.aggregation\",\"unary-aggregation\",\"metabase.lib.aggregation/unary-aggregation\",1064133592));\n\n\nvar G__79941 = cljs.core.next(seq__79418_79934__$1);\nvar G__79942 = null;\nvar G__79943 = (0);\nvar G__79944 = (0);\nseq__79418_79924 = G__79941;\nchunk__79419_79925 = G__79942;\ncount__79420_79926 = G__79943;\ni__79421_79927 = G__79944;\ncontinue;\n}\n} else {\n}\n}\nbreak;\n}\nmetabase.lib.metadata.calculation.column_name_method.cljs$core$IMultiFn$_add_method$arity$3(null,new cljs.core.Keyword(\"metabase.lib.aggregation\",\"unary-aggregation\",\"metabase.lib.aggregation/unary-aggregation\",1064133592),(function (_query,_stage_number,p__79430){\nvar vec__79431 = p__79430;\nvar tag = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__79431,(0),null);\nvar _opts = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__79431,(1),null);\nvar _arg = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__79431,(2),null);\nvar G__79434 = tag;\nvar G__79434__$1 = (((G__79434 instanceof cljs.core.Keyword))?G__79434.fqn:null);\nswitch (G__79434__$1) {\ncase \"avg\":\nreturn \"avg\";\n\nbreak;\ncase \"cum-sum\":\nreturn \"sum\";\n\nbreak;\ncase \"distinct\":\nreturn \"count\";\n\nbreak;\ncase \"max\":\nreturn \"max\";\n\nbreak;\ncase \"median\":\nreturn \"median\";\n\nbreak;\ncase \"min\":\nreturn \"min\";\n\nbreak;\ncase \"stddev\":\nreturn \"stddev\";\n\nbreak;\ncase \"sum\":\nreturn \"sum\";\n\nbreak;\ncase \"var\":\nreturn \"var\";\n\nbreak;\ndefault:\nthrow (new Error([\"No matching clause: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(G__79434__$1)].join('')));\n\n}\n}));\nmetabase.lib.metadata.calculation.display_name_method.cljs$core$IMultiFn$_add_method$arity$3(null,new cljs.core.Keyword(\"metabase.lib.aggregation\",\"unary-aggregation\",\"metabase.lib.aggregation/unary-aggregation\",1064133592),(function (query,stage_number,p__79440,style){\nvar vec__79441 = p__79440;\nvar tag = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__79441,(0),null);\nvar _opts = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__79441,(1),null);\nvar arg = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__79441,(2),null);\nvar arg__$1 = metabase.lib.metadata.calculation.display_name.cljs$core$IFn$_invoke$arity$4(query,stage_number,arg,style);\nvar G__79448 = tag;\nvar G__79448__$1 = (((G__79448 instanceof cljs.core.Keyword))?G__79448.fqn:null);\nswitch (G__79448__$1) {\ncase \"avg\":\nreturn metabase.shared.util.i18n.js_i18n.cljs$core$IFn$_invoke$arity$variadic(\"Average of {0}\",cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([arg__$1], 0));\n\nbreak;\ncase \"cum-sum\":\nreturn metabase.shared.util.i18n.js_i18n.cljs$core$IFn$_invoke$arity$variadic(\"Cumulative sum of {0}\",cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([arg__$1], 0));\n\nbreak;\ncase \"distinct\":\nreturn metabase.shared.util.i18n.js_i18n.cljs$core$IFn$_invoke$arity$variadic(\"Distinct values of {0}\",cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([arg__$1], 0));\n\nbreak;\ncase \"max\":\nreturn metabase.shared.util.i18n.js_i18n.cljs$core$IFn$_invoke$arity$variadic(\"Max of {0}\",cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([arg__$1], 0));\n\nbreak;\ncase \"median\":\nreturn metabase.shared.util.i18n.js_i18n.cljs$core$IFn$_invoke$arity$variadic(\"Median of {0}\",cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([arg__$1], 0));\n\nbreak;\ncase \"min\":\nreturn metabase.shared.util.i18n.js_i18n.cljs$core$IFn$_invoke$arity$variadic(\"Min of {0}\",cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([arg__$1], 0));\n\nbreak;\ncase \"stddev\":\nreturn metabase.shared.util.i18n.js_i18n.cljs$core$IFn$_invoke$arity$variadic(\"Standard deviation of {0}\",cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([arg__$1], 0));\n\nbreak;\ncase \"sum\":\nreturn metabase.shared.util.i18n.js_i18n.cljs$core$IFn$_invoke$arity$variadic(\"Sum of {0}\",cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([arg__$1], 0));\n\nbreak;\ncase \"var\":\nreturn metabase.shared.util.i18n.js_i18n.cljs$core$IFn$_invoke$arity$variadic(\"Variance of {0}\",cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([arg__$1], 0));\n\nbreak;\ndefault:\nthrow (new Error([\"No matching clause: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(G__79448__$1)].join('')));\n\n}\n}));\nmetabase.lib.metadata.calculation.display_name_method.cljs$core$IMultiFn$_add_method$arity$3(null,new cljs.core.Keyword(null,\"percentile\",\"percentile\",-601188752),(function (query,stage_number,p__79460,style){\nvar vec__79462 = p__79460;\nvar _percentile = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__79462,(0),null);\nvar _opts = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__79462,(1),null);\nvar x = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__79462,(2),null);\nvar p = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__79462,(3),null);\nreturn metabase.shared.util.i18n.js_i18n.cljs$core$IFn$_invoke$arity$variadic(\"{0}th percentile of {1}\",cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([p,metabase.lib.metadata.calculation.display_name.cljs$core$IFn$_invoke$arity$4(query,stage_number,x,style)], 0));\n}));\nmetabase.lib.metadata.calculation.column_name_method.cljs$core$IMultiFn$_add_method$arity$3(null,new cljs.core.Keyword(null,\"percentile\",\"percentile\",-601188752),(function (_query,_stage_number,_clause){\nreturn \"percentile\";\n}));\nmetabase.lib.hierarchy.derive(new cljs.core.Keyword(null,\"percentile\",\"percentile\",-601188752),new cljs.core.Keyword(\"metabase.lib.aggregation\",\"aggregation\",\"metabase.lib.aggregation/aggregation\",1701573815));\nmetabase.lib.metadata.calculation.display_name_method.cljs$core$IMultiFn$_add_method$arity$3(null,new cljs.core.Keyword(null,\"sum-where\",\"sum-where\",2135348428),(function (query,stage_number,p__79473,style){\nvar vec__79475 = p__79473;\nvar _sum_where = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__79475,(0),null);\nvar _opts = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__79475,(1),null);\nvar x = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__79475,(2),null);\nvar _pred = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__79475,(3),null);\nreturn metabase.shared.util.i18n.js_i18n.cljs$core$IFn$_invoke$arity$variadic(\"Sum of {0} matching condition\",cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([metabase.lib.metadata.calculation.display_name.cljs$core$IFn$_invoke$arity$4(query,stage_number,x,style)], 0));\n}));\nmetabase.lib.metadata.calculation.column_name_method.cljs$core$IMultiFn$_add_method$arity$3(null,new cljs.core.Keyword(null,\"sum-where\",\"sum-where\",2135348428),(function (query,stage_number,p__79479){\nvar vec__79480 = p__79479;\nvar _sum_where = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__79480,(0),null);\nvar _opts = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__79480,(1),null);\nvar x = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__79480,(2),null);\nvar _pred = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__79480,(3),null);\nreturn [\"sum_where_\",cljs.core.str.cljs$core$IFn$_invoke$arity$1(metabase.lib.metadata.calculation.column_name.cljs$core$IFn$_invoke$arity$3(query,stage_number,x))].join('');\n}));\nmetabase.lib.hierarchy.derive(new cljs.core.Keyword(null,\"sum-where\",\"sum-where\",2135348428),new cljs.core.Keyword(\"metabase.lib.aggregation\",\"aggregation\",\"metabase.lib.aggregation/aggregation\",1701573815));\nmetabase.lib.metadata.calculation.display_name_method.cljs$core$IMultiFn$_add_method$arity$3(null,new cljs.core.Keyword(null,\"share\",\"share\",-589433933),(function (_query,_stage_number,_share,_style){\nreturn metabase.shared.util.i18n.js_i18n(\"Share of rows matching condition\");\n}));\nmetabase.lib.metadata.calculation.column_name_method.cljs$core$IMultiFn$_add_method$arity$3(null,new cljs.core.Keyword(null,\"share\",\"share\",-589433933),(function (_query,_stage_number,_share){\nreturn \"share\";\n}));\nmetabase.lib.hierarchy.derive(new cljs.core.Keyword(null,\"share\",\"share\",-589433933),new cljs.core.Keyword(\"metabase.lib.aggregation\",\"aggregation\",\"metabase.lib.aggregation/aggregation\",1701573815));\nmetabase.lib.metadata.calculation.display_name_method.cljs$core$IMultiFn$_add_method$arity$3(null,new cljs.core.Keyword(null,\"count-where\",\"count-where\",385407720),(function (_query,_stage_number,_count_where,_style){\nreturn metabase.shared.util.i18n.js_i18n(\"Count of rows matching condition\");\n}));\nmetabase.lib.metadata.calculation.column_name_method.cljs$core$IMultiFn$_add_method$arity$3(null,new cljs.core.Keyword(null,\"count-where\",\"count-where\",385407720),(function (_query,_stage_number,_count_where){\nreturn \"count-where\";\n}));\nmetabase.lib.hierarchy.derive(new cljs.core.Keyword(null,\"count-where\",\"count-where\",385407720),new cljs.core.Keyword(\"metabase.lib.aggregation\",\"aggregation\",\"metabase.lib.aggregation/aggregation\",1701573815));\nmetabase.lib.metadata.calculation.metadata_method.cljs$core$IMultiFn$_add_method$arity$3(null,new cljs.core.Keyword(\"metabase.lib.aggregation\",\"aggregation\",\"metabase.lib.aggregation/aggregation\",1701573815),(function (query,stage_number,p__79502){\nvar vec__79503 = p__79502;\nvar _tag = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__79503,(0),null);\nvar _opts = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__79503,(1),null);\nvar first_arg = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__79503,(2),null);\nvar clause = vec__79503;\nreturn cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([(cljs.core.truth_(first_arg)?cljs.core.select_keys(metabase.lib.metadata.calculation.metadata.cljs$core$IFn$_invoke$arity$3(query,stage_number,first_arg),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"settings\",\"settings\",1556144875)], null)):null),(function (){var fexpr__79506 = cljs.core.get_method(metabase.lib.metadata.calculation.metadata_method,new cljs.core.Keyword(null,\"default\",\"default\",-1987822328));\nreturn (fexpr__79506.cljs$core$IFn$_invoke$arity$3 ? fexpr__79506.cljs$core$IFn$_invoke$arity$3(query,stage_number,clause) : fexpr__79506.call(null,query,stage_number,clause));\n})()], 0));\n}));\n/**\n * Inputs: ([]\n *         [x])\n *   Return: :mbql.clause/count\n *        \n * \n *   Create a standalone clause of type `count`.\n */\nmetabase.lib.aggregation.count = (function metabase$lib$aggregation$count(var_args){\nvar G__79518 = arguments.length;\nswitch (G__79518) {\ncase 0:\nreturn metabase.lib.aggregation.count.cljs$core$IFn$_invoke$arity$0();\n\nbreak;\ncase 1:\nreturn metabase.lib.aggregation.count.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\n(metabase.lib.aggregation.count.cljs$core$IFn$_invoke$arity$0 = (function (){\n\nreturn metabase.lib.common.defop_create(new cljs.core.Keyword(null,\"count\",\"count\",2139924085),cljs.core.PersistentVector.EMPTY);\n}));\n\n(metabase.lib.aggregation.count.cljs$core$IFn$_invoke$arity$1 = (function (x){\n\nreturn metabase.lib.common.defop_create(new cljs.core.Keyword(null,\"count\",\"count\",2139924085),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [x], null));\n}));\n\n(metabase.lib.aggregation.count.cljs$lang$maxFixedArity = 1);\n\n/**\n * Inputs: ([]\n *         [x])\n *   Return: :mbql.clause/cum-count\n *        \n * \n *   Create a standalone clause of type `cum-count`.\n */\nmetabase.lib.aggregation.cum_count = (function metabase$lib$aggregation$cum_count(var_args){\nvar G__79525 = arguments.length;\nswitch (G__79525) {\ncase 0:\nreturn metabase.lib.aggregation.cum_count.cljs$core$IFn$_invoke$arity$0();\n\nbreak;\ncase 1:\nreturn metabase.lib.aggregation.cum_count.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\n(metabase.lib.aggregation.cum_count.cljs$core$IFn$_invoke$arity$0 = (function (){\n\nreturn metabase.lib.common.defop_create(new cljs.core.Keyword(null,\"cum-count\",\"cum-count\",-1964431543),cljs.core.PersistentVector.EMPTY);\n}));\n\n(metabase.lib.aggregation.cum_count.cljs$core$IFn$_invoke$arity$1 = (function (x){\n\nreturn metabase.lib.common.defop_create(new cljs.core.Keyword(null,\"cum-count\",\"cum-count\",-1964431543),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [x], null));\n}));\n\n(metabase.lib.aggregation.cum_count.cljs$lang$maxFixedArity = 1);\n\n/**\n * Inputs: ([x y])\n *   Return: :mbql.clause/count-where\n *        \n * \n *   Create a standalone clause of type `count-where`.\n */\nmetabase.lib.aggregation.count_where = (function metabase$lib$aggregation$count_where(x,y){\n\nreturn metabase.lib.common.defop_create(new cljs.core.Keyword(null,\"count-where\",\"count-where\",385407720),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [x,y], null));\n});\n/**\n * Inputs: ([x])\n *   Return: :mbql.clause/avg\n *        \n * \n *   Create a standalone clause of type `avg`.\n */\nmetabase.lib.aggregation.avg = (function metabase$lib$aggregation$avg(x){\n\nreturn metabase.lib.common.defop_create(new cljs.core.Keyword(null,\"avg\",\"avg\",197406200),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [x], null));\n});\n/**\n * Inputs: ([x])\n *   Return: :mbql.clause/distinct\n *        \n * \n *   Create a standalone clause of type `distinct`.\n */\nmetabase.lib.aggregation.distinct = (function metabase$lib$aggregation$distinct(x){\n\nreturn metabase.lib.common.defop_create(new cljs.core.Keyword(null,\"distinct\",\"distinct\",-1788879121),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [x], null));\n});\n/**\n * Inputs: ([x])\n *   Return: :mbql.clause/max\n *        \n * \n *   Create a standalone clause of type `max`.\n */\nmetabase.lib.aggregation.max = (function metabase$lib$aggregation$max(x){\n\nreturn metabase.lib.common.defop_create(new cljs.core.Keyword(null,\"max\",\"max\",61366548),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [x], null));\n});\n/**\n * Inputs: ([x])\n *   Return: :mbql.clause/median\n *        \n * \n *   Create a standalone clause of type `median`.\n */\nmetabase.lib.aggregation.median = (function metabase$lib$aggregation$median(x){\n\nreturn metabase.lib.common.defop_create(new cljs.core.Keyword(null,\"median\",\"median\",569566131),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [x], null));\n});\n/**\n * Inputs: ([x])\n *   Return: :mbql.clause/min\n *        \n * \n *   Create a standalone clause of type `min`.\n */\nmetabase.lib.aggregation.min = (function metabase$lib$aggregation$min(x){\n\nreturn metabase.lib.common.defop_create(new cljs.core.Keyword(null,\"min\",\"min\",444991522),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [x], null));\n});\n/**\n * Inputs: ([x y])\n *   Return: :mbql.clause/percentile\n *        \n * \n *   Create a standalone clause of type `percentile`.\n */\nmetabase.lib.aggregation.percentile = (function metabase$lib$aggregation$percentile(x,y){\n\nreturn metabase.lib.common.defop_create(new cljs.core.Keyword(null,\"percentile\",\"percentile\",-601188752),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [x,y], null));\n});\n/**\n * Inputs: ([x])\n *   Return: :mbql.clause/share\n *        \n * \n *   Create a standalone clause of type `share`.\n */\nmetabase.lib.aggregation.share = (function metabase$lib$aggregation$share(x){\n\nreturn metabase.lib.common.defop_create(new cljs.core.Keyword(null,\"share\",\"share\",-589433933),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [x], null));\n});\n/**\n * Inputs: ([x])\n *   Return: :mbql.clause/stddev\n *        \n * \n *   Create a standalone clause of type `stddev`.\n */\nmetabase.lib.aggregation.stddev = (function metabase$lib$aggregation$stddev(x){\n\nreturn metabase.lib.common.defop_create(new cljs.core.Keyword(null,\"stddev\",\"stddev\",-865474939),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [x], null));\n});\n/**\n * Inputs: ([x])\n *   Return: :mbql.clause/sum\n *        \n * \n *   Create a standalone clause of type `sum`.\n */\nmetabase.lib.aggregation.sum = (function metabase$lib$aggregation$sum(x){\n\nreturn metabase.lib.common.defop_create(new cljs.core.Keyword(null,\"sum\",\"sum\",136986814),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [x], null));\n});\n/**\n * Inputs: ([x])\n *   Return: :mbql.clause/cum-sum\n *        \n * \n *   Create a standalone clause of type `cum-sum`.\n */\nmetabase.lib.aggregation.cum_sum = (function metabase$lib$aggregation$cum_sum(x){\n\nreturn metabase.lib.common.defop_create(new cljs.core.Keyword(null,\"cum-sum\",\"cum-sum\",2064902349),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [x], null));\n});\n/**\n * Inputs: ([x y])\n *   Return: :mbql.clause/sum-where\n *        \n * \n *   Create a standalone clause of type `sum-where`.\n */\nmetabase.lib.aggregation.sum_where = (function metabase$lib$aggregation$sum_where(x,y){\n\nreturn metabase.lib.common.defop_create(new cljs.core.Keyword(null,\"sum-where\",\"sum-where\",2135348428),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [x,y], null));\n});\n/**\n * Inputs: ([x])\n *   Return: :mbql.clause/var\n *        \n * \n *   Create a standalone clause of type `var`.\n */\nmetabase.lib.aggregation.var$ = (function metabase$lib$aggregation$var(x){\n\nreturn metabase.lib.common.defop_create(new cljs.core.Keyword(null,\"var\",\"var\",-769682797),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [x], null));\n});\nmetabase.lib.ref.ref_method.cljs$core$IMultiFn$_add_method$arity$3(null,new cljs.core.Keyword(null,\"aggregation\",\"aggregation\",1597476696),(function (aggregation_clause){\nreturn aggregation_clause;\n}));\n/**\n * Schema for something you can pass to [[aggregate]] to add to a query as an aggregation.\n */\nmetabase.lib.aggregation.Aggregatable = new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"or\",\"or\",235744169),new cljs.core.Keyword(\"metabase.lib.schema.aggregation\",\"aggregation\",\"metabase.lib.schema.aggregation/aggregation\",-736862750),new cljs.core.Keyword(\"metabase.lib.schema.common\",\"external-op\",\"metabase.lib.schema.common/external-op\",1918684841),metabase.lib.metadata.MetricMetadata], null);\n/**\n * Inputs: ([query aggregatable]\n *         [query :- :metabase.lib.schema/query stage-number :- :int aggregatable :- Aggregatable])\n *   Return: :metabase.lib.schema/query\n *        \n * \n *   Adds an aggregation to query.\n */\nmetabase.lib.aggregation.aggregate = (function metabase$lib$aggregation$aggregate(var_args){\nvar G__79592 = arguments.length;\nswitch (G__79592) {\ncase 2:\nreturn metabase.lib.aggregation.aggregate.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ncase 3:\nreturn metabase.lib.aggregation.aggregate.cljs$core$IFn$_invoke$arity$3((arguments[(0)]),(arguments[(1)]),(arguments[(2)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\n(metabase.lib.aggregation.aggregate.cljs$core$IFn$_invoke$arity$2 = (function (query,aggregatable){\n\nreturn metabase.lib.aggregation.aggregate.cljs$core$IFn$_invoke$arity$3(query,(-1),aggregatable);\n}));\n\n(metabase.lib.aggregation.aggregate.cljs$core$IFn$_invoke$arity$3 = (function (query,stage_number,aggregatable){\nwhile(true){\n\nif(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(metabase.lib.dispatch.dispatch_value(aggregatable),new cljs.core.Keyword(\"metadata\",\"metric\",\"metadata/metric\",538003406))){\nvar G__79950 = query;\nvar G__79951 = stage_number;\nvar G__79952 = metabase.lib.ref.ref(aggregatable);\nquery = G__79950;\nstage_number = G__79951;\naggregatable = G__79952;\ncontinue;\n} else {\nreturn metabase.lib.util.add_summary_clause(query,stage_number,new cljs.core.Keyword(null,\"aggregation\",\"aggregation\",1597476696),aggregatable);\n}\nbreak;\n}\n}));\n\n(metabase.lib.aggregation.aggregate.cljs$lang$maxFixedArity = 3);\n\n/**\n * Inputs: ([query]\n *         [query :- :metabase.lib.schema/query stage-number :- :int])\n *   Return: [:maybe [:sequential :metabase.lib.schema.aggregation/aggregation]]\n *        \n * \n *   Get the aggregations in a given stage of a query.\n */\nmetabase.lib.aggregation.aggregations = (function metabase$lib$aggregation$aggregations(var_args){\nvar G__79607 = arguments.length;\nswitch (G__79607) {\ncase 1:\nreturn metabase.lib.aggregation.aggregations.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\n\nbreak;\ncase 2:\nreturn metabase.lib.aggregation.aggregations.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\n(metabase.lib.aggregation.aggregations.cljs$core$IFn$_invoke$arity$1 = (function (query){\n\nreturn metabase.lib.aggregation.aggregations.cljs$core$IFn$_invoke$arity$2(query,(-1));\n}));\n\n(metabase.lib.aggregation.aggregations.cljs$core$IFn$_invoke$arity$2 = (function (query,stage_number){\n\nreturn cljs.core.not_empty(new cljs.core.Keyword(null,\"aggregation\",\"aggregation\",1597476696).cljs$core$IFn$_invoke$arity$1(metabase.lib.util.query_stage(query,stage_number)));\n}));\n\n(metabase.lib.aggregation.aggregations.cljs$lang$maxFixedArity = 2);\n\n/**\n * Inputs: ([query]\n *         [query :- :metabase.lib.schema/query stage-number :- :int])\n *   Return: [:maybe [:sequential lib.metadata/ColumnMetadata]]\n *        \n * \n *   Get metadata about the aggregations in a given stage of a query.\n */\nmetabase.lib.aggregation.aggregations_metadata = (function metabase$lib$aggregation$aggregations_metadata(var_args){\nvar G__79616 = arguments.length;\nswitch (G__79616) {\ncase 1:\nreturn metabase.lib.aggregation.aggregations_metadata.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\n\nbreak;\ncase 2:\nreturn metabase.lib.aggregation.aggregations_metadata.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\n(metabase.lib.aggregation.aggregations_metadata.cljs$core$IFn$_invoke$arity$1 = (function (query){\n\nreturn metabase.lib.aggregation.aggregations_metadata.cljs$core$IFn$_invoke$arity$2(query,(-1));\n}));\n\n(metabase.lib.aggregation.aggregations_metadata.cljs$core$IFn$_invoke$arity$2 = (function (query,stage_number){\n\nvar G__79624 = cljs.core.not_empty(new cljs.core.Keyword(null,\"aggregation\",\"aggregation\",1597476696).cljs$core$IFn$_invoke$arity$1(metabase.lib.util.query_stage(query,stage_number)));\nif((G__79624 == null)){\nreturn null;\n} else {\nreturn cljs.core.into.cljs$core$IFn$_invoke$arity$3(cljs.core.PersistentVector.EMPTY,cljs.core.map.cljs$core$IFn$_invoke$arity$1((function (aggregation){\nvar metadata = metabase.lib.metadata.calculation.metadata.cljs$core$IFn$_invoke$arity$3(query,stage_number,aggregation);\nreturn cljs.core.assoc.cljs$core$IFn$_invoke$arity$variadic(metabase.util.assoc_default.cljs$core$IFn$_invoke$arity$3(metadata,new cljs.core.Keyword(null,\"effective-type\",\"effective-type\",-355725458),(function (){var or__5045__auto__ = new cljs.core.Keyword(null,\"base-type\",\"base-type\",1167971299).cljs$core$IFn$_invoke$arity$1(metadata);\nif(cljs.core.truth_(or__5045__auto__)){\nreturn or__5045__auto__;\n} else {\nreturn new cljs.core.Keyword(\"type\",\"*\",\"type/*\",-1283496752);\n}\n})()),new cljs.core.Keyword(\"lib\",\"source\",\"lib/source\",-434086550),new cljs.core.Keyword(\"source\",\"aggregations\",\"source/aggregations\",-1828710137),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(\"lib\",\"source-uuid\",\"lib/source-uuid\",1828897581),new cljs.core.Keyword(\"lib\",\"uuid\",\"lib/uuid\",-2145250720).cljs$core$IFn$_invoke$arity$1(cljs.core.second(aggregation))], 0));\n})),G__79624);\n}\n}));\n\n(metabase.lib.aggregation.aggregations_metadata.cljs$lang$maxFixedArity = 2);\n\nmetabase.lib.aggregation.OperatorWithColumns = new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"merge\",\"merge\",-1804319409),new cljs.core.Keyword(\"metabase.lib.schema.aggregation\",\"operator\",\"metabase.lib.schema.aggregation/operator\",2070038764),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"map\",\"map\",1371690461),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"columns\",\"columns\",1998437288),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"optional\",\"optional\",2053951509),true], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"sequential\",\"sequential\",-1082983960),metabase.lib.metadata.ColumnMetadata], null)], null)], null)], null);\nmetabase.lib.metadata.calculation.display_name_method.cljs$core$IMultiFn$_add_method$arity$3(null,new cljs.core.Keyword(\"operator\",\"aggregation\",\"operator/aggregation\",-1961510924),(function (_query,_stage_number,p__79636,_display_name_style){\nvar map__79637 = p__79636;\nvar map__79637__$1 = cljs.core.__destructure_map(map__79637);\nvar display_info = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__79637__$1,new cljs.core.Keyword(null,\"display-info\",\"display-info\",-816930907));\nreturn new cljs.core.Keyword(null,\"display-name\",\"display-name\",694513143).cljs$core$IFn$_invoke$arity$1((display_info.cljs$core$IFn$_invoke$arity$0 ? display_info.cljs$core$IFn$_invoke$arity$0() : display_info.call(null)));\n}));\nmetabase.lib.metadata.calculation.display_info_method.cljs$core$IMultiFn$_add_method$arity$3(null,new cljs.core.Keyword(\"operator\",\"aggregation\",\"operator/aggregation\",-1961510924),(function (_query,_stage_number,p__79640){\nvar map__79644 = p__79640;\nvar map__79644__$1 = cljs.core.__destructure_map(map__79644);\nvar short_name = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__79644__$1,new cljs.core.Keyword(null,\"short\",\"short\",1928760516));\nvar display_info = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__79644__$1,new cljs.core.Keyword(null,\"display-info\",\"display-info\",-816930907));\nvar requires_column_QMARK_ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__79644__$1,new cljs.core.Keyword(null,\"requires-column?\",\"requires-column?\",1623131448));\nvar selected_QMARK_ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__79644__$1,new cljs.core.Keyword(null,\"selected?\",\"selected?\",-742502788));\nvar G__79662 = cljs.core.assoc.cljs$core$IFn$_invoke$arity$variadic((display_info.cljs$core$IFn$_invoke$arity$0 ? display_info.cljs$core$IFn$_invoke$arity$0() : display_info.call(null)),new cljs.core.Keyword(null,\"short-name\",\"short-name\",-1767085022),metabase.util.qualified_name(short_name),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"requires-column\",\"requires-column\",934105295),requires_column_QMARK_], 0));\nif((!((selected_QMARK_ == null)))){\nreturn cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__79662,new cljs.core.Keyword(null,\"selected\",\"selected\",574897764),selected_QMARK_);\n} else {\nreturn G__79662;\n}\n}));\n/**\n * Inputs: [aggregation-operator :- OperatorWithColumns]\n *   Return: [:maybe [:sequential lib.metadata/ColumnMetadata]]\n *        \n * \n *   Returns the columns for which `aggregation-operator` is applicable.\n */\nmetabase.lib.aggregation.aggregation_operator_columns = (function metabase$lib$aggregation$aggregation_operator_columns(aggregation_operator){\n\nreturn new cljs.core.Keyword(null,\"columns\",\"columns\",1998437288).cljs$core$IFn$_invoke$arity$1(aggregation_operator);\n});\n/**\n * Inputs: ([query]\n *         [query :- :metabase.lib.schema/query stage-number :- :int])\n *   Return: [:maybe [:sequential OperatorWithColumns]]\n *        \n * \n *   Returns the available aggegation operators for the stage with `stage-number` of `query`.\n *   If `stage-number` is omitted, uses the last stage.\n */\nmetabase.lib.aggregation.available_aggregation_operators = (function metabase$lib$aggregation$available_aggregation_operators(var_args){\nvar G__79679 = arguments.length;\nswitch (G__79679) {\ncase 1:\nreturn metabase.lib.aggregation.available_aggregation_operators.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\n\nbreak;\ncase 2:\nreturn metabase.lib.aggregation.available_aggregation_operators.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\n(metabase.lib.aggregation.available_aggregation_operators.cljs$core$IFn$_invoke$arity$1 = (function (query){\n\nreturn metabase.lib.aggregation.available_aggregation_operators.cljs$core$IFn$_invoke$arity$2(query,(-1));\n}));\n\n(metabase.lib.aggregation.available_aggregation_operators.cljs$core$IFn$_invoke$arity$2 = (function (query,stage_number){\n\nvar db_features = (function (){var or__5045__auto__ = new cljs.core.Keyword(null,\"features\",\"features\",-1146962336).cljs$core$IFn$_invoke$arity$1(metabase.lib.metadata.database(query));\nif(cljs.core.truth_(or__5045__auto__)){\nreturn or__5045__auto__;\n} else {\nreturn cljs.core.PersistentHashSet.EMPTY;\n}\n})();\nvar stage = metabase.lib.util.query_stage(query,stage_number);\nvar columns = metabase.lib.metadata.calculation.visible_columns.cljs$core$IFn$_invoke$arity$3(query,stage_number,stage);\nvar with_columns = (function (p__79687){\nvar map__79688 = p__79687;\nvar map__79688__$1 = cljs.core.__destructure_map(map__79688);\nvar operator = map__79688__$1;\nvar requires_column_QMARK_ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__79688__$1,new cljs.core.Keyword(null,\"requires-column?\",\"requires-column?\",1623131448));\nvar supported_field = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__79688__$1,new cljs.core.Keyword(null,\"supported-field\",\"supported-field\",-2061545519));\nif(cljs.core.not(requires_column_QMARK_)){\nreturn operator;\n} else {\nif(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(supported_field,new cljs.core.Keyword(null,\"any\",\"any\",1705907423))){\nreturn cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(operator,new cljs.core.Keyword(null,\"columns\",\"columns\",1998437288),columns);\n} else {\nvar temp__5804__auto__ = cljs.core.not_empty(cljs.core.filterv((function (p1__79667_SHARP_){\nreturn metabase.lib.types.isa.field_type_QMARK_(supported_field,p1__79667_SHARP_);\n}),columns));\nif(cljs.core.truth_(temp__5804__auto__)){\nvar cols = temp__5804__auto__;\nreturn cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(operator,new cljs.core.Keyword(null,\"columns\",\"columns\",1998437288),cols);\n} else {\nreturn null;\n}\n\n}\n}\n});\nreturn cljs.core.not_empty(cljs.core.into.cljs$core$IFn$_invoke$arity$3(cljs.core.PersistentVector.EMPTY,cljs.core.comp.cljs$core$IFn$_invoke$arity$3(cljs.core.filter.cljs$core$IFn$_invoke$arity$1((function (op){\nvar feature = new cljs.core.Keyword(null,\"driver-feature\",\"driver-feature\",1905324248).cljs$core$IFn$_invoke$arity$1(op);\nvar or__5045__auto__ = (feature == null);\nif(or__5045__auto__){\nreturn or__5045__auto__;\n} else {\nreturn (db_features.cljs$core$IFn$_invoke$arity$1 ? db_features.cljs$core$IFn$_invoke$arity$1(feature) : db_features.call(null,feature));\n}\n})),cljs.core.keep.cljs$core$IFn$_invoke$arity$1(with_columns),cljs.core.map.cljs$core$IFn$_invoke$arity$1((function (p1__79668_SHARP_){\nreturn cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(p1__79668_SHARP_,new cljs.core.Keyword(\"lib\",\"type\",\"lib/type\",1175424801),new cljs.core.Keyword(\"operator\",\"aggregation\",\"operator/aggregation\",-1961510924));\n}))),metabase.lib.schema.aggregation.aggregation_operators));\n}));\n\n(metabase.lib.aggregation.available_aggregation_operators.cljs$lang$maxFixedArity = 2);\n\n/**\n * Inputs: ([aggregation-operator :- :metabase.lib.schema.aggregation/operator]\n *         [aggregation-operator :- :metabase.lib.schema.aggregation/operator column])\n *   Return: :metabase.lib.schema.aggregation/aggregation\n *        \n * \n *   Returns a standalone aggregation clause for an `aggregation-operator` and\n *   a `column`.\n *   For aggregations requiring an argument `column` is mandatory, otherwise\n *   it is optional.\n */\nmetabase.lib.aggregation.aggregation_clause = (function metabase$lib$aggregation$aggregation_clause(var_args){\nvar G__79692 = arguments.length;\nswitch (G__79692) {\ncase 1:\nreturn metabase.lib.aggregation.aggregation_clause.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\n\nbreak;\ncase 2:\nreturn metabase.lib.aggregation.aggregation_clause.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\n(metabase.lib.aggregation.aggregation_clause.cljs$core$IFn$_invoke$arity$1 = (function (aggregation_operator){\n\nif(cljs.core.not(new cljs.core.Keyword(null,\"requires-column?\",\"requires-column?\",1623131448).cljs$core$IFn$_invoke$arity$1(aggregation_operator))){\nreturn metabase.lib.options.ensure_uuid(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"short\",\"short\",1928760516).cljs$core$IFn$_invoke$arity$1(aggregation_operator),cljs.core.PersistentArrayMap.EMPTY], null));\n} else {\nthrow cljs.core.ex_info.cljs$core$IFn$_invoke$arity$2((function (){var G__79694 = \"aggregation operator %s requires an argument\";\nvar G__79695 = new cljs.core.Keyword(null,\"short\",\"short\",1928760516).cljs$core$IFn$_invoke$arity$1(aggregation_operator);\nreturn (metabase.lib.util.format.cljs$core$IFn$_invoke$arity$2 ? metabase.lib.util.format.cljs$core$IFn$_invoke$arity$2(G__79694,G__79695) : metabase.lib.util.format.call(null,G__79694,G__79695));\n})(),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"aggregation-operator\",\"aggregation-operator\",-1978700834),aggregation_operator], null));\n}\n}));\n\n(metabase.lib.aggregation.aggregation_clause.cljs$core$IFn$_invoke$arity$2 = (function (aggregation_operator,column){\n\nreturn metabase.lib.options.ensure_uuid(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"short\",\"short\",1928760516).cljs$core$IFn$_invoke$arity$1(aggregation_operator),cljs.core.PersistentArrayMap.EMPTY,metabase.lib.common.__GT_op_arg.cljs$core$IFn$_invoke$arity$1(column)], null));\n}));\n\n(metabase.lib.aggregation.aggregation_clause.cljs$lang$maxFixedArity = 2);\n\nmetabase.lib.aggregation.SelectedOperatorWithColumns = new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"merge\",\"merge\",-1804319409),new cljs.core.Keyword(\"metabase.lib.schema.aggregation\",\"operator\",\"metabase.lib.schema.aggregation/operator\",2070038764),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"map\",\"map\",1371690461),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"columns\",\"columns\",1998437288),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"optional\",\"optional\",2053951509),true], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"sequential\",\"sequential\",-1082983960),metabase.lib.metadata.ColumnMetadata], null)], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"selected?\",\"selected?\",-742502788),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"optional\",\"optional\",2053951509),true], null),new cljs.core.Keyword(null,\"boolean\",\"boolean\",-1919418404)], null)], null)], null);\n/**\n * Inputs: [agg-operators :- [:maybe [:sequential OperatorWithColumns]] agg-clause]\n *   Return: [:maybe [:sequential SelectedOperatorWithColumns]]\n *        \n * \n *   Mark the operator and the column (if any) in `agg-operators` selected by `agg-clause`.\n */\nmetabase.lib.aggregation.selected_aggregation_operators = (function metabase$lib$aggregation$selected_aggregation_operators(agg_operators,agg_clause){\n\nif(cljs.core.seq(agg_operators)){\nvar vec__79703 = agg_clause;\nvar op = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__79703,(0),null);\nvar _ = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__79703,(1),null);\nvar agg_col = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__79703,(2),null);\nvar agg_temporal_unit = new cljs.core.Keyword(null,\"temporal-unit\",\"temporal-unit\",-1892306358).cljs$core$IFn$_invoke$arity$1(metabase.lib.options.options(agg_col));\nreturn cljs.core.mapv.cljs$core$IFn$_invoke$arity$2((function (agg_op){\nvar G__79706 = agg_op;\nif(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(new cljs.core.Keyword(null,\"short\",\"short\",1928760516).cljs$core$IFn$_invoke$arity$1(agg_op),op)){\nreturn medley.core.update_existing.cljs$core$IFn$_invoke$arity$3(cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__79706,new cljs.core.Keyword(null,\"selected?\",\"selected?\",-742502788),true),new cljs.core.Keyword(null,\"columns\",\"columns\",1998437288),(function (cols){\nvar refs = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(metabase.lib.ref.ref,cols);\nvar match = metabase.lib.equality.find_closest_matching_ref.cljs$core$IFn$_invoke$arity$2(metabase.lib.options.update_options.cljs$core$IFn$_invoke$arity$variadic(agg_col,cljs.core.dissoc,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"temporal-unit\",\"temporal-unit\",-1892306358)], 0)),refs);\nif(cljs.core.truth_(match)){\nreturn cljs.core.mapv.cljs$core$IFn$_invoke$arity$3((function (r,c){\nvar G__79707 = c;\nvar G__79707__$1 = ((cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(r,match))?cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__79707,new cljs.core.Keyword(null,\"selected?\",\"selected?\",-742502788),true):G__79707);\nif((!((agg_temporal_unit == null)))){\nreturn metabase.lib.temporal_bucket.with_temporal_bucket(G__79707__$1,agg_temporal_unit);\n} else {\nreturn G__79707__$1;\n}\n}),refs,cols);\n} else {\nreturn cols;\n}\n}));\n} else {\nreturn G__79706;\n}\n}),agg_operators);\n} else {\nreturn null;\n}\n});\n/**\n * Inputs: ([query ag-index]\n *         [query :- :metabase.lib.schema/query stage-number :- :int ag-index :- :metabase.lib.schema.common/int-greater-than-or-equal-to-zero])\n *   Return: :mbql.clause/aggregation\n *        \n * \n *   Find the aggregation at `ag-index` and create an `:aggregation` ref for it. Intended for use\n *   when creating queries using threading macros e.g.\n * \n *  (-> (lib/query ...)\n *      (lib/aggregate (lib/avg ...))\n *      (as-> <> (lib/order-by <> (lib/aggregation-ref <> 0))))\n */\nmetabase.lib.aggregation.aggregation_ref = (function metabase$lib$aggregation$aggregation_ref(var_args){\nvar G__79710 = arguments.length;\nswitch (G__79710) {\ncase 2:\nreturn metabase.lib.aggregation.aggregation_ref.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ncase 3:\nreturn metabase.lib.aggregation.aggregation_ref.cljs$core$IFn$_invoke$arity$3((arguments[(0)]),(arguments[(1)]),(arguments[(2)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\n(metabase.lib.aggregation.aggregation_ref.cljs$core$IFn$_invoke$arity$2 = (function (query,ag_index){\n\nreturn metabase.lib.aggregation.aggregation_ref.cljs$core$IFn$_invoke$arity$3(query,(-1),ag_index);\n}));\n\n(metabase.lib.aggregation.aggregation_ref.cljs$core$IFn$_invoke$arity$3 = (function (query,stage_number,ag_index){\n\nvar temp__5802__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(new cljs.core.Keyword(null,\"aggregation\",\"aggregation\",1597476696).cljs$core$IFn$_invoke$arity$1(metabase.lib.util.query_stage(query,stage_number)),ag_index);\nif(cljs.core.truth_(temp__5802__auto__)){\nvar vec__79757 = temp__5802__auto__;\nvar _ = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__79757,(0),null);\nvar map__79760 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__79757,(1),null);\nvar map__79760__$1 = cljs.core.__destructure_map(map__79760);\nvar ag_uuid = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__79760__$1,new cljs.core.Keyword(\"lib\",\"uuid\",\"lib/uuid\",-2145250720));\nreturn metabase.lib.options.ensure_uuid(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"aggregation\",\"aggregation\",1597476696),cljs.core.PersistentArrayMap.EMPTY,ag_uuid], null));\n} else {\nthrow cljs.core.ex_info.cljs$core$IFn$_invoke$arity$2([\"Undefined aggregation \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(ag_index)].join(''),new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null,\"aggregation-index\",\"aggregation-index\",-1057045587),ag_index,new cljs.core.Keyword(null,\"query\",\"query\",-1288509510),query,new cljs.core.Keyword(null,\"stage-number\",\"stage-number\",-1752729638),stage_number], null));\n}\n}));\n\n(metabase.lib.aggregation.aggregation_ref.cljs$lang$maxFixedArity = 3);\n\n","~:ns-info",["^ ","~:rename-macros",null,"~:renames",["^ "],"~:meta",["^ ","~:file","metabase/lib/aggregation.cljc","~:line",1,"~:column",5,"~:end-line",1,"~:end-column",29],"~:ns-aliases",["^ ","~$cljs.loader","~$shadow.loader","~$clojure.pprint","~$cljs.pprint","~$clojure.spec.alpha","~$cljs.spec.alpha","~$clojure.core","~$cljs.core","~$clojure.spec.gen.alpha","~$cljs.spec.gen.alpha","~$clojure.core.match","~$cljs.core.match"],"~:use-macros",null,"~:excludes",["~#set",["~$min","~$distinct","~$var","~$max","~$count"]],"~:name","~$metabase.lib.aggregation","~:reader-aliases",["^ "],"~:op","~:ns","~:imports",null,"~:requires",["^ ","~$metabase.lib.schema","^W","~$mu","~$metabase.util.malli","~$metabase.lib.metadata.calculation","^Z","~$metabase.lib.equality","^[","~$metabase.lib.metadata","^10","~$lib.equality","^[","~$i18n","~$metabase.shared.util.i18n","~$lib.schema.common","~$metabase.lib.schema.common","~$u","~$metabase.util","~$lib.schema.aggregation","~$metabase.lib.schema.aggregation","~$lib.metadata","^10","~$lib.common","~$metabase.lib.common","^C","^C","~$metabase.lib.ref","^1<","~$metabase.lib.util","^1=","~$goog","^1>","~$lib.schema","^W","^15","^15","~$lib.options","~$metabase.lib.options","~$lib.hierarchy","~$metabase.lib.hierarchy","~$metabase.lib.temporal-bucket","^1D","~$m","~$medley.core","^16","^16","~$lib.ref","^1<","^1;","^1;","^13","^13","~$lib.util","^1=","~$lib.dispatch","~$metabase.lib.dispatch","~$metabase.lib.types.isa","^1J","^Y","^Y","~$lib.metadata.calculation","^Z","~$lib.types.isa","^1J","~$lib.temporal-bucket","^1D","^1C","^1C","^1A","^1A","^18","^18","^1I","^1I","^1E","^1E"],"~:seen",["^J",["~:require"]],"~:uses",null,"~:require-macros",["^ ","^X","^Y","^12","^13","~$u","^16","^1:","^1;","^C","^C","^16","^16","^1;","^1;","^13","^13","^Y","^Y"],"~:form",["~#list",["~$ns","^Q",["^1S",["~:refer-clojure","~:exclude",["^O","^L","^N","^K","^M"]]],["^1S",["^1O",["^1E","~:as","~$m"],["^1;","^1W","^1:"],["^1I","^1W","^1H"],["^[","^1W","^11"],["^1C","^1W","^1B"],["^10","^1W","^19"],["^Z","^1W","^1K"],["^1A","^1W","^1@"],["^1<","^1W","^1F"],["^W","^1W","^1?"],["^18","^1W","^17"],["^15","^1W","^14"],["^1D","^1W","^1M"],["^1J","^1W","^1L"],["^1=","^1W","^1G"],["^13","^1W","^12"],["^16","^1W","~$u"],["^Y","^1W","^X"]]]]],"~:flags",["^ ","^1O",["^J",[]]],"~:js-deps",["^ "],"~:deps",["^1>","^C","^1E","^1;","^1I","^[","^1C","^10","^Z","^1A","^1<","^W","^18","^15","^1D","^1J","^1=","^13","^16","^Y"]],"^T","^Q","~:resource-id",["~:shadow.build.classpath/resource","metabase/lib/aggregation.cljc"],"~:compiled-at",1692014630062,"^R",["^ ","^W","^W","^X","^Y","^Z","^Z","^[","^[","^10","^10","^11","^[","^12","^13","^14","^15","~$u","^16","^17","^18","^19","^10","^1:","^1;","^C","^C","^1<","^1<","^1=","^1=","^1>","^1>","^1?","^W","^15","^15","^1@","^1A","^1B","^1C","^1D","^1D","~$m","^1E","^16","^16","^1F","^1<","^1;","^1;","^13","^13","^1G","^1=","^1H","^1I","^1J","^1J","^Y","^Y","^1K","^Z","^1L","^1J","^1M","^1D","^1C","^1C","^1A","^1A","^18","^18","^1I","^1I","^1E","^1E"],"~:resource-name","metabase/lib/aggregation.cljc","~:warnings",[],"~:source","(ns metabase.lib.aggregation\n  (:refer-clojure :exclude [count distinct max min var])\n  (:require\n   [medley.core :as m]\n   [metabase.lib.common :as lib.common]\n   [metabase.lib.dispatch :as lib.dispatch]\n   [metabase.lib.equality :as lib.equality]\n   [metabase.lib.hierarchy :as lib.hierarchy]\n   [metabase.lib.metadata :as lib.metadata]\n   [metabase.lib.metadata.calculation :as lib.metadata.calculation]\n   [metabase.lib.options :as lib.options]\n   [metabase.lib.ref :as lib.ref]\n   [metabase.lib.schema :as lib.schema]\n   [metabase.lib.schema.aggregation :as lib.schema.aggregation]\n   [metabase.lib.schema.common :as lib.schema.common]\n   [metabase.lib.temporal-bucket :as lib.temporal-bucket]\n   [metabase.lib.types.isa :as lib.types.isa]\n   [metabase.lib.util :as lib.util]\n   [metabase.shared.util.i18n :as i18n]\n   [metabase.util :as u]\n   [metabase.util.malli :as mu]))\n\n(mu/defn column-metadata->aggregation-ref :- :mbql.clause/aggregation\n  \"Given `:metadata/column` column metadata for an aggregation, construct an `:aggregation` reference.\"\n  [metadata :- lib.metadata/ColumnMetadata]\n  (let [options {:lib/uuid       (str (random-uuid))\n                 :effective-type ((some-fn :effective-type :base-type) metadata)}\n        ag-uuid (:lib/source-uuid metadata)]\n    (assert ag-uuid \"Metadata for an aggregation reference should include :lib/source-uuid\")\n    [:aggregation options ag-uuid]))\n\n(mu/defn resolve-aggregation :- ::lib.schema.aggregation/aggregation\n  \"Resolve an aggregation with a specific `index`.\"\n  [query        :- ::lib.schema/query\n   stage-number :- :int\n   ag-uuid      :- :string]\n  (let [{aggregations :aggregation} (lib.util/query-stage query stage-number)\n        found (m/find-first (comp #{ag-uuid} :lib/uuid second) aggregations)]\n    (when-not found\n      (throw (ex-info (i18n/tru \"No aggregation with uuid {0}\" ag-uuid)\n                      {:uuid         ag-uuid\n                       :query        query\n                       :stage-number stage-number})))\n    found))\n\n(defmethod lib.metadata.calculation/describe-top-level-key-method :aggregation\n  [query stage-number _k]\n  (when-let [aggregations (not-empty (:aggregation (lib.util/query-stage query stage-number)))]\n    (lib.util/join-strings-with-conjunction\n     (i18n/tru \"and\")\n     (for [aggregation aggregations]\n       (lib.metadata.calculation/display-name query stage-number aggregation :long)))))\n\n(defmethod lib.metadata.calculation/metadata-method :aggregation\n  [query stage-number [_ag {:keys [base-type effective-type], :as _opts} index, :as _aggregation-ref]]\n  (let [aggregation (resolve-aggregation query stage-number index)]\n    (merge\n     (lib.metadata.calculation/metadata query stage-number aggregation)\n     {:lib/source :source/aggregations\n      :lib/source-uuid (:lib/uuid (second aggregation))}\n     (when base-type\n       {:base-type base-type})\n     (when effective-type\n       {:effective-type effective-type}))))\n\n;;; TODO -- merge this stuff into `defop` somehow.\n\n(defmethod lib.metadata.calculation/display-name-method :aggregation\n  [query stage-number [_tag _opts index] style]\n  (lib.metadata.calculation/display-name query stage-number (resolve-aggregation query stage-number index) style))\n\n(lib.hierarchy/derive ::count-aggregation ::aggregation)\n\n;;; count and cumulative count can both be used either with no args (count of rows) or with one arg (count of X, which\n;;; I think means count where X is not NULL or something like that. Basically `count(x)` in SQL)\n(doseq [tag [:count\n             :cum-count]]\n  (lib.hierarchy/derive tag ::count-aggregation))\n\n(defmethod lib.metadata.calculation/display-name-method ::count-aggregation\n  [query stage-number [tag _opts x] style]\n  ;; x is optional.\n  (if x\n    (let [x-display-name (lib.metadata.calculation/display-name query stage-number x style)]\n      (case tag\n        :count     (i18n/tru \"Count of {0}\" x-display-name)\n        :cum-count (i18n/tru \"Cumulative count of {0}\" x-display-name)))\n    (case tag\n      :count     (i18n/tru \"Count\")\n      :cum-count (i18n/tru \"Cumulative count\"))))\n\n(defmethod lib.metadata.calculation/column-name-method ::count-aggregation\n  [_query _stage-number [tag :as _clause]]\n  (case tag\n    :count     \"count\"\n    :cum-count \"cum_count\"))\n\n(defmethod lib.metadata.calculation/metadata-method ::count-aggregation\n  [query stage-number clause]\n  (assoc ((get-method lib.metadata.calculation/metadata-method ::aggregation) query stage-number clause)\n         :semantic-type :type/Quantity))\n\n(defmethod lib.metadata.calculation/display-name-method :case\n  [_query _stage-number _case _style]\n  (i18n/tru \"Case\"))\n\n(defmethod lib.metadata.calculation/column-name-method :case\n  [_query _stage-number _case]\n  \"case\")\n\n;;; TODO - Should `:case` derive from `::aggregation` as well???\n\n(lib.hierarchy/derive ::unary-aggregation ::aggregation)\n\n(doseq [tag [:avg\n             :cum-sum\n             :distinct\n             :max\n             :median\n             :min\n             :stddev\n             :sum\n             :var]]\n  (lib.hierarchy/derive tag ::unary-aggregation))\n\n(defmethod lib.metadata.calculation/column-name-method ::unary-aggregation\n  [_query _stage-number [tag _opts _arg]]\n  (case tag\n    :avg       \"avg\"\n    :cum-sum   \"sum\"\n    :distinct  \"count\"\n    :max       \"max\"\n    :median    \"median\"\n    :min       \"min\"\n    :stddev    \"stddev\"\n    :sum       \"sum\"\n    :var       \"var\"))\n\n\n(defmethod lib.metadata.calculation/display-name-method ::unary-aggregation\n  [query stage-number [tag _opts arg] style]\n  (let [arg (lib.metadata.calculation/display-name query stage-number arg style)]\n    (case tag\n      :avg       (i18n/tru \"Average of {0}\"            arg)\n      :cum-sum   (i18n/tru \"Cumulative sum of {0}\"     arg)\n      :distinct  (i18n/tru \"Distinct values of {0}\"    arg)\n      :max       (i18n/tru \"Max of {0}\"                arg)\n      :median    (i18n/tru \"Median of {0}\"             arg)\n      :min       (i18n/tru \"Min of {0}\"                arg)\n      :stddev    (i18n/tru \"Standard deviation of {0}\" arg)\n      :sum       (i18n/tru \"Sum of {0}\"                arg)\n      :var       (i18n/tru \"Variance of {0}\"           arg))))\n\n(defmethod lib.metadata.calculation/display-name-method :percentile\n  [query stage-number [_percentile _opts x p] style]\n  (i18n/tru \"{0}th percentile of {1}\" p (lib.metadata.calculation/display-name query stage-number x style)))\n\n(defmethod lib.metadata.calculation/column-name-method :percentile\n  [_query _stage-number _clause]\n  \"percentile\")\n\n(lib.hierarchy/derive :percentile ::aggregation)\n\n;;; we don't currently have sophisticated logic for generating nice display names for filter clauses.\n;;;\n;;; TODO : wait a minute, we do have that stuff now!\n\n(defmethod lib.metadata.calculation/display-name-method :sum-where\n  [query stage-number [_sum-where _opts x _pred] style]\n  (i18n/tru \"Sum of {0} matching condition\" (lib.metadata.calculation/display-name query stage-number x style)))\n\n(defmethod lib.metadata.calculation/column-name-method :sum-where\n  [query stage-number [_sum-where _opts x _pred]]\n  (str \"sum_where_\" (lib.metadata.calculation/column-name query stage-number x)))\n\n(lib.hierarchy/derive :sum-where ::aggregation)\n\n(defmethod lib.metadata.calculation/display-name-method :share\n  [_query _stage-number _share _style]\n  (i18n/tru \"Share of rows matching condition\"))\n\n(defmethod lib.metadata.calculation/column-name-method :share\n  [_query _stage-number _share]\n  \"share\")\n\n(lib.hierarchy/derive :share ::aggregation)\n\n(defmethod lib.metadata.calculation/display-name-method :count-where\n  [_query _stage-number _count-where _style]\n  (i18n/tru \"Count of rows matching condition\"))\n\n(defmethod lib.metadata.calculation/column-name-method :count-where\n  [_query _stage-number _count-where]\n  \"count-where\")\n\n(lib.hierarchy/derive :count-where ::aggregation)\n\n(defmethod lib.metadata.calculation/metadata-method ::aggregation\n  [query stage-number [_tag _opts first-arg :as clause]]\n  (merge\n   ;; flow the `:options` from the field we're aggregating. This is important, for some reason.\n   ;; See [[metabase.query-processor-test.aggregation-test/field-settings-for-aggregate-fields-test]]\n   (when first-arg\n     (select-keys (lib.metadata.calculation/metadata query stage-number first-arg) [:settings]))\n   ((get-method lib.metadata.calculation/metadata-method :default) query stage-number clause)))\n\n(lib.common/defop count       [] [x])\n(lib.common/defop cum-count   [] [x])\n(lib.common/defop count-where [x y])\n(lib.common/defop avg         [x])\n(lib.common/defop distinct    [x])\n(lib.common/defop max         [x])\n(lib.common/defop median      [x])\n(lib.common/defop min         [x])\n(lib.common/defop percentile  [x y])\n(lib.common/defop share       [x])\n(lib.common/defop stddev      [x])\n(lib.common/defop sum         [x])\n(lib.common/defop cum-sum     [x])\n(lib.common/defop sum-where   [x y])\n(lib.common/defop var         [x])\n\n(defmethod lib.ref/ref-method :aggregation\n  [aggregation-clause]\n  aggregation-clause)\n\n(def ^:private Aggregatable\n  \"Schema for something you can pass to [[aggregate]] to add to a query as an aggregation.\"\n  [:or\n   ::lib.schema.aggregation/aggregation\n   ::lib.schema.common/external-op\n   lib.metadata/MetricMetadata])\n\n(mu/defn aggregate :- ::lib.schema/query\n  \"Adds an aggregation to query.\"\n  ([query aggregatable]\n   (aggregate query -1 aggregatable))\n\n  ([query        :- ::lib.schema/query\n    stage-number :- :int\n    aggregatable :- Aggregatable]\n   ;; if this is a Metric metadata, convert it to `:metric` MBQL clause before adding.\n   (if (= (lib.dispatch/dispatch-value aggregatable) :metadata/metric)\n     (recur query stage-number (lib.ref/ref aggregatable))\n     (lib.util/add-summary-clause query stage-number :aggregation aggregatable))))\n\n(mu/defn aggregations :- [:maybe [:sequential ::lib.schema.aggregation/aggregation]]\n  \"Get the aggregations in a given stage of a query.\"\n  ([query]\n   (aggregations query -1))\n\n  ([query        :- ::lib.schema/query\n    stage-number :- :int]\n   (not-empty (:aggregation (lib.util/query-stage query stage-number)))))\n\n(mu/defn aggregations-metadata :- [:maybe [:sequential lib.metadata/ColumnMetadata]]\n  \"Get metadata about the aggregations in a given stage of a query.\"\n  ([query]\n   (aggregations-metadata query -1))\n\n  ([query        :- ::lib.schema/query\n    stage-number :- :int]\n   (some->> (not-empty (:aggregation (lib.util/query-stage query stage-number)))\n            (into [] (map (fn [aggregation]\n                            (let [metadata (lib.metadata.calculation/metadata query stage-number aggregation)]\n                              (-> metadata\n                                  (u/assoc-default :effective-type (or (:base-type metadata) :type/*))\n                                  (assoc :lib/source :source/aggregations\n                                         :lib/source-uuid (:lib/uuid (second aggregation)))))))))))\n\n(def ^:private OperatorWithColumns\n  [:merge\n   ::lib.schema.aggregation/operator\n   [:map\n    [:columns {:optional true} [:sequential lib.metadata/ColumnMetadata]]]])\n\n(defmethod lib.metadata.calculation/display-name-method :operator/aggregation\n  [_query _stage-number {:keys [display-info]} _display-name-style]\n  (:display-name (display-info)))\n\n(defmethod lib.metadata.calculation/display-info-method :operator/aggregation\n  [_query _stage-number {:keys [display-info requires-column? selected?] short-name :short}]\n  (cond-> (assoc (display-info)\n                 :short-name (u/qualified-name short-name)\n                 :requires-column requires-column?)\n    (some? selected?) (assoc :selected selected?)))\n\n(mu/defn aggregation-operator-columns :- [:maybe [:sequential lib.metadata/ColumnMetadata]]\n  \"Returns the columns for which `aggregation-operator` is applicable.\"\n  [aggregation-operator :- OperatorWithColumns]\n  (:columns aggregation-operator))\n\n(mu/defn available-aggregation-operators :- [:maybe [:sequential OperatorWithColumns]]\n  \"Returns the available aggegation operators for the stage with `stage-number` of `query`.\n  If `stage-number` is omitted, uses the last stage.\"\n  ([query]\n   (available-aggregation-operators query -1))\n\n  ([query :- ::lib.schema/query\n    stage-number :- :int]\n   (let [db-features (or (:features (lib.metadata/database query)) #{})\n         stage (lib.util/query-stage query stage-number)\n         columns (lib.metadata.calculation/visible-columns query stage-number stage)\n         with-columns (fn [{:keys [requires-column? supported-field] :as operator}]\n                        (cond\n                          (not requires-column?)\n                          operator\n\n                          (= supported-field :any)\n                          (assoc operator :columns columns)\n\n                          :else\n                          (when-let [cols (->> columns\n                                               (filterv #(lib.types.isa/field-type? supported-field %))\n                                               not-empty)]\n                            (assoc operator :columns cols))))]\n     (not-empty\n      (into []\n            (comp (filter (fn [op]\n                            (let [feature (:driver-feature op)]\n                              (or (nil? feature) (db-features feature)))))\n                  (keep with-columns)\n                  (map #(assoc % :lib/type :operator/aggregation)))\n            lib.schema.aggregation/aggregation-operators)))))\n\n(mu/defn aggregation-clause :- ::lib.schema.aggregation/aggregation\n  \"Returns a standalone aggregation clause for an `aggregation-operator` and\n  a `column`.\n  For aggregations requiring an argument `column` is mandatory, otherwise\n  it is optional.\"\n  ([aggregation-operator :- ::lib.schema.aggregation/operator]\n   (if-not (:requires-column? aggregation-operator)\n     (lib.options/ensure-uuid [(:short aggregation-operator) {}])\n     (throw (ex-info (lib.util/format \"aggregation operator %s requires an argument\"\n                                      (:short aggregation-operator))\n                     {:aggregation-operator aggregation-operator}))))\n\n  ([aggregation-operator :- ::lib.schema.aggregation/operator\n    column]\n   (lib.options/ensure-uuid [(:short aggregation-operator) {} (lib.common/->op-arg column)])))\n\n(def ^:private SelectedOperatorWithColumns\n  [:merge\n   ::lib.schema.aggregation/operator\n   [:map\n    [:columns {:optional true} [:sequential lib.metadata/ColumnMetadata]]\n    [:selected? {:optional true} :boolean]]])\n\n(mu/defn selected-aggregation-operators :- [:maybe [:sequential SelectedOperatorWithColumns]]\n  \"Mark the operator and the column (if any) in `agg-operators` selected by `agg-clause`.\"\n  [agg-operators :- [:maybe [:sequential OperatorWithColumns]]\n   agg-clause]\n  (when (seq agg-operators)\n    (let [[op _ agg-col] agg-clause\n          agg-temporal-unit (-> agg-col lib.options/options :temporal-unit)]\n      (mapv (fn [agg-op]\n              (cond-> agg-op\n                (= (:short agg-op) op)\n                (-> (assoc :selected? true)\n                    (m/update-existing\n                     :columns\n                     (fn [cols]\n                       (let [refs (mapv lib.ref/ref cols)\n                             match (lib.equality/find-closest-matching-ref\n                                    (lib.options/update-options agg-col dissoc :temporal-unit)\n                                    refs)]\n                         (if match\n                           (mapv (fn [r c]\n                                   (cond-> c\n                                     (= r match) (assoc :selected? true)\n\n                                     (some? agg-temporal-unit)\n                                     (lib.temporal-bucket/with-temporal-bucket agg-temporal-unit)))\n                                 refs cols)\n                           cols)))))))\n            agg-operators))))\n\n(mu/defn aggregation-ref :- :mbql.clause/aggregation\n  \"Find the aggregation at `ag-index` and create an `:aggregation` ref for it. Intended for use\n  when creating queries using threading macros e.g.\n\n    (-> (lib/query ...)\n        (lib/aggregate (lib/avg ...))\n        (as-> <> (lib/order-by <> (lib/aggregation-ref <> 0))))\"\n  ([query ag-index]\n   (aggregation-ref query -1 ag-index))\n\n  ([query        :- ::lib.schema/query\n    stage-number :- :int\n    ag-index     :- ::lib.schema.common/int-greater-than-or-equal-to-zero]\n   (if-let [[_ {ag-uuid :lib/uuid}] (get (:aggregation (lib.util/query-stage query stage-number)) ag-index)]\n     (lib.options/ensure-uuid [:aggregation {} ag-uuid])\n     (throw (ex-info (str \"Undefined aggregation \" ag-index)\n                     {:aggregation-index ag-index\n                      :query             query\n                      :stage-number      stage-number})))))\n","~:reader-features",["^J",["~:cljs-release","~:cljs-dev","~:cljs"]],"~:cljc",true,"~:source-map-compact",["^ ","mappings","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","names",["metabase.lib.aggregation/column-metadata->aggregation-ref","metadata","options","cljs.core/random-uuid","cljs.core.some_fn","ag-uuid","js/Error","metabase.lib.aggregation/resolve-aggregation","query","stage-number","map__79337","cljs.core/--destructure-map","cljs.core.get","aggregations","metabase.lib.util/query-stage","found","medley.core.find_first","cljs.core.comp","cljs.core/second","cljs.core.ex_info","metabase.shared.util.i18n.js_i18n","metabase.lib.metadata.calculation/describe-top-level-key-method","_k","temp__5804__auto__","cljs.core/not-empty","metabase.lib.util/join-strings-with-conjunction","metabase.shared.util.i18n/js-i18n","iter__5523__auto__","s__79346","cljs.core/LazySeq","cljs.core/seq","cljs.core/chunked-seq?","c__5521__auto__","size__5522__auto__","cljs.core/count","b__79348","cljs.core/chunk-buffer","i__79347","cljs.core/-nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__79345","cljs.core/chunk-rest","cljs.core/first","cljs.core/cons","cljs.core/rest","aggregation","metabase.lib.metadata.calculation.display_name","metabase.lib.metadata.calculation/metadata-method","p__79359","vec__79360","cljs.core.nth","map__79363","_ag","base-type","effective-type","_opts","index","_aggregation-ref","cljs.core.merge","metabase.lib.metadata.calculation.metadata","metabase.lib.metadata.calculation/display-name-method","p__79372","vec__79373","_tag","style","metabase.lib.hierarchy/derive","seq__79376","chunk__79377","count__79378","i__79379","c__5568__auto__","cljs.core/chunk-first","cljs.core/next","tag","p__79393","vec__79394","x","x-display-name","G__79397","cljs.core/Keyword","G__79398","metabase.lib.metadata.calculation/column-name-method","p__79399","vec__79400","_query","_stage-number","_clause","G__79404","clause","cljs.core.assoc","fexpr__79415","cljs.core/get-method","_case","_style","seq__79418","chunk__79419","count__79420","i__79421","p__79430","vec__79431","_arg","G__79434","p__79440","vec__79441","arg","G__79448","p__79460","vec__79462","_percentile","p","p__79473","vec__79475","_sum-where","_pred","p__79479","vec__79480","metabase.lib.metadata.calculation.column_name","_share","_count-where","p__79502","vec__79503","first-arg","cljs.core/select-keys","fexpr__79506","var_args","G__79518","metabase.lib.aggregation/count","metabase.lib.common/defop-create","G__79525","metabase.lib.aggregation/cum-count","metabase.lib.aggregation/count-where","y","metabase.lib.aggregation/avg","metabase.lib.aggregation/distinct","metabase.lib.aggregation/max","metabase.lib.aggregation/median","metabase.lib.aggregation/min","metabase.lib.aggregation/percentile","metabase.lib.aggregation/share","metabase.lib.aggregation/stddev","metabase.lib.aggregation/sum","metabase.lib.aggregation/cum-sum","metabase.lib.aggregation/sum-where","metabase.lib.aggregation/var","metabase.lib.ref/ref-method","aggregation-clause","metabase.lib.aggregation/Aggregatable","metabase.lib.metadata/MetricMetadata","G__79592","metabase.lib.aggregation/aggregate","aggregatable","metabase.lib.aggregation.aggregate","cljs.core._EQ_","metabase.lib.dispatch/dispatch-value","metabase.lib.ref/ref","metabase.lib.util/add-summary-clause","G__79607","metabase.lib.aggregation/aggregations","metabase.lib.aggregation.aggregations","G__79616","metabase.lib.aggregation/aggregations-metadata","metabase.lib.aggregation.aggregations_metadata","G__79624","cljs.core.into","cljs.core.map","metabase.util.assoc_default","or__5045__auto__","metabase.lib.aggregation/OperatorWithColumns","metabase.lib.metadata/ColumnMetadata","p__79636","map__79637","display-info","_display-name-style","metabase.lib.metadata.calculation/display-info-method","p__79640","map__79644","requires-column?","selected?","short-name","G__79662","metabase.util/qualified-name","metabase.lib.aggregation/aggregation-operator-columns","aggregation-operator","G__79679","metabase.lib.aggregation/available-aggregation-operators","metabase.lib.aggregation.available_aggregation_operators","db-features","metabase.lib.metadata/database","stage","columns","metabase.lib.metadata.calculation.visible_columns","with-columns","p__79687","map__79688","supported-field","operator","cljs.core/not","cols","p1__79667#","cljs.core/filterv","metabase.lib.types.isa/field-type?","cljs.core.filter","op","feature","cljs.core.keep","p1__79668#","metabase.lib.schema.aggregation/aggregation-operators","G__79692","metabase.lib.aggregation/aggregation-clause","metabase.lib.options/ensure-uuid","G__79694","G__79695","metabase.lib.util/format","column","metabase.lib.common/->op-arg","metabase.lib.aggregation/SelectedOperatorWithColumns","metabase.lib.aggregation/selected-aggregation-operators","agg-operators","agg-clause","vec__79703","_","agg-col","agg-temporal-unit","metabase.lib.options/options","cljs.core.mapv","agg-op","G__79706","medley.core.update_existing","refs","match","metabase.lib.equality.find_closest_matching_ref","metabase.lib.options.update_options","cljs.core/dissoc","r","c","G__79707","metabase.lib.temporal-bucket/with-temporal-bucket","G__79710","metabase.lib.aggregation/aggregation-ref","ag-index","metabase.lib.aggregation.aggregation_ref","temp__5802__auto__","vec__79757","map__79760"]],"~:used-vars",["^J",["~$metabase.lib.metadata.calculation/visible-columns","~$metabase.lib.aggregation/aggregate","~$cljs.core/--destructure-map","~$cljs.core/keep","~$cljs.core/comp","~$cljs.core/rest","~$metabase.lib.util/join-strings-with-conjunction","~$cljs.core/get-method","~$metabase.util/assoc-default","~$metabase.lib.aggregation/selected-aggregation-operators","~$metabase.lib.aggregation/aggregation-ref","~$metabase.lib.options/options","~$metabase.lib.aggregation/Aggregatable","~$metabase.lib.aggregation/aggregations","~$cljs.core/filter","~$cljs.core/=","~$metabase.lib.util/query-stage","~$metabase.lib.schema.aggregation/aggregation-operators","~$metabase.lib.aggregation/sum","~$cljs.core/count","~$metabase.lib.options/ensure-uuid","~$cljs.core/seq","~$cljs.core/chunk-first","~$metabase.lib.common/->op-arg","~$metabase.lib.options/update-options","~$metabase.util/qualified-name","~$metabase.lib.metadata/ColumnMetadata","~$cljs.core/Keyword","~$metabase.lib.metadata.calculation/column-name-method","~$cljs.core/chunk","~$cljs.core/mapv","~$cljs.core/dissoc","~$cljs.core/LazySeq","~$cljs.core/chunk-rest","~$metabase.lib.metadata.calculation/describe-top-level-key-method","~$metabase.lib.metadata.calculation/display-info-method","~$metabase.lib.ref/ref-method","~$metabase.lib.aggregation/aggregation-clause","~$metabase.lib.hierarchy/derive","~$metabase.lib.util/format","~$metabase.lib.aggregation/count-where","~$cljs.core/into","~$metabase.lib.metadata/database","~$metabase.lib.aggregation/min","~$cljs.core/map","~$metabase.lib.aggregation/stddev","~$cljs.core/filterv","~$medley.core/update-existing","~$metabase.lib.aggregation/available-aggregation-operators","~$medley.core/find-first","~$metabase.lib.aggregation/avg","~$cljs.core/-add-method","~$metabase.lib.aggregation/cum-count","~$metabase.lib.metadata.calculation/metadata","~$metabase.lib.metadata.calculation/metadata-method","~$cljs.core/get","~$metabase.lib.aggregation/sum-where","~$metabase.lib.temporal-bucket/with-temporal-bucket","~$metabase.lib.aggregation/OperatorWithColumns","~$cljs.core/chunk-append","~$cljs.core/-nth","~$metabase.lib.aggregation/aggregations-metadata","~$cljs.core/not-empty","~$metabase.lib.metadata/MetricMetadata","~$metabase.lib.common/defop-create","~$metabase.lib.metadata.calculation/display-name","~$metabase.lib.aggregation/cum-sum","~$metabase.shared.util.i18n/js-i18n","~$cljs.core/nth","~$cljs.core/ex-info","~$metabase.lib.aggregation/aggregation-operator-columns","~$cljs.core/second","~$metabase.lib.aggregation/percentile","~$metabase.lib.dispatch/dispatch-value","~$metabase.lib.aggregation/resolve-aggregation","~$cljs.core/next","~$metabase.lib.aggregation/distinct","~$metabase.lib.ref/ref","~$cljs.core/select-keys","~$metabase.lib.aggregation/SelectedOperatorWithColumns","~$metabase.lib.aggregation/max","~$metabase.lib.metadata.calculation/column-name","~$cljs.core/chunk-cons","~$cljs.core/not","~$metabase.lib.types.isa/field-type?","~$cljs.core/cons","~$cljs.core/assoc","~$metabase.lib.aggregation/median","~$metabase.lib.aggregation/column-metadata->aggregation-ref","~$cljs.core/chunk-buffer","~$metabase.lib.aggregation/share","~$metabase.lib.equality/find-closest-matching-ref","~$metabase.lib.aggregation/var","~$cljs.core/some-fn","~$cljs.core/first","~$metabase.lib.util/add-summary-clause","~$metabase.lib.aggregation/count","~$cljs.core/merge","~$metabase.lib.metadata.calculation/display-name-method","~$js/Error","~$cljs.core/random-uuid","~$cljs.core/chunked-seq?"]]],"~:cache-keys",["~#cmap",[["^20","camel_snake_kebab/internals/misc.cljc"],["5ae08f83ceb8959971e6334596bff0214bf6fdf2","~:shadow.build.compiler/resolve",["^ ","~:require-id",null,"~:deps-ids",["^J",[]],"~:deps-syms",["^1>","^C","~$camel-snake-kebab.internals.string-separator","~$clojure.string"]]],["^20","goog/dom/tagname.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4N",["^ ","^4O",null,"^4P",["^J",[]],"^4Q",["^1>","~$goog.dom.HtmlElement"]]],["^20","metabase/shared/util/i18n.cljs"],["6c3c8615004b349dae9851ed547d516d45e04bd0","^4N",["^ ","^4O",null,"^4P",["^J",[]],"^4Q",["^1>","^C","~$shadow.js.shim.module$ttag","^4S"]]],["^20","goog/labs/useragent/platform.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4N",["^ ","^4O",null,"^4P",["^J",[]],"^4Q",["^1>","~$goog.string.internal","~$goog.labs.userAgent.util","~$goog.labs.userAgent.highEntropy.highEntropyValue","~$goog.labs.userAgent.highEntropy.highEntropyData","~$goog.labs.userAgent"]]],["^20","metabase/types.cljc"],["00232bf78b259e26a21c218c8f2d746ba7003a15","^4N",["^ ","^4O",null,"^4P",["^J",[]],"^4Q",["^1>","^C","~$clojure.set","~$metabase.types.coercion-hierarchies","^16"]]],["^20","cljs/spec/gen/alpha.cljs"],["bc14df6666853ed869d7b88aaa864111c65d0c7f","^4N",["^ ","^4O",null,"^4P",["^J",[]],"^4Q",["^1>","^C","~$goog.Uri"]]],["^20","metabase/lib/util.cljc"],["11c3262368d876979e323f3e646aab21fbf9b86e","^4N",["^ ","^4O",null,"^4P",["^J",[]],"^4Q",["^1>","^C","~$shadow.js.shim.module$crc_32","~$goog.string","~$goog.string.format","^4[","^4S","^1E","^1;","^1A","^W","^15","~$metabase.lib.schema.expression","~$metabase.lib.schema.id","~$metabase.mbql.util","^13","^16","^Y"]]],["^20","lambdaisland/glogi.cljs"],["76286836d4172602aa08006b2a754dda736ffe09","^4N",["^ ","^4O",null,"^4P",["^J",[]],"^4Q",["^1>","^C","~$goog.log","~$goog.debug.Console","~$goog.array","^4S","~$goog.object","~$goog.debug.FancyWindow","~$goog.debug.DivConsole"]]],["^20","goog/math/math.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4N",["^ ","^4O",null,"^4P",["^J",[]],"^4Q",["^1>","~$goog.asserts"]]],["^20","goog/html/trustedtypes.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4N",["^ ","^4O",null,"^4P",["^J",[]],"^4Q",["^1>"]]],["^20","goog/string/stringformat.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4N",["^ ","^4O",null,"^4P",["^J",[]],"^4Q",["^1>","^53"]]],["^20","malli/registry.cljc"],["514c6f7d69d7e40b56fa75bfd1a49a683ca15982","^4N",["^ ","^4O",null,"^4P",["^J",[]],"^4Q",["^1>","^C"]]],["^20","goog/labs/useragent/browser.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4N",["^ ","^4O",null,"^4P",["^J",[]],"^4Q",["^1>","^4W","^4X","^5>","^4V","^4Y","^4Z"]]],["^20","goog/html/safeurl.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4N",["^ ","^4O",null,"^4P",["^J",[]],"^4Q",["^1>","^5>","~$goog.fs.url","~$goog.html.TrustedResourceUrl","~$goog.string.Const","~$goog.string.TypedString","^4V"]]],["^20","goog/style/style.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4N",["^ ","^4O",null,"^4P",["^J",[]],"^4Q",["^1>","^5>","~$goog.dom","~$goog.dom.NodeType","~$goog.dom.TagName","~$goog.dom.safe","~$goog.dom.vendor","~$goog.html.SafeStyleSheet","~$goog.math.Box","~$goog.math.Coordinate","~$goog.math.Rect","~$goog.math.Size","^5;","~$goog.reflect","^53","~$goog.userAgent"]]],["^20","goog/array/array.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4N",["^ ","^4O",null,"^4P",["^J",[]],"^4Q",["^1>","^5>"]]],["~:shadow.build.js-support/require","moment"],["~$shadow.js.shim.module$moment","shadow.js.shim.module$moment.js","require","^4N",["^ ","^4O",null,"^4P",["^J",[]],"^4Q",["^1>"]]],["^5O","moment-timezone"],["~$shadow.js.shim.module$moment_timezone","shadow.js.shim.module$moment_timezone.js","require","^4N",["^ ","^4O",null,"^4P",["^J",[]],"^4Q",["^1>"]]],["^20","metabase/mbql/schema/macros.cljs"],["2af09bd42ffb1e15b66723cf7ba15db7dc75d10b","^4N",["^ ","^4O",null,"^4P",["^J",[]],"^4Q",["^1>","^C"]]],["^20","metabase/lib/schema/mbql_clause.cljc"],["e5bdd00c58db706b1219843528fd3cd9dd8ab728","^4N",["^ ","^4O",null,"^4P",["^J",[]],"^4Q",["^1>","^C","^15","^55","~$metabase.types","^Y","~$metabase.util.malli.registry"]]],["^20","goog/useragent/useragent.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4N",["^ ","^4O",null,"^4P",["^J",[]],"^4Q",["^1>","~$goog.labs.userAgent.browser","~$goog.labs.userAgent.engine","~$goog.labs.userAgent.platform","^4W","^5M","^4V"]]],["^20","malli/generator.cljc"],["514c6f7d69d7e40b56fa75bfd1a49a683ca15982","^4N",["^ ","^4O",null,"^4P",["^J",[]],"^4Q",["^1>","^C","^E","^4S","~$clojure.test.check","~$clojure.test.check.generators","~$clojure.test.check.properties","~$clojure.test.check.random","~$clojure.test.check.rose-tree","~$malli.core","~$malli.registry"]]],["^20","clojure/test/check/properties.cljc"],["f33d988fd57bc9c11af1952db81c10f319c91416","^4N",["^ ","^4O",null,"^4P",["^J",[]],"^4Q",["^1>","^C","^5X","~$clojure.test.check.results"]]],["^20","clojure/test/check/generators.cljc"],["f33d988fd57bc9c11af1952db81c10f319c91416","^4N",["^ ","^4O",null,"^4P",["^J",[]],"^4Q",["^1>","^C","^4S","^5Z","^5[","^53"]]],["^20","goog/debug/error.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4N",["^ ","^4O",null,"^4P",["^J",[]],"^4Q",["^1>"]]],["^20","metabase/lib/common.cljc"],["a3bc6343077ef13a3da77612b68f23f9b2a3d890","^4N",["^ ","^4O",null,"^4P",["^J",[]],"^4Q",["^1>","^C","^1I","^1C","^1A","^1<","^15","^Y"]]],["^20","metabase/lib/schema/util.cljc"],["14a9e8a90c56f5e44b4ecd361e962722fd97aecf","^4N",["^ ","^4O",null,"^4P",["^J",[]],"^4Q",["^1>","^C","^1A"]]],["^20","goog/flags/flags.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4N",["^ ","^4O",null,"^4P",["^J",[]],"^4Q",["^1>"]]],["^20","malli/util.cljc"],["514c6f7d69d7e40b56fa75bfd1a49a683ca15982","^4N",["^ ","^4O",null,"^4P",["^J",[]],"^4Q",["^1>","^C","^C","^60"]]],["^20","clojure/test/check/random/doubles.cljs"],["f33d988fd57bc9c11af1952db81c10f319c91416","^4N",["^ ","^4O",null,"^4P",["^J",[]],"^4Q",["^1>","^C","~$clojure.test.check.random.longs"]]],["^20","net/cgrand/macrovich.cljc"],["abcb26cbfe0f8eef363b25525210c0fe1eb1f693","^4N",["^ ","^4O",null,"^4P",["^J",[]],"^4Q",["^1>","^C"]]],["^20","malli/destructure.cljc"],["514c6f7d69d7e40b56fa75bfd1a49a683ca15982","^4N",["^ ","^4O",null,"^4P",["^J",[]],"^4Q",["^1>","^C","~$clojure.walk","^60","~$malli.impl.util"]]],["^20","schema/spec/variant.cljc"],["0dacc3066a87f33088c9a332b6c21e8b0560011c","^4N",["^ ","^4O",null,"^4P",["^J",[]],"^4Q",["^1>","^C","~$schema.utils","~$schema.spec.core"]]],["^20","goog/structs/circularbuffer.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4N",["^ ","^4O",null,"^4P",["^J",[]],"^4Q",["^1>"]]],["^20","weavejester/dependency.cljc"],["7fd7f8879313f6a7e295f7447e668bdf492c42c1","^4N",["^ ","^4O",null,"^4P",["^J",[]],"^4Q",["^1>","^C","^4["]]],["^20","metabase/lib/schema/common.cljc"],["3f51a06335a7cb84c835d859c422919499874414","^4N",["^ ","^4O",null,"^4P",["^J",[]],"^4Q",["^1>","^C","^4S","^5R","^5S"]]],["^20","goog/dom/nodetype.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4N",["^ ","^4O",null,"^4P",["^J",[]],"^4Q",["^1>"]]],["^20","goog/labs/useragent/highentropy/highentropyvalue.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4N",["^ ","^4O",null,"^4P",["^J",[]],"^4Q",["^1>","^4W","^4V"]]],["^20","cljs/pprint.cljs"],["bc14df6666853ed869d7b88aaa864111c65d0c7f","^4N",["^ ","^4O",null,"^4P",["^J",[]],"^4Q",["^1>","^C","^4S","^53","~$goog.string.StringBuffer"]]],["^20","metabase/lib/schema/template_tag.cljc"],["f1b6289b8e576857fe667aed3da134e4ad1ea26a","^4N",["^ ","^4O",null,"^4P",["^J",[]],"^4Q",["^1>","^C","^60","^15","^56","~$metabase.mbql.schema","^5S"]]],["^20","metabase/lib/schema/ref.cljc"],["5037a60b3d2f427702cf5cedf23f02bcc394d051","^4N",["^ ","^4O",null,"^4P",["^J",[]],"^4Q",["^1>","^C","^4S","^1I","^1C","^15","^55","^56","~$metabase.lib.schema.mbql-clause","~$metabase.lib.schema.temporal-bucketing","^5R","^5S"]]],["^20","clojure/test/check/rose_tree.cljc"],["f33d988fd57bc9c11af1952db81c10f319c91416","^4N",["^ ","^4O",null,"^4P",["^J",[]],"^4Q",["^1>","^C"]]],["^20","clojure/test/check/impl.cljc"],["f33d988fd57bc9c11af1952db81c10f319c91416","^4N",["^ ","^4O",null,"^4P",["^J",[]],"^4Q",["^1>","^C"]]],["^20","camel_snake_kebab/internals/string_separator.cljc"],["5ae08f83ceb8959971e6334596bff0214bf6fdf2","^4N",["^ ","^4O",null,"^4P",["^J",[]],"^4Q",["^1>","^C","^4S"]]],["^20","clojure/test/check/random.cljs"],["f33d988fd57bc9c11af1952db81c10f319c91416","^4N",["^ ","^4O",null,"^4P",["^J",[]],"^4Q",["^1>","^C","~$clojure.test.check.random.doubles","^63"]]],["^20","metabase/lib/schema/expression/arithmetic.cljc"],["e6936a3e0b11bc3cd40d4e396c708af4622c21cb","^4N",["^ ","^4O",null,"^4P",["^J",[]],"^4Q",["^1>","^C","^60","^1E","^1C","^15","^55","^6:","^6;","^5R","^5S"]]],["^20","goog/string/typedstring.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4N",["^ ","^4O",null,"^4P",["^J",[]],"^4Q",["^1>"]]],["^20","metabase/lib/schema/expression/string.cljc"],["b2d7de575aaaa880fdc88dfc31642c8e002c3669","^4N",["^ ","^4O",null,"^4P",["^J",[]],"^4Q",["^1>","^C","^55","^6:"]]],["^20","metabase/lib/types/constants.cljc"],["efb91045e39c9ec06192309589f82a778219a002","^4N",["^ ","^4O",null,"^4P",["^J",[]],"^4Q",["^1>","^C","^5;"]]],["^20","goog/object/object.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4N",["^ ","^4O",null,"^4P",["^J",[]],"^4Q",["^1>"]]],["^20","metabase/lib/schema/filter.cljc"],["0147dea423ebfd097bf1edb97f0325c9e2908a85","^4N",["^ ","^4O",null,"^4P",["^J",[]],"^4Q",["^1>","^C","^15","^55","^6:","^6;","^5S"]]],["^20","goog/dom/asserts.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4N",["^ ","^4O",null,"^4P",["^J",[]],"^4Q",["^1>","^5>"]]],"~:SHADOW-TIMESTAMP",[1689947046000,1689947046000,1689947050000],["^20","metabase/lib/ref.cljc"],["86a9fbeddec3e58f7bb54e61f5342658b370fb3b","^4N",["^ ","^4O",null,"^4P",["^J",[]],"^4Q",["^1>","^C","^1I","~$metabase.lib.schema.ref","^Y"]]],["^20","goog/math/long.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4N",["^ ","^4O",null,"^4P",["^J",[]],"^4Q",["^1>","^5>","^5M"]]],["^20","goog/html/trustedresourceurl.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4N",["^ ","^4O",null,"^4P",["^J",[]],"^4Q",["^1>","^5>","~$goog.fs.blob","^5?","~$goog.html.SafeScript","~$goog.html.trustedtypes","^5A","^5B"]]],["^20","schema/spec/leaf.cljc"],["0dacc3066a87f33088c9a332b6c21e8b0560011c","^4N",["^ ","^4O",null,"^4P",["^J",[]],"^4Q",["^1>","^C","^67"]]],["^20","metabase/util/format.cljc"],["875f86a08288cb3ad5a6f15df988897eaf8613af","^4N",["^ ","^4O",null,"^4P",["^J",[]],"^4Q",["^1>","^C","^53"]]],["^20","goog/math/irect.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4N",["^ ","^4O",null,"^4P",["^J",[]],"^4Q",["^1>"]]],["^20","goog/math/box.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4N",["^ ","^4O",null,"^4P",["^J",[]],"^4Q",["^1>","^5>","^5J"]]],["^20","metabase/lib/options.cljc"],["1870276153adf026e09a3e9ed1ba8beaad80e1c8","^4N",["^ ","^4O",null,"^4P",["^J",[]],"^4Q",["^1>","^C","^15","^13","^16","^Y"]]],["^20","goog/string/internal.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4N",["^ ","^4O",null,"^4P",["^J",[]],"^4Q",["^1>"]]],["^20","clojure/test/check.cljc"],["f33d988fd57bc9c11af1952db81c10f319c91416","^4N",["^ ","^4O",null,"^4P",["^J",[]],"^4Q",["^1>","^C","^5X","^5Z","^62","^5[","~$clojure.test.check.impl"]]],["^20","goog/functions/functions.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4N",["^ ","^4O",null,"^4P",["^J",[]],"^4Q",["^1>"]]],["^20","metabase/lib/metadata.cljc"],["a8652a185953ef0e0b1c77d5540a4aa7271c0c63","^4N",["^ ","^4O",null,"^4P",["^J",[]],"^4Q",["^1>","^C","~$metabase.lib.metadata.protocols","^15","^56","^1=","^Y","^5S"]]],["^20","goog/html/safestyle.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4N",["^ ","^4O",null,"^4P",["^J",[]],"^4Q",["^1>","^5A","~$goog.html.SafeUrl","^5B","^5>","^4V"]]],["^20","goog/dom/safe.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4N",["^ ","^4O",null,"^4P",["^J",[]],"^4Q",["^1>","^5>","~$goog.asserts.dom","~$goog.dom.asserts","~$goog.functions","~$goog.html.SafeHtml","^6@","~$goog.html.SafeStyle","^6D","^5@","~$goog.html.uncheckedconversions","^5A","^4V"]]],["^20","goog/asserts/dom.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4N",["^ ","^4O",null,"^4P",["^J",[]],"^4Q",["^1>","^5E","^5>","~$goog.dom.element"]]],["^20","medley/core.cljc"],["f5117fa4c15ff14c4a0ab7db414b0f102afb0b8a","^4N",["^ ","^4O",null,"^4P",["^J",[]],"^4Q",["^1>","^C"]]],["^20","clojure/walk.cljs"],["bc14df6666853ed869d7b88aaa864111c65d0c7f","^4N",["^ ","^4O",null,"^4P",["^J",[]],"^4Q",["^1>","^C"]]],["^20","metabase/lib/metadata/protocols.cljc"],["f5c81e2cab09f5dabb3cab711f7db1c5df1b398d","^4N",["^ ","^4O",null,"^4P",["^J",[]],"^4Q",["^1>","^C"]]],["^20","metabase/lib/schema/expression/conditional.cljc"],["226c4623394b90853fcb014e9a95e84ffc8bd6db","^4N",["^ ","^4O",null,"^4P",["^J",[]],"^4Q",["^1>","^C","^4[","^55","^6:","^5R","^5S"]]],["^20","lambdaisland/glogi/console.cljs"],["76286836d4172602aa08006b2a754dda736ffe09","^4N",["^ ","^4O",null,"^4P",["^J",[]],"^4Q",["^1>","^C","~$lambdaisland.glogi","~$lambdaisland.glogi.print","^5;","^59"]]],["^20","goog/html/safehtml.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4N",["^ ","^4O",null,"^4P",["^J",[]],"^4Q",["^1>","^5A","^6@","^6I","^5H","^6D","^5E","^5@","^5B","^5>","^5T","^5:","^5;","^4V","~$goog.dom.tags","^6A"]]],["^20","goog/dom/tags.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4N",["^ ","^4O",null,"^4P",["^J",[]],"^4Q",["^1>","^5;"]]],["^20","goog/math/size.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4N",["^ ","^4O",null,"^4P",["^J",[]],"^4Q",["^1>"]]],["^20","metabase/lib/temporal_bucket.cljc"],["22c08818f6579bd329ece9f6a337c75bf33381e2","^4N",["^ ","^4O",null,"^4P",["^J",[]],"^4Q",["^1>","^C","^4S","^1I","^1C","^Z","^W","^15","^6;","^13","^Y"]]],["^20","malli/error.cljc"],["514c6f7d69d7e40b56fa75bfd1a49a683ca15982","^4N",["^ ","^4O",null,"^4P",["^J",[]],"^4Q",["^1>","^C","^4S","^60","~$malli.util"]]],["^20","metabase/lib/dispatch.cljc"],["914208cd51b78412eff1b402519bbb422845497a","^4N",["^ ","^4O",null,"^4P",["^J",[]],"^4Q",["^1>","^C","^16"]]],["^20","metabase/util/malli.cljc"],["0f9ba23be6bb9fa629617001e985b988d2322b17","^4N",["^ ","^4O",null,"^4P",["^J",[]],"^4Q",["^1>","^C","^C","^60","~$malli.destructure","~$malli.error","~$malli.generator","^6O","^13","^16"]]],["^20","goog/labs/useragent/engine.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4N",["^ ","^4O",null,"^4P",["^J",[]],"^4Q",["^1>","^5:","^4V","^4W"]]],["^20","goog/fs/blob.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4N",["^ ","^4O",null,"^4P",["^J",[]],"^4Q",["^1>"]]],["^20","metabase/mbql/schema/helpers.cljc"],["b1f6002b97b59423b504abb666e13c9b0228b768","^4N",["^ ","^4O",null,"^4P",["^J",[]],"^4Q",["^1>","^C","^4S","^5R","~$schema.core"]]],["^20","goog/dom/dom.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4N",["^ ","^4O",null,"^4P",["^J",[]],"^4Q",["^1>","^5:","^5>","^6E","~$goog.dom.BrowserFeature","^5D","^5E","^5F","^6H","^6J","^5J","^5L","^5;","^53","^5A","~$goog.string.Unicode","^5N"]]],["^20","borkdude/dynaload.cljc"],["accd696ba364b850b4d92e38f5a34d0e828a0ad1","^4N",["^ ","^4O",null,"^4P",["^J",[]],"^4Q",["^1>","^C"]]],["^20","metabase/util/log.cljs"],["7d8a3bf01eb27c2ba7269dc90dc218e46bcc1d3a","^4N",["^ ","^4O",null,"^4P",["^J",[]],"^4Q",["^1>","^C","^58","^53","^54","^6L","~$lambdaisland.glogi.console"]]],["^20","goog/asserts/asserts.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4N",["^ ","^4O",null,"^4P",["^J",[]],"^4Q",["^1>","~$goog.debug.Error","^5D"]]],["^20","goog/debug/relativetimeprovider.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4N",["^ ","^4O",null,"^4P",["^J",[]],"^4Q",["^1>"]]],["^20","malli/sci.cljc"],["514c6f7d69d7e40b56fa75bfd1a49a683ca15982","^4N",["^ ","^4O",null,"^4P",["^J",[]],"^4Q",["^1>","^C","~$borkdude.dynaload"]]],["^20","metabase/lib/schema/expression.cljc"],["f5c5c3ff3dc0f9a8b407cd7d06a68c6787061991","^4N",["^ ","^4O",null,"^4P",["^J",[]],"^4Q",["^1>","^C","^1I","^1C","^15","^13","^5R","^Y","^5S"]]],["^20","goog/math/rect.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4N",["^ ","^4O",null,"^4P",["^J",[]],"^4Q",["^1>","^5>","^5I","^5J","~$goog.math.IRect","^5L"]]],["^20","flatland/ordered/map.cljs"],["3a9cb9d79e47d77ecd4f4d550371ecf01464c461","^4N",["^ ","^4O",null,"^4P",["^J",[]],"^4Q",["^1>","^C"]]],["^20","goog/uri/uri.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4N",["^ ","^4O",null,"^4P",["^J",[]],"^4Q",["^1>","^5:","^5>","~$goog.collections.maps","^53","~$goog.structs","~$goog.uri.utils","~$goog.uri.utils.ComponentIndex","~$goog.uri.utils.StandardQueryParam"]]],["^20","metabase/util/malli/registry.cljc"],["921d4f259bbe54cbeb6b88ae56937df492bdfb5e","^4N",["^ ","^4O",null,"^4P",["^J",[]],"^4Q",["^1>","^C","^60","^61","^6O"]]],["^20","goog/labs/useragent/highentropy/highentropydata.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4N",["^ ","^4O",null,"^4P",["^J",[]],"^4Q",["^1>","^4X"]]],["^20","metabase/types/coercion_hierarchies.cljc"],["c3d70ef6080e044d61f13ff6bfd76490e2dcd0ac","^4N",["^ ","^4O",null,"^4P",["^J",[]],"^4Q",["^1>","^C","^4["]]],["^20","goog/collections/maps.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4N",["^ ","^4O",null,"^4P",["^J",[]],"^4Q",["^1>"]]],["^20","metabase/lib/metadata/calculation.cljc"],["bbd3cc646a10312da5b543d7d353519f4c61f931","^4N",["^ ","^4O",null,"^4P",["^J",[]],"^4Q",["^1>","^C","^4S","^1I","^1C","^10","^1A","^W","^15","^55","^6;","^1=","^13","^16","~$metabase.util.log","^Y","^5S"]]],["^20","goog/debug/divconsole.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4N",["^ ","^4O",null,"^4P",["^J",[]],"^4Q",["^1>","~$goog.debug.HtmlFormatter","~$goog.dom.DomHelper","^5E","^5F","^6H","^5H","^58","^5A","~$goog.style"]]],["^20","schema/spec/collection.cljc"],["0dacc3066a87f33088c9a332b6c21e8b0560011c","^4N",["^ ","^4O",null,"^4P",["^J",[]],"^4Q",["^1>","^C","^66","^67"]]],["^20","malli/impl/util.cljc"],["514c6f7d69d7e40b56fa75bfd1a49a683ca15982","^4N",["^ ","^4O",null,"^4P",["^J",[]],"^4Q",["^1>","^C"]]],["^20","metabase/lib/schema/order_by.cljc"],["3f577f71e4ecba1aa1061f2228f6026ab45312ff","^4N",["^ ","^4O",null,"^4P",["^J",[]],"^4Q",["^1>","^C","^55","^6:","^5S"]]],["^20","schema/utils.cljc"],["0dacc3066a87f33088c9a332b6c21e8b0560011c","^4N",["^ ","^4O",null,"^4P",["^J",[]],"^4Q",["^1>","^C","^54","^5;","^53","^4S"]]],["^20","metabase/lib/schema/aggregation.cljc"],["ea4a70903cfc3ffeaa60ebdedb5ea00892da4dbe","^4N",["^ ","^4O",null,"^4P",["^J",[]],"^4Q",["^1>","^C","^1C","^55","^6:","^13","^5S"]]],["^20","cljs/core/match.cljs"],["f419c02deee501e9f4b29f81215ba81ffcefe9b6","^4N",["^ ","^4O",null,"^4P",["^J",[]],"^4Q",["^1>","^C"]]],["^20","goog/debug/fancywindow.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4N",["^ ","^4O",null,"^4P",["^J",[]],"^4Q",["^1>","^5:","^5>","~$goog.debug.DebugWindow","^75","^5E","^5F","^6H","^5H","^58","^5;","^53","^5A","^5N"]]],["^20","goog/debug/formatter.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4N",["^ ","^4O",null,"^4P",["^J",[]],"^4Q",["^1>","~$goog.debug","~$goog.debug.RelativeTimeProvider","^6H","^6D","^6J","^58","^5A"]]],["^20","metabase/shared/util/namespaces.cljs"],["00687008abd6eb291bc9d5ff1fff73210e0bbe6e","^4N",["^ ","^4O",null,"^4P",["^J",[]],"^4Q",["^1>","^C"]]],["^20","metabase/mbql/util/match/impl.cljc"],["4150e01975339d308f5cfedda77875eda19c030d","^4N",["^ ","^4O",null,"^4P",["^J",[]],"^4Q",["^1>","^C"]]],["^20","goog/fs/url.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4N",["^ ","^4O",null,"^4P",["^J",[]],"^4Q",["^1>"]]],["^20","goog/base.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4N",["^ ","^4O",null,"^4P",["^J",[]],"^4Q",[]]],["^20","goog/structs/structs.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4N",["^ ","^4O",null,"^4P",["^J",[]],"^4Q",["^1>","^5:","^5;"]]],["^20","clojure/string.cljs"],["bc14df6666853ed869d7b88aaa864111c65d0c7f","^4N",["^ ","^4O",null,"^4P",["^J",[]],"^4Q",["^1>","^C","^53","^68"]]],["^20","metabase/lib/schema/temporal_bucketing.cljc"],["9cb7bba3e46e1de2fbb37d61df332336da6d9f66","^4N",["^ ","^4O",null,"^4P",["^J",[]],"^4Q",["^1>","^C","^4[","^5S"]]],["^20","metabase/util.cljc"],["2eb945a6741f1450ecac08a9087b862ce52b9e3a","^4N",["^ ","^4O",null,"^4P",["^J",[]],"^4Q",["^1>","^C","~$camel-snake-kebab.internals.macros","~$clojure.data","^?","^4[","^4S","^64","~$flatland.ordered.map","^1E","^13","~$metabase.shared.util.namespaces","~$metabase.util.format","^73","~$net.cgrand.macrovich","~$weavejester.dependency"]]],["^20","clojure/test/check/random/longs/bit_count_impl.cljs"],["f33d988fd57bc9c11af1952db81c10f319c91416","^4N",["^ ","^4O",null,"^4P",["^J",[]],"^4Q",["^1>","^C"]]],["^20","malli/impl/regex.cljc"],["514c6f7d69d7e40b56fa75bfd1a49a683ca15982","^4N",["^ ","^4O",null,"^4P",["^J",[]],"^4Q",["^1>","^C","^65"]]],["^20","camel_snake_kebab/internals/macros.cljc"],["5ae08f83ceb8959971e6334596bff0214bf6fdf2","^4N",["^ ","^4O",null,"^4P",["^J",[]],"^4Q",["^1>","^C","~$camel-snake-kebab.internals.alter-name","~$camel-snake-kebab.internals.misc"]]],["^20","metabase/lib/schema/expression/temporal.cljc"],["f1f22c1655e7d335b884a22b010f2b8b08ad1e94","^4N",["^ ","^4O",null,"^4P",["^J",[]],"^4Q",["^1>","^C","^4[","^60","^1C","^15","^55","~$metabase.lib.schema.literal","^6:","^6;","^5S","^5P","^5Q"]]],["^20","goog/string/string.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4N",["^ ","^4O",null,"^4P",["^J",[]],"^4Q",["^1>","^5F","^6J","^5A","^4V"]]],["^20","schema/core.cljc"],["0dacc3066a87f33088c9a332b6c21e8b0560011c","^4N",["^ ","^4O",null,"^4P",["^J",[]],"^4Q",["^1>","^C","^4S","^66","^67","~$schema.spec.leaf","~$schema.spec.variant","~$schema.spec.collection"]]],["^20","metabase/mbql/schema.cljc"],["c51bf2a180ecbc12d6a1cd42a4049323f46a0085","^4N",["^ ","^4O",null,"^4P",["^J",[]],"^4Q",["^1>","^C","^5P","^5Q","^C","^4[","~$metabase.mbql.schema.helpers","~$metabase.mbql.schema.macros","^6S"]]],["^20","metabase/mbql/util/match.cljs"],["d65aaa9fbcb7960b90ba7ca97258b1dc8a40be2b","^4N",["^ ","^4O",null,"^4P",["^J",[]],"^4Q",["^1>","^C","^G","~$metabase.mbql.util.match.impl"]]],["^20","malli/core.cljc"],["514c6f7d69d7e40b56fa75bfd1a49a683ca15982","^4N",["^ ","^4O",null,"^4P",["^J",[]],"^4Q",["^1>","^C","^C","~$malli.impl.regex","^65","^61","~$malli.sci"]]],["^20","metabase/lib/schema.cljc"],["122fe4013d55087fc7287141eb7dc6f630436424","^4N",["^ ","^4O",null,"^4P",["^J",[]],"^4Q",["^1>","^C","^18","^15","^55","~$metabase.lib.schema.expression.arithmetic","~$metabase.lib.schema.expression.conditional","~$metabase.lib.schema.expression.string","~$metabase.lib.schema.expression.temporal","~$metabase.lib.schema.filter","^56","~$metabase.lib.schema.join","^7C","~$metabase.lib.schema.order-by","^6>","~$metabase.lib.schema.template-tag","~$metabase.lib.schema.util","~$metabase.mbql.util.match","^5S"]]],["^20","clojure/data.cljs"],["bc14df6666853ed869d7b88aaa864111c65d0c7f","^4N",["^ ","^4O",null,"^4P",["^J",[]],"^4Q",["^1>","^C","^4["]]],["^20","goog/reflect/reflect.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4N",["^ ","^4O",null,"^4P",["^J",[]],"^4Q",["^1>"]]],["^20","goog/labs/useragent/util.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4N",["^ ","^4O",null,"^4P",["^J",[]],"^4Q",["^1>","^4V","^4Z"]]],["^20","goog/debug/debug.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4N",["^ ","^4O",null,"^4P",["^J",[]],"^4Q",["^1>","^5:","~$goog.debug.errorcontext"]]],["^20","goog/string/stringbuffer.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4N",["^ ","^4O",null,"^4P",["^J",[]],"^4Q",["^1>"]]],["^20","schema/spec/core.cljc"],["0dacc3066a87f33088c9a332b6c21e8b0560011c","^4N",["^ ","^4O",null,"^4P",["^J",[]],"^4Q",["^1>","^C","^66"]]],["^5O","ttag"],["^4U","shadow.js.shim.module$ttag.js","require","^4N",["^ ","^4O",null,"^4P",["^J",[]],"^4Q",["^1>"]]],["^20","goog/math/coordinate.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4N",["^ ","^4O",null,"^4P",["^J",[]],"^4Q",["^1>","~$goog.math"]]],["^20","goog/debug/errorcontext.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4N",["^ ","^4O",null,"^4P",["^J",[]],"^4Q",["^1>"]]],["^20","goog/labs/useragent/useragent.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4N",["^ ","^4O",null,"^4P",["^J",[]],"^4Q",["^1>","~$goog.flags"]]],["^20","goog/dom/element.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4N",["^ ","^4O",null,"^4P",["^J",[]],"^4Q",["^1>","^5D","^5E"]]],["^20","goog/html/uncheckedconversions.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4N",["^ ","^4O",null,"^4P",["^J",[]],"^4Q",["^1>","^5>","^6H","^6@","^6I","^5H","^6D","^5@","^5A","^4V"]]],["^20","metabase/lib/aggregation.cljc"],["69e5afb14bf9268c61c5028c24d98c80e02109fa","^4N",["^ ","^4O",null,"^4P",["^J",[]],"^4Q",["^1>","^C","^1E","^1;","^1I","^[","^1C","^10","^Z","^1A","^1<","^W","^18","^15","^1D","^1J","^1=","^13","^16","^Y"]]],["^20","goog/debug/debugwindow.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4N",["^ ","^4O",null,"^4P",["^J",[]],"^4Q",["^1>","^74","^5F","^6H","^5H","^58","^5A","~$goog.structs.CircularBuffer","^5N"]]],["^20","metabase/mbql/util.cljc"],["2532d5faa94d2a89dd06e529c641d594e298e2aa","^4N",["^ ","^4O",null,"^4P",["^J",[]],"^4Q",["^1>","^C","^4S","~$metabase.mbql.predicates","^69","^7G","^7U","^13","^6S"]]],["^20","metabase/lib/types/isa.cljc"],["e18ef4b76ca36474693ff48f933bf55296452722","^4N",["^ ","^4O",null,"^4P",["^J",[]],"^4Q",["^1>","^C","^1E","~$metabase.lib.types.constants","^1=","^5R"]]],["^20","goog/dom/htmlelement.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4N",["^ ","^4O",null,"^4P",["^J",[]],"^4Q",["^1>"]]],["^20","cljs/core.cljs"],["bc14df6666853ed869d7b88aaa864111c65d0c7f","^4N",["^ ","^4O",null,"^4P",["^J",[]],"^4Q",["^1>","~$goog.math.Long","~$goog.math.Integer","^53","^5;","^5:","^51","^68"]]],["^20","goog/html/safescript.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4N",["^ ","^4O",null,"^4P",["^J",[]],"^4Q",["^1>","^5A","^5B","^6A","^5>"]]],["^20","clojure/test/check/random/longs.cljs"],["f33d988fd57bc9c11af1952db81c10f319c91416","^4N",["^ ","^4O",null,"^4P",["^J",[]],"^4Q",["^1>","^C","~$clojure.test.check.random.longs.bit-count-impl","^80","^C"]]],["^20","goog/log/log.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4N",["^ ","^4O",null,"^4P",["^J",[]],"^4Q",["^1>","^5>","^78"]]],["^20","camel_snake_kebab/internals/alter_name.cljc"],["5ae08f83ceb8959971e6334596bff0214bf6fdf2","^4N",["^ ","^4O",null,"^4P",["^J",[]],"^4Q",["^1>","^C"]]],["^20","goog/html/safestylesheet.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4N",["^ ","^4O",null,"^4P",["^J",[]],"^4Q",["^1>","^5A","^6I","^5B","^5;","^5>","^4V"]]],["^20","goog/math/integer.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4N",["^ ","^4O",null,"^4P",["^J",[]],"^4Q",["^1>","^5M"]]],["^20","goog/debug/console.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4N",["^ ","^4O",null,"^4P",["^J",[]],"^4Q",["^1>","~$goog.debug.TextFormatter","^58"]]],["^20","lambdaisland/glogi/print.cljs"],["76286836d4172602aa08006b2a754dda736ffe09","^4N",["^ ","^4O",null,"^4P",["^J",[]],"^4Q",["^1>","^C","^6L","^5;"]]],["^20","goog/dom/browserfeature.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4N",["^ ","^4O",null,"^4P",["^J",[]],"^4Q",["^1>","^5N"]]],["^20","clojure/set.cljs"],["bc14df6666853ed869d7b88aaa864111c65d0c7f","^4N",["^ ","^4O",null,"^4P",["^J",[]],"^4Q",["^1>","^C"]]],["^20","goog/uri/utils.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4N",["^ ","^4O",null,"^4P",["^J",[]],"^4Q",["^1>","^5>","^53"]]],["^20","goog/string/const.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4N",["^ ","^4O",null,"^4P",["^J",[]],"^4Q",["^1>","^5>","^5B"]]],["^20","metabase/lib/schema/id.cljc"],["7cdfc70702a9a9e04b75ca7c9dc898ddf546f99d","^4N",["^ ","^4O",null,"^4P",["^J",[]],"^4Q",["^1>","^C","^15","^69","^5S"]]],["^20","metabase/lib/equality.cljc"],["09e4ca6749d64c174c277a2b16f7ad15b5cf6870","^4N",["^ ","^4O",null,"^4P",["^J",[]],"^4Q",["^1>","^C","^1E","^1I","^1C","^10","^1A","^1=","^7U"]]],["^20","goog/dom/vendor.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4N",["^ ","^4O",null,"^4P",["^J",[]],"^4Q",["^1>","^53","^5N"]]],["^20","metabase/lib/schema/literal.cljc"],["f8f31bfaef820ab25b896b49fd404b937d0df64e","^4N",["^ ","^4O",null,"^4P",["^J",[]],"^4Q",["^1>","^C","^60","^15","^55","^6:","^5S"]]],["^20","metabase/lib/hierarchy.cljc"],["c9d228603522de5c85546fb645c59736d4eb94d2","^4N",["^ ","^4O",null,"^4P",["^J",[]],"^4Q",["^1>","^C"]]],["^20","metabase/mbql/predicates.cljc"],["20ab1a5ccd943c35c646c5f7396ea40f9bfa7ac4","^4N",["^ ","^4O",null,"^4P",["^J",[]],"^4Q",["^1>","^C","^69","^6S"]]],["^20","clojure/test/check/results.cljc"],["f33d988fd57bc9c11af1952db81c10f319c91416","^4N",["^ ","^4O",null,"^4P",["^J",[]],"^4Q",["^1>","^C"]]],["^5O","crc-32"],["^52","shadow.js.shim.module$crc_32.js","require","^4N",["^ ","^4O",null,"^4P",["^J",[]],"^4Q",["^1>"]]],["^20","metabase/lib/schema/join.cljc"],["924e0ca4abbab776fa05357d6d22bafb8a596648","^4N",["^ ","^4O",null,"^4P",["^J",[]],"^4Q",["^1>","^C","^15","^55","^13","^5S"]]]]],"~:clj-info",["^ ","jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/analyzer/impl.cljc",1689947050000,"jar:file:/root/.m2/repository/instaparse/instaparse/1.4.12/instaparse-1.4.12.jar!/instaparse/line_col.clj",1689946146000,"jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/source_map/base64_vlq.clj",1689947050000,"jar:file:/root/.m2/repository/instaparse/instaparse/1.4.12/instaparse-1.4.12.jar!/instaparse/viz.clj",1689946146000,"jar:file:/root/.m2/repository/org/clojure/tools.namespace/1.4.4/tools.namespace-1.4.4.jar!/clojure/tools/namespace/parse.cljc",1689946139000,"jar:file:/root/.m2/repository/weavejester/dependency/0.2.1/dependency-0.2.1.jar!/weavejester/dependency.cljc",1689946093000,"jar:file:/root/.m2/repository/instaparse/instaparse/1.4.12/instaparse-1.4.12.jar!/instaparse/transform.clj",1689946146000,"jar:file:/root/.m2/repository/ring/ring-codec/1.2.0/ring-codec-1.2.0.jar!/ring/util/codec.clj",1689946172000,"file:/home/gmrworkspace/dashboard/src/metabase/lib/hierarchy.cljc",1690286812000,"jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/instant.clj",1689947050000,"jar:file:/root/.m2/repository/org/clojure/tools.reader/1.3.6/tools.reader-1.3.6.jar!/clojure/tools/reader/default_data_readers.clj",1689946174000,"jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/pprint.cljc",1689947050000,"jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/externs.clj",1689947050000,"file:/home/gmrworkspace/dashboard/shared/src/metabase/mbql/util/match.clj",1690286812000,"jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/vendor/clojure/tools/reader/default_data_readers.clj",1689947050000,"file:/home/gmrworkspace/dashboard/shared/src/metabase/mbql/schema/helpers.cljc",1692013156305,"jar:file:/root/.m2/repository/prismatic/schema/1.4.1/schema-1.4.1.jar!/schema/core.cljc",1689946172000,"file:/home/gmrworkspace/dashboard/shared/src/metabase/shared/util/i18n.clj",1690286812000,"jar:file:/root/.m2/repository/org/clojure/tools.reader/1.3.6/tools.reader-1.3.6.jar!/clojure/tools/reader/edn.clj",1689946174000,"jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/compiler.cljc",1689947050000,"jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/env.cljc",1689947050000,"jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/analyzer/impl/namespaces.cljc",1689947050000,"jar:file:/root/.m2/repository/prismatic/schema/1.4.1/schema-1.4.1.jar!/schema/macros.clj",1689946172000,"file:/home/gmrworkspace/dashboard/src/metabase/util/i18n/plural.clj",1690286813000,"jar:file:/root/.m2/repository/metosin/malli/0.10.2/malli-0.10.2.jar!/malli/core.cljc",1689946170000,"jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/source_map.clj",1689947050000,"jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/util.cljc",1689947050000,"file:/home/gmrworkspace/dashboard/src/metabase/util.cljc",1690286813000,"jar:file:/root/.m2/repository/nano-id/nano-id/1.0.0/nano-id-1.0.0.jar!/nano_id/core.cljc",1689946171000,"file:/home/gmrworkspace/dashboard/src/metabase/lib/dispatch.cljc",1690286812000,"file:/home/gmrworkspace/dashboard/src/metabase/lib/schema/common.cljc",1690286812000,"file:/home/gmrworkspace/dashboard/src/metabase/plugins/classloader.clj",1692013156125,"jar:file:/root/.m2/repository/medley/medley/1.4.0/medley-1.4.0.jar!/medley/core.cljc",1689946185000,"jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/analyzer.cljc",1689947050000,"jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/analyzer/passes.cljc",1689947050000,"jar:file:/root/.m2/repository/org/clojure/test.check/1.1.1/test.check-1.1.1.jar!/clojure/test/check/random.clj",1689946177000,"jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/vendor/clojure/data/json.clj",1689947050000,"file:/home/gmrworkspace/dashboard/src/metabase/util/format.cljc",1690286813000,"jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/source_map/base64.clj",1689947050000,"jar:file:/root/.m2/repository/riddley/riddley/0.2.0/riddley-0.2.0.jar!/riddley/walk.clj",1689946160000,"file:/home/gmrworkspace/dashboard/src/metabase/lib/schema/ref.cljc",1690286812000,"jar:file:/root/.m2/repository/instaparse/instaparse/1.4.12/instaparse-1.4.12.jar!/instaparse/reduction.clj",1689946146000,"jar:file:/root/.m2/repository/org/tcrawley/dynapath/1.1.0/dynapath-1.1.0.jar!/dynapath/util.clj",1689946174000,"jar:file:/root/.m2/repository/camel-snake-kebab/camel-snake-kebab/0.4.3/camel-snake-kebab-0.4.3.jar!/camel_snake_kebab/internals/macros.cljc",1689946178000,"file:/home/gmrworkspace/dashboard/shared/src/metabase/mbql/util/match/impl.cljc",1690286812000,"jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/vendor/clojure/tools/reader/reader_types.clj",1689947050000,"jar:file:/root/.m2/repository/instaparse/instaparse/1.4.12/instaparse-1.4.12.jar!/instaparse/auto_flatten_seq.clj",1689946146000,"jar:file:/root/.m2/repository/instaparse/instaparse/1.4.12/instaparse-1.4.12.jar!/instaparse/core.clj",1689946146000,"jar:file:/root/.m2/repository/metosin/malli/0.10.2/malli-0.10.2.jar!/malli/generator.cljc",1689946170000,"file:/home/gmrworkspace/dashboard/src/metabase/lib/schema/id.cljc",1690286812000,"jar:file:/root/.m2/repository/org/clojure/core.cache/1.0.225/core.cache-1.0.225.jar!/clojure/core/cache.clj",1689946183000,"file:/home/gmrworkspace/dashboard/src/metabase/lib/schema/expression.cljc",1690286812000,"jar:file:/root/.m2/repository/metosin/malli/0.10.2/malli-0.10.2.jar!/malli/sci.cljc",1689946170000,"jar:file:/root/.m2/repository/potemkin/potemkin/0.4.6/potemkin-0.4.6.jar!/potemkin/types.clj",1689946176000,"jar:file:/root/.m2/repository/org/clojure/test.check/1.1.1/test.check-1.1.1.jar!/clojure/test/check/properties.cljc",1689946177000,"jar:file:/root/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/set.clj",1689946092000,"jar:file:/root/.m2/repository/org/clojure/math.numeric-tower/0.0.5/math.numeric-tower-0.0.5.jar!/clojure/math/numeric_tower.clj",1689946148000,"jar:file:/root/.m2/repository/net/cgrand/macrovich/0.2.1/macrovich-0.2.1.jar!/net/cgrand/macrovich.cljc",1689946165000,"jar:file:/root/.m2/repository/colorize/colorize/0.1.1/colorize-0.1.1.jar!/colorize/core.clj",1689946104000,"jar:file:/root/.m2/repository/borkdude/dynaload/0.3.5/dynaload-0.3.5.jar!/borkdude/dynaload.cljc",1689946165000,"jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/vendor/clojure/tools/reader/impl/inspect.clj",1689947050000,"file:/home/gmrworkspace/dashboard/src/metabase/lib/options.cljc",1692013156125,"jar:file:/root/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/string.clj",1689946092000,"jar:file:/root/.m2/repository/potemkin/potemkin/0.4.6/potemkin-0.4.6.jar!/potemkin.clj",1689946176000,"jar:file:/root/.m2/repository/instaparse/instaparse/1.4.12/instaparse-1.4.12.jar!/instaparse/failure.clj",1689946146000,"jar:file:/root/.m2/repository/prismatic/schema/1.4.1/schema-1.4.1.jar!/schema/spec/variant.cljc",1689946172000,"jar:file:/root/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/core.clj",1689946092000,"file:/home/gmrworkspace/dashboard/src/metabase/util/i18n/impl.clj",1692013156125,"jar:file:/root/.m2/repository/org/clojure/tools.namespace/1.4.4/tools.namespace-1.4.4.jar!/clojure/tools/namespace/dependency.cljc",1689946139000,"jar:file:/root/.m2/repository/prismatic/schema/1.4.1/schema-1.4.1.jar!/schema/spec/leaf.cljc",1689946172000,"jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/analyzer/passes/and_or.cljc",1689947050000,"jar:file:/root/.m2/repository/org/clojure/test.check/1.1.1/test.check-1.1.1.jar!/clojure/test/check.cljc",1689946177000,"jar:file:/root/.m2/repository/riddley/riddley/0.2.0/riddley-0.2.0.jar!/riddley/compiler.clj",1689946160000,"jar:file:/root/.m2/repository/org/clojure/core.memoize/1.0.257/core.memoize-1.0.257.jar!/clojure/core/memoize.clj",1689946178000,"jar:file:/root/.m2/repository/metosin/malli/0.10.2/malli-0.10.2.jar!/malli/destructure.cljc",1689946170000,"jar:file:/root/.m2/repository/instaparse/instaparse/1.4.12/instaparse-1.4.12.jar!/instaparse/print.clj",1689946146000,"jar:file:/root/.m2/repository/org/clojure/tools.namespace/1.4.4/tools.namespace-1.4.4.jar!/clojure/tools/namespace/track.cljc",1689946139000,"jar:file:/root/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/pprint.clj",1689946092000,"jar:file:/root/.m2/repository/org/clojure/java.classpath/1.0.0/java.classpath-1.0.0.jar!/clojure/java/classpath.clj",1689946162000,"jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/js_deps.cljc",1689947050000,"jar:file:/root/.m2/repository/metosin/malli/0.10.2/malli-0.10.2.jar!/malli/impl/regex.cljc",1689946170000,"jar:file:/root/.m2/repository/cheshire/cheshire/5.11.0/cheshire-5.11.0.jar!/cheshire/factory.clj",1689946173000,"jar:file:/root/.m2/repository/org/clojure/tools.reader/1.3.6/tools.reader-1.3.6.jar!/clojure/tools/reader/impl/errors.clj",1689946174000,"jar:file:/root/.m2/repository/metosin/malli/0.10.2/malli-0.10.2.jar!/malli/experimental.cljc",1689946170000,"jar:file:/root/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/walk.clj",1689946092000,"jar:file:/root/.m2/repository/org/clojure/tools.reader/1.3.6/tools.reader-1.3.6.jar!/clojure/tools/reader.clj",1689946174000,"file:/home/gmrworkspace/dashboard/src/metabase/lib/common.cljc",1690286812000,"jar:file:/root/.m2/repository/prismatic/schema/1.4.1/schema-1.4.1.jar!/schema/spec/core.cljc",1689946172000,"jar:file:/root/.m2/repository/org/clojure/test.check/1.1.1/test.check-1.1.1.jar!/clojure/test/check/generators.cljc",1689946177000,"jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/core.cljc",1689947050000,"jar:file:/root/.m2/repository/cheshire/cheshire/5.11.0/cheshire-5.11.0.jar!/cheshire/generate.clj",1689946173000,"jar:file:/root/.m2/repository/metosin/malli/0.10.2/malli-0.10.2.jar!/malli/experimental/time.cljc",1689946170000,"jar:file:/root/.m2/repository/org/clojure/tools.reader/1.3.6/tools.reader-1.3.6.jar!/clojure/tools/reader/reader_types.clj",1689946174000,"file:/home/gmrworkspace/dashboard/shared/src/metabase/mbql/schema.cljc",1692013156305,"jar:file:/root/.m2/repository/cheshire/cheshire/5.11.0/cheshire-5.11.0.jar!/cheshire/parse.clj",1689946173000,"file:/home/gmrworkspace/dashboard/src/metabase/util/i18n.clj",1692013156125,"jar:file:/root/.m2/repository/instaparse/instaparse/1.4.12/instaparse-1.4.12.jar!/instaparse/cfg.clj",1689946146000,"jar:file:/root/.m2/repository/cheshire/cheshire/5.11.0/cheshire-5.11.0.jar!/cheshire/core.clj",1689946173000,"jar:file:/root/.m2/repository/metosin/malli/0.10.2/malli-0.10.2.jar!/malli/impl/util.cljc",1689946170000,"jar:file:/root/.m2/repository/metosin/malli/0.10.2/malli-0.10.2.jar!/malli/registry.cljc",1689946170000,"jar:file:/root/.m2/repository/instaparse/instaparse/1.4.12/instaparse-1.4.12.jar!/instaparse/gll.clj",1689946146000,"jar:file:/root/.m2/repository/binaryage/devtools/1.0.6/devtools-1.0.6.jar!/devtools/defaults.clj",1689947054000,"jar:file:/root/.m2/repository/metosin/malli/0.10.2/malli-0.10.2.jar!/malli/instrument.clj",1689946170000,"jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/vendor/clojure/tools/reader.clj",1689947050000,"jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/spec/gen/alpha.cljc",1689947050000,"file:/home/gmrworkspace/dashboard/src/metabase/lib/ref.cljc",1690286812000,"jar:file:/root/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/edn.clj",1689946092000,"jar:file:/root/.m2/repository/nano-id/nano-id/1.0.0/nano-id-1.0.0.jar!/nano_id/random.cljc",1689946171000,"jar:file:/root/.m2/repository/environ/environ/1.2.0/environ-1.2.0.jar!/environ/core.cljc",1689946163000,"jar:file:/root/.m2/repository/prismatic/schema/1.4.1/schema-1.4.1.jar!/schema/spec/collection.cljc",1689946172000,"jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/vendor/clojure/tools/reader/impl/errors.clj",1689947050000,"jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/tagged_literals.cljc",1689947050000,"jar:file:/root/.m2/repository/instaparse/instaparse/1.4.12/instaparse-1.4.12.jar!/instaparse/repeat.clj",1689946146000,"jar:file:/root/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/java/io.clj",1689946092000,"jar:file:/root/.m2/repository/org/clojure/test.check/1.1.1/test.check-1.1.1.jar!/clojure/test/check/results.cljc",1689946177000,"jar:file:/root/.m2/repository/com/lambdaisland/glogi/1.2.164/glogi-1.2.164.jar!/lambdaisland/glogi.clj",1689947043000,"jar:file:/root/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/instant.clj",1689946092000,"file:/home/gmrworkspace/dashboard/shared/src/metabase/shared/util/namespaces.clj",1690286812000,"jar:file:/root/.m2/repository/org/clojure/tools.namespace/1.4.4/tools.namespace-1.4.4.jar!/clojure/tools/namespace/file.clj",1689946139000,"jar:file:/root/.m2/repository/org/clojure/core.match/1.0.1/core.match-1.0.1.jar!/cljs/core/match.clj",1689946174000,"jar:file:/root/.m2/repository/org/clojure/spec.alpha/0.3.218/spec.alpha-0.3.218.jar!/clojure/spec/gen/alpha.clj",1689946117000,"jar:file:/root/.m2/repository/metosin/malli/0.10.2/malli-0.10.2.jar!/malli/error.cljc",1689946170000,"file:/home/gmrworkspace/dashboard/shared/src/metabase/mbql/schema/macros.clj",1690286812000,"jar:file:/root/.m2/repository/prismatic/schema/1.4.1/schema-1.4.1.jar!/schema/utils.cljc",1689946172000,"file:/home/gmrworkspace/dashboard/src/metabase/util/malli/registry.cljc",1690286813000,"file:/home/gmrworkspace/dashboard/src/metabase/config.clj",1692013154929,"file:/home/gmrworkspace/dashboard/src/metabase/util/log.clj",1690286813000,"file:/home/gmrworkspace/dashboard/src/metabase/util/malli.cljc",1690286813000,"jar:file:/root/.m2/repository/org/clojure/test.check/1.1.1/test.check-1.1.1.jar!/clojure/test/check/rose_tree.cljc",1689946177000,"jar:file:/root/.m2/repository/org/clojure/tools.reader/1.3.6/tools.reader-1.3.6.jar!/clojure/tools/reader/impl/inspect.clj",1689946174000,"jar:file:/root/.m2/repository/instaparse/instaparse/1.4.12/instaparse-1.4.12.jar!/instaparse/combinators_source.clj",1689946146000,"jar:file:/root/.m2/repository/instaparse/instaparse/1.4.12/instaparse-1.4.12.jar!/instaparse/abnf.clj",1689946146000,"jar:file:/root/.m2/repository/org/clojure/tools.namespace/1.4.4/tools.namespace-1.4.4.jar!/clojure/tools/namespace/find.clj",1689946139000,"jar:file:/root/.m2/repository/org/tcrawley/dynapath/1.1.0/dynapath-1.1.0.jar!/dynapath/dynamic_classpath.clj",1689946174000,"file:/home/gmrworkspace/dashboard/src/metabase/lib/schema/temporal_bucketing.cljc",1690286812000,"jar:file:/root/.m2/repository/cheshire/cheshire/5.11.0/cheshire-5.11.0.jar!/cheshire/generate_seq.clj",1689946173000,"file:/home/gmrworkspace/dashboard/src/metabase/lib/schema/mbql_clause.cljc",1690286812000,"jar:file:/root/.m2/repository/metosin/malli/0.10.2/malli-0.10.2.jar!/malli/util.cljc",1689946170000,"file:/home/gmrworkspace/dashboard/src/metabase/util/jvm.clj",1692013156125],"~:analyzer",["^ ","^3",null,"^4",["^ "],"^5",["^ ","^6","metabase/lib/aggregation.cljc","^7",1,"^8",5,"^9",1,"^:",29],"^;",["^ ","^<","^=","^>","^?","^@","^A","^B","^C","^D","^E","^F","^G"],"^H",null,"^I",["^J",["^K","^L","^M","^N","^O"]],"^P","^Q","^R",["^ "],"^U",null,"^V",["^ ","^W","^W","^X","^Y","^Z","^Z","^[","^[","^10","^10","^11","^[","^12","^13","^14","^15","~$u","^16","^17","^18","^19","^10","^1:","^1;","^C","^C","^1<","^1<","^1=","^1=","^1>","^1>","^1?","^W","^15","^15","^1@","^1A","^1B","^1C","^1D","^1D","~$m","^1E","^16","^16","^1F","^1<","^1;","^1;","^13","^13","^1G","^1=","^1H","^1I","^1J","^1J","^Y","^Y","^1K","^Z","^1L","^1J","^1M","^1D","^1C","^1C","^1A","^1A","^18","^18","^1I","^1I","^1E","^1E"],"^1N",["^J",["^1O"]],"~:shadow/js-access-global",["^J",["Error"]],"^1P",null,"~:defs",["^ ","~$aggregate",["^ ","~:schema",["~:function",["~:=>",["~:cat","~:any","^;D"],"~:metabase.lib.schema/query"],["^;B",["^;C","^;E","~:int","~$Aggregatable"],"^;E"]],"~:validate!","id79590","~:protocol-inline",null,"^5",["^ ","^;@",["^;A",["^;B",["^;C","^;D","^;D"],"^;E"],["^;B",["^;C","^;E","^;F","^;G"],"^;E"]],"^;H","id79590","^6","metabase/lib/aggregation.cljc","^:",19,"~:top-fn",["^ ","~:variadic?",false,"~:fixed-arity",3,"~:max-fixed-arity",3,"~:method-params",[["~$query","~$aggregatable"],["^;O","~$stage-number","^;P"]],"~:arglists",["^1S",[["^;O","^;P"],["^;O","^;Q","^;P"]]],"~:arglists-meta",["^1S",[null,null]]],"^8",10,"~:raw-arglists",["^1S",["~$quote",["^1S",[["^;O","^;P"],["^;O","~:-","^;E","^;Q","~:-","^;F","^;P","~:-","^;G"]]]]],"^7",234,"^9",234,"^;R",["^1S",["^;U",["^1S",[["^;O","^;P"],["^;O","^;Q","^;P"]]]]],"~:doc","Inputs: ([query aggregatable]\n           [query :- :metabase.lib.schema/query stage-number :- :int aggregatable :- Aggregatable])\n  Return: :metabase.lib.schema/query\n          \n\n  Adds an aggregation to query."],"^P","^2?","^6","metabase/lib/aggregation.cljc","^:",19,"^;J",["^ ","^;K",false,"^;L",3,"^;M",3,"^;N",[["^;O","^;P"],["^;O","^;Q","^;P"]],"^;R",["^1S",[["^;O","^;P"],["^;O","^;Q","^;P"]]],"^;S",["^1S",[null,null]]],"^;N",[["^;O","^;P"],["^;O","^;Q","^;P"]],"~:protocol-impl",null,"^;L",3,"^;S",["^1S",[null,null]],"^8",1,"^;K",false,"~:methods",[["^ ","^;L",2,"^;K",false,"~:tag","~$any"],["^ ","^;L",3,"^;K",false,"^;Y",["^J",["~$clj","^;Z"]]]],"^;T",["^1S",["^;U",["^1S",[["^;O","^;P"],["^;O","~:-","^;E","^;Q","~:-","^;F","^;P","~:-","^;G"]]]]],"^7",234,"^9",234,"^;M",3,"~:fn-var",true,"^;R",["^1S",[["^;O","^;P"],["^;O","^;Q","^;P"]]],"^;V","Inputs: ([query aggregatable]\n           [query :- :metabase.lib.schema/query stage-number :- :int aggregatable :- Aggregatable])\n  Return: :metabase.lib.schema/query\n          \n\n  Adds an aggregation to query."],"^;G",["^ ","^5",["^ ","^6","metabase/lib/aggregation.cljc","^7",227,"^8",16,"^9",227,"^:",28,"~:private",true],"^<1",true,"^P","^2J","^6","metabase/lib/aggregation.cljc","^:",28,"^8",1,"^7",227,"^9",227,"^;Y","~$cljs.core/IVector","^;V","Schema for something you can pass to [[aggregate]] to add to a query as an aggregation."],"~$sum",["^ ","^;@",["^;A",["^;B",["^;C","^;D"],"~:mbql.clause/sum"]],"^;H","id79574","^;I",null,"^5",["^ ","^;@",["^;A",["^;B",["^;C","^;D"],"^<4"]],"^;H","id79574","^6","metabase/lib/aggregation.cljc","^:",22,"^8",19,"^;T",["^1S",["^;U",["^1S",[["~$x"]]]]],"^7",218,"^9",218,"^;R",["^1S",["^;U",["^1S",[["~$x"]]]]],"^;V","Inputs: ([x])\n  Return: :mbql.clause/sum\n          \n\n  Create a standalone clause of type `sum`."],"^P","^2P","^6","metabase/lib/aggregation.cljc","^:",22,"^;N",["^1S",[["~$x"]]],"^;W",null,"^;S",["^1S",[null,null]],"^8",1,"^;K",false,"^;T",["^1S",["^;U",["^1S",[["~$x"]]]]],"^7",218,"~:ret-tag","^;Z","^9",218,"^;M",1,"^<0",true,"^;R",["^1S",["^;U",["^1S",[["~$x"]]]]],"^;V","Inputs: ([x])\n  Return: :mbql.clause/sum\n          \n\n  Create a standalone clause of type `sum`."],"~$aggregations",["^ ","^;@",["^;A",["^;B",["^;C","^;D"],["~:maybe",["~:sequential","~:metabase.lib.schema.aggregation/aggregation"]]],["^;B",["^;C","^;E","^;F"],["^<7",["^<8","^<9"]]]],"^;H","id79600","^;I",null,"^5",["^ ","^;@",["^;A",["^;B",["^;C","^;D"],["^<7",["^<8","^<9"]]],["^;B",["^;C","^;E","^;F"],["^<7",["^<8","^<9"]]]],"^;H","id79600","^6","metabase/lib/aggregation.cljc","^:",22,"^;J",["^ ","^;K",false,"^;L",2,"^;M",2,"^;N",[["^;O"],["^;O","^;Q"]],"^;R",["^1S",[["^;O"],["^;O","^;Q"]]],"^;S",["^1S",[null,null]]],"^8",10,"^;T",["^1S",["^;U",["^1S",[["^;O"],["^;O","~:-","^;E","^;Q","~:-","^;F"]]]]],"^7",247,"^9",247,"^;R",["^1S",["^;U",["^1S",[["^;O"],["^;O","^;Q"]]]]],"^;V","Inputs: ([query]\n           [query :- :metabase.lib.schema/query stage-number :- :int])\n  Return: [:maybe [:sequential :metabase.lib.schema.aggregation/aggregation]]\n          \n\n  Get the aggregations in a given stage of a query."],"^P","^2K","^6","metabase/lib/aggregation.cljc","^:",22,"^;J",["^ ","^;K",false,"^;L",2,"^;M",2,"^;N",[["^;O"],["^;O","^;Q"]],"^;R",["^1S",[["^;O"],["^;O","^;Q"]]],"^;S",["^1S",[null,null]]],"^;N",[["^;O"],["^;O","^;Q"]],"^;W",null,"^;L",2,"^;S",["^1S",[null,null]],"^8",1,"^;K",false,"^;X",[["^ ","^;L",1,"^;K",false,"^;Y","^;Z"],["^ ","^;L",2,"^;K",false,"^;Y",["^J",[null,"~$clj-nil"]]]],"^;T",["^1S",["^;U",["^1S",[["^;O"],["^;O","~:-","^;E","^;Q","~:-","^;F"]]]]],"^7",247,"^9",247,"^;M",2,"^<0",true,"^;R",["^1S",[["^;O"],["^;O","^;Q"]]],"^;V","Inputs: ([query]\n           [query :- :metabase.lib.schema/query stage-number :- :int])\n  Return: [:maybe [:sequential :metabase.lib.schema.aggregation/aggregation]]\n          \n\n  Get the aggregations in a given stage of a query."],"~$aggregation-clause",["^ ","^;@",["^;A",["^;B",["^;C","~:metabase.lib.schema.aggregation/operator"],"^<9"],["^;B",["^;C","^<<","^;D"],"^<9"]],"^;H","id79689","^;I",null,"^5",["^ ","^;@",["^;A",["^;B",["^;C","^<<"],"^<9"],["^;B",["^;C","^<<","^;D"],"^<9"]],"^;H","id79689","^6","metabase/lib/aggregation.cljc","^:",28,"^;J",["^ ","^;K",false,"^;L",2,"^;M",2,"^;N",[["~$aggregation-operator"],["^<=","~$column"]],"^;R",["^1S",[["^<="],["^<=","^<>"]]],"^;S",["^1S",[null,null]]],"^8",10,"^;T",["^1S",["^;U",["^1S",[["^<=","~:-","^<<"],["^<=","~:-","^<<","^<>"]]]]],"^7",326,"^9",326,"^;R",["^1S",["^;U",["^1S",[["^<="],["^<=","^<>"]]]]],"^;V","Inputs: ([aggregation-operator :- :metabase.lib.schema.aggregation/operator]\n           [aggregation-operator :- :metabase.lib.schema.aggregation/operator column])\n  Return: :metabase.lib.schema.aggregation/aggregation\n          \n\n  Returns a standalone aggregation clause for an `aggregation-operator` and\n  a `column`.\n  For aggregations requiring an argument `column` is mandatory, otherwise\n  it is optional."],"^P","^37","^6","metabase/lib/aggregation.cljc","^:",28,"^;J",["^ ","^;K",false,"^;L",2,"^;M",2,"^;N",[["^<="],["^<=","^<>"]],"^;R",["^1S",[["^<="],["^<=","^<>"]]],"^;S",["^1S",[null,null]]],"^;N",[["^<="],["^<=","^<>"]],"^;W",null,"^;L",2,"^;S",["^1S",[null,null]],"^8",1,"^;K",false,"^;X",[["^ ","^;L",1,"^;K",false,"^;Y",["^J",[null,"^;[","^;Z","^<:"]]],["^ ","^;L",2,"^;K",false,"^;Y",["^J",[null,"^;[","^;Z","^<:"]]]],"^;T",["^1S",["^;U",["^1S",[["^<=","~:-","^<<"],["^<=","~:-","^<<","^<>"]]]]],"^7",326,"^9",326,"^;M",2,"^<0",true,"^;R",["^1S",[["^<="],["^<=","^<>"]]],"^;V","Inputs: ([aggregation-operator :- :metabase.lib.schema.aggregation/operator]\n           [aggregation-operator :- :metabase.lib.schema.aggregation/operator column])\n  Return: :metabase.lib.schema.aggregation/aggregation\n          \n\n  Returns a standalone aggregation clause for an `aggregation-operator` and\n  a `column`.\n  For aggregations requiring an argument `column` is mandatory, otherwise\n  it is optional."],"^K",["^ ","^;@",["^;A",["^;B",["^;C","^;D"],"~:mbql.clause/min"]],"^;H","id79558","^;I",null,"^5",["^ ","^;@",["^;A",["^;B",["^;C","^;D"],"^<?"]],"^;H","id79558","^6","metabase/lib/aggregation.cljc","^:",22,"^8",19,"^;T",["^1S",["^;U",["^1S",[["~$x"]]]]],"^7",214,"^9",214,"^;R",["^1S",["^;U",["^1S",[["~$x"]]]]],"^;V","Inputs: ([x])\n  Return: :mbql.clause/min\n          \n\n  Create a standalone clause of type `min`."],"^P","^3=","^6","metabase/lib/aggregation.cljc","^:",22,"^;N",["^1S",[["~$x"]]],"^;W",null,"^;S",["^1S",[null,null]],"^8",1,"^;K",false,"^;T",["^1S",["^;U",["^1S",[["~$x"]]]]],"^7",214,"^<5","^;Z","^9",214,"^;M",1,"^<0",true,"^;R",["^1S",["^;U",["^1S",[["~$x"]]]]],"^;V","Inputs: ([x])\n  Return: :mbql.clause/min\n          \n\n  Create a standalone clause of type `min`."],"~$stddev",["^ ","^;@",["^;A",["^;B",["^;C","^;D"],"~:mbql.clause/stddev"]],"^;H","id79568","^;I",null,"^5",["^ ","^;@",["^;A",["^;B",["^;C","^;D"],"^<A"]],"^;H","id79568","^6","metabase/lib/aggregation.cljc","^:",25,"^8",19,"^;T",["^1S",["^;U",["^1S",[["~$x"]]]]],"^7",217,"^9",217,"^;R",["^1S",["^;U",["^1S",[["~$x"]]]]],"^;V","Inputs: ([x])\n  Return: :mbql.clause/stddev\n          \n\n  Create a standalone clause of type `stddev`."],"^P","^3?","^6","metabase/lib/aggregation.cljc","^:",25,"^;N",["^1S",[["~$x"]]],"^;W",null,"^;S",["^1S",[null,null]],"^8",1,"^;K",false,"^;T",["^1S",["^;U",["^1S",[["~$x"]]]]],"^7",217,"^<5","^;Z","^9",217,"^;M",1,"^<0",true,"^;R",["^1S",["^;U",["^1S",[["~$x"]]]]],"^;V","Inputs: ([x])\n  Return: :mbql.clause/stddev\n          \n\n  Create a standalone clause of type `stddev`."],"~$aggregation-ref",["^ ","^;@",["^;A",["^;B",["^;C","^;D","^;D"],"~:mbql.clause/aggregation"],["^;B",["^;C","^;E","^;F","~:metabase.lib.schema.common/int-greater-than-or-equal-to-zero"],"^<C"]],"^;H","id79708","^;I",null,"^5",["^ ","^;@",["^;A",["^;B",["^;C","^;D","^;D"],"^<C"],["^;B",["^;C","^;E","^;F","^<D"],"^<C"]],"^;H","id79708","^6","metabase/lib/aggregation.cljc","^:",25,"^;J",["^ ","^;K",false,"^;L",3,"^;M",3,"^;N",[["^;O","~$ag-index"],["^;O","^;Q","^<E"]],"^;R",["^1S",[["^;O","^<E"],["^;O","^;Q","^<E"]]],"^;S",["^1S",[null,null]]],"^8",10,"^;T",["^1S",["^;U",["^1S",[["^;O","^<E"],["^;O","~:-","^;E","^;Q","~:-","^;F","^<E","~:-","^<D"]]]]],"^7",378,"^9",378,"^;R",["^1S",["^;U",["^1S",[["^;O","^<E"],["^;O","^;Q","^<E"]]]]],"^;V","Inputs: ([query ag-index]\n           [query :- :metabase.lib.schema/query stage-number :- :int ag-index :- :metabase.lib.schema.common/int-greater-than-or-equal-to-zero])\n  Return: :mbql.clause/aggregation\n          \n\n  Find the aggregation at `ag-index` and create an `:aggregation` ref for it. Intended for use\n  when creating queries using threading macros e.g.\n\n    (-> (lib/query ...)\n        (lib/aggregate (lib/avg ...))\n        (as-> <> (lib/order-by <> (lib/aggregation-ref <> 0))))"],"^P","^2H","^6","metabase/lib/aggregation.cljc","^:",25,"^;J",["^ ","^;K",false,"^;L",3,"^;M",3,"^;N",[["^;O","^<E"],["^;O","^;Q","^<E"]],"^;R",["^1S",[["^;O","^<E"],["^;O","^;Q","^<E"]]],"^;S",["^1S",[null,null]]],"^;N",[["^;O","^<E"],["^;O","^;Q","^<E"]],"^;W",null,"^;L",3,"^;S",["^1S",[null,null]],"^8",1,"^;K",false,"^;X",[["^ ","^;L",2,"^;K",false,"^;Y","^;Z"],["^ ","^;L",3,"^;K",false,"^;Y",["^J",[null,"^;[","^;Z","^<:"]]]],"^;T",["^1S",["^;U",["^1S",[["^;O","^<E"],["^;O","~:-","^;E","^;Q","~:-","^;F","^<E","~:-","^<D"]]]]],"^7",378,"^9",378,"^;M",3,"^<0",true,"^;R",["^1S",[["^;O","^<E"],["^;O","^;Q","^<E"]]],"^;V","Inputs: ([query ag-index]\n           [query :- :metabase.lib.schema/query stage-number :- :int ag-index :- :metabase.lib.schema.common/int-greater-than-or-equal-to-zero])\n  Return: :mbql.clause/aggregation\n          \n\n  Find the aggregation at `ag-index` and create an `:aggregation` ref for it. Intended for use\n  when creating queries using threading macros e.g.\n\n    (-> (lib/query ...)\n        (lib/aggregate (lib/avg ...))\n        (as-> <> (lib/order-by <> (lib/aggregation-ref <> 0))))"],"~$selected-aggregation-operators",["^ ","^;@",["^;B",["^;C",["^<7",["^<8","~$OperatorWithColumns"]],"^;D"],["^<7",["^<8","~$SelectedOperatorWithColumns"]]],"^;H","id79698","^;I",null,"^5",["^ ","^;@",["^;B",["^;C",["^<7",["^<8","^<G"]],"^;D"],["^<7",["^<8","^<H"]]],"^;H","id79698","^6","metabase/lib/aggregation.cljc","^:",40,"^8",10,"^;T",["^1S",["^;U",["^1S",[["~$agg-operators","~:-",["^<7",["^<8","^<G"]],"~$agg-clause"]]]]],"^7",349,"^9",349,"^;R",["^1S",["^;U",["^1S",[["^<I","^<J"]]]]],"^;V","Inputs: [agg-operators :- [:maybe [:sequential OperatorWithColumns]] agg-clause]\n  Return: [:maybe [:sequential SelectedOperatorWithColumns]]\n          \n\n  Mark the operator and the column (if any) in `agg-operators` selected by `agg-clause`."],"^P","^2G","^6","metabase/lib/aggregation.cljc","^:",40,"^;N",["^1S",[["^<I","^<J"]]],"^;W",null,"^;S",["^1S",[null,null]],"^8",1,"^;K",false,"^;T",["^1S",["^;U",["^1S",[["^<I","~:-",["^<7",["^<8","^<G"]],"^<J"]]]]],"^7",349,"^<5",["^J",["^;[","^<:"]],"^9",349,"^;M",2,"^<0",true,"^;R",["^1S",["^;U",["^1S",[["^<I","^<J"]]]]],"^;V","Inputs: [agg-operators :- [:maybe [:sequential OperatorWithColumns]] agg-clause]\n  Return: [:maybe [:sequential SelectedOperatorWithColumns]]\n          \n\n  Mark the operator and the column (if any) in `agg-operators` selected by `agg-clause`."],"~$count-where",["^ ","^;@",["^;A",["^;B",["^;C","^;D","^;D"],"~:mbql.clause/count-where"]],"^;H","id79533","^;I",null,"^5",["^ ","^;@",["^;A",["^;B",["^;C","^;D","^;D"],"^<L"]],"^;H","id79533","^6","metabase/lib/aggregation.cljc","^:",30,"^8",19,"^;T",["^1S",["^;U",["^1S",[["~$x","~$y"]]]]],"^7",209,"^9",209,"^;R",["^1S",["^;U",["^1S",[["~$x","~$y"]]]]],"^;V","Inputs: ([x y])\n  Return: :mbql.clause/count-where\n          \n\n  Create a standalone clause of type `count-where`."],"^P","^3:","^6","metabase/lib/aggregation.cljc","^:",30,"^;N",["^1S",[["~$x","~$y"]]],"^;W",null,"^;S",["^1S",[null,null]],"^8",1,"^;K",false,"^;T",["^1S",["^;U",["^1S",[["~$x","~$y"]]]]],"^7",209,"^<5","^;Z","^9",209,"^;M",2,"^<0",true,"^;R",["^1S",["^;U",["^1S",[["~$x","~$y"]]]]],"^;V","Inputs: ([x y])\n  Return: :mbql.clause/count-where\n          \n\n  Create a standalone clause of type `count-where`."],"~$cum-count",["^ ","^;@",["^;A",["^;B","^;C","~:mbql.clause/cum-count"],["^;B",["^;C","^;D"],"^<N"]],"^;H","id79523","^;I",null,"^5",["^ ","^;@",["^;A",["^;B","^;C","^<N"],["^;B",["^;C","^;D"],"^<N"]],"^;H","id79523","^6","metabase/lib/aggregation.cljc","^:",28,"^;J",["^ ","^;K",false,"^;L",1,"^;M",1,"^;N",[[],["~$x"]],"^;R",["^1S",[[],["~$x"]]],"^;S",["^1S",[null,null]]],"^8",19,"^;T",["^1S",["^;U",["^1S",[[],["~$x"]]]]],"^7",208,"^9",208,"^;R",["^1S",["^;U",["^1S",[[],["~$x"]]]]],"^;V","Inputs: ([]\n           [x])\n  Return: :mbql.clause/cum-count\n          \n\n  Create a standalone clause of type `cum-count`."],"^P","^3F","^6","metabase/lib/aggregation.cljc","^:",28,"^;J",["^ ","^;K",false,"^;L",1,"^;M",1,"^;N",[[],["~$x"]],"^;R",["^1S",[[],["~$x"]]],"^;S",["^1S",[null,null]]],"^;N",[[],["~$x"]],"^;W",null,"^;L",1,"^;S",["^1S",[null,null]],"^8",1,"^;K",false,"^;X",[["^ ","^;L",0,"^;K",false,"^;Y","^;Z"],["^ ","^;L",1,"^;K",false,"^;Y","^;Z"]],"^;T",["^1S",["^;U",["^1S",[[],["~$x"]]]]],"^7",208,"^9",208,"^;M",1,"^<0",true,"^;R",["^1S",[[],["~$x"]]],"^;V","Inputs: ([]\n           [x])\n  Return: :mbql.clause/cum-count\n          \n\n  Create a standalone clause of type `cum-count`."],"~$resolve-aggregation",["^ ","^;@",["^;B",["^;C","^;E","^;F","~:string"],"^<9"],"^;H","id79335","^;I",null,"^5",["^ ","^;@",["^;B",["^;C","^;E","^;F","^<P"],"^<9"],"^;H","id79335","^6","metabase/lib/aggregation.cljc","^:",29,"^8",10,"^;T",["^1S",["^;U",["^1S",[["^;O","~:-","^;E","^;Q","~:-","^;F","~$ag-uuid","~:-","^<P"]]]]],"^7",32,"^9",32,"^;R",["^1S",["^;U",["^1S",[["^;O","^;Q","^<Q"]]]]],"^;V","Inputs: [query :- :metabase.lib.schema/query stage-number :- :int ag-uuid :- :string]\n  Return: :metabase.lib.schema.aggregation/aggregation\n          \n\n  Resolve an aggregation with a specific `index`."],"^P","^40","^6","metabase/lib/aggregation.cljc","^:",29,"^;N",["^1S",[["^;O","^;Q","^<Q"]]],"^;W",null,"^;S",["^1S",[null,null]],"^8",1,"^;K",false,"^;T",["^1S",["^;U",["^1S",[["^;O","~:-","^;E","^;Q","~:-","^;F","^<Q","~:-","^<P"]]]]],"^7",32,"^<5",["^J",[null,"^;Z"]],"^9",32,"^;M",3,"^<0",true,"^;R",["^1S",["^;U",["^1S",[["^;O","^;Q","^<Q"]]]]],"^;V","Inputs: [query :- :metabase.lib.schema/query stage-number :- :int ag-uuid :- :string]\n  Return: :metabase.lib.schema.aggregation/aggregation\n          \n\n  Resolve an aggregation with a specific `index`."],"~$available-aggregation-operators",["^ ","^;@",["^;A",["^;B",["^;C","^;D"],["^<7",["^<8","^<G"]]],["^;B",["^;C","^;E","^;F"],["^<7",["^<8","^<G"]]]],"^;H","id79672","^;I",null,"^5",["^ ","^;@",["^;A",["^;B",["^;C","^;D"],["^<7",["^<8","^<G"]]],["^;B",["^;C","^;E","^;F"],["^<7",["^<8","^<G"]]]],"^;H","id79672","^6","metabase/lib/aggregation.cljc","^:",41,"^;J",["^ ","^;K",false,"^;L",2,"^;M",2,"^;N",[["^;O"],["^;O","^;Q"]],"^;R",["^1S",[["^;O"],["^;O","^;Q"]]],"^;S",["^1S",[null,null]]],"^8",10,"^;T",["^1S",["^;U",["^1S",[["^;O"],["^;O","~:-","^;E","^;Q","~:-","^;F"]]]]],"^7",293,"^9",293,"^;R",["^1S",["^;U",["^1S",[["^;O"],["^;O","^;Q"]]]]],"^;V","Inputs: ([query]\n           [query :- :metabase.lib.schema/query stage-number :- :int])\n  Return: [:maybe [:sequential OperatorWithColumns]]\n          \n\n  Returns the available aggegation operators for the stage with `stage-number` of `query`.\n  If `stage-number` is omitted, uses the last stage."],"^P","^3B","^6","metabase/lib/aggregation.cljc","^:",41,"^;J",["^ ","^;K",false,"^;L",2,"^;M",2,"^;N",[["^;O"],["^;O","^;Q"]],"^;R",["^1S",[["^;O"],["^;O","^;Q"]]],"^;S",["^1S",[null,null]]],"^;N",[["^;O"],["^;O","^;Q"]],"^;W",null,"^;L",2,"^;S",["^1S",[null,null]],"^8",1,"^;K",false,"^;X",[["^ ","^;L",1,"^;K",false,"^;Y","^;Z"],["^ ","^;L",2,"^;K",false,"^;Y",["^J",[null,"^<:"]]]],"^;T",["^1S",["^;U",["^1S",[["^;O"],["^;O","~:-","^;E","^;Q","~:-","^;F"]]]]],"^7",293,"^9",293,"^;M",2,"^<0",true,"^;R",["^1S",[["^;O"],["^;O","^;Q"]]],"^;V","Inputs: ([query]\n           [query :- :metabase.lib.schema/query stage-number :- :int])\n  Return: [:maybe [:sequential OperatorWithColumns]]\n          \n\n  Returns the available aggegation operators for the stage with `stage-number` of `query`.\n  If `stage-number` is omitted, uses the last stage."],"~$aggregations-metadata",["^ ","^;@",["^;A",["^;B",["^;C","^;D"],["^<7",["^<8","~$lib.metadata/ColumnMetadata"]]],["^;B",["^;C","^;E","^;F"],["^<7",["^<8","^<T"]]]],"^;H","id79611","^;I",null,"^5",["^ ","^;@",["^;A",["^;B",["^;C","^;D"],["^<7",["^<8","^<T"]]],["^;B",["^;C","^;E","^;F"],["^<7",["^<8","^<T"]]]],"^;H","id79611","^6","metabase/lib/aggregation.cljc","^:",31,"^;J",["^ ","^;K",false,"^;L",2,"^;M",2,"^;N",[["^;O"],["^;O","^;Q"]],"^;R",["^1S",[["^;O"],["^;O","^;Q"]]],"^;S",["^1S",[null,null]]],"^8",10,"^;T",["^1S",["^;U",["^1S",[["^;O"],["^;O","~:-","^;E","^;Q","~:-","^;F"]]]]],"^7",256,"^9",256,"^;R",["^1S",["^;U",["^1S",[["^;O"],["^;O","^;Q"]]]]],"^;V","Inputs: ([query]\n           [query :- :metabase.lib.schema/query stage-number :- :int])\n  Return: [:maybe [:sequential lib.metadata/ColumnMetadata]]\n          \n\n  Get metadata about the aggregations in a given stage of a query."],"^P","^3O","^6","metabase/lib/aggregation.cljc","^:",31,"^;J",["^ ","^;K",false,"^;L",2,"^;M",2,"^;N",[["^;O"],["^;O","^;Q"]],"^;R",["^1S",[["^;O"],["^;O","^;Q"]]],"^;S",["^1S",[null,null]]],"^;N",[["^;O"],["^;O","^;Q"]],"^;W",null,"^;L",2,"^;S",["^1S",[null,null]],"^8",1,"^;K",false,"^;X",[["^ ","^;L",1,"^;K",false,"^;Y","^;Z"],["^ ","^;L",2,"^;K",false,"^;Y",["^J",["^;Z","^<:"]]]],"^;T",["^1S",["^;U",["^1S",[["^;O"],["^;O","~:-","^;E","^;Q","~:-","^;F"]]]]],"^7",256,"^9",256,"^;M",2,"^<0",true,"^;R",["^1S",[["^;O"],["^;O","^;Q"]]],"^;V","Inputs: ([query]\n           [query :- :metabase.lib.schema/query stage-number :- :int])\n  Return: [:maybe [:sequential lib.metadata/ColumnMetadata]]\n          \n\n  Get metadata about the aggregations in a given stage of a query."],"~$sum-where",["^ ","^;@",["^;A",["^;B",["^;C","^;D","^;D"],"~:mbql.clause/sum-where"]],"^;H","id79578","^;I",null,"^5",["^ ","^;@",["^;A",["^;B",["^;C","^;D","^;D"],"^<V"]],"^;H","id79578","^6","metabase/lib/aggregation.cljc","^:",28,"^8",19,"^;T",["^1S",["^;U",["^1S",[["~$x","~$y"]]]]],"^7",220,"^9",220,"^;R",["^1S",["^;U",["^1S",[["~$x","~$y"]]]]],"^;V","Inputs: ([x y])\n  Return: :mbql.clause/sum-where\n          \n\n  Create a standalone clause of type `sum-where`."],"^P","^3J","^6","metabase/lib/aggregation.cljc","^:",28,"^;N",["^1S",[["~$x","~$y"]]],"^;W",null,"^;S",["^1S",[null,null]],"^8",1,"^;K",false,"^;T",["^1S",["^;U",["^1S",[["~$x","~$y"]]]]],"^7",220,"^<5","^;Z","^9",220,"^;M",2,"^<0",true,"^;R",["^1S",["^;U",["^1S",[["~$x","~$y"]]]]],"^;V","Inputs: ([x y])\n  Return: :mbql.clause/sum-where\n          \n\n  Create a standalone clause of type `sum-where`."],"~$cum-sum",["^ ","^;@",["^;A",["^;B",["^;C","^;D"],"~:mbql.clause/cum-sum"]],"^;H","id79576","^;I",null,"^5",["^ ","^;@",["^;A",["^;B",["^;C","^;D"],"^<X"]],"^;H","id79576","^6","metabase/lib/aggregation.cljc","^:",26,"^8",19,"^;T",["^1S",["^;U",["^1S",[["~$x"]]]]],"^7",219,"^9",219,"^;R",["^1S",["^;U",["^1S",[["~$x"]]]]],"^;V","Inputs: ([x])\n  Return: :mbql.clause/cum-sum\n          \n\n  Create a standalone clause of type `cum-sum`."],"^P","^3T","^6","metabase/lib/aggregation.cljc","^:",26,"^;N",["^1S",[["~$x"]]],"^;W",null,"^;S",["^1S",[null,null]],"^8",1,"^;K",false,"^;T",["^1S",["^;U",["^1S",[["~$x"]]]]],"^7",219,"^<5","^;Z","^9",219,"^;M",1,"^<0",true,"^;R",["^1S",["^;U",["^1S",[["~$x"]]]]],"^;V","Inputs: ([x])\n  Return: :mbql.clause/cum-sum\n          \n\n  Create a standalone clause of type `cum-sum`."],"^L",["^ ","^;@",["^;A",["^;B",["^;C","^;D"],"~:mbql.clause/distinct"]],"^;H","id79544","^;I",null,"^5",["^ ","^;@",["^;A",["^;B",["^;C","^;D"],"^<Y"]],"^;H","id79544","^6","metabase/lib/aggregation.cljc","^:",27,"^8",19,"^;T",["^1S",["^;U",["^1S",[["~$x"]]]]],"^7",211,"^9",211,"^;R",["^1S",["^;U",["^1S",[["~$x"]]]]],"^;V","Inputs: ([x])\n  Return: :mbql.clause/distinct\n          \n\n  Create a standalone clause of type `distinct`."],"^P","^42","^6","metabase/lib/aggregation.cljc","^:",27,"^;N",["^1S",[["~$x"]]],"^;W",null,"^;S",["^1S",[null,null]],"^8",1,"^;K",false,"^;T",["^1S",["^;U",["^1S",[["~$x"]]]]],"^7",211,"^<5","^;Z","^9",211,"^;M",1,"^<0",true,"^;R",["^1S",["^;U",["^1S",[["~$x"]]]]],"^;V","Inputs: ([x])\n  Return: :mbql.clause/distinct\n          \n\n  Create a standalone clause of type `distinct`."],"~$percentile",["^ ","^;@",["^;A",["^;B",["^;C","^;D","^;D"],"~:mbql.clause/percentile"]],"^;H","id79560","^;I",null,"^5",["^ ","^;@",["^;A",["^;B",["^;C","^;D","^;D"],"^<["]],"^;H","id79560","^6","metabase/lib/aggregation.cljc","^:",29,"^8",19,"^;T",["^1S",["^;U",["^1S",[["~$x","~$y"]]]]],"^7",215,"^9",215,"^;R",["^1S",["^;U",["^1S",[["~$x","~$y"]]]]],"^;V","Inputs: ([x y])\n  Return: :mbql.clause/percentile\n          \n\n  Create a standalone clause of type `percentile`."],"^P","^3Z","^6","metabase/lib/aggregation.cljc","^:",29,"^;N",["^1S",[["~$x","~$y"]]],"^;W",null,"^;S",["^1S",[null,null]],"^8",1,"^;K",false,"^;T",["^1S",["^;U",["^1S",[["~$x","~$y"]]]]],"^7",215,"^<5","^;Z","^9",215,"^;M",2,"^<0",true,"^;R",["^1S",["^;U",["^1S",[["~$x","~$y"]]]]],"^;V","Inputs: ([x y])\n  Return: :mbql.clause/percentile\n          \n\n  Create a standalone clause of type `percentile`."],"~$aggregation-operator-columns",["^ ","^;@",["^;B",["^;C","^<G"],["^<7",["^<8","^<T"]]],"^;H","id79663","^;I",null,"^5",["^ ","^;@",["^;B",["^;C","^<G"],["^<7",["^<8","^<T"]]],"^;H","id79663","^6","metabase/lib/aggregation.cljc","^:",38,"^8",10,"^;T",["^1S",["^;U",["^1S",[["^<=","~:-","^<G"]]]]],"^7",288,"^9",288,"^;R",["^1S",["^;U",["^1S",[["^<="]]]]],"^;V","Inputs: [aggregation-operator :- OperatorWithColumns]\n  Return: [:maybe [:sequential lib.metadata/ColumnMetadata]]\n          \n\n  Returns the columns for which `aggregation-operator` is applicable."],"^P","^3X","^6","metabase/lib/aggregation.cljc","^:",38,"^;N",["^1S",[["^<="]]],"^;W",null,"^;S",["^1S",[null,null]],"^8",1,"^;K",false,"^;T",["^1S",["^;U",["^1S",[["^<=","~:-","^<G"]]]]],"^7",288,"^<5","^;Z","^9",288,"^;M",1,"^<0",true,"^;R",["^1S",["^;U",["^1S",[["^<="]]]]],"^;V","Inputs: [aggregation-operator :- OperatorWithColumns]\n  Return: [:maybe [:sequential lib.metadata/ColumnMetadata]]\n          \n\n  Returns the columns for which `aggregation-operator` is applicable."],"^<H",["^ ","^5",["^ ","^6","metabase/lib/aggregation.cljc","^7",342,"^8",16,"^9",342,"^:",43,"^<1",true],"^<1",true,"^P","^45","^6","metabase/lib/aggregation.cljc","^:",43,"^8",1,"^7",342,"^9",342,"^;Y","^<2"],"~$column-metadata->aggregation-ref",["^ ","^;@",["^;B",["^;C","^<T"],"^<C"],"^;H","id79331","^;I",null,"^5",["^ ","^;@",["^;B",["^;C","^<T"],"^<C"],"^;H","id79331","^6","metabase/lib/aggregation.cljc","^:",42,"^8",10,"^;T",["^1S",["^;U",["^1S",[["~$metadata","~:-","^<T"]]]]],"^7",23,"^9",23,"^;R",["^1S",["^;U",["^1S",[["^=2"]]]]],"^;V","Inputs: [metadata :- lib.metadata/ColumnMetadata]\n  Return: :mbql.clause/aggregation\n          \n\n  Given `:metadata/column` column metadata for an aggregation, construct an `:aggregation` reference."],"^P","^4>","^6","metabase/lib/aggregation.cljc","^:",42,"^;N",["^1S",[["^=2"]]],"^;W",null,"^;S",["^1S",[null,null]],"^8",1,"^;K",false,"^;T",["^1S",["^;U",["^1S",[["^=2","~:-","^<T"]]]]],"^7",23,"^<5","^<2","^9",23,"^;M",1,"^<0",true,"^;R",["^1S",["^;U",["^1S",[["^=2"]]]]],"^;V","Inputs: [metadata :- lib.metadata/ColumnMetadata]\n  Return: :mbql.clause/aggregation\n          \n\n  Given `:metadata/column` column metadata for an aggregation, construct an `:aggregation` reference."],"^M",["^ ","^;@",["^;A",["^;B",["^;C","^;D"],"~:mbql.clause/var"]],"^;H","id79583","^;I",null,"^5",["^ ","^;@",["^;A",["^;B",["^;C","^;D"],"^=3"]],"^;H","id79583","^6","metabase/lib/aggregation.cljc","^:",22,"^8",19,"^;T",["^1S",["^;U",["^1S",[["~$x"]]]]],"^7",221,"^9",221,"^;R",["^1S",["^;U",["^1S",[["~$x"]]]]],"^;V","Inputs: ([x])\n  Return: :mbql.clause/var\n          \n\n  Create a standalone clause of type `var`."],"^P","^4B","^6","metabase/lib/aggregation.cljc","^:",22,"^;N",["^1S",[["~$x"]]],"^;W",null,"^;S",["^1S",[null,null]],"^8",1,"^;K",false,"^;T",["^1S",["^;U",["^1S",[["~$x"]]]]],"^7",221,"^<5","^;Z","^9",221,"^;M",1,"^<0",true,"^;R",["^1S",["^;U",["^1S",[["~$x"]]]]],"^;V","Inputs: ([x])\n  Return: :mbql.clause/var\n          \n\n  Create a standalone clause of type `var`."],"~$median",["^ ","^;@",["^;A",["^;B",["^;C","^;D"],"~:mbql.clause/median"]],"^;H","id79553","^;I",null,"^5",["^ ","^;@",["^;A",["^;B",["^;C","^;D"],"^=5"]],"^;H","id79553","^6","metabase/lib/aggregation.cljc","^:",25,"^8",19,"^;T",["^1S",["^;U",["^1S",[["~$x"]]]]],"^7",213,"^9",213,"^;R",["^1S",["^;U",["^1S",[["~$x"]]]]],"^;V","Inputs: ([x])\n  Return: :mbql.clause/median\n          \n\n  Create a standalone clause of type `median`."],"^P","^4=","^6","metabase/lib/aggregation.cljc","^:",25,"^;N",["^1S",[["~$x"]]],"^;W",null,"^;S",["^1S",[null,null]],"^8",1,"^;K",false,"^;T",["^1S",["^;U",["^1S",[["~$x"]]]]],"^7",213,"^<5","^;Z","^9",213,"^;M",1,"^<0",true,"^;R",["^1S",["^;U",["^1S",[["~$x"]]]]],"^;V","Inputs: ([x])\n  Return: :mbql.clause/median\n          \n\n  Create a standalone clause of type `median`."],"~$share",["^ ","^;@",["^;A",["^;B",["^;C","^;D"],"~:mbql.clause/share"]],"^;H","id79563","^;I",null,"^5",["^ ","^;@",["^;A",["^;B",["^;C","^;D"],"^=7"]],"^;H","id79563","^6","metabase/lib/aggregation.cljc","^:",24,"^8",19,"^;T",["^1S",["^;U",["^1S",[["~$x"]]]]],"^7",216,"^9",216,"^;R",["^1S",["^;U",["^1S",[["~$x"]]]]],"^;V","Inputs: ([x])\n  Return: :mbql.clause/share\n          \n\n  Create a standalone clause of type `share`."],"^P","^4@","^6","metabase/lib/aggregation.cljc","^:",24,"^;N",["^1S",[["~$x"]]],"^;W",null,"^;S",["^1S",[null,null]],"^8",1,"^;K",false,"^;T",["^1S",["^;U",["^1S",[["~$x"]]]]],"^7",216,"^<5","^;Z","^9",216,"^;M",1,"^<0",true,"^;R",["^1S",["^;U",["^1S",[["~$x"]]]]],"^;V","Inputs: ([x])\n  Return: :mbql.clause/share\n          \n\n  Create a standalone clause of type `share`."],"^N",["^ ","^;@",["^;A",["^;B",["^;C","^;D"],"~:mbql.clause/max"]],"^;H","id79550","^;I",null,"^5",["^ ","^;@",["^;A",["^;B",["^;C","^;D"],"^=8"]],"^;H","id79550","^6","metabase/lib/aggregation.cljc","^:",22,"^8",19,"^;T",["^1S",["^;U",["^1S",[["~$x"]]]]],"^7",212,"^9",212,"^;R",["^1S",["^;U",["^1S",[["~$x"]]]]],"^;V","Inputs: ([x])\n  Return: :mbql.clause/max\n          \n\n  Create a standalone clause of type `max`."],"^P","^46","^6","metabase/lib/aggregation.cljc","^:",22,"^;N",["^1S",[["~$x"]]],"^;W",null,"^;S",["^1S",[null,null]],"^8",1,"^;K",false,"^;T",["^1S",["^;U",["^1S",[["~$x"]]]]],"^7",212,"^<5","^;Z","^9",212,"^;M",1,"^<0",true,"^;R",["^1S",["^;U",["^1S",[["~$x"]]]]],"^;V","Inputs: ([x])\n  Return: :mbql.clause/max\n          \n\n  Create a standalone clause of type `max`."],"^O",["^ ","^;@",["^;A",["^;B","^;C","~:mbql.clause/count"],["^;B",["^;C","^;D"],"^=9"]],"^;H","id79511","^;I",null,"^5",["^ ","^;@",["^;A",["^;B","^;C","^=9"],["^;B",["^;C","^;D"],"^=9"]],"^;H","id79511","^6","metabase/lib/aggregation.cljc","^:",24,"^;J",["^ ","^;K",false,"^;L",1,"^;M",1,"^;N",[[],["~$x"]],"^;R",["^1S",[[],["~$x"]]],"^;S",["^1S",[null,null]]],"^8",19,"^;T",["^1S",["^;U",["^1S",[[],["~$x"]]]]],"^7",207,"^9",207,"^;R",["^1S",["^;U",["^1S",[[],["~$x"]]]]],"^;V","Inputs: ([]\n           [x])\n  Return: :mbql.clause/count\n          \n\n  Create a standalone clause of type `count`."],"^P","^4F","^6","metabase/lib/aggregation.cljc","^:",24,"^;J",["^ ","^;K",false,"^;L",1,"^;M",1,"^;N",[[],["~$x"]],"^;R",["^1S",[[],["~$x"]]],"^;S",["^1S",[null,null]]],"^;N",[[],["~$x"]],"^;W",null,"^;L",1,"^;S",["^1S",[null,null]],"^8",1,"^;K",false,"^;X",[["^ ","^;L",0,"^;K",false,"^;Y","^;Z"],["^ ","^;L",1,"^;K",false,"^;Y","^;Z"]],"^;T",["^1S",["^;U",["^1S",[[],["~$x"]]]]],"^7",207,"^9",207,"^;M",1,"^<0",true,"^;R",["^1S",[[],["~$x"]]],"^;V","Inputs: ([]\n           [x])\n  Return: :mbql.clause/count\n          \n\n  Create a standalone clause of type `count`."],"^<G",["^ ","^5",["^ ","^6","metabase/lib/aggregation.cljc","^7",271,"^8",16,"^9",271,"^:",35,"^<1",true],"^<1",true,"^P","^3L","^6","metabase/lib/aggregation.cljc","^:",35,"^8",1,"^7",271,"^9",271,"^;Y","^<2"],"~$avg",["^ ","^;@",["^;A",["^;B",["^;C","^;D"],"~:mbql.clause/avg"]],"^;H","id79543","^;I",null,"^5",["^ ","^;@",["^;A",["^;B",["^;C","^;D"],"^=;"]],"^;H","id79543","^6","metabase/lib/aggregation.cljc","^:",22,"^8",19,"^;T",["^1S",["^;U",["^1S",[["~$x"]]]]],"^7",210,"^9",210,"^;R",["^1S",["^;U",["^1S",[["~$x"]]]]],"^;V","Inputs: ([x])\n  Return: :mbql.clause/avg\n          \n\n  Create a standalone clause of type `avg`."],"^P","^3D","^6","metabase/lib/aggregation.cljc","^:",22,"^;N",["^1S",[["~$x"]]],"^;W",null,"^;S",["^1S",[null,null]],"^8",1,"^;K",false,"^;T",["^1S",["^;U",["^1S",[["~$x"]]]]],"^7",210,"^<5","^;Z","^9",210,"^;M",1,"^<0",true,"^;R",["^1S",["^;U",["^1S",[["~$x"]]]]],"^;V","Inputs: ([x])\n  Return: :mbql.clause/avg\n          \n\n  Create a standalone clause of type `avg`."]],"^1Q",["^ ","^X","^Y","^12","^13","~$u","^16","^1:","^1;","^C","^C","^16","^16","^1;","^1;","^13","^13","^Y","^Y"],"~:cljs.analyzer/constants",["^ ","^1N",["^J",["~:lib/uuid","~:features","~:lib/type","~:min","~:short-name","^<9","~:long","~:base-type","~:short","~:selected","~:type/Quantity","~:semantic-type","~:stddev","~:display-info","~:else","~:source/aggregations","~:default","^<8","~:count-where","~:columns","~:metabase.lib.schema.common/external-op","~:cum-count","~:or","~:lib/source","~:temporal-unit","~:settings","~:sum-where","^<<","~:cum-sum","~:lib/source-uuid","~:aggregation-index","~:effective-type","~:metadata/metric","~:requires-column","~:merge","~:distinct","~:type/*","~:percentile","~:supported-field","~:var","~:median","~:share","~:max","~:case","~:operator/aggregation","~:optional","~:count","~:metabase.lib.aggregation/aggregation","~:display-name","~:driver-feature","~:requires-column?","~:avg","~:aggregation","~:metabase.lib.aggregation/unary-aggregation","~:uuid","~:query","~:stage-number","~:selected?","~:boolean","~:map","~:sum","~:metabase.lib.aggregation/count-aggregation","~:aggregation-operator","^;D"]],"~:order~:ns-specs",["^ "],"~:ns-spec-vars",["^J",[]],"~:compiler-options",["^4M",[["^>P","~:static-fns"],true,["^>P","~:shadow-tweaks"],null,["^>P","~:source-map-inline"],null,["^>P","~:elide-asserts"],false,["^>P","~:optimize-constants"],null,["^>P","^23"],null,["^>P","~:external-config"],null,["^>P","~:tooling-config"],null,["^>P","~:emit-constants"],null,["^>P","~:load-tests"],null,["^>P","~:form-size-threshold"],null,["^>P","~:global-goog-object&array"],null,["^>P","~:data-readers"],null,["^>P","~:infer-externs"],"~:auto",["^>P","^25"],["^J",["^26","^27"]],["~:js-options","~:js-provider"],"^1O",["~:mode"],"~:dev",["^>P","~:fn-invoke-direct"],null,["^>P","~:source-map"],"/dev/null"]]]