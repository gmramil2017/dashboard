["^ ","~:output",["^ ","~:js","goog.provide('metabase.lib.options');\nmetabase.lib.options.mbql_clause_QMARK_ = (function metabase$lib$options$mbql_clause_QMARK_(x){\nreturn ((cljs.core.vector_QMARK_(x)) && ((cljs.core.first(x) instanceof cljs.core.Keyword)));\n});\n/**\n * Inputs: [x]\n *   Return: [:maybe map?]\n *        \n * \n *   Return the Dashboard lib options map associated with an `x`. Lib options is currently used mostly for\n *   the `:lib/uuid` we attach to everything to facilitate removing or replacing clauses later, but we will probably\n *   stick more stuff in here in the future. Some clauses like `:field` use options extensively for different things.\n * \n *   Normally for an MBQL clause, options are an optional second argument, e.g.\n * \n *  [:= {:lib/uuid \"03baa510-0415-48ef-987a-462d789c8a02\"} 1 2]\n * \n *   a la Hiccup or Malli. The default implementation already knows how to handle clauses that follow this shape. For\n *   historic reasons some MBQL clauses like `:field` or some of the string filter clauses have options as the last\n *   argument; you'll have to implement this method, and [[with-options]], to deal with the special cases.\n * \n *   For maps like join specs, options are currently stored under the `:lib/options` key. Does this make sense? Not sure.\n *   Maybe options should be included directly in the map, but then we'd have to decide which keys are and are not\n *   options. Is a join `:alias` an option? Probably. What about a `:condition`? It's not optional. So for purposes of\n *   writing Dashboard lib and tracking `:lib/uuid`, this approach seems ok in the short term.\n */\nmetabase.lib.options.options = (function metabase$lib$options$options(x){\n\nif(cljs.core.map_QMARK_(x)){\nreturn new cljs.core.Keyword(\"lib\",\"options\",\"lib/options\",99794548).cljs$core$IFn$_invoke$arity$1(x);\n} else {\nif(metabase.lib.options.mbql_clause_QMARK_(x)){\nif(cljs.core.map_QMARK_(cljs.core.second(x))){\nreturn cljs.core.second(x);\n} else {\nreturn null;\n}\n} else {\nreturn null;\n\n}\n}\n});\n/**\n * Inputs: [x new-options :- [:maybe map?]]\n *   Return: :any\n *        \n * \n *   Update `x` so its [[options]] are `new-options`. If the clause or map already has options, this will\n *   *replace* the old options; if it does not, this will set the new options.\n * \n *   If `x` is a map with `:lib/options` and `new-options` is `empty?`, this will drop `:lib/options` entirely.\n * \n *   You should probably prefer [[update-options]] to using this directly, so you don't stomp over existing stuff\n *   unintentionally. Implement this if you need to teach Dashboard lib how to support something that doesn't follow the\n *   usual patterns described in [[options]].\n */\nmetabase.lib.options.with_options = (function metabase$lib$options$with_options(x,new_options){\n\nif(cljs.core.map_QMARK_(x)){\nreturn metabase.util.assoc_dissoc(x,new cljs.core.Keyword(\"lib\",\"options\",\"lib/options\",99794548),cljs.core.not_empty(new_options));\n} else {\nif(metabase.lib.options.mbql_clause_QMARK_(x)){\nif(cljs.core.truth_(cljs.core.some_fn.cljs$core$IFn$_invoke$arity$2(cljs.core.nil_QMARK_,cljs.core.map_QMARK_)(cljs.core.second(x)))){\nreturn cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(cljs.core.vec(x),(1),new_options);\n} else {\nreturn cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.first(x),new_options], null),cljs.core.rest(x));\n}\n} else {\nthrow cljs.core.ex_info.cljs$core$IFn$_invoke$arity$2(metabase.shared.util.i18n.js_i18n.cljs$core$IFn$_invoke$arity$variadic(\"Don''t know how to set options for {0}\",cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([x], 0))], 0)),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"x\",\"x\",2099068185),x], null));\n\n}\n}\n});\n/**\n * Update the existing options in an `x` by applying `f` like this:\n * \n *  (apply f existing-options args)\n */\nmetabase.lib.options.update_options = (function metabase$lib$options$update_options(var_args){\nvar args__5775__auto__ = [];\nvar len__5769__auto___60063 = arguments.length;\nvar i__5770__auto___60064 = (0);\nwhile(true){\nif((i__5770__auto___60064 < len__5769__auto___60063)){\nargs__5775__auto__.push((arguments[i__5770__auto___60064]));\n\nvar G__60065 = (i__5770__auto___60064 + (1));\ni__5770__auto___60064 = G__60065;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__5776__auto__ = ((((2) < args__5775__auto__.length))?(new cljs.core.IndexedSeq(args__5775__auto__.slice((2)),(0),null)):null);\nreturn metabase.lib.options.update_options.cljs$core$IFn$_invoke$arity$variadic((arguments[(0)]),(arguments[(1)]),argseq__5776__auto__);\n});\n\n(metabase.lib.options.update_options.cljs$core$IFn$_invoke$arity$variadic = (function (x,f,args){\nvar current_options = metabase.lib.options.options(x);\nvar new_options = cljs.core.apply.cljs$core$IFn$_invoke$arity$3(f,current_options,args);\nreturn metabase.lib.options.with_options(x,new_options);\n}));\n\n(metabase.lib.options.update_options.cljs$lang$maxFixedArity = (2));\n\n/** @this {Function} */\n(metabase.lib.options.update_options.cljs$lang$applyTo = (function (seq60052){\nvar G__60053 = cljs.core.first(seq60052);\nvar seq60052__$1 = cljs.core.next(seq60052);\nvar G__60054 = cljs.core.first(seq60052__$1);\nvar seq60052__$2 = cljs.core.next(seq60052__$1);\nvar self__5754__auto__ = this;\nreturn self__5754__auto__.cljs$core$IFn$_invoke$arity$variadic(G__60053,G__60054,seq60052__$2);\n}));\n\n/**\n * Check that `x` has a `:lib/uuid` in its [[options]]; generate a UUID and add it if it does not\n *   already have one.\n */\nmetabase.lib.options.ensure_uuid = (function metabase$lib$options$ensure_uuid(x){\nreturn metabase.lib.options.update_options(x,(function (options_map){\nvar G__60055 = options_map;\nif(cljs.core.not(new cljs.core.Keyword(\"lib\",\"uuid\",\"lib/uuid\",-2145250720).cljs$core$IFn$_invoke$arity$1(options_map))){\nreturn cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__60055,new cljs.core.Keyword(\"lib\",\"uuid\",\"lib/uuid\",-2145250720),cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.random_uuid()));\n} else {\nreturn G__60055;\n}\n}));\n});\n/**\n * Inputs: [x]\n *   Return: [:maybe :metabase.lib.schema.common/non-blank-string]\n *        \n * \n *   Get the `:lib/uuid` associated with something, e.g. an MBQL clause or join.\n */\nmetabase.lib.options.uuid = (function metabase$lib$options$uuid(x){\n\nreturn new cljs.core.Keyword(\"lib\",\"uuid\",\"lib/uuid\",-2145250720).cljs$core$IFn$_invoke$arity$1(metabase.lib.options.options(x));\n});\n","~:ns-info",["^ ","~:rename-macros",null,"~:renames",["^ "],"~:meta",["^ ","~:file","metabase/lib/options.cljc","~:line",1,"~:column",5,"~:end-line",1,"~:end-column",25],"~:ns-aliases",["^ ","~$cljs.loader","~$shadow.loader","~$clojure.pprint","~$cljs.pprint","~$clojure.spec.alpha","~$cljs.spec.alpha","~$clojure.core","~$cljs.core","~$clojure.spec.gen.alpha","~$cljs.spec.gen.alpha","~$clojure.core.match","~$cljs.core.match"],"~:use-macros",null,"~:excludes",["~#set",["~$uuid"]],"~:name","~$metabase.lib.options","~:reader-aliases",["^ "],"~:op","~:ns","~:imports",null,"~:requires",["^ ","~$mu","~$metabase.util.malli","~$i18n","~$metabase.shared.util.i18n","~$lib.schema.common","~$metabase.lib.schema.common","~$u","~$metabase.util","^C","^C","~$goog","^Z","^X","^X","^Y","^Y","^V","^V","^T","^T"],"~:seen",["^J",["~:require"]],"~:uses",null,"~:require-macros",["^ ","^C","^C","^S","^T","^U","^V","~$u","^Y","^Y","^Y","^V","^V","^T","^T"],"~:form",["~#list",["~$ns","^M",["^14",["~:refer-clojure","~:exclude",["^K"]]],["^14",["^10",["^X","~:as","^W"],["^V","^18","^U"],["^Y","^18","~$u"],["^T","^18","^S"]]]]],"~:flags",["^ ","^10",["^J",[]]],"~:js-deps",["^ "],"~:deps",["^Z","^C","^X","^V","^Y","^T"]],"^P","^M","~:resource-id",["~:shadow.build.classpath/resource","metabase/lib/options.cljc"],"~:compiled-at",1692014613518,"^N",["^ ","^S","^T","^U","^V","^W","^X","~$u","^Y","^C","^C","^Z","^Z","^X","^X","^Y","^Y","^V","^V","^T","^T"],"~:resource-name","metabase/lib/options.cljc","~:warnings",[],"~:source","(ns metabase.lib.options\n  (:refer-clojure :exclude [uuid])\n  (:require\n   [metabase.lib.schema.common :as lib.schema.common]\n   [metabase.shared.util.i18n :as i18n]\n   [metabase.util :as u]\n   [metabase.util.malli :as mu]))\n\n;;; TODO -- not 100% sure we actually need all of this stuff anymore.\n\n(defn- mbql-clause? [x]\n  (and (vector? x)\n       (keyword? (first x))))\n\n(mu/defn options :- [:maybe map?]\n  \"Return the Dashboard lib options map associated with an `x`. Lib options is currently used mostly for\n  the `:lib/uuid` we attach to everything to facilitate removing or replacing clauses later, but we will probably\n  stick more stuff in here in the future. Some clauses like `:field` use options extensively for different things.\n\n  Normally for an MBQL clause, options are an optional second argument, e.g.\n\n    [:= {:lib/uuid \\\"03baa510-0415-48ef-987a-462d789c8a02\\\"} 1 2]\n\n  a la Hiccup or Malli. The default implementation already knows how to handle clauses that follow this shape. For\n  historic reasons some MBQL clauses like `:field` or some of the string filter clauses have options as the last\n  argument; you'll have to implement this method, and [[with-options]], to deal with the special cases.\n\n  For maps like join specs, options are currently stored under the `:lib/options` key. Does this make sense? Not sure.\n  Maybe options should be included directly in the map, but then we'd have to decide which keys are and are not\n  options. Is a join `:alias` an option? Probably. What about a `:condition`? It's not optional. So for purposes of\n  writing Dashboard lib and tracking `:lib/uuid`, this approach seems ok in the short term.\"\n  [x]\n  (cond\n    (map? x)\n    (:lib/options x)\n\n    (mbql-clause? x)\n    (when (map? (second x))\n      (second x))\n\n    :else\n    nil))\n\n(mu/defn with-options\n  \"Update `x` so its [[options]] are `new-options`. If the clause or map already has options, this will\n  *replace* the old options; if it does not, this will set the new options.\n\n  If `x` is a map with `:lib/options` and `new-options` is `empty?`, this will drop `:lib/options` entirely.\n\n  You should probably prefer [[update-options]] to using this directly, so you don't stomp over existing stuff\n  unintentionally. Implement this if you need to teach Dashboard lib how to support something that doesn't follow the\n  usual patterns described in [[options]].\"\n  [x new-options :- [:maybe map?]]\n  (cond\n    (map? x)\n    (u/assoc-dissoc x :lib/options (not-empty new-options))\n\n    (mbql-clause? x)\n    (if ((some-fn nil? map?) (second x))\n      (assoc (vec x) 1 new-options)\n      (into [(first x) new-options] (rest x)))\n\n    :else\n    (throw (ex-info (i18n/tru \"Don''t know how to set options for {0}\" (pr-str x))\n                    {:x x}))))\n\n(defn update-options\n  \"Update the existing options in an `x` by applying `f` like this:\n\n    (apply f existing-options args)\"\n  [x f & args]\n  (let [current-options (options x)\n        new-options     (apply f current-options args)]\n    (with-options x new-options)))\n\n(defn ensure-uuid\n  \"Check that `x` has a `:lib/uuid` in its [[options]]; generate a UUID and add it if it does not\n  already have one.\"\n  [x]\n  (update-options x (fn [options-map]\n                      (cond-> options-map\n                        (not (:lib/uuid options-map))\n                        (assoc :lib/uuid (str (random-uuid)))))))\n\n(mu/defn uuid :- [:maybe ::lib.schema.common/non-blank-string]\n  \"Get the `:lib/uuid` associated with something, e.g. an MBQL clause or join.\"\n  [x]\n  (:lib/uuid (options x)))\n","~:reader-features",["^J",["~:cljs-release","~:cljs-dev","~:cljs"]],"~:cljc",true,"~:source-map-compact",["^ ","mappings",";AAUA,0CAAA,1CAAOA,4FAAcC;AAArB,AACE,SAAK,AAACC,wBAAQD,QACT,+BAAAE,9BAAU,AAACC,gBAAMH;;AAExB;;;;;;;;;;;;;;;;;;;;;;+BAAA,/BAASI,sEAiBNJ;AAjBH,AAAA;AAkBE,GACE,AAACK,qBAAKL;AACN,OAAA,4FAAcA;;AAFhB,GAIE,AAACD,wCAAaC;AACd,GAAM,AAACK,qBAAK,AAACC,iBAAON;AAApB,AACE,OAACM,iBAAON;;AADV;;;AALF,AAAA;;;;;AAWF;;;;;;;;;;;;;;oCAAA,pCAASO,gFASNP,EAAEQ;AATL,AAAA;AAUE,GACE,AAACH,qBAAKL;AACN,oCAAA,7BAACS,2BAAeT,gEAAe,AAACU,oBAAUF;;AAF5C,GAIE,AAACT,wCAAaC;AACd,oBAAI,AAAC,AAACW,gDAAQC,qBAAKP,sBAAM,AAACC,iBAAON;AAC/B,sEAAA,/DAACa,8CAAM,AAACC,cAAId,OAAKQ;;AACjB,oDAAA,7CAACO,gIAAM,AAACZ,gBAAMH,GAAGQ,oBAAa,AAACQ,eAAKhB;;;AAPxC,AAUE,MAAO,wUAAA,2CAAA,nXAACiB,gDAAQ,AAAAC,uEAAA,2FAAmD,AAACC,wGAAOnB,wGACvDA;;;;;AAExB,AAAA;;;;;sCAAA,8CAAAoB,pFAAMM;AAAN,AAAA,IAAAL,qBAAA;AAAA,AAAA,IAAAC,0BAAA,AAAA;AAAA,AAAA,IAAAC,wBAAA;;AAAA,AAAA,GAAA,CAAAA,wBAAAD;AAAA,AAAA,AAAAD,wBAAA,CAAA,UAAAE;;AAAA,eAAA,CAAAA,wBAAA;;;;AAAA;;;;AAAA,IAAAC,uBAAA,EAAA,CAAA,MAAA,AAAAH,4BAAA,AAAA,KAAAI,qBAAA,AAAAJ,yBAAA,KAAA,IAAA,OAAA;AAAA,AAAA,OAAAK,yEAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAAF;;;AAAA,AAAA,CAAA,2EAAA,3EAAME,sFAIH1B,EAAEgC,EAAIC;AAJT,AAKE,IAAMC,kBAAgB,AAAC9B,6BAAQJ;IACzBQ,cAAgB,AAAC2B,8CAAMH,EAAEE,gBAAgBD;AAD/C,AAEE,OAAC1B,kCAAaP,EAAEQ;;;AAPpB,CAAA,8DAAA,9DAAMkB;;AAAN;AAAA,CAAA,wDAAA,WAAAC,nEAAMD;AAAN,AAAA,IAAAE,WAAA,AAAAzB,gBAAAwB;IAAAA,eAAA,AAAAE,eAAAF;IAAAG,WAAA,AAAA3B,gBAAAwB;IAAAA,eAAA,AAAAE,eAAAF;AAAA,AAAA,IAAAI,qBAAA;AAAA,AAAA,OAAAA,wDAAAH,SAAAE,SAAAH;;;AAAA,AASA;;;;mCAAA,nCAAMS,8EAGHpC;AAHH,AAIE,OAAC0B,oCAAe1B,EAAE,WAAKqC;AAAL,AACE,IAAAC,WAAQD;AAAR,AAAA,GACE,AAACE,cAAI,AAAA,yFAAWF;AAChB,qDAAAC,SAAA,vDAACzB,kHAAgB,4CAAK,AAAC2B;;AAFzBF;;;;AAItB;;;;;;;4BAAA,5BAASG,gEAENzC;AAFH,AAAA;AAGE,OAAA,yFAAW,AAACI,6BAAQJ","names",["metabase.lib.options/mbql-clause?","x","cljs.core/vector?","cljs.core/Keyword","cljs.core/first","metabase.lib.options/options","cljs.core/map?","cljs.core/second","metabase.lib.options/with-options","new-options","metabase.util/assoc-dissoc","cljs.core/not-empty","cljs.core.some_fn","cljs.core/nil?","cljs.core.assoc","cljs.core/vec","cljs.core.into","cljs.core/rest","cljs.core.ex_info","metabase.shared.util.i18n.js_i18n","cljs.core.pr_str","var_args","args__5775__auto__","len__5769__auto__","i__5770__auto__","argseq__5776__auto__","cljs.core/IndexedSeq","metabase.lib.options/update-options","seq60052","G__60053","cljs.core/next","G__60054","self__5754__auto__","f","args","current-options","cljs.core.apply","metabase.lib.options/ensure-uuid","options-map","G__60055","cljs.core/not","cljs.core/random-uuid","metabase.lib.options/uuid"]],"~:used-vars",["^J",["~$metabase.lib.options/with-options","~$cljs.core/rest","~$metabase.lib.options/options","~$cljs.core/vector?","~$cljs.core/IndexedSeq","~$metabase.lib.options/ensure-uuid","~$cljs.core/apply","~$metabase.lib.options/update-options","~$cljs.core/Keyword","~$cljs.core/pr-str","~$cljs.core/into","~$cljs.core/map?","~$cljs.core/not-empty","~$cljs.core/nil?","~$metabase.shared.util.i18n/js-i18n","~$cljs.core/ex-info","~$cljs.core/second","~$metabase.util/assoc-dissoc","~$cljs.core/next","~$cljs.core/vec","~$metabase.lib.options/mbql-clause?","~$cljs.core/not","~$cljs.core/assoc","~$cljs.core/some-fn","~$cljs.core/first","~$cljs.core/random-uuid","~$metabase.lib.options/uuid"]]],"~:cache-keys",["~#cmap",[["^1=","camel_snake_kebab/internals/misc.cljc"],["5ae08f83ceb8959971e6334596bff0214bf6fdf2","~:shadow.build.compiler/resolve",["^ ","~:require-id",null,"~:deps-ids",["^J",[]],"~:deps-syms",["^Z","^C","~$camel-snake-kebab.internals.string-separator","~$clojure.string"]]],["^1=","goog/dom/tagname.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2<",["^ ","^2=",null,"^2>",["^J",[]],"^2?",["^Z","~$goog.dom.HtmlElement"]]],["^1=","metabase/shared/util/i18n.cljs"],["6c3c8615004b349dae9851ed547d516d45e04bd0","^2<",["^ ","^2=",null,"^2>",["^J",[]],"^2?",["^Z","^C","~$shadow.js.shim.module$ttag","^2A"]]],["^1=","goog/labs/useragent/platform.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2<",["^ ","^2=",null,"^2>",["^J",[]],"^2?",["^Z","~$goog.string.internal","~$goog.labs.userAgent.util","~$goog.labs.userAgent.highEntropy.highEntropyValue","~$goog.labs.userAgent.highEntropy.highEntropyData","~$goog.labs.userAgent"]]],["^1=","metabase/types.cljc"],["00232bf78b259e26a21c218c8f2d746ba7003a15","^2<",["^ ","^2=",null,"^2>",["^J",[]],"^2?",["^Z","^C","~$clojure.set","~$metabase.types.coercion-hierarchies","^Y"]]],["^1=","cljs/spec/gen/alpha.cljs"],["bc14df6666853ed869d7b88aaa864111c65d0c7f","^2<",["^ ","^2=",null,"^2>",["^J",[]],"^2?",["^Z","^C","~$goog.Uri"]]],["^1=","lambdaisland/glogi.cljs"],["76286836d4172602aa08006b2a754dda736ffe09","^2<",["^ ","^2=",null,"^2>",["^J",[]],"^2?",["^Z","^C","~$goog.log","~$goog.debug.Console","~$goog.array","^2A","~$goog.object","~$goog.debug.FancyWindow","~$goog.debug.DivConsole"]]],["^1=","goog/math/math.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2<",["^ ","^2=",null,"^2>",["^J",[]],"^2?",["^Z","~$goog.asserts"]]],["^1=","goog/html/trustedtypes.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2<",["^ ","^2=",null,"^2>",["^J",[]],"^2?",["^Z"]]],["^1=","goog/string/stringformat.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2<",["^ ","^2=",null,"^2>",["^J",[]],"^2?",["^Z","~$goog.string"]]],["^1=","malli/registry.cljc"],["514c6f7d69d7e40b56fa75bfd1a49a683ca15982","^2<",["^ ","^2=",null,"^2>",["^J",[]],"^2?",["^Z","^C"]]],["^1=","goog/labs/useragent/browser.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2<",["^ ","^2=",null,"^2>",["^J",[]],"^2?",["^Z","^2E","^2F","^2R","^2D","^2G","^2H"]]],["^1=","goog/html/safeurl.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2<",["^ ","^2=",null,"^2>",["^J",[]],"^2?",["^Z","^2R","~$goog.fs.url","~$goog.html.TrustedResourceUrl","~$goog.string.Const","~$goog.string.TypedString","^2D"]]],["^1=","goog/style/style.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2<",["^ ","^2=",null,"^2>",["^J",[]],"^2?",["^Z","^2R","~$goog.dom","~$goog.dom.NodeType","~$goog.dom.TagName","~$goog.dom.safe","~$goog.dom.vendor","~$goog.html.SafeStyleSheet","~$goog.math.Box","~$goog.math.Coordinate","~$goog.math.Rect","~$goog.math.Size","^2O","~$goog.reflect","^2S","~$goog.userAgent"]]],["^1=","goog/array/array.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2<",["^ ","^2=",null,"^2>",["^J",[]],"^2?",["^Z","^2R"]]],["^1=","goog/useragent/useragent.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2<",["^ ","^2=",null,"^2>",["^J",[]],"^2?",["^Z","~$goog.labs.userAgent.browser","~$goog.labs.userAgent.engine","~$goog.labs.userAgent.platform","^2E","^36","^2D"]]],["^1=","malli/generator.cljc"],["514c6f7d69d7e40b56fa75bfd1a49a683ca15982","^2<",["^ ","^2=",null,"^2>",["^J",[]],"^2?",["^Z","^C","^E","^2A","~$clojure.test.check","~$clojure.test.check.generators","~$clojure.test.check.properties","~$clojure.test.check.random","~$clojure.test.check.rose-tree","~$malli.core","~$malli.registry"]]],["^1=","clojure/test/check/properties.cljc"],["f33d988fd57bc9c11af1952db81c10f319c91416","^2<",["^ ","^2=",null,"^2>",["^J",[]],"^2?",["^Z","^C","^3<","~$clojure.test.check.results"]]],["^1=","clojure/test/check/generators.cljc"],["f33d988fd57bc9c11af1952db81c10f319c91416","^2<",["^ ","^2=",null,"^2>",["^J",[]],"^2?",["^Z","^C","^2A","^3>","^3?","^2S"]]],["^1=","goog/debug/error.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2<",["^ ","^2=",null,"^2>",["^J",[]],"^2?",["^Z"]]],["^1=","goog/flags/flags.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2<",["^ ","^2=",null,"^2>",["^J",[]],"^2?",["^Z"]]],["^1=","malli/util.cljc"],["514c6f7d69d7e40b56fa75bfd1a49a683ca15982","^2<",["^ ","^2=",null,"^2>",["^J",[]],"^2?",["^Z","^C","^C","^3@"]]],["^1=","clojure/test/check/random/doubles.cljs"],["f33d988fd57bc9c11af1952db81c10f319c91416","^2<",["^ ","^2=",null,"^2>",["^J",[]],"^2?",["^Z","^C","~$clojure.test.check.random.longs"]]],["^1=","net/cgrand/macrovich.cljc"],["abcb26cbfe0f8eef363b25525210c0fe1eb1f693","^2<",["^ ","^2=",null,"^2>",["^J",[]],"^2?",["^Z","^C"]]],["^1=","malli/destructure.cljc"],["514c6f7d69d7e40b56fa75bfd1a49a683ca15982","^2<",["^ ","^2=",null,"^2>",["^J",[]],"^2?",["^Z","^C","~$clojure.walk","^3@","~$malli.impl.util"]]],["^1=","goog/structs/circularbuffer.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2<",["^ ","^2=",null,"^2>",["^J",[]],"^2?",["^Z"]]],["^1=","weavejester/dependency.cljc"],["7fd7f8879313f6a7e295f7447e668bdf492c42c1","^2<",["^ ","^2=",null,"^2>",["^J",[]],"^2?",["^Z","^C","^2I"]]],["^1=","metabase/lib/schema/common.cljc"],["3f51a06335a7cb84c835d859c422919499874414","^2<",["^ ","^2=",null,"^2>",["^J",[]],"^2?",["^Z","^C","^2A","~$metabase.types","~$metabase.util.malli.registry"]]],["^1=","goog/dom/nodetype.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2<",["^ ","^2=",null,"^2>",["^J",[]],"^2?",["^Z"]]],["^1=","goog/labs/useragent/highentropy/highentropyvalue.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2<",["^ ","^2=",null,"^2>",["^J",[]],"^2?",["^Z","^2E","^2D"]]],["^1=","cljs/pprint.cljs"],["bc14df6666853ed869d7b88aaa864111c65d0c7f","^2<",["^ ","^2=",null,"^2>",["^J",[]],"^2?",["^Z","^C","^2A","^2S","~$goog.string.StringBuffer"]]],["^1=","clojure/test/check/rose_tree.cljc"],["f33d988fd57bc9c11af1952db81c10f319c91416","^2<",["^ ","^2=",null,"^2>",["^J",[]],"^2?",["^Z","^C"]]],["^1=","clojure/test/check/impl.cljc"],["f33d988fd57bc9c11af1952db81c10f319c91416","^2<",["^ ","^2=",null,"^2>",["^J",[]],"^2?",["^Z","^C"]]],["^1=","camel_snake_kebab/internals/string_separator.cljc"],["5ae08f83ceb8959971e6334596bff0214bf6fdf2","^2<",["^ ","^2=",null,"^2>",["^J",[]],"^2?",["^Z","^C","^2A"]]],["^1=","clojure/test/check/random.cljs"],["f33d988fd57bc9c11af1952db81c10f319c91416","^2<",["^ ","^2=",null,"^2>",["^J",[]],"^2?",["^Z","^C","~$clojure.test.check.random.doubles","^3C"]]],["^1=","goog/string/typedstring.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2<",["^ ","^2=",null,"^2>",["^J",[]],"^2?",["^Z"]]],["^1=","goog/object/object.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2<",["^ ","^2=",null,"^2>",["^J",[]],"^2?",["^Z"]]],["^1=","goog/dom/asserts.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2<",["^ ","^2=",null,"^2>",["^J",[]],"^2?",["^Z","^2R"]]],"~:SHADOW-TIMESTAMP",[1689947046000,1689947046000,1689947050000],["^1=","goog/math/long.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2<",["^ ","^2=",null,"^2>",["^J",[]],"^2?",["^Z","^2R","^36"]]],["^1=","goog/html/trustedresourceurl.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2<",["^ ","^2=",null,"^2>",["^J",[]],"^2?",["^Z","^2R","~$goog.fs.blob","^2T","~$goog.html.SafeScript","~$goog.html.trustedtypes","^2V","^2W"]]],["^1=","metabase/util/format.cljc"],["875f86a08288cb3ad5a6f15df988897eaf8613af","^2<",["^ ","^2=",null,"^2>",["^J",[]],"^2?",["^Z","^C","^2S"]]],["^1=","goog/math/irect.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2<",["^ ","^2=",null,"^2>",["^J",[]],"^2?",["^Z"]]],["^1=","goog/math/box.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2<",["^ ","^2=",null,"^2>",["^J",[]],"^2?",["^Z","^2R","^33"]]],["^1=","metabase/lib/options.cljc"],["1870276153adf026e09a3e9ed1ba8beaad80e1c8","^2<",["^ ","^2=",null,"^2>",["^J",[]],"^2?",["^Z","^C","^X","^V","^Y","^T"]]],["^1=","goog/string/internal.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2<",["^ ","^2=",null,"^2>",["^J",[]],"^2?",["^Z"]]],["^1=","clojure/test/check.cljc"],["f33d988fd57bc9c11af1952db81c10f319c91416","^2<",["^ ","^2=",null,"^2>",["^J",[]],"^2?",["^Z","^C","^3<","^3>","^3B","^3?","~$clojure.test.check.impl"]]],["^1=","goog/functions/functions.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2<",["^ ","^2=",null,"^2>",["^J",[]],"^2?",["^Z"]]],["^1=","goog/html/safestyle.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2<",["^ ","^2=",null,"^2>",["^J",[]],"^2?",["^Z","^2V","~$goog.html.SafeUrl","^2W","^2R","^2D"]]],["^1=","goog/dom/safe.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2<",["^ ","^2=",null,"^2>",["^J",[]],"^2?",["^Z","^2R","~$goog.asserts.dom","~$goog.dom.asserts","~$goog.functions","~$goog.html.SafeHtml","^3L","~$goog.html.SafeStyle","^3O","^2U","~$goog.html.uncheckedconversions","^2V","^2D"]]],["^1=","goog/asserts/dom.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2<",["^ ","^2=",null,"^2>",["^J",[]],"^2?",["^Z","^2Z","^2R","~$goog.dom.element"]]],["^1=","medley/core.cljc"],["f5117fa4c15ff14c4a0ab7db414b0f102afb0b8a","^2<",["^ ","^2=",null,"^2>",["^J",[]],"^2?",["^Z","^C"]]],["^1=","clojure/walk.cljs"],["bc14df6666853ed869d7b88aaa864111c65d0c7f","^2<",["^ ","^2=",null,"^2>",["^J",[]],"^2?",["^Z","^C"]]],["^1=","lambdaisland/glogi/console.cljs"],["76286836d4172602aa08006b2a754dda736ffe09","^2<",["^ ","^2=",null,"^2>",["^J",[]],"^2?",["^Z","^C","~$lambdaisland.glogi","~$lambdaisland.glogi.print","^2O","^2M"]]],["^1=","goog/html/safehtml.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2<",["^ ","^2=",null,"^2>",["^J",[]],"^2?",["^Z","^2V","^3L","^3T","^31","^3O","^2Z","^2U","^2W","^2R","^38","^2N","^2O","^2D","~$goog.dom.tags","^3M"]]],["^1=","goog/dom/tags.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2<",["^ ","^2=",null,"^2>",["^J",[]],"^2?",["^Z","^2O"]]],["^1=","goog/math/size.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2<",["^ ","^2=",null,"^2>",["^J",[]],"^2?",["^Z"]]],["^1=","malli/error.cljc"],["514c6f7d69d7e40b56fa75bfd1a49a683ca15982","^2<",["^ ","^2=",null,"^2>",["^J",[]],"^2?",["^Z","^C","^2A","^3@","~$malli.util"]]],["^1=","metabase/util/malli.cljc"],["0f9ba23be6bb9fa629617001e985b988d2322b17","^2<",["^ ","^2=",null,"^2>",["^J",[]],"^2?",["^Z","^C","^C","^3@","~$malli.destructure","~$malli.error","~$malli.generator","^3Z","^V","^Y"]]],["^1=","goog/labs/useragent/engine.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2<",["^ ","^2=",null,"^2>",["^J",[]],"^2?",["^Z","^2N","^2D","^2E"]]],["^1=","goog/fs/blob.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2<",["^ ","^2=",null,"^2>",["^J",[]],"^2?",["^Z"]]],["^1=","goog/dom/dom.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2<",["^ ","^2=",null,"^2>",["^J",[]],"^2?",["^Z","^2N","^2R","^3P","~$goog.dom.BrowserFeature","^2Y","^2Z","^2[","^3S","^3U","^33","^35","^2O","^2S","^2V","~$goog.string.Unicode","^37"]]],["^1=","borkdude/dynaload.cljc"],["accd696ba364b850b4d92e38f5a34d0e828a0ad1","^2<",["^ ","^2=",null,"^2>",["^J",[]],"^2?",["^Z","^C"]]],["^1=","metabase/util/log.cljs"],["7d8a3bf01eb27c2ba7269dc90dc218e46bcc1d3a","^2<",["^ ","^2=",null,"^2>",["^J",[]],"^2?",["^Z","^C","^2L","^2S","~$goog.string.format","^3W","~$lambdaisland.glogi.console"]]],["^1=","goog/asserts/asserts.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2<",["^ ","^2=",null,"^2>",["^J",[]],"^2?",["^Z","~$goog.debug.Error","^2Y"]]],["^1=","goog/debug/relativetimeprovider.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2<",["^ ","^2=",null,"^2>",["^J",[]],"^2?",["^Z"]]],["^1=","malli/sci.cljc"],["514c6f7d69d7e40b56fa75bfd1a49a683ca15982","^2<",["^ ","^2=",null,"^2>",["^J",[]],"^2?",["^Z","^C","~$borkdude.dynaload"]]],["^1=","goog/math/rect.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2<",["^ ","^2=",null,"^2>",["^J",[]],"^2?",["^Z","^2R","^32","^33","~$goog.math.IRect","^35"]]],["^1=","flatland/ordered/map.cljs"],["3a9cb9d79e47d77ecd4f4d550371ecf01464c461","^2<",["^ ","^2=",null,"^2>",["^J",[]],"^2?",["^Z","^C"]]],["^1=","goog/uri/uri.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2<",["^ ","^2=",null,"^2>",["^J",[]],"^2?",["^Z","^2N","^2R","~$goog.collections.maps","^2S","~$goog.structs","~$goog.uri.utils","~$goog.uri.utils.ComponentIndex","~$goog.uri.utils.StandardQueryParam"]]],["^1=","metabase/util/malli/registry.cljc"],["921d4f259bbe54cbeb6b88ae56937df492bdfb5e","^2<",["^ ","^2=",null,"^2>",["^J",[]],"^2?",["^Z","^C","^3@","^3A","^3Z"]]],["^1=","goog/labs/useragent/highentropy/highentropydata.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2<",["^ ","^2=",null,"^2>",["^J",[]],"^2?",["^Z","^2F"]]],["^1=","metabase/types/coercion_hierarchies.cljc"],["c3d70ef6080e044d61f13ff6bfd76490e2dcd0ac","^2<",["^ ","^2=",null,"^2>",["^J",[]],"^2?",["^Z","^C","^2I"]]],["^1=","goog/collections/maps.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2<",["^ ","^2=",null,"^2>",["^J",[]],"^2?",["^Z"]]],["^1=","goog/debug/divconsole.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2<",["^ ","^2=",null,"^2>",["^J",[]],"^2?",["^Z","~$goog.debug.HtmlFormatter","~$goog.dom.DomHelper","^2Z","^2[","^3S","^31","^2L","^2V","~$goog.style"]]],["^1=","malli/impl/util.cljc"],["514c6f7d69d7e40b56fa75bfd1a49a683ca15982","^2<",["^ ","^2=",null,"^2>",["^J",[]],"^2?",["^Z","^C"]]],["^1=","goog/debug/fancywindow.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2<",["^ ","^2=",null,"^2>",["^J",[]],"^2?",["^Z","^2N","^2R","~$goog.debug.DebugWindow","^4?","^2Z","^2[","^3S","^31","^2L","^2O","^2S","^2V","^37"]]],["^1=","goog/debug/formatter.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2<",["^ ","^2=",null,"^2>",["^J",[]],"^2?",["^Z","~$goog.debug","~$goog.debug.RelativeTimeProvider","^3S","^3O","^3U","^2L","^2V"]]],["^1=","metabase/shared/util/namespaces.cljs"],["00687008abd6eb291bc9d5ff1fff73210e0bbe6e","^2<",["^ ","^2=",null,"^2>",["^J",[]],"^2?",["^Z","^C"]]],["^1=","goog/fs/url.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2<",["^ ","^2=",null,"^2>",["^J",[]],"^2?",["^Z"]]],["^1=","goog/base.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2<",["^ ","^2=",null,"^2>",["^J",[]],"^2?",[]]],["^1=","goog/structs/structs.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2<",["^ ","^2=",null,"^2>",["^J",[]],"^2?",["^Z","^2N","^2O"]]],["^1=","clojure/string.cljs"],["bc14df6666853ed869d7b88aaa864111c65d0c7f","^2<",["^ ","^2=",null,"^2>",["^J",[]],"^2?",["^Z","^C","^2S","^3H"]]],["^1=","metabase/util.cljc"],["2eb945a6741f1450ecac08a9087b862ce52b9e3a","^2<",["^ ","^2=",null,"^2>",["^J",[]],"^2?",["^Z","^C","~$camel-snake-kebab.internals.macros","~$clojure.data","^?","^2I","^2A","^3D","~$flatland.ordered.map","~$medley.core","^V","~$metabase.shared.util.namespaces","~$metabase.util.format","~$metabase.util.log","~$net.cgrand.macrovich","~$weavejester.dependency"]]],["^1=","clojure/test/check/random/longs/bit_count_impl.cljs"],["f33d988fd57bc9c11af1952db81c10f319c91416","^2<",["^ ","^2=",null,"^2>",["^J",[]],"^2?",["^Z","^C"]]],["^1=","malli/impl/regex.cljc"],["514c6f7d69d7e40b56fa75bfd1a49a683ca15982","^2<",["^ ","^2=",null,"^2>",["^J",[]],"^2?",["^Z","^C","^3E"]]],["^1=","camel_snake_kebab/internals/macros.cljc"],["5ae08f83ceb8959971e6334596bff0214bf6fdf2","^2<",["^ ","^2=",null,"^2>",["^J",[]],"^2?",["^Z","^C","~$camel-snake-kebab.internals.alter-name","~$camel-snake-kebab.internals.misc"]]],["^1=","goog/string/string.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2<",["^ ","^2=",null,"^2>",["^J",[]],"^2?",["^Z","^2[","^3U","^2V","^2D"]]],["^1=","malli/core.cljc"],["514c6f7d69d7e40b56fa75bfd1a49a683ca15982","^2<",["^ ","^2=",null,"^2>",["^J",[]],"^2?",["^Z","^C","^C","~$malli.impl.regex","^3E","^3A","~$malli.sci"]]],["^1=","clojure/data.cljs"],["bc14df6666853ed869d7b88aaa864111c65d0c7f","^2<",["^ ","^2=",null,"^2>",["^J",[]],"^2?",["^Z","^C","^2I"]]],["^1=","goog/reflect/reflect.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2<",["^ ","^2=",null,"^2>",["^J",[]],"^2?",["^Z"]]],["^1=","goog/labs/useragent/util.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2<",["^ ","^2=",null,"^2>",["^J",[]],"^2?",["^Z","^2D","^2H"]]],["^1=","goog/debug/debug.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2<",["^ ","^2=",null,"^2>",["^J",[]],"^2?",["^Z","^2N","~$goog.debug.errorcontext"]]],["^1=","goog/string/stringbuffer.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2<",["^ ","^2=",null,"^2>",["^J",[]],"^2?",["^Z"]]],["~:shadow.build.js-support/require","ttag"],["^2C","shadow.js.shim.module$ttag.js","require","^2<",["^ ","^2=",null,"^2>",["^J",[]],"^2?",["^Z"]]],["^1=","goog/math/coordinate.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2<",["^ ","^2=",null,"^2>",["^J",[]],"^2?",["^Z","~$goog.math"]]],["^1=","goog/debug/errorcontext.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2<",["^ ","^2=",null,"^2>",["^J",[]],"^2?",["^Z"]]],["^1=","goog/labs/useragent/useragent.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2<",["^ ","^2=",null,"^2>",["^J",[]],"^2?",["^Z","~$goog.flags"]]],["^1=","goog/dom/element.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2<",["^ ","^2=",null,"^2>",["^J",[]],"^2?",["^Z","^2Y","^2Z"]]],["^1=","goog/html/uncheckedconversions.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2<",["^ ","^2=",null,"^2>",["^J",[]],"^2?",["^Z","^2R","^3S","^3L","^3T","^31","^3O","^2U","^2V","^2D"]]],["^1=","goog/debug/debugwindow.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2<",["^ ","^2=",null,"^2>",["^J",[]],"^2?",["^Z","^4>","^2[","^3S","^31","^2L","^2V","~$goog.structs.CircularBuffer","^37"]]],["^1=","goog/dom/htmlelement.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2<",["^ ","^2=",null,"^2>",["^J",[]],"^2?",["^Z"]]],["^1=","cljs/core.cljs"],["bc14df6666853ed869d7b88aaa864111c65d0c7f","^2<",["^ ","^2=",null,"^2>",["^J",[]],"^2?",["^Z","~$goog.math.Long","~$goog.math.Integer","^2S","^2O","^2N","^2K","^3H"]]],["^1=","goog/html/safescript.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2<",["^ ","^2=",null,"^2>",["^J",[]],"^2?",["^Z","^2V","^2W","^3M","^2R"]]],["^1=","clojure/test/check/random/longs.cljs"],["f33d988fd57bc9c11af1952db81c10f319c91416","^2<",["^ ","^2=",null,"^2>",["^J",[]],"^2?",["^Z","^C","~$clojure.test.check.random.longs.bit-count-impl","^4V","^C"]]],["^1=","goog/log/log.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2<",["^ ","^2=",null,"^2>",["^J",[]],"^2?",["^Z","^2R","^4B"]]],["^1=","camel_snake_kebab/internals/alter_name.cljc"],["5ae08f83ceb8959971e6334596bff0214bf6fdf2","^2<",["^ ","^2=",null,"^2>",["^J",[]],"^2?",["^Z","^C"]]],["^1=","goog/html/safestylesheet.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2<",["^ ","^2=",null,"^2>",["^J",[]],"^2?",["^Z","^2V","^3T","^2W","^2O","^2R","^2D"]]],["^1=","goog/math/integer.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2<",["^ ","^2=",null,"^2>",["^J",[]],"^2?",["^Z","^36"]]],["^1=","goog/debug/console.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2<",["^ ","^2=",null,"^2>",["^J",[]],"^2?",["^Z","~$goog.debug.TextFormatter","^2L"]]],["^1=","lambdaisland/glogi/print.cljs"],["76286836d4172602aa08006b2a754dda736ffe09","^2<",["^ ","^2=",null,"^2>",["^J",[]],"^2?",["^Z","^C","^3W","^2O"]]],["^1=","goog/dom/browserfeature.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2<",["^ ","^2=",null,"^2>",["^J",[]],"^2?",["^Z","^37"]]],["^1=","clojure/set.cljs"],["bc14df6666853ed869d7b88aaa864111c65d0c7f","^2<",["^ ","^2=",null,"^2>",["^J",[]],"^2?",["^Z","^C"]]],["^1=","goog/uri/utils.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2<",["^ ","^2=",null,"^2>",["^J",[]],"^2?",["^Z","^2R","^2S"]]],["^1=","goog/string/const.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2<",["^ ","^2=",null,"^2>",["^J",[]],"^2?",["^Z","^2R","^2W"]]],["^1=","goog/dom/vendor.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2<",["^ ","^2=",null,"^2>",["^J",[]],"^2?",["^Z","^2S","^37"]]],["^1=","clojure/test/check/results.cljc"],["f33d988fd57bc9c11af1952db81c10f319c91416","^2<",["^ ","^2=",null,"^2>",["^J",[]],"^2?",["^Z","^C"]]]]],"~:clj-info",["^ ","jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/analyzer/impl.cljc",1689947050000,"jar:file:/root/.m2/repository/instaparse/instaparse/1.4.12/instaparse-1.4.12.jar!/instaparse/line_col.clj",1689946146000,"jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/source_map/base64_vlq.clj",1689947050000,"jar:file:/root/.m2/repository/instaparse/instaparse/1.4.12/instaparse-1.4.12.jar!/instaparse/viz.clj",1689946146000,"jar:file:/root/.m2/repository/org/clojure/tools.namespace/1.4.4/tools.namespace-1.4.4.jar!/clojure/tools/namespace/parse.cljc",1689946139000,"jar:file:/root/.m2/repository/weavejester/dependency/0.2.1/dependency-0.2.1.jar!/weavejester/dependency.cljc",1689946093000,"jar:file:/root/.m2/repository/instaparse/instaparse/1.4.12/instaparse-1.4.12.jar!/instaparse/transform.clj",1689946146000,"jar:file:/root/.m2/repository/ring/ring-codec/1.2.0/ring-codec-1.2.0.jar!/ring/util/codec.clj",1689946172000,"jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/instant.clj",1689947050000,"jar:file:/root/.m2/repository/org/clojure/tools.reader/1.3.6/tools.reader-1.3.6.jar!/clojure/tools/reader/default_data_readers.clj",1689946174000,"jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/pprint.cljc",1689947050000,"jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/externs.clj",1689947050000,"jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/vendor/clojure/tools/reader/default_data_readers.clj",1689947050000,"jar:file:/root/.m2/repository/prismatic/schema/1.4.1/schema-1.4.1.jar!/schema/core.cljc",1689946172000,"file:/home/gmrworkspace/dashboard/shared/src/metabase/shared/util/i18n.clj",1690286812000,"jar:file:/root/.m2/repository/org/clojure/tools.reader/1.3.6/tools.reader-1.3.6.jar!/clojure/tools/reader/edn.clj",1689946174000,"jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/compiler.cljc",1689947050000,"jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/env.cljc",1689947050000,"jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/analyzer/impl/namespaces.cljc",1689947050000,"jar:file:/root/.m2/repository/prismatic/schema/1.4.1/schema-1.4.1.jar!/schema/macros.clj",1689946172000,"file:/home/gmrworkspace/dashboard/src/metabase/util/i18n/plural.clj",1690286813000,"jar:file:/root/.m2/repository/metosin/malli/0.10.2/malli-0.10.2.jar!/malli/core.cljc",1689946170000,"jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/source_map.clj",1689947050000,"jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/util.cljc",1689947050000,"file:/home/gmrworkspace/dashboard/src/metabase/util.cljc",1690286813000,"jar:file:/root/.m2/repository/nano-id/nano-id/1.0.0/nano-id-1.0.0.jar!/nano_id/core.cljc",1689946171000,"file:/home/gmrworkspace/dashboard/src/metabase/plugins/classloader.clj",1692013156125,"jar:file:/root/.m2/repository/medley/medley/1.4.0/medley-1.4.0.jar!/medley/core.cljc",1689946185000,"jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/analyzer.cljc",1689947050000,"jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/analyzer/passes.cljc",1689947050000,"jar:file:/root/.m2/repository/org/clojure/test.check/1.1.1/test.check-1.1.1.jar!/clojure/test/check/random.clj",1689946177000,"jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/vendor/clojure/data/json.clj",1689947050000,"file:/home/gmrworkspace/dashboard/src/metabase/util/format.cljc",1690286813000,"jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/source_map/base64.clj",1689947050000,"jar:file:/root/.m2/repository/riddley/riddley/0.2.0/riddley-0.2.0.jar!/riddley/walk.clj",1689946160000,"jar:file:/root/.m2/repository/instaparse/instaparse/1.4.12/instaparse-1.4.12.jar!/instaparse/reduction.clj",1689946146000,"jar:file:/root/.m2/repository/org/tcrawley/dynapath/1.1.0/dynapath-1.1.0.jar!/dynapath/util.clj",1689946174000,"jar:file:/root/.m2/repository/camel-snake-kebab/camel-snake-kebab/0.4.3/camel-snake-kebab-0.4.3.jar!/camel_snake_kebab/internals/macros.cljc",1689946178000,"jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/vendor/clojure/tools/reader/reader_types.clj",1689947050000,"jar:file:/root/.m2/repository/instaparse/instaparse/1.4.12/instaparse-1.4.12.jar!/instaparse/auto_flatten_seq.clj",1689946146000,"jar:file:/root/.m2/repository/instaparse/instaparse/1.4.12/instaparse-1.4.12.jar!/instaparse/core.clj",1689946146000,"jar:file:/root/.m2/repository/metosin/malli/0.10.2/malli-0.10.2.jar!/malli/generator.cljc",1689946170000,"jar:file:/root/.m2/repository/org/clojure/core.cache/1.0.225/core.cache-1.0.225.jar!/clojure/core/cache.clj",1689946183000,"jar:file:/root/.m2/repository/metosin/malli/0.10.2/malli-0.10.2.jar!/malli/sci.cljc",1689946170000,"jar:file:/root/.m2/repository/potemkin/potemkin/0.4.6/potemkin-0.4.6.jar!/potemkin/types.clj",1689946176000,"jar:file:/root/.m2/repository/org/clojure/test.check/1.1.1/test.check-1.1.1.jar!/clojure/test/check/properties.cljc",1689946177000,"jar:file:/root/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/set.clj",1689946092000,"jar:file:/root/.m2/repository/org/clojure/math.numeric-tower/0.0.5/math.numeric-tower-0.0.5.jar!/clojure/math/numeric_tower.clj",1689946148000,"jar:file:/root/.m2/repository/net/cgrand/macrovich/0.2.1/macrovich-0.2.1.jar!/net/cgrand/macrovich.cljc",1689946165000,"jar:file:/root/.m2/repository/colorize/colorize/0.1.1/colorize-0.1.1.jar!/colorize/core.clj",1689946104000,"jar:file:/root/.m2/repository/borkdude/dynaload/0.3.5/dynaload-0.3.5.jar!/borkdude/dynaload.cljc",1689946165000,"jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/vendor/clojure/tools/reader/impl/inspect.clj",1689947050000,"jar:file:/root/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/string.clj",1689946092000,"jar:file:/root/.m2/repository/potemkin/potemkin/0.4.6/potemkin-0.4.6.jar!/potemkin.clj",1689946176000,"jar:file:/root/.m2/repository/instaparse/instaparse/1.4.12/instaparse-1.4.12.jar!/instaparse/failure.clj",1689946146000,"jar:file:/root/.m2/repository/prismatic/schema/1.4.1/schema-1.4.1.jar!/schema/spec/variant.cljc",1689946172000,"jar:file:/root/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/core.clj",1689946092000,"file:/home/gmrworkspace/dashboard/src/metabase/util/i18n/impl.clj",1692013156125,"jar:file:/root/.m2/repository/org/clojure/tools.namespace/1.4.4/tools.namespace-1.4.4.jar!/clojure/tools/namespace/dependency.cljc",1689946139000,"jar:file:/root/.m2/repository/prismatic/schema/1.4.1/schema-1.4.1.jar!/schema/spec/leaf.cljc",1689946172000,"jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/analyzer/passes/and_or.cljc",1689947050000,"jar:file:/root/.m2/repository/org/clojure/test.check/1.1.1/test.check-1.1.1.jar!/clojure/test/check.cljc",1689946177000,"jar:file:/root/.m2/repository/riddley/riddley/0.2.0/riddley-0.2.0.jar!/riddley/compiler.clj",1689946160000,"jar:file:/root/.m2/repository/org/clojure/core.memoize/1.0.257/core.memoize-1.0.257.jar!/clojure/core/memoize.clj",1689946178000,"jar:file:/root/.m2/repository/metosin/malli/0.10.2/malli-0.10.2.jar!/malli/destructure.cljc",1689946170000,"jar:file:/root/.m2/repository/instaparse/instaparse/1.4.12/instaparse-1.4.12.jar!/instaparse/print.clj",1689946146000,"jar:file:/root/.m2/repository/org/clojure/tools.namespace/1.4.4/tools.namespace-1.4.4.jar!/clojure/tools/namespace/track.cljc",1689946139000,"jar:file:/root/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/pprint.clj",1689946092000,"jar:file:/root/.m2/repository/org/clojure/java.classpath/1.0.0/java.classpath-1.0.0.jar!/clojure/java/classpath.clj",1689946162000,"jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/js_deps.cljc",1689947050000,"jar:file:/root/.m2/repository/metosin/malli/0.10.2/malli-0.10.2.jar!/malli/impl/regex.cljc",1689946170000,"jar:file:/root/.m2/repository/cheshire/cheshire/5.11.0/cheshire-5.11.0.jar!/cheshire/factory.clj",1689946173000,"jar:file:/root/.m2/repository/org/clojure/tools.reader/1.3.6/tools.reader-1.3.6.jar!/clojure/tools/reader/impl/errors.clj",1689946174000,"jar:file:/root/.m2/repository/metosin/malli/0.10.2/malli-0.10.2.jar!/malli/experimental.cljc",1689946170000,"jar:file:/root/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/walk.clj",1689946092000,"jar:file:/root/.m2/repository/org/clojure/tools.reader/1.3.6/tools.reader-1.3.6.jar!/clojure/tools/reader.clj",1689946174000,"jar:file:/root/.m2/repository/prismatic/schema/1.4.1/schema-1.4.1.jar!/schema/spec/core.cljc",1689946172000,"jar:file:/root/.m2/repository/org/clojure/test.check/1.1.1/test.check-1.1.1.jar!/clojure/test/check/generators.cljc",1689946177000,"jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/core.cljc",1689947050000,"jar:file:/root/.m2/repository/cheshire/cheshire/5.11.0/cheshire-5.11.0.jar!/cheshire/generate.clj",1689946173000,"jar:file:/root/.m2/repository/metosin/malli/0.10.2/malli-0.10.2.jar!/malli/experimental/time.cljc",1689946170000,"jar:file:/root/.m2/repository/org/clojure/tools.reader/1.3.6/tools.reader-1.3.6.jar!/clojure/tools/reader/reader_types.clj",1689946174000,"jar:file:/root/.m2/repository/cheshire/cheshire/5.11.0/cheshire-5.11.0.jar!/cheshire/parse.clj",1689946173000,"file:/home/gmrworkspace/dashboard/src/metabase/util/i18n.clj",1692013156125,"jar:file:/root/.m2/repository/instaparse/instaparse/1.4.12/instaparse-1.4.12.jar!/instaparse/cfg.clj",1689946146000,"jar:file:/root/.m2/repository/cheshire/cheshire/5.11.0/cheshire-5.11.0.jar!/cheshire/core.clj",1689946173000,"jar:file:/root/.m2/repository/metosin/malli/0.10.2/malli-0.10.2.jar!/malli/impl/util.cljc",1689946170000,"jar:file:/root/.m2/repository/metosin/malli/0.10.2/malli-0.10.2.jar!/malli/registry.cljc",1689946170000,"jar:file:/root/.m2/repository/instaparse/instaparse/1.4.12/instaparse-1.4.12.jar!/instaparse/gll.clj",1689946146000,"jar:file:/root/.m2/repository/binaryage/devtools/1.0.6/devtools-1.0.6.jar!/devtools/defaults.clj",1689947054000,"jar:file:/root/.m2/repository/metosin/malli/0.10.2/malli-0.10.2.jar!/malli/instrument.clj",1689946170000,"jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/vendor/clojure/tools/reader.clj",1689947050000,"jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/spec/gen/alpha.cljc",1689947050000,"jar:file:/root/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/edn.clj",1689946092000,"jar:file:/root/.m2/repository/nano-id/nano-id/1.0.0/nano-id-1.0.0.jar!/nano_id/random.cljc",1689946171000,"jar:file:/root/.m2/repository/environ/environ/1.2.0/environ-1.2.0.jar!/environ/core.cljc",1689946163000,"jar:file:/root/.m2/repository/prismatic/schema/1.4.1/schema-1.4.1.jar!/schema/spec/collection.cljc",1689946172000,"jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/vendor/clojure/tools/reader/impl/errors.clj",1689947050000,"jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/tagged_literals.cljc",1689947050000,"jar:file:/root/.m2/repository/instaparse/instaparse/1.4.12/instaparse-1.4.12.jar!/instaparse/repeat.clj",1689946146000,"jar:file:/root/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/java/io.clj",1689946092000,"jar:file:/root/.m2/repository/org/clojure/test.check/1.1.1/test.check-1.1.1.jar!/clojure/test/check/results.cljc",1689946177000,"jar:file:/root/.m2/repository/com/lambdaisland/glogi/1.2.164/glogi-1.2.164.jar!/lambdaisland/glogi.clj",1689947043000,"jar:file:/root/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/instant.clj",1689946092000,"file:/home/gmrworkspace/dashboard/shared/src/metabase/shared/util/namespaces.clj",1690286812000,"jar:file:/root/.m2/repository/org/clojure/tools.namespace/1.4.4/tools.namespace-1.4.4.jar!/clojure/tools/namespace/file.clj",1689946139000,"jar:file:/root/.m2/repository/org/clojure/spec.alpha/0.3.218/spec.alpha-0.3.218.jar!/clojure/spec/gen/alpha.clj",1689946117000,"jar:file:/root/.m2/repository/metosin/malli/0.10.2/malli-0.10.2.jar!/malli/error.cljc",1689946170000,"jar:file:/root/.m2/repository/prismatic/schema/1.4.1/schema-1.4.1.jar!/schema/utils.cljc",1689946172000,"file:/home/gmrworkspace/dashboard/src/metabase/util/malli/registry.cljc",1690286813000,"file:/home/gmrworkspace/dashboard/src/metabase/config.clj",1692013154929,"file:/home/gmrworkspace/dashboard/src/metabase/util/log.clj",1690286813000,"file:/home/gmrworkspace/dashboard/src/metabase/util/malli.cljc",1690286813000,"jar:file:/root/.m2/repository/org/clojure/test.check/1.1.1/test.check-1.1.1.jar!/clojure/test/check/rose_tree.cljc",1689946177000,"jar:file:/root/.m2/repository/org/clojure/tools.reader/1.3.6/tools.reader-1.3.6.jar!/clojure/tools/reader/impl/inspect.clj",1689946174000,"jar:file:/root/.m2/repository/instaparse/instaparse/1.4.12/instaparse-1.4.12.jar!/instaparse/combinators_source.clj",1689946146000,"jar:file:/root/.m2/repository/instaparse/instaparse/1.4.12/instaparse-1.4.12.jar!/instaparse/abnf.clj",1689946146000,"jar:file:/root/.m2/repository/org/clojure/tools.namespace/1.4.4/tools.namespace-1.4.4.jar!/clojure/tools/namespace/find.clj",1689946139000,"jar:file:/root/.m2/repository/org/tcrawley/dynapath/1.1.0/dynapath-1.1.0.jar!/dynapath/dynamic_classpath.clj",1689946174000,"jar:file:/root/.m2/repository/cheshire/cheshire/5.11.0/cheshire-5.11.0.jar!/cheshire/generate_seq.clj",1689946173000,"jar:file:/root/.m2/repository/metosin/malli/0.10.2/malli-0.10.2.jar!/malli/util.cljc",1689946170000,"file:/home/gmrworkspace/dashboard/src/metabase/util/jvm.clj",1692013156125],"~:analyzer",["^ ","^3",null,"^4",["^ "],"^5",["^ ","^6","metabase/lib/options.cljc","^7",1,"^8",5,"^9",1,"^:",25],"^;",["^ ","^<","^=","^>","^?","^@","^A","^B","^C","^D","^E","^F","^G"],"^H",null,"^I",["^J",["^K"]],"^L","^M","^N",["^ "],"^Q",null,"^R",["^ ","^S","^T","^U","^V","^W","^X","~$u","^Y","^C","^C","^Z","^Z","^X","^X","^Y","^Y","^V","^V","^T","^T"],"^[",["^J",["^10"]],"^11",null,"~:defs",["^ ","~$mbql-clause?",["^ ","~:protocol-inline",null,"^5",["^ ","^6","metabase/lib/options.cljc","^7",11,"^8",8,"^9",11,"^:",20,"~:private",true,"~:arglists",["^14",["~$quote",["^14",[["~$x"]]]]]],"^7U",true,"^L","^23","^6","metabase/lib/options.cljc","^:",20,"~:method-params",["^14",[["~$x"]]],"~:protocol-impl",null,"~:arglists-meta",["^14",[null,null]],"^8",1,"~:variadic?",false,"^7",11,"~:ret-tag","~$boolean","^9",11,"~:max-fixed-arity",1,"~:fn-var",true,"^7V",["^14",["^7W",["^14",[["~$x"]]]]]],"~$options",["^ ","~:schema",["~:=>",["~:cat","~:any"],["~:maybe","~$map?"]],"~:validate!","id60049","^7T",null,"^5",["^ ","^85",["^86",["^87","^88"],["^89","^8:"]],"^8;","id60049","^6","metabase/lib/options.cljc","^:",17,"^8",10,"~:raw-arglists",["^14",["^7W",["^14",[["~$x"]]]]],"^7",15,"^9",15,"^7V",["^14",["^7W",["^14",[["~$x"]]]]],"~:doc","Inputs: [x]\n  Return: [:maybe map?]\n          \n\n  Return the Dashboard lib options map associated with an `x`. Lib options is currently used mostly for\n  the `:lib/uuid` we attach to everything to facilitate removing or replacing clauses later, but we will probably\n  stick more stuff in here in the future. Some clauses like `:field` use options extensively for different things.\n\n  Normally for an MBQL clause, options are an optional second argument, e.g.\n\n    [:= {:lib/uuid \"03baa510-0415-48ef-987a-462d789c8a02\"} 1 2]\n\n  a la Hiccup or Malli. The default implementation already knows how to handle clauses that follow this shape. For\n  historic reasons some MBQL clauses like `:field` or some of the string filter clauses have options as the last\n  argument; you'll have to implement this method, and [[with-options]], to deal with the special cases.\n\n  For maps like join specs, options are currently stored under the `:lib/options` key. Does this make sense? Not sure.\n  Maybe options should be included directly in the map, but then we'd have to decide which keys are and are not\n  options. Is a join `:alias` an option? Probably. What about a `:condition`? It's not optional. So for purposes of\n  writing Dashboard lib and tracking `:lib/uuid`, this approach seems ok in the short term."],"^L","^1M","^6","metabase/lib/options.cljc","^:",17,"^7X",["^14",[["~$x"]]],"^7Y",null,"^7Z",["^14",[null,null]],"^8",1,"^7[",false,"^8<",["^14",["^7W",["^14",[["~$x"]]]]],"^7",15,"^80",["^J",["~$any","~$clj-nil"]],"^9",15,"^82",1,"^83",true,"^7V",["^14",["^7W",["^14",[["~$x"]]]]],"^8=","Inputs: [x]\n  Return: [:maybe map?]\n          \n\n  Return the Dashboard lib options map associated with an `x`. Lib options is currently used mostly for\n  the `:lib/uuid` we attach to everything to facilitate removing or replacing clauses later, but we will probably\n  stick more stuff in here in the future. Some clauses like `:field` use options extensively for different things.\n\n  Normally for an MBQL clause, options are an optional second argument, e.g.\n\n    [:= {:lib/uuid \"03baa510-0415-48ef-987a-462d789c8a02\"} 1 2]\n\n  a la Hiccup or Malli. The default implementation already knows how to handle clauses that follow this shape. For\n  historic reasons some MBQL clauses like `:field` or some of the string filter clauses have options as the last\n  argument; you'll have to implement this method, and [[with-options]], to deal with the special cases.\n\n  For maps like join specs, options are currently stored under the `:lib/options` key. Does this make sense? Not sure.\n  Maybe options should be included directly in the map, but then we'd have to decide which keys are and are not\n  options. Is a join `:alias` an option? Probably. What about a `:condition`? It's not optional. So for purposes of\n  writing Dashboard lib and tracking `:lib/uuid`, this approach seems ok in the short term."],"~$with-options",["^ ","^85",["^86",["^87","^88",["^89","^8:"]],"^88"],"^8;","id60051","^7T",null,"^5",["^ ","^85",["^86",["^87","^88",["^89","^8:"]],"^88"],"^8;","id60051","^6","metabase/lib/options.cljc","^:",22,"^8",10,"^8<",["^14",["^7W",["^14",[["~$x","~$new-options","~:-",["^89","^8:"]]]]]],"^7",44,"^9",44,"^7V",["^14",["^7W",["^14",[["~$x","^8A"]]]]],"^8=","Inputs: [x new-options :- [:maybe map?]]\n  Return: :any\n          \n\n  Update `x` so its [[options]] are `new-options`. If the clause or map already has options, this will\n  *replace* the old options; if it does not, this will set the new options.\n\n  If `x` is a map with `:lib/options` and `new-options` is `empty?`, this will drop `:lib/options` entirely.\n\n  You should probably prefer [[update-options]] to using this directly, so you don't stomp over existing stuff\n  unintentionally. Implement this if you need to teach Dashboard lib how to support something that doesn't follow the\n  usual patterns described in [[options]]."],"^L","^1K","^6","metabase/lib/options.cljc","^:",22,"^7X",["^14",[["~$x","^8A"]]],"^7Y",null,"^7Z",["^14",[null,null]],"^8",1,"^7[",false,"^8<",["^14",["^7W",["^14",[["~$x","^8A","~:-",["^89","^8:"]]]]]],"^7",44,"^80",["^J",[null,"~$clj","^8>","^8?"]],"^9",44,"^82",2,"^83",true,"^7V",["^14",["^7W",["^14",[["~$x","^8A"]]]]],"^8=","Inputs: [x new-options :- [:maybe map?]]\n  Return: :any\n          \n\n  Update `x` so its [[options]] are `new-options`. If the clause or map already has options, this will\n  *replace* the old options; if it does not, this will set the new options.\n\n  If `x` is a map with `:lib/options` and `new-options` is `empty?`, this will drop `:lib/options` entirely.\n\n  You should probably prefer [[update-options]] to using this directly, so you don't stomp over existing stuff\n  unintentionally. Implement this if you need to teach Dashboard lib how to support something that doesn't follow the\n  usual patterns described in [[options]]."],"~$update-options",["^ ","^7T",null,"^5",["^ ","^6","metabase/lib/options.cljc","^7",67,"^8",7,"^9",67,"^:",21,"^7V",["^14",["^7W",["^14",[["~$x","~$f","~$&","~$args"]]]]],"^8=","Update the existing options in an `x` by applying `f` like this:\n\n    (apply f existing-options args)","~:top-fn",["^ ","^7[",true,"~:fixed-arity",2,"^82",2,"^7X",[["^14",["~$x","~$f","^8D"]]],"^7V",["^14",[["~$x","~$f","~$&","^8D"]]],"^7Z",["^14",[null]]]],"^L","^1R","^6","metabase/lib/options.cljc","^:",21,"^8E",["^ ","^7[",true,"^8F",2,"^82",2,"^7X",[["^14",["~$x","~$f","^8D"]]],"^7V",["^14",[["~$x","~$f","~$&","^8D"]]],"^7Z",["^14",[null]]],"^7X",[["^14",["~$x","~$f","^8D"]]],"^7Y",null,"^8F",2,"^7Z",["^14",[null]],"^8",1,"^7[",true,"~:methods",[["^ ","^8F",2,"^7[",true,"~:tag",["^J",[null,"^8B","^8>","^8?"]]]],"^7",67,"^80","^8>","^9",67,"^82",2,"^83",true,"^7V",["^14",[["~$x","~$f","~$&","^8D"]]],"^8=","Update the existing options in an `x` by applying `f` like this:\n\n    (apply f existing-options args)"],"~$ensure-uuid",["^ ","^7T",null,"^5",["^ ","^6","metabase/lib/options.cljc","^7",76,"^8",7,"^9",76,"^:",18,"^7V",["^14",["^7W",["^14",[["~$x"]]]]],"^8=","Check that `x` has a `:lib/uuid` in its [[options]]; generate a UUID and add it if it does not\n  already have one."],"^L","^1P","^6","metabase/lib/options.cljc","^:",18,"^7X",["^14",[["~$x"]]],"^7Y",null,"^7Z",["^14",[null,null]],"^8",1,"^7[",false,"^7",76,"^80",["^J",[null,"^8B","^8>","^8?"]],"^9",76,"^82",1,"^83",true,"^7V",["^14",["^7W",["^14",[["~$x"]]]]],"^8=","Check that `x` has a `:lib/uuid` in its [[options]]; generate a UUID and add it if it does not\n  already have one."],"^K",["^ ","^85",["^86",["^87","^88"],["^89","~:metabase.lib.schema.common/non-blank-string"]],"^8;","id60061","^7T",null,"^5",["^ ","^85",["^86",["^87","^88"],["^89","^8J"]],"^8;","id60061","^6","metabase/lib/options.cljc","^:",14,"^8",10,"^8<",["^14",["^7W",["^14",[["~$x"]]]]],"^7",85,"^9",85,"^7V",["^14",["^7W",["^14",[["~$x"]]]]],"^8=","Inputs: [x]\n  Return: [:maybe :metabase.lib.schema.common/non-blank-string]\n          \n\n  Get the `:lib/uuid` associated with something, e.g. an MBQL clause or join."],"^L","^29","^6","metabase/lib/options.cljc","^:",14,"^7X",["^14",[["~$x"]]],"^7Y",null,"^7Z",["^14",[null,null]],"^8",1,"^7[",false,"^8<",["^14",["^7W",["^14",[["~$x"]]]]],"^7",85,"^80","^8>","^9",85,"^82",1,"^83",true,"^7V",["^14",["^7W",["^14",[["~$x"]]]]],"^8=","Inputs: [x]\n  Return: [:maybe :metabase.lib.schema.common/non-blank-string]\n          \n\n  Get the `:lib/uuid` associated with something, e.g. an MBQL clause or join."]],"^12",["^ ","^C","^C","^S","^T","^U","^V","~$u","^Y","^Y","^Y","^V","^V","^T","^T"],"~:cljs.analyzer/constants",["^ ","^[",["^J",["~:lib/uuid","~:else","~:lib/options","~:x"]],"~:order",["^8N","^8M","~:x","^8L"]],"^19",["^ ","^10",["^J",[]]],"^1:",["^ "],"^1;",["^Z","^C","^X","^V","^Y","^T"]],"^P","^M","~:ns-specs",["^ "],"~:ns-spec-vars",["^J",[]],"~:compiler-options",["^2;",[["^8R","~:static-fns"],true,["^8R","~:shadow-tweaks"],null,["^8R","~:source-map-inline"],null,["^8R","~:elide-asserts"],false,["^8R","~:optimize-constants"],null,["^8R","^1@"],null,["^8R","~:external-config"],null,["^8R","~:tooling-config"],null,["^8R","~:emit-constants"],null,["^8R","~:load-tests"],null,["^8R","~:form-size-threshold"],null,["^8R","~:global-goog-object&array"],null,["^8R","~:data-readers"],null,["^8R","~:infer-externs"],"~:auto",["^8R","^1B"],["^J",["^1C","^1D"]],["~:js-options","~:js-provider"],"^10",["~:mode"],"~:dev",["^8R","~:fn-invoke-direct"],null,["^8R","~:source-map"],"/dev/null"]]]