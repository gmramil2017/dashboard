["^ ","~:output",["^ ","~:js","goog.provide('metabase.lib.equality');\nif((typeof metabase !== 'undefined') && (typeof metabase.lib !== 'undefined') && (typeof metabase.lib.equality !== 'undefined') && (typeof metabase.lib.equality._EQ_ !== 'undefined')){\n} else {\n/**\n * Determine whether two already-normalized pMBQL maps, clauses, or other sorts of expressions are equal. The basic rule\n *   is that two things are considered equal if they are [[clojure.core/=]], or, if they are both maps, if they\n *   are [[clojure.core/=]] if you ignore all qualified keyword keys besides `:lib/type`.\n */\nmetabase.lib.equality._EQ_ = (function (){var method_table__5642__auto__ = cljs.core.atom.cljs$core$IFn$_invoke$arity$1(cljs.core.PersistentArrayMap.EMPTY);\nvar prefer_table__5643__auto__ = cljs.core.atom.cljs$core$IFn$_invoke$arity$1(cljs.core.PersistentArrayMap.EMPTY);\nvar method_cache__5644__auto__ = cljs.core.atom.cljs$core$IFn$_invoke$arity$1(cljs.core.PersistentArrayMap.EMPTY);\nvar cached_hierarchy__5645__auto__ = cljs.core.atom.cljs$core$IFn$_invoke$arity$1(cljs.core.PersistentArrayMap.EMPTY);\nvar hierarchy__5646__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$3(new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"hierarchy\",\"hierarchy\",-1053470341),metabase.lib.hierarchy.hierarchy], null),new cljs.core.Keyword(null,\"hierarchy\",\"hierarchy\",-1053470341),(function (){var fexpr__64912 = cljs.core.get_global_hierarchy;\nreturn (fexpr__64912.cljs$core$IFn$_invoke$arity$0 ? fexpr__64912.cljs$core$IFn$_invoke$arity$0() : fexpr__64912.call(null));\n})());\nreturn (new cljs.core.MultiFn(cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(\"metabase.lib.equality\",\"=\"),(function (x,y){\nvar x_dispatch_value = metabase.lib.dispatch.dispatch_value(x);\nvar y_dispatch_value = metabase.lib.dispatch.dispatch_value(y);\nif(cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2(x_dispatch_value,y_dispatch_value)){\nreturn new cljs.core.Keyword(\"metabase.lib.equality\",\"different-dispatch-values\",\"metabase.lib.equality/different-dispatch-values\",-2107733395);\n} else {\nreturn x_dispatch_value;\n}\n}),new cljs.core.Keyword(null,\"default\",\"default\",-1987822328),hierarchy__5646__auto__,method_table__5642__auto__,prefer_table__5643__auto__,method_cache__5644__auto__,cached_hierarchy__5645__auto__));\n})();\n}\nmetabase.lib.equality._EQ_.cljs$core$IMultiFn$_add_method$arity$3(null,new cljs.core.Keyword(\"metabase.lib.equality\",\"different-dispatch-values\",\"metabase.lib.equality/different-dispatch-values\",-2107733395),(function (_x,_y){\nreturn false;\n}));\n/**\n * Set of keys in a map that we consider relevant for [[=]] purposes.\n */\nmetabase.lib.equality.relevant_keys_set = (function metabase$lib$equality$relevant_keys_set(m){\nreturn cljs.core.into.cljs$core$IFn$_invoke$arity$3(cljs.core.PersistentHashSet.EMPTY,cljs.core.remove.cljs$core$IFn$_invoke$arity$1((function (k){\nreturn ((cljs.core.qualified_keyword_QMARK_(k)) && (cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2(k,new cljs.core.Keyword(\"lib\",\"type\",\"lib/type\",1175424801))));\n})),cljs.core.keys(m));\n});\nmetabase.lib.equality._EQ_.cljs$core$IMultiFn$_add_method$arity$3(null,new cljs.core.Keyword(\"dispatch-type\",\"map\",\"dispatch-type/map\",-758153422),(function (m1,m2){\nvar m1_keys = metabase.lib.equality.relevant_keys_set(m1);\nvar m2_keys = metabase.lib.equality.relevant_keys_set(m2);\nreturn ((cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(m1_keys,m2_keys)) && (cljs.core.every_QMARK_((function (k){\nreturn metabase.lib.equality._EQ_.cljs$core$IFn$_invoke$arity$2(cljs.core.get.cljs$core$IFn$_invoke$arity$2(m1,k),cljs.core.get.cljs$core$IFn$_invoke$arity$2(m2,k));\n}),m1_keys)));\n}));\nmetabase.lib.equality._EQ_.cljs$core$IMultiFn$_add_method$arity$3(null,new cljs.core.Keyword(\"dispatch-type\",\"sequential\",\"dispatch-type/sequential\",1056993969),(function (xs,ys){\nvar and__5043__auto__ = cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(cljs.core.count(xs),cljs.core.count(ys));\nif(and__5043__auto__){\nvar G__64923 = xs;\nvar vec__64926 = G__64923;\nvar seq__64927 = cljs.core.seq(vec__64926);\nvar first__64928 = cljs.core.first(seq__64927);\nvar seq__64927__$1 = cljs.core.next(seq__64927);\nvar x = first__64928;\nvar more_x = seq__64927__$1;\nvar G__64924 = ys;\nvar vec__64929 = G__64924;\nvar seq__64930 = cljs.core.seq(vec__64929);\nvar first__64931 = cljs.core.first(seq__64930);\nvar seq__64930__$1 = cljs.core.next(seq__64930);\nvar y = first__64931;\nvar more_y = seq__64930__$1;\nvar G__64923__$1 = G__64923;\nvar G__64924__$1 = G__64924;\nwhile(true){\nvar vec__64932 = G__64923__$1;\nvar seq__64933 = cljs.core.seq(vec__64932);\nvar first__64934 = cljs.core.first(seq__64933);\nvar seq__64933__$1 = cljs.core.next(seq__64933);\nvar x__$1 = first__64934;\nvar more_x__$1 = seq__64933__$1;\nvar vec__64935 = G__64924__$1;\nvar seq__64936 = cljs.core.seq(vec__64935);\nvar first__64937 = cljs.core.first(seq__64936);\nvar seq__64936__$1 = cljs.core.next(seq__64936);\nvar y__$1 = first__64937;\nvar more_y__$1 = seq__64936__$1;\nvar and__5043__auto____$1 = metabase.lib.equality._EQ_.cljs$core$IFn$_invoke$arity$2(x__$1,y__$1);\nif(cljs.core.truth_(and__5043__auto____$1)){\nvar or__5045__auto__ = cljs.core.empty_QMARK_(more_x__$1);\nif(or__5045__auto__){\nreturn or__5045__auto__;\n} else {\nvar G__64989 = more_x__$1;\nvar G__64990 = more_y__$1;\nG__64923__$1 = G__64989;\nG__64924__$1 = G__64990;\ncontinue;\n}\n} else {\nreturn and__5043__auto____$1;\n}\nbreak;\n}\n} else {\nreturn and__5043__auto__;\n}\n}));\nmetabase.lib.equality._STAR_side__GT_uuid__GT_index_STAR_ = null;\nmetabase.lib.equality.aggregation_uuid__GT_index = (function metabase$lib$equality$aggregation_uuid__GT_index(stage){\nreturn cljs.core.into.cljs$core$IFn$_invoke$arity$3(cljs.core.PersistentArrayMap.EMPTY,cljs.core.map_indexed.cljs$core$IFn$_invoke$arity$1((function (idx,p__64939){\nvar vec__64940 = p__64939;\nvar _tag = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__64940,(0),null);\nvar map__64943 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__64940,(1),null);\nvar map__64943__$1 = cljs.core.__destructure_map(map__64943);\nvar ag_uuid = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__64943__$1,new cljs.core.Keyword(\"lib\",\"uuid\",\"lib/uuid\",-2145250720));\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [ag_uuid,idx], null);\n})),new cljs.core.Keyword(null,\"aggregation\",\"aggregation\",1597476696).cljs$core$IFn$_invoke$arity$1(stage));\n});\nmetabase.lib.equality._EQ_.cljs$core$IMultiFn$_add_method$arity$3(null,new cljs.core.Keyword(\"mbql.stage\",\"mbql\",\"mbql.stage/mbql\",1578747798),(function (x,y){\nvar _STAR_side__GT_uuid__GT_index_STAR__orig_val__64946 = metabase.lib.equality._STAR_side__GT_uuid__GT_index_STAR_;\nvar _STAR_side__GT_uuid__GT_index_STAR__temp_val__64947 = new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"left\",\"left\",-399115937),metabase.lib.equality.aggregation_uuid__GT_index(x),new cljs.core.Keyword(null,\"right\",\"right\",-452581833),metabase.lib.equality.aggregation_uuid__GT_index(y)], null);\n(metabase.lib.equality._STAR_side__GT_uuid__GT_index_STAR_ = _STAR_side__GT_uuid__GT_index_STAR__temp_val__64947);\n\ntry{var fexpr__64949 = cljs.core.get_method(metabase.lib.equality._EQ_,new cljs.core.Keyword(\"dispatch-type\",\"map\",\"dispatch-type/map\",-758153422));\nreturn (fexpr__64949.cljs$core$IFn$_invoke$arity$2 ? fexpr__64949.cljs$core$IFn$_invoke$arity$2(x,y) : fexpr__64949.call(null,x,y));\n}finally {(metabase.lib.equality._STAR_side__GT_uuid__GT_index_STAR_ = _STAR_side__GT_uuid__GT_index_STAR__orig_val__64946);\n}}));\nmetabase.lib.equality._EQ_.cljs$core$IMultiFn$_add_method$arity$3(null,new cljs.core.Keyword(null,\"aggregation\",\"aggregation\",1597476696),(function (p__64950,p__64951){\nvar vec__64953 = p__64950;\nvar x_tag = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__64953,(0),null);\nvar x_opts = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__64953,(1),null);\nvar x_uuid = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__64953,(2),null);\nvar x = vec__64953;\nvar vec__64956 = p__64951;\nvar y_tag = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__64956,(0),null);\nvar y_opts = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__64956,(1),null);\nvar y_uuid = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__64956,(2),null);\nvar y = vec__64956;\nvar and__5043__auto__ = cljs.core._EQ_.cljs$core$IFn$_invoke$arity$variadic((3),cljs.core.count(x),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([cljs.core.count(y)], 0));\nif(and__5043__auto__){\nvar and__5043__auto____$1 = cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(x_tag,y_tag);\nif(and__5043__auto____$1){\nvar and__5043__auto____$2 = metabase.lib.equality._EQ_.cljs$core$IFn$_invoke$arity$2(x_opts,y_opts);\nif(cljs.core.truth_(and__5043__auto____$2)){\nif(cljs.core.truth_(metabase.lib.equality._STAR_side__GT_uuid__GT_index_STAR_)){\nreturn cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(cljs.core.get_in.cljs$core$IFn$_invoke$arity$3(metabase.lib.equality._STAR_side__GT_uuid__GT_index_STAR_,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"left\",\"left\",-399115937),x_uuid], null),new cljs.core.Keyword(\"metabase.lib.equality\",\"no-left\",\"metabase.lib.equality/no-left\",-1403666439)),cljs.core.get_in.cljs$core$IFn$_invoke$arity$3(metabase.lib.equality._STAR_side__GT_uuid__GT_index_STAR_,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"right\",\"right\",-452581833),y_uuid], null),new cljs.core.Keyword(\"metabase.lib.equality\",\"no-right\",\"metabase.lib.equality/no-right\",2015744769)));\n} else {\nreturn cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(x_uuid,y_uuid);\n}\n} else {\nreturn and__5043__auto____$2;\n}\n} else {\nreturn and__5043__auto____$1;\n}\n} else {\nreturn and__5043__auto__;\n}\n}));\nmetabase.lib.equality._EQ_.cljs$core$IMultiFn$_add_method$arity$3(null,new cljs.core.Keyword(null,\"default\",\"default\",-1987822328),(function (x,y){\nif(cljs.core.map_QMARK_(x)){\nvar fexpr__64959 = cljs.core.get_method(metabase.lib.equality._EQ_,new cljs.core.Keyword(\"dispatch-type\",\"map\",\"dispatch-type/map\",-758153422));\nreturn (fexpr__64959.cljs$core$IFn$_invoke$arity$2 ? fexpr__64959.cljs$core$IFn$_invoke$arity$2(x,y) : fexpr__64959.call(null,x,y));\n} else {\nif(cljs.core.sequential_QMARK_(x)){\nvar fexpr__64960 = cljs.core.get_method(metabase.lib.equality._EQ_,new cljs.core.Keyword(\"dispatch-type\",\"sequential\",\"dispatch-type/sequential\",1056993969));\nreturn (fexpr__64960.cljs$core$IFn$_invoke$arity$2 ? fexpr__64960.cljs$core$IFn$_invoke$arity$2(x,y) : fexpr__64960.call(null,x,y));\n} else {\nreturn cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(x,y);\n\n}\n}\n}));\n/**\n * Are two refs `x` and `y` equal?\n * \n *   DEPRECATED: use [[find-closest-matching-ref]] instead. This does not work if things like `:base-type` are missing or\n *   differ slightly, or handle `:binning` correctly, let alone when things are broken more significantly. If we improve\n *   type calculation it shouldn't break existing queries... right?\n */\nmetabase.lib.equality.ref_EQ_ = (function metabase$lib$equality$ref_EQ_(x,y){\nvar or__5045__auto__ = metabase.lib.equality._EQ_.cljs$core$IFn$_invoke$arity$2(x,y);\nif(cljs.core.truth_(or__5045__auto__)){\nreturn or__5045__auto__;\n} else {\nreturn metabase.lib.equality._EQ_.cljs$core$IFn$_invoke$arity$2(metabase.lib.util.with_default_effective_type(x),metabase.lib.util.with_default_effective_type(y));\n}\n});\nmetabase.lib.equality.update_options_remove_namespaced_keys = (function metabase$lib$equality$update_options_remove_namespaced_keys(a_ref){\nreturn metabase.lib.options.update_options(a_ref,(function (options){\nreturn cljs.core.into.cljs$core$IFn$_invoke$arity$3(cljs.core.PersistentArrayMap.EMPTY,cljs.core.remove.cljs$core$IFn$_invoke$arity$1((function (p__64962){\nvar vec__64963 = p__64962;\nvar k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__64963,(0),null);\nvar _v = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__64963,(1),null);\nreturn cljs.core.qualified_keyword_QMARK_(k);\n})),options);\n}));\n});\n/**\n * Find the ref that most closely matches `a-ref` from a sequence of `refs`. This is meant to power things\n *   like [[metabase.lib.breakout/breakoutable-columns]] which are supposed to include `:breakout-position` for columns\n *   that are already present as a breakout; sometimes the column in the breakout does not exactly match what MLv2 would\n *   have generated. So try to figure out which column it is referring to.\n * \n *   This first looks for a matching ref with a strict comparison, then in increasingly less-strict comparisons until it\n *   finds something that matches. This is mostly to work around bugs like #31482 where MLv1 generated queries with\n *   `:field` refs that did not include join aliases even tho the Fields came from joined Tables... we still know the\n *   Fields are the same if they have the same IDs.\n * \n *   The three-arity version can also find matches between integer Field ID references like `[:field {} 1]` and\n *   equivalent string column name field literal references like `[:field {} \"bird_type\"]` by resolving Field IDs using\n *   a `metadata-providerable` (something that can be treated as a metadata provider, e.g. a `query` with a\n *   MetadataProvider associated with it). This is the ultimately hacky workaround for totally busted legacy queries.\n *   Note that this currently only works when `a-ref` is the one with the integer Field ID and `refs` have string literal\n *   column names; it does not work the other way around. Luckily we currently don't have problems with MLv1/legacy\n *   queries accidentally using string :field literals where it shouldn't have been doing so.\n */\nmetabase.lib.equality.find_closest_matching_ref = (function metabase$lib$equality$find_closest_matching_ref(var_args){\nvar G__64971 = arguments.length;\nswitch (G__64971) {\ncase 2:\nreturn metabase.lib.equality.find_closest_matching_ref.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ncase 3:\nreturn metabase.lib.equality.find_closest_matching_ref.cljs$core$IFn$_invoke$arity$3((arguments[(0)]),(arguments[(1)]),(arguments[(2)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\n(metabase.lib.equality.find_closest_matching_ref.cljs$core$IFn$_invoke$arity$2 = (function (a_ref,refs){\nvar xform = cljs.core.identity;\nvar more_xforms = new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [((function (xform){\nreturn (function (p1__64966_SHARP_){\nreturn metabase.lib.options.update_options.cljs$core$IFn$_invoke$arity$variadic(p1__64966_SHARP_,medley.core.update_existing,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"binning\",\"binning\",1709835866),cljs.core.dissoc,new cljs.core.Keyword(null,\"metadata-fn\",\"metadata-fn\",915781389),new cljs.core.Keyword(\"lib\",\"type\",\"lib/type\",1175424801)], 0));\n});})(xform))\n,metabase.lib.equality.update_options_remove_namespaced_keys,((function (xform){\nreturn (function (p1__64967_SHARP_){\nreturn metabase.lib.options.update_options.cljs$core$IFn$_invoke$arity$variadic(p1__64967_SHARP_,cljs.core.dissoc,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"base-type\",\"base-type\",1167971299),new cljs.core.Keyword(null,\"effective-type\",\"effective-type\",-355725458)], 0));\n});})(xform))\n,((function (xform){\nreturn (function (p1__64968_SHARP_){\nreturn metabase.lib.options.update_options.cljs$core$IFn$_invoke$arity$variadic(p1__64968_SHARP_,cljs.core.dissoc,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"join-alias\",\"join-alias\",1454206794)], 0));\n});})(xform))\n], null);\nwhile(true){\nvar or__5045__auto__ = (function (){var a_ref__$1 = (xform.cljs$core$IFn$_invoke$arity$1 ? xform.cljs$core$IFn$_invoke$arity$1(a_ref) : xform.call(null,a_ref));\nreturn medley.core.find_first.cljs$core$IFn$_invoke$arity$2(((function (xform,more_xforms,a_ref__$1){\nreturn (function (p1__64969_SHARP_){\nreturn metabase.lib.equality._EQ_.cljs$core$IFn$_invoke$arity$2((xform.cljs$core$IFn$_invoke$arity$1 ? xform.cljs$core$IFn$_invoke$arity$1(p1__64969_SHARP_) : xform.call(null,p1__64969_SHARP_)),a_ref__$1);\n});})(xform,more_xforms,a_ref__$1))\n,refs);\n})();\nif(cljs.core.truth_(or__5045__auto__)){\nreturn or__5045__auto__;\n} else {\nif(cljs.core.seq(more_xforms)){\nvar G__65000 = cljs.core.comp.cljs$core$IFn$_invoke$arity$2(xform,cljs.core.first(more_xforms));\nvar G__65001 = cljs.core.rest(more_xforms);\nxform = G__65000;\nmore_xforms = G__65001;\ncontinue;\n} else {\nreturn null;\n}\n}\nbreak;\n}\n}));\n\n(metabase.lib.equality.find_closest_matching_ref.cljs$core$IFn$_invoke$arity$3 = (function (metadata_providerable,a_ref,refs){\nvar or__5045__auto__ = metabase.lib.equality.find_closest_matching_ref.cljs$core$IFn$_invoke$arity$2(a_ref,refs);\nif(cljs.core.truth_(or__5045__auto__)){\nreturn or__5045__auto__;\n} else {\nreturn cljs.core.first(cljs.core.seq(cljs.core.filter.cljs$core$IFn$_invoke$arity$2(cljs.core.some_QMARK_,(function metabase$lib$equality$match_64974(_AMPERSAND_parents,_AMPERSAND_match){\ntry{if(((cljs.core.vector_QMARK_(_AMPERSAND_match)) && ((cljs.core.count(_AMPERSAND_match) === 3)))){\ntry{var _AMPERSAND_match_0__64978 = cljs.core.nth.cljs$core$IFn$_invoke$arity$2(_AMPERSAND_match,(0));\nif(cljs.core.keyword_identical_QMARK_(_AMPERSAND_match_0__64978,new cljs.core.Keyword(null,\"field\",\"field\",-1302436500))){\ntry{var _AMPERSAND_match_2__64980 = cljs.core.nth.cljs$core$IFn$_invoke$arity$2(_AMPERSAND_match,(2));\nif(cljs.core.integer_QMARK_(_AMPERSAND_match_2__64980)){\nvar field_id = cljs.core.nth.cljs$core$IFn$_invoke$arity$2(_AMPERSAND_match,(2));\nvar opts = cljs.core.nth.cljs$core$IFn$_invoke$arity$2(_AMPERSAND_match,(1));\nreturn new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var temp__5804__auto__ = new cljs.core.Keyword(null,\"name\",\"name\",1843675177).cljs$core$IFn$_invoke$arity$1(metabase.lib.metadata.field(metadata_providerable,field_id));\nif(cljs.core.truth_(temp__5804__auto__)){\nvar field_name = temp__5804__auto__;\nreturn metabase.lib.equality.find_closest_matching_ref.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"field\",\"field\",-1302436500),opts,field_name], null),refs);\n} else {\nreturn null;\n}\n})()], null);\n} else {\nthrow cljs.core.match.backtrack;\n\n}\n}catch (e64983){if((e64983 instanceof Error)){\nvar e__62528__auto__ = e64983;\nif((e__62528__auto__ === cljs.core.match.backtrack)){\nthrow cljs.core.match.backtrack;\n} else {\nthrow e__62528__auto__;\n}\n} else {\nthrow e64983;\n\n}\n}} else {\nthrow cljs.core.match.backtrack;\n\n}\n}catch (e64982){if((e64982 instanceof Error)){\nvar e__62528__auto__ = e64982;\nif((e__62528__auto__ === cljs.core.match.backtrack)){\nthrow cljs.core.match.backtrack;\n} else {\nthrow e__62528__auto__;\n}\n} else {\nthrow e64982;\n\n}\n}} else {\nthrow cljs.core.match.backtrack;\n\n}\n}catch (e64981){if((e64981 instanceof Error)){\nvar e__62528__auto__ = e64981;\nif((e__62528__auto__ === cljs.core.match.backtrack)){\nreturn metabase.mbql.util.match.impl.match_in_collection(metabase$lib$equality$match_64974,_AMPERSAND_parents,_AMPERSAND_match);\n} else {\nthrow e__62528__auto__;\n}\n} else {\nthrow e64981;\n\n}\n}})(cljs.core.PersistentVector.EMPTY,a_ref))));\n}\n}));\n\n(metabase.lib.equality.find_closest_matching_ref.cljs$lang$maxFixedArity = 3);\n\n","~:ns-info",["^ ","~:rename-macros",null,"~:renames",["^ "],"~:meta",["^ ","~:doc","Logic for determining whether two pMBQL queries are equal.","~:file","metabase/lib/equality.cljc","~:line",1,"~:column",5,"~:end-line",1,"~:end-column",26],"~:ns-aliases",["^ ","~$cljs.loader","~$shadow.loader","~$clojure.pprint","~$cljs.pprint","~$clojure.spec.alpha","~$cljs.spec.alpha","~$clojure.core","~$cljs.core","~$clojure.spec.gen.alpha","~$cljs.spec.gen.alpha","~$clojure.core.match","~$cljs.core.match"],"~:use-macros",null,"~:excludes",["~#set",["~$="]],"~:name","~$metabase.lib.equality","~:reader-aliases",["^ "],"~:op","~:ns","~:imports",null,"~:requires",["^ ","~$metabase.lib.metadata","^S","~$metabase.mbql.util.match","^T","~$lib.metadata","^S","^D","^D","~$metabase.lib.util","^V","~$goog","^W","~$lib.options","~$metabase.lib.options","~$lib.hierarchy","~$metabase.lib.hierarchy","~$m","~$medley.core","~$lib.util","^V","~$lib.dispatch","~$metabase.lib.dispatch","^[","^[","^Y","^Y","~$mbql.u.match","^T","^13","^13","^10","^10"],"~:seen",["^K",["~:require"]],"~:uses",null,"~:require-macros",["^ ","^D","^D","^T","^T","^14","^T"],"~:form",["~#list",["~$ns","^M","Logic for determining whether two pMBQL queries are equal.",["^1:",["~:refer-clojure","~:exclude",["~$="]]],["^1:",["^16",["^10","~:as","~$m"],["^13","^1>","^12"],["^[","^1>","^Z"],["^S","^1>","^U"],["^Y","^1>","^X"],["^V","^1>","^11"],["^T","^1>","^14"]]]]],"~:flags",["^ ","^16",["^K",[]]],"~:js-deps",["^ "],"~:deps",["^W","^D","^10","^13","^[","^S","^Y","^V","^T"]],"^P","^M","~:resource-id",["~:shadow.build.classpath/resource","metabase/lib/equality.cljc"],"~:compiled-at",1692014617348,"^N",["^ ","^S","^S","^T","^T","^U","^S","^D","^D","^V","^V","^W","^W","^X","^Y","^Z","^[","~$m","^10","^11","^V","^12","^13","^[","^[","^Y","^Y","^14","^T","^13","^13","^10","^10"],"~:resource-name","metabase/lib/equality.cljc","~:warnings",[],"~:source","(ns metabase.lib.equality\n  \"Logic for determining whether two pMBQL queries are equal.\"\n  (:refer-clojure :exclude [=])\n  (:require\n   [medley.core :as m]\n   [metabase.lib.dispatch :as lib.dispatch]\n   [metabase.lib.hierarchy :as lib.hierarchy]\n   [metabase.lib.metadata :as lib.metadata]\n   [metabase.lib.options :as lib.options]\n   [metabase.lib.util :as lib.util]\n   [metabase.mbql.util.match :as mbql.u.match]))\n\n(defmulti =\n  \"Determine whether two already-normalized pMBQL maps, clauses, or other sorts of expressions are equal. The basic rule\n  is that two things are considered equal if they are [[clojure.core/=]], or, if they are both maps, if they\n  are [[clojure.core/=]] if you ignore all qualified keyword keys besides `:lib/type`.\"\n  {:arglists '([x y])}\n  ;; two things with different dispatch values (for maps, the `:lib/type` key; for MBQL clauses, the tag, and for\n  ;; everything else, the `:dispatch-type/*` key) can't be equal.\n  (fn [x y]\n    (let [x-dispatch-value (lib.dispatch/dispatch-value x)\n          y-dispatch-value (lib.dispatch/dispatch-value y)]\n      (if (not= x-dispatch-value y-dispatch-value)\n        ::different-dispatch-values\n        x-dispatch-value)))\n  :hierarchy lib.hierarchy/hierarchy)\n\n(defmethod = ::different-dispatch-values\n  [_x _y]\n  false)\n\n(defn- relevant-keys-set\n  \"Set of keys in a map that we consider relevant for [[=]] purposes.\"\n  [m]\n  (into #{}\n        (remove (fn [k]\n                  (and (qualified-keyword? k)\n                       (not= k :lib/type))))\n        (keys m)))\n\n(defmethod = :dispatch-type/map\n  [m1 m2]\n  (let [m1-keys (relevant-keys-set m1)\n        m2-keys (relevant-keys-set m2)]\n    (and (clojure.core/= m1-keys m2-keys)\n         (every? (fn [k]\n                   (= (get m1 k)\n                      (get m2 k)))\n                 m1-keys))))\n\n(defmethod = :dispatch-type/sequential\n  [xs ys]\n  (and (clojure.core/= (count xs) (count ys))\n       (loop [[x & more-x] xs, [y & more-y] ys]\n         (and (= x y)\n              (or (empty? more-x)\n                  (recur more-x more-y))))))\n\n(def ^:private ^:dynamic *side->uuid->index* nil)\n\n(defn- aggregation-uuid->index\n  [stage]\n  (into {}\n        (map-indexed (fn [idx [_tag {ag-uuid :lib/uuid}]]\n                       [ag-uuid idx]))\n        (:aggregation stage)))\n\n(defmethod = :mbql.stage/mbql\n  [x y]\n  (binding [*side->uuid->index* {:left (aggregation-uuid->index x)\n                                 :right (aggregation-uuid->index y)}]\n    ((get-method = :dispatch-type/map) x y)))\n\n(defmethod = :aggregation\n  [[x-tag x-opts x-uuid :as x] [y-tag y-opts y-uuid :as y]]\n  (and (clojure.core/= 3 (count x) (count y))\n       (clojure.core/= x-tag y-tag)\n       (= x-opts y-opts)\n       ;; If nil, it means we aren't comparing a stage, so just compare the uuid directly\n       (if *side->uuid->index*\n         (clojure.core/= (get-in *side->uuid->index* [:left x-uuid] ::no-left)\n                         (get-in *side->uuid->index* [:right y-uuid] ::no-right))\n         (clojure.core/= x-uuid y-uuid))))\n\n;;; if we've gotten here we at least know the dispatch values for `x` and `y` are the same, which means the types will\n;;; be the same.\n(defmethod = :default\n  [x y]\n  (cond\n    (map? x)        ((get-method = :dispatch-type/map) x y)\n    (sequential? x) ((get-method = :dispatch-type/sequential) x y)\n    :else           (clojure.core/= x y)))\n\n(defn ^:deprecated ref=\n  \"Are two refs `x` and `y` equal?\n\n  DEPRECATED: use [[find-closest-matching-ref]] instead. This does not work if things like `:base-type` are missing or\n  differ slightly, or handle `:binning` correctly, let alone when things are broken more significantly. If we improve\n  type calculation it shouldn't break existing queries... right?\"\n  [x y]\n  (or (= x y)\n      (= (lib.util/with-default-effective-type x)\n         (lib.util/with-default-effective-type y))))\n\n(defn- update-options-remove-namespaced-keys [a-ref]\n  (lib.options/update-options a-ref (fn [options]\n                                      (into {} (remove (fn [[k _v]] (qualified-keyword? k))) options))))\n\n(defn find-closest-matching-ref\n  \"Find the ref that most closely matches `a-ref` from a sequence of `refs`. This is meant to power things\n  like [[metabase.lib.breakout/breakoutable-columns]] which are supposed to include `:breakout-position` for columns\n  that are already present as a breakout; sometimes the column in the breakout does not exactly match what MLv2 would\n  have generated. So try to figure out which column it is referring to.\n\n  This first looks for a matching ref with a strict comparison, then in increasingly less-strict comparisons until it\n  finds something that matches. This is mostly to work around bugs like #31482 where MLv1 generated queries with\n  `:field` refs that did not include join aliases even tho the Fields came from joined Tables... we still know the\n  Fields are the same if they have the same IDs.\n\n  The three-arity version can also find matches between integer Field ID references like `[:field {} 1]` and\n  equivalent string column name field literal references like `[:field {} \\\"bird_type\\\"]` by resolving Field IDs using\n  a `metadata-providerable` (something that can be treated as a metadata provider, e.g. a `query` with a\n  MetadataProvider associated with it). This is the ultimately hacky workaround for totally busted legacy queries.\n  Note that this currently only works when `a-ref` is the one with the integer Field ID and `refs` have string literal\n  column names; it does not work the other way around. Luckily we currently don't have problems with MLv1/legacy\n  queries accidentally using string :field literals where it shouldn't have been doing so.\"\n  ([a-ref refs]\n   (loop [xform identity, more-xforms [ ;; ignore irrelevant keys from :binning options\n                                       #(lib.options/update-options % m/update-existing :binning dissoc :metadata-fn :lib/type)\n                                       ;; ignore namespaced keys\n                                       update-options-remove-namespaced-keys\n                                       ;; ignore type info\n                                       #(lib.options/update-options % dissoc :base-type :effective-type)\n                                       ;; ignore join alias\n                                       #(lib.options/update-options % dissoc :join-alias)]]\n     (or (let [a-ref (xform a-ref)]\n           (m/find-first #(= (xform %) a-ref)\n                         refs))\n         (when (seq more-xforms)\n           (recur (comp xform (first more-xforms)) (rest more-xforms))))))\n\n  ([metadata-providerable a-ref refs]\n   (or (find-closest-matching-ref a-ref refs)\n       (mbql.u.match/match-one a-ref\n         [:field opts (field-id :guard integer?)]\n         (when-let [field-name (:name (lib.metadata/field metadata-providerable field-id))]\n           (find-closest-matching-ref [:field opts field-name] refs))))))\n","~:reader-features",["^K",["~:cljs-release","~:cljs-dev","~:cljs"]],"~:cljc",true,"~:source-map-compact",["^ ","mappings","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","names",["js/metabase","js/metabase.lib","js/metabase.lib.equality","js/metabase.lib.equality.=","method-table__5642__auto__","cljs.core.atom","prefer-table__5643__auto__","method-cache__5644__auto__","cached-hierarchy__5645__auto__","hierarchy__5646__auto__","cljs.core.get","fexpr__64912","cljs.core/MultiFn","cljs.core.symbol","metabase.lib.equality/=","x","y","x-dispatch-value","metabase.lib.dispatch/dispatch-value","y-dispatch-value","cljs.core.not_EQ_","metabase.lib.hierarchy/hierarchy","_x","_y","metabase.lib.equality/relevant-keys-set","m","cljs.core.into","cljs.core.remove","k","cljs.core/qualified-keyword?","cljs.core/keys","m1","m2","m1-keys","m2-keys","cljs.core._EQ_","cljs.core/every?","xs","ys","and__5043__auto__","cljs.core/count","G__64923","vec__64926","seq__64927","cljs.core/seq","first__64928","cljs.core/first","cljs.core/next","G__64924","vec__64929","seq__64930","first__64931","vec__64932","seq__64933","first__64934","vec__64935","seq__64936","first__64937","more-x","more-y","or__5045__auto__","cljs.core/empty?","metabase.lib.equality/*side->uuid->index*","metabase.lib.equality/aggregation-uuid->index","stage","cljs.core.map_indexed","p__64939","vec__64940","cljs.core.nth","map__64943","cljs.core/--destructure-map","idx","_tag","ag-uuid","*side->uuid->index*-orig-val__64946","*side->uuid->index*-temp-val__64947","fexpr__64949","cljs.core/get-method","p__64950","p__64951","vec__64953","vec__64956","x-tag","x-opts","x-uuid","y-tag","y-opts","y-uuid","cljs.core.get_in","cljs.core/map?","fexpr__64959","cljs.core/sequential?","fexpr__64960","metabase.lib.equality/ref=","metabase.lib.util/with-default-effective-type","metabase.lib.equality/update-options-remove-namespaced-keys","a-ref","metabase.lib.options/update-options","options","p__64962","vec__64963","_v","var_args","G__64971","metabase.lib.equality/find-closest-matching-ref","js/Error","refs","p1__64966#","p1__64967#","p1__64968#","xform","cljs.core/identity","more-xforms","metabase.lib.options.update_options","medley.core/update-existing","cljs.core/dissoc","p1__64969#","medley.core.find_first","cljs.core.comp","cljs.core/rest","metadata-providerable","metabase.lib.equality.find_closest_matching_ref","cljs.core.filter","cljs.core/some?","&parents","&match","cljs.core/vector?","&match_0__64978","cljs.core/keyword-identical?","&match_2__64980","temp__5804__auto__","cljs.core.match/backtrack","e64983","e__62528__auto__","e64982","e64981","metabase.mbql.util.match.impl/match-in-collection","match-64974","opts","field-id","cljs.core/integer?","field-name","metabase.lib.metadata/field"]],"~:used-vars",["^K",["~$cljs.core/--destructure-map","~$cljs.core/some?","~$cljs.core.match/backtrack","~$cljs.core/comp","~$cljs.core/rest","~$metabase.lib.equality/*side->uuid->index*","~$metabase.lib.equality/relevant-keys-set","~$cljs.core/MultiFn","~$cljs.core/get-method","~$cljs.core/sequential?","~$metabase.lib.metadata/field","~$metabase.lib.equality/=","~$cljs.core/vector?","~$cljs.core/filter","~$cljs.core/=","~$cljs.core/keys","~$cljs.core/count","~$cljs.core/seq","~$metabase.lib.options/update-options","~$cljs.core/identity","~$js/metabase.lib.equality","~$metabase.lib.equality/aggregation-uuid->index","~$cljs.core/not=","~$cljs.core/dissoc","~$cljs.core/keyword-identical?","~$cljs.core/atom","~$cljs.core/qualified-keyword?","~$cljs.core/empty?","~$cljs.core/into","~$cljs.core/map?","~$medley.core/update-existing","~$cljs.core/get-in","~$medley.core/find-first","~$cljs.core/-add-method","~$cljs.core/get","~$js/metabase.lib","~$cljs.core/integer?","~$cljs.core/remove","~$cljs.core/symbol","~$cljs.core/nth","~$metabase.lib.dispatch/dispatch-value","~$metabase.lib.hierarchy/hierarchy","~$cljs.core/next","~$js/metabase.lib.equality.=","~$js/metabase","~$cljs.core/map-indexed","~$metabase.lib.equality/find-closest-matching-ref","~$metabase.lib.equality/ref=","~$cljs.core/first","~$metabase.lib.util/with-default-effective-type","~$cljs.core/every?","~$js/Error","~$metabase.mbql.util.match.impl/match-in-collection","~$metabase.lib.equality/update-options-remove-namespaced-keys"]]],"~:cache-keys",["~#cmap",[["^1C","camel_snake_kebab/internals/misc.cljc"],["5ae08f83ceb8959971e6334596bff0214bf6fdf2","~:shadow.build.compiler/resolve",["^ ","~:require-id",null,"~:deps-ids",["^K",[]],"~:deps-syms",["^W","^D","~$camel-snake-kebab.internals.string-separator","~$clojure.string"]]],["^1C","goog/dom/tagname.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^31",["^ ","^32",null,"^33",["^K",[]],"^34",["^W","~$goog.dom.HtmlElement"]]],["^1C","metabase/shared/util/i18n.cljs"],["6c3c8615004b349dae9851ed547d516d45e04bd0","^31",["^ ","^32",null,"^33",["^K",[]],"^34",["^W","^D","~$shadow.js.shim.module$ttag","^36"]]],["^1C","goog/labs/useragent/platform.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^31",["^ ","^32",null,"^33",["^K",[]],"^34",["^W","~$goog.string.internal","~$goog.labs.userAgent.util","~$goog.labs.userAgent.highEntropy.highEntropyValue","~$goog.labs.userAgent.highEntropy.highEntropyData","~$goog.labs.userAgent"]]],["^1C","metabase/types.cljc"],["00232bf78b259e26a21c218c8f2d746ba7003a15","^31",["^ ","^32",null,"^33",["^K",[]],"^34",["^W","^D","~$clojure.set","~$metabase.types.coercion-hierarchies","~$metabase.util"]]],["^1C","cljs/spec/gen/alpha.cljs"],["bc14df6666853ed869d7b88aaa864111c65d0c7f","^31",["^ ","^32",null,"^33",["^K",[]],"^34",["^W","^D","~$goog.Uri"]]],["^1C","metabase/lib/util.cljc"],["11c3262368d876979e323f3e646aab21fbf9b86e","^31",["^ ","^32",null,"^33",["^K",[]],"^34",["^W","^D","~$shadow.js.shim.module$crc_32","~$goog.string","~$goog.string.format","^3>","^36","^10","~$metabase.lib.common","^Y","~$metabase.lib.schema","~$metabase.lib.schema.common","~$metabase.lib.schema.expression","~$metabase.lib.schema.id","~$metabase.mbql.util","~$metabase.shared.util.i18n","^3@","~$metabase.util.malli"]]],["^1C","lambdaisland/glogi.cljs"],["76286836d4172602aa08006b2a754dda736ffe09","^31",["^ ","^32",null,"^33",["^K",[]],"^34",["^W","^D","~$goog.log","~$goog.debug.Console","~$goog.array","^36","~$goog.object","~$goog.debug.FancyWindow","~$goog.debug.DivConsole"]]],["^1C","goog/math/math.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^31",["^ ","^32",null,"^33",["^K",[]],"^34",["^W","~$goog.asserts"]]],["^1C","goog/html/trustedtypes.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^31",["^ ","^32",null,"^33",["^K",[]],"^34",["^W"]]],["^1C","goog/string/stringformat.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^31",["^ ","^32",null,"^33",["^K",[]],"^34",["^W","^3C"]]],["^1C","malli/registry.cljc"],["514c6f7d69d7e40b56fa75bfd1a49a683ca15982","^31",["^ ","^32",null,"^33",["^K",[]],"^34",["^W","^D"]]],["^1C","goog/labs/useragent/browser.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^31",["^ ","^32",null,"^33",["^K",[]],"^34",["^W","^3:","^3;","^3S","^39","^3<","^3="]]],["^1C","goog/html/safeurl.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^31",["^ ","^32",null,"^33",["^K",[]],"^34",["^W","^3S","~$goog.fs.url","~$goog.html.TrustedResourceUrl","~$goog.string.Const","~$goog.string.TypedString","^39"]]],["^1C","goog/style/style.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^31",["^ ","^32",null,"^33",["^K",[]],"^34",["^W","^3S","~$goog.dom","~$goog.dom.NodeType","~$goog.dom.TagName","~$goog.dom.safe","~$goog.dom.vendor","~$goog.html.SafeStyleSheet","~$goog.math.Box","~$goog.math.Coordinate","~$goog.math.Rect","~$goog.math.Size","^3P","~$goog.reflect","^3C","~$goog.userAgent"]]],["^1C","goog/array/array.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^31",["^ ","^32",null,"^33",["^K",[]],"^34",["^W","^3S"]]],["~:shadow.build.js-support/require","moment"],["~$shadow.js.shim.module$moment","shadow.js.shim.module$moment.js","require","^31",["^ ","^32",null,"^33",["^K",[]],"^34",["^W"]]],["^48","moment-timezone"],["~$shadow.js.shim.module$moment_timezone","shadow.js.shim.module$moment_timezone.js","require","^31",["^ ","^32",null,"^33",["^K",[]],"^34",["^W"]]],["^1C","metabase/mbql/schema/macros.cljs"],["2af09bd42ffb1e15b66723cf7ba15db7dc75d10b","^31",["^ ","^32",null,"^33",["^K",[]],"^34",["^W","^D"]]],["^1C","metabase/lib/schema/mbql_clause.cljc"],["e5bdd00c58db706b1219843528fd3cd9dd8ab728","^31",["^ ","^32",null,"^33",["^K",[]],"^34",["^W","^D","^3G","^3H","~$metabase.types","^3L","~$metabase.util.malli.registry"]]],["^1C","goog/useragent/useragent.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^31",["^ ","^32",null,"^33",["^K",[]],"^34",["^W","~$goog.labs.userAgent.browser","~$goog.labs.userAgent.engine","~$goog.labs.userAgent.platform","^3:","^46","^39"]]],["^1C","malli/generator.cljc"],["514c6f7d69d7e40b56fa75bfd1a49a683ca15982","^31",["^ ","^32",null,"^33",["^K",[]],"^34",["^W","^D","^F","^36","~$clojure.test.check","~$clojure.test.check.generators","~$clojure.test.check.properties","~$clojure.test.check.random","~$clojure.test.check.rose-tree","~$malli.core","~$malli.registry"]]],["^1C","clojure/test/check/properties.cljc"],["f33d988fd57bc9c11af1952db81c10f319c91416","^31",["^ ","^32",null,"^33",["^K",[]],"^34",["^W","^D","^4A","~$clojure.test.check.results"]]],["^1C","clojure/test/check/generators.cljc"],["f33d988fd57bc9c11af1952db81c10f319c91416","^31",["^ ","^32",null,"^33",["^K",[]],"^34",["^W","^D","^36","^4C","^4D","^3C"]]],["^1C","goog/debug/error.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^31",["^ ","^32",null,"^33",["^K",[]],"^34",["^W"]]],["^1C","metabase/lib/common.cljc"],["a3bc6343077ef13a3da77612b68f23f9b2a3d890","^31",["^ ","^32",null,"^33",["^K",[]],"^34",["^W","^D","^13","^[","^Y","~$metabase.lib.ref","^3G","^3L"]]],["^1C","metabase/lib/schema/util.cljc"],["14a9e8a90c56f5e44b4ecd361e962722fd97aecf","^31",["^ ","^32",null,"^33",["^K",[]],"^34",["^W","^D","^Y"]]],["^1C","goog/flags/flags.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^31",["^ ","^32",null,"^33",["^K",[]],"^34",["^W"]]],["^1C","malli/util.cljc"],["514c6f7d69d7e40b56fa75bfd1a49a683ca15982","^31",["^ ","^32",null,"^33",["^K",[]],"^34",["^W","^D","^D","^4E"]]],["^1C","clojure/test/check/random/doubles.cljs"],["f33d988fd57bc9c11af1952db81c10f319c91416","^31",["^ ","^32",null,"^33",["^K",[]],"^34",["^W","^D","~$clojure.test.check.random.longs"]]],["^1C","net/cgrand/macrovich.cljc"],["abcb26cbfe0f8eef363b25525210c0fe1eb1f693","^31",["^ ","^32",null,"^33",["^K",[]],"^34",["^W","^D"]]],["^1C","malli/destructure.cljc"],["514c6f7d69d7e40b56fa75bfd1a49a683ca15982","^31",["^ ","^32",null,"^33",["^K",[]],"^34",["^W","^D","~$clojure.walk","^4E","~$malli.impl.util"]]],["^1C","schema/spec/variant.cljc"],["0dacc3066a87f33088c9a332b6c21e8b0560011c","^31",["^ ","^32",null,"^33",["^K",[]],"^34",["^W","^D","~$schema.utils","~$schema.spec.core"]]],["^1C","goog/structs/circularbuffer.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^31",["^ ","^32",null,"^33",["^K",[]],"^34",["^W"]]],["^1C","weavejester/dependency.cljc"],["7fd7f8879313f6a7e295f7447e668bdf492c42c1","^31",["^ ","^32",null,"^33",["^K",[]],"^34",["^W","^D","^3>"]]],["^1C","metabase/lib/schema/common.cljc"],["3f51a06335a7cb84c835d859c422919499874414","^31",["^ ","^32",null,"^33",["^K",[]],"^34",["^W","^D","^36","^4;","^4<"]]],["^1C","goog/dom/nodetype.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^31",["^ ","^32",null,"^33",["^K",[]],"^34",["^W"]]],["^1C","goog/labs/useragent/highentropy/highentropyvalue.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^31",["^ ","^32",null,"^33",["^K",[]],"^34",["^W","^3:","^39"]]],["^1C","cljs/pprint.cljs"],["bc14df6666853ed869d7b88aaa864111c65d0c7f","^31",["^ ","^32",null,"^33",["^K",[]],"^34",["^W","^D","^36","^3C","~$goog.string.StringBuffer"]]],["^1C","metabase/lib/schema/template_tag.cljc"],["f1b6289b8e576857fe667aed3da134e4ad1ea26a","^31",["^ ","^32",null,"^33",["^K",[]],"^34",["^W","^D","^4E","^3G","^3I","~$metabase.mbql.schema","^4<"]]],["^1C","metabase/lib/schema/ref.cljc"],["5037a60b3d2f427702cf5cedf23f02bcc394d051","^31",["^ ","^32",null,"^33",["^K",[]],"^34",["^W","^D","^36","^13","^[","^3G","^3H","^3I","~$metabase.lib.schema.mbql-clause","~$metabase.lib.schema.temporal-bucketing","^4;","^4<"]]],["^1C","clojure/test/check/rose_tree.cljc"],["f33d988fd57bc9c11af1952db81c10f319c91416","^31",["^ ","^32",null,"^33",["^K",[]],"^34",["^W","^D"]]],["^1C","clojure/test/check/impl.cljc"],["f33d988fd57bc9c11af1952db81c10f319c91416","^31",["^ ","^32",null,"^33",["^K",[]],"^34",["^W","^D"]]],["^1C","camel_snake_kebab/internals/string_separator.cljc"],["5ae08f83ceb8959971e6334596bff0214bf6fdf2","^31",["^ ","^32",null,"^33",["^K",[]],"^34",["^W","^D","^36"]]],["^1C","clojure/test/check/random.cljs"],["f33d988fd57bc9c11af1952db81c10f319c91416","^31",["^ ","^32",null,"^33",["^K",[]],"^34",["^W","^D","~$clojure.test.check.random.doubles","^4I"]]],["^1C","metabase/lib/schema/expression/arithmetic.cljc"],["e6936a3e0b11bc3cd40d4e396c708af4622c21cb","^31",["^ ","^32",null,"^33",["^K",[]],"^34",["^W","^D","^4E","^10","^[","^3G","^3H","^4P","^4Q","^4;","^4<"]]],["^1C","goog/string/typedstring.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^31",["^ ","^32",null,"^33",["^K",[]],"^34",["^W"]]],["^1C","metabase/lib/schema/expression/string.cljc"],["b2d7de575aaaa880fdc88dfc31642c8e002c3669","^31",["^ ","^32",null,"^33",["^K",[]],"^34",["^W","^D","^3H","^4P"]]],["^1C","goog/object/object.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^31",["^ ","^32",null,"^33",["^K",[]],"^34",["^W"]]],["^1C","metabase/lib/schema/filter.cljc"],["0147dea423ebfd097bf1edb97f0325c9e2908a85","^31",["^ ","^32",null,"^33",["^K",[]],"^34",["^W","^D","^3G","^3H","^4P","^4Q","^4<"]]],["^1C","goog/dom/asserts.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^31",["^ ","^32",null,"^33",["^K",[]],"^34",["^W","^3S"]]],"~:SHADOW-TIMESTAMP",[1689947046000,1689947046000,1689947050000],["^1C","metabase/lib/ref.cljc"],["86a9fbeddec3e58f7bb54e61f5342658b370fb3b","^31",["^ ","^32",null,"^33",["^K",[]],"^34",["^W","^D","^13","~$metabase.lib.schema.ref","^3L"]]],["^1C","goog/math/long.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^31",["^ ","^32",null,"^33",["^K",[]],"^34",["^W","^3S","^46"]]],["^1C","goog/html/trustedresourceurl.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^31",["^ ","^32",null,"^33",["^K",[]],"^34",["^W","^3S","~$goog.fs.blob","^3T","~$goog.html.SafeScript","~$goog.html.trustedtypes","^3V","^3W"]]],["^1C","schema/spec/leaf.cljc"],["0dacc3066a87f33088c9a332b6c21e8b0560011c","^31",["^ ","^32",null,"^33",["^K",[]],"^34",["^W","^D","^4M"]]],["^1C","metabase/util/format.cljc"],["875f86a08288cb3ad5a6f15df988897eaf8613af","^31",["^ ","^32",null,"^33",["^K",[]],"^34",["^W","^D","^3C"]]],["^1C","goog/math/irect.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^31",["^ ","^32",null,"^33",["^K",[]],"^34",["^W"]]],["^1C","goog/math/box.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^31",["^ ","^32",null,"^33",["^K",[]],"^34",["^W","^3S","^43"]]],["^1C","metabase/lib/options.cljc"],["1870276153adf026e09a3e9ed1ba8beaad80e1c8","^31",["^ ","^32",null,"^33",["^K",[]],"^34",["^W","^D","^3G","^3K","^3@","^3L"]]],["^1C","goog/string/internal.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^31",["^ ","^32",null,"^33",["^K",[]],"^34",["^W"]]],["^1C","clojure/test/check.cljc"],["f33d988fd57bc9c11af1952db81c10f319c91416","^31",["^ ","^32",null,"^33",["^K",[]],"^34",["^W","^D","^4A","^4C","^4G","^4D","~$clojure.test.check.impl"]]],["^1C","goog/functions/functions.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^31",["^ ","^32",null,"^33",["^K",[]],"^34",["^W"]]],["^1C","metabase/lib/metadata.cljc"],["a8652a185953ef0e0b1c77d5540a4aa7271c0c63","^31",["^ ","^32",null,"^33",["^K",[]],"^34",["^W","^D","~$metabase.lib.metadata.protocols","^3G","^3I","^V","^3L","^4<"]]],["^1C","goog/html/safestyle.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^31",["^ ","^32",null,"^33",["^K",[]],"^34",["^W","^3V","~$goog.html.SafeUrl","^3W","^3S","^39"]]],["^1C","goog/dom/safe.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^31",["^ ","^32",null,"^33",["^K",[]],"^34",["^W","^3S","~$goog.asserts.dom","~$goog.dom.asserts","~$goog.functions","~$goog.html.SafeHtml","^4V","~$goog.html.SafeStyle","^4Z","^3U","~$goog.html.uncheckedconversions","^3V","^39"]]],["^1C","goog/asserts/dom.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^31",["^ ","^32",null,"^33",["^K",[]],"^34",["^W","^3Z","^3S","~$goog.dom.element"]]],["^1C","medley/core.cljc"],["f5117fa4c15ff14c4a0ab7db414b0f102afb0b8a","^31",["^ ","^32",null,"^33",["^K",[]],"^34",["^W","^D"]]],["^1C","clojure/walk.cljs"],["bc14df6666853ed869d7b88aaa864111c65d0c7f","^31",["^ ","^32",null,"^33",["^K",[]],"^34",["^W","^D"]]],["^1C","metabase/lib/metadata/protocols.cljc"],["f5c81e2cab09f5dabb3cab711f7db1c5df1b398d","^31",["^ ","^32",null,"^33",["^K",[]],"^34",["^W","^D"]]],["^1C","metabase/lib/schema/expression/conditional.cljc"],["226c4623394b90853fcb014e9a95e84ffc8bd6db","^31",["^ ","^32",null,"^33",["^K",[]],"^34",["^W","^D","^3>","^3H","^4P","^4;","^4<"]]],["^1C","lambdaisland/glogi/console.cljs"],["76286836d4172602aa08006b2a754dda736ffe09","^31",["^ ","^32",null,"^33",["^K",[]],"^34",["^W","^D","~$lambdaisland.glogi","~$lambdaisland.glogi.print","^3P","^3N"]]],["^1C","goog/html/safehtml.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^31",["^ ","^32",null,"^33",["^K",[]],"^34",["^W","^3V","^4V","^53","^41","^4Z","^3Z","^3U","^3W","^3S","^4=","^3O","^3P","^39","~$goog.dom.tags","^4W"]]],["^1C","goog/dom/tags.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^31",["^ ","^32",null,"^33",["^K",[]],"^34",["^W","^3P"]]],["^1C","goog/math/size.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^31",["^ ","^32",null,"^33",["^K",[]],"^34",["^W"]]],["^1C","malli/error.cljc"],["514c6f7d69d7e40b56fa75bfd1a49a683ca15982","^31",["^ ","^32",null,"^33",["^K",[]],"^34",["^W","^D","^36","^4E","~$malli.util"]]],["^1C","metabase/lib/dispatch.cljc"],["914208cd51b78412eff1b402519bbb422845497a","^31",["^ ","^32",null,"^33",["^K",[]],"^34",["^W","^D","^3@"]]],["^1C","metabase/util/malli.cljc"],["0f9ba23be6bb9fa629617001e985b988d2322b17","^31",["^ ","^32",null,"^33",["^K",[]],"^34",["^W","^D","^D","^4E","~$malli.destructure","~$malli.error","~$malli.generator","^59","^3K","^3@"]]],["^1C","goog/labs/useragent/engine.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^31",["^ ","^32",null,"^33",["^K",[]],"^34",["^W","^3O","^39","^3:"]]],["^1C","goog/fs/blob.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^31",["^ ","^32",null,"^33",["^K",[]],"^34",["^W"]]],["^1C","metabase/mbql/schema/helpers.cljc"],["b1f6002b97b59423b504abb666e13c9b0228b768","^31",["^ ","^32",null,"^33",["^K",[]],"^34",["^W","^D","^36","^4;","~$schema.core"]]],["^1C","goog/dom/dom.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^31",["^ ","^32",null,"^33",["^K",[]],"^34",["^W","^3O","^3S","^4[","~$goog.dom.BrowserFeature","^3Y","^3Z","^3[","^52","^54","^43","^45","^3P","^3C","^3V","~$goog.string.Unicode","^47"]]],["^1C","borkdude/dynaload.cljc"],["accd696ba364b850b4d92e38f5a34d0e828a0ad1","^31",["^ ","^32",null,"^33",["^K",[]],"^34",["^W","^D"]]],["^1C","metabase/util/log.cljs"],["7d8a3bf01eb27c2ba7269dc90dc218e46bcc1d3a","^31",["^ ","^32",null,"^33",["^K",[]],"^34",["^W","^D","^3M","^3C","^3D","^56","~$lambdaisland.glogi.console"]]],["^1C","goog/asserts/asserts.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^31",["^ ","^32",null,"^33",["^K",[]],"^34",["^W","~$goog.debug.Error","^3Y"]]],["^1C","goog/debug/relativetimeprovider.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^31",["^ ","^32",null,"^33",["^K",[]],"^34",["^W"]]],["^1C","malli/sci.cljc"],["514c6f7d69d7e40b56fa75bfd1a49a683ca15982","^31",["^ ","^32",null,"^33",["^K",[]],"^34",["^W","^D","~$borkdude.dynaload"]]],["^1C","metabase/lib/schema/expression.cljc"],["f5c5c3ff3dc0f9a8b407cd7d06a68c6787061991","^31",["^ ","^32",null,"^33",["^K",[]],"^34",["^W","^D","^13","^[","^3G","^3K","^4;","^3L","^4<"]]],["^1C","goog/math/rect.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^31",["^ ","^32",null,"^33",["^K",[]],"^34",["^W","^3S","^42","^43","~$goog.math.IRect","^45"]]],["^1C","flatland/ordered/map.cljs"],["3a9cb9d79e47d77ecd4f4d550371ecf01464c461","^31",["^ ","^32",null,"^33",["^K",[]],"^34",["^W","^D"]]],["^1C","goog/uri/uri.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^31",["^ ","^32",null,"^33",["^K",[]],"^34",["^W","^3O","^3S","~$goog.collections.maps","^3C","~$goog.structs","~$goog.uri.utils","~$goog.uri.utils.ComponentIndex","~$goog.uri.utils.StandardQueryParam"]]],["^1C","metabase/util/malli/registry.cljc"],["921d4f259bbe54cbeb6b88ae56937df492bdfb5e","^31",["^ ","^32",null,"^33",["^K",[]],"^34",["^W","^D","^4E","^4F","^59"]]],["^1C","goog/labs/useragent/highentropy/highentropydata.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^31",["^ ","^32",null,"^33",["^K",[]],"^34",["^W","^3;"]]],["^1C","metabase/types/coercion_hierarchies.cljc"],["c3d70ef6080e044d61f13ff6bfd76490e2dcd0ac","^31",["^ ","^32",null,"^33",["^K",[]],"^34",["^W","^D","^3>"]]],["^1C","goog/collections/maps.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^31",["^ ","^32",null,"^33",["^K",[]],"^34",["^W"]]],["^1C","goog/debug/divconsole.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^31",["^ ","^32",null,"^33",["^K",[]],"^34",["^W","~$goog.debug.HtmlFormatter","~$goog.dom.DomHelper","^3Z","^3[","^52","^41","^3M","^3V","~$goog.style"]]],["^1C","schema/spec/collection.cljc"],["0dacc3066a87f33088c9a332b6c21e8b0560011c","^31",["^ ","^32",null,"^33",["^K",[]],"^34",["^W","^D","^4L","^4M"]]],["^1C","malli/impl/util.cljc"],["514c6f7d69d7e40b56fa75bfd1a49a683ca15982","^31",["^ ","^32",null,"^33",["^K",[]],"^34",["^W","^D"]]],["^1C","metabase/lib/schema/order_by.cljc"],["3f577f71e4ecba1aa1061f2228f6026ab45312ff","^31",["^ ","^32",null,"^33",["^K",[]],"^34",["^W","^D","^3H","^4P","^4<"]]],["^1C","schema/utils.cljc"],["0dacc3066a87f33088c9a332b6c21e8b0560011c","^31",["^ ","^32",null,"^33",["^K",[]],"^34",["^W","^D","^3D","^3P","^3C","^36"]]],["^1C","metabase/lib/schema/aggregation.cljc"],["ea4a70903cfc3ffeaa60ebdedb5ea00892da4dbe","^31",["^ ","^32",null,"^33",["^K",[]],"^34",["^W","^D","^[","^3H","^4P","^3K","^4<"]]],["^1C","cljs/core/match.cljs"],["f419c02deee501e9f4b29f81215ba81ffcefe9b6","^31",["^ ","^32",null,"^33",["^K",[]],"^34",["^W","^D"]]],["^1C","goog/debug/fancywindow.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^31",["^ ","^32",null,"^33",["^K",[]],"^34",["^W","^3O","^3S","~$goog.debug.DebugWindow","^5J","^3Z","^3[","^52","^41","^3M","^3P","^3C","^3V","^47"]]],["^1C","goog/debug/formatter.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^31",["^ ","^32",null,"^33",["^K",[]],"^34",["^W","~$goog.debug","~$goog.debug.RelativeTimeProvider","^52","^4Z","^54","^3M","^3V"]]],["^1C","metabase/shared/util/namespaces.cljs"],["00687008abd6eb291bc9d5ff1fff73210e0bbe6e","^31",["^ ","^32",null,"^33",["^K",[]],"^34",["^W","^D"]]],["^1C","metabase/mbql/util/match/impl.cljc"],["4150e01975339d308f5cfedda77875eda19c030d","^31",["^ ","^32",null,"^33",["^K",[]],"^34",["^W","^D"]]],["^1C","goog/fs/url.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^31",["^ ","^32",null,"^33",["^K",[]],"^34",["^W"]]],["^1C","goog/base.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^31",["^ ","^32",null,"^33",["^K",[]],"^34",[]]],["^1C","goog/structs/structs.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^31",["^ ","^32",null,"^33",["^K",[]],"^34",["^W","^3O","^3P"]]],["^1C","clojure/string.cljs"],["bc14df6666853ed869d7b88aaa864111c65d0c7f","^31",["^ ","^32",null,"^33",["^K",[]],"^34",["^W","^D","^3C","^4N"]]],["^1C","metabase/lib/schema/temporal_bucketing.cljc"],["9cb7bba3e46e1de2fbb37d61df332336da6d9f66","^31",["^ ","^32",null,"^33",["^K",[]],"^34",["^W","^D","^3>","^4<"]]],["^1C","metabase/util.cljc"],["2eb945a6741f1450ecac08a9087b862ce52b9e3a","^31",["^ ","^32",null,"^33",["^K",[]],"^34",["^W","^D","~$camel-snake-kebab.internals.macros","~$clojure.data","^@","^3>","^36","^4J","~$flatland.ordered.map","^10","^3K","~$metabase.shared.util.namespaces","~$metabase.util.format","~$metabase.util.log","~$net.cgrand.macrovich","~$weavejester.dependency"]]],["^1C","clojure/test/check/random/longs/bit_count_impl.cljs"],["f33d988fd57bc9c11af1952db81c10f319c91416","^31",["^ ","^32",null,"^33",["^K",[]],"^34",["^W","^D"]]],["^1C","malli/impl/regex.cljc"],["514c6f7d69d7e40b56fa75bfd1a49a683ca15982","^31",["^ ","^32",null,"^33",["^K",[]],"^34",["^W","^D","^4K"]]],["^1C","camel_snake_kebab/internals/macros.cljc"],["5ae08f83ceb8959971e6334596bff0214bf6fdf2","^31",["^ ","^32",null,"^33",["^K",[]],"^34",["^W","^D","~$camel-snake-kebab.internals.alter-name","~$camel-snake-kebab.internals.misc"]]],["^1C","metabase/lib/schema/expression/temporal.cljc"],["f1f22c1655e7d335b884a22b010f2b8b08ad1e94","^31",["^ ","^32",null,"^33",["^K",[]],"^34",["^W","^D","^3>","^4E","^[","^3G","^3H","~$metabase.lib.schema.literal","^4P","^4Q","^4<","^49","^4:"]]],["^1C","goog/string/string.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^31",["^ ","^32",null,"^33",["^K",[]],"^34",["^W","^3[","^54","^3V","^39"]]],["^1C","schema/core.cljc"],["0dacc3066a87f33088c9a332b6c21e8b0560011c","^31",["^ ","^32",null,"^33",["^K",[]],"^34",["^W","^D","^36","^4L","^4M","~$schema.spec.leaf","~$schema.spec.variant","~$schema.spec.collection"]]],["^1C","metabase/mbql/schema.cljc"],["c51bf2a180ecbc12d6a1cd42a4049323f46a0085","^31",["^ ","^32",null,"^33",["^K",[]],"^34",["^W","^D","^49","^4:","^D","^3>","~$metabase.mbql.schema.helpers","~$metabase.mbql.schema.macros","^5="]]],["^1C","metabase/mbql/util/match.cljs"],["d65aaa9fbcb7960b90ba7ca97258b1dc8a40be2b","^31",["^ ","^32",null,"^33",["^K",[]],"^34",["^W","^D","^H","~$metabase.mbql.util.match.impl"]]],["^1C","malli/core.cljc"],["514c6f7d69d7e40b56fa75bfd1a49a683ca15982","^31",["^ ","^32",null,"^33",["^K",[]],"^34",["^W","^D","^D","~$malli.impl.regex","^4K","^4F","~$malli.sci"]]],["^1C","metabase/lib/schema.cljc"],["122fe4013d55087fc7287141eb7dc6f630436424","^31",["^ ","^32",null,"^33",["^K",[]],"^34",["^W","^D","~$metabase.lib.schema.aggregation","^3G","^3H","~$metabase.lib.schema.expression.arithmetic","~$metabase.lib.schema.expression.conditional","~$metabase.lib.schema.expression.string","~$metabase.lib.schema.expression.temporal","~$metabase.lib.schema.filter","^3I","~$metabase.lib.schema.join","^5Y","~$metabase.lib.schema.order-by","^4T","~$metabase.lib.schema.template-tag","~$metabase.lib.schema.util","^T","^4<"]]],["^1C","clojure/data.cljs"],["bc14df6666853ed869d7b88aaa864111c65d0c7f","^31",["^ ","^32",null,"^33",["^K",[]],"^34",["^W","^D","^3>"]]],["^1C","goog/reflect/reflect.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^31",["^ ","^32",null,"^33",["^K",[]],"^34",["^W"]]],["^1C","goog/labs/useragent/util.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^31",["^ ","^32",null,"^33",["^K",[]],"^34",["^W","^39","^3="]]],["^1C","goog/debug/debug.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^31",["^ ","^32",null,"^33",["^K",[]],"^34",["^W","^3O","~$goog.debug.errorcontext"]]],["^1C","goog/string/stringbuffer.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^31",["^ ","^32",null,"^33",["^K",[]],"^34",["^W"]]],["^1C","schema/spec/core.cljc"],["0dacc3066a87f33088c9a332b6c21e8b0560011c","^31",["^ ","^32",null,"^33",["^K",[]],"^34",["^W","^D","^4L"]]],["^48","ttag"],["^38","shadow.js.shim.module$ttag.js","require","^31",["^ ","^32",null,"^33",["^K",[]],"^34",["^W"]]],["^1C","goog/math/coordinate.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^31",["^ ","^32",null,"^33",["^K",[]],"^34",["^W","~$goog.math"]]],["^1C","goog/debug/errorcontext.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^31",["^ ","^32",null,"^33",["^K",[]],"^34",["^W"]]],["^1C","goog/labs/useragent/useragent.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^31",["^ ","^32",null,"^33",["^K",[]],"^34",["^W","~$goog.flags"]]],["^1C","goog/dom/element.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^31",["^ ","^32",null,"^33",["^K",[]],"^34",["^W","^3Y","^3Z"]]],["^1C","goog/html/uncheckedconversions.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^31",["^ ","^32",null,"^33",["^K",[]],"^34",["^W","^3S","^52","^4V","^53","^41","^4Z","^3U","^3V","^39"]]],["^1C","goog/debug/debugwindow.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^31",["^ ","^32",null,"^33",["^K",[]],"^34",["^W","^5I","^3[","^52","^41","^3M","^3V","~$goog.structs.CircularBuffer","^47"]]],["^1C","metabase/mbql/util.cljc"],["2532d5faa94d2a89dd06e529c641d594e298e2aa","^31",["^ ","^32",null,"^33",["^K",[]],"^34",["^W","^D","^36","~$metabase.mbql.predicates","^4O","^61","^T","^3K","^5="]]],["^1C","goog/dom/htmlelement.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^31",["^ ","^32",null,"^33",["^K",[]],"^34",["^W"]]],["^1C","cljs/core.cljs"],["bc14df6666853ed869d7b88aaa864111c65d0c7f","^31",["^ ","^32",null,"^33",["^K",[]],"^34",["^W","~$goog.math.Long","~$goog.math.Integer","^3C","^3P","^3O","^3A","^4N"]]],["^1C","goog/html/safescript.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^31",["^ ","^32",null,"^33",["^K",[]],"^34",["^W","^3V","^3W","^4W","^3S"]]],["^1C","clojure/test/check/random/longs.cljs"],["f33d988fd57bc9c11af1952db81c10f319c91416","^31",["^ ","^32",null,"^33",["^K",[]],"^34",["^W","^D","~$clojure.test.check.random.longs.bit-count-impl","^6E","^D"]]],["^1C","goog/log/log.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^31",["^ ","^32",null,"^33",["^K",[]],"^34",["^W","^3S","^5M"]]],["^1C","camel_snake_kebab/internals/alter_name.cljc"],["5ae08f83ceb8959971e6334596bff0214bf6fdf2","^31",["^ ","^32",null,"^33",["^K",[]],"^34",["^W","^D"]]],["^1C","goog/html/safestylesheet.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^31",["^ ","^32",null,"^33",["^K",[]],"^34",["^W","^3V","^53","^3W","^3P","^3S","^39"]]],["^1C","goog/math/integer.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^31",["^ ","^32",null,"^33",["^K",[]],"^34",["^W","^46"]]],["^1C","goog/debug/console.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^31",["^ ","^32",null,"^33",["^K",[]],"^34",["^W","~$goog.debug.TextFormatter","^3M"]]],["^1C","lambdaisland/glogi/print.cljs"],["76286836d4172602aa08006b2a754dda736ffe09","^31",["^ ","^32",null,"^33",["^K",[]],"^34",["^W","^D","^56","^3P"]]],["^1C","goog/dom/browserfeature.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^31",["^ ","^32",null,"^33",["^K",[]],"^34",["^W","^47"]]],["^1C","clojure/set.cljs"],["bc14df6666853ed869d7b88aaa864111c65d0c7f","^31",["^ ","^32",null,"^33",["^K",[]],"^34",["^W","^D"]]],["^1C","goog/uri/utils.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^31",["^ ","^32",null,"^33",["^K",[]],"^34",["^W","^3S","^3C"]]],["^1C","goog/string/const.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^31",["^ ","^32",null,"^33",["^K",[]],"^34",["^W","^3S","^3W"]]],["^1C","metabase/lib/schema/id.cljc"],["7cdfc70702a9a9e04b75ca7c9dc898ddf546f99d","^31",["^ ","^32",null,"^33",["^K",[]],"^34",["^W","^D","^3G","^4O","^4<"]]],["^1C","metabase/lib/equality.cljc"],["09e4ca6749d64c174c277a2b16f7ad15b5cf6870","^31",["^ ","^32",null,"^33",["^K",[]],"^34",["^W","^D","^10","^13","^[","^S","^Y","^V","^T"]]],["^1C","goog/dom/vendor.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^31",["^ ","^32",null,"^33",["^K",[]],"^34",["^W","^3C","^47"]]],["^1C","metabase/lib/schema/literal.cljc"],["f8f31bfaef820ab25b896b49fd404b937d0df64e","^31",["^ ","^32",null,"^33",["^K",[]],"^34",["^W","^D","^4E","^3G","^3H","^4P","^4<"]]],["^1C","metabase/lib/hierarchy.cljc"],["c9d228603522de5c85546fb645c59736d4eb94d2","^31",["^ ","^32",null,"^33",["^K",[]],"^34",["^W","^D"]]],["^1C","metabase/mbql/predicates.cljc"],["20ab1a5ccd943c35c646c5f7396ea40f9bfa7ac4","^31",["^ ","^32",null,"^33",["^K",[]],"^34",["^W","^D","^4O","^5="]]],["^1C","clojure/test/check/results.cljc"],["f33d988fd57bc9c11af1952db81c10f319c91416","^31",["^ ","^32",null,"^33",["^K",[]],"^34",["^W","^D"]]],["^48","crc-32"],["^3B","shadow.js.shim.module$crc_32.js","require","^31",["^ ","^32",null,"^33",["^K",[]],"^34",["^W"]]],["^1C","metabase/lib/schema/join.cljc"],["924e0ca4abbab776fa05357d6d22bafb8a596648","^31",["^ ","^32",null,"^33",["^K",[]],"^34",["^W","^D","^3G","^3H","^3K","^4<"]]]]],"~:clj-info",["^ ","jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/analyzer/impl.cljc",1689947050000,"jar:file:/root/.m2/repository/instaparse/instaparse/1.4.12/instaparse-1.4.12.jar!/instaparse/line_col.clj",1689946146000,"jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/source_map/base64_vlq.clj",1689947050000,"jar:file:/root/.m2/repository/instaparse/instaparse/1.4.12/instaparse-1.4.12.jar!/instaparse/viz.clj",1689946146000,"jar:file:/root/.m2/repository/org/clojure/tools.namespace/1.4.4/tools.namespace-1.4.4.jar!/clojure/tools/namespace/parse.cljc",1689946139000,"jar:file:/root/.m2/repository/weavejester/dependency/0.2.1/dependency-0.2.1.jar!/weavejester/dependency.cljc",1689946093000,"jar:file:/root/.m2/repository/instaparse/instaparse/1.4.12/instaparse-1.4.12.jar!/instaparse/transform.clj",1689946146000,"jar:file:/root/.m2/repository/ring/ring-codec/1.2.0/ring-codec-1.2.0.jar!/ring/util/codec.clj",1689946172000,"file:/home/gmrworkspace/dashboard/src/metabase/lib/hierarchy.cljc",1690286812000,"jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/instant.clj",1689947050000,"jar:file:/root/.m2/repository/org/clojure/tools.reader/1.3.6/tools.reader-1.3.6.jar!/clojure/tools/reader/default_data_readers.clj",1689946174000,"jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/pprint.cljc",1689947050000,"jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/externs.clj",1689947050000,"file:/home/gmrworkspace/dashboard/shared/src/metabase/mbql/util/match.clj",1690286812000,"jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/vendor/clojure/tools/reader/default_data_readers.clj",1689947050000,"file:/home/gmrworkspace/dashboard/shared/src/metabase/mbql/schema/helpers.cljc",1692013156305,"jar:file:/root/.m2/repository/prismatic/schema/1.4.1/schema-1.4.1.jar!/schema/core.cljc",1689946172000,"file:/home/gmrworkspace/dashboard/shared/src/metabase/shared/util/i18n.clj",1690286812000,"jar:file:/root/.m2/repository/org/clojure/tools.reader/1.3.6/tools.reader-1.3.6.jar!/clojure/tools/reader/edn.clj",1689946174000,"jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/compiler.cljc",1689947050000,"jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/env.cljc",1689947050000,"jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/analyzer/impl/namespaces.cljc",1689947050000,"jar:file:/root/.m2/repository/prismatic/schema/1.4.1/schema-1.4.1.jar!/schema/macros.clj",1689946172000,"file:/home/gmrworkspace/dashboard/src/metabase/util/i18n/plural.clj",1690286813000,"jar:file:/root/.m2/repository/metosin/malli/0.10.2/malli-0.10.2.jar!/malli/core.cljc",1689946170000,"jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/source_map.clj",1689947050000,"jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/util.cljc",1689947050000,"file:/home/gmrworkspace/dashboard/src/metabase/util.cljc",1690286813000,"jar:file:/root/.m2/repository/nano-id/nano-id/1.0.0/nano-id-1.0.0.jar!/nano_id/core.cljc",1689946171000,"file:/home/gmrworkspace/dashboard/src/metabase/lib/dispatch.cljc",1690286812000,"file:/home/gmrworkspace/dashboard/src/metabase/lib/schema/common.cljc",1690286812000,"file:/home/gmrworkspace/dashboard/src/metabase/plugins/classloader.clj",1692013156125,"jar:file:/root/.m2/repository/medley/medley/1.4.0/medley-1.4.0.jar!/medley/core.cljc",1689946185000,"jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/analyzer.cljc",1689947050000,"jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/analyzer/passes.cljc",1689947050000,"jar:file:/root/.m2/repository/org/clojure/test.check/1.1.1/test.check-1.1.1.jar!/clojure/test/check/random.clj",1689946177000,"jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/vendor/clojure/data/json.clj",1689947050000,"file:/home/gmrworkspace/dashboard/src/metabase/util/format.cljc",1690286813000,"jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/source_map/base64.clj",1689947050000,"jar:file:/root/.m2/repository/riddley/riddley/0.2.0/riddley-0.2.0.jar!/riddley/walk.clj",1689946160000,"file:/home/gmrworkspace/dashboard/src/metabase/lib/schema/ref.cljc",1690286812000,"jar:file:/root/.m2/repository/instaparse/instaparse/1.4.12/instaparse-1.4.12.jar!/instaparse/reduction.clj",1689946146000,"jar:file:/root/.m2/repository/org/tcrawley/dynapath/1.1.0/dynapath-1.1.0.jar!/dynapath/util.clj",1689946174000,"jar:file:/root/.m2/repository/camel-snake-kebab/camel-snake-kebab/0.4.3/camel-snake-kebab-0.4.3.jar!/camel_snake_kebab/internals/macros.cljc",1689946178000,"file:/home/gmrworkspace/dashboard/shared/src/metabase/mbql/util/match/impl.cljc",1690286812000,"jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/vendor/clojure/tools/reader/reader_types.clj",1689947050000,"jar:file:/root/.m2/repository/instaparse/instaparse/1.4.12/instaparse-1.4.12.jar!/instaparse/auto_flatten_seq.clj",1689946146000,"jar:file:/root/.m2/repository/instaparse/instaparse/1.4.12/instaparse-1.4.12.jar!/instaparse/core.clj",1689946146000,"jar:file:/root/.m2/repository/metosin/malli/0.10.2/malli-0.10.2.jar!/malli/generator.cljc",1689946170000,"file:/home/gmrworkspace/dashboard/src/metabase/lib/schema/id.cljc",1690286812000,"jar:file:/root/.m2/repository/org/clojure/core.cache/1.0.225/core.cache-1.0.225.jar!/clojure/core/cache.clj",1689946183000,"file:/home/gmrworkspace/dashboard/src/metabase/lib/schema/expression.cljc",1690286812000,"jar:file:/root/.m2/repository/metosin/malli/0.10.2/malli-0.10.2.jar!/malli/sci.cljc",1689946170000,"jar:file:/root/.m2/repository/potemkin/potemkin/0.4.6/potemkin-0.4.6.jar!/potemkin/types.clj",1689946176000,"jar:file:/root/.m2/repository/org/clojure/test.check/1.1.1/test.check-1.1.1.jar!/clojure/test/check/properties.cljc",1689946177000,"jar:file:/root/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/set.clj",1689946092000,"jar:file:/root/.m2/repository/org/clojure/math.numeric-tower/0.0.5/math.numeric-tower-0.0.5.jar!/clojure/math/numeric_tower.clj",1689946148000,"jar:file:/root/.m2/repository/net/cgrand/macrovich/0.2.1/macrovich-0.2.1.jar!/net/cgrand/macrovich.cljc",1689946165000,"jar:file:/root/.m2/repository/colorize/colorize/0.1.1/colorize-0.1.1.jar!/colorize/core.clj",1689946104000,"jar:file:/root/.m2/repository/borkdude/dynaload/0.3.5/dynaload-0.3.5.jar!/borkdude/dynaload.cljc",1689946165000,"jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/vendor/clojure/tools/reader/impl/inspect.clj",1689947050000,"file:/home/gmrworkspace/dashboard/src/metabase/lib/options.cljc",1692013156125,"jar:file:/root/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/string.clj",1689946092000,"jar:file:/root/.m2/repository/potemkin/potemkin/0.4.6/potemkin-0.4.6.jar!/potemkin.clj",1689946176000,"jar:file:/root/.m2/repository/instaparse/instaparse/1.4.12/instaparse-1.4.12.jar!/instaparse/failure.clj",1689946146000,"jar:file:/root/.m2/repository/prismatic/schema/1.4.1/schema-1.4.1.jar!/schema/spec/variant.cljc",1689946172000,"jar:file:/root/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/core.clj",1689946092000,"file:/home/gmrworkspace/dashboard/src/metabase/util/i18n/impl.clj",1692013156125,"jar:file:/root/.m2/repository/org/clojure/tools.namespace/1.4.4/tools.namespace-1.4.4.jar!/clojure/tools/namespace/dependency.cljc",1689946139000,"jar:file:/root/.m2/repository/prismatic/schema/1.4.1/schema-1.4.1.jar!/schema/spec/leaf.cljc",1689946172000,"jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/analyzer/passes/and_or.cljc",1689947050000,"jar:file:/root/.m2/repository/org/clojure/test.check/1.1.1/test.check-1.1.1.jar!/clojure/test/check.cljc",1689946177000,"jar:file:/root/.m2/repository/riddley/riddley/0.2.0/riddley-0.2.0.jar!/riddley/compiler.clj",1689946160000,"jar:file:/root/.m2/repository/org/clojure/core.memoize/1.0.257/core.memoize-1.0.257.jar!/clojure/core/memoize.clj",1689946178000,"jar:file:/root/.m2/repository/metosin/malli/0.10.2/malli-0.10.2.jar!/malli/destructure.cljc",1689946170000,"jar:file:/root/.m2/repository/instaparse/instaparse/1.4.12/instaparse-1.4.12.jar!/instaparse/print.clj",1689946146000,"jar:file:/root/.m2/repository/org/clojure/tools.namespace/1.4.4/tools.namespace-1.4.4.jar!/clojure/tools/namespace/track.cljc",1689946139000,"jar:file:/root/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/pprint.clj",1689946092000,"jar:file:/root/.m2/repository/org/clojure/java.classpath/1.0.0/java.classpath-1.0.0.jar!/clojure/java/classpath.clj",1689946162000,"jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/js_deps.cljc",1689947050000,"jar:file:/root/.m2/repository/metosin/malli/0.10.2/malli-0.10.2.jar!/malli/impl/regex.cljc",1689946170000,"jar:file:/root/.m2/repository/cheshire/cheshire/5.11.0/cheshire-5.11.0.jar!/cheshire/factory.clj",1689946173000,"jar:file:/root/.m2/repository/org/clojure/tools.reader/1.3.6/tools.reader-1.3.6.jar!/clojure/tools/reader/impl/errors.clj",1689946174000,"jar:file:/root/.m2/repository/metosin/malli/0.10.2/malli-0.10.2.jar!/malli/experimental.cljc",1689946170000,"jar:file:/root/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/walk.clj",1689946092000,"jar:file:/root/.m2/repository/org/clojure/tools.reader/1.3.6/tools.reader-1.3.6.jar!/clojure/tools/reader.clj",1689946174000,"file:/home/gmrworkspace/dashboard/src/metabase/lib/common.cljc",1690286812000,"jar:file:/root/.m2/repository/prismatic/schema/1.4.1/schema-1.4.1.jar!/schema/spec/core.cljc",1689946172000,"jar:file:/root/.m2/repository/org/clojure/test.check/1.1.1/test.check-1.1.1.jar!/clojure/test/check/generators.cljc",1689946177000,"jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/core.cljc",1689947050000,"jar:file:/root/.m2/repository/cheshire/cheshire/5.11.0/cheshire-5.11.0.jar!/cheshire/generate.clj",1689946173000,"jar:file:/root/.m2/repository/metosin/malli/0.10.2/malli-0.10.2.jar!/malli/experimental/time.cljc",1689946170000,"jar:file:/root/.m2/repository/org/clojure/tools.reader/1.3.6/tools.reader-1.3.6.jar!/clojure/tools/reader/reader_types.clj",1689946174000,"file:/home/gmrworkspace/dashboard/shared/src/metabase/mbql/schema.cljc",1692013156305,"jar:file:/root/.m2/repository/cheshire/cheshire/5.11.0/cheshire-5.11.0.jar!/cheshire/parse.clj",1689946173000,"file:/home/gmrworkspace/dashboard/src/metabase/util/i18n.clj",1692013156125,"jar:file:/root/.m2/repository/instaparse/instaparse/1.4.12/instaparse-1.4.12.jar!/instaparse/cfg.clj",1689946146000,"jar:file:/root/.m2/repository/cheshire/cheshire/5.11.0/cheshire-5.11.0.jar!/cheshire/core.clj",1689946173000,"jar:file:/root/.m2/repository/metosin/malli/0.10.2/malli-0.10.2.jar!/malli/impl/util.cljc",1689946170000,"jar:file:/root/.m2/repository/metosin/malli/0.10.2/malli-0.10.2.jar!/malli/registry.cljc",1689946170000,"jar:file:/root/.m2/repository/instaparse/instaparse/1.4.12/instaparse-1.4.12.jar!/instaparse/gll.clj",1689946146000,"jar:file:/root/.m2/repository/binaryage/devtools/1.0.6/devtools-1.0.6.jar!/devtools/defaults.clj",1689947054000,"jar:file:/root/.m2/repository/metosin/malli/0.10.2/malli-0.10.2.jar!/malli/instrument.clj",1689946170000,"jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/vendor/clojure/tools/reader.clj",1689947050000,"jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/spec/gen/alpha.cljc",1689947050000,"file:/home/gmrworkspace/dashboard/src/metabase/lib/ref.cljc",1690286812000,"jar:file:/root/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/edn.clj",1689946092000,"jar:file:/root/.m2/repository/nano-id/nano-id/1.0.0/nano-id-1.0.0.jar!/nano_id/random.cljc",1689946171000,"jar:file:/root/.m2/repository/environ/environ/1.2.0/environ-1.2.0.jar!/environ/core.cljc",1689946163000,"jar:file:/root/.m2/repository/prismatic/schema/1.4.1/schema-1.4.1.jar!/schema/spec/collection.cljc",1689946172000,"jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/vendor/clojure/tools/reader/impl/errors.clj",1689947050000,"jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/tagged_literals.cljc",1689947050000,"jar:file:/root/.m2/repository/instaparse/instaparse/1.4.12/instaparse-1.4.12.jar!/instaparse/repeat.clj",1689946146000,"jar:file:/root/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/java/io.clj",1689946092000,"jar:file:/root/.m2/repository/org/clojure/test.check/1.1.1/test.check-1.1.1.jar!/clojure/test/check/results.cljc",1689946177000,"jar:file:/root/.m2/repository/com/lambdaisland/glogi/1.2.164/glogi-1.2.164.jar!/lambdaisland/glogi.clj",1689947043000,"jar:file:/root/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/instant.clj",1689946092000,"file:/home/gmrworkspace/dashboard/shared/src/metabase/shared/util/namespaces.clj",1690286812000,"jar:file:/root/.m2/repository/org/clojure/tools.namespace/1.4.4/tools.namespace-1.4.4.jar!/clojure/tools/namespace/file.clj",1689946139000,"jar:file:/root/.m2/repository/org/clojure/core.match/1.0.1/core.match-1.0.1.jar!/cljs/core/match.clj",1689946174000,"jar:file:/root/.m2/repository/org/clojure/spec.alpha/0.3.218/spec.alpha-0.3.218.jar!/clojure/spec/gen/alpha.clj",1689946117000,"jar:file:/root/.m2/repository/metosin/malli/0.10.2/malli-0.10.2.jar!/malli/error.cljc",1689946170000,"file:/home/gmrworkspace/dashboard/shared/src/metabase/mbql/schema/macros.clj",1690286812000,"jar:file:/root/.m2/repository/prismatic/schema/1.4.1/schema-1.4.1.jar!/schema/utils.cljc",1689946172000,"file:/home/gmrworkspace/dashboard/src/metabase/util/malli/registry.cljc",1690286813000,"file:/home/gmrworkspace/dashboard/src/metabase/config.clj",1692013154929,"file:/home/gmrworkspace/dashboard/src/metabase/util/log.clj",1690286813000,"file:/home/gmrworkspace/dashboard/src/metabase/util/malli.cljc",1690286813000,"jar:file:/root/.m2/repository/org/clojure/test.check/1.1.1/test.check-1.1.1.jar!/clojure/test/check/rose_tree.cljc",1689946177000,"jar:file:/root/.m2/repository/org/clojure/tools.reader/1.3.6/tools.reader-1.3.6.jar!/clojure/tools/reader/impl/inspect.clj",1689946174000,"jar:file:/root/.m2/repository/instaparse/instaparse/1.4.12/instaparse-1.4.12.jar!/instaparse/combinators_source.clj",1689946146000,"jar:file:/root/.m2/repository/instaparse/instaparse/1.4.12/instaparse-1.4.12.jar!/instaparse/abnf.clj",1689946146000,"jar:file:/root/.m2/repository/org/clojure/tools.namespace/1.4.4/tools.namespace-1.4.4.jar!/clojure/tools/namespace/find.clj",1689946139000,"jar:file:/root/.m2/repository/org/tcrawley/dynapath/1.1.0/dynapath-1.1.0.jar!/dynapath/dynamic_classpath.clj",1689946174000,"file:/home/gmrworkspace/dashboard/src/metabase/lib/schema/temporal_bucketing.cljc",1690286812000,"jar:file:/root/.m2/repository/cheshire/cheshire/5.11.0/cheshire-5.11.0.jar!/cheshire/generate_seq.clj",1689946173000,"file:/home/gmrworkspace/dashboard/src/metabase/lib/schema/mbql_clause.cljc",1690286812000,"jar:file:/root/.m2/repository/metosin/malli/0.10.2/malli-0.10.2.jar!/malli/util.cljc",1689946170000,"file:/home/gmrworkspace/dashboard/src/metabase/util/jvm.clj",1692013156125],"~:analyzer",["^ ","^3",null,"^4",["^ "],"^5",["^ ","^6","Logic for determining whether two pMBQL queries are equal.","^7","metabase/lib/equality.cljc","^8",1,"^9",5,"^:",1,"^;",26],"^<",["^ ","^=","^>","^?","^@","^A","^B","^C","^D","^E","^F","^G","^H"],"^I",null,"^J",["^K",["~$="]],"^L","^M","^N",["^ "],"^Q",null,"^R",["^ ","^S","^S","^T","^T","^U","^S","^D","^D","^V","^V","^W","^W","^X","^Y","^Z","^[","~$m","^10","^11","^V","^12","^13","^[","^[","^Y","^Y","^14","^T","^13","^13","^10","^10"],"^15",["^K",["^16"]],"~:shadow/js-access-global",["^K",["Error"]],"^17",null,"~:defs",["^ ","~$=",["^ ","^5",["^ ","^7","metabase/lib/equality.cljc","^8",13,"^9",11,"^:",13,"^;",12,"~:arglists",["^1:",["~$quote",["^1:",[["~$x","~$y"]]]]],"^6","Determine whether two already-normalized pMBQL maps, clauses, or other sorts of expressions are equal. The basic rule\n  is that two things are considered equal if they are [[clojure.core/=]], or, if they are both maps, if they\n  are [[clojure.core/=]] if you ignore all qualified keyword keys besides `:lib/type`."],"^L","^20","^7","metabase/lib/equality.cljc","^;",12,"^9",1,"^8",13,"^:",13,"~:tag","^1X","^9T",["^1:",["^9U",["^1:",[["~$x","~$y"]]]]],"^6","Determine whether two already-normalized pMBQL maps, clauses, or other sorts of expressions are equal. The basic rule\n  is that two things are considered equal if they are [[clojure.core/=]], or, if they are both maps, if they\n  are [[clojure.core/=]] if you ignore all qualified keyword keys besides `:lib/type`."],"~$relevant-keys-set",["^ ","~:protocol-inline",null,"^5",["^ ","^7","metabase/lib/equality.cljc","^8",32,"^9",8,"^:",32,"^;",25,"~:private",true,"^9T",["^1:",["^9U",["^1:",[["~$m"]]]]],"^6","Set of keys in a map that we consider relevant for [[=]] purposes."],"^9Y",true,"^L","^1W","^7","metabase/lib/equality.cljc","^;",25,"~:method-params",["^1:",[["~$m"]]],"~:protocol-impl",null,"~:arglists-meta",["^1:",[null,null]],"^9",1,"~:variadic?",false,"^8",32,"~:ret-tag","~$any","^:",32,"~:max-fixed-arity",1,"~:fn-var",true,"^9T",["^1:",["^9U",["^1:",[["~$m"]]]]],"^6","Set of keys in a map that we consider relevant for [[=]] purposes."],"~$*side->uuid->index*",["^ ","^5",["^ ","^7","metabase/lib/equality.cljc","^8",59,"^9",26,"^:",59,"^;",45,"~:dynamic",true,"^9Y",true],"^9Y",true,"^L","^1V","^7","metabase/lib/equality.cljc","^;",45,"^9",1,"^:7",true,"^8",59,"^:",59,"^9V","^:3"],"~$aggregation-uuid->index",["^ ","^9X",null,"^5",["^ ","^7","metabase/lib/equality.cljc","^8",61,"^9",8,"^:",61,"^;",31,"^9Y",true,"^9T",["^1:",["^9U",["^1:",[["~$stage"]]]]]],"^9Y",true,"^L","^2:","^7","metabase/lib/equality.cljc","^;",31,"^9Z",["^1:",[["^:9"]]],"^9[",null,"^:0",["^1:",[null,null]],"^9",1,"^:1",false,"^8",61,"^:2","^:3","^:",61,"^:4",1,"^:5",true,"^9T",["^1:",["^9U",["^1:",[["^:9"]]]]]],"~$ref=",["^ ","^9X",null,"^5",["^ ","^7","metabase/lib/equality.cljc","^8",94,"^9",20,"^:",94,"^;",24,"~:deprecated",true,"^9T",["^1:",["^9U",["^1:",[["~$x","~$y"]]]]],"^6","Are two refs `x` and `y` equal?\n\n  DEPRECATED: use [[find-closest-matching-ref]] instead. This does not work if things like `:base-type` are missing or\n  differ slightly, or handle `:binning` correctly, let alone when things are broken more significantly. If we improve\n  type calculation it shouldn't break existing queries... right?"],"^L","^2T","^7","metabase/lib/equality.cljc","^;",24,"^9Z",["^1:",[["~$x","~$y"]]],"^9[",null,"^:0",["^1:",[null,null]],"^9",1,"^:1",false,"^8",94,"^:;",true,"^:2","^:3","^:",94,"^:4",2,"^:5",true,"^9T",["^1:",["^9U",["^1:",[["~$x","~$y"]]]]],"^6","Are two refs `x` and `y` equal?\n\n  DEPRECATED: use [[find-closest-matching-ref]] instead. This does not work if things like `:base-type` are missing or\n  differ slightly, or handle `:binning` correctly, let alone when things are broken more significantly. If we improve\n  type calculation it shouldn't break existing queries... right?"],"~$update-options-remove-namespaced-keys",["^ ","^9X",null,"^5",["^ ","^7","metabase/lib/equality.cljc","^8",105,"^9",8,"^:",105,"^;",45,"^9Y",true,"^9T",["^1:",["^9U",["^1:",[["~$a-ref"]]]]]],"^9Y",true,"^L","^2Z","^7","metabase/lib/equality.cljc","^;",45,"^9Z",["^1:",[["^:="]]],"^9[",null,"^:0",["^1:",[null,null]],"^9",1,"^:1",false,"^8",105,"^:2",["^K",[null,"~$clj","^:3","~$clj-nil"]],"^:",105,"^:4",1,"^:5",true,"^9T",["^1:",["^9U",["^1:",[["^:="]]]]]],"~$find-closest-matching-ref",["^ ","^9X",null,"^5",["^ ","^7","metabase/lib/equality.cljc","^8",109,"^9",7,"^:",109,"^;",32,"^9T",["^1:",["^9U",["^1:",[["^:=","~$refs"],["~$metadata-providerable","^:=","^:A"]]]]],"^6","Find the ref that most closely matches `a-ref` from a sequence of `refs`. This is meant to power things\n  like [[metabase.lib.breakout/breakoutable-columns]] which are supposed to include `:breakout-position` for columns\n  that are already present as a breakout; sometimes the column in the breakout does not exactly match what MLv2 would\n  have generated. So try to figure out which column it is referring to.\n\n  This first looks for a matching ref with a strict comparison, then in increasingly less-strict comparisons until it\n  finds something that matches. This is mostly to work around bugs like #31482 where MLv1 generated queries with\n  `:field` refs that did not include join aliases even tho the Fields came from joined Tables... we still know the\n  Fields are the same if they have the same IDs.\n\n  The three-arity version can also find matches between integer Field ID references like `[:field {} 1]` and\n  equivalent string column name field literal references like `[:field {} \"bird_type\"]` by resolving Field IDs using\n  a `metadata-providerable` (something that can be treated as a metadata provider, e.g. a `query` with a\n  MetadataProvider associated with it). This is the ultimately hacky workaround for totally busted legacy queries.\n  Note that this currently only works when `a-ref` is the one with the integer Field ID and `refs` have string literal\n  column names; it does not work the other way around. Luckily we currently don't have problems with MLv1/legacy\n  queries accidentally using string :field literals where it shouldn't have been doing so.","~:top-fn",["^ ","^:1",false,"~:fixed-arity",3,"^:4",3,"^9Z",[["^:=","^:A"],["^:B","^:=","^:A"]],"^9T",["^1:",[["^:=","^:A"],["^:B","^:=","^:A"]]],"^:0",["^1:",[null,null]]]],"^L","^2S","^7","metabase/lib/equality.cljc","^;",32,"^:C",["^ ","^:1",false,"^:D",3,"^:4",3,"^9Z",[["^:=","^:A"],["^:B","^:=","^:A"]],"^9T",["^1:",[["^:=","^:A"],["^:B","^:=","^:A"]]],"^:0",["^1:",[null,null]]],"^9Z",[["^:=","^:A"],["^:B","^:=","^:A"]],"^9[",null,"^:D",3,"^:0",["^1:",[null,null]],"^9",1,"^:1",false,"~:methods",[["^ ","^:D",2,"^:1",false,"^9V",["^K",[null,"^:3","^:?"]]],["^ ","^:D",3,"^:1",false,"^9V",["^K",["^:3","^:?"]]]],"^8",109,"^:",109,"^:4",3,"^:5",true,"^9T",["^1:",[["^:=","^:A"],["^:B","^:=","^:A"]]],"^6","Find the ref that most closely matches `a-ref` from a sequence of `refs`. This is meant to power things\n  like [[metabase.lib.breakout/breakoutable-columns]] which are supposed to include `:breakout-position` for columns\n  that are already present as a breakout; sometimes the column in the breakout does not exactly match what MLv2 would\n  have generated. So try to figure out which column it is referring to.\n\n  This first looks for a matching ref with a strict comparison, then in increasingly less-strict comparisons until it\n  finds something that matches. This is mostly to work around bugs like #31482 where MLv1 generated queries with\n  `:field` refs that did not include join aliases even tho the Fields came from joined Tables... we still know the\n  Fields are the same if they have the same IDs.\n\n  The three-arity version can also find matches between integer Field ID references like `[:field {} 1]` and\n  equivalent string column name field literal references like `[:field {} \"bird_type\"]` by resolving Field IDs using\n  a `metadata-providerable` (something that can be treated as a metadata provider, e.g. a `query` with a\n  MetadataProvider associated with it). This is the ultimately hacky workaround for totally busted legacy queries.\n  Note that this currently only works when `a-ref` is the one with the integer Field ID and `refs` have string literal\n  column names; it does not work the other way around. Luckily we currently don't have problems with MLv1/legacy\n  queries accidentally using string :field literals where it shouldn't have been doing so."]],"^18",["^ ","^D","^D","^T","^T","^14","^T"],"~:cljs.analyzer/constants",["^ ","^15",["^K",["~:lib/uuid","~:metabase.lib.equality/no-right","~:lib/type","~:base-type","~:else","~:default","^L","~:join-alias","~:field","~:metabase.lib.equality/different-dispatch-values","~:metadata-fn","~:effective-type","~:dispatch-type/sequential","~:dispatch-type/map","~:mbql.stage/mbql","~:right","~:aggregation","~:metabase.lib.equality/no-left","~:binning","~:hierarchy","~:left"]],"~:order",["^:Y","^:O","^:L","^:I","^:S","^:R","^:G","^:V","^:T","^:Z","^:U","^:W","^:H","^:K","^:X","^:P","^:J","^:Q","^:M","^:N","^L"]],"^1?",["^ ","^16",["^K",[]]],"^1@",["^ "],"^1A",["^W","^D","^10","^13","^[","^S","^Y","^V","^T"]],"^P","^M","~:ns-specs",["^ "],"~:ns-spec-vars",["^K",[]],"~:compiler-options",["^30",[["^;2","~:static-fns"],true,["^;2","~:shadow-tweaks"],null,["^;2","~:source-map-inline"],null,["^;2","~:elide-asserts"],false,["^;2","~:optimize-constants"],null,["^;2","^1F"],null,["^;2","~:external-config"],null,["^;2","~:tooling-config"],null,["^;2","~:emit-constants"],null,["^;2","~:load-tests"],null,["^;2","~:form-size-threshold"],null,["^;2","~:global-goog-object&array"],null,["^;2","~:data-readers"],null,["^;2","~:infer-externs"],"~:auto",["^;2","^1H"],["^K",["^1I","^1J"]],["~:js-options","~:js-provider"],"^16",["~:mode"],"~:dev",["^;2","~:fn-invoke-direct"],null,["^;2","~:source-map"],"/dev/null"]]]