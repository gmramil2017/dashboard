["^ ","~:output",["^ ","~:js","goog.provide('metabase.lib.metadata.protocols');\n\n/**\n * Protocol for something that we can get information about Tables and Fields from. This can be provided in various ways\n *   various ways:\n * \n *   1. By raw metadata attached to the query itself\n * \n *   2. By the application database in Clj code\n * \n *   3. By the Query Processor store in Clj code\n * \n *   4. By the Redux store in JS\n * \n *   5. By (hopefully cached) REST API calls\n * \n *   This protocol is pretty limited at this point; in the future, we'll probably want to add:\n * \n *   - methods for searching for Tables or Fields matching some string\n * \n *   - paging, so if you have 10k Tables we don't do crazy requests that fetch them all at once\n * \n *   For all of these methods: if no matching object can be found, you should generally return `nil` rather than throwing\n *   an Exception. Let [[metabase.lib.metadata]] worry about throwing exceptions.\n * @interface\n */\nmetabase.lib.metadata.protocols.MetadataProvider = function(){};\n\nvar metabase$lib$metadata$protocols$MetadataProvider$database$dyn_60247 = (function (metadata_provider){\nvar x__5393__auto__ = (((metadata_provider == null))?null:metadata_provider);\nvar m__5394__auto__ = (metabase.lib.metadata.protocols.database[goog.typeOf(x__5393__auto__)]);\nif((!((m__5394__auto__ == null)))){\nreturn (m__5394__auto__.cljs$core$IFn$_invoke$arity$1 ? m__5394__auto__.cljs$core$IFn$_invoke$arity$1(metadata_provider) : m__5394__auto__.call(null,metadata_provider));\n} else {\nvar m__5392__auto__ = (metabase.lib.metadata.protocols.database[\"_\"]);\nif((!((m__5392__auto__ == null)))){\nreturn (m__5392__auto__.cljs$core$IFn$_invoke$arity$1 ? m__5392__auto__.cljs$core$IFn$_invoke$arity$1(metadata_provider) : m__5392__auto__.call(null,metadata_provider));\n} else {\nthrow cljs.core.missing_protocol(\"MetadataProvider.database\",metadata_provider);\n}\n}\n});\n/**\n * Metadata about the Database we're querying. Should match the [[metabase.lib.metadata/DatabaseMetadata]] schema.\n *   This includes important info such as the supported `:features` and the like.\n */\nmetabase.lib.metadata.protocols.database = (function metabase$lib$metadata$protocols$database(metadata_provider){\nif((((!((metadata_provider == null)))) && ((!((metadata_provider.metabase$lib$metadata$protocols$MetadataProvider$database$arity$1 == null)))))){\nreturn metadata_provider.metabase$lib$metadata$protocols$MetadataProvider$database$arity$1(metadata_provider);\n} else {\nreturn metabase$lib$metadata$protocols$MetadataProvider$database$dyn_60247(metadata_provider);\n}\n});\n\nvar metabase$lib$metadata$protocols$MetadataProvider$table$dyn_60248 = (function (metadata_provider,table_id){\nvar x__5393__auto__ = (((metadata_provider == null))?null:metadata_provider);\nvar m__5394__auto__ = (metabase.lib.metadata.protocols.table[goog.typeOf(x__5393__auto__)]);\nif((!((m__5394__auto__ == null)))){\nreturn (m__5394__auto__.cljs$core$IFn$_invoke$arity$2 ? m__5394__auto__.cljs$core$IFn$_invoke$arity$2(metadata_provider,table_id) : m__5394__auto__.call(null,metadata_provider,table_id));\n} else {\nvar m__5392__auto__ = (metabase.lib.metadata.protocols.table[\"_\"]);\nif((!((m__5392__auto__ == null)))){\nreturn (m__5392__auto__.cljs$core$IFn$_invoke$arity$2 ? m__5392__auto__.cljs$core$IFn$_invoke$arity$2(metadata_provider,table_id) : m__5392__auto__.call(null,metadata_provider,table_id));\n} else {\nthrow cljs.core.missing_protocol(\"MetadataProvider.table\",metadata_provider);\n}\n}\n});\n/**\n * Return metadata for a specific Table. Metadata should satisfy [[metabase.lib.metadata/TableMetadata]].\n */\nmetabase.lib.metadata.protocols.table = (function metabase$lib$metadata$protocols$table(metadata_provider,table_id){\nif((((!((metadata_provider == null)))) && ((!((metadata_provider.metabase$lib$metadata$protocols$MetadataProvider$table$arity$2 == null)))))){\nreturn metadata_provider.metabase$lib$metadata$protocols$MetadataProvider$table$arity$2(metadata_provider,table_id);\n} else {\nreturn metabase$lib$metadata$protocols$MetadataProvider$table$dyn_60248(metadata_provider,table_id);\n}\n});\n\nvar metabase$lib$metadata$protocols$MetadataProvider$field$dyn_60250 = (function (metadata_provider,field_id){\nvar x__5393__auto__ = (((metadata_provider == null))?null:metadata_provider);\nvar m__5394__auto__ = (metabase.lib.metadata.protocols.field[goog.typeOf(x__5393__auto__)]);\nif((!((m__5394__auto__ == null)))){\nreturn (m__5394__auto__.cljs$core$IFn$_invoke$arity$2 ? m__5394__auto__.cljs$core$IFn$_invoke$arity$2(metadata_provider,field_id) : m__5394__auto__.call(null,metadata_provider,field_id));\n} else {\nvar m__5392__auto__ = (metabase.lib.metadata.protocols.field[\"_\"]);\nif((!((m__5392__auto__ == null)))){\nreturn (m__5392__auto__.cljs$core$IFn$_invoke$arity$2 ? m__5392__auto__.cljs$core$IFn$_invoke$arity$2(metadata_provider,field_id) : m__5392__auto__.call(null,metadata_provider,field_id));\n} else {\nthrow cljs.core.missing_protocol(\"MetadataProvider.field\",metadata_provider);\n}\n}\n});\n/**\n * Return metadata for a specific Field. Metadata should satisfy [[metabase.lib.metadata/ColumnMetadata]].\n */\nmetabase.lib.metadata.protocols.field = (function metabase$lib$metadata$protocols$field(metadata_provider,field_id){\nif((((!((metadata_provider == null)))) && ((!((metadata_provider.metabase$lib$metadata$protocols$MetadataProvider$field$arity$2 == null)))))){\nreturn metadata_provider.metabase$lib$metadata$protocols$MetadataProvider$field$arity$2(metadata_provider,field_id);\n} else {\nreturn metabase$lib$metadata$protocols$MetadataProvider$field$dyn_60250(metadata_provider,field_id);\n}\n});\n\nvar metabase$lib$metadata$protocols$MetadataProvider$card$dyn_60252 = (function (metadata_provider,card_id){\nvar x__5393__auto__ = (((metadata_provider == null))?null:metadata_provider);\nvar m__5394__auto__ = (metabase.lib.metadata.protocols.card[goog.typeOf(x__5393__auto__)]);\nif((!((m__5394__auto__ == null)))){\nreturn (m__5394__auto__.cljs$core$IFn$_invoke$arity$2 ? m__5394__auto__.cljs$core$IFn$_invoke$arity$2(metadata_provider,card_id) : m__5394__auto__.call(null,metadata_provider,card_id));\n} else {\nvar m__5392__auto__ = (metabase.lib.metadata.protocols.card[\"_\"]);\nif((!((m__5392__auto__ == null)))){\nreturn (m__5392__auto__.cljs$core$IFn$_invoke$arity$2 ? m__5392__auto__.cljs$core$IFn$_invoke$arity$2(metadata_provider,card_id) : m__5392__auto__.call(null,metadata_provider,card_id));\n} else {\nthrow cljs.core.missing_protocol(\"MetadataProvider.card\",metadata_provider);\n}\n}\n});\n/**\n * Return information about a specific Saved Question, aka a Card. This should\n *  match [[metabase.lib.metadata/CardMetadata]. Currently just used for display name purposes if you have a Card as a\n *  source query.\n */\nmetabase.lib.metadata.protocols.card = (function metabase$lib$metadata$protocols$card(metadata_provider,card_id){\nif((((!((metadata_provider == null)))) && ((!((metadata_provider.metabase$lib$metadata$protocols$MetadataProvider$card$arity$2 == null)))))){\nreturn metadata_provider.metabase$lib$metadata$protocols$MetadataProvider$card$arity$2(metadata_provider,card_id);\n} else {\nreturn metabase$lib$metadata$protocols$MetadataProvider$card$dyn_60252(metadata_provider,card_id);\n}\n});\n\nvar metabase$lib$metadata$protocols$MetadataProvider$metric$dyn_60256 = (function (metadata_provider,metric_id){\nvar x__5393__auto__ = (((metadata_provider == null))?null:metadata_provider);\nvar m__5394__auto__ = (metabase.lib.metadata.protocols.metric[goog.typeOf(x__5393__auto__)]);\nif((!((m__5394__auto__ == null)))){\nreturn (m__5394__auto__.cljs$core$IFn$_invoke$arity$2 ? m__5394__auto__.cljs$core$IFn$_invoke$arity$2(metadata_provider,metric_id) : m__5394__auto__.call(null,metadata_provider,metric_id));\n} else {\nvar m__5392__auto__ = (metabase.lib.metadata.protocols.metric[\"_\"]);\nif((!((m__5392__auto__ == null)))){\nreturn (m__5392__auto__.cljs$core$IFn$_invoke$arity$2 ? m__5392__auto__.cljs$core$IFn$_invoke$arity$2(metadata_provider,metric_id) : m__5392__auto__.call(null,metadata_provider,metric_id));\n} else {\nthrow cljs.core.missing_protocol(\"MetadataProvider.metric\",metadata_provider);\n}\n}\n});\n/**\n * Return metadata for a particular capital-M Metric, i.e. something from the `metric` table in the application\n *  database. Metadata should match [[metabase.lib.metadata/MetricMetadata]].\n */\nmetabase.lib.metadata.protocols.metric = (function metabase$lib$metadata$protocols$metric(metadata_provider,metric_id){\nif((((!((metadata_provider == null)))) && ((!((metadata_provider.metabase$lib$metadata$protocols$MetadataProvider$metric$arity$2 == null)))))){\nreturn metadata_provider.metabase$lib$metadata$protocols$MetadataProvider$metric$arity$2(metadata_provider,metric_id);\n} else {\nreturn metabase$lib$metadata$protocols$MetadataProvider$metric$dyn_60256(metadata_provider,metric_id);\n}\n});\n\nvar metabase$lib$metadata$protocols$MetadataProvider$segment$dyn_60257 = (function (metadata_provider,segment_id){\nvar x__5393__auto__ = (((metadata_provider == null))?null:metadata_provider);\nvar m__5394__auto__ = (metabase.lib.metadata.protocols.segment[goog.typeOf(x__5393__auto__)]);\nif((!((m__5394__auto__ == null)))){\nreturn (m__5394__auto__.cljs$core$IFn$_invoke$arity$2 ? m__5394__auto__.cljs$core$IFn$_invoke$arity$2(metadata_provider,segment_id) : m__5394__auto__.call(null,metadata_provider,segment_id));\n} else {\nvar m__5392__auto__ = (metabase.lib.metadata.protocols.segment[\"_\"]);\nif((!((m__5392__auto__ == null)))){\nreturn (m__5392__auto__.cljs$core$IFn$_invoke$arity$2 ? m__5392__auto__.cljs$core$IFn$_invoke$arity$2(metadata_provider,segment_id) : m__5392__auto__.call(null,metadata_provider,segment_id));\n} else {\nthrow cljs.core.missing_protocol(\"MetadataProvider.segment\",metadata_provider);\n}\n}\n});\n/**\n * Return metadata for a particular captial-S Segment, i.e. something from the `segment` table in the application\n *  database. Metadata should match [[metabase.lib.metadata/SegmentMetadata]].\n */\nmetabase.lib.metadata.protocols.segment = (function metabase$lib$metadata$protocols$segment(metadata_provider,segment_id){\nif((((!((metadata_provider == null)))) && ((!((metadata_provider.metabase$lib$metadata$protocols$MetadataProvider$segment$arity$2 == null)))))){\nreturn metadata_provider.metabase$lib$metadata$protocols$MetadataProvider$segment$arity$2(metadata_provider,segment_id);\n} else {\nreturn metabase$lib$metadata$protocols$MetadataProvider$segment$dyn_60257(metadata_provider,segment_id);\n}\n});\n\nvar metabase$lib$metadata$protocols$MetadataProvider$tables$dyn_60258 = (function (metadata_provider){\nvar x__5393__auto__ = (((metadata_provider == null))?null:metadata_provider);\nvar m__5394__auto__ = (metabase.lib.metadata.protocols.tables[goog.typeOf(x__5393__auto__)]);\nif((!((m__5394__auto__ == null)))){\nreturn (m__5394__auto__.cljs$core$IFn$_invoke$arity$1 ? m__5394__auto__.cljs$core$IFn$_invoke$arity$1(metadata_provider) : m__5394__auto__.call(null,metadata_provider));\n} else {\nvar m__5392__auto__ = (metabase.lib.metadata.protocols.tables[\"_\"]);\nif((!((m__5392__auto__ == null)))){\nreturn (m__5392__auto__.cljs$core$IFn$_invoke$arity$1 ? m__5392__auto__.cljs$core$IFn$_invoke$arity$1(metadata_provider) : m__5392__auto__.call(null,metadata_provider));\n} else {\nthrow cljs.core.missing_protocol(\"MetadataProvider.tables\",metadata_provider);\n}\n}\n});\n/**\n * Return a sequence of Tables in this Database. Tables should satisfy the [[metabase.lib.metadata/TableMetadata]]\n *   schema. This should also include things that serve as 'virtual' tables, e.g. Saved Questions or Models. But users of\n *   MLv2 should not need to know that! If we add support for Super Models or Quantum Questions in the future, they can\n *   just come back from this method in the same shape as everything else, the Query Builder can display them, and the\n *   internals can be tucked away here in MLv2.\n */\nmetabase.lib.metadata.protocols.tables = (function metabase$lib$metadata$protocols$tables(metadata_provider){\nif((((!((metadata_provider == null)))) && ((!((metadata_provider.metabase$lib$metadata$protocols$MetadataProvider$tables$arity$1 == null)))))){\nreturn metadata_provider.metabase$lib$metadata$protocols$MetadataProvider$tables$arity$1(metadata_provider);\n} else {\nreturn metabase$lib$metadata$protocols$MetadataProvider$tables$dyn_60258(metadata_provider);\n}\n});\n\nvar metabase$lib$metadata$protocols$MetadataProvider$fields$dyn_60259 = (function (metadata_provider,table_id){\nvar x__5393__auto__ = (((metadata_provider == null))?null:metadata_provider);\nvar m__5394__auto__ = (metabase.lib.metadata.protocols.fields[goog.typeOf(x__5393__auto__)]);\nif((!((m__5394__auto__ == null)))){\nreturn (m__5394__auto__.cljs$core$IFn$_invoke$arity$2 ? m__5394__auto__.cljs$core$IFn$_invoke$arity$2(metadata_provider,table_id) : m__5394__auto__.call(null,metadata_provider,table_id));\n} else {\nvar m__5392__auto__ = (metabase.lib.metadata.protocols.fields[\"_\"]);\nif((!((m__5392__auto__ == null)))){\nreturn (m__5392__auto__.cljs$core$IFn$_invoke$arity$2 ? m__5392__auto__.cljs$core$IFn$_invoke$arity$2(metadata_provider,table_id) : m__5392__auto__.call(null,metadata_provider,table_id));\n} else {\nthrow cljs.core.missing_protocol(\"MetadataProvider.fields\",metadata_provider);\n}\n}\n});\n/**\n * Return a sequence of Fields associated with a Table with the given `table-id`. Fields should satisfy\n *   the [[metabase.lib.metadata/ColumnMetadata]] schema. If no such Table exists, this should error.\n */\nmetabase.lib.metadata.protocols.fields = (function metabase$lib$metadata$protocols$fields(metadata_provider,table_id){\nif((((!((metadata_provider == null)))) && ((!((metadata_provider.metabase$lib$metadata$protocols$MetadataProvider$fields$arity$2 == null)))))){\nreturn metadata_provider.metabase$lib$metadata$protocols$MetadataProvider$fields$arity$2(metadata_provider,table_id);\n} else {\nreturn metabase$lib$metadata$protocols$MetadataProvider$fields$dyn_60259(metadata_provider,table_id);\n}\n});\n\nvar metabase$lib$metadata$protocols$MetadataProvider$metrics$dyn_60260 = (function (metadata_provider,table_id){\nvar x__5393__auto__ = (((metadata_provider == null))?null:metadata_provider);\nvar m__5394__auto__ = (metabase.lib.metadata.protocols.metrics[goog.typeOf(x__5393__auto__)]);\nif((!((m__5394__auto__ == null)))){\nreturn (m__5394__auto__.cljs$core$IFn$_invoke$arity$2 ? m__5394__auto__.cljs$core$IFn$_invoke$arity$2(metadata_provider,table_id) : m__5394__auto__.call(null,metadata_provider,table_id));\n} else {\nvar m__5392__auto__ = (metabase.lib.metadata.protocols.metrics[\"_\"]);\nif((!((m__5392__auto__ == null)))){\nreturn (m__5392__auto__.cljs$core$IFn$_invoke$arity$2 ? m__5392__auto__.cljs$core$IFn$_invoke$arity$2(metadata_provider,table_id) : m__5392__auto__.call(null,metadata_provider,table_id));\n} else {\nthrow cljs.core.missing_protocol(\"MetadataProvider.metrics\",metadata_provider);\n}\n}\n});\n/**\n * Return a sequence of legacy v1 Metrics associated with a Table with the given `table-id`. Metrics should satisfy\n *   the [[metabase.lib.metadata/MetricMetadata]] schema. If no such Table exists, this should error.\n */\nmetabase.lib.metadata.protocols.metrics = (function metabase$lib$metadata$protocols$metrics(metadata_provider,table_id){\nif((((!((metadata_provider == null)))) && ((!((metadata_provider.metabase$lib$metadata$protocols$MetadataProvider$metrics$arity$2 == null)))))){\nreturn metadata_provider.metabase$lib$metadata$protocols$MetadataProvider$metrics$arity$2(metadata_provider,table_id);\n} else {\nreturn metabase$lib$metadata$protocols$MetadataProvider$metrics$dyn_60260(metadata_provider,table_id);\n}\n});\n\n/**\n * Whether `x` is a valid [[MetadataProvider]].\n */\nmetabase.lib.metadata.protocols.metadata_provider_QMARK_ = (function metabase$lib$metadata$protocols$metadata_provider_QMARK_(x){\nif((!((x == null)))){\nif(((false) || ((cljs.core.PROTOCOL_SENTINEL === x.metabase$lib$metadata$protocols$MetadataProvider$)))){\nreturn true;\n} else {\nif((!x.cljs$lang$protocol_mask$partition$)){\nreturn cljs.core.native_satisfies_QMARK_(metabase.lib.metadata.protocols.MetadataProvider,x);\n} else {\nreturn false;\n}\n}\n} else {\nreturn cljs.core.native_satisfies_QMARK_(metabase.lib.metadata.protocols.MetadataProvider,x);\n}\n});\n\n/**\n * Optional. A protocol for a MetadataProvider that some sort of internal cache. This is mostly useful for\n *   MetadataProviders that can hit some sort of relatively expensive external service,\n *   e.g. [[metabase.lib.metadata.jvm/application-database-metadata-provider]]. The main purpose of this is to allow\n *   pre-warming the cache with stuff that was already fetched elsewhere.\n *   See [[metabase.models.metric/warmed-metadata-provider]] for example.\n * \n *   See [[cached-metadata-provider]] below to wrap for a way to wrap an existing MetadataProvider to add caching on top\n *   of it.\n * @interface\n */\nmetabase.lib.metadata.protocols.CachedMetadataProvider = function(){};\n\nvar metabase$lib$metadata$protocols$CachedMetadataProvider$cached_database$dyn_60261 = (function (cached_metadata_provider){\nvar x__5393__auto__ = (((cached_metadata_provider == null))?null:cached_metadata_provider);\nvar m__5394__auto__ = (metabase.lib.metadata.protocols.cached_database[goog.typeOf(x__5393__auto__)]);\nif((!((m__5394__auto__ == null)))){\nreturn (m__5394__auto__.cljs$core$IFn$_invoke$arity$1 ? m__5394__auto__.cljs$core$IFn$_invoke$arity$1(cached_metadata_provider) : m__5394__auto__.call(null,cached_metadata_provider));\n} else {\nvar m__5392__auto__ = (metabase.lib.metadata.protocols.cached_database[\"_\"]);\nif((!((m__5392__auto__ == null)))){\nreturn (m__5392__auto__.cljs$core$IFn$_invoke$arity$1 ? m__5392__auto__.cljs$core$IFn$_invoke$arity$1(cached_metadata_provider) : m__5392__auto__.call(null,cached_metadata_provider));\n} else {\nthrow cljs.core.missing_protocol(\"CachedMetadataProvider.cached-database\",cached_metadata_provider);\n}\n}\n});\n/**\n * Get cached metadata for the query's Database.\n */\nmetabase.lib.metadata.protocols.cached_database = (function metabase$lib$metadata$protocols$cached_database(cached_metadata_provider){\nif((((!((cached_metadata_provider == null)))) && ((!((cached_metadata_provider.metabase$lib$metadata$protocols$CachedMetadataProvider$cached_database$arity$1 == null)))))){\nreturn cached_metadata_provider.metabase$lib$metadata$protocols$CachedMetadataProvider$cached_database$arity$1(cached_metadata_provider);\n} else {\nreturn metabase$lib$metadata$protocols$CachedMetadataProvider$cached_database$dyn_60261(cached_metadata_provider);\n}\n});\n\nvar metabase$lib$metadata$protocols$CachedMetadataProvider$cached_metadata$dyn_60262 = (function (cached_metadata_provider,metadata_type,id){\nvar x__5393__auto__ = (((cached_metadata_provider == null))?null:cached_metadata_provider);\nvar m__5394__auto__ = (metabase.lib.metadata.protocols.cached_metadata[goog.typeOf(x__5393__auto__)]);\nif((!((m__5394__auto__ == null)))){\nreturn (m__5394__auto__.cljs$core$IFn$_invoke$arity$3 ? m__5394__auto__.cljs$core$IFn$_invoke$arity$3(cached_metadata_provider,metadata_type,id) : m__5394__auto__.call(null,cached_metadata_provider,metadata_type,id));\n} else {\nvar m__5392__auto__ = (metabase.lib.metadata.protocols.cached_metadata[\"_\"]);\nif((!((m__5392__auto__ == null)))){\nreturn (m__5392__auto__.cljs$core$IFn$_invoke$arity$3 ? m__5392__auto__.cljs$core$IFn$_invoke$arity$3(cached_metadata_provider,metadata_type,id) : m__5392__auto__.call(null,cached_metadata_provider,metadata_type,id));\n} else {\nthrow cljs.core.missing_protocol(\"CachedMetadataProvider.cached-metadata\",cached_metadata_provider);\n}\n}\n});\n/**\n * Get cached metadata of a specific type, e.g. `:metadata/table`.\n */\nmetabase.lib.metadata.protocols.cached_metadata = (function metabase$lib$metadata$protocols$cached_metadata(cached_metadata_provider,metadata_type,id){\nif((((!((cached_metadata_provider == null)))) && ((!((cached_metadata_provider.metabase$lib$metadata$protocols$CachedMetadataProvider$cached_metadata$arity$3 == null)))))){\nreturn cached_metadata_provider.metabase$lib$metadata$protocols$CachedMetadataProvider$cached_metadata$arity$3(cached_metadata_provider,metadata_type,id);\n} else {\nreturn metabase$lib$metadata$protocols$CachedMetadataProvider$cached_metadata$dyn_60262(cached_metadata_provider,metadata_type,id);\n}\n});\n\nvar metabase$lib$metadata$protocols$CachedMetadataProvider$store_database_BANG_$dyn_60263 = (function (cached_metadata_provider,database_metadata){\nvar x__5393__auto__ = (((cached_metadata_provider == null))?null:cached_metadata_provider);\nvar m__5394__auto__ = (metabase.lib.metadata.protocols.store_database_BANG_[goog.typeOf(x__5393__auto__)]);\nif((!((m__5394__auto__ == null)))){\nreturn (m__5394__auto__.cljs$core$IFn$_invoke$arity$2 ? m__5394__auto__.cljs$core$IFn$_invoke$arity$2(cached_metadata_provider,database_metadata) : m__5394__auto__.call(null,cached_metadata_provider,database_metadata));\n} else {\nvar m__5392__auto__ = (metabase.lib.metadata.protocols.store_database_BANG_[\"_\"]);\nif((!((m__5392__auto__ == null)))){\nreturn (m__5392__auto__.cljs$core$IFn$_invoke$arity$2 ? m__5392__auto__.cljs$core$IFn$_invoke$arity$2(cached_metadata_provider,database_metadata) : m__5392__auto__.call(null,cached_metadata_provider,database_metadata));\n} else {\nthrow cljs.core.missing_protocol(\"CachedMetadataProvider.store-database!\",cached_metadata_provider);\n}\n}\n});\n/**\n * Store metadata for the query's Database.\n */\nmetabase.lib.metadata.protocols.store_database_BANG_ = (function metabase$lib$metadata$protocols$store_database_BANG_(cached_metadata_provider,database_metadata){\nif((((!((cached_metadata_provider == null)))) && ((!((cached_metadata_provider.metabase$lib$metadata$protocols$CachedMetadataProvider$store_database_BANG_$arity$2 == null)))))){\nreturn cached_metadata_provider.metabase$lib$metadata$protocols$CachedMetadataProvider$store_database_BANG_$arity$2(cached_metadata_provider,database_metadata);\n} else {\nreturn metabase$lib$metadata$protocols$CachedMetadataProvider$store_database_BANG_$dyn_60263(cached_metadata_provider,database_metadata);\n}\n});\n\nvar metabase$lib$metadata$protocols$CachedMetadataProvider$store_metadata_BANG_$dyn_60264 = (function (cached_metadata_provider,metadata_type,id,metadata){\nvar x__5393__auto__ = (((cached_metadata_provider == null))?null:cached_metadata_provider);\nvar m__5394__auto__ = (metabase.lib.metadata.protocols.store_metadata_BANG_[goog.typeOf(x__5393__auto__)]);\nif((!((m__5394__auto__ == null)))){\nreturn (m__5394__auto__.cljs$core$IFn$_invoke$arity$4 ? m__5394__auto__.cljs$core$IFn$_invoke$arity$4(cached_metadata_provider,metadata_type,id,metadata) : m__5394__auto__.call(null,cached_metadata_provider,metadata_type,id,metadata));\n} else {\nvar m__5392__auto__ = (metabase.lib.metadata.protocols.store_metadata_BANG_[\"_\"]);\nif((!((m__5392__auto__ == null)))){\nreturn (m__5392__auto__.cljs$core$IFn$_invoke$arity$4 ? m__5392__auto__.cljs$core$IFn$_invoke$arity$4(cached_metadata_provider,metadata_type,id,metadata) : m__5392__auto__.call(null,cached_metadata_provider,metadata_type,id,metadata));\n} else {\nthrow cljs.core.missing_protocol(\"CachedMetadataProvider.store-metadata!\",cached_metadata_provider);\n}\n}\n});\n/**\n * Store metadata of a specific type, e.g. `:metadata/table`.\n */\nmetabase.lib.metadata.protocols.store_metadata_BANG_ = (function metabase$lib$metadata$protocols$store_metadata_BANG_(cached_metadata_provider,metadata_type,id,metadata){\nif((((!((cached_metadata_provider == null)))) && ((!((cached_metadata_provider.metabase$lib$metadata$protocols$CachedMetadataProvider$store_metadata_BANG_$arity$4 == null)))))){\nreturn cached_metadata_provider.metabase$lib$metadata$protocols$CachedMetadataProvider$store_metadata_BANG_$arity$4(cached_metadata_provider,metadata_type,id,metadata);\n} else {\nreturn metabase$lib$metadata$protocols$CachedMetadataProvider$store_metadata_BANG_$dyn_60264(cached_metadata_provider,metadata_type,id,metadata);\n}\n});\n\n\n/**\n * A protocol for a MetadataProvider that can fetch several objects in a single batched operation. This is mostly\n *   useful for MetadataProviders e.g. [[metabase.lib.metadata.jvm/application-database-metadata-provider]].\n * @interface\n */\nmetabase.lib.metadata.protocols.BulkMetadataProvider = function(){};\n\nvar metabase$lib$metadata$protocols$BulkMetadataProvider$bulk_metadata$dyn_60266 = (function (bulk_metadata_provider,metadata_type,ids){\nvar x__5393__auto__ = (((bulk_metadata_provider == null))?null:bulk_metadata_provider);\nvar m__5394__auto__ = (metabase.lib.metadata.protocols.bulk_metadata[goog.typeOf(x__5393__auto__)]);\nif((!((m__5394__auto__ == null)))){\nreturn (m__5394__auto__.cljs$core$IFn$_invoke$arity$3 ? m__5394__auto__.cljs$core$IFn$_invoke$arity$3(bulk_metadata_provider,metadata_type,ids) : m__5394__auto__.call(null,bulk_metadata_provider,metadata_type,ids));\n} else {\nvar m__5392__auto__ = (metabase.lib.metadata.protocols.bulk_metadata[\"_\"]);\nif((!((m__5392__auto__ == null)))){\nreturn (m__5392__auto__.cljs$core$IFn$_invoke$arity$3 ? m__5392__auto__.cljs$core$IFn$_invoke$arity$3(bulk_metadata_provider,metadata_type,ids) : m__5392__auto__.call(null,bulk_metadata_provider,metadata_type,ids));\n} else {\nthrow cljs.core.missing_protocol(\"BulkMetadataProvider.bulk-metadata\",bulk_metadata_provider);\n}\n}\n});\n/**\n * Fetch lots of metadata of a specific type, e.g. `:metadata/table`, in a single bulk operation.\n */\nmetabase.lib.metadata.protocols.bulk_metadata = (function metabase$lib$metadata$protocols$bulk_metadata(bulk_metadata_provider,metadata_type,ids){\nif((((!((bulk_metadata_provider == null)))) && ((!((bulk_metadata_provider.metabase$lib$metadata$protocols$BulkMetadataProvider$bulk_metadata$arity$3 == null)))))){\nreturn bulk_metadata_provider.metabase$lib$metadata$protocols$BulkMetadataProvider$bulk_metadata$arity$3(bulk_metadata_provider,metadata_type,ids);\n} else {\nreturn metabase$lib$metadata$protocols$BulkMetadataProvider$bulk_metadata$dyn_60266(bulk_metadata_provider,metadata_type,ids);\n}\n});\n\n/**\n * Convenience. Store several metadata maps at once.\n */\nmetabase.lib.metadata.protocols.store_metadatas_BANG_ = (function metabase$lib$metadata$protocols$store_metadatas_BANG_(cached_metadata_provider,metadata_type,metadatas){\nvar seq__60238 = cljs.core.seq(metadatas);\nvar chunk__60239 = null;\nvar count__60240 = (0);\nvar i__60241 = (0);\nwhile(true){\nif((i__60241 < count__60240)){\nvar metadata = chunk__60239.cljs$core$IIndexed$_nth$arity$2(null,i__60241);\nmetabase.lib.metadata.protocols.store_metadata_BANG_(cached_metadata_provider,metadata_type,new cljs.core.Keyword(null,\"id\",\"id\",-1388402092).cljs$core$IFn$_invoke$arity$1(metadata),metadata);\n\n\nvar G__60270 = seq__60238;\nvar G__60271 = chunk__60239;\nvar G__60272 = count__60240;\nvar G__60273 = (i__60241 + (1));\nseq__60238 = G__60270;\nchunk__60239 = G__60271;\ncount__60240 = G__60272;\ni__60241 = G__60273;\ncontinue;\n} else {\nvar temp__5804__auto__ = cljs.core.seq(seq__60238);\nif(temp__5804__auto__){\nvar seq__60238__$1 = temp__5804__auto__;\nif(cljs.core.chunked_seq_QMARK_(seq__60238__$1)){\nvar c__5568__auto__ = cljs.core.chunk_first(seq__60238__$1);\nvar G__60274 = cljs.core.chunk_rest(seq__60238__$1);\nvar G__60275 = c__5568__auto__;\nvar G__60276 = cljs.core.count(c__5568__auto__);\nvar G__60277 = (0);\nseq__60238 = G__60274;\nchunk__60239 = G__60275;\ncount__60240 = G__60276;\ni__60241 = G__60277;\ncontinue;\n} else {\nvar metadata = cljs.core.first(seq__60238__$1);\nmetabase.lib.metadata.protocols.store_metadata_BANG_(cached_metadata_provider,metadata_type,new cljs.core.Keyword(null,\"id\",\"id\",-1388402092).cljs$core$IFn$_invoke$arity$1(metadata),metadata);\n\n\nvar G__60278 = cljs.core.next(seq__60238__$1);\nvar G__60279 = null;\nvar G__60280 = (0);\nvar G__60281 = (0);\nseq__60238 = G__60278;\nchunk__60239 = G__60279;\ncount__60240 = G__60280;\ni__60241 = G__60281;\ncontinue;\n}\n} else {\nreturn null;\n}\n}\nbreak;\n}\n});\n","~:ns-info",["^ ","~:rename-macros",null,"~:renames",["^ "],"~:meta",["^ ","~:file","metabase/lib/metadata/protocols.cljc","~:line",1,"~:column",5,"~:end-line",1,"~:end-column",36],"~:ns-aliases",["^ ","~$cljs.loader","~$shadow.loader","~$clojure.pprint","~$cljs.pprint","~$clojure.spec.alpha","~$cljs.spec.alpha","~$clojure.core","~$cljs.core","~$clojure.spec.gen.alpha","~$cljs.spec.gen.alpha","~$clojure.core.match","~$cljs.core.match"],"~:use-macros",null,"~:excludes",["~#set",[]],"~:name","~$metabase.lib.metadata.protocols","~:reader-aliases",["^ "],"~:op","~:ns","~:imports",null,"~:requires",["^ ","^C","^C","~$goog","^R"],"~:seen",["^J",["~:require"]],"~:uses",null,"~:require-macros",["^ ","^C","^C"],"~:form",["~#list",["~$ns","^L",["^X",["^T"]]]],"~:flags",["^ ","^T",["^J",[]]],"~:js-deps",["^ "],"~:deps",["^R","^C"]],"^O","^L","~:resource-id",["~:shadow.build.classpath/resource","metabase/lib/metadata/protocols.cljc"],"~:compiled-at",1692014613962,"^M",["^ ","^C","^C","^R","^R"],"~:resource-name","metabase/lib/metadata/protocols.cljc","~:warnings",[],"~:source","(ns metabase.lib.metadata.protocols\n  (:require\n   #?@(:clj ([potemkin :as p]))))\n\n(#?(:clj p/defprotocol+ :cljs defprotocol) MetadataProvider\n  \"Protocol for something that we can get information about Tables and Fields from. This can be provided in various ways\n  various ways:\n\n  1. By raw metadata attached to the query itself\n\n  2. By the application database in Clj code\n\n  3. By the Query Processor store in Clj code\n\n  4. By the Redux store in JS\n\n  5. By (hopefully cached) REST API calls\n\n  This protocol is pretty limited at this point; in the future, we'll probably want to add:\n\n  - methods for searching for Tables or Fields matching some string\n\n  - paging, so if you have 10k Tables we don't do crazy requests that fetch them all at once\n\n  For all of these methods: if no matching object can be found, you should generally return `nil` rather than throwing\n  an Exception. Let [[metabase.lib.metadata]] worry about throwing exceptions.\"\n  (database [metadata-provider]\n    \"Metadata about the Database we're querying. Should match the [[metabase.lib.metadata/DatabaseMetadata]] schema.\n  This includes important info such as the supported `:features` and the like.\")\n\n  (table [metadata-provider table-id]\n    \"Return metadata for a specific Table. Metadata should satisfy [[metabase.lib.metadata/TableMetadata]].\")\n\n  (field [metadata-provider field-id]\n    \"Return metadata for a specific Field. Metadata should satisfy [[metabase.lib.metadata/ColumnMetadata]].\")\n\n  (card [metadata-provider card-id]\n    \"Return information about a specific Saved Question, aka a Card. This should\n    match [[metabase.lib.metadata/CardMetadata]. Currently just used for display name purposes if you have a Card as a\n    source query.\")\n\n  (metric [metadata-provider metric-id]\n    \"Return metadata for a particular capital-M Metric, i.e. something from the `metric` table in the application\n    database. Metadata should match [[metabase.lib.metadata/MetricMetadata]].\")\n\n  (segment [metadata-provider segment-id]\n    \"Return metadata for a particular captial-S Segment, i.e. something from the `segment` table in the application\n    database. Metadata should match [[metabase.lib.metadata/SegmentMetadata]].\" )\n\n  ;; these methods are only needed for using the methods BUILDING queries, so they're sort of optional I guess? Things\n  ;; like the Query Processor, which is only manipulating already-built queries, shouldn't need to use these methods.\n  ;; I'm on the fence about maybe putting these in a different protocol. They're part of this protocol for now tho so\n  ;; implement them anyway.\n\n  (tables [metadata-provider]\n    \"Return a sequence of Tables in this Database. Tables should satisfy the [[metabase.lib.metadata/TableMetadata]]\n  schema. This should also include things that serve as 'virtual' tables, e.g. Saved Questions or Models. But users of\n  MLv2 should not need to know that! If we add support for Super Models or Quantum Questions in the future, they can\n  just come back from this method in the same shape as everything else, the Query Builder can display them, and the\n  internals can be tucked away here in MLv2.\")\n\n  (fields [metadata-provider table-id]\n    \"Return a sequence of Fields associated with a Table with the given `table-id`. Fields should satisfy\n  the [[metabase.lib.metadata/ColumnMetadata]] schema. If no such Table exists, this should error.\")\n\n  (metrics [metadata-provider table-id]\n    \"Return a sequence of legacy v1 Metrics associated with a Table with the given `table-id`. Metrics should satisfy\n  the [[metabase.lib.metadata/MetricMetadata]] schema. If no such Table exists, this should error.\"))\n\n(defn metadata-provider?\n  \"Whether `x` is a valid [[MetadataProvider]].\"\n  [x]\n  (satisfies? MetadataProvider x))\n\n(#?(:clj p/defprotocol+ :cljs defprotocol) CachedMetadataProvider\n  \"Optional. A protocol for a MetadataProvider that some sort of internal cache. This is mostly useful for\n  MetadataProviders that can hit some sort of relatively expensive external service,\n  e.g. [[metabase.lib.metadata.jvm/application-database-metadata-provider]]. The main purpose of this is to allow\n  pre-warming the cache with stuff that was already fetched elsewhere.\n  See [[metabase.models.metric/warmed-metadata-provider]] for example.\n\n  See [[cached-metadata-provider]] below to wrap for a way to wrap an existing MetadataProvider to add caching on top\n  of it.\"\n  (cached-database [cached-metadata-provider]\n    \"Get cached metadata for the query's Database.\")\n  (cached-metadata [cached-metadata-provider metadata-type id]\n    \"Get cached metadata of a specific type, e.g. `:metadata/table`.\")\n  (store-database! [cached-metadata-provider database-metadata]\n    \"Store metadata for the query's Database.\")\n  (store-metadata! [cached-metadata-provider metadata-type id metadata]\n    \"Store metadata of a specific type, e.g. `:metadata/table`.\"))\n\n(#?(:clj p/defprotocol+ :cljs defprotocol) BulkMetadataProvider\n  \"A protocol for a MetadataProvider that can fetch several objects in a single batched operation. This is mostly\n  useful for MetadataProviders e.g. [[metabase.lib.metadata.jvm/application-database-metadata-provider]].\"\n  (bulk-metadata [bulk-metadata-provider metadata-type ids]\n    \"Fetch lots of metadata of a specific type, e.g. `:metadata/table`, in a single bulk operation.\"))\n\n(defn store-metadatas!\n  \"Convenience. Store several metadata maps at once.\"\n  [cached-metadata-provider metadata-type metadatas]\n  (doseq [metadata metadatas]\n    (store-metadata! cached-metadata-provider metadata-type (:id metadata) metadata)))\n","~:reader-features",["^J",["~:cljs-release","~:cljs-dev","~:cljs"]],"~:cljc",true,"~:source-map-compact",["^ ","mappings","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","names",["metabase$lib$metadata$protocols$MetadataProvider$database$dyn","x__5393__auto__","m__5394__auto__","metabase.lib.metadata.protocols/database","goog/typeOf","m__5392__auto__","cljs.core/missing-protocol","metabase$lib$metadata$protocols$MetadataProvider$table$dyn","metabase.lib.metadata.protocols/table","metabase$lib$metadata$protocols$MetadataProvider$field$dyn","metabase.lib.metadata.protocols/field","metabase$lib$metadata$protocols$MetadataProvider$card$dyn","metabase.lib.metadata.protocols/card","metabase$lib$metadata$protocols$MetadataProvider$metric$dyn","metabase.lib.metadata.protocols/metric","metabase$lib$metadata$protocols$MetadataProvider$segment$dyn","metabase.lib.metadata.protocols/segment","metabase$lib$metadata$protocols$MetadataProvider$tables$dyn","metabase.lib.metadata.protocols/tables","metabase$lib$metadata$protocols$MetadataProvider$fields$dyn","metabase.lib.metadata.protocols/fields","metabase$lib$metadata$protocols$MetadataProvider$metrics$dyn","metabase.lib.metadata.protocols/metrics","metabase.lib.metadata.protocols/MetadataProvider","metadata-provider","table-id","field-id","card-id","metric-id","segment-id","metabase.lib.metadata.protocols/metadata-provider?","x","cljs.core/PROTOCOL_SENTINEL","cljs.core/native-satisfies?","metabase$lib$metadata$protocols$CachedMetadataProvider$cached_database$dyn","metabase.lib.metadata.protocols/cached-database","metabase$lib$metadata$protocols$CachedMetadataProvider$cached_metadata$dyn","metabase.lib.metadata.protocols/cached-metadata","metabase$lib$metadata$protocols$CachedMetadataProvider$store_database_BANG_$dyn","metabase.lib.metadata.protocols/store-database!","metabase$lib$metadata$protocols$CachedMetadataProvider$store_metadata_BANG_$dyn","metabase.lib.metadata.protocols/store-metadata!","metabase.lib.metadata.protocols/CachedMetadataProvider","cached-metadata-provider","metadata-type","id","database-metadata","metadata","metabase$lib$metadata$protocols$BulkMetadataProvider$bulk_metadata$dyn","metabase.lib.metadata.protocols/bulk-metadata","metabase.lib.metadata.protocols/BulkMetadataProvider","bulk-metadata-provider","ids","metabase.lib.metadata.protocols/store-metadatas!","metadatas","seq__60238","cljs.core/seq","chunk__60239","count__60240","i__60241","temp__5804__auto__","cljs.core/chunked-seq?","c__5568__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/count","cljs.core/first","cljs.core/next"]],"~:used-vars",["^J",["~$cljs.core/PROTOCOL_SENTINEL","~$metabase.lib.metadata.protocols/MetadataProvider","~$metabase.lib.metadata.protocols/BulkMetadataProvider","~$cljs.core/count","~$metabase.lib.metadata.protocols/metric","~$goog/typeOf","~$metabase.lib.metadata.protocols/metadata-provider?","~$cljs.core/seq","~$cljs.core/chunk-first","~$metabase.lib.metadata.protocols/table","~$cljs.core/chunk-rest","~$cljs.core/native-satisfies?","~$metabase.lib.metadata.protocols/tables","~$metabase.lib.metadata.protocols/bulk-metadata","~$metabase.lib.metadata.protocols/store-metadata!","~$metabase.lib.metadata.protocols/card","~$metabase.lib.metadata.protocols/store-database!","~$cljs.core/-nth","~$metabase.lib.metadata.protocols/fields","~$metabase.lib.metadata.protocols/store-metadatas!","~$cljs.core/missing-protocol","~$metabase.lib.metadata.protocols/field","~$cljs.core/next","~$metabase.lib.metadata.protocols/cached-metadata","~$cljs.core/not","~$metabase.lib.metadata.protocols/database","~$metabase.lib.metadata.protocols/metrics","~$cljs.core/first","~$metabase.lib.metadata.protocols/cached-database","~$metabase.lib.metadata.protocols/segment","~$metabase.lib.metadata.protocols/CachedMetadataProvider","~$cljs.core/chunked-seq?"]]],"~:cache-keys",["~#cmap",[["^12","goog/dom/tagname.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","~:shadow.build.compiler/resolve",["^ ","~:require-id",null,"~:deps-ids",["^J",[]],"~:deps-syms",["^R","~$goog.dom.HtmlElement"]]],["^12","goog/html/trustedtypes.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^26",["^ ","^27",null,"^28",["^J",[]],"^29",["^R"]]],["^12","goog/labs/useragent/browser.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^26",["^ ","^27",null,"^28",["^J",[]],"^29",["^R","~$goog.labs.userAgent.util","~$goog.labs.userAgent.highEntropy.highEntropyValue","~$goog.asserts","~$goog.string.internal","~$goog.labs.userAgent.highEntropy.highEntropyData","~$goog.labs.userAgent"]]],["^12","goog/html/safeurl.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^26",["^ ","^27",null,"^28",["^J",[]],"^29",["^R","^2=","~$goog.fs.url","~$goog.html.TrustedResourceUrl","~$goog.string.Const","~$goog.string.TypedString","^2>"]]],["^12","goog/array/array.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^26",["^ ","^27",null,"^28",["^J",[]],"^29",["^R","^2="]]],["^12","goog/debug/error.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^26",["^ ","^27",null,"^28",["^J",[]],"^29",["^R"]]],["^12","goog/flags/flags.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^26",["^ ","^27",null,"^28",["^J",[]],"^29",["^R"]]],["^12","goog/dom/nodetype.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^26",["^ ","^27",null,"^28",["^J",[]],"^29",["^R"]]],["^12","goog/labs/useragent/highentropy/highentropyvalue.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^26",["^ ","^27",null,"^28",["^J",[]],"^29",["^R","^2;","^2>"]]],["^12","goog/string/typedstring.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^26",["^ ","^27",null,"^28",["^J",[]],"^29",["^R"]]],["^12","goog/object/object.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^26",["^ ","^27",null,"^28",["^J",[]],"^29",["^R"]]],["^12","goog/dom/asserts.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^26",["^ ","^27",null,"^28",["^J",[]],"^29",["^R","^2="]]],"~:SHADOW-TIMESTAMP",[1689947046000,1689947046000,1689947050000],["^12","goog/math/long.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^26",["^ ","^27",null,"^28",["^J",[]],"^29",["^R","^2=","~$goog.reflect"]]],["^12","goog/html/trustedresourceurl.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^26",["^ ","^27",null,"^28",["^J",[]],"^29",["^R","^2=","~$goog.fs.blob","^2A","~$goog.html.SafeScript","~$goog.html.trustedtypes","^2C","^2D"]]],["^12","goog/string/internal.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^26",["^ ","^27",null,"^28",["^J",[]],"^29",["^R"]]],["^12","goog/functions/functions.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^26",["^ ","^27",null,"^28",["^J",[]],"^29",["^R"]]],["^12","goog/html/safestyle.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^26",["^ ","^27",null,"^28",["^J",[]],"^29",["^R","^2C","~$goog.html.SafeUrl","^2D","^2=","^2>"]]],["^12","goog/dom/safe.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^26",["^ ","^27",null,"^28",["^J",[]],"^29",["^R","^2=","~$goog.asserts.dom","~$goog.dom.asserts","~$goog.functions","~$goog.html.SafeHtml","^2H","~$goog.html.SafeStyle","^2J","^2B","~$goog.html.uncheckedconversions","^2C","^2>"]]],["^12","goog/asserts/dom.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^26",["^ ","^27",null,"^28",["^J",[]],"^29",["^R","~$goog.dom.TagName","^2=","~$goog.dom.element"]]],["^12","metabase/lib/metadata/protocols.cljc"],["f5c81e2cab09f5dabb3cab711f7db1c5df1b398d","^26",["^ ","^27",null,"^28",["^J",[]],"^29",["^R","^C"]]],["^12","goog/html/safehtml.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^26",["^ ","^27",null,"^28",["^J",[]],"^29",["^R","^2C","^2H","^2O","~$goog.html.SafeStyleSheet","^2J","^2Q","^2B","^2D","^2=","~$goog.labs.userAgent.browser","~$goog.array","~$goog.object","^2>","~$goog.dom.tags","^2I"]]],["^12","goog/dom/tags.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^26",["^ ","^27",null,"^28",["^J",[]],"^29",["^R","^2V"]]],["^12","goog/fs/blob.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^26",["^ ","^27",null,"^28",["^J",[]],"^29",["^R"]]],["^12","goog/asserts/asserts.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^26",["^ ","^27",null,"^28",["^J",[]],"^29",["^R","~$goog.debug.Error","~$goog.dom.NodeType"]]],["^12","goog/uri/uri.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^26",["^ ","^27",null,"^28",["^J",[]],"^29",["^R","^2U","^2=","~$goog.collections.maps","~$goog.string","~$goog.structs","~$goog.uri.utils","~$goog.uri.utils.ComponentIndex","~$goog.uri.utils.StandardQueryParam"]]],["^12","goog/labs/useragent/highentropy/highentropydata.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^26",["^ ","^27",null,"^28",["^J",[]],"^29",["^R","^2<"]]],["^12","goog/collections/maps.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^26",["^ ","^27",null,"^28",["^J",[]],"^29",["^R"]]],["^12","goog/fs/url.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^26",["^ ","^27",null,"^28",["^J",[]],"^29",["^R"]]],["^12","goog/base.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^26",["^ ","^27",null,"^28",["^J",[]],"^29",[]]],["^12","goog/structs/structs.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^26",["^ ","^27",null,"^28",["^J",[]],"^29",["^R","^2U","^2V"]]],["^12","goog/string/string.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^26",["^ ","^27",null,"^28",["^J",[]],"^29",["^R","~$goog.dom.safe","^2P","^2C","^2>"]]],["^12","goog/reflect/reflect.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^26",["^ ","^27",null,"^28",["^J",[]],"^29",["^R"]]],["^12","goog/labs/useragent/util.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^26",["^ ","^27",null,"^28",["^J",[]],"^29",["^R","^2>","^2@"]]],["^12","goog/string/stringbuffer.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^26",["^ ","^27",null,"^28",["^J",[]],"^29",["^R"]]],["^12","goog/labs/useragent/useragent.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^26",["^ ","^27",null,"^28",["^J",[]],"^29",["^R","~$goog.flags"]]],["^12","goog/dom/element.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^26",["^ ","^27",null,"^28",["^J",[]],"^29",["^R","^2Y","^2Q"]]],["^12","goog/html/uncheckedconversions.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^26",["^ ","^27",null,"^28",["^J",[]],"^29",["^R","^2=","^2N","^2H","^2O","^2S","^2J","^2B","^2C","^2>"]]],["^12","goog/dom/htmlelement.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^26",["^ ","^27",null,"^28",["^J",[]],"^29",["^R"]]],["^12","cljs/core.cljs"],["bc14df6666853ed869d7b88aaa864111c65d0c7f","^26",["^ ","^27",null,"^28",["^J",[]],"^29",["^R","~$goog.math.Long","~$goog.math.Integer","^2[","^2V","^2U","~$goog.Uri","~$goog.string.StringBuffer"]]],["^12","goog/html/safescript.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^26",["^ ","^27",null,"^28",["^J",[]],"^29",["^R","^2C","^2D","^2I","^2="]]],["^12","goog/html/safestylesheet.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^26",["^ ","^27",null,"^28",["^J",[]],"^29",["^R","^2C","^2O","^2D","^2V","^2=","^2>"]]],["^12","goog/math/integer.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^26",["^ ","^27",null,"^28",["^J",[]],"^29",["^R","^2F"]]],["^12","goog/uri/utils.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^26",["^ ","^27",null,"^28",["^J",[]],"^29",["^R","^2=","^2["]]],["^12","goog/string/const.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^26",["^ ","^27",null,"^28",["^J",[]],"^29",["^R","^2=","^2D"]]]]],"~:clj-info",["^ ","jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/analyzer/impl.cljc",1689947050000,"jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/source_map/base64_vlq.clj",1689947050000,"jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/instant.clj",1689947050000,"jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/externs.clj",1689947050000,"jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/vendor/clojure/tools/reader/default_data_readers.clj",1689947050000,"jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/compiler.cljc",1689947050000,"jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/env.cljc",1689947050000,"jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/analyzer/impl/namespaces.cljc",1689947050000,"jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/source_map.clj",1689947050000,"jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/util.cljc",1689947050000,"jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/analyzer.cljc",1689947050000,"jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/analyzer/passes.cljc",1689947050000,"jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/vendor/clojure/data/json.clj",1689947050000,"jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/source_map/base64.clj",1689947050000,"jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/vendor/clojure/tools/reader/reader_types.clj",1689947050000,"jar:file:/root/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/set.clj",1689946092000,"jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/vendor/clojure/tools/reader/impl/inspect.clj",1689947050000,"jar:file:/root/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/string.clj",1689946092000,"jar:file:/root/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/core.clj",1689946092000,"jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/analyzer/passes/and_or.cljc",1689947050000,"jar:file:/root/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/pprint.clj",1689946092000,"jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/js_deps.cljc",1689947050000,"jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/core.cljc",1689947050000,"jar:file:/root/.m2/repository/binaryage/devtools/1.0.6/devtools-1.0.6.jar!/devtools/defaults.clj",1689947054000,"jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/vendor/clojure/tools/reader.clj",1689947050000,"jar:file:/root/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/edn.clj",1689946092000,"jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/vendor/clojure/tools/reader/impl/errors.clj",1689947050000,"jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/tagged_literals.cljc",1689947050000,"jar:file:/root/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/java/io.clj",1689946092000,"jar:file:/root/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/instant.clj",1689946092000],"~:analyzer",["^ ","^3",null,"^4",["^ "],"^5",["^ ","^6","metabase/lib/metadata/protocols.cljc","^7",1,"^8",5,"^9",1,"^:",36],"^;",["^ ","^<","^=","^>","^?","^@","^A","^B","^C","^D","^E","^F","^G"],"~:shadow/protocol-prefixes",["^J",["metabase$lib$metadata$protocols$CachedMetadataProvider$","metabase$lib$metadata$protocols$BulkMetadataProvider$","metabase$lib$metadata$protocols$MetadataProvider$"]],"^H",null,"^I",["^J",[]],"^K","^L","^M",["^ "],"^P",null,"^Q",["^ ","^C","^C","^R","^R"],"^S",["^J",["^T"]],"^U",null,"~:defs",["^ ","~$metric",["^ ","~:protocol-inline",null,"^5",["^ ","^6","metabase/lib/metadata/protocols.cljc","^7",42,"^8",4,"^9",42,"^:",10,"~:protocol","^1A","~:doc","Return metadata for a particular capital-M Metric, i.e. something from the `metric` table in the application\n    database. Metadata should match [[metabase.lib.metadata/MetricMetadata]].","~:arglists",["^X",["~$quote",["^X",[["~$metadata-provider","~$metric-id"]]]]]],"^42","^1A","^K","^1D","^6","metabase/lib/metadata/protocols.cljc","^:",10,"~:method-params",["^X",[["^46","^47"]]],"~:protocol-impl",null,"~:arglists-meta",["^X",[null,null]],"^8",1,"~:variadic?",false,"^7",5,"~:ret-tag","~$any","^9",42,"~:max-fixed-arity",2,"~:fn-var",true,"^44",["^X",["^45",["^X",[["^46","^47"]]]]],"^43","Return metadata for a particular capital-M Metric, i.e. something from the `metric` table in the application\n    database. Metadata should match [[metabase.lib.metadata/MetricMetadata]]."],"~$metrics",["^ ","^41",null,"^5",["^ ","^6","metabase/lib/metadata/protocols.cljc","^7",66,"^8",4,"^9",66,"^:",11,"^42","^1A","^43","Return a sequence of legacy v1 Metrics associated with a Table with the given `table-id`. Metrics should satisfy\n  the [[metabase.lib.metadata/MetricMetadata]] schema. If no such Table exists, this should error.","^44",["^X",["^45",["^X",[["^46","~$table-id"]]]]]],"^42","^1A","^K","^1Z","^6","metabase/lib/metadata/protocols.cljc","^:",11,"^48",["^X",[["^46","^4A"]]],"^49",null,"^4:",["^X",[null,null]],"^8",1,"^4;",false,"^7",5,"^4<","^4=","^9",66,"^4>",2,"^4?",true,"^44",["^X",["^45",["^X",[["^46","^4A"]]]]],"^43","Return a sequence of legacy v1 Metrics associated with a Table with the given `table-id`. Metrics should satisfy\n  the [[metabase.lib.metadata/MetricMetadata]] schema. If no such Table exists, this should error."],"~$metadata-provider?",["^ ","^41",null,"^5",["^ ","^6","metabase/lib/metadata/protocols.cljc","^7",70,"^8",7,"^9",70,"^:",25,"^44",["^X",["^45",["^X",[["~$x"]]]]],"^43","Whether `x` is a valid [[MetadataProvider]]."],"^K","^1F","^6","metabase/lib/metadata/protocols.cljc","^:",25,"^48",["^X",[["~$x"]]],"^49",null,"^4:",["^X",[null,null]],"^8",1,"^4;",false,"^7",70,"^4<","~$boolean","^9",70,"^4>",1,"^4?",true,"^44",["^X",["^45",["^X",[["~$x"]]]]],"^43","Whether `x` is a valid [[MetadataProvider]]."],"~$store-metadata!",["^ ","^41",null,"^5",["^ ","^6","metabase/lib/metadata/protocols.cljc","^7",90,"^8",4,"^9",90,"^:",19,"^42","^22","^43","Store metadata of a specific type, e.g. `:metadata/table`.","^44",["^X",["^45",["^X",[["~$cached-metadata-provider","~$metadata-type","~$id","~$metadata"]]]]]],"^42","^22","^K","^1N","^6","metabase/lib/metadata/protocols.cljc","^:",19,"^48",["^X",[["^4E","^4F","^4G","^4H"]]],"^49",null,"^4:",["^X",[null,null]],"^8",1,"^4;",false,"^7",75,"^4<","^4=","^9",90,"^4>",4,"^4?",true,"^44",["^X",["^45",["^X",[["^4E","^4F","^4G","^4H"]]]]],"^43","Store metadata of a specific type, e.g. `:metadata/table`."],"~$bulk-metadata",["^ ","^41",null,"^5",["^ ","^6","metabase/lib/metadata/protocols.cljc","^7",96,"^8",4,"^9",96,"^:",17,"^42","^1B","^43","Fetch lots of metadata of a specific type, e.g. `:metadata/table`, in a single bulk operation.","^44",["^X",["^45",["^X",[["~$bulk-metadata-provider","^4F","~$ids"]]]]]],"^42","^1B","^K","^1M","^6","metabase/lib/metadata/protocols.cljc","^:",17,"^48",["^X",[["^4J","^4F","^4K"]]],"^49",null,"^4:",["^X",[null,null]],"^8",1,"^4;",false,"^7",93,"^4<","^4=","^9",96,"^4>",3,"^4?",true,"^44",["^X",["^45",["^X",[["^4J","^4F","^4K"]]]]],"^43","Fetch lots of metadata of a specific type, e.g. `:metadata/table`, in a single bulk operation."],"~$table",["^ ","^41",null,"^5",["^ ","^6","metabase/lib/metadata/protocols.cljc","^7",31,"^8",4,"^9",31,"^:",9,"^42","^1A","^43","Return metadata for a specific Table. Metadata should satisfy [[metabase.lib.metadata/TableMetadata]].","^44",["^X",["^45",["^X",[["^46","^4A"]]]]]],"^42","^1A","^K","^1I","^6","metabase/lib/metadata/protocols.cljc","^:",9,"^48",["^X",[["^46","^4A"]]],"^49",null,"^4:",["^X",[null,null]],"^8",1,"^4;",false,"^7",5,"^4<","^4=","^9",31,"^4>",2,"^4?",true,"^44",["^X",["^45",["^X",[["^46","^4A"]]]]],"^43","Return metadata for a specific Table. Metadata should satisfy [[metabase.lib.metadata/TableMetadata]]."],"~$BulkMetadataProvider",["^ ","^5",["^ ","~:protocol-symbol",true,"^6","metabase/lib/metadata/protocols.cljc","^:",64,"^8",44,"^7",93,"~:protocol-info",["^ ","~:methods",["^ ","^4I",[["^4J","^4F","^4K"]]]],"^9",93,"~:sigs",["^ ","~:bulk-metadata",["^ ","^K","^4I","^44",["^X",[["^4J","^4F","^4K"]]],"^43","Fetch lots of metadata of a specific type, e.g. `:metadata/table`, in a single bulk operation."]],"^43","A protocol for a MetadataProvider that can fetch several objects in a single batched operation. This is mostly\n  useful for MetadataProviders e.g. [[metabase.lib.metadata.jvm/application-database-metadata-provider]].","~:jsdoc",["^X",["@interface"]]],"^4N",true,"^K","^1B","^6","metabase/lib/metadata/protocols.cljc","^:",64,"^8",1,"^7",93,"^4O",["^ ","^4P",["^ ","^4I",[["^4J","^4F","^4K"]]]],"~:info",null,"^9",93,"~:tag","^4=","^4Q",["^ ","^4R",["^ ","^K","^4I","^44",["^X",[["^4J","^4F","^4K"]]],"^43","Fetch lots of metadata of a specific type, e.g. `:metadata/table`, in a single bulk operation."]],"~:impls",["^J",[]],"^43","A protocol for a MetadataProvider that can fetch several objects in a single batched operation. This is mostly\n  useful for MetadataProviders e.g. [[metabase.lib.metadata.jvm/application-database-metadata-provider]].","^4S",["^X",["@interface"]]],"~$fields",["^ ","^41",null,"^5",["^ ","^6","metabase/lib/metadata/protocols.cljc","^7",62,"^8",4,"^9",62,"^:",10,"^42","^1A","^43","Return a sequence of Fields associated with a Table with the given `table-id`. Fields should satisfy\n  the [[metabase.lib.metadata/ColumnMetadata]] schema. If no such Table exists, this should error.","^44",["^X",["^45",["^X",[["^46","^4A"]]]]]],"^42","^1A","^K","^1R","^6","metabase/lib/metadata/protocols.cljc","^:",10,"^48",["^X",[["^46","^4A"]]],"^49",null,"^4:",["^X",[null,null]],"^8",1,"^4;",false,"^7",5,"^4<","^4=","^9",62,"^4>",2,"^4?",true,"^44",["^X",["^45",["^X",[["^46","^4A"]]]]],"^43","Return a sequence of Fields associated with a Table with the given `table-id`. Fields should satisfy\n  the [[metabase.lib.metadata/ColumnMetadata]] schema. If no such Table exists, this should error."],"~$store-metadatas!",["^ ","^41",null,"^5",["^ ","^6","metabase/lib/metadata/protocols.cljc","^7",99,"^8",7,"^9",99,"^:",23,"^44",["^X",["^45",["^X",[["^4E","^4F","~$metadatas"]]]]],"^43","Convenience. Store several metadata maps at once."],"^K","^1S","^6","metabase/lib/metadata/protocols.cljc","^:",23,"^48",["^X",[["^4E","^4F","^4Y"]]],"^49",null,"^4:",["^X",[null,null]],"^8",1,"^4;",false,"^7",99,"^4<","~$clj-nil","^9",99,"^4>",3,"^4?",true,"^44",["^X",["^45",["^X",[["^4E","^4F","^4Y"]]]]],"^43","Convenience. Store several metadata maps at once."],"~$tables",["^ ","^41",null,"^5",["^ ","^6","metabase/lib/metadata/protocols.cljc","^7",55,"^8",4,"^9",55,"^:",10,"^42","^1A","^43","Return a sequence of Tables in this Database. Tables should satisfy the [[metabase.lib.metadata/TableMetadata]]\n  schema. This should also include things that serve as 'virtual' tables, e.g. Saved Questions or Models. But users of\n  MLv2 should not need to know that! If we add support for Super Models or Quantum Questions in the future, they can\n  just come back from this method in the same shape as everything else, the Query Builder can display them, and the\n  internals can be tucked away here in MLv2.","^44",["^X",["^45",["^X",[["^46"]]]]]],"^42","^1A","^K","^1L","^6","metabase/lib/metadata/protocols.cljc","^:",10,"^48",["^X",[["^46"]]],"^49",null,"^4:",["^X",[null,null]],"^8",1,"^4;",false,"^7",5,"^4<","^4=","^9",55,"^4>",1,"^4?",true,"^44",["^X",["^45",["^X",[["^46"]]]]],"^43","Return a sequence of Tables in this Database. Tables should satisfy the [[metabase.lib.metadata/TableMetadata]]\n  schema. This should also include things that serve as 'virtual' tables, e.g. Saved Questions or Models. But users of\n  MLv2 should not need to know that! If we add support for Super Models or Quantum Questions in the future, they can\n  just come back from this method in the same shape as everything else, the Query Builder can display them, and the\n  internals can be tucked away here in MLv2."],"~$field",["^ ","^41",null,"^5",["^ ","^6","metabase/lib/metadata/protocols.cljc","^7",34,"^8",4,"^9",34,"^:",9,"^42","^1A","^43","Return metadata for a specific Field. Metadata should satisfy [[metabase.lib.metadata/ColumnMetadata]].","^44",["^X",["^45",["^X",[["^46","~$field-id"]]]]]],"^42","^1A","^K","^1U","^6","metabase/lib/metadata/protocols.cljc","^:",9,"^48",["^X",[["^46","^51"]]],"^49",null,"^4:",["^X",[null,null]],"^8",1,"^4;",false,"^7",5,"^4<","^4=","^9",34,"^4>",2,"^4?",true,"^44",["^X",["^45",["^X",[["^46","^51"]]]]],"^43","Return metadata for a specific Field. Metadata should satisfy [[metabase.lib.metadata/ColumnMetadata]]."],"~$cached-metadata",["^ ","^41",null,"^5",["^ ","^6","metabase/lib/metadata/protocols.cljc","^7",86,"^8",4,"^9",86,"^:",19,"^42","^22","^43","Get cached metadata of a specific type, e.g. `:metadata/table`.","^44",["^X",["^45",["^X",[["^4E","^4F","^4G"]]]]]],"^42","^22","^K","^1W","^6","metabase/lib/metadata/protocols.cljc","^:",19,"^48",["^X",[["^4E","^4F","^4G"]]],"^49",null,"^4:",["^X",[null,null]],"^8",1,"^4;",false,"^7",75,"^4<","^4=","^9",86,"^4>",3,"^4?",true,"^44",["^X",["^45",["^X",[["^4E","^4F","^4G"]]]]],"^43","Get cached metadata of a specific type, e.g. `:metadata/table`."],"~$store-database!",["^ ","^41",null,"^5",["^ ","^6","metabase/lib/metadata/protocols.cljc","^7",88,"^8",4,"^9",88,"^:",19,"^42","^22","^43","Store metadata for the query's Database.","^44",["^X",["^45",["^X",[["^4E","~$database-metadata"]]]]]],"^42","^22","^K","^1P","^6","metabase/lib/metadata/protocols.cljc","^:",19,"^48",["^X",[["^4E","^54"]]],"^49",null,"^4:",["^X",[null,null]],"^8",1,"^4;",false,"^7",75,"^4<","^4=","^9",88,"^4>",2,"^4?",true,"^44",["^X",["^45",["^X",[["^4E","^54"]]]]],"^43","Store metadata for the query's Database."],"~$card",["^ ","^41",null,"^5",["^ ","^6","metabase/lib/metadata/protocols.cljc","^7",37,"^8",4,"^9",37,"^:",8,"^42","^1A","^43","Return information about a specific Saved Question, aka a Card. This should\n    match [[metabase.lib.metadata/CardMetadata]. Currently just used for display name purposes if you have a Card as a\n    source query.","^44",["^X",["^45",["^X",[["^46","~$card-id"]]]]]],"^42","^1A","^K","^1O","^6","metabase/lib/metadata/protocols.cljc","^:",8,"^48",["^X",[["^46","^56"]]],"^49",null,"^4:",["^X",[null,null]],"^8",1,"^4;",false,"^7",5,"^4<","^4=","^9",37,"^4>",2,"^4?",true,"^44",["^X",["^45",["^X",[["^46","^56"]]]]],"^43","Return information about a specific Saved Question, aka a Card. This should\n    match [[metabase.lib.metadata/CardMetadata]. Currently just used for display name purposes if you have a Card as a\n    source query."],"~$segment",["^ ","^41",null,"^5",["^ ","^6","metabase/lib/metadata/protocols.cljc","^7",46,"^8",4,"^9",46,"^:",11,"^42","^1A","^43","Return metadata for a particular captial-S Segment, i.e. something from the `segment` table in the application\n    database. Metadata should match [[metabase.lib.metadata/SegmentMetadata]].","^44",["^X",["^45",["^X",[["^46","~$segment-id"]]]]]],"^42","^1A","^K","^21","^6","metabase/lib/metadata/protocols.cljc","^:",11,"^48",["^X",[["^46","^58"]]],"^49",null,"^4:",["^X",[null,null]],"^8",1,"^4;",false,"^7",5,"^4<","^4=","^9",46,"^4>",2,"^4?",true,"^44",["^X",["^45",["^X",[["^46","^58"]]]]],"^43","Return metadata for a particular captial-S Segment, i.e. something from the `segment` table in the application\n    database. Metadata should match [[metabase.lib.metadata/SegmentMetadata]]."],"~$MetadataProvider",["^ ","^5",["^ ","^4N",true,"^6","metabase/lib/metadata/protocols.cljc","^:",60,"^8",44,"^7",5,"^4O",["^ ","^4P",["^ ","^40",[["^46","^47"]],"^4@",[["^46","^4A"]],"^4L",[["^46","^4A"]],"^4W",[["^46","^4A"]],"^4[",[["^46"]],"^50",[["^46","^51"]],"^55",[["^46","^56"]],"^57",[["^46","^58"]],"~$database",[["^46"]]]],"^9",5,"^4Q",["^ ","~:table",["^ ","^K","^4L","^44",["^X",[["^46","^4A"]]],"^43","Return metadata for a specific Table. Metadata should satisfy [[metabase.lib.metadata/TableMetadata]]."],"~:fields",["^ ","^K","^4W","^44",["^X",[["^46","^4A"]]],"^43","Return a sequence of Fields associated with a Table with the given `table-id`. Fields should satisfy\n  the [[metabase.lib.metadata/ColumnMetadata]] schema. If no such Table exists, this should error."],"~:field",["^ ","^K","^50","^44",["^X",[["^46","^51"]]],"^43","Return metadata for a specific Field. Metadata should satisfy [[metabase.lib.metadata/ColumnMetadata]]."],"~:tables",["^ ","^K","^4[","^44",["^X",[["^46"]]],"^43","Return a sequence of Tables in this Database. Tables should satisfy the [[metabase.lib.metadata/TableMetadata]]\n  schema. This should also include things that serve as 'virtual' tables, e.g. Saved Questions or Models. But users of\n  MLv2 should not need to know that! If we add support for Super Models or Quantum Questions in the future, they can\n  just come back from this method in the same shape as everything else, the Query Builder can display them, and the\n  internals can be tucked away here in MLv2."],"~:card",["^ ","^K","^55","^44",["^X",[["^46","^56"]]],"^43","Return information about a specific Saved Question, aka a Card. This should\n    match [[metabase.lib.metadata/CardMetadata]. Currently just used for display name purposes if you have a Card as a\n    source query."],"~:segment",["^ ","^K","^57","^44",["^X",[["^46","^58"]]],"^43","Return metadata for a particular captial-S Segment, i.e. something from the `segment` table in the application\n    database. Metadata should match [[metabase.lib.metadata/SegmentMetadata]]."],"~:database",["^ ","^K","^5:","^44",["^X",[["^46"]]],"^43","Metadata about the Database we're querying. Should match the [[metabase.lib.metadata/DatabaseMetadata]] schema.\n  This includes important info such as the supported `:features` and the like."],"~:metric",["^ ","^K","^40","^44",["^X",[["^46","^47"]]],"^43","Return metadata for a particular capital-M Metric, i.e. something from the `metric` table in the application\n    database. Metadata should match [[metabase.lib.metadata/MetricMetadata]]."],"~:metrics",["^ ","^K","^4@","^44",["^X",[["^46","^4A"]]],"^43","Return a sequence of legacy v1 Metrics associated with a Table with the given `table-id`. Metrics should satisfy\n  the [[metabase.lib.metadata/MetricMetadata]] schema. If no such Table exists, this should error."]],"^43","Protocol for something that we can get information about Tables and Fields from. This can be provided in various ways\n  various ways:\n\n  1. By raw metadata attached to the query itself\n\n  2. By the application database in Clj code\n\n  3. By the Query Processor store in Clj code\n\n  4. By the Redux store in JS\n\n  5. By (hopefully cached) REST API calls\n\n  This protocol is pretty limited at this point; in the future, we'll probably want to add:\n\n  - methods for searching for Tables or Fields matching some string\n\n  - paging, so if you have 10k Tables we don't do crazy requests that fetch them all at once\n\n  For all of these methods: if no matching object can be found, you should generally return `nil` rather than throwing\n  an Exception. Let [[metabase.lib.metadata]] worry about throwing exceptions.","^4S",["^X",["@interface"]]],"^4N",true,"^K","^1A","^6","metabase/lib/metadata/protocols.cljc","^:",60,"^8",1,"^7",5,"^4O",["^ ","^4P",["^ ","^40",[["^46","^47"]],"^4@",[["^46","^4A"]],"^4L",[["^46","^4A"]],"^4W",[["^46","^4A"]],"^4[",[["^46"]],"^50",[["^46","^51"]],"^55",[["^46","^56"]],"^57",[["^46","^58"]],"^5:",[["^46"]]]],"^4T",null,"^9",5,"^4U","^4=","^4Q",["^ ","^5;",["^ ","^K","^4L","^44",["^X",[["^46","^4A"]]],"^43","Return metadata for a specific Table. Metadata should satisfy [[metabase.lib.metadata/TableMetadata]]."],"^5<",["^ ","^K","^4W","^44",["^X",[["^46","^4A"]]],"^43","Return a sequence of Fields associated with a Table with the given `table-id`. Fields should satisfy\n  the [[metabase.lib.metadata/ColumnMetadata]] schema. If no such Table exists, this should error."],"^5=",["^ ","^K","^50","^44",["^X",[["^46","^51"]]],"^43","Return metadata for a specific Field. Metadata should satisfy [[metabase.lib.metadata/ColumnMetadata]]."],"^5>",["^ ","^K","^4[","^44",["^X",[["^46"]]],"^43","Return a sequence of Tables in this Database. Tables should satisfy the [[metabase.lib.metadata/TableMetadata]]\n  schema. This should also include things that serve as 'virtual' tables, e.g. Saved Questions or Models. But users of\n  MLv2 should not need to know that! If we add support for Super Models or Quantum Questions in the future, they can\n  just come back from this method in the same shape as everything else, the Query Builder can display them, and the\n  internals can be tucked away here in MLv2."],"^5?",["^ ","^K","^55","^44",["^X",[["^46","^56"]]],"^43","Return information about a specific Saved Question, aka a Card. This should\n    match [[metabase.lib.metadata/CardMetadata]. Currently just used for display name purposes if you have a Card as a\n    source query."],"^5@",["^ ","^K","^57","^44",["^X",[["^46","^58"]]],"^43","Return metadata for a particular captial-S Segment, i.e. something from the `segment` table in the application\n    database. Metadata should match [[metabase.lib.metadata/SegmentMetadata]]."],"^5A",["^ ","^K","^5:","^44",["^X",[["^46"]]],"^43","Metadata about the Database we're querying. Should match the [[metabase.lib.metadata/DatabaseMetadata]] schema.\n  This includes important info such as the supported `:features` and the like."],"^5B",["^ ","^K","^40","^44",["^X",[["^46","^47"]]],"^43","Return metadata for a particular capital-M Metric, i.e. something from the `metric` table in the application\n    database. Metadata should match [[metabase.lib.metadata/MetricMetadata]]."],"^5C",["^ ","^K","^4@","^44",["^X",[["^46","^4A"]]],"^43","Return a sequence of legacy v1 Metrics associated with a Table with the given `table-id`. Metrics should satisfy\n  the [[metabase.lib.metadata/MetricMetadata]] schema. If no such Table exists, this should error."]],"^4V",["^J",[]],"^43","Protocol for something that we can get information about Tables and Fields from. This can be provided in various ways\n  various ways:\n\n  1. By raw metadata attached to the query itself\n\n  2. By the application database in Clj code\n\n  3. By the Query Processor store in Clj code\n\n  4. By the Redux store in JS\n\n  5. By (hopefully cached) REST API calls\n\n  This protocol is pretty limited at this point; in the future, we'll probably want to add:\n\n  - methods for searching for Tables or Fields matching some string\n\n  - paging, so if you have 10k Tables we don't do crazy requests that fetch them all at once\n\n  For all of these methods: if no matching object can be found, you should generally return `nil` rather than throwing\n  an Exception. Let [[metabase.lib.metadata]] worry about throwing exceptions.","^4S",["^X",["@interface"]]],"~$cached-database",["^ ","^41",null,"^5",["^ ","^6","metabase/lib/metadata/protocols.cljc","^7",84,"^8",4,"^9",84,"^:",19,"^42","^22","^43","Get cached metadata for the query's Database.","^44",["^X",["^45",["^X",[["^4E"]]]]]],"^42","^22","^K","^20","^6","metabase/lib/metadata/protocols.cljc","^:",19,"^48",["^X",[["^4E"]]],"^49",null,"^4:",["^X",[null,null]],"^8",1,"^4;",false,"^7",75,"^4<","^4=","^9",84,"^4>",1,"^4?",true,"^44",["^X",["^45",["^X",[["^4E"]]]]],"^43","Get cached metadata for the query's Database."],"~$CachedMetadataProvider",["^ ","^5",["^ ","^4N",true,"^6","metabase/lib/metadata/protocols.cljc","^:",66,"^8",44,"^7",75,"^4O",["^ ","^4P",["^ ","^5D",[["^4E"]],"^52",[["^4E","^4F","^4G"]],"^53",[["^4E","^54"]],"^4D",[["^4E","^4F","^4G","^4H"]]]],"^9",75,"^4Q",["^ ","~:cached-database",["^ ","^K","^5D","^44",["^X",[["^4E"]]],"^43","Get cached metadata for the query's Database."],"~:cached-metadata",["^ ","^K","^52","^44",["^X",[["^4E","^4F","^4G"]]],"^43","Get cached metadata of a specific type, e.g. `:metadata/table`."],"~:store-database!",["^ ","^K","^53","^44",["^X",[["^4E","^54"]]],"^43","Store metadata for the query's Database."],"~:store-metadata!",["^ ","^K","^4D","^44",["^X",[["^4E","^4F","^4G","^4H"]]],"^43","Store metadata of a specific type, e.g. `:metadata/table`."]],"^43","Optional. A protocol for a MetadataProvider that some sort of internal cache. This is mostly useful for\n  MetadataProviders that can hit some sort of relatively expensive external service,\n  e.g. [[metabase.lib.metadata.jvm/application-database-metadata-provider]]. The main purpose of this is to allow\n  pre-warming the cache with stuff that was already fetched elsewhere.\n  See [[metabase.models.metric/warmed-metadata-provider]] for example.\n\n  See [[cached-metadata-provider]] below to wrap for a way to wrap an existing MetadataProvider to add caching on top\n  of it.","^4S",["^X",["@interface"]]],"^4N",true,"^K","^22","^6","metabase/lib/metadata/protocols.cljc","^:",66,"^8",1,"^7",75,"^4O",["^ ","^4P",["^ ","^5D",[["^4E"]],"^52",[["^4E","^4F","^4G"]],"^53",[["^4E","^54"]],"^4D",[["^4E","^4F","^4G","^4H"]]]],"^4T",null,"^9",75,"^4U","^4=","^4Q",["^ ","^5F",["^ ","^K","^5D","^44",["^X",[["^4E"]]],"^43","Get cached metadata for the query's Database."],"^5G",["^ ","^K","^52","^44",["^X",[["^4E","^4F","^4G"]]],"^43","Get cached metadata of a specific type, e.g. `:metadata/table`."],"^5H",["^ ","^K","^53","^44",["^X",[["^4E","^54"]]],"^43","Store metadata for the query's Database."],"^5I",["^ ","^K","^4D","^44",["^X",[["^4E","^4F","^4G","^4H"]]],"^43","Store metadata of a specific type, e.g. `:metadata/table`."]],"^4V",["^J",[]],"^43","Optional. A protocol for a MetadataProvider that some sort of internal cache. This is mostly useful for\n  MetadataProviders that can hit some sort of relatively expensive external service,\n  e.g. [[metabase.lib.metadata.jvm/application-database-metadata-provider]]. The main purpose of this is to allow\n  pre-warming the cache with stuff that was already fetched elsewhere.\n  See [[metabase.models.metric/warmed-metadata-provider]] for example.\n\n  See [[cached-metadata-provider]] below to wrap for a way to wrap an existing MetadataProvider to add caching on top\n  of it.","^4S",["^X",["@interface"]]],"^5:",["^ ","^41",null,"^5",["^ ","^6","metabase/lib/metadata/protocols.cljc","^7",27,"^8",4,"^9",27,"^:",12,"^42","^1A","^43","Metadata about the Database we're querying. Should match the [[metabase.lib.metadata/DatabaseMetadata]] schema.\n  This includes important info such as the supported `:features` and the like.","^44",["^X",["^45",["^X",[["^46"]]]]]],"^42","^1A","^K","^1Y","^6","metabase/lib/metadata/protocols.cljc","^:",12,"^48",["^X",[["^46"]]],"^49",null,"^4:",["^X",[null,null]],"^8",1,"^4;",false,"^7",5,"^4<","^4=","^9",27,"^4>",1,"^4?",true,"^44",["^X",["^45",["^X",[["^46"]]]]],"^43","Metadata about the Database we're querying. Should match the [[metabase.lib.metadata/DatabaseMetadata]] schema.\n  This includes important info such as the supported `:features` and the like."]],"^V",["^ ","^C","^C"],"~:cljs.analyzer/constants",["^ ","^S",["^J",["~:id"]],"~:order",["^5K"]],"^Z",["^ ","^T",["^J",[]]],"^[",["^ "],"^10",["^R","^C"]],"^O","^L","~:ns-specs",["^ "],"~:ns-spec-vars",["^J",[]],"~:compiler-options",["^25",[["^5O","~:static-fns"],true,["^5O","~:shadow-tweaks"],null,["^5O","~:source-map-inline"],null,["^5O","~:elide-asserts"],false,["^5O","~:optimize-constants"],null,["^5O","^15"],null,["^5O","~:external-config"],null,["^5O","~:tooling-config"],null,["^5O","~:emit-constants"],null,["^5O","~:load-tests"],null,["^5O","~:form-size-threshold"],null,["^5O","~:global-goog-object&array"],null,["^5O","~:data-readers"],null,["^5O","~:infer-externs"],"~:auto",["^5O","^17"],["^J",["^18","^19"]],["~:js-options","~:js-provider"],"^T",["~:mode"],"~:dev",["^5O","~:fn-invoke-direct"],null,["^5O","~:source-map"],"/dev/null"]]]