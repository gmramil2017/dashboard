["^ ","~:output",["^ ","~:js","goog.provide('metabase.mbql.normalize');\n/**\n * True if `x` is an MBQL clause (a sequence with a token as its first arg). (This is different from the implementation\n *   in `mbql.u` because it also supports un-normalized clauses. You shouldn't need to use this outside of this\n *   namespace.)\n */\nmetabase.mbql.normalize.mbql_clause_QMARK_ = (function metabase$mbql$normalize$mbql_clause_QMARK_(x){\nvar and__5043__auto__ = cljs.core.sequential_QMARK_(x);\nif(and__5043__auto__){\nvar and__5043__auto____$1 = (!(cljs.core.map_entry_QMARK_(x)));\nif(and__5043__auto____$1){\nreturn cljs.core.some_fn.cljs$core$IFn$_invoke$arity$2(cljs.core.keyword_QMARK_,cljs.core.string_QMARK_)(cljs.core.first(x));\n} else {\nreturn and__5043__auto____$1;\n}\n} else {\nreturn and__5043__auto__;\n}\n});\n/**\n * Normalize token `x`, but only if it's a keyword or string.\n */\nmetabase.mbql.normalize.maybe_normalize_token = (function metabase$mbql$normalize$maybe_normalize_token(x){\nif(cljs.core.truth_(cljs.core.some_fn.cljs$core$IFn$_invoke$arity$2(cljs.core.keyword_QMARK_,cljs.core.string_QMARK_)(x))){\nreturn metabase.mbql.util.normalize_token(x);\n} else {\nreturn x;\n}\n});\n/**\n * If `x` an MBQL clause, and an instance of clauses defined by keyword(s) `k-or-ks`?\n * \n *  (is-clause? :count [:count 10])        ; -> true\n *  (is-clause? #{:+ :- :* :/} [:+ 10 20]) ; -> true\n * \n *   (This is different from the implementation in `mbql.u` because it also supports un-normalized clauses. You shouldn't\n *   need to use this outside of this namespace.)\n */\nmetabase.mbql.normalize.is_clause_QMARK_ = (function metabase$mbql$normalize$is_clause_QMARK_(k_or_ks,x){\nvar and__5043__auto__ = metabase.mbql.normalize.mbql_clause_QMARK_(x);\nif(cljs.core.truth_(and__5043__auto__)){\nvar clause_name = metabase.mbql.normalize.maybe_normalize_token(cljs.core.first(x));\nif(cljs.core.coll_QMARK_(k_or_ks)){\nvar fexpr__80515 = cljs.core.set(k_or_ks);\nreturn (fexpr__80515.cljs$core$IFn$_invoke$arity$1 ? fexpr__80515.cljs$core$IFn$_invoke$arity$1(clause_name) : fexpr__80515.call(null,clause_name));\n} else {\nreturn cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(k_or_ks,clause_name);\n}\n} else {\nreturn and__5043__auto__;\n}\n});\nif((typeof metabase !== 'undefined') && (typeof metabase.mbql !== 'undefined') && (typeof metabase.mbql.normalize !== 'undefined') && (typeof metabase.mbql.normalize.normalize_mbql_clause_tokens !== 'undefined')){\n} else {\nmetabase.mbql.normalize.normalize_mbql_clause_tokens = (function (){var method_table__5642__auto__ = cljs.core.atom.cljs$core$IFn$_invoke$arity$1(cljs.core.PersistentArrayMap.EMPTY);\nvar prefer_table__5643__auto__ = cljs.core.atom.cljs$core$IFn$_invoke$arity$1(cljs.core.PersistentArrayMap.EMPTY);\nvar method_cache__5644__auto__ = cljs.core.atom.cljs$core$IFn$_invoke$arity$1(cljs.core.PersistentArrayMap.EMPTY);\nvar cached_hierarchy__5645__auto__ = cljs.core.atom.cljs$core$IFn$_invoke$arity$1(cljs.core.PersistentArrayMap.EMPTY);\nvar hierarchy__5646__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$3(cljs.core.PersistentArrayMap.EMPTY,new cljs.core.Keyword(null,\"hierarchy\",\"hierarchy\",-1053470341),(function (){var fexpr__80517 = cljs.core.get_global_hierarchy;\nreturn (fexpr__80517.cljs$core$IFn$_invoke$arity$0 ? fexpr__80517.cljs$core$IFn$_invoke$arity$0() : fexpr__80517.call(null));\n})());\nreturn (new cljs.core.MultiFn(cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(\"metabase.mbql.normalize\",\"normalize-mbql-clause-tokens\"),cljs.core.comp.cljs$core$IFn$_invoke$arity$2(metabase.mbql.normalize.maybe_normalize_token,cljs.core.first),new cljs.core.Keyword(null,\"default\",\"default\",-1987822328),hierarchy__5646__auto__,method_table__5642__auto__,prefer_table__5643__auto__,method_cache__5644__auto__,cached_hierarchy__5645__auto__));\n})();\n}\nmetabase.mbql.normalize.normalize_mbql_clause_tokens.cljs$core$IMultiFn$_add_method$arity$3(null,new cljs.core.Keyword(null,\"aggregation\",\"aggregation\",1597476696),(function (p__80518){\nvar vec__80519 = p__80518;\nvar _ = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__80519,(0),null);\nvar aggregation_index = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__80519,(1),null);\nvar option = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__80519,(2),null);\nvar G__80522 = new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"aggregation\",\"aggregation\",1597476696),aggregation_index], null);\nif((!((option == null)))){\nreturn cljs.core.conj.cljs$core$IFn$_invoke$arity$2(G__80522,option);\n} else {\nreturn G__80522;\n}\n}));\nmetabase.mbql.normalize.normalize_mbql_clause_tokens.cljs$core$IMultiFn$_add_method$arity$3(null,new cljs.core.Keyword(null,\"expression\",\"expression\",202311876),(function (p__80523){\nvar vec__80524 = p__80523;\nvar _ = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__80524,(0),null);\nvar expression_name = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__80524,(1),null);\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"expression\",\"expression\",202311876),(((expression_name instanceof cljs.core.Keyword))?metabase.mbql.util.qualified_name(expression_name):expression_name)], null);\n}));\nmetabase.mbql.normalize.normalize_mbql_clause_tokens.cljs$core$IMultiFn$_add_method$arity$3(null,new cljs.core.Keyword(null,\"binning-strategy\",\"binning-strategy\",2063329158),(function (p__80528){\nvar vec__80529 = p__80528;\nvar _ = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__80529,(0),null);\nvar field = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__80529,(1),null);\nvar strategy_name = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__80529,(2),null);\nvar strategy_param = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__80529,(3),null);\nif(cljs.core.truth_(strategy_param)){\nreturn cljs.core.conj.cljs$core$IFn$_invoke$arity$2(metabase.mbql.normalize.normalize_mbql_clause_tokens.cljs$core$IFn$_invoke$arity$1(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"binning-strategy\",\"binning-strategy\",2063329158),field,strategy_name], null)),strategy_param);\n} else {\nreturn new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"binning-strategy\",\"binning-strategy\",2063329158),(metabase.mbql.normalize.normalize_tokens.cljs$core$IFn$_invoke$arity$2 ? metabase.mbql.normalize.normalize_tokens.cljs$core$IFn$_invoke$arity$2(field,new cljs.core.Keyword(null,\"ignore-path\",\"ignore-path\",944069061)) : metabase.mbql.normalize.normalize_tokens.call(null,field,new cljs.core.Keyword(null,\"ignore-path\",\"ignore-path\",944069061))),metabase.mbql.normalize.maybe_normalize_token(strategy_name)], null);\n}\n}));\nmetabase.mbql.normalize.normalize_mbql_clause_tokens.cljs$core$IMultiFn$_add_method$arity$3(null,new cljs.core.Keyword(null,\"field\",\"field\",-1302436500),(function (p__80532){\nvar vec__80533 = p__80532;\nvar _ = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__80533,(0),null);\nvar id_or_name = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__80533,(1),null);\nvar opts = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__80533,(2),null);\nvar opts__$1 = (metabase.mbql.normalize.normalize_tokens.cljs$core$IFn$_invoke$arity$2 ? metabase.mbql.normalize.normalize_tokens.cljs$core$IFn$_invoke$arity$2(opts,new cljs.core.Keyword(null,\"ignore-path\",\"ignore-path\",944069061)) : metabase.mbql.normalize.normalize_tokens.call(null,opts,new cljs.core.Keyword(null,\"ignore-path\",\"ignore-path\",944069061)));\nreturn new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"field\",\"field\",-1302436500),id_or_name,(function (){var G__80536 = opts__$1;\nvar G__80536__$1 = (cljs.core.truth_(new cljs.core.Keyword(null,\"base-type\",\"base-type\",1167971299).cljs$core$IFn$_invoke$arity$1(opts__$1))?cljs.core.update.cljs$core$IFn$_invoke$arity$3(G__80536,new cljs.core.Keyword(null,\"base-type\",\"base-type\",1167971299),cljs.core.keyword):G__80536);\nvar G__80536__$2 = (cljs.core.truth_(new cljs.core.Keyword(null,\"temporal-unit\",\"temporal-unit\",-1892306358).cljs$core$IFn$_invoke$arity$1(opts__$1))?cljs.core.update.cljs$core$IFn$_invoke$arity$3(G__80536__$1,new cljs.core.Keyword(null,\"temporal-unit\",\"temporal-unit\",-1892306358),cljs.core.keyword):G__80536__$1);\nif(cljs.core.truth_(new cljs.core.Keyword(null,\"binning\",\"binning\",1709835866).cljs$core$IFn$_invoke$arity$1(opts__$1))){\nreturn cljs.core.update.cljs$core$IFn$_invoke$arity$3(G__80536__$2,new cljs.core.Keyword(null,\"binning\",\"binning\",1709835866),(function (binning){\nvar G__80537 = binning;\nif(cljs.core.truth_(new cljs.core.Keyword(null,\"strategy\",\"strategy\",-1471631918).cljs$core$IFn$_invoke$arity$1(binning))){\nreturn cljs.core.update.cljs$core$IFn$_invoke$arity$3(G__80537,new cljs.core.Keyword(null,\"strategy\",\"strategy\",-1471631918),cljs.core.keyword);\n} else {\nreturn G__80537;\n}\n}));\n} else {\nreturn G__80536__$2;\n}\n})()], null);\n}));\nmetabase.mbql.normalize.normalize_mbql_clause_tokens.cljs$core$IMultiFn$_add_method$arity$3(null,new cljs.core.Keyword(null,\"field-literal\",\"field-literal\",-1295883554),(function (p__80538){\nvar vec__80539 = p__80538;\nvar _ = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__80539,(0),null);\nvar field_name = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__80539,(1),null);\nvar field_type = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__80539,(2),null);\nreturn new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"field-literal\",\"field-literal\",-1295883554),(((field_name instanceof cljs.core.Keyword))?metabase.mbql.util.qualified_name(field_name):field_name),cljs.core.keyword.cljs$core$IFn$_invoke$arity$1(field_type)], null);\n}));\nmetabase.mbql.normalize.normalize_mbql_clause_tokens.cljs$core$IMultiFn$_add_method$arity$3(null,new cljs.core.Keyword(null,\"datetime-field\",\"datetime-field\",21731696),(function (p__80542){\nvar vec__80543 = p__80542;\nvar _ = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__80543,(0),null);\nvar field = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__80543,(1),null);\nvar as_or_unit = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__80543,(2),null);\nvar maybe_unit = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__80543,(3),null);\nif(cljs.core.truth_(maybe_unit)){\nreturn new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"datetime-field\",\"datetime-field\",21731696),(metabase.mbql.normalize.normalize_tokens.cljs$core$IFn$_invoke$arity$2 ? metabase.mbql.normalize.normalize_tokens.cljs$core$IFn$_invoke$arity$2(field,new cljs.core.Keyword(null,\"ignore-path\",\"ignore-path\",944069061)) : metabase.mbql.normalize.normalize_tokens.call(null,field,new cljs.core.Keyword(null,\"ignore-path\",\"ignore-path\",944069061))),new cljs.core.Keyword(null,\"as\",\"as\",1148689641),metabase.mbql.normalize.maybe_normalize_token(maybe_unit)], null);\n} else {\nreturn new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"datetime-field\",\"datetime-field\",21731696),(metabase.mbql.normalize.normalize_tokens.cljs$core$IFn$_invoke$arity$2 ? metabase.mbql.normalize.normalize_tokens.cljs$core$IFn$_invoke$arity$2(field,new cljs.core.Keyword(null,\"ignore-path\",\"ignore-path\",944069061)) : metabase.mbql.normalize.normalize_tokens.call(null,field,new cljs.core.Keyword(null,\"ignore-path\",\"ignore-path\",944069061))),metabase.mbql.normalize.maybe_normalize_token(as_or_unit)], null);\n}\n}));\nmetabase.mbql.normalize.normalize_mbql_clause_tokens.cljs$core$IMultiFn$_add_method$arity$3(null,new cljs.core.Keyword(null,\"time-interval\",\"time-interval\",704622015),(function (p__80547){\nvar vec__80548 = p__80547;\nvar _ = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__80548,(0),null);\nvar field = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__80548,(1),null);\nvar amount = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__80548,(2),null);\nvar unit = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__80548,(3),null);\nvar options = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__80548,(4),null);\nif(cljs.core.truth_(options)){\nreturn cljs.core.conj.cljs$core$IFn$_invoke$arity$2(metabase.mbql.normalize.normalize_mbql_clause_tokens.cljs$core$IFn$_invoke$arity$1(new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"time-interval\",\"time-interval\",704622015),field,amount,unit], null)),(metabase.mbql.normalize.normalize_tokens.cljs$core$IFn$_invoke$arity$2 ? metabase.mbql.normalize.normalize_tokens.cljs$core$IFn$_invoke$arity$2(options,new cljs.core.Keyword(null,\"ignore-path\",\"ignore-path\",944069061)) : metabase.mbql.normalize.normalize_tokens.call(null,options,new cljs.core.Keyword(null,\"ignore-path\",\"ignore-path\",944069061))));\n} else {\nreturn new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"time-interval\",\"time-interval\",704622015),(metabase.mbql.normalize.normalize_tokens.cljs$core$IFn$_invoke$arity$2 ? metabase.mbql.normalize.normalize_tokens.cljs$core$IFn$_invoke$arity$2(field,new cljs.core.Keyword(null,\"ignore-path\",\"ignore-path\",944069061)) : metabase.mbql.normalize.normalize_tokens.call(null,field,new cljs.core.Keyword(null,\"ignore-path\",\"ignore-path\",944069061))),((cljs.core.integer_QMARK_(amount))?amount:metabase.mbql.normalize.maybe_normalize_token(amount)),metabase.mbql.normalize.maybe_normalize_token(unit)], null);\n}\n}));\nmetabase.mbql.normalize.normalize_mbql_clause_tokens.cljs$core$IMultiFn$_add_method$arity$3(null,new cljs.core.Keyword(null,\"relative-datetime\",\"relative-datetime\",1285169278),(function (p__80556){\nvar vec__80557 = p__80556;\nvar _ = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__80557,(0),null);\nvar amount = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__80557,(1),null);\nvar unit = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__80557,(2),null);\nif(cljs.core.truth_(unit)){\nreturn new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"relative-datetime\",\"relative-datetime\",1285169278),amount,metabase.mbql.normalize.maybe_normalize_token(unit)], null);\n} else {\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"relative-datetime\",\"relative-datetime\",1285169278),new cljs.core.Keyword(null,\"current\",\"current\",-1088038603)], null);\n}\n}));\nmetabase.mbql.normalize.normalize_mbql_clause_tokens.cljs$core$IMultiFn$_add_method$arity$3(null,new cljs.core.Keyword(null,\"interval\",\"interval\",1708495417),(function (p__80560){\nvar vec__80561 = p__80560;\nvar _ = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__80561,(0),null);\nvar amount = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__80561,(1),null);\nvar unit = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__80561,(2),null);\nreturn new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"interval\",\"interval\",1708495417),amount,metabase.mbql.normalize.maybe_normalize_token(unit)], null);\n}));\nmetabase.mbql.normalize.normalize_mbql_clause_tokens.cljs$core$IMultiFn$_add_method$arity$3(null,new cljs.core.Keyword(null,\"datetime-add\",\"datetime-add\",209603411),(function (p__80564){\nvar vec__80565 = p__80564;\nvar _ = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__80565,(0),null);\nvar field = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__80565,(1),null);\nvar amount = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__80565,(2),null);\nvar unit = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__80565,(3),null);\nreturn new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"datetime-add\",\"datetime-add\",209603411),(metabase.mbql.normalize.normalize_tokens.cljs$core$IFn$_invoke$arity$2 ? metabase.mbql.normalize.normalize_tokens.cljs$core$IFn$_invoke$arity$2(field,new cljs.core.Keyword(null,\"ignore-path\",\"ignore-path\",944069061)) : metabase.mbql.normalize.normalize_tokens.call(null,field,new cljs.core.Keyword(null,\"ignore-path\",\"ignore-path\",944069061))),amount,metabase.mbql.normalize.maybe_normalize_token(unit)], null);\n}));\nmetabase.mbql.normalize.normalize_mbql_clause_tokens.cljs$core$IMultiFn$_add_method$arity$3(null,new cljs.core.Keyword(null,\"datetime-subtract\",\"datetime-subtract\",275307697),(function (p__80568){\nvar vec__80569 = p__80568;\nvar _ = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__80569,(0),null);\nvar field = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__80569,(1),null);\nvar amount = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__80569,(2),null);\nvar unit = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__80569,(3),null);\nreturn new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"datetime-subtract\",\"datetime-subtract\",275307697),(metabase.mbql.normalize.normalize_tokens.cljs$core$IFn$_invoke$arity$2 ? metabase.mbql.normalize.normalize_tokens.cljs$core$IFn$_invoke$arity$2(field,new cljs.core.Keyword(null,\"ignore-path\",\"ignore-path\",944069061)) : metabase.mbql.normalize.normalize_tokens.call(null,field,new cljs.core.Keyword(null,\"ignore-path\",\"ignore-path\",944069061))),amount,metabase.mbql.normalize.maybe_normalize_token(unit)], null);\n}));\nmetabase.mbql.normalize.normalize_mbql_clause_tokens.cljs$core$IMultiFn$_add_method$arity$3(null,new cljs.core.Keyword(null,\"get-week\",\"get-week\",-888059349),(function (p__80572){\nvar vec__80573 = p__80572;\nvar _ = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__80573,(0),null);\nvar field = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__80573,(1),null);\nvar mode = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__80573,(2),null);\nif(cljs.core.truth_(mode)){\nreturn new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"get-week\",\"get-week\",-888059349),(metabase.mbql.normalize.normalize_tokens.cljs$core$IFn$_invoke$arity$2 ? metabase.mbql.normalize.normalize_tokens.cljs$core$IFn$_invoke$arity$2(field,new cljs.core.Keyword(null,\"ignore-path\",\"ignore-path\",944069061)) : metabase.mbql.normalize.normalize_tokens.call(null,field,new cljs.core.Keyword(null,\"ignore-path\",\"ignore-path\",944069061))),metabase.mbql.normalize.maybe_normalize_token(mode)], null);\n} else {\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"get-week\",\"get-week\",-888059349),(metabase.mbql.normalize.normalize_tokens.cljs$core$IFn$_invoke$arity$2 ? metabase.mbql.normalize.normalize_tokens.cljs$core$IFn$_invoke$arity$2(field,new cljs.core.Keyword(null,\"ignore-path\",\"ignore-path\",944069061)) : metabase.mbql.normalize.normalize_tokens.call(null,field,new cljs.core.Keyword(null,\"ignore-path\",\"ignore-path\",944069061)))], null);\n}\n}));\nmetabase.mbql.normalize.normalize_mbql_clause_tokens.cljs$core$IMultiFn$_add_method$arity$3(null,new cljs.core.Keyword(null,\"temporal-extract\",\"temporal-extract\",1781686405),(function (p__80576){\nvar vec__80577 = p__80576;\nvar _ = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__80577,(0),null);\nvar field = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__80577,(1),null);\nvar unit = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__80577,(2),null);\nvar mode = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__80577,(3),null);\nif(cljs.core.truth_(mode)){\nreturn new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"temporal-extract\",\"temporal-extract\",1781686405),(metabase.mbql.normalize.normalize_tokens.cljs$core$IFn$_invoke$arity$2 ? metabase.mbql.normalize.normalize_tokens.cljs$core$IFn$_invoke$arity$2(field,new cljs.core.Keyword(null,\"ignore-path\",\"ignore-path\",944069061)) : metabase.mbql.normalize.normalize_tokens.call(null,field,new cljs.core.Keyword(null,\"ignore-path\",\"ignore-path\",944069061))),metabase.mbql.normalize.maybe_normalize_token(unit),metabase.mbql.normalize.maybe_normalize_token(mode)], null);\n} else {\nreturn new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"temporal-extract\",\"temporal-extract\",1781686405),(metabase.mbql.normalize.normalize_tokens.cljs$core$IFn$_invoke$arity$2 ? metabase.mbql.normalize.normalize_tokens.cljs$core$IFn$_invoke$arity$2(field,new cljs.core.Keyword(null,\"ignore-path\",\"ignore-path\",944069061)) : metabase.mbql.normalize.normalize_tokens.call(null,field,new cljs.core.Keyword(null,\"ignore-path\",\"ignore-path\",944069061))),metabase.mbql.normalize.maybe_normalize_token(unit)], null);\n}\n}));\nmetabase.mbql.normalize.normalize_mbql_clause_tokens.cljs$core$IMultiFn$_add_method$arity$3(null,new cljs.core.Keyword(null,\"datetime-diff\",\"datetime-diff\",1133112155),(function (p__80580){\nvar vec__80581 = p__80580;\nvar _ = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__80581,(0),null);\nvar x = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__80581,(1),null);\nvar y = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__80581,(2),null);\nvar unit = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__80581,(3),null);\nreturn new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"datetime-diff\",\"datetime-diff\",1133112155),(metabase.mbql.normalize.normalize_tokens.cljs$core$IFn$_invoke$arity$2 ? metabase.mbql.normalize.normalize_tokens.cljs$core$IFn$_invoke$arity$2(x,new cljs.core.Keyword(null,\"ignore-path\",\"ignore-path\",944069061)) : metabase.mbql.normalize.normalize_tokens.call(null,x,new cljs.core.Keyword(null,\"ignore-path\",\"ignore-path\",944069061))),(metabase.mbql.normalize.normalize_tokens.cljs$core$IFn$_invoke$arity$2 ? metabase.mbql.normalize.normalize_tokens.cljs$core$IFn$_invoke$arity$2(y,new cljs.core.Keyword(null,\"ignore-path\",\"ignore-path\",944069061)) : metabase.mbql.normalize.normalize_tokens.call(null,y,new cljs.core.Keyword(null,\"ignore-path\",\"ignore-path\",944069061))),metabase.mbql.normalize.maybe_normalize_token(unit)], null);\n}));\nmetabase.mbql.normalize.normalize_mbql_clause_tokens.cljs$core$IMultiFn$_add_method$arity$3(null,new cljs.core.Keyword(null,\"value\",\"value\",305978217),(function (p__80584){\nvar vec__80585 = p__80584;\nvar _ = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__80585,(0),null);\nvar value = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__80585,(1),null);\nvar info = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__80585,(2),null);\nreturn new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"value\",\"value\",305978217),value,info], null);\n}));\nmetabase.mbql.normalize.normalize_mbql_clause_tokens.cljs$core$IMultiFn$_add_method$arity$3(null,new cljs.core.Keyword(null,\"default\",\"default\",-1987822328),(function (p__80589){\nvar vec__80590 = p__80589;\nvar seq__80591 = cljs.core.seq(vec__80590);\nvar first__80592 = cljs.core.first(seq__80591);\nvar seq__80591__$1 = cljs.core.next(seq__80591);\nvar clause_name = first__80592;\nvar args = seq__80591__$1;\nreturn cljs.core.into.cljs$core$IFn$_invoke$arity$3(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [metabase.mbql.normalize.maybe_normalize_token(clause_name)], null),cljs.core.map.cljs$core$IFn$_invoke$arity$1((function (p1__80588_SHARP_){\nreturn (metabase.mbql.normalize.normalize_tokens.cljs$core$IFn$_invoke$arity$2 ? metabase.mbql.normalize.normalize_tokens.cljs$core$IFn$_invoke$arity$2(p1__80588_SHARP_,new cljs.core.Keyword(null,\"ignore-path\",\"ignore-path\",944069061)) : metabase.mbql.normalize.normalize_tokens.call(null,p1__80588_SHARP_,new cljs.core.Keyword(null,\"ignore-path\",\"ignore-path\",944069061)));\n})),args);\n}));\nmetabase.mbql.normalize.aggregation_subclause_QMARK_ = (function metabase$mbql$normalize$aggregation_subclause_QMARK_(x){\nvar or__5045__auto__ = (cljs.core.truth_(cljs.core.some_fn.cljs$core$IFn$_invoke$arity$2(cljs.core.keyword_QMARK_,cljs.core.string_QMARK_)(x))?(function (){var G__80595 = metabase.mbql.normalize.maybe_normalize_token(x);\nvar fexpr__80594 = new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 18, [new cljs.core.Keyword(null,\"min\",\"min\",444991522),null,new cljs.core.Keyword(null,\"*\",\"*\",-1294732318),null,new cljs.core.Keyword(null,\"stddev\",\"stddev\",-865474939),null,new cljs.core.Keyword(null,\"count-where\",\"count-where\",385407720),null,new cljs.core.Keyword(null,\"-\",\"-\",-2112348439),null,new cljs.core.Keyword(null,\"cum-count\",\"cum-count\",-1964431543),null,new cljs.core.Keyword(null,\"sum-where\",\"sum-where\",2135348428),null,new cljs.core.Keyword(null,\"/\",\"/\",1282502798),null,new cljs.core.Keyword(null,\"distinct\",\"distinct\",-1788879121),null,new cljs.core.Keyword(null,\"percentile\",\"percentile\",-601188752),null,new cljs.core.Keyword(null,\"+\",\"+\",1913524883),null,new cljs.core.Keyword(null,\"var\",\"var\",-769682797),null,new cljs.core.Keyword(null,\"median\",\"median\",569566131),null,new cljs.core.Keyword(null,\"share\",\"share\",-589433933),null,new cljs.core.Keyword(null,\"max\",\"max\",61366548),null,new cljs.core.Keyword(null,\"count\",\"count\",2139924085),null,new cljs.core.Keyword(null,\"avg\",\"avg\",197406200),null,new cljs.core.Keyword(null,\"sum\",\"sum\",136986814),null], null), null);\nreturn (fexpr__80594.cljs$core$IFn$_invoke$arity$1 ? fexpr__80594.cljs$core$IFn$_invoke$arity$1(G__80595) : fexpr__80594.call(null,G__80595));\n})():null);\nif(cljs.core.truth_(or__5045__auto__)){\nreturn or__5045__auto__;\n} else {\nif(cljs.core.truth_(metabase.mbql.normalize.mbql_clause_QMARK_(x))){\nvar G__80596 = cljs.core.first(x);\nreturn (metabase.mbql.normalize.aggregation_subclause_QMARK_.cljs$core$IFn$_invoke$arity$1 ? metabase.mbql.normalize.aggregation_subclause_QMARK_.cljs$core$IFn$_invoke$arity$1(G__80596) : metabase.mbql.normalize.aggregation_subclause_QMARK_.call(null,G__80596));\n} else {\nreturn null;\n}\n}\n});\n/**\n * For old-style aggregations like `{:aggregation :count}` make sure we normalize the ag type (`:count`). Other wacky\n *   clauses like `{:aggregation [:count :count]}` need to be handled as well :(\n */\nmetabase.mbql.normalize.normalize_ag_clause_tokens = (function metabase$mbql$normalize$normalize_ag_clause_tokens(ag_clause){\nif(cljs.core.truth_(cljs.core.some_fn.cljs$core$IFn$_invoke$arity$2(cljs.core.keyword_QMARK_,cljs.core.string_QMARK_)(ag_clause))){\nreturn metabase.mbql.normalize.maybe_normalize_token(ag_clause);\n} else {\nif(cljs.core.truth_(metabase.mbql.normalize.is_clause_QMARK_(new cljs.core.Keyword(null,\"named\",\"named\",-422393479),ag_clause))){\nvar vec__80598 = ag_clause;\nvar seq__80599 = cljs.core.seq(vec__80598);\nvar first__80600 = cljs.core.first(seq__80599);\nvar seq__80599__$1 = cljs.core.next(seq__80599);\nvar _ = first__80600;\nvar first__80600__$1 = cljs.core.first(seq__80599__$1);\nvar seq__80599__$2 = cljs.core.next(seq__80599__$1);\nvar wrapped_ag = first__80600__$1;\nvar more = seq__80599__$2;\nreturn cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"named\",\"named\",-422393479),(metabase.mbql.normalize.normalize_ag_clause_tokens.cljs$core$IFn$_invoke$arity$1 ? metabase.mbql.normalize.normalize_ag_clause_tokens.cljs$core$IFn$_invoke$arity$1(wrapped_ag) : metabase.mbql.normalize.normalize_ag_clause_tokens.call(null,wrapped_ag))], null),more);\n} else {\nif(cljs.core.truth_((cljs.core.truth_(metabase.mbql.normalize.mbql_clause_QMARK_(ag_clause))?metabase.mbql.normalize.aggregation_subclause_QMARK_(cljs.core.second(ag_clause)):null))){\nreturn cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(metabase.mbql.normalize.normalize_ag_clause_tokens,ag_clause);\n} else {\nreturn (metabase.mbql.normalize.normalize_tokens.cljs$core$IFn$_invoke$arity$2 ? metabase.mbql.normalize.normalize_tokens.cljs$core$IFn$_invoke$arity$2(ag_clause,new cljs.core.Keyword(null,\"ignore-path\",\"ignore-path\",944069061)) : metabase.mbql.normalize.normalize_tokens.call(null,ag_clause,new cljs.core.Keyword(null,\"ignore-path\",\"ignore-path\",944069061)));\n\n}\n}\n}\n});\n/**\n * For expressions, we don't want to normalize the name of the expression; keep that as is, and make it a string;\n * normalize the definitions as normal.\n */\nmetabase.mbql.normalize.normalize_expressions_tokens = (function metabase$mbql$normalize$normalize_expressions_tokens(expressions_clause){\nreturn cljs.core.into.cljs$core$IFn$_invoke$arity$2(cljs.core.PersistentArrayMap.EMPTY,(function (){var iter__5523__auto__ = (function metabase$mbql$normalize$normalize_expressions_tokens_$_iter__80613(s__80614){\nreturn (new cljs.core.LazySeq(null,(function (){\nvar s__80614__$1 = s__80614;\nwhile(true){\nvar temp__5804__auto__ = cljs.core.seq(s__80614__$1);\nif(temp__5804__auto__){\nvar s__80614__$2 = temp__5804__auto__;\nif(cljs.core.chunked_seq_QMARK_(s__80614__$2)){\nvar c__5521__auto__ = cljs.core.chunk_first(s__80614__$2);\nvar size__5522__auto__ = cljs.core.count(c__5521__auto__);\nvar b__80616 = cljs.core.chunk_buffer(size__5522__auto__);\nif((function (){var i__80615 = (0);\nwhile(true){\nif((i__80615 < size__5522__auto__)){\nvar vec__80622 = cljs.core._nth(c__5521__auto__,i__80615);\nvar expression_name = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__80622,(0),null);\nvar definition = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__80622,(1),null);\ncljs.core.chunk_append(b__80616,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [metabase.mbql.util.qualified_name(expression_name),(metabase.mbql.normalize.normalize_tokens.cljs$core$IFn$_invoke$arity$2 ? metabase.mbql.normalize.normalize_tokens.cljs$core$IFn$_invoke$arity$2(definition,new cljs.core.Keyword(null,\"ignore-path\",\"ignore-path\",944069061)) : metabase.mbql.normalize.normalize_tokens.call(null,definition,new cljs.core.Keyword(null,\"ignore-path\",\"ignore-path\",944069061)))], null));\n\nvar G__81273 = (i__80615 + (1));\ni__80615 = G__81273;\ncontinue;\n} else {\nreturn true;\n}\nbreak;\n}\n})()){\nreturn cljs.core.chunk_cons(cljs.core.chunk(b__80616),metabase$mbql$normalize$normalize_expressions_tokens_$_iter__80613(cljs.core.chunk_rest(s__80614__$2)));\n} else {\nreturn cljs.core.chunk_cons(cljs.core.chunk(b__80616),null);\n}\n} else {\nvar vec__80625 = cljs.core.first(s__80614__$2);\nvar expression_name = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__80625,(0),null);\nvar definition = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__80625,(1),null);\nreturn cljs.core.cons(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [metabase.mbql.util.qualified_name(expression_name),(metabase.mbql.normalize.normalize_tokens.cljs$core$IFn$_invoke$arity$2 ? metabase.mbql.normalize.normalize_tokens.cljs$core$IFn$_invoke$arity$2(definition,new cljs.core.Keyword(null,\"ignore-path\",\"ignore-path\",944069061)) : metabase.mbql.normalize.normalize_tokens.call(null,definition,new cljs.core.Keyword(null,\"ignore-path\",\"ignore-path\",944069061)))], null),metabase$mbql$normalize$normalize_expressions_tokens_$_iter__80613(cljs.core.rest(s__80614__$2)));\n}\n} else {\nreturn null;\n}\nbreak;\n}\n}),null,null));\n});\nreturn iter__5523__auto__(expressions_clause);\n})());\n});\n/**\n * Normalize tokens in the order-by clause, which can have different syntax when using MBQL 95 or 98\n *   rules (`[<field> :asc]` vs `[:asc <field>]`, for example).\n */\nmetabase.mbql.normalize.normalize_order_by_tokens = (function metabase$mbql$normalize$normalize_order_by_tokens(clauses){\nreturn cljs.core.vec((function (){var iter__5523__auto__ = (function metabase$mbql$normalize$normalize_order_by_tokens_$_iter__80630(s__80631){\nreturn (new cljs.core.LazySeq(null,(function (){\nvar s__80631__$1 = s__80631;\nwhile(true){\nvar temp__5804__auto__ = cljs.core.seq(s__80631__$1);\nif(temp__5804__auto__){\nvar s__80631__$2 = temp__5804__auto__;\nif(cljs.core.chunked_seq_QMARK_(s__80631__$2)){\nvar c__5521__auto__ = cljs.core.chunk_first(s__80631__$2);\nvar size__5522__auto__ = cljs.core.count(c__5521__auto__);\nvar b__80633 = cljs.core.chunk_buffer(size__5522__auto__);\nif((function (){var i__80632 = (0);\nwhile(true){\nif((i__80632 < size__5522__auto__)){\nvar subclause = cljs.core._nth(c__5521__auto__,i__80632);\ncljs.core.chunk_append(b__80633,(cljs.core.truth_(metabase.mbql.normalize.mbql_clause_QMARK_(subclause))?metabase.mbql.normalize.normalize_mbql_clause_tokens.cljs$core$IFn$_invoke$arity$1(subclause):cljs.core.reverse(metabase.mbql.normalize.normalize_mbql_clause_tokens.cljs$core$IFn$_invoke$arity$1(cljs.core.reverse(subclause)))));\n\nvar G__81274 = (i__80632 + (1));\ni__80632 = G__81274;\ncontinue;\n} else {\nreturn true;\n}\nbreak;\n}\n})()){\nreturn cljs.core.chunk_cons(cljs.core.chunk(b__80633),metabase$mbql$normalize$normalize_order_by_tokens_$_iter__80630(cljs.core.chunk_rest(s__80631__$2)));\n} else {\nreturn cljs.core.chunk_cons(cljs.core.chunk(b__80633),null);\n}\n} else {\nvar subclause = cljs.core.first(s__80631__$2);\nreturn cljs.core.cons((cljs.core.truth_(metabase.mbql.normalize.mbql_clause_QMARK_(subclause))?metabase.mbql.normalize.normalize_mbql_clause_tokens.cljs$core$IFn$_invoke$arity$1(subclause):cljs.core.reverse(metabase.mbql.normalize.normalize_mbql_clause_tokens.cljs$core$IFn$_invoke$arity$1(cljs.core.reverse(subclause)))),metabase$mbql$normalize$normalize_order_by_tokens_$_iter__80630(cljs.core.rest(s__80631__$2)));\n}\n} else {\nreturn null;\n}\nbreak;\n}\n}),null,null));\n});\nreturn iter__5523__auto__(clauses);\n})());\n});\n/**\n * Get the function that should be used to transform values for normalized key `k` in a template tag definition.\n */\nmetabase.mbql.normalize.template_tag_definition_key__GT_transform_fn = (function metabase$mbql$normalize$template_tag_definition_key__GT_transform_fn(k){\nreturn cljs.core.get.cljs$core$IFn$_invoke$arity$3(new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null,\"default\",\"default\",-1987822328),cljs.core.identity,new cljs.core.Keyword(null,\"type\",\"type\",1174270348),metabase.mbql.normalize.maybe_normalize_token,new cljs.core.Keyword(null,\"widget-type\",\"widget-type\",1836256899),metabase.mbql.normalize.maybe_normalize_token], null),k,(function (v){\nreturn cljs.core.get.cljs$core$IFn$_invoke$arity$2((function (){var G__80636 = cljs.core.PersistentArrayMap.createAsIfByAssoc([k,v]);\nvar G__80637 = new cljs.core.Keyword(null,\"ignore-path\",\"ignore-path\",944069061);\nreturn (metabase.mbql.normalize.normalize_tokens.cljs$core$IFn$_invoke$arity$2 ? metabase.mbql.normalize.normalize_tokens.cljs$core$IFn$_invoke$arity$2(G__80636,G__80637) : metabase.mbql.normalize.normalize_tokens.call(null,G__80636,G__80637));\n})(),k);\n}));\n});\n/**\n * For a template tag definition, normalize all the keys appropriately.\n */\nmetabase.mbql.normalize.normalize_template_tag_definition = (function metabase$mbql$normalize$normalize_template_tag_definition(tag_definition){\nvar tag_def = cljs.core.into.cljs$core$IFn$_invoke$arity$3(cljs.core.PersistentArrayMap.EMPTY,cljs.core.map.cljs$core$IFn$_invoke$arity$1((function (p__80641){\nvar vec__80645 = p__80641;\nvar k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__80645,(0),null);\nvar v = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__80645,(1),null);\nvar k__$1 = metabase.mbql.normalize.maybe_normalize_token(k);\nvar transform_fn = metabase.mbql.normalize.template_tag_definition_key__GT_transform_fn(k__$1);\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [k__$1,(transform_fn.cljs$core$IFn$_invoke$arity$1 ? transform_fn.cljs$core$IFn$_invoke$arity$1(v) : transform_fn.call(null,v))], null);\n})),tag_definition);\nvar G__80648 = tag_def;\nif(((cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(new cljs.core.Keyword(null,\"type\",\"type\",1174270348).cljs$core$IFn$_invoke$arity$1(tag_def),new cljs.core.Keyword(null,\"dimension\",\"dimension\",543254198))) && (cljs.core.not(new cljs.core.Keyword(null,\"widget-type\",\"widget-type\",1836256899).cljs$core$IFn$_invoke$arity$1(tag_def))))){\nreturn cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__80648,new cljs.core.Keyword(null,\"widget-type\",\"widget-type\",1836256899),new cljs.core.Keyword(null,\"category\",\"category\",-593092832));\n} else {\nreturn G__80648;\n}\n});\n/**\n * Normalize native-query template tags. Like `expressions` we want to preserve the original name rather than normalize\n *   it.\n */\nmetabase.mbql.normalize.normalize_template_tags = (function metabase$mbql$normalize$normalize_template_tags(template_tags){\nreturn cljs.core.into.cljs$core$IFn$_invoke$arity$3(cljs.core.PersistentArrayMap.EMPTY,cljs.core.map.cljs$core$IFn$_invoke$arity$1((function (p__80664){\nvar vec__80665 = p__80664;\nvar tag_name = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__80665,(0),null);\nvar tag_definition = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__80665,(1),null);\nvar tag_name__$1 = metabase.mbql.util.qualified_name(tag_name);\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [tag_name__$1,cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(metabase.mbql.normalize.normalize_template_tag_definition(tag_definition),new cljs.core.Keyword(null,\"name\",\"name\",1843675177),tag_name__$1)], null);\n})),template_tags);\n});\n/**\n * Normalize a parameter in the query `:parameters` list.\n */\nmetabase.mbql.normalize.normalize_query_parameter = (function metabase$mbql$normalize$normalize_query_parameter(p__80671){\nvar map__80673 = p__80671;\nvar map__80673__$1 = cljs.core.__destructure_map(map__80673);\nvar param = map__80673__$1;\nvar type = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__80673__$1,new cljs.core.Keyword(null,\"type\",\"type\",1174270348));\nvar target = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__80673__$1,new cljs.core.Keyword(null,\"target\",\"target\",253001721));\nvar id = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__80673__$1,new cljs.core.Keyword(null,\"id\",\"id\",-1388402092));\nvar values_source_config = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__80673__$1,new cljs.core.Keyword(null,\"values_source_config\",\"values_source_config\",-590570309));\nvar G__80677 = param;\nvar G__80677__$1 = (cljs.core.truth_(id)?cljs.core.update.cljs$core$IFn$_invoke$arity$3(G__80677,new cljs.core.Keyword(null,\"id\",\"id\",-1388402092),metabase.mbql.util.qualified_name):G__80677);\nvar G__80677__$2 = (cljs.core.truth_(type)?cljs.core.update.cljs$core$IFn$_invoke$arity$3(G__80677__$1,new cljs.core.Keyword(null,\"type\",\"type\",1174270348),metabase.mbql.normalize.maybe_normalize_token):G__80677__$1);\nvar G__80677__$3 = (cljs.core.truth_(target)?cljs.core.update.cljs$core$IFn$_invoke$arity$3(G__80677__$2,new cljs.core.Keyword(null,\"target\",\"target\",253001721),(function (p1__80668_SHARP_){\nreturn (metabase.mbql.normalize.normalize_tokens.cljs$core$IFn$_invoke$arity$2 ? metabase.mbql.normalize.normalize_tokens.cljs$core$IFn$_invoke$arity$2(p1__80668_SHARP_,new cljs.core.Keyword(null,\"ignore-path\",\"ignore-path\",944069061)) : metabase.mbql.normalize.normalize_tokens.call(null,p1__80668_SHARP_,new cljs.core.Keyword(null,\"ignore-path\",\"ignore-path\",944069061)));\n})):G__80677__$2);\nvar G__80677__$4 = (cljs.core.truth_(values_source_config)?cljs.core.update_in.cljs$core$IFn$_invoke$arity$3(G__80677__$3,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"values_source_config\",\"values_source_config\",-590570309),new cljs.core.Keyword(null,\"label_field\",\"label_field\",-1573182765)], null),(function (p1__80669_SHARP_){\nreturn (metabase.mbql.normalize.normalize_tokens.cljs$core$IFn$_invoke$arity$2 ? metabase.mbql.normalize.normalize_tokens.cljs$core$IFn$_invoke$arity$2(p1__80669_SHARP_,new cljs.core.Keyword(null,\"ignore-path\",\"ignore-path\",944069061)) : metabase.mbql.normalize.normalize_tokens.call(null,p1__80669_SHARP_,new cljs.core.Keyword(null,\"ignore-path\",\"ignore-path\",944069061)));\n})):G__80677__$3);\nif(cljs.core.truth_(values_source_config)){\nreturn cljs.core.update_in.cljs$core$IFn$_invoke$arity$3(G__80677__$4,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"values_source_config\",\"values_source_config\",-590570309),new cljs.core.Keyword(null,\"value_field\",\"value_field\",-980977878)], null),(function (p1__80670_SHARP_){\nreturn (metabase.mbql.normalize.normalize_tokens.cljs$core$IFn$_invoke$arity$2 ? metabase.mbql.normalize.normalize_tokens.cljs$core$IFn$_invoke$arity$2(p1__80670_SHARP_,new cljs.core.Keyword(null,\"ignore-path\",\"ignore-path\",944069061)) : metabase.mbql.normalize.normalize_tokens.call(null,p1__80670_SHARP_,new cljs.core.Keyword(null,\"ignore-path\",\"ignore-path\",944069061)));\n}));\n} else {\nreturn G__80677__$4;\n}\n});\nmetabase.mbql.normalize.normalize_source_query = (function metabase$mbql$normalize$normalize_source_query(source_query){\nvar map__80681 = medley.core.map_keys(metabase.mbql.normalize.maybe_normalize_token,source_query);\nvar map__80681__$1 = cljs.core.__destructure_map(map__80681);\nvar source_query__$1 = map__80681__$1;\nvar native_QMARK_ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__80681__$1,new cljs.core.Keyword(null,\"native\",\"native\",-613060878));\nif(cljs.core.truth_(native_QMARK_)){\nreturn clojure.set.rename_keys((function (){var G__80682 = clojure.set.rename_keys(source_query__$1,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"native\",\"native\",-613060878),new cljs.core.Keyword(null,\"query\",\"query\",-1288509510)], null));\nvar G__80683 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"native\",\"native\",-613060878)], null);\nreturn (metabase.mbql.normalize.normalize_tokens.cljs$core$IFn$_invoke$arity$2 ? metabase.mbql.normalize.normalize_tokens.cljs$core$IFn$_invoke$arity$2(G__80682,G__80683) : metabase.mbql.normalize.normalize_tokens.call(null,G__80682,G__80683));\n})(),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"query\",\"query\",-1288509510),new cljs.core.Keyword(null,\"native\",\"native\",-613060878)], null));\n} else {\nvar G__80684 = source_query__$1;\nvar G__80685 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"query\",\"query\",-1288509510)], null);\nreturn (metabase.mbql.normalize.normalize_tokens.cljs$core$IFn$_invoke$arity$2 ? metabase.mbql.normalize.normalize_tokens.cljs$core$IFn$_invoke$arity$2(G__80684,G__80685) : metabase.mbql.normalize.normalize_tokens.call(null,G__80684,G__80685));\n}\n});\nmetabase.mbql.normalize.normalize_join = (function metabase$mbql$normalize$normalize_join(join){\nvar map__80687 = (metabase.mbql.normalize.normalize_tokens.cljs$core$IFn$_invoke$arity$2 ? metabase.mbql.normalize.normalize_tokens.cljs$core$IFn$_invoke$arity$2(join,new cljs.core.Keyword(null,\"query\",\"query\",-1288509510)) : metabase.mbql.normalize.normalize_tokens.call(null,join,new cljs.core.Keyword(null,\"query\",\"query\",-1288509510)));\nvar map__80687__$1 = cljs.core.__destructure_map(map__80687);\nvar join__$1 = map__80687__$1;\nvar strategy = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__80687__$1,new cljs.core.Keyword(null,\"strategy\",\"strategy\",-1471631918));\nvar fields = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__80687__$1,new cljs.core.Keyword(null,\"fields\",\"fields\",-1932066230));\nvar alias = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__80687__$1,new cljs.core.Keyword(null,\"alias\",\"alias\",-2039751630));\nvar G__80701 = join__$1;\nvar G__80701__$1 = (cljs.core.truth_(strategy)?cljs.core.update.cljs$core$IFn$_invoke$arity$3(G__80701,new cljs.core.Keyword(null,\"strategy\",\"strategy\",-1471631918),metabase.mbql.normalize.maybe_normalize_token):G__80701);\nvar G__80701__$2 = (cljs.core.truth_(cljs.core.some_fn.cljs$core$IFn$_invoke$arity$2(cljs.core.keyword_QMARK_,cljs.core.string_QMARK_)(fields))?cljs.core.update.cljs$core$IFn$_invoke$arity$3(G__80701__$1,new cljs.core.Keyword(null,\"fields\",\"fields\",-1932066230),metabase.mbql.normalize.maybe_normalize_token):G__80701__$1);\nif(cljs.core.truth_(alias)){\nreturn cljs.core.update.cljs$core$IFn$_invoke$arity$3(G__80701__$2,new cljs.core.Keyword(null,\"alias\",\"alias\",-2039751630),metabase.mbql.util.qualified_name);\n} else {\nreturn G__80701__$2;\n}\n});\n/**\n * Normalize source/results metadata for a single column.\n */\nmetabase.mbql.normalize.normalize_source_metadata = (function metabase$mbql$normalize$normalize_source_metadata(metadata){\nif(cljs.core.map_QMARK_(metadata)){\n} else {\nthrow (new Error(\"Assert failed: (map? metadata)\"));\n}\n\nreturn medley.core.update_existing.cljs$core$IFn$_invoke$arity$3(medley.core.update_existing.cljs$core$IFn$_invoke$arity$3(cljs.core.reduce.cljs$core$IFn$_invoke$arity$3((function (p1__80704_SHARP_,p2__80705_SHARP_){\nreturn medley.core.update_existing.cljs$core$IFn$_invoke$arity$3(p1__80704_SHARP_,p2__80705_SHARP_,cljs.core.keyword);\n}),metadata,new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"base_type\",\"base_type\",1908272670),new cljs.core.Keyword(null,\"effective_type\",\"effective_type\",1699478099),new cljs.core.Keyword(null,\"semantic_type\",\"semantic_type\",272485089),new cljs.core.Keyword(null,\"visibility_type\",\"visibility_type\",-508434247),new cljs.core.Keyword(null,\"source\",\"source\",-433931539),new cljs.core.Keyword(null,\"unit\",\"unit\",375175175)], null)),new cljs.core.Keyword(null,\"field_ref\",\"field_ref\",-1985640334),cljs.core.comp.cljs$core$IFn$_invoke$arity$2(metabase.mbql.normalize.canonicalize_mbql_clauses,metabase.mbql.normalize.normalize_tokens)),new cljs.core.Keyword(null,\"fingerprint\",\"fingerprint\",598613022),clojure.walk.keywordize_keys);\n});\n/**\n * For native queries, normalize the top-level keys, and template tags, but nothing else.\n */\nmetabase.mbql.normalize.normalize_native_query = (function metabase$mbql$normalize$normalize_native_query(native_query){\nvar native_query__$1 = medley.core.map_keys(metabase.mbql.normalize.maybe_normalize_token,native_query);\nvar G__80706 = native_query__$1;\nif(cljs.core.seq(new cljs.core.Keyword(null,\"template-tags\",\"template-tags\",1853115685).cljs$core$IFn$_invoke$arity$1(native_query__$1))){\nreturn cljs.core.update.cljs$core$IFn$_invoke$arity$3(G__80706,new cljs.core.Keyword(null,\"template-tags\",\"template-tags\",1853115685),metabase.mbql.normalize.normalize_template_tags);\n} else {\nreturn G__80706;\n}\n});\n/**\n * Map of special functions that should be used to perform token normalization for a given path. For example, the\n *   `:expressions` key in an MBQL query should preserve the case of the expression names; this custom behavior is\n *   defined below.\n */\nmetabase.mbql.normalize.path__GT_special_token_normalization_fn = new cljs.core.PersistentArrayMap(null, 8, [new cljs.core.Keyword(null,\"type\",\"type\",1174270348),metabase.mbql.normalize.maybe_normalize_token,new cljs.core.Keyword(null,\"native\",\"native\",-613060878),metabase.mbql.normalize.normalize_native_query,new cljs.core.Keyword(null,\"query\",\"query\",-1288509510),new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null,\"aggregation\",\"aggregation\",1597476696),metabase.mbql.normalize.normalize_ag_clause_tokens,new cljs.core.Keyword(null,\"expressions\",\"expressions\",255689909),metabase.mbql.normalize.normalize_expressions_tokens,new cljs.core.Keyword(null,\"order-by\",\"order-by\",1527318070),metabase.mbql.normalize.normalize_order_by_tokens,new cljs.core.Keyword(null,\"source-query\",\"source-query\",198004422),metabase.mbql.normalize.normalize_source_query,new cljs.core.Keyword(null,\"source-metadata\",\"source-metadata\",-477816085),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(\"metabase.mbql.normalize\",\"sequence\",\"metabase.mbql.normalize/sequence\",-1700645683),metabase.mbql.normalize.normalize_source_metadata], null),new cljs.core.Keyword(null,\"joins\",\"joins\",1033962699),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(\"metabase.mbql.normalize\",\"sequence\",\"metabase.mbql.normalize/sequence\",-1700645683),metabase.mbql.normalize.normalize_join], null)], null),new cljs.core.Keyword(null,\"info\",\"info\",-317069002),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(\"metadata\",\"dataset-metadata\",\"metadata/dataset-metadata\",-728376469),cljs.core.identity], null),new cljs.core.Keyword(null,\"parameters\",\"parameters\",-1229919748),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(\"metabase.mbql.normalize\",\"sequence\",\"metabase.mbql.normalize/sequence\",-1700645683),metabase.mbql.normalize.normalize_query_parameter], null),new cljs.core.Keyword(null,\"context\",\"context\",-830191113),(function (p1__80708_SHARP_){\nvar G__80710 = p1__80708_SHARP_;\nif((G__80710 == null)){\nreturn null;\n} else {\nreturn metabase.mbql.normalize.maybe_normalize_token(G__80710);\n}\n}),new cljs.core.Keyword(null,\"source-metadata\",\"source-metadata\",-477816085),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(\"metabase.mbql.normalize\",\"sequence\",\"metabase.mbql.normalize/sequence\",-1700645683),metabase.mbql.normalize.normalize_source_metadata], null),new cljs.core.Keyword(null,\"viz-settings\",\"viz-settings\",256055379),metabase.mbql.normalize.maybe_normalize_token], null);\n/**\n * Recursively normalize tokens in `x`.\n * \n *   Every time this function recurses (thru a map value) it adds a new (normalized) key to key path, e.g. `path` will be\n *   `[:query :order-by]` when we're in the MBQL order-by clause. If we need to handle these top-level clauses in special\n *   ways add a function to `path->special-token-normalization-fn` above.\n * \n *   In some cases, dealing with the path isn't desirable, but we don't want to accidentally trigger normalization\n *   functions (such as accidentally normalizing the `:type` key in something other than the top-level of the query), so\n *   by convention please pass `:ignore-path` to avoid accidentally triggering path functions.\n */\nmetabase.mbql.normalize.normalize_tokens = (function metabase$mbql$normalize$normalize_tokens(var_args){\nvar args__5775__auto__ = [];\nvar len__5769__auto___81283 = arguments.length;\nvar i__5770__auto___81284 = (0);\nwhile(true){\nif((i__5770__auto___81284 < len__5769__auto___81283)){\nargs__5775__auto__.push((arguments[i__5770__auto___81284]));\n\nvar G__81285 = (i__5770__auto___81284 + (1));\ni__5770__auto___81284 = G__81285;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__5776__auto__ = ((((1) < args__5775__auto__.length))?(new cljs.core.IndexedSeq(args__5775__auto__.slice((1)),(0),null)):null);\nreturn metabase.mbql.normalize.normalize_tokens.cljs$core$IFn$_invoke$arity$variadic((arguments[(0)]),argseq__5776__auto__);\n});\n\n(metabase.mbql.normalize.normalize_tokens.cljs$core$IFn$_invoke$arity$variadic = (function (x,p__80718){\nvar vec__80719 = p__80718;\nvar path = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__80719,(0),null);\nvar path__$1 = (((path instanceof cljs.core.Keyword))?new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [path], null):cljs.core.vec(path));\nvar special_fn = ((cljs.core.seq(path__$1))?cljs.core.get_in.cljs$core$IFn$_invoke$arity$2(metabase.mbql.normalize.path__GT_special_token_normalization_fn,path__$1):null);\ntry{if(cljs.core.fn_QMARK_(special_fn)){\nreturn (special_fn.cljs$core$IFn$_invoke$arity$1 ? special_fn.cljs$core$IFn$_invoke$arity$1(x) : special_fn.call(null,x));\n} else {\nif(cljs.core.record_QMARK_(x)){\nreturn x;\n} else {\nif(cljs.core.map_QMARK_(x)){\nreturn cljs.core.into.cljs$core$IFn$_invoke$arity$2(cljs.core.PersistentArrayMap.EMPTY,(function (){var iter__5523__auto__ = (function metabase$mbql$normalize$iter__80725(s__80726){\nreturn (new cljs.core.LazySeq(null,(function (){\nvar s__80726__$1 = s__80726;\nwhile(true){\nvar temp__5804__auto__ = cljs.core.seq(s__80726__$1);\nif(temp__5804__auto__){\nvar s__80726__$2 = temp__5804__auto__;\nif(cljs.core.chunked_seq_QMARK_(s__80726__$2)){\nvar c__5521__auto__ = cljs.core.chunk_first(s__80726__$2);\nvar size__5522__auto__ = cljs.core.count(c__5521__auto__);\nvar b__80728 = cljs.core.chunk_buffer(size__5522__auto__);\nif((function (){var i__80727 = (0);\nwhile(true){\nif((i__80727 < size__5522__auto__)){\nvar vec__80732 = cljs.core._nth(c__5521__auto__,i__80727);\nvar k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__80732,(0),null);\nvar v = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__80732,(1),null);\nvar k__$1 = metabase.mbql.normalize.maybe_normalize_token(k);\ncljs.core.chunk_append(b__80728,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [k__$1,metabase.mbql.normalize.normalize_tokens.cljs$core$IFn$_invoke$arity$variadic(v,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([cljs.core.conj.cljs$core$IFn$_invoke$arity$2(cljs.core.vec(path__$1),k__$1)], 0))], null));\n\nvar G__81293 = (i__80727 + (1));\ni__80727 = G__81293;\ncontinue;\n} else {\nreturn true;\n}\nbreak;\n}\n})()){\nreturn cljs.core.chunk_cons(cljs.core.chunk(b__80728),metabase$mbql$normalize$iter__80725(cljs.core.chunk_rest(s__80726__$2)));\n} else {\nreturn cljs.core.chunk_cons(cljs.core.chunk(b__80728),null);\n}\n} else {\nvar vec__80735 = cljs.core.first(s__80726__$2);\nvar k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__80735,(0),null);\nvar v = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__80735,(1),null);\nvar k__$1 = metabase.mbql.normalize.maybe_normalize_token(k);\nreturn cljs.core.cons(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [k__$1,metabase.mbql.normalize.normalize_tokens.cljs$core$IFn$_invoke$arity$variadic(v,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([cljs.core.conj.cljs$core$IFn$_invoke$arity$2(cljs.core.vec(path__$1),k__$1)], 0))], null),metabase$mbql$normalize$iter__80725(cljs.core.rest(s__80726__$2)));\n}\n} else {\nreturn null;\n}\nbreak;\n}\n}),null,null));\n});\nreturn iter__5523__auto__(x);\n})());\n} else {\nif(cljs.core.truth_(metabase.mbql.normalize.mbql_clause_QMARK_(x))){\nreturn metabase.mbql.normalize.normalize_mbql_clause_tokens.cljs$core$IFn$_invoke$arity$1(x);\n} else {\nif(cljs.core.sequential_QMARK_(x)){\nreturn cljs.core.mapv.cljs$core$IFn$_invoke$arity$2((function (p1__80712_SHARP_){\nreturn metabase.mbql.normalize.normalize_tokens.cljs$core$IFn$_invoke$arity$variadic(p1__80712_SHARP_,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([cljs.core.conj.cljs$core$IFn$_invoke$arity$2(cljs.core.vec(path__$1),new cljs.core.Keyword(\"metabase.mbql.normalize\",\"sequence\",\"metabase.mbql.normalize/sequence\",-1700645683))], 0));\n}),x);\n} else {\nreturn x;\n\n}\n}\n}\n}\n}\n}catch (e80723){if((e80723 instanceof Error)){\nvar e = e80723;\nthrow cljs.core.ex_info.cljs$core$IFn$_invoke$arity$3(metabase.shared.util.i18n.js_i18n.cljs$core$IFn$_invoke$arity$variadic(\"Error normalizing form: {0}\",cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([cljs.core.ex_message(e)], 0)),new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null,\"form\",\"form\",-1624062471),x,new cljs.core.Keyword(null,\"path\",\"path\",-188191168),path__$1,new cljs.core.Keyword(null,\"special-fn\",\"special-fn\",1290649344),special_fn], null),e);\n} else {\nthrow e80723;\n\n}\n}}));\n\n(metabase.mbql.normalize.normalize_tokens.cljs$lang$maxFixedArity = (1));\n\n/** @this {Function} */\n(metabase.mbql.normalize.normalize_tokens.cljs$lang$applyTo = (function (seq80713){\nvar G__80714 = cljs.core.first(seq80713);\nvar seq80713__$1 = cljs.core.next(seq80713);\nvar self__5754__auto__ = this;\nreturn self__5754__auto__.cljs$core$IFn$_invoke$arity$variadic(G__80714,seq80713__$1);\n}));\n\n/**\n * Wrap raw integer Field IDs (i.e., those in an implicit 'field' position) in a `:field` clause if they're not\n *   already. Done for MBQL 95 backwards-compatibility. e.g.:\n * \n *  {:filter [:= 10 20]} ; -> {:filter [:= [:field 10 nil] 20]}\n */\nmetabase.mbql.normalize.wrap_implicit_field_id = (function metabase$mbql$normalize$wrap_implicit_field_id(field){\nif(cljs.core.integer_QMARK_(field)){\nreturn new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"field\",\"field\",-1302436500),field,null], null);\n} else {\nreturn field;\n}\n});\nif((typeof metabase !== 'undefined') && (typeof metabase.mbql !== 'undefined') && (typeof metabase.mbql.normalize !== 'undefined') && (typeof metabase.mbql.normalize.canonicalize_mbql_clause !== 'undefined')){\n} else {\nmetabase.mbql.normalize.canonicalize_mbql_clause = (function (){var method_table__5642__auto__ = cljs.core.atom.cljs$core$IFn$_invoke$arity$1(cljs.core.PersistentArrayMap.EMPTY);\nvar prefer_table__5643__auto__ = cljs.core.atom.cljs$core$IFn$_invoke$arity$1(cljs.core.PersistentArrayMap.EMPTY);\nvar method_cache__5644__auto__ = cljs.core.atom.cljs$core$IFn$_invoke$arity$1(cljs.core.PersistentArrayMap.EMPTY);\nvar cached_hierarchy__5645__auto__ = cljs.core.atom.cljs$core$IFn$_invoke$arity$1(cljs.core.PersistentArrayMap.EMPTY);\nvar hierarchy__5646__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$3(cljs.core.PersistentArrayMap.EMPTY,new cljs.core.Keyword(null,\"hierarchy\",\"hierarchy\",-1053470341),(function (){var fexpr__80749 = cljs.core.get_global_hierarchy;\nreturn (fexpr__80749.cljs$core$IFn$_invoke$arity$0 ? fexpr__80749.cljs$core$IFn$_invoke$arity$0() : fexpr__80749.call(null));\n})());\nreturn (new cljs.core.MultiFn(cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(\"metabase.mbql.normalize\",\"canonicalize-mbql-clause\"),(function (clause){\nif(cljs.core.truth_(metabase.mbql.normalize.mbql_clause_QMARK_(clause))){\nreturn cljs.core.first(clause);\n} else {\nreturn null;\n}\n}),new cljs.core.Keyword(null,\"default\",\"default\",-1987822328),hierarchy__5646__auto__,method_table__5642__auto__,prefer_table__5643__auto__,method_cache__5644__auto__,cached_hierarchy__5645__auto__));\n})();\n}\nmetabase.mbql.normalize.canonicalize_mbql_clause.cljs$core$IMultiFn$_add_method$arity$3(null,new cljs.core.Keyword(null,\"default\",\"default\",-1987822328),(function (clause){\nreturn clause;\n}));\n/**\n * If `clause` is a raw integer ID wrap it in a `:field` clause. Either way, canonicalize the resulting clause.\n */\nmetabase.mbql.normalize.canonicalize_implicit_field_id = (function metabase$mbql$normalize$canonicalize_implicit_field_id(clause){\nreturn metabase.mbql.normalize.canonicalize_mbql_clause.cljs$core$IFn$_invoke$arity$1(metabase.mbql.normalize.wrap_implicit_field_id(clause));\n});\nmetabase.mbql.normalize.canonicalize_mbql_clause.cljs$core$IMultiFn$_add_method$arity$3(null,new cljs.core.Keyword(null,\"field\",\"field\",-1302436500),(function (p__80753){\nvar vec__80754 = p__80753;\nvar _ = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__80754,(0),null);\nvar id_or_name = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__80754,(1),null);\nvar opts = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__80754,(2),null);\nif(cljs.core.truth_(metabase.mbql.normalize.is_clause_QMARK_(new cljs.core.Keyword(null,\"field\",\"field\",-1302436500),id_or_name))){\nvar vec__80757 = id_or_name;\nvar ___$1 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__80757,(0),null);\nvar nested_id_or_name = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__80757,(1),null);\nvar nested_opts = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__80757,(2),null);\nreturn metabase.mbql.normalize.canonicalize_mbql_clause.cljs$core$IFn$_invoke$arity$1(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"field\",\"field\",-1302436500),nested_id_or_name,cljs.core.not_empty(cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([nested_opts,opts], 0)))], null));\n} else {\nreturn new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"field\",\"field\",-1302436500),id_or_name,cljs.core.not_empty(opts)], null);\n}\n}));\nmetabase.mbql.normalize.canonicalize_mbql_clause.cljs$core$IMultiFn$_add_method$arity$3(null,new cljs.core.Keyword(null,\"aggregation\",\"aggregation\",1597476696),(function (p__80764){\nvar vec__80765 = p__80764;\nvar _tag = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__80765,(0),null);\nvar index = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__80765,(1),null);\nvar opts = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__80765,(2),null);\nif(cljs.core.empty_QMARK_(opts)){\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"aggregation\",\"aggregation\",1597476696),index], null);\n} else {\nreturn new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"aggregation\",\"aggregation\",1597476696),index,opts], null);\n}\n}));\nmetabase.mbql.normalize.canonicalize_mbql_clause.cljs$core$IMultiFn$_add_method$arity$3(null,new cljs.core.Keyword(null,\"field-id\",\"field-id\",-353751335),(function (p__80770){\nvar vec__80771 = p__80770;\nvar _ = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__80771,(0),null);\nvar id = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__80771,(1),null);\nif(cljs.core.truth_(metabase.mbql.normalize.mbql_clause_QMARK_(id))){\nreturn metabase.mbql.normalize.canonicalize_mbql_clause.cljs$core$IFn$_invoke$arity$1(id);\n} else {\nreturn new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"field\",\"field\",-1302436500),id,null], null);\n}\n}));\nmetabase.mbql.normalize.canonicalize_mbql_clause.cljs$core$IMultiFn$_add_method$arity$3(null,new cljs.core.Keyword(null,\"field-literal\",\"field-literal\",-1295883554),(function (p__80775){\nvar vec__80778 = p__80775;\nvar _ = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__80778,(0),null);\nvar field_name = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__80778,(1),null);\nvar base_type = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__80778,(2),null);\nreturn new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"field\",\"field\",-1302436500),field_name,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"base-type\",\"base-type\",1167971299),base_type], null)], null);\n}));\nmetabase.mbql.normalize.canonicalize_mbql_clause.cljs$core$IMultiFn$_add_method$arity$3(null,new cljs.core.Keyword(null,\"fk->\",\"fk->\",-499026738),(function (p__80782){\nvar vec__80785 = p__80782;\nvar _ = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__80785,(0),null);\nvar field_1 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__80785,(1),null);\nvar field_2 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__80785,(2),null);\nvar vec__80788 = metabase.mbql.normalize.canonicalize_implicit_field_id(field_1);\nvar ___$1 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__80788,(0),null);\nvar source = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__80788,(1),null);\nvar ___$2 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__80788,(2),null);\nvar vec__80791 = metabase.mbql.normalize.canonicalize_implicit_field_id(field_2);\nvar ___$3 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__80791,(0),null);\nvar dest = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__80791,(1),null);\nvar dest_opts = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__80791,(2),null);\nreturn new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"field\",\"field\",-1302436500),dest,cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(dest_opts,new cljs.core.Keyword(null,\"source-field\",\"source-field\",933829534),source)], null);\n}));\nmetabase.mbql.normalize.canonicalize_mbql_clause.cljs$core$IMultiFn$_add_method$arity$3(null,new cljs.core.Keyword(null,\"joined-field\",\"joined-field\",-2048778268),(function (p__80794){\nvar vec__80795 = p__80794;\nvar _ = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__80795,(0),null);\nvar join_alias = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__80795,(1),null);\nvar field = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__80795,(2),null);\nreturn metabase.mbql.util.assoc_field_options.cljs$core$IFn$_invoke$arity$variadic(metabase.mbql.normalize.canonicalize_implicit_field_id(field),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"join-alias\",\"join-alias\",1454206794),join_alias], 0));\n}));\nmetabase.mbql.normalize.canonicalize_mbql_clause.cljs$core$IMultiFn$_add_method$arity$3(null,new cljs.core.Keyword(null,\"datetime-field\",\"datetime-field\",21731696),(function (clause){\nvar G__80798 = cljs.core.count(clause);\nswitch (G__80798) {\ncase (3):\nvar vec__80799 = clause;\nvar _ = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__80799,(0),null);\nvar field = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__80799,(1),null);\nvar unit = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__80799,(2),null);\nreturn metabase.mbql.util.with_temporal_unit(metabase.mbql.normalize.canonicalize_implicit_field_id(field),unit);\n\nbreak;\ncase (4):\nvar vec__80802 = clause;\nvar _ = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__80802,(0),null);\nvar field = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__80802,(1),null);\nvar ___$1 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__80802,(2),null);\nvar unit = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__80802,(3),null);\nreturn metabase.mbql.normalize.canonicalize_mbql_clause.cljs$core$IFn$_invoke$arity$1(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"datetime-field\",\"datetime-field\",21731696),field,unit], null));\n\nbreak;\ndefault:\nthrow (new Error([\"No matching clause: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(G__80798)].join('')));\n\n}\n}));\nmetabase.mbql.normalize.canonicalize_mbql_clause.cljs$core$IMultiFn$_add_method$arity$3(null,new cljs.core.Keyword(null,\"binning-strategy\",\"binning-strategy\",2063329158),(function (p__80808){\nvar vec__80809 = p__80808;\nvar _ = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__80809,(0),null);\nvar field = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__80809,(1),null);\nvar strategy = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__80809,(2),null);\nvar param = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__80809,(3),null);\nvar binning_options = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__80809,(4),null);\nvar vec__80812 = metabase.mbql.normalize.canonicalize_implicit_field_id(field);\nvar ___$1 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__80812,(0),null);\nvar id_or_name = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__80812,(1),null);\nvar opts = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__80812,(2),null);\nreturn new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"field\",\"field\",-1302436500),id_or_name,cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(opts,new cljs.core.Keyword(null,\"binning\",\"binning\",1709835866),cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"strategy\",\"strategy\",-1471631918),strategy], null),(cljs.core.truth_(param)?cljs.core.PersistentArrayMap.createAsIfByAssoc([strategy,param]):null),binning_options], 0)))], null);\n}));\nmetabase.mbql.normalize.canonicalize_compound_filter_clause = (function metabase$mbql$normalize$canonicalize_compound_filter_clause(p__80822){\nvar vec__80823 = p__80822;\nvar seq__80824 = cljs.core.seq(vec__80823);\nvar first__80825 = cljs.core.first(seq__80824);\nvar seq__80824__$1 = cljs.core.next(seq__80824);\nvar filter_name = first__80825;\nvar args = seq__80824__$1;\nreturn metabase.mbql.util.simplify_compound_filter(cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [filter_name], null),cljs.core.map.cljs$core$IFn$_invoke$arity$2(metabase.mbql.normalize.canonicalize_mbql_clause,args)));\n});\nvar seq__80826_81320 = cljs.core.seq(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"and\",\"and\",-971899817),new cljs.core.Keyword(null,\"or\",\"or\",235744169),new cljs.core.Keyword(null,\"not\",\"not\",-595976884)], null));\nvar chunk__80827_81321 = null;\nvar count__80828_81322 = (0);\nvar i__80829_81323 = (0);\nwhile(true){\nif((i__80829_81323 < count__80828_81322)){\nvar clause_name_81324 = chunk__80827_81321.cljs$core$IIndexed$_nth$arity$2(null,i__80829_81323);\nmetabase.mbql.normalize.canonicalize_mbql_clause.cljs$core$IMultiFn$_add_method$arity$3(null,clause_name_81324,((function (seq__80826_81320,chunk__80827_81321,count__80828_81322,i__80829_81323,clause_name_81324){\nreturn (function (clause){\nreturn metabase.mbql.normalize.canonicalize_compound_filter_clause(clause);\n});})(seq__80826_81320,chunk__80827_81321,count__80828_81322,i__80829_81323,clause_name_81324))\n);\n\n\nvar G__81325 = seq__80826_81320;\nvar G__81326 = chunk__80827_81321;\nvar G__81327 = count__80828_81322;\nvar G__81328 = (i__80829_81323 + (1));\nseq__80826_81320 = G__81325;\nchunk__80827_81321 = G__81326;\ncount__80828_81322 = G__81327;\ni__80829_81323 = G__81328;\ncontinue;\n} else {\nvar temp__5804__auto___81329 = cljs.core.seq(seq__80826_81320);\nif(temp__5804__auto___81329){\nvar seq__80826_81330__$1 = temp__5804__auto___81329;\nif(cljs.core.chunked_seq_QMARK_(seq__80826_81330__$1)){\nvar c__5568__auto___81331 = cljs.core.chunk_first(seq__80826_81330__$1);\nvar G__81336 = cljs.core.chunk_rest(seq__80826_81330__$1);\nvar G__81337 = c__5568__auto___81331;\nvar G__81338 = cljs.core.count(c__5568__auto___81331);\nvar G__81339 = (0);\nseq__80826_81320 = G__81336;\nchunk__80827_81321 = G__81337;\ncount__80828_81322 = G__81338;\ni__80829_81323 = G__81339;\ncontinue;\n} else {\nvar clause_name_81340 = cljs.core.first(seq__80826_81330__$1);\nmetabase.mbql.normalize.canonicalize_mbql_clause.cljs$core$IMultiFn$_add_method$arity$3(null,clause_name_81340,((function (seq__80826_81320,chunk__80827_81321,count__80828_81322,i__80829_81323,clause_name_81340,seq__80826_81330__$1,temp__5804__auto___81329){\nreturn (function (clause){\nreturn metabase.mbql.normalize.canonicalize_compound_filter_clause(clause);\n});})(seq__80826_81320,chunk__80827_81321,count__80828_81322,i__80829_81323,clause_name_81340,seq__80826_81330__$1,temp__5804__auto___81329))\n);\n\n\nvar G__81341 = cljs.core.next(seq__80826_81330__$1);\nvar G__81342 = null;\nvar G__81343 = (0);\nvar G__81344 = (0);\nseq__80826_81320 = G__81341;\nchunk__80827_81321 = G__81342;\ncount__80828_81322 = G__81343;\ni__80829_81323 = G__81344;\ncontinue;\n}\n} else {\n}\n}\nbreak;\n}\nmetabase.mbql.normalize.canonicalize_mbql_clause.cljs$core$IMultiFn$_add_method$arity$3(null,new cljs.core.Keyword(null,\"inside\",\"inside\",1972503011),(function (p__80847){\nvar vec__80848 = p__80847;\nvar seq__80849 = cljs.core.seq(vec__80848);\nvar first__80850 = cljs.core.first(seq__80849);\nvar seq__80849__$1 = cljs.core.next(seq__80849);\nvar _ = first__80850;\nvar first__80850__$1 = cljs.core.first(seq__80849__$1);\nvar seq__80849__$2 = cljs.core.next(seq__80849__$1);\nvar field_1 = first__80850__$1;\nvar first__80850__$2 = cljs.core.first(seq__80849__$2);\nvar seq__80849__$3 = cljs.core.next(seq__80849__$2);\nvar field_2 = first__80850__$2;\nvar coordinates = seq__80849__$3;\nreturn cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"inside\",\"inside\",1972503011),metabase.mbql.normalize.canonicalize_implicit_field_id(field_1),metabase.mbql.normalize.canonicalize_implicit_field_id(field_2)], null),coordinates);\n}));\nmetabase.mbql.normalize.canonicalize_mbql_clause.cljs$core$IMultiFn$_add_method$arity$3(null,new cljs.core.Keyword(null,\"time-interval\",\"time-interval\",704622015),(function (p__80853){\nvar vec__80859 = p__80853;\nvar seq__80860 = cljs.core.seq(vec__80859);\nvar first__80861 = cljs.core.first(seq__80860);\nvar seq__80860__$1 = cljs.core.next(seq__80860);\nvar _ = first__80861;\nvar first__80861__$1 = cljs.core.first(seq__80860__$1);\nvar seq__80860__$2 = cljs.core.next(seq__80860__$1);\nvar field = first__80861__$1;\nvar args = seq__80860__$2;\nvar field__$1 = (function (){var G__80862 = metabase.mbql.normalize.canonicalize_implicit_field_id(field);\nif(cljs.core.truth_(metabase.mbql.util.is_clause_QMARK_(new cljs.core.Keyword(null,\"field\",\"field\",-1302436500),field))){\nreturn metabase.mbql.util.update_field_options.cljs$core$IFn$_invoke$arity$variadic(G__80862,cljs.core.dissoc,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"temporal-unit\",\"temporal-unit\",-1892306358)], 0));\n} else {\nreturn G__80862;\n}\n})();\nreturn cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"time-interval\",\"time-interval\",704622015),field__$1], null),args);\n}));\nmetabase.mbql.normalize.canonicalize_simple_filter_clause = (function metabase$mbql$normalize$canonicalize_simple_filter_clause(p__80866){\nvar vec__80867 = p__80866;\nvar seq__80868 = cljs.core.seq(vec__80867);\nvar first__80869 = cljs.core.first(seq__80868);\nvar seq__80868__$1 = cljs.core.next(seq__80868);\nvar filter_name = first__80869;\nvar first__80869__$1 = cljs.core.first(seq__80868__$1);\nvar seq__80868__$2 = cljs.core.next(seq__80868__$1);\nvar first_arg = first__80869__$1;\nvar other_args = seq__80868__$2;\nreturn cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [filter_name,metabase.mbql.normalize.canonicalize_implicit_field_id(first_arg)], null),cljs.core.map.cljs$core$IFn$_invoke$arity$2(metabase.mbql.normalize.canonicalize_mbql_clause,other_args));\n});\nvar seq__80871_81345 = cljs.core.seq(new cljs.core.PersistentVector(null, 15, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"starts-with\",\"starts-with\",366503009),new cljs.core.Keyword(null,\"ends-with\",\"ends-with\",-456791011),new cljs.core.Keyword(null,\"contains\",\"contains\",676899812),new cljs.core.Keyword(null,\"does-not-contain\",\"does-not-contain\",-274946853),new cljs.core.Keyword(null,\"=\",\"=\",1152933628),new cljs.core.Keyword(null,\"!=\",\"!=\",-1841737356),new cljs.core.Keyword(null,\"<\",\"<\",-646864291),new cljs.core.Keyword(null,\"<=\",\"<=\",-395636158),new cljs.core.Keyword(null,\">\",\">\",-555517146),new cljs.core.Keyword(null,\">=\",\">=\",-623615505),new cljs.core.Keyword(null,\"is-empty\",\"is-empty\",-1040302908),new cljs.core.Keyword(null,\"not-empty\",\"not-empty\",388922063),new cljs.core.Keyword(null,\"is-null\",\"is-null\",-1997050930),new cljs.core.Keyword(null,\"not-null\",\"not-null\",-1326718535),new cljs.core.Keyword(null,\"between\",\"between\",1131099276)], null));\nvar chunk__80872_81346 = null;\nvar count__80873_81347 = (0);\nvar i__80874_81348 = (0);\nwhile(true){\nif((i__80874_81348 < count__80873_81347)){\nvar clause_name_81349 = chunk__80872_81346.cljs$core$IIndexed$_nth$arity$2(null,i__80874_81348);\nmetabase.mbql.normalize.canonicalize_mbql_clause.cljs$core$IMultiFn$_add_method$arity$3(null,clause_name_81349,((function (seq__80871_81345,chunk__80872_81346,count__80873_81347,i__80874_81348,clause_name_81349){\nreturn (function (clause){\nreturn metabase.mbql.normalize.canonicalize_simple_filter_clause(clause);\n});})(seq__80871_81345,chunk__80872_81346,count__80873_81347,i__80874_81348,clause_name_81349))\n);\n\n\nvar G__81350 = seq__80871_81345;\nvar G__81351 = chunk__80872_81346;\nvar G__81352 = count__80873_81347;\nvar G__81353 = (i__80874_81348 + (1));\nseq__80871_81345 = G__81350;\nchunk__80872_81346 = G__81351;\ncount__80873_81347 = G__81352;\ni__80874_81348 = G__81353;\ncontinue;\n} else {\nvar temp__5804__auto___81354 = cljs.core.seq(seq__80871_81345);\nif(temp__5804__auto___81354){\nvar seq__80871_81355__$1 = temp__5804__auto___81354;\nif(cljs.core.chunked_seq_QMARK_(seq__80871_81355__$1)){\nvar c__5568__auto___81356 = cljs.core.chunk_first(seq__80871_81355__$1);\nvar G__81357 = cljs.core.chunk_rest(seq__80871_81355__$1);\nvar G__81358 = c__5568__auto___81356;\nvar G__81359 = cljs.core.count(c__5568__auto___81356);\nvar G__81360 = (0);\nseq__80871_81345 = G__81357;\nchunk__80872_81346 = G__81358;\ncount__80873_81347 = G__81359;\ni__80874_81348 = G__81360;\ncontinue;\n} else {\nvar clause_name_81361 = cljs.core.first(seq__80871_81355__$1);\nmetabase.mbql.normalize.canonicalize_mbql_clause.cljs$core$IMultiFn$_add_method$arity$3(null,clause_name_81361,((function (seq__80871_81345,chunk__80872_81346,count__80873_81347,i__80874_81348,clause_name_81361,seq__80871_81355__$1,temp__5804__auto___81354){\nreturn (function (clause){\nreturn metabase.mbql.normalize.canonicalize_simple_filter_clause(clause);\n});})(seq__80871_81345,chunk__80872_81346,count__80873_81347,i__80874_81348,clause_name_81361,seq__80871_81355__$1,temp__5804__auto___81354))\n);\n\n\nvar G__81362 = cljs.core.next(seq__80871_81355__$1);\nvar G__81363 = null;\nvar G__81364 = (0);\nvar G__81365 = (0);\nseq__80871_81345 = G__81362;\nchunk__80872_81346 = G__81363;\ncount__80873_81347 = G__81364;\ni__80874_81348 = G__81365;\ncontinue;\n}\n} else {\n}\n}\nbreak;\n}\nmetabase.mbql.normalize.canonicalize_mbql_clause.cljs$core$IMultiFn$_add_method$arity$3(null,new cljs.core.Keyword(null,\"rows\",\"rows\",850049680),(function (_){\nreturn null;\n}));\nmetabase.mbql.normalize.canonicalize_mbql_clause.cljs$core$IMultiFn$_add_method$arity$3(null,new cljs.core.Keyword(null,\"aggregation-options\",\"aggregation-options\",-1904917550),(function (p__80897){\nvar vec__80898 = p__80897;\nvar _ = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__80898,(0),null);\nvar wrapped_aggregation_clause = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__80898,(1),null);\nvar options = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__80898,(2),null);\nreturn new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"aggregation-options\",\"aggregation-options\",-1904917550),metabase.mbql.normalize.canonicalize_mbql_clause.cljs$core$IFn$_invoke$arity$1(wrapped_aggregation_clause),options], null);\n}));\nmetabase.mbql.normalize.canonicalize_mbql_clause.cljs$core$IMultiFn$_add_method$arity$3(null,new cljs.core.Keyword(null,\"named\",\"named\",-422393479),(function (p__80903){\nvar vec__80904 = p__80903;\nvar seq__80905 = cljs.core.seq(vec__80904);\nvar first__80906 = cljs.core.first(seq__80905);\nvar seq__80905__$1 = cljs.core.next(seq__80905);\nvar _ = first__80906;\nvar first__80906__$1 = cljs.core.first(seq__80905__$1);\nvar seq__80905__$2 = cljs.core.next(seq__80905__$1);\nvar wrapped_ag = first__80906__$1;\nvar first__80906__$2 = cljs.core.first(seq__80905__$2);\nvar seq__80905__$3 = cljs.core.next(seq__80905__$2);\nvar expr_name = first__80906__$2;\nvar more = seq__80905__$3;\nreturn metabase.mbql.normalize.canonicalize_mbql_clause.cljs$core$IFn$_invoke$arity$1(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"aggregation-options\",\"aggregation-options\",-1904917550),metabase.mbql.normalize.canonicalize_mbql_clause.cljs$core$IFn$_invoke$arity$1(wrapped_ag),(function (){var vec__80909 = more;\nvar map__80912 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__80909,(0),null);\nvar map__80912__$1 = cljs.core.__destructure_map(map__80912);\nvar use_as_display_name_QMARK_ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__80912__$1,new cljs.core.Keyword(null,\"use-as-display-name?\",\"use-as-display-name?\",686752941));\nif(use_as_display_name_QMARK_ === false){\nreturn new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"name\",\"name\",1843675177),expr_name], null);\n} else {\nreturn new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"display-name\",\"display-name\",694513143),expr_name], null);\n}\n})()], null));\n}));\nmetabase.mbql.normalize.canonicalize_count_clause = (function metabase$mbql$normalize$canonicalize_count_clause(p__80918){\nvar vec__80922 = p__80918;\nvar clause_name = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__80922,(0),null);\nvar field = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__80922,(1),null);\nif(cljs.core.truth_(field)){\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [clause_name,metabase.mbql.normalize.canonicalize_implicit_field_id(field)], null);\n} else {\nreturn new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [clause_name], null);\n}\n});\nvar seq__80926_81367 = cljs.core.seq(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"count\",\"count\",2139924085),new cljs.core.Keyword(null,\"cum-count\",\"cum-count\",-1964431543)], null));\nvar chunk__80927_81368 = null;\nvar count__80928_81369 = (0);\nvar i__80929_81370 = (0);\nwhile(true){\nif((i__80929_81370 < count__80928_81369)){\nvar clause_name_81371 = chunk__80927_81368.cljs$core$IIndexed$_nth$arity$2(null,i__80929_81370);\nmetabase.mbql.normalize.canonicalize_mbql_clause.cljs$core$IMultiFn$_add_method$arity$3(null,clause_name_81371,((function (seq__80926_81367,chunk__80927_81368,count__80928_81369,i__80929_81370,clause_name_81371){\nreturn (function (clause){\nreturn metabase.mbql.normalize.canonicalize_count_clause(clause);\n});})(seq__80926_81367,chunk__80927_81368,count__80928_81369,i__80929_81370,clause_name_81371))\n);\n\n\nvar G__81372 = seq__80926_81367;\nvar G__81373 = chunk__80927_81368;\nvar G__81374 = count__80928_81369;\nvar G__81375 = (i__80929_81370 + (1));\nseq__80926_81367 = G__81372;\nchunk__80927_81368 = G__81373;\ncount__80928_81369 = G__81374;\ni__80929_81370 = G__81375;\ncontinue;\n} else {\nvar temp__5804__auto___81377 = cljs.core.seq(seq__80926_81367);\nif(temp__5804__auto___81377){\nvar seq__80926_81378__$1 = temp__5804__auto___81377;\nif(cljs.core.chunked_seq_QMARK_(seq__80926_81378__$1)){\nvar c__5568__auto___81379 = cljs.core.chunk_first(seq__80926_81378__$1);\nvar G__81380 = cljs.core.chunk_rest(seq__80926_81378__$1);\nvar G__81381 = c__5568__auto___81379;\nvar G__81382 = cljs.core.count(c__5568__auto___81379);\nvar G__81383 = (0);\nseq__80926_81367 = G__81380;\nchunk__80927_81368 = G__81381;\ncount__80928_81369 = G__81382;\ni__80929_81370 = G__81383;\ncontinue;\n} else {\nvar clause_name_81384 = cljs.core.first(seq__80926_81378__$1);\nmetabase.mbql.normalize.canonicalize_mbql_clause.cljs$core$IMultiFn$_add_method$arity$3(null,clause_name_81384,((function (seq__80926_81367,chunk__80927_81368,count__80928_81369,i__80929_81370,clause_name_81384,seq__80926_81378__$1,temp__5804__auto___81377){\nreturn (function (clause){\nreturn metabase.mbql.normalize.canonicalize_count_clause(clause);\n});})(seq__80926_81367,chunk__80927_81368,count__80928_81369,i__80929_81370,clause_name_81384,seq__80926_81378__$1,temp__5804__auto___81377))\n);\n\n\nvar G__81385 = cljs.core.next(seq__80926_81378__$1);\nvar G__81386 = null;\nvar G__81387 = (0);\nvar G__81388 = (0);\nseq__80926_81367 = G__81385;\nchunk__80927_81368 = G__81386;\ncount__80928_81369 = G__81387;\ni__80929_81370 = G__81388;\ncontinue;\n}\n} else {\n}\n}\nbreak;\n}\nmetabase.mbql.normalize.canonicalize_simple_aggregation_with_field = (function metabase$mbql$normalize$canonicalize_simple_aggregation_with_field(p__80953){\nvar vec__80955 = p__80953;\nvar clause_name = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__80955,(0),null);\nvar field = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__80955,(1),null);\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [clause_name,metabase.mbql.normalize.canonicalize_implicit_field_id(field)], null);\n});\nvar seq__80962_81389 = cljs.core.seq(new cljs.core.PersistentVector(null, 9, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"avg\",\"avg\",197406200),new cljs.core.Keyword(null,\"cum-sum\",\"cum-sum\",2064902349),new cljs.core.Keyword(null,\"distinct\",\"distinct\",-1788879121),new cljs.core.Keyword(null,\"stddev\",\"stddev\",-865474939),new cljs.core.Keyword(null,\"sum\",\"sum\",136986814),new cljs.core.Keyword(null,\"min\",\"min\",444991522),new cljs.core.Keyword(null,\"max\",\"max\",61366548),new cljs.core.Keyword(null,\"median\",\"median\",569566131),new cljs.core.Keyword(null,\"var\",\"var\",-769682797)], null));\nvar chunk__80963_81390 = null;\nvar count__80964_81391 = (0);\nvar i__80965_81392 = (0);\nwhile(true){\nif((i__80965_81392 < count__80964_81391)){\nvar clause_name_81393 = chunk__80963_81390.cljs$core$IIndexed$_nth$arity$2(null,i__80965_81392);\nmetabase.mbql.normalize.canonicalize_mbql_clause.cljs$core$IMultiFn$_add_method$arity$3(null,clause_name_81393,((function (seq__80962_81389,chunk__80963_81390,count__80964_81391,i__80965_81392,clause_name_81393){\nreturn (function (clause){\nreturn metabase.mbql.normalize.canonicalize_simple_aggregation_with_field(clause);\n});})(seq__80962_81389,chunk__80963_81390,count__80964_81391,i__80965_81392,clause_name_81393))\n);\n\n\nvar G__81394 = seq__80962_81389;\nvar G__81395 = chunk__80963_81390;\nvar G__81396 = count__80964_81391;\nvar G__81397 = (i__80965_81392 + (1));\nseq__80962_81389 = G__81394;\nchunk__80963_81390 = G__81395;\ncount__80964_81391 = G__81396;\ni__80965_81392 = G__81397;\ncontinue;\n} else {\nvar temp__5804__auto___81398 = cljs.core.seq(seq__80962_81389);\nif(temp__5804__auto___81398){\nvar seq__80962_81399__$1 = temp__5804__auto___81398;\nif(cljs.core.chunked_seq_QMARK_(seq__80962_81399__$1)){\nvar c__5568__auto___81400 = cljs.core.chunk_first(seq__80962_81399__$1);\nvar G__81401 = cljs.core.chunk_rest(seq__80962_81399__$1);\nvar G__81402 = c__5568__auto___81400;\nvar G__81403 = cljs.core.count(c__5568__auto___81400);\nvar G__81404 = (0);\nseq__80962_81389 = G__81401;\nchunk__80963_81390 = G__81402;\ncount__80964_81391 = G__81403;\ni__80965_81392 = G__81404;\ncontinue;\n} else {\nvar clause_name_81405 = cljs.core.first(seq__80962_81399__$1);\nmetabase.mbql.normalize.canonicalize_mbql_clause.cljs$core$IMultiFn$_add_method$arity$3(null,clause_name_81405,((function (seq__80962_81389,chunk__80963_81390,count__80964_81391,i__80965_81392,clause_name_81405,seq__80962_81399__$1,temp__5804__auto___81398){\nreturn (function (clause){\nreturn metabase.mbql.normalize.canonicalize_simple_aggregation_with_field(clause);\n});})(seq__80962_81389,chunk__80963_81390,count__80964_81391,i__80965_81392,clause_name_81405,seq__80962_81399__$1,temp__5804__auto___81398))\n);\n\n\nvar G__81406 = cljs.core.next(seq__80962_81399__$1);\nvar G__81407 = null;\nvar G__81408 = (0);\nvar G__81409 = (0);\nseq__80962_81389 = G__81406;\nchunk__80963_81390 = G__81407;\ncount__80964_81391 = G__81408;\ni__80965_81392 = G__81409;\ncontinue;\n}\n} else {\n}\n}\nbreak;\n}\nmetabase.mbql.normalize.canonicalize_mbql_clause.cljs$core$IMultiFn$_add_method$arity$3(null,new cljs.core.Keyword(null,\"percentile\",\"percentile\",-601188752),(function (p__80994){\nvar vec__80995 = p__80994;\nvar _ = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__80995,(0),null);\nvar field = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__80995,(1),null);\nvar percentile = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__80995,(2),null);\nreturn new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"percentile\",\"percentile\",-601188752),metabase.mbql.normalize.canonicalize_implicit_field_id(field),percentile], null);\n}));\nmetabase.mbql.normalize.canonicalize_filtered_aggregation_clause = (function metabase$mbql$normalize$canonicalize_filtered_aggregation_clause(p__81002){\nvar vec__81003 = p__81002;\nvar clause_name = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__81003,(0),null);\nvar filter_subclause = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__81003,(1),null);\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [clause_name,metabase.mbql.normalize.canonicalize_mbql_clause.cljs$core$IFn$_invoke$arity$1(filter_subclause)], null);\n});\nvar seq__81007_81410 = cljs.core.seq(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"share\",\"share\",-589433933),new cljs.core.Keyword(null,\"count-where\",\"count-where\",385407720)], null));\nvar chunk__81008_81411 = null;\nvar count__81009_81412 = (0);\nvar i__81010_81413 = (0);\nwhile(true){\nif((i__81010_81413 < count__81009_81412)){\nvar clause_name_81414 = chunk__81008_81411.cljs$core$IIndexed$_nth$arity$2(null,i__81010_81413);\nmetabase.mbql.normalize.canonicalize_mbql_clause.cljs$core$IMultiFn$_add_method$arity$3(null,clause_name_81414,((function (seq__81007_81410,chunk__81008_81411,count__81009_81412,i__81010_81413,clause_name_81414){\nreturn (function (clause){\nreturn metabase.mbql.normalize.canonicalize_filtered_aggregation_clause(clause);\n});})(seq__81007_81410,chunk__81008_81411,count__81009_81412,i__81010_81413,clause_name_81414))\n);\n\n\nvar G__81415 = seq__81007_81410;\nvar G__81416 = chunk__81008_81411;\nvar G__81417 = count__81009_81412;\nvar G__81418 = (i__81010_81413 + (1));\nseq__81007_81410 = G__81415;\nchunk__81008_81411 = G__81416;\ncount__81009_81412 = G__81417;\ni__81010_81413 = G__81418;\ncontinue;\n} else {\nvar temp__5804__auto___81419 = cljs.core.seq(seq__81007_81410);\nif(temp__5804__auto___81419){\nvar seq__81007_81421__$1 = temp__5804__auto___81419;\nif(cljs.core.chunked_seq_QMARK_(seq__81007_81421__$1)){\nvar c__5568__auto___81423 = cljs.core.chunk_first(seq__81007_81421__$1);\nvar G__81424 = cljs.core.chunk_rest(seq__81007_81421__$1);\nvar G__81425 = c__5568__auto___81423;\nvar G__81426 = cljs.core.count(c__5568__auto___81423);\nvar G__81427 = (0);\nseq__81007_81410 = G__81424;\nchunk__81008_81411 = G__81425;\ncount__81009_81412 = G__81426;\ni__81010_81413 = G__81427;\ncontinue;\n} else {\nvar clause_name_81428 = cljs.core.first(seq__81007_81421__$1);\nmetabase.mbql.normalize.canonicalize_mbql_clause.cljs$core$IMultiFn$_add_method$arity$3(null,clause_name_81428,((function (seq__81007_81410,chunk__81008_81411,count__81009_81412,i__81010_81413,clause_name_81428,seq__81007_81421__$1,temp__5804__auto___81419){\nreturn (function (clause){\nreturn metabase.mbql.normalize.canonicalize_filtered_aggregation_clause(clause);\n});})(seq__81007_81410,chunk__81008_81411,count__81009_81412,i__81010_81413,clause_name_81428,seq__81007_81421__$1,temp__5804__auto___81419))\n);\n\n\nvar G__81432 = cljs.core.next(seq__81007_81421__$1);\nvar G__81433 = null;\nvar G__81434 = (0);\nvar G__81435 = (0);\nseq__81007_81410 = G__81432;\nchunk__81008_81411 = G__81433;\ncount__81009_81412 = G__81434;\ni__81010_81413 = G__81435;\ncontinue;\n}\n} else {\n}\n}\nbreak;\n}\nmetabase.mbql.normalize.canonicalize_mbql_clause.cljs$core$IMultiFn$_add_method$arity$3(null,new cljs.core.Keyword(null,\"sum-where\",\"sum-where\",2135348428),(function (p__81027){\nvar vec__81028 = p__81027;\nvar _ = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__81028,(0),null);\nvar field = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__81028,(1),null);\nvar filter_subclause = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__81028,(2),null);\nreturn new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"sum-where\",\"sum-where\",2135348428),metabase.mbql.normalize.canonicalize_mbql_clause.cljs$core$IFn$_invoke$arity$1(field),metabase.mbql.normalize.canonicalize_mbql_clause.cljs$core$IFn$_invoke$arity$1(filter_subclause)], null);\n}));\nmetabase.mbql.normalize.canonicalize_mbql_clause.cljs$core$IMultiFn$_add_method$arity$3(null,new cljs.core.Keyword(null,\"case\",\"case\",1143702196),(function (p__81033){\nvar vec__81034 = p__81033;\nvar _ = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__81034,(0),null);\nvar clauses = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__81034,(1),null);\nvar options = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__81034,(2),null);\nif(cljs.core.truth_(options)){\nreturn cljs.core.conj.cljs$core$IFn$_invoke$arity$2(metabase.mbql.normalize.canonicalize_mbql_clause.cljs$core$IFn$_invoke$arity$1(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"case\",\"case\",1143702196),clauses], null)),metabase.mbql.normalize.normalize_tokens.cljs$core$IFn$_invoke$arity$variadic(options,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"ignore-path\",\"ignore-path\",944069061)], 0)));\n} else {\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"case\",\"case\",1143702196),cljs.core.vec((function (){var iter__5523__auto__ = (function metabase$mbql$normalize$iter__81040(s__81041){\nreturn (new cljs.core.LazySeq(null,(function (){\nvar s__81041__$1 = s__81041;\nwhile(true){\nvar temp__5804__auto__ = cljs.core.seq(s__81041__$1);\nif(temp__5804__auto__){\nvar s__81041__$2 = temp__5804__auto__;\nif(cljs.core.chunked_seq_QMARK_(s__81041__$2)){\nvar c__5521__auto__ = cljs.core.chunk_first(s__81041__$2);\nvar size__5522__auto__ = cljs.core.count(c__5521__auto__);\nvar b__81043 = cljs.core.chunk_buffer(size__5522__auto__);\nif((function (){var i__81042 = (0);\nwhile(true){\nif((i__81042 < size__5522__auto__)){\nvar vec__81046 = cljs.core._nth(c__5521__auto__,i__81042);\nvar pred = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__81046,(0),null);\nvar expr = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__81046,(1),null);\ncljs.core.chunk_append(b__81043,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [metabase.mbql.normalize.canonicalize_mbql_clause.cljs$core$IFn$_invoke$arity$1(pred),metabase.mbql.normalize.canonicalize_mbql_clause.cljs$core$IFn$_invoke$arity$1(expr)], null));\n\nvar G__81439 = (i__81042 + (1));\ni__81042 = G__81439;\ncontinue;\n} else {\nreturn true;\n}\nbreak;\n}\n})()){\nreturn cljs.core.chunk_cons(cljs.core.chunk(b__81043),metabase$mbql$normalize$iter__81040(cljs.core.chunk_rest(s__81041__$2)));\n} else {\nreturn cljs.core.chunk_cons(cljs.core.chunk(b__81043),null);\n}\n} else {\nvar vec__81050 = cljs.core.first(s__81041__$2);\nvar pred = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__81050,(0),null);\nvar expr = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__81050,(1),null);\nreturn cljs.core.cons(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [metabase.mbql.normalize.canonicalize_mbql_clause.cljs$core$IFn$_invoke$arity$1(pred),metabase.mbql.normalize.canonicalize_mbql_clause.cljs$core$IFn$_invoke$arity$1(expr)], null),metabase$mbql$normalize$iter__81040(cljs.core.rest(s__81041__$2)));\n}\n} else {\nreturn null;\n}\nbreak;\n}\n}),null,null));\n});\nreturn iter__5523__auto__(clauses);\n})())], null);\n}\n}));\nmetabase.mbql.normalize.canonicalize_mbql_clause.cljs$core$IMultiFn$_add_method$arity$3(null,new cljs.core.Keyword(null,\"substring\",\"substring\",1140866276),(function (p__81054){\nvar vec__81055 = p__81054;\nvar seq__81056 = cljs.core.seq(vec__81055);\nvar first__81057 = cljs.core.first(seq__81056);\nvar seq__81056__$1 = cljs.core.next(seq__81056);\nvar _ = first__81057;\nvar first__81057__$1 = cljs.core.first(seq__81056__$1);\nvar seq__81056__$2 = cljs.core.next(seq__81056__$1);\nvar arg = first__81057__$1;\nvar first__81057__$2 = cljs.core.first(seq__81056__$2);\nvar seq__81056__$3 = cljs.core.next(seq__81056__$2);\nvar start = first__81057__$2;\nvar more = seq__81056__$3;\nreturn cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"substring\",\"substring\",1140866276),metabase.mbql.normalize.canonicalize_mbql_clause.cljs$core$IFn$_invoke$arity$1(arg),((cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2((0),start))?(1):metabase.mbql.normalize.canonicalize_mbql_clause.cljs$core$IFn$_invoke$arity$1(start))], null),cljs.core.map.cljs$core$IFn$_invoke$arity$2(metabase.mbql.normalize.canonicalize_mbql_clause,more));\n}));\n/**\n * Walk an `mbql-query` an canonicalize non-top-level clauses like `:fk->`.\n */\nmetabase.mbql.normalize.canonicalize_mbql_clauses = (function metabase$mbql$normalize$canonicalize_mbql_clauses(mbql_query){\nreturn clojure.walk.prewalk((function (x){\nif(cljs.core.map_QMARK_(x)){\nreturn medley.core.map_vals.cljs$core$IFn$_invoke$arity$2(metabase.mbql.normalize.canonicalize_mbql_clauses,x);\n} else {\nif(cljs.core.not(metabase.mbql.normalize.mbql_clause_QMARK_(x))){\nreturn x;\n} else {\ntry{return metabase.mbql.normalize.canonicalize_mbql_clause.cljs$core$IFn$_invoke$arity$1(x);\n}catch (e81063){if((e81063 instanceof Error)){\nvar e = e81063;\nvar level__47389__auto___81443 = metabase.util.log.glogi_level(new cljs.core.Keyword(null,\"error\",\"error\",-978969032));\nvar logger__47390__auto___81444 = \"metabase.mbql.normalize\";\nif(cljs.core.truth_(metabase.util.log.is_loggable_QMARK_(logger__47390__auto___81444,level__47389__auto___81443))){\nvar x__47391__auto___81446 = metabase.shared.util.i18n.js_i18n(\"Invalid clause:\");\nif((x__47391__auto___81446 instanceof Error)){\nlambdaisland.glogi.log.cljs$core$IFn$_invoke$arity$4(logger__47390__auto___81444,level__47389__auto___81443,cljs.core.print_str.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([x], 0)),x__47391__auto___81446);\n} else {\nlambdaisland.glogi.log.cljs$core$IFn$_invoke$arity$4(logger__47390__auto___81444,level__47389__auto___81443,cljs.core.print_str.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([x__47391__auto___81446,x], 0)),null);\n}\n} else {\n}\n\nthrow cljs.core.ex_info.cljs$core$IFn$_invoke$arity$3(metabase.shared.util.i18n.js_i18n.cljs$core$IFn$_invoke$arity$variadic(\"Invalid MBQL clause: {0}\",cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([cljs.core.ex_message(e)], 0)),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"clause\",\"clause\",1479668060),x], null),e);\n} else {\nthrow e81063;\n\n}\n}\n}\n}\n}),mbql_query);\n});\n/**\n * Convert old MBQL 95 single-aggregations like `{:aggregation :count}` or `{:aggregation [:count]}` to MBQL 98+\n *   multiple-aggregation syntax (e.g. `{:aggregation [[:count]]}`).\n */\nmetabase.mbql.normalize.wrap_single_aggregations = (function metabase$mbql$normalize$wrap_single_aggregations(aggregations){\nreturn (function metabase$mbql$normalize$wrap_single_aggregations_$_replace_81072(_AMPERSAND_parents,_AMPERSAND_match){\ntry{if(cljs.core.truth_((function (){var fexpr__81105 = metabase.mbql.util.match.impl.match_with_pred_or_class(cljs.core.seq_QMARK_);\nreturn (fexpr__81105.cljs$core$IFn$_invoke$arity$1 ? fexpr__81105.cljs$core$IFn$_invoke$arity$1(_AMPERSAND_match) : fexpr__81105.call(null,_AMPERSAND_match));\n})())){\nreturn metabase$mbql$normalize$wrap_single_aggregations_$_replace_81072(_AMPERSAND_parents,cljs.core.vec(_AMPERSAND_match));\n} else {\nthrow cljs.core.match.backtrack;\n\n}\n}catch (e81091){if((e81091 instanceof Error)){\nvar e__62528__auto__ = e81091;\nif((e__62528__auto__ === cljs.core.match.backtrack)){\ntry{if(cljs.core.truth_((function (){var fexpr__81104 = metabase.mbql.util.match.impl.match_with_pred_or_class(cljs.core.keyword_QMARK_);\nreturn (fexpr__81104.cljs$core$IFn$_invoke$arity$1 ? fexpr__81104.cljs$core$IFn$_invoke$arity$1(_AMPERSAND_match) : fexpr__81104.call(null,_AMPERSAND_match));\n})())){\nreturn new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [_AMPERSAND_match], null)], null);\n} else {\nthrow cljs.core.match.backtrack;\n\n}\n}catch (e81093){if((e81093 instanceof Error)){\nvar e__62528__auto____$1 = e81093;\nif((e__62528__auto____$1 === cljs.core.match.backtrack)){\ntry{if(((cljs.core.vector_QMARK_(_AMPERSAND_match)) && ((cljs.core.count(_AMPERSAND_match) >= (2))))){\ntry{var _AMPERSAND_match_left__81082 = cljs.core.subvec.cljs$core$IFn$_invoke$arity$3(_AMPERSAND_match,(0),(2));\nif(((cljs.core.vector_QMARK_(_AMPERSAND_match_left__81082)) && ((cljs.core.count(_AMPERSAND_match_left__81082) === (2))))){\ntry{var _AMPERSAND_match_left__81082_0__81084 = cljs.core.nth.cljs$core$IFn$_invoke$arity$2(_AMPERSAND_match_left__81082,(0));\nif(cljs.core.truth_(cljs.core.every_pred.cljs$core$IFn$_invoke$arity$2(cljs.core.keyword_QMARK_,cljs.core.complement(new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,\"*\",\"*\",-1294732318),null,new cljs.core.Keyword(null,\"-\",\"-\",-2112348439),null,new cljs.core.Keyword(null,\"/\",\"/\",1282502798),null,new cljs.core.Keyword(null,\"+\",\"+\",1913524883),null,new cljs.core.Keyword(null,\"named\",\"named\",-422393479),null], null), null)))(_AMPERSAND_match_left__81082_0__81084))){\ntry{var _AMPERSAND_match_left__81082_1__81085 = cljs.core.nth.cljs$core$IFn$_invoke$arity$2(_AMPERSAND_match_left__81082,(1));\nif(cljs.core.truth_(metabase.mbql.normalize.aggregation_subclause_QMARK_(_AMPERSAND_match_left__81082_1__81085))){\nreturn cljs.core.vec(cljs.core.reduce.cljs$core$IFn$_invoke$arity$2(cljs.core.concat,cljs.core.map.cljs$core$IFn$_invoke$arity$2(metabase.mbql.normalize.wrap_single_aggregations,aggregations)));\n} else {\nthrow cljs.core.match.backtrack;\n\n}\n}catch (e81103){if((e81103 instanceof Error)){\nvar e__62528__auto____$2 = e81103;\nif((e__62528__auto____$2 === cljs.core.match.backtrack)){\nthrow cljs.core.match.backtrack;\n} else {\nthrow e__62528__auto____$2;\n}\n} else {\nthrow e81103;\n\n}\n}} else {\nthrow cljs.core.match.backtrack;\n\n}\n}catch (e81102){if((e81102 instanceof Error)){\nvar e__62528__auto____$2 = e81102;\nif((e__62528__auto____$2 === cljs.core.match.backtrack)){\nthrow cljs.core.match.backtrack;\n} else {\nthrow e__62528__auto____$2;\n}\n} else {\nthrow e81102;\n\n}\n}} else {\nthrow cljs.core.match.backtrack;\n\n}\n}catch (e81101){if((e81101 instanceof Error)){\nvar e__62528__auto____$2 = e81101;\nif((e__62528__auto____$2 === cljs.core.match.backtrack)){\nthrow cljs.core.match.backtrack;\n} else {\nthrow e__62528__auto____$2;\n}\n} else {\nthrow e81101;\n\n}\n}} else {\nthrow cljs.core.match.backtrack;\n\n}\n}catch (e81094){if((e81094 instanceof Error)){\nvar e__62528__auto____$2 = e81094;\nif((e__62528__auto____$2 === cljs.core.match.backtrack)){\ntry{if(((cljs.core.vector_QMARK_(_AMPERSAND_match)) && ((cljs.core.count(_AMPERSAND_match) >= (1))))){\ntry{var _AMPERSAND_match_left__81087 = cljs.core.subvec.cljs$core$IFn$_invoke$arity$3(_AMPERSAND_match,(0),(1));\nif(((cljs.core.vector_QMARK_(_AMPERSAND_match_left__81087)) && ((cljs.core.count(_AMPERSAND_match_left__81087) === (1))))){\ntry{var _AMPERSAND_match_left__81087_0__81089 = cljs.core.nth.cljs$core$IFn$_invoke$arity$2(_AMPERSAND_match_left__81087,(0));\nif((_AMPERSAND_match_left__81087_0__81089 instanceof cljs.core.Keyword)){\nreturn new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [_AMPERSAND_match], null);\n} else {\nthrow cljs.core.match.backtrack;\n\n}\n}catch (e81097){if((e81097 instanceof Error)){\nvar e__62528__auto____$3 = e81097;\nif((e__62528__auto____$3 === cljs.core.match.backtrack)){\nthrow cljs.core.match.backtrack;\n} else {\nthrow e__62528__auto____$3;\n}\n} else {\nthrow e81097;\n\n}\n}} else {\nthrow cljs.core.match.backtrack;\n\n}\n}catch (e81096){if((e81096 instanceof Error)){\nvar e__62528__auto____$3 = e81096;\nif((e__62528__auto____$3 === cljs.core.match.backtrack)){\nthrow cljs.core.match.backtrack;\n} else {\nthrow e__62528__auto____$3;\n}\n} else {\nthrow e81096;\n\n}\n}} else {\nthrow cljs.core.match.backtrack;\n\n}\n}catch (e81095){if((e81095 instanceof Error)){\nvar e__62528__auto____$3 = e81095;\nif((e__62528__auto____$3 === cljs.core.match.backtrack)){\nreturn _AMPERSAND_match;\n} else {\nthrow e__62528__auto____$3;\n}\n} else {\nthrow e81095;\n\n}\n}} else {\nthrow e__62528__auto____$2;\n}\n} else {\nthrow e81094;\n\n}\n}} else {\nthrow e__62528__auto____$1;\n}\n} else {\nthrow e81093;\n\n}\n}} else {\nthrow e__62528__auto__;\n}\n} else {\nthrow e81091;\n\n}\n}})(cljs.core.PersistentVector.EMPTY,aggregations);\n});\n/**\n * Canonicalize subclauses (see above) and make sure `:aggregation` is a sequence of clauses instead of a single\n *   clause.\n */\nmetabase.mbql.normalize.canonicalize_aggregations = (function metabase$mbql$normalize$canonicalize_aggregations(aggregations){\nreturn cljs.core.vec(cljs.core.keep.cljs$core$IFn$_invoke$arity$2(metabase.mbql.normalize.canonicalize_mbql_clauses,metabase.mbql.normalize.wrap_single_aggregations(aggregations)));\n});\nmetabase.mbql.normalize.canonicalize_breakouts = (function metabase$mbql$normalize$canonicalize_breakouts(breakouts){\nwhile(true){\nif(cljs.core.truth_(metabase.mbql.normalize.mbql_clause_QMARK_(breakouts))){\nvar G__81449 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [breakouts], null);\nbreakouts = G__81449;\ncontinue;\n} else {\nreturn cljs.core.not_empty(cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(metabase.mbql.normalize.wrap_implicit_field_id,breakouts));\n}\nbreak;\n}\n});\n/**\n * Make sure order by clauses like `[:asc 10]` get `:field-id` added where appropriate, e.g. `[:asc [:field-id 10]]`\n */\nmetabase.mbql.normalize.canonicalize_order_by = (function metabase$mbql$normalize$canonicalize_order_by(clauses){\nreturn (function metabase$mbql$normalize$canonicalize_order_by_$_replace_81113(_AMPERSAND_parents,_AMPERSAND_match){\ntry{if(cljs.core.truth_((function (){var fexpr__81147 = metabase.mbql.util.match.impl.match_with_pred_or_class(cljs.core.seq_QMARK_);\nreturn (fexpr__81147.cljs$core$IFn$_invoke$arity$1 ? fexpr__81147.cljs$core$IFn$_invoke$arity$1(_AMPERSAND_match) : fexpr__81147.call(null,_AMPERSAND_match));\n})())){\nreturn metabase$mbql$normalize$canonicalize_order_by_$_replace_81113(_AMPERSAND_parents,cljs.core.vec(_AMPERSAND_match));\n} else {\nthrow cljs.core.match.backtrack;\n\n}\n}catch (e81121){if((e81121 instanceof Error)){\nvar e__62528__auto__ = e81121;\nif((e__62528__auto__ === cljs.core.match.backtrack)){\ntry{if(((cljs.core.vector_QMARK_(_AMPERSAND_match)) && ((cljs.core.count(_AMPERSAND_match) === 2)))){\ntry{var _AMPERSAND_match_1__81118 = cljs.core.nth.cljs$core$IFn$_invoke$arity$2(_AMPERSAND_match,(1));\nif(cljs.core.keyword_identical_QMARK_(_AMPERSAND_match_1__81118,new cljs.core.Keyword(null,\"asc\",\"asc\",356854569))){\nvar field = cljs.core.nth.cljs$core$IFn$_invoke$arity$2(_AMPERSAND_match,(0));\nreturn metabase$mbql$normalize$canonicalize_order_by_$_replace_81113(_AMPERSAND_parents,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"asc\",\"asc\",356854569),field], null));\n} else {\nthrow cljs.core.match.backtrack;\n\n}\n}catch (e81128){if((e81128 instanceof Error)){\nvar e__62528__auto____$1 = e81128;\nif((e__62528__auto____$1 === cljs.core.match.backtrack)){\ntry{var _AMPERSAND_match_1__81118 = cljs.core.nth.cljs$core$IFn$_invoke$arity$2(_AMPERSAND_match,(1));\nif(cljs.core.keyword_identical_QMARK_(_AMPERSAND_match_1__81118,new cljs.core.Keyword(null,\"desc\",\"desc\",2093485764))){\nvar field = cljs.core.nth.cljs$core$IFn$_invoke$arity$2(_AMPERSAND_match,(0));\nreturn metabase$mbql$normalize$canonicalize_order_by_$_replace_81113(_AMPERSAND_parents,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"desc\",\"desc\",2093485764),field], null));\n} else {\nthrow cljs.core.match.backtrack;\n\n}\n}catch (e81129){if((e81129 instanceof Error)){\nvar e__62528__auto____$2 = e81129;\nif((e__62528__auto____$2 === cljs.core.match.backtrack)){\ntry{var _AMPERSAND_match_1__81118 = cljs.core.nth.cljs$core$IFn$_invoke$arity$2(_AMPERSAND_match,(1));\nif(cljs.core.keyword_identical_QMARK_(_AMPERSAND_match_1__81118,new cljs.core.Keyword(null,\"ascending\",\"ascending\",-988350486))){\nvar field = cljs.core.nth.cljs$core$IFn$_invoke$arity$2(_AMPERSAND_match,(0));\nreturn metabase$mbql$normalize$canonicalize_order_by_$_replace_81113(_AMPERSAND_parents,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"asc\",\"asc\",356854569),field], null));\n} else {\nthrow cljs.core.match.backtrack;\n\n}\n}catch (e81130){if((e81130 instanceof Error)){\nvar e__62528__auto____$3 = e81130;\nif((e__62528__auto____$3 === cljs.core.match.backtrack)){\ntry{var _AMPERSAND_match_1__81118 = cljs.core.nth.cljs$core$IFn$_invoke$arity$2(_AMPERSAND_match,(1));\nif(cljs.core.keyword_identical_QMARK_(_AMPERSAND_match_1__81118,new cljs.core.Keyword(null,\"descending\",\"descending\",-24766135))){\nvar field = cljs.core.nth.cljs$core$IFn$_invoke$arity$2(_AMPERSAND_match,(0));\nreturn metabase$mbql$normalize$canonicalize_order_by_$_replace_81113(_AMPERSAND_parents,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"desc\",\"desc\",2093485764),field], null));\n} else {\nthrow cljs.core.match.backtrack;\n\n}\n}catch (e81131){if((e81131 instanceof Error)){\nvar e__62528__auto____$4 = e81131;\nif((e__62528__auto____$4 === cljs.core.match.backtrack)){\ntry{var _AMPERSAND_match_0__81117 = cljs.core.nth.cljs$core$IFn$_invoke$arity$2(_AMPERSAND_match,(0));\nif(cljs.core.keyword_identical_QMARK_(_AMPERSAND_match_0__81117,new cljs.core.Keyword(null,\"ascending\",\"ascending\",-988350486))){\nvar field = cljs.core.nth.cljs$core$IFn$_invoke$arity$2(_AMPERSAND_match,(1));\nreturn metabase$mbql$normalize$canonicalize_order_by_$_replace_81113(_AMPERSAND_parents,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"asc\",\"asc\",356854569),field], null));\n} else {\nthrow cljs.core.match.backtrack;\n\n}\n}catch (e81132){if((e81132 instanceof Error)){\nvar e__62528__auto____$5 = e81132;\nif((e__62528__auto____$5 === cljs.core.match.backtrack)){\ntry{var _AMPERSAND_match_0__81117 = cljs.core.nth.cljs$core$IFn$_invoke$arity$2(_AMPERSAND_match,(0));\nif(cljs.core.keyword_identical_QMARK_(_AMPERSAND_match_0__81117,new cljs.core.Keyword(null,\"descending\",\"descending\",-24766135))){\nvar field = cljs.core.nth.cljs$core$IFn$_invoke$arity$2(_AMPERSAND_match,(1));\nreturn metabase$mbql$normalize$canonicalize_order_by_$_replace_81113(_AMPERSAND_parents,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"desc\",\"desc\",2093485764),field], null));\n} else {\nthrow cljs.core.match.backtrack;\n\n}\n}catch (e81133){if((e81133 instanceof Error)){\nvar e__62528__auto____$6 = e81133;\nif((e__62528__auto____$6 === cljs.core.match.backtrack)){\ntry{var _AMPERSAND_match_0__81117 = cljs.core.nth.cljs$core$IFn$_invoke$arity$2(_AMPERSAND_match,(0));\nif(cljs.core.keyword_identical_QMARK_(_AMPERSAND_match_0__81117,new cljs.core.Keyword(null,\"asc\",\"asc\",356854569))){\nvar field = cljs.core.nth.cljs$core$IFn$_invoke$arity$2(_AMPERSAND_match,(1));\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"asc\",\"asc\",356854569),metabase.mbql.normalize.canonicalize_implicit_field_id(field)], null);\n} else {\nthrow cljs.core.match.backtrack;\n\n}\n}catch (e81135){if((e81135 instanceof Error)){\nvar e__62528__auto____$7 = e81135;\nif((e__62528__auto____$7 === cljs.core.match.backtrack)){\ntry{var _AMPERSAND_match_0__81117 = cljs.core.nth.cljs$core$IFn$_invoke$arity$2(_AMPERSAND_match,(0));\nif(cljs.core.keyword_identical_QMARK_(_AMPERSAND_match_0__81117,new cljs.core.Keyword(null,\"desc\",\"desc\",2093485764))){\nvar field = cljs.core.nth.cljs$core$IFn$_invoke$arity$2(_AMPERSAND_match,(1));\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"desc\",\"desc\",2093485764),metabase.mbql.normalize.canonicalize_implicit_field_id(field)], null);\n} else {\nthrow cljs.core.match.backtrack;\n\n}\n}catch (e81136){if((e81136 instanceof Error)){\nvar e__62528__auto____$8 = e81136;\nif((e__62528__auto____$8 === cljs.core.match.backtrack)){\nthrow cljs.core.match.backtrack;\n} else {\nthrow e__62528__auto____$8;\n}\n} else {\nthrow e81136;\n\n}\n}} else {\nthrow e__62528__auto____$7;\n}\n} else {\nthrow e81135;\n\n}\n}} else {\nthrow e__62528__auto____$6;\n}\n} else {\nthrow e81133;\n\n}\n}} else {\nthrow e__62528__auto____$5;\n}\n} else {\nthrow e81132;\n\n}\n}} else {\nthrow e__62528__auto____$4;\n}\n} else {\nthrow e81131;\n\n}\n}} else {\nthrow e__62528__auto____$3;\n}\n} else {\nthrow e81130;\n\n}\n}} else {\nthrow e__62528__auto____$2;\n}\n} else {\nthrow e81129;\n\n}\n}} else {\nthrow e__62528__auto____$1;\n}\n} else {\nthrow e81128;\n\n}\n}} else {\nthrow cljs.core.match.backtrack;\n\n}\n}catch (e81122){if((e81122 instanceof Error)){\nvar e__62528__auto____$1 = e81122;\nif((e__62528__auto____$1 === cljs.core.match.backtrack)){\ntry{if(((cljs.core.vector_QMARK_(_AMPERSAND_match)) && ((cljs.core.count(_AMPERSAND_match) >= (0))))){\ntry{var _AMPERSAND_match_left__81119 = cljs.core.subvec.cljs$core$IFn$_invoke$arity$3(_AMPERSAND_match,(0),(0));\nif(((cljs.core.vector_QMARK_(_AMPERSAND_match_left__81119)) && ((cljs.core.count(_AMPERSAND_match_left__81119) === (0))))){\ntry{var _AMPERSAND_match_right__81120 = cljs.core.subvec.cljs$core$IFn$_invoke$arity$2(_AMPERSAND_match,(0));\nif(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(_AMPERSAND_match_right__81120,clauses)){\nreturn cljs.core.vec(cljs.core.distinct.cljs$core$IFn$_invoke$arity$1(cljs.core.map.cljs$core$IFn$_invoke$arity$2(metabase.mbql.normalize.canonicalize_order_by,clauses)));\n} else {\nthrow cljs.core.match.backtrack;\n\n}\n}catch (e81127){if((e81127 instanceof Error)){\nvar e__62528__auto____$2 = e81127;\nif((e__62528__auto____$2 === cljs.core.match.backtrack)){\nthrow cljs.core.match.backtrack;\n} else {\nthrow e__62528__auto____$2;\n}\n} else {\nthrow e81127;\n\n}\n}} else {\nthrow cljs.core.match.backtrack;\n\n}\n}catch (e81126){if((e81126 instanceof Error)){\nvar e__62528__auto____$2 = e81126;\nif((e__62528__auto____$2 === cljs.core.match.backtrack)){\nthrow cljs.core.match.backtrack;\n} else {\nthrow e__62528__auto____$2;\n}\n} else {\nthrow e81126;\n\n}\n}} else {\nthrow cljs.core.match.backtrack;\n\n}\n}catch (e81123){if((e81123 instanceof Error)){\nvar e__62528__auto____$2 = e81123;\nif((e__62528__auto____$2 === cljs.core.match.backtrack)){\nreturn metabase.mbql.util.match.impl.replace_in_collection(metabase$mbql$normalize$canonicalize_order_by_$_replace_81113,_AMPERSAND_parents,_AMPERSAND_match);\n} else {\nthrow e__62528__auto____$2;\n}\n} else {\nthrow e81123;\n\n}\n}} else {\nthrow e__62528__auto____$1;\n}\n} else {\nthrow e81122;\n\n}\n}} else {\nthrow e__62528__auto__;\n}\n} else {\nthrow e81121;\n\n}\n}})(cljs.core.PersistentVector.EMPTY,clauses);\n});\nmetabase.mbql.normalize.canonicalize_template_tag = (function metabase$mbql$normalize$canonicalize_template_tag(p__81150){\nvar map__81151 = p__81150;\nvar map__81151__$1 = cljs.core.__destructure_map(map__81151);\nvar tag = map__81151__$1;\nvar dimension = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__81151__$1,new cljs.core.Keyword(null,\"dimension\",\"dimension\",543254198));\nvar G__81152 = tag;\nif(cljs.core.truth_(dimension)){\nreturn cljs.core.update.cljs$core$IFn$_invoke$arity$3(G__81152,new cljs.core.Keyword(null,\"dimension\",\"dimension\",543254198),metabase.mbql.normalize.canonicalize_mbql_clause);\n} else {\nreturn G__81152;\n}\n});\nmetabase.mbql.normalize.canonicalize_template_tags = (function metabase$mbql$normalize$canonicalize_template_tags(tags){\nreturn cljs.core.into.cljs$core$IFn$_invoke$arity$2(cljs.core.PersistentArrayMap.EMPTY,(function (){var iter__5523__auto__ = (function metabase$mbql$normalize$canonicalize_template_tags_$_iter__81153(s__81154){\nreturn (new cljs.core.LazySeq(null,(function (){\nvar s__81154__$1 = s__81154;\nwhile(true){\nvar temp__5804__auto__ = cljs.core.seq(s__81154__$1);\nif(temp__5804__auto__){\nvar s__81154__$2 = temp__5804__auto__;\nif(cljs.core.chunked_seq_QMARK_(s__81154__$2)){\nvar c__5521__auto__ = cljs.core.chunk_first(s__81154__$2);\nvar size__5522__auto__ = cljs.core.count(c__5521__auto__);\nvar b__81156 = cljs.core.chunk_buffer(size__5522__auto__);\nif((function (){var i__81155 = (0);\nwhile(true){\nif((i__81155 < size__5522__auto__)){\nvar vec__81159 = cljs.core._nth(c__5521__auto__,i__81155);\nvar tag_name = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__81159,(0),null);\nvar tag = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__81159,(1),null);\ncljs.core.chunk_append(b__81156,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [tag_name,metabase.mbql.normalize.canonicalize_template_tag(tag)], null));\n\nvar G__81452 = (i__81155 + (1));\ni__81155 = G__81452;\ncontinue;\n} else {\nreturn true;\n}\nbreak;\n}\n})()){\nreturn cljs.core.chunk_cons(cljs.core.chunk(b__81156),metabase$mbql$normalize$canonicalize_template_tags_$_iter__81153(cljs.core.chunk_rest(s__81154__$2)));\n} else {\nreturn cljs.core.chunk_cons(cljs.core.chunk(b__81156),null);\n}\n} else {\nvar vec__81163 = cljs.core.first(s__81154__$2);\nvar tag_name = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__81163,(0),null);\nvar tag = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__81163,(1),null);\nreturn cljs.core.cons(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [tag_name,metabase.mbql.normalize.canonicalize_template_tag(tag)], null),metabase$mbql$normalize$canonicalize_template_tags_$_iter__81153(cljs.core.rest(s__81154__$2)));\n}\n} else {\nreturn null;\n}\nbreak;\n}\n}),null,null));\n});\nreturn iter__5523__auto__(tags);\n})());\n});\nmetabase.mbql.normalize.canonicalize_native_query = (function metabase$mbql$normalize$canonicalize_native_query(p__81167){\nvar map__81168 = p__81167;\nvar map__81168__$1 = cljs.core.__destructure_map(map__81168);\nvar native_query = map__81168__$1;\nvar template_tags = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__81168__$1,new cljs.core.Keyword(null,\"template-tags\",\"template-tags\",1853115685));\nvar G__81169 = native_query;\nif(cljs.core.truth_(template_tags)){\nreturn cljs.core.update.cljs$core$IFn$_invoke$arity$3(G__81169,new cljs.core.Keyword(null,\"template-tags\",\"template-tags\",1853115685),metabase.mbql.normalize.canonicalize_template_tags);\n} else {\nreturn G__81169;\n}\n});\nmetabase.mbql.normalize.canonicalize_source_query = (function metabase$mbql$normalize$canonicalize_source_query(p__81170){\nvar map__81171 = p__81170;\nvar map__81171__$1 = cljs.core.__destructure_map(map__81171);\nvar source_query = map__81171__$1;\nvar native_QMARK_ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__81171__$1,new cljs.core.Keyword(null,\"native\",\"native\",-613060878));\nvar G__81172 = source_query;\nvar G__81172__$1 = ((cljs.core.not(native_QMARK_))?(metabase.mbql.normalize.canonicalize_inner_mbql_query.cljs$core$IFn$_invoke$arity$1 ? metabase.mbql.normalize.canonicalize_inner_mbql_query.cljs$core$IFn$_invoke$arity$1(G__81172) : metabase.mbql.normalize.canonicalize_inner_mbql_query.call(null,G__81172)):G__81172);\nif(cljs.core.truth_(native_QMARK_)){\nreturn metabase.mbql.normalize.canonicalize_native_query(G__81172__$1);\n} else {\nreturn G__81172__$1;\n}\n});\nmetabase.mbql.normalize.non_empty_QMARK_ = (function metabase$mbql$normalize$non_empty_QMARK_(x){\nif(cljs.core.coll_QMARK_(x)){\nreturn cljs.core.seq(x);\n} else {\nreturn (!((x == null)));\n}\n});\n/**\n * Perform specific steps to canonicalize the various top-level clauses in an MBQL query.\n */\nmetabase.mbql.normalize.canonicalize_top_level_mbql_clauses = (function metabase$mbql$normalize$canonicalize_top_level_mbql_clauses(mbql_query){\nvar G__81175 = mbql_query;\nvar G__81175__$1 = ((metabase.mbql.normalize.non_empty_QMARK_(new cljs.core.Keyword(null,\"aggregation\",\"aggregation\",1597476696).cljs$core$IFn$_invoke$arity$1(mbql_query)))?cljs.core.update.cljs$core$IFn$_invoke$arity$3(G__81175,new cljs.core.Keyword(null,\"aggregation\",\"aggregation\",1597476696),metabase.mbql.normalize.canonicalize_aggregations):G__81175);\nvar G__81175__$2 = ((metabase.mbql.normalize.non_empty_QMARK_(new cljs.core.Keyword(null,\"breakout\",\"breakout\",-732419050).cljs$core$IFn$_invoke$arity$1(mbql_query)))?cljs.core.update.cljs$core$IFn$_invoke$arity$3(G__81175__$1,new cljs.core.Keyword(null,\"breakout\",\"breakout\",-732419050),metabase.mbql.normalize.canonicalize_breakouts):G__81175__$1);\nvar G__81175__$3 = ((metabase.mbql.normalize.non_empty_QMARK_(new cljs.core.Keyword(null,\"fields\",\"fields\",-1932066230).cljs$core$IFn$_invoke$arity$1(mbql_query)))?cljs.core.update.cljs$core$IFn$_invoke$arity$3(G__81175__$2,new cljs.core.Keyword(null,\"fields\",\"fields\",-1932066230),cljs.core.partial.cljs$core$IFn$_invoke$arity$2(cljs.core.mapv,metabase.mbql.normalize.wrap_implicit_field_id)):G__81175__$2);\nvar G__81175__$4 = ((metabase.mbql.normalize.non_empty_QMARK_(new cljs.core.Keyword(null,\"order-by\",\"order-by\",1527318070).cljs$core$IFn$_invoke$arity$1(mbql_query)))?cljs.core.update.cljs$core$IFn$_invoke$arity$3(G__81175__$3,new cljs.core.Keyword(null,\"order-by\",\"order-by\",1527318070),metabase.mbql.normalize.canonicalize_order_by):G__81175__$3);\nif(metabase.mbql.normalize.non_empty_QMARK_(new cljs.core.Keyword(null,\"source-query\",\"source-query\",198004422).cljs$core$IFn$_invoke$arity$1(mbql_query))){\nreturn cljs.core.update.cljs$core$IFn$_invoke$arity$3(G__81175__$4,new cljs.core.Keyword(null,\"source-query\",\"source-query\",198004422),metabase.mbql.normalize.canonicalize_source_query);\n} else {\nreturn G__81175__$4;\n}\n});\nmetabase.mbql.normalize.canonicalize_inner_mbql_query = cljs.core.comp.cljs$core$IFn$_invoke$arity$2(metabase.mbql.normalize.canonicalize_mbql_clauses,metabase.mbql.normalize.canonicalize_top_level_mbql_clauses);\n/**\n * In Dashboard 0.33.0 `:source-metadata` about resolved queries is added to the 'inner' MBQL query rather than to the\n *   top-level; if we encounter the old style, move it to the appropriate location.\n */\nmetabase.mbql.normalize.move_source_metadata_to_mbql_query = (function metabase$mbql$normalize$move_source_metadata_to_mbql_query(p__81178){\nvar map__81179 = p__81178;\nvar map__81179__$1 = cljs.core.__destructure_map(map__81179);\nvar query = map__81179__$1;\nvar source_metadata = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__81179__$1,new cljs.core.Keyword(null,\"source-metadata\",\"source-metadata\",-477816085));\nreturn cljs.core.assoc_in(cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(query,new cljs.core.Keyword(null,\"source-metadata\",\"source-metadata\",-477816085)),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"query\",\"query\",-1288509510),new cljs.core.Keyword(null,\"source-metadata\",\"source-metadata\",-477816085)], null),source_metadata);\n});\n/**\n * Canonicalize a query [MBQL query], rewriting the query as if you perfectly followed the recommended style guides for\n *   writing MBQL. Does things like removes unneeded and empty clauses, converts older MBQL '95 syntax to MBQL '98, etc.\n */\nmetabase.mbql.normalize.canonicalize = (function metabase$mbql$normalize$canonicalize(p__81180){\nvar map__81181 = p__81180;\nvar map__81181__$1 = cljs.core.__destructure_map(map__81181);\nvar outer_query = map__81181__$1;\nvar query = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__81181__$1,new cljs.core.Keyword(null,\"query\",\"query\",-1288509510));\nvar parameters = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__81181__$1,new cljs.core.Keyword(null,\"parameters\",\"parameters\",-1229919748));\nvar source_metadata = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__81181__$1,new cljs.core.Keyword(null,\"source-metadata\",\"source-metadata\",-477816085));\nvar native$ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__81181__$1,new cljs.core.Keyword(null,\"native\",\"native\",-613060878));\ntry{var G__81184 = outer_query;\nvar G__81184__$1 = (cljs.core.truth_(source_metadata)?metabase.mbql.normalize.move_source_metadata_to_mbql_query(G__81184):G__81184);\nvar G__81184__$2 = (cljs.core.truth_(query)?cljs.core.update.cljs$core$IFn$_invoke$arity$3(G__81184__$1,new cljs.core.Keyword(null,\"query\",\"query\",-1288509510),metabase.mbql.normalize.canonicalize_inner_mbql_query):G__81184__$1);\nvar G__81184__$3 = (cljs.core.truth_(parameters)?cljs.core.update.cljs$core$IFn$_invoke$arity$3(G__81184__$2,new cljs.core.Keyword(null,\"parameters\",\"parameters\",-1229919748),cljs.core.partial.cljs$core$IFn$_invoke$arity$2(cljs.core.mapv,metabase.mbql.normalize.canonicalize_mbql_clauses)):G__81184__$2);\nvar G__81184__$4 = (cljs.core.truth_(native$)?cljs.core.update.cljs$core$IFn$_invoke$arity$3(G__81184__$3,new cljs.core.Keyword(null,\"native\",\"native\",-613060878),metabase.mbql.normalize.canonicalize_native_query):G__81184__$3);\nreturn metabase.mbql.normalize.canonicalize_mbql_clauses(G__81184__$4);\n\n}catch (e81183){if((e81183 instanceof Error)){\nvar e = e81183;\nthrow cljs.core.ex_info.cljs$core$IFn$_invoke$arity$3(metabase.shared.util.i18n.js_i18n.cljs$core$IFn$_invoke$arity$variadic(\"Error canonicalizing query: {0}\",cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([cljs.core.ex_message(e)], 0)),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"query\",\"query\",-1288509510),query], null),e);\n} else {\nthrow e81183;\n\n}\n}});\n/**\n * Remove any Fields specified in both `:breakout` and `:fields` from `:fields`; it is implied that any breakout Field\n *   will be returned, specifying it in both would imply it is to be returned twice, which tends to cause confusion for\n *   the QP and drivers. (This is done to work around historic bugs with the way queries were generated on the frontend;\n *   I'm not sure this behavior makes sense, but removing it would break existing queries.)\n * \n *   We will remove either exact matches:\n * \n *  {:breakout [[:field-id 10]], :fields [[:field-id 10]]} ; -> {:breakout [[:field-id 10]]}\n * \n *   or unbucketed matches:\n * \n *  {:breakout [[:datetime-field [:field-id 10] :month]], :fields [[:field-id 10]]}\n *  ;; -> {:breakout [[:field-id 10]]}\n */\nmetabase.mbql.normalize.remove_breakout_fields_from_fields = (function metabase$mbql$normalize$remove_breakout_fields_from_fields(p__81189){\nvar map__81190 = p__81189;\nvar map__81190__$1 = cljs.core.__destructure_map(map__81190);\nvar query = map__81190__$1;\nvar map__81191 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__81190__$1,new cljs.core.Keyword(null,\"query\",\"query\",-1288509510));\nvar map__81191__$1 = cljs.core.__destructure_map(map__81191);\nvar breakout = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__81191__$1,new cljs.core.Keyword(null,\"breakout\",\"breakout\",-732419050));\nvar fields = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__81191__$1,new cljs.core.Keyword(null,\"fields\",\"fields\",-1932066230));\nif((!(((cljs.core.seq(breakout)) && (cljs.core.seq(fields)))))){\nreturn query;\n} else {\nvar breakout_fields = cljs.core.set(cljs.core.reduce.cljs$core$IFn$_invoke$arity$2(cljs.core.concat,cljs.core.seq(cljs.core.filter.cljs$core$IFn$_invoke$arity$2(cljs.core.some_QMARK_,(function metabase$mbql$normalize$remove_breakout_fields_from_fields_$_match_81193(_AMPERSAND_parents,_AMPERSAND_match){\ntry{if(((cljs.core.vector_QMARK_(_AMPERSAND_match)) && ((cljs.core.count(_AMPERSAND_match) === 3)))){\ntry{var _AMPERSAND_match_0__81196 = cljs.core.nth.cljs$core$IFn$_invoke$arity$2(_AMPERSAND_match,(0));\nif(cljs.core.keyword_identical_QMARK_(_AMPERSAND_match_0__81196,new cljs.core.Keyword(null,\"field\",\"field\",-1302436500))){\nvar id_or_name = cljs.core.nth.cljs$core$IFn$_invoke$arity$2(_AMPERSAND_match,(1));\nvar opts = cljs.core.nth.cljs$core$IFn$_invoke$arity$2(_AMPERSAND_match,(2));\nreturn new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [_AMPERSAND_match,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"field\",\"field\",-1302436500),id_or_name,cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(opts,new cljs.core.Keyword(null,\"temporal-unit\",\"temporal-unit\",-1892306358))], null)], null)], null);\n} else {\nthrow cljs.core.match.backtrack;\n\n}\n}catch (e81205){if((e81205 instanceof Error)){\nvar e__62528__auto__ = e81205;\nif((e__62528__auto__ === cljs.core.match.backtrack)){\nthrow cljs.core.match.backtrack;\n} else {\nthrow e__62528__auto__;\n}\n} else {\nthrow e81205;\n\n}\n}} else {\nthrow cljs.core.match.backtrack;\n\n}\n}catch (e81199){if((e81199 instanceof Error)){\nvar e__62528__auto__ = e81199;\nif((e__62528__auto__ === cljs.core.match.backtrack)){\nreturn metabase.mbql.util.match.impl.match_in_collection(metabase$mbql$normalize$remove_breakout_fields_from_fields_$_match_81193,_AMPERSAND_parents,_AMPERSAND_match);\n} else {\nthrow e__62528__auto__;\n}\n} else {\nthrow e81199;\n\n}\n}})(cljs.core.PersistentVector.EMPTY,breakout)))));\nreturn cljs.core.update_in.cljs$core$IFn$_invoke$arity$3(query,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"query\",\"query\",-1288509510),new cljs.core.Keyword(null,\"fields\",\"fields\",-1932066230)], null),cljs.core.comp.cljs$core$IFn$_invoke$arity$2(cljs.core.vec,cljs.core.partial.cljs$core$IFn$_invoke$arity$2(cljs.core.remove,breakout_fields)));\n}\n});\n/**\n * Perform transformations that operate on the query as a whole, making sure the structure as a whole is logical and\n *   consistent.\n */\nmetabase.mbql.normalize.perform_whole_query_transformations = (function metabase$mbql$normalize$perform_whole_query_transformations(query){\ntry{return metabase.mbql.normalize.remove_breakout_fields_from_fields(query);\n}catch (e81206){if((e81206 instanceof Error)){\nvar e = e81206;\nthrow cljs.core.ex_info.cljs$core$IFn$_invoke$arity$3(metabase.shared.util.i18n.js_i18n(\"Error performing whole query transformations\"),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"query\",\"query\",-1288509510),query], null),e);\n} else {\nthrow e81206;\n\n}\n}});\nmetabase.mbql.normalize.remove_empty_clauses_in_map = (function metabase$mbql$normalize$remove_empty_clauses_in_map(m,path){\nvar m__$1 = cljs.core.into.cljs$core$IFn$_invoke$arity$2(cljs.core.empty(m),(function (){var iter__5523__auto__ = (function metabase$mbql$normalize$remove_empty_clauses_in_map_$_iter__81208(s__81209){\nreturn (new cljs.core.LazySeq(null,(function (){\nvar s__81209__$1 = s__81209;\nwhile(true){\nvar temp__5804__auto__ = cljs.core.seq(s__81209__$1);\nif(temp__5804__auto__){\nvar s__81209__$2 = temp__5804__auto__;\nif(cljs.core.chunked_seq_QMARK_(s__81209__$2)){\nvar c__5521__auto__ = cljs.core.chunk_first(s__81209__$2);\nvar size__5522__auto__ = cljs.core.count(c__5521__auto__);\nvar b__81211 = cljs.core.chunk_buffer(size__5522__auto__);\nif((function (){var i__81210 = (0);\nwhile(true){\nif((i__81210 < size__5522__auto__)){\nvar vec__81216 = cljs.core._nth(c__5521__auto__,i__81210);\nvar k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__81216,(0),null);\nvar v = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__81216,(1),null);\nvar v__$1 = (function (){var G__81219 = v;\nvar G__81220 = cljs.core.conj.cljs$core$IFn$_invoke$arity$2(path,k);\nreturn (metabase.mbql.normalize.remove_empty_clauses.cljs$core$IFn$_invoke$arity$2 ? metabase.mbql.normalize.remove_empty_clauses.cljs$core$IFn$_invoke$arity$2(G__81219,G__81220) : metabase.mbql.normalize.remove_empty_clauses.call(null,G__81219,G__81220));\n})();\nif((!((v__$1 == null)))){\ncljs.core.chunk_append(b__81211,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [k,v__$1], null));\n\nvar G__81462 = (i__81210 + (1));\ni__81210 = G__81462;\ncontinue;\n} else {\nvar G__81463 = (i__81210 + (1));\ni__81210 = G__81463;\ncontinue;\n}\n} else {\nreturn true;\n}\nbreak;\n}\n})()){\nreturn cljs.core.chunk_cons(cljs.core.chunk(b__81211),metabase$mbql$normalize$remove_empty_clauses_in_map_$_iter__81208(cljs.core.chunk_rest(s__81209__$2)));\n} else {\nreturn cljs.core.chunk_cons(cljs.core.chunk(b__81211),null);\n}\n} else {\nvar vec__81221 = cljs.core.first(s__81209__$2);\nvar k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__81221,(0),null);\nvar v = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__81221,(1),null);\nvar v__$1 = (function (){var G__81224 = v;\nvar G__81225 = cljs.core.conj.cljs$core$IFn$_invoke$arity$2(path,k);\nreturn (metabase.mbql.normalize.remove_empty_clauses.cljs$core$IFn$_invoke$arity$2 ? metabase.mbql.normalize.remove_empty_clauses.cljs$core$IFn$_invoke$arity$2(G__81224,G__81225) : metabase.mbql.normalize.remove_empty_clauses.call(null,G__81224,G__81225));\n})();\nif((!((v__$1 == null)))){\nreturn cljs.core.cons(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [k,v__$1], null),metabase$mbql$normalize$remove_empty_clauses_in_map_$_iter__81208(cljs.core.rest(s__81209__$2)));\n} else {\nvar G__81465 = cljs.core.rest(s__81209__$2);\ns__81209__$1 = G__81465;\ncontinue;\n}\n}\n} else {\nreturn null;\n}\nbreak;\n}\n}),null,null));\n});\nreturn iter__5523__auto__(m);\n})());\nif(cljs.core.seq(m__$1)){\nreturn m__$1;\n} else {\nreturn null;\n}\n});\nmetabase.mbql.normalize.remove_empty_clauses_in_sequence = (function metabase$mbql$normalize$remove_empty_clauses_in_sequence(xs,path){\nvar xs__$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2((function (p1__81227_SHARP_){\nvar G__81229 = p1__81227_SHARP_;\nvar G__81230 = cljs.core.conj.cljs$core$IFn$_invoke$arity$2(path,new cljs.core.Keyword(\"metabase.mbql.normalize\",\"sequence\",\"metabase.mbql.normalize/sequence\",-1700645683));\nreturn (metabase.mbql.normalize.remove_empty_clauses.cljs$core$IFn$_invoke$arity$2 ? metabase.mbql.normalize.remove_empty_clauses.cljs$core$IFn$_invoke$arity$2(G__81229,G__81230) : metabase.mbql.normalize.remove_empty_clauses.call(null,G__81229,G__81230));\n}),xs);\nif(cljs.core.truth_(cljs.core.some(cljs.core.some_QMARK_,xs__$1))){\nreturn xs__$1;\n} else {\nreturn null;\n}\n});\nmetabase.mbql.normalize.remove_empty_clauses_in_join = (function metabase$mbql$normalize$remove_empty_clauses_in_join(join){\nvar G__81232 = join;\nvar G__81233 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"query\",\"query\",-1288509510)], null);\nreturn (metabase.mbql.normalize.remove_empty_clauses.cljs$core$IFn$_invoke$arity$2 ? metabase.mbql.normalize.remove_empty_clauses.cljs$core$IFn$_invoke$arity$2(G__81232,G__81233) : metabase.mbql.normalize.remove_empty_clauses.call(null,G__81232,G__81233));\n});\nmetabase.mbql.normalize.remove_empty_clauses_in_source_query = (function metabase$mbql$normalize$remove_empty_clauses_in_source_query(p__81235){\nvar map__81236 = p__81235;\nvar map__81236__$1 = cljs.core.__destructure_map(map__81236);\nvar source_query = map__81236__$1;\nvar native_QMARK_ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__81236__$1,new cljs.core.Keyword(null,\"native\",\"native\",-613060878));\nif(cljs.core.truth_(native_QMARK_)){\nreturn clojure.set.rename_keys((function (){var G__81238 = clojure.set.rename_keys(source_query,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"native\",\"native\",-613060878),new cljs.core.Keyword(null,\"query\",\"query\",-1288509510)], null));\nvar G__81239 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"native\",\"native\",-613060878)], null);\nreturn (metabase.mbql.normalize.remove_empty_clauses.cljs$core$IFn$_invoke$arity$2 ? metabase.mbql.normalize.remove_empty_clauses.cljs$core$IFn$_invoke$arity$2(G__81238,G__81239) : metabase.mbql.normalize.remove_empty_clauses.call(null,G__81238,G__81239));\n})(),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"query\",\"query\",-1288509510),new cljs.core.Keyword(null,\"native\",\"native\",-613060878)], null));\n} else {\nvar G__81240 = source_query;\nvar G__81241 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"query\",\"query\",-1288509510)], null);\nreturn (metabase.mbql.normalize.remove_empty_clauses.cljs$core$IFn$_invoke$arity$2 ? metabase.mbql.normalize.remove_empty_clauses.cljs$core$IFn$_invoke$arity$2(G__81240,G__81241) : metabase.mbql.normalize.remove_empty_clauses.call(null,G__81240,G__81241));\n}\n});\nmetabase.mbql.normalize.path__GT_special_remove_empty_clauses_fn = new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null,\"native\",\"native\",-613060878),cljs.core.identity,new cljs.core.Keyword(null,\"query\",\"query\",-1288509510),new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"source-query\",\"source-query\",198004422),metabase.mbql.normalize.remove_empty_clauses_in_source_query,new cljs.core.Keyword(null,\"joins\",\"joins\",1033962699),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(\"metabase.mbql.normalize\",\"sequence\",\"metabase.mbql.normalize/sequence\",-1700645683),metabase.mbql.normalize.remove_empty_clauses_in_join], null)], null),new cljs.core.Keyword(null,\"viz-settings\",\"viz-settings\",256055379),cljs.core.identity], null);\n/**\n * Remove any empty or `nil` clauses in a query.\n */\nmetabase.mbql.normalize.remove_empty_clauses = (function metabase$mbql$normalize$remove_empty_clauses(var_args){\nvar G__81247 = arguments.length;\nswitch (G__81247) {\ncase 1:\nreturn metabase.mbql.normalize.remove_empty_clauses.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\n\nbreak;\ncase 2:\nreturn metabase.mbql.normalize.remove_empty_clauses.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\n(metabase.mbql.normalize.remove_empty_clauses.cljs$core$IFn$_invoke$arity$1 = (function (query){\nreturn metabase.mbql.normalize.remove_empty_clauses.cljs$core$IFn$_invoke$arity$2(query,cljs.core.PersistentVector.EMPTY);\n}));\n\n(metabase.mbql.normalize.remove_empty_clauses.cljs$core$IFn$_invoke$arity$2 = (function (x,path){\ntry{var special_fn = ((cljs.core.seq(path))?cljs.core.get_in.cljs$core$IFn$_invoke$arity$2(metabase.mbql.normalize.path__GT_special_remove_empty_clauses_fn,path):null);\nif(cljs.core.fn_QMARK_(special_fn)){\nreturn (special_fn.cljs$core$IFn$_invoke$arity$1 ? special_fn.cljs$core$IFn$_invoke$arity$1(x) : special_fn.call(null,x));\n} else {\nif(cljs.core.record_QMARK_(x)){\nreturn x;\n} else {\nif(cljs.core.map_QMARK_(x)){\nreturn metabase.mbql.normalize.remove_empty_clauses_in_map(x,path);\n} else {\nif(cljs.core.sequential_QMARK_(x)){\nreturn metabase.mbql.normalize.remove_empty_clauses_in_sequence(x,path);\n} else {\nreturn x;\n\n}\n}\n}\n}\n}catch (e81250){if((e81250 instanceof Error)){\nvar e = e81250;\nthrow cljs.core.ex_info.cljs$core$IFn$_invoke$arity$3(\"Error removing empty clauses from form.\",new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"form\",\"form\",-1624062471),x,new cljs.core.Keyword(null,\"path\",\"path\",-188191168),path], null),e);\n} else {\nthrow e81250;\n\n}\n}}));\n\n(metabase.mbql.normalize.remove_empty_clauses.cljs$lang$maxFixedArity = 2);\n\n/**\n * Normalize the tokens in a Dashboard query (i.e., make them all `lisp-case` keywords), rewrite deprecated clauses as\n *   up-to-date MBQL 2000, and remove empty clauses.\n */\nmetabase.mbql.normalize.normalize = (function (){var normalize_STAR_ = cljs.core.comp.cljs$core$IFn$_invoke$arity$variadic(metabase.mbql.normalize.remove_empty_clauses,metabase.mbql.normalize.perform_whole_query_transformations,metabase.mbql.normalize.canonicalize,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([metabase.mbql.normalize.normalize_tokens], 0));\nreturn (function (query){\ntry{return normalize_STAR_(query);\n}catch (e81252){if((e81252 instanceof Error)){\nvar e = e81252;\nthrow cljs.core.ex_info.cljs$core$IFn$_invoke$arity$3(metabase.shared.util.i18n.js_i18n.cljs$core$IFn$_invoke$arity$variadic(\"Error normalizing query: {0}\",cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([cljs.core.ex_message(e)], 0)),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"query\",\"query\",-1288509510),query], null),e);\n} else {\nthrow e81252;\n\n}\n}});\n})();\n/**\n * Normalize just a specific fragment of a query, such as just the inner MBQL part or just a filter clause. `path` is\n *   where this fragment would normally live in a full query.\n * \n *  (normalize-fragment [:query :filter] [\"=\" 100 200])\n *  ;;-> [:= [:field-id 100] 200]\n */\nmetabase.mbql.normalize.normalize_fragment = (function metabase$mbql$normalize$normalize_fragment(path,x){\nif(cljs.core.not(cljs.core.seq(path))){\nreturn metabase.mbql.normalize.normalize(x);\n} else {\nreturn cljs.core.get.cljs$core$IFn$_invoke$arity$2((function (){var G__81253 = cljs.core.butlast(path);\nvar G__81254 = cljs.core.PersistentArrayMap.createAsIfByAssoc([cljs.core.last(path),x]);\nreturn (metabase.mbql.normalize.normalize_fragment.cljs$core$IFn$_invoke$arity$2 ? metabase.mbql.normalize.normalize_fragment.cljs$core$IFn$_invoke$arity$2(G__81253,G__81254) : metabase.mbql.normalize.normalize_fragment.call(null,G__81253,G__81254));\n})(),cljs.core.last(path));\n}\n});\n","~:ns-info",["^ ","~:rename-macros",null,"~:renames",["^ "],"~:meta",["^ ","~:doc","Logic for taking any sort of weird MBQL query and normalizing it into a standardized, canonical form. You can think\n  of this like taking any 'valid' MBQL query and rewriting it as-if it was written in perfect up-to-date MBQL in the\n  latest version. There are four main things done here, done as four separate steps:\n\n  #### NORMALIZING TOKENS\n\n  Converting all identifiers to lower-case, lisp-case keywords. e.g. `{\"SOURCE_TABLE\" 10}` becomes `{:source-table\n  10}`.\n\n  #### CANONICALIZING THE QUERY\n\n  Rewriting deprecated MBQL 95/98 syntax and other things that are still supported for backwards-compatibility in\n  canonical modern MBQL syntax. For example `{:breakout [:count 10]}` becomes `{:breakout [[:count [:field 10 nil]]]}`.\n\n  #### WHOLE-QUERY TRANSFORMATIONS\n\n  Transformations and cleanup of the query structure as a whole to fix inconsistencies. Whereas the canonicalization\n  phase operates on a lower-level, transforming invidual clauses, this phase focuses on transformations that affect\n  multiple clauses, such as removing duplicate references to Fields if they are specified in both the `:breakout` and\n  `:fields` clauses.\n\n  This is not the only place that does such transformations; several pieces of QP middleware perform similar\n  individual transformations, such as `reconcile-breakout-and-order-by-bucketing`.\n\n  #### REMOVING EMPTY CLAUSES\n\n  Removing empty clauses like `{:aggregation nil}` or `{:breakout []}`.\n\n  Token normalization occurs first, followed by canonicalization, followed by removing empty clauses.","~:file","metabase/mbql/normalize.cljc","~:line",1,"~:column",5,"~:end-line",1,"~:end-column",28],"~:ns-aliases",["^ ","~$cljs.loader","~$shadow.loader","~$clojure.pprint","~$cljs.pprint","~$clojure.spec.alpha","~$cljs.spec.alpha","~$clojure.core","~$cljs.core","~$clojure.spec.gen.alpha","~$cljs.spec.gen.alpha","~$clojure.core.match","~$cljs.core.match"],"~:use-macros",null,"~:excludes",["~#set",[]],"~:name","~$metabase.mbql.normalize","~:reader-aliases",["^ "],"~:op","~:ns","~:imports",null,"~:requires",["^ ","~$set","~$clojure.set","~$log","~$metabase.util.log","~$i18n","~$metabase.shared.util.i18n","~$metabase.mbql.util.match","^Y","~$mbql.match","^Y","~$metabase.mbql.util","^[","~$mbql.u","^[","^D","^D","~$goog","^11","~$walk","~$clojure.walk","^T","^T","~$m","~$medley.core","^X","^X","^V","^V","^13","^13","^14","^14"],"~:seen",["^K",["~:require"]],"~:uses",null,"~:require-macros",["^ ","^D","^D","^U","^V","^W","^X","^Y","^Y","^Z","^Y","^X","^X","^V","^V"],"~:form",["~#list",["~$ns","^M","Logic for taking any sort of weird MBQL query and normalizing it into a standardized, canonical form. You can think\n  of this like taking any 'valid' MBQL query and rewriting it as-if it was written in perfect up-to-date MBQL in the\n  latest version. There are four main things done here, done as four separate steps:\n\n  #### NORMALIZING TOKENS\n\n  Converting all identifiers to lower-case, lisp-case keywords. e.g. `{\"SOURCE_TABLE\" 10}` becomes `{:source-table\n  10}`.\n\n  #### CANONICALIZING THE QUERY\n\n  Rewriting deprecated MBQL 95/98 syntax and other things that are still supported for backwards-compatibility in\n  canonical modern MBQL syntax. For example `{:breakout [:count 10]}` becomes `{:breakout [[:count [:field 10 nil]]]}`.\n\n  #### WHOLE-QUERY TRANSFORMATIONS\n\n  Transformations and cleanup of the query structure as a whole to fix inconsistencies. Whereas the canonicalization\n  phase operates on a lower-level, transforming invidual clauses, this phase focuses on transformations that affect\n  multiple clauses, such as removing duplicate references to Fields if they are specified in both the `:breakout` and\n  `:fields` clauses.\n\n  This is not the only place that does such transformations; several pieces of QP middleware perform similar\n  individual transformations, such as `reconcile-breakout-and-order-by-bucketing`.\n\n  #### REMOVING EMPTY CLAUSES\n\n  Removing empty clauses like `{:aggregation nil}` or `{:breakout []}`.\n\n  Token normalization occurs first, followed by canonicalization, followed by removing empty clauses.",["^1:",["^16",["^T","~:as","^S"],["^13","^1<","^12"],["^14","^1<","~$m"],["^[","^1<","^10"],["^Y","^1<","^Z"],["^X","^1<","^W"],["^V","^1<","^U"]]]]],"~:flags",["^ ","^16",["^K",[]]],"~:js-deps",["^ "],"~:deps",["^11","^D","^T","^13","^14","^[","^Y","^X","^V"]],"^P","^M","~:resource-id",["~:shadow.build.classpath/resource","metabase/mbql/normalize.cljc"],"~:compiled-at",1692014631012,"^N",["^ ","^S","^T","^U","^V","^W","^X","^Y","^Y","^Z","^Y","^[","^[","^10","^[","^D","^D","^11","^11","^12","^13","^T","^T","~$m","^14","^X","^X","^V","^V","^13","^13","^14","^14"],"~:resource-name","metabase/mbql/normalize.cljc","~:warnings",[],"~:source","(ns metabase.mbql.normalize\n  \"Logic for taking any sort of weird MBQL query and normalizing it into a standardized, canonical form. You can think\n  of this like taking any 'valid' MBQL query and rewriting it as-if it was written in perfect up-to-date MBQL in the\n  latest version. There are four main things done here, done as four separate steps:\n\n  #### NORMALIZING TOKENS\n\n  Converting all identifiers to lower-case, lisp-case keywords. e.g. `{\\\"SOURCE_TABLE\\\" 10}` becomes `{:source-table\n  10}`.\n\n  #### CANONICALIZING THE QUERY\n\n  Rewriting deprecated MBQL 95/98 syntax and other things that are still supported for backwards-compatibility in\n  canonical modern MBQL syntax. For example `{:breakout [:count 10]}` becomes `{:breakout [[:count [:field 10 nil]]]}`.\n\n  #### WHOLE-QUERY TRANSFORMATIONS\n\n  Transformations and cleanup of the query structure as a whole to fix inconsistencies. Whereas the canonicalization\n  phase operates on a lower-level, transforming invidual clauses, this phase focuses on transformations that affect\n  multiple clauses, such as removing duplicate references to Fields if they are specified in both the `:breakout` and\n  `:fields` clauses.\n\n  This is not the only place that does such transformations; several pieces of QP middleware perform similar\n  individual transformations, such as `reconcile-breakout-and-order-by-bucketing`.\n\n  #### REMOVING EMPTY CLAUSES\n\n  Removing empty clauses like `{:aggregation nil}` or `{:breakout []}`.\n\n  Token normalization occurs first, followed by canonicalization, followed by removing empty clauses.\"\n  (:require\n   [clojure.set :as set]\n   [clojure.walk :as walk]\n   [medley.core :as m]\n   [metabase.mbql.util :as mbql.u]\n   [metabase.mbql.util.match :as mbql.match]\n   [metabase.shared.util.i18n :as i18n]\n   [metabase.util.log :as log]))\n\n(defn- mbql-clause?\n  \"True if `x` is an MBQL clause (a sequence with a token as its first arg). (This is different from the implementation\n  in `mbql.u` because it also supports un-normalized clauses. You shouldn't need to use this outside of this\n  namespace.)\"\n  [x]\n  (and (sequential? x)\n       (not (map-entry? x))\n       ((some-fn keyword? string?) (first x))))\n\n(defn- maybe-normalize-token\n  \"Normalize token `x`, but only if it's a keyword or string.\"\n  [x]\n  (if ((some-fn keyword? string?) x)\n    (mbql.u/normalize-token x)\n    x))\n\n(defn is-clause?\n  \"If `x` an MBQL clause, and an instance of clauses defined by keyword(s) `k-or-ks`?\n\n    (is-clause? :count [:count 10])        ; -> true\n    (is-clause? #{:+ :- :* :/} [:+ 10 20]) ; -> true\n\n  (This is different from the implementation in `mbql.u` because it also supports un-normalized clauses. You shouldn't\n  need to use this outside of this namespace.)\"\n  [k-or-ks x]\n  (and\n   (mbql-clause? x)\n   (let [clause-name (maybe-normalize-token (first x))]\n     (if (coll? k-or-ks)\n       ((set k-or-ks) clause-name)\n       (= k-or-ks clause-name)))))\n\n\n;;; +----------------------------------------------------------------------------------------------------------------+\n;;; |                                                NORMALIZE TOKENS                                                |\n;;; +----------------------------------------------------------------------------------------------------------------+\n\n(declare normalize-tokens)\n\n(defmulti ^:private normalize-mbql-clause-tokens\n  (comp maybe-normalize-token first))\n\n(defmethod normalize-mbql-clause-tokens :aggregation\n  ;; nil options should be removed from aggregation references (`[:aggregation 0]`).\n  [[_ aggregation-index option]]\n  (cond-> [:aggregation aggregation-index]\n    (some? option) (conj option)))\n\n(defmethod normalize-mbql-clause-tokens :expression\n  ;; For expression references (`[:expression \\\"my_expression\\\"]`) keep the arg as is but make sure it is a string.\n  [[_ expression-name]]\n  [:expression (if (keyword? expression-name)\n                 (mbql.u/qualified-name expression-name)\n                 expression-name)])\n\n(defmethod normalize-mbql-clause-tokens :binning-strategy\n  ;; For `:binning-strategy` clauses (which wrap other Field clauses) normalize the strategy-name and recursively\n  ;; normalize the Field it bins.\n  [[_ field strategy-name strategy-param]]\n  (if strategy-param\n    (conj (normalize-mbql-clause-tokens [:binning-strategy field strategy-name]) strategy-param)\n    [:binning-strategy (normalize-tokens field :ignore-path) (maybe-normalize-token strategy-name)]))\n\n(defmethod normalize-mbql-clause-tokens :field\n  [[_ id-or-name opts]]\n  (let [opts (normalize-tokens opts :ignore-path)]\n    [:field\n     id-or-name\n     (cond-> opts\n       (:base-type opts)     (update :base-type keyword)\n       (:temporal-unit opts) (update :temporal-unit keyword)\n       (:binning opts)       (update :binning (fn [binning]\n                                                (cond-> binning\n                                                  (:strategy binning) (update :strategy keyword)))))]))\n\n(defmethod normalize-mbql-clause-tokens :field-literal\n  ;; Similarly, for Field literals, keep the arg as-is, but make sure it is a string.\"\n  [[_ field-name field-type]]\n  [:field-literal\n   (if (keyword? field-name)\n     (mbql.u/qualified-name field-name)\n     field-name)\n   (keyword field-type)])\n\n(defmethod normalize-mbql-clause-tokens :datetime-field\n  ;; Datetime fields look like `[:datetime-field <field> <unit>]` or `[:datetime-field <field> :as <unit>]`\n  ;; normalize the unit, and `:as` (if present) tokens, and the Field.\"\n  [[_ field as-or-unit maybe-unit]]\n  (if maybe-unit\n    [:datetime-field (normalize-tokens field :ignore-path) :as (maybe-normalize-token maybe-unit)]\n    [:datetime-field (normalize-tokens field :ignore-path) (maybe-normalize-token as-or-unit)]))\n\n(defmethod normalize-mbql-clause-tokens :time-interval\n  ;; `time-interval`'s `unit` should get normalized, and `amount` if it's not an integer.\"\n  [[_ field amount unit options]]\n  (if options\n    (conj (normalize-mbql-clause-tokens [:time-interval field amount unit])\n          (normalize-tokens options :ignore-path))\n    [:time-interval\n     (normalize-tokens field :ignore-path)\n     (if (integer? amount)\n       amount\n       (maybe-normalize-token amount))\n     (maybe-normalize-token unit)]))\n\n(defmethod normalize-mbql-clause-tokens :relative-datetime\n  ;; Normalize a `relative-datetime` clause. `relative-datetime` comes in two flavors:\n  ;;\n  ;;   [:relative-datetime :current]\n  ;;   [:relative-datetime -10 :day] ; amount & unit\"\n  [[_ amount unit]]\n  (if unit\n    [:relative-datetime amount (maybe-normalize-token unit)]\n    [:relative-datetime :current]))\n\n(defmethod normalize-mbql-clause-tokens :interval\n  [[_ amount unit]]\n  [:interval amount (maybe-normalize-token unit)])\n\n(defmethod normalize-mbql-clause-tokens :datetime-add\n  [[_ field amount unit]]\n  [:datetime-add (normalize-tokens field :ignore-path) amount (maybe-normalize-token unit)])\n\n(defmethod normalize-mbql-clause-tokens :datetime-subtract\n  [[_ field amount unit]]\n  [:datetime-subtract (normalize-tokens field :ignore-path) amount (maybe-normalize-token unit)])\n\n(defmethod normalize-mbql-clause-tokens :get-week\n  [[_ field mode]]\n  (if mode\n    [:get-week (normalize-tokens field :ignore-path) (maybe-normalize-token mode)]\n    [:get-week (normalize-tokens field :ignore-path)]))\n\n(defmethod normalize-mbql-clause-tokens :temporal-extract\n  [[_ field unit mode]]\n  (if mode\n    [:temporal-extract (normalize-tokens field :ignore-path) (maybe-normalize-token unit) (maybe-normalize-token mode)]\n    [:temporal-extract (normalize-tokens field :ignore-path) (maybe-normalize-token unit)]))\n\n(defmethod normalize-mbql-clause-tokens :datetime-diff\n  [[_ x y unit]]\n  [:datetime-diff\n   (normalize-tokens x :ignore-path)\n   (normalize-tokens y :ignore-path)\n   (maybe-normalize-token unit)])\n\n(defmethod normalize-mbql-clause-tokens :value\n  ;; The args of a `value` clause shouldn't be normalized.\n  ;; See https://github.com/metabase/metabase/issues/23354 for details\n  [[_ value info]]\n  [:value value info])\n\n(defmethod normalize-mbql-clause-tokens :default\n  ;; MBQL clauses by default are recursively normalized.\n  ;; This includes the clause name (e.g. `[\\\"COUNT\\\" ...]` becomes `[:count ...]`) and args.\n  [[clause-name & args]]\n  (into [(maybe-normalize-token clause-name)] (map #(normalize-tokens % :ignore-path)) args))\n\n(defn- aggregation-subclause?\n  [x]\n  (or (when ((some-fn keyword? string?) x)\n        (#{:avg :count :cum-count :distinct :stddev :sum :min :max :+ :- :/ :*\n           :sum-where :count-where :share :var :median :percentile}\n         (maybe-normalize-token x)))\n      (when (mbql-clause? x)\n        (aggregation-subclause? (first x)))))\n\n(defn- normalize-ag-clause-tokens\n  \"For old-style aggregations like `{:aggregation :count}` make sure we normalize the ag type (`:count`). Other wacky\n  clauses like `{:aggregation [:count :count]}` need to be handled as well :(\"\n  [ag-clause]\n  (cond\n    ;; something like {:aggregations :count}\n    ((some-fn keyword? string?) ag-clause)\n    (maybe-normalize-token ag-clause)\n\n    ;; named aggregation ([:named <ag> <name>])\n    (is-clause? :named ag-clause)\n    (let [[_ wrapped-ag & more] ag-clause]\n      (into [:named (normalize-ag-clause-tokens wrapped-ag)] more))\n\n    ;; something wack like {:aggregations [:count [:sum 10]]} or {:aggregations [:count :count]}\n    (when (mbql-clause? ag-clause)\n      (aggregation-subclause? (second ag-clause)))\n    (mapv normalize-ag-clause-tokens ag-clause)\n\n    :else\n    (normalize-tokens ag-clause :ignore-path)))\n\n(defn- normalize-expressions-tokens\n  \"For expressions, we don't want to normalize the name of the expression; keep that as is, and make it a string;\n   normalize the definitions as normal.\"\n  [expressions-clause]\n  (into {} (for [[expression-name definition] expressions-clause]\n             [(mbql.u/qualified-name expression-name)\n              (normalize-tokens definition :ignore-path)])))\n\n(defn- normalize-order-by-tokens\n  \"Normalize tokens in the order-by clause, which can have different syntax when using MBQL 95 or 98\n  rules (`[<field> :asc]` vs `[:asc <field>]`, for example).\"\n  [clauses]\n  (vec (for [subclause clauses]\n         (if (mbql-clause? subclause)\n           ;; MBQL 98+ [direction field] style: normalize as normal\n           (normalize-mbql-clause-tokens subclause)\n           ;; otherwise it's MBQL 95 [field direction] style: flip the args and *then* normalize the clause. And then\n           ;; flip it back to put it back the way we found it.\n           (reverse (normalize-mbql-clause-tokens (reverse subclause)))))))\n\n(defn- template-tag-definition-key->transform-fn\n  \"Get the function that should be used to transform values for normalized key `k` in a template tag definition.\"\n  [k]\n  (get {:default     identity\n        :type        maybe-normalize-token\n        :widget-type maybe-normalize-token}\n       k\n       ;; if there's not a special transform function for the key in the map above, just wrap the key-value\n       ;; pair in a dummy map and let [[normalize-tokens]] take care of it. Then unwrap\n       (fn [v]\n         (-> (normalize-tokens {k v} :ignore-path)\n             (get k)))))\n\n(defn- normalize-template-tag-definition\n  \"For a template tag definition, normalize all the keys appropriately.\"\n  [tag-definition]\n  (let [tag-def (into\n                 {}\n                 (map (fn [[k v]]\n                        (let [k            (maybe-normalize-token k)\n                              transform-fn (template-tag-definition-key->transform-fn k)]\n                          [k (transform-fn v)])))\n                 tag-definition)]\n    ;; `:widget-type` is a required key for Field Filter (dimension) template tags -- see\n    ;; [[metabase.mbql.schema/TemplateTag:FieldFilter]] -- but prior to v42 it wasn't usually included by the\n    ;; frontend. See #20643. If it's not present, just add in `:category` which will make things work they way they\n    ;; did in the past.\n    (cond-> tag-def\n      (and (= (:type tag-def) :dimension)\n           (not (:widget-type tag-def)))\n      (assoc :widget-type :category))))\n\n(defn- normalize-template-tags\n  \"Normalize native-query template tags. Like `expressions` we want to preserve the original name rather than normalize\n  it.\"\n  [template-tags]\n  (into\n   {}\n   (map (fn [[tag-name tag-definition]]\n          (let [tag-name (mbql.u/qualified-name tag-name)]\n            [tag-name\n             (-> (normalize-template-tag-definition tag-definition)\n                 (assoc :name tag-name))])))\n   template-tags))\n\n(defn normalize-query-parameter\n  \"Normalize a parameter in the query `:parameters` list.\"\n  [{:keys [type target id values_source_config], :as param}]\n  (cond-> param\n    id                   (update :id mbql.u/qualified-name)\n    ;; some things that get ran thru here, like dashcard param targets, do not have :type\n    type                 (update :type maybe-normalize-token)\n    target               (update :target #(normalize-tokens % :ignore-path))\n    values_source_config (update-in [:values_source_config :label_field] #(normalize-tokens % :ignore-path))\n    values_source_config (update-in [:values_source_config :value_field] #(normalize-tokens % :ignore-path))))\n\n(defn- normalize-source-query [source-query]\n  (let [{native? :native, :as source-query} (m/map-keys maybe-normalize-token source-query)]\n    (if native?\n      (-> source-query\n          (set/rename-keys {:native :query})\n          (normalize-tokens [:native])\n          (set/rename-keys {:query :native}))\n      (normalize-tokens source-query [:query]))))\n\n(defn- normalize-join [join]\n  ;; path in call to `normalize-tokens` is [:query] so it will normalize `:source-query` as appropriate\n  (let [{:keys [strategy fields alias], :as join} (normalize-tokens join :query)]\n    (cond-> join\n      strategy\n      (update :strategy maybe-normalize-token)\n\n      ((some-fn keyword? string?) fields)\n      (update :fields maybe-normalize-token)\n\n      alias\n      (update :alias mbql.u/qualified-name))))\n\n(declare canonicalize-mbql-clauses)\n\n(defn normalize-source-metadata\n  \"Normalize source/results metadata for a single column.\"\n  [metadata]\n  {:pre [(map? metadata)]}\n  (-> (reduce #(m/update-existing %1 %2 keyword) metadata [:base_type :effective_type :semantic_type :visibility_type :source :unit])\n      (m/update-existing :field_ref (comp canonicalize-mbql-clauses normalize-tokens))\n      (m/update-existing :fingerprint walk/keywordize-keys)))\n\n(defn- normalize-native-query\n  \"For native queries, normalize the top-level keys, and template tags, but nothing else.\"\n  [native-query]\n  (let [native-query (m/map-keys maybe-normalize-token native-query)]\n    (cond-> native-query\n      (seq (:template-tags native-query)) (update :template-tags normalize-template-tags))))\n\n;; TODO - why not make this a multimethod of some sort?\n(def ^:private path->special-token-normalization-fn\n  \"Map of special functions that should be used to perform token normalization for a given path. For example, the\n  `:expressions` key in an MBQL query should preserve the case of the expression names; this custom behavior is\n  defined below.\"\n  {:type            maybe-normalize-token\n   ;; don't normalize native queries\n   :native          normalize-native-query\n   :query           {:aggregation     normalize-ag-clause-tokens\n                     :expressions     normalize-expressions-tokens\n                     :order-by        normalize-order-by-tokens\n                     :source-query    normalize-source-query\n                     :source-metadata {::sequence normalize-source-metadata}\n                     :joins           {::sequence normalize-join}}\n   ;; we smuggle metadata for datasets and want to preserve their \"database\" form vs a normalized form so it matches\n   ;; the style in annotate.clj\n   :info            {:metadata/dataset-metadata identity}\n   :parameters      {::sequence normalize-query-parameter}\n   :context         #(some-> % maybe-normalize-token)\n   :source-metadata {::sequence normalize-source-metadata}\n   :viz-settings    maybe-normalize-token})\n\n(defn normalize-tokens\n  \"Recursively normalize tokens in `x`.\n\n  Every time this function recurses (thru a map value) it adds a new (normalized) key to key path, e.g. `path` will be\n  `[:query :order-by]` when we're in the MBQL order-by clause. If we need to handle these top-level clauses in special\n  ways add a function to `path->special-token-normalization-fn` above.\n\n  In some cases, dealing with the path isn't desirable, but we don't want to accidentally trigger normalization\n  functions (such as accidentally normalizing the `:type` key in something other than the top-level of the query), so\n  by convention please pass `:ignore-path` to avoid accidentally triggering path functions.\"\n  [x & [path]]\n  (let [path       (if (keyword? path)\n                     [path]\n                     (vec path))\n        special-fn (when (seq path)\n                     (get-in path->special-token-normalization-fn path))]\n    (try\n      (cond\n        (fn? special-fn)\n        (special-fn x)\n\n        ;; Skip record types because this query is an `expanded` query, which is not going to play nice here. Hopefully we\n        ;; can remove expanded queries entirely soon.\n        (record? x)\n        x\n\n        ;; maps should just get the keys normalized and then recursively call normalize-tokens on the values.\n        ;; Each recursive call appends to the keypath above so we can handle top-level clauses in a special way if needed\n        (map? x)\n        (into {} (for [[k v] x\n                       :let  [k (maybe-normalize-token k)]]\n                   [k (normalize-tokens v (conj (vec path) k))]))\n\n        ;; MBQL clauses handled above because of special cases\n        (mbql-clause? x)\n        (normalize-mbql-clause-tokens x)\n\n        ;; for non-mbql sequential collections (probably something like the subclauses of :order-by or something like\n        ;; that) recurse on all the args.\n        ;;\n        ;; To signify that we're recursing into a sequential collection, this appends `::sequence` to path\n        (sequential? x)\n        (mapv #(normalize-tokens % (conj (vec path) ::sequence)) x)\n\n        :else\n        x)\n      (catch #?(:clj Throwable :cljs js/Error) e\n        (throw (ex-info (i18n/tru \"Error normalizing form: {0}\" (ex-message e))\n                        {:form x, :path path, :special-fn special-fn}\n                        e))))))\n\n\n;;; +----------------------------------------------------------------------------------------------------------------+\n;;; |                                                  CANONICALIZE                                                  |\n;;; +----------------------------------------------------------------------------------------------------------------+\n\n(defn- wrap-implicit-field-id\n  \"Wrap raw integer Field IDs (i.e., those in an implicit 'field' position) in a `:field` clause if they're not\n  already. Done for MBQL 95 backwards-compatibility. e.g.:\n\n    {:filter [:= 10 20]} ; -> {:filter [:= [:field 10 nil] 20]}\"\n  [field]\n  (if (integer? field)\n    [:field field nil]\n    field))\n\n(defmulti ^:private canonicalize-mbql-clause\n  {:arglists '([clause])}\n  (fn [clause]\n    (when (mbql-clause? clause)\n      (first clause))))\n\n(defmethod canonicalize-mbql-clause :default\n  [clause]\n  clause)\n\n(defn- canonicalize-implicit-field-id\n  \"If `clause` is a raw integer ID wrap it in a `:field` clause. Either way, canonicalize the resulting clause.\"\n  [clause]\n  (canonicalize-mbql-clause (wrap-implicit-field-id clause)))\n\n(defmethod canonicalize-mbql-clause :field\n  [[_ id-or-name opts]]\n  (if (is-clause? :field id-or-name)\n    (let [[_ nested-id-or-name nested-opts] id-or-name]\n      (canonicalize-mbql-clause [:field nested-id-or-name (not-empty (merge nested-opts opts))]))\n    ;; remove empty stuff from the options map. The `remove-empty-clauses` step will further remove empty stuff\n    ;; afterwards\n    [:field id-or-name (not-empty opts)]))\n\n(defmethod canonicalize-mbql-clause :aggregation\n  [[_tag index opts]]\n  (if (empty? opts)\n    [:aggregation index]\n    [:aggregation index opts]))\n\n;;; legacy Field clauses\n\n(defmethod canonicalize-mbql-clause :field-id\n  [[_ id]]\n  ;; if someone is dumb and does something like [:field-id [:field-literal ...]] be nice and fix it for them.\n  (if (mbql-clause? id)\n    (canonicalize-mbql-clause id)\n    [:field id nil]))\n\n(defmethod canonicalize-mbql-clause :field-literal\n  [[_ field-name base-type]]\n  [:field field-name {:base-type base-type}])\n\n(defmethod canonicalize-mbql-clause :fk->\n  [[_ field-1 field-2]]\n  (let [[_ source _]       (canonicalize-implicit-field-id field-1)\n        [_ dest dest-opts] (canonicalize-implicit-field-id field-2)]\n    [:field dest (assoc dest-opts :source-field source)]))\n\n(defmethod canonicalize-mbql-clause :joined-field\n  [[_ join-alias field]]\n  (-> (canonicalize-implicit-field-id field)\n      (mbql.u/assoc-field-options :join-alias join-alias)))\n\n(defmethod canonicalize-mbql-clause :datetime-field\n  [clause]\n  (case (count clause)\n    3\n    (let [[_ field unit] clause]\n      (-> (canonicalize-implicit-field-id field)\n          (mbql.u/with-temporal-unit unit)))\n\n    4\n    (let [[_ field _ unit] clause]\n      (canonicalize-mbql-clause [:datetime-field field unit]))))\n\n(defmethod canonicalize-mbql-clause :binning-strategy\n  [[_ field strategy param binning-options]]\n  (let [[_ id-or-name opts] (canonicalize-implicit-field-id field)]\n    [:field\n     id-or-name\n     (assoc opts :binning (merge {:strategy strategy}\n                                 (when param\n                                   {strategy param})\n                                 binning-options))]))\n\n;;; filter clauses\n\n;; For `and`/`or`/`not` compound filters, recurse on the arg(s), then simplify the whole thing.\n(defn- canonicalize-compound-filter-clause [[filter-name & args]]\n  (mbql.u/simplify-compound-filter\n   (into [filter-name]\n         ;; we need to canonicalize any other mbql clauses that might show up in args here because\n         ;; simplify-compund-filter validates its output :(\n         (map canonicalize-mbql-clause args))))\n\n(doseq [clause-name [:and :or :not]]\n  (defmethod canonicalize-mbql-clause clause-name\n    [clause]\n    (canonicalize-compound-filter-clause clause)))\n\n(defmethod canonicalize-mbql-clause :inside\n  [[_ field-1 field-2 & coordinates]]\n  (into [:inside\n         (canonicalize-implicit-field-id field-1)\n         (canonicalize-implicit-field-id field-2)]\n        coordinates))\n\n(defmethod canonicalize-mbql-clause :time-interval\n  [[_ field & args]]\n  ;; if you specify a `:temporal-unit` for the Field inside a `:time-interval`, remove it. The unit in\n  ;; `:time-interval` takes precedence.\n  (let [field (cond-> (canonicalize-implicit-field-id field)\n                (mbql.u/is-clause? :field field) (mbql.u/update-field-options dissoc :temporal-unit))]\n    (into [:time-interval field] args)))\n\n;; all the other filter types have an implict field ID for the first arg\n;; (e.g. [:= 10 20] gets canonicalized to [:= [:field-id 10] 20]\n(defn- canonicalize-simple-filter-clause\n  [[filter-name first-arg & other-args]]\n  ;; Support legacy expressions like [:> 1 25] where 1 is a field id.\n  (into [filter-name (canonicalize-implicit-field-id first-arg)]\n        (map canonicalize-mbql-clause other-args)))\n\n(doseq [clause-name [:starts-with :ends-with :contains :does-not-contain\n                     := :!= :< :<= :> :>=\n                     :is-empty :not-empty :is-null :not-null\n                     :between]]\n  (defmethod canonicalize-mbql-clause clause-name\n    [clause]\n    (canonicalize-simple-filter-clause clause)))\n\n;;; aggregations/expression subclauses\n\n;; Remove `:rows` type aggregation (long-since deprecated; simpliy means no aggregation) if present\n(defmethod canonicalize-mbql-clause :rows\n  [_]\n  nil)\n\n;; TODO -- if options is empty, should we just unwrap the clause?\n(defmethod canonicalize-mbql-clause :aggregation-options\n  [[_ wrapped-aggregation-clause options]]\n  [:aggregation-options (canonicalize-mbql-clause wrapped-aggregation-clause) options])\n\n;; for legacy `:named` aggregations convert them to a new-style `:aggregation-options` clause.\n;;\n;; 99.99% of clauses should have no options, however if they do and `:use-as-display-name?` is false (default is\n;; true) then generate options to change `:name` rather than `:display-name`\n(defmethod canonicalize-mbql-clause :named\n  [[_ wrapped-ag expr-name & more]]\n  (canonicalize-mbql-clause\n   [:aggregation-options\n    (canonicalize-mbql-clause wrapped-ag)\n    (let [[{:keys [use-as-display-name?]}] more]\n      (if (false? use-as-display-name?)\n        {:name expr-name}\n        {:display-name expr-name}))]))\n\n(defn- canonicalize-count-clause [[clause-name field]]\n  (if field\n    [clause-name (canonicalize-implicit-field-id field)]\n    [clause-name]))\n\n(doseq [clause-name [:count :cum-count]]\n  (defmethod canonicalize-mbql-clause clause-name\n    [clause]\n    (canonicalize-count-clause clause)))\n\n(defn- canonicalize-simple-aggregation-with-field\n  [[clause-name field]]\n  [clause-name (canonicalize-implicit-field-id field)])\n\n(doseq [clause-name [:avg :cum-sum :distinct :stddev :sum :min :max :median :var]]\n  (defmethod canonicalize-mbql-clause clause-name\n    [clause]\n    (canonicalize-simple-aggregation-with-field clause)))\n\n(defmethod canonicalize-mbql-clause :percentile\n  [[_ field percentile]]\n  [:percentile (canonicalize-implicit-field-id field) percentile])\n\n(defn- canonicalize-filtered-aggregation-clause\n  [[clause-name filter-subclause]]\n  [clause-name (canonicalize-mbql-clause filter-subclause)])\n\n(doseq [clause-name [:share :count-where]]\n  (defmethod canonicalize-mbql-clause clause-name\n    [clause]\n    (canonicalize-filtered-aggregation-clause clause)))\n\n(defmethod canonicalize-mbql-clause :sum-where\n  [[_ field filter-subclause]]\n  [:sum-where (canonicalize-mbql-clause field) (canonicalize-mbql-clause filter-subclause)])\n\n(defmethod canonicalize-mbql-clause :case\n  [[_ clauses options]]\n  (if options\n    (conj (canonicalize-mbql-clause [:case clauses])\n          (normalize-tokens options :ignore-path))\n    [:case (vec (for [[pred expr] clauses]\n                  [(canonicalize-mbql-clause pred) (canonicalize-mbql-clause expr)]))]))\n\n(defmethod canonicalize-mbql-clause :substring\n  [[_ arg start & more]]\n  (into [:substring\n         (canonicalize-mbql-clause arg)\n         ;; 0 indexes were allowed in the past but we are now enforcing this rule in MBQL.\n         ;; This allows stored queries with literal 0 in the index to work.\n         (if (= 0 start) 1 (canonicalize-mbql-clause start))]\n        (map canonicalize-mbql-clause more)))\n\n;;; top-level key canonicalization\n\n(defn- canonicalize-mbql-clauses\n  \"Walk an `mbql-query` an canonicalize non-top-level clauses like `:fk->`.\"\n  [mbql-query]\n  (walk/prewalk\n   (fn [x]\n     (cond\n       (map? x)\n       (m/map-vals canonicalize-mbql-clauses x)\n\n       (not (mbql-clause? x))\n       x\n\n       :else\n       (try\n         (canonicalize-mbql-clause x)\n         (catch #?(:clj Throwable :cljs js/Error) e\n           (log/error (i18n/tru \"Invalid clause:\") x)\n           (throw (ex-info (i18n/tru \"Invalid MBQL clause: {0}\" (ex-message e))\n                           {:clause x}\n                           e))))))\n   mbql-query))\n\n(defn- wrap-single-aggregations\n  \"Convert old MBQL 95 single-aggregations like `{:aggregation :count}` or `{:aggregation [:count]}` to MBQL 98+\n  multiple-aggregation syntax (e.g. `{:aggregation [[:count]]}`).\"\n  [aggregations]\n  (mbql.match/replace aggregations\n    seq? (recur (vec &match))\n\n    ;; something like {:aggregations :count} -- MBQL 95 single aggregation\n    keyword?\n    [[&match]]\n\n    ;; special-case: MBQL 98 multiple aggregations using unwrapped :count or :rows\n    ;; e.g. {:aggregations [:count [:sum 10]]} or {:aggregations [:count :count]}\n    [(_ :guard (every-pred keyword? (complement #{:named :+ :- :* :/})))\n     (_ :guard aggregation-subclause?)\n     & _]\n    (vec (reduce concat (map wrap-single-aggregations aggregations)))\n\n    ;; something like {:aggregations [:sum 10]} -- MBQL 95 single aggregation\n    [(_ :guard keyword?) & _]\n    [&match]\n\n    _\n    &match))\n\n(defn- canonicalize-aggregations\n  \"Canonicalize subclauses (see above) and make sure `:aggregation` is a sequence of clauses instead of a single\n  clause.\"\n  [aggregations]\n  (->> (wrap-single-aggregations aggregations)\n       (keep canonicalize-mbql-clauses)\n       vec))\n\n(defn- canonicalize-breakouts [breakouts]\n  (if (mbql-clause? breakouts)\n    (recur [breakouts])\n    (not-empty (mapv wrap-implicit-field-id breakouts))))\n\n(defn- canonicalize-order-by\n  \"Make sure order by clauses like `[:asc 10]` get `:field-id` added where appropriate, e.g. `[:asc [:field-id 10]]`\"\n  [clauses]\n  (mbql.match/replace clauses\n    seq? (recur (vec &match))\n\n    ;; MBQL 95 reversed [<field> <direction>] clause\n    [field :asc]        (recur [:asc field])\n    [field :desc]       (recur [:desc field])\n    [field :ascending]  (recur [:asc field])\n    [field :descending] (recur [:desc field])\n\n    ;; MBQL 95 names but MBQL 98+ reversed syntax\n    [:ascending field]  (recur [:asc field])\n    [:descending field] (recur [:desc field])\n\n    [:asc field]  [:asc  (canonicalize-implicit-field-id field)]\n    [:desc field] [:desc (canonicalize-implicit-field-id field)]\n\n    ;; this case should be the first one hit when we come in with a vector of clauses e.g. [[:asc 1] [:desc 2]]\n    [& clauses] (vec (distinct (map canonicalize-order-by clauses)))))\n\n(declare canonicalize-inner-mbql-query)\n\n(defn- canonicalize-template-tag [{:keys [dimension], :as tag}]\n  (cond-> tag\n    dimension (update :dimension canonicalize-mbql-clause)))\n\n(defn- canonicalize-template-tags [tags]\n  (into {} (for [[tag-name tag] tags]\n             [tag-name (canonicalize-template-tag tag)])))\n\n(defn- canonicalize-native-query [{:keys [template-tags], :as native-query}]\n  (cond-> native-query\n    template-tags (update :template-tags canonicalize-template-tags)))\n\n(defn- canonicalize-source-query [{native? :native, :as source-query}]\n  (cond-> source-query\n    (not native?) canonicalize-inner-mbql-query\n    native?       canonicalize-native-query))\n\n(defn- non-empty? [x]\n  (if (coll? x)\n    (seq x)\n    (some? x)))\n\n(defn- canonicalize-top-level-mbql-clauses\n  \"Perform specific steps to canonicalize the various top-level clauses in an MBQL query.\"\n  [mbql-query]\n  (cond-> mbql-query\n    (non-empty? (:aggregation  mbql-query)) (update :aggregation  canonicalize-aggregations)\n    (non-empty? (:breakout     mbql-query)) (update :breakout     canonicalize-breakouts)\n    (non-empty? (:fields       mbql-query)) (update :fields       (partial mapv wrap-implicit-field-id))\n    (non-empty? (:order-by     mbql-query)) (update :order-by     canonicalize-order-by)\n    (non-empty? (:source-query mbql-query)) (update :source-query canonicalize-source-query)))\n\n(def ^:private ^{:arglists '([query])} canonicalize-inner-mbql-query\n  (comp canonicalize-mbql-clauses canonicalize-top-level-mbql-clauses))\n\n(defn- move-source-metadata-to-mbql-query\n  \"In Dashboard 0.33.0 `:source-metadata` about resolved queries is added to the 'inner' MBQL query rather than to the\n  top-level; if we encounter the old style, move it to the appropriate location.\"\n  [{:keys [source-metadata], :as query}]\n  (-> query\n      (dissoc :source-metadata)\n      (assoc-in [:query :source-metadata] source-metadata)))\n\n(defn- canonicalize\n  \"Canonicalize a query [MBQL query], rewriting the query as if you perfectly followed the recommended style guides for\n  writing MBQL. Does things like removes unneeded and empty clauses, converts older MBQL '95 syntax to MBQL '98, etc.\"\n  [{:keys [query parameters source-metadata native], :as outer-query}]\n  (try\n    (cond-> outer-query\n      source-metadata move-source-metadata-to-mbql-query\n      query           (update :query canonicalize-inner-mbql-query)\n      parameters      (update :parameters (partial mapv canonicalize-mbql-clauses))\n      native          (update :native canonicalize-native-query)\n      true            canonicalize-mbql-clauses)\n    (catch #?(:clj Throwable :cljs js/Error) e\n      (throw (ex-info (i18n/tru \"Error canonicalizing query: {0}\" (ex-message e))\n                      {:query query}\n                      e)))))\n\n\n;;; +----------------------------------------------------------------------------------------------------------------+\n;;; |                                          WHOLE-QUERY TRANSFORMATIONS                                           |\n;;; +----------------------------------------------------------------------------------------------------------------+\n\n(defn- remove-breakout-fields-from-fields\n  \"Remove any Fields specified in both `:breakout` and `:fields` from `:fields`; it is implied that any breakout Field\n  will be returned, specifying it in both would imply it is to be returned twice, which tends to cause confusion for\n  the QP and drivers. (This is done to work around historic bugs with the way queries were generated on the frontend;\n  I'm not sure this behavior makes sense, but removing it would break existing queries.)\n\n  We will remove either exact matches:\n\n    {:breakout [[:field-id 10]], :fields [[:field-id 10]]} ; -> {:breakout [[:field-id 10]]}\n\n  or unbucketed matches:\n\n    {:breakout [[:datetime-field [:field-id 10] :month]], :fields [[:field-id 10]]}\n    ;; -> {:breakout [[:field-id 10]]}\"\n  [{{:keys [breakout fields]} :query, :as query}]\n  (if-not (and (seq breakout) (seq fields))\n    query\n    ;; get a set of all Field clauses (of any type) in the breakout. For temporal-bucketed fields, we'll include both\n    ;; the bucketed `[:datetime-field <field> ...]` clause and the `<field>` clause it wraps\n    (let [breakout-fields (set (reduce concat (mbql.match/match breakout\n                                                [:field id-or-name opts]\n                                                [&match\n                                                 [:field id-or-name (dissoc opts :temporal-unit)]])))]\n      ;; now remove all the Fields in `:fields` that match the ones in the set\n      (update-in query [:query :fields] (comp vec (partial remove breakout-fields))))))\n\n(defn- perform-whole-query-transformations\n  \"Perform transformations that operate on the query as a whole, making sure the structure as a whole is logical and\n  consistent.\"\n  [query]\n  (try\n    (remove-breakout-fields-from-fields query)\n    (catch #?(:clj Throwable :cljs js/Error) e\n      (throw (ex-info (i18n/tru \"Error performing whole query transformations\")\n                      {:query query}\n                      e)))))\n\n;;; +----------------------------------------------------------------------------------------------------------------+\n;;; |                                             REMOVING EMPTY CLAUSES                                             |\n;;; +----------------------------------------------------------------------------------------------------------------+\n\n(declare remove-empty-clauses)\n\n(defn- remove-empty-clauses-in-map [m path]\n  (let [m (into (empty m) (for [[k v] m\n                                :let  [v (remove-empty-clauses v (conj path k))]\n                                :when (some? v)]\n                            [k v]))]\n    (when (seq m)\n      m)))\n\n(defn- remove-empty-clauses-in-sequence [xs path]\n  (let [xs (mapv #(remove-empty-clauses % (conj path ::sequence))\n                 xs)]\n    (when (some some? xs)\n      xs)))\n\n(defn- remove-empty-clauses-in-join [join]\n  (remove-empty-clauses join [:query]))\n\n(defn- remove-empty-clauses-in-source-query [{native? :native, :as source-query}]\n  (if native?\n    (-> source-query\n        (set/rename-keys {:native :query})\n        (remove-empty-clauses [:native])\n        (set/rename-keys {:query :native}))\n    (remove-empty-clauses source-query [:query])))\n\n(def ^:private path->special-remove-empty-clauses-fn\n  {:native identity\n   :query  {:source-query remove-empty-clauses-in-source-query\n            :joins        {::sequence remove-empty-clauses-in-join}}\n   :viz-settings identity})\n\n(defn- remove-empty-clauses\n  \"Remove any empty or `nil` clauses in a query.\"\n  ([query]\n   (remove-empty-clauses query []))\n\n  ([x path]\n   (try\n     (let [special-fn (when (seq path)\n                        (get-in path->special-remove-empty-clauses-fn path))]\n       (cond\n         (fn? special-fn) (special-fn x)\n         (record? x)      x\n         (map? x)         (remove-empty-clauses-in-map x path)\n         (sequential? x)  (remove-empty-clauses-in-sequence x path)\n         :else            x))\n     (catch #?(:clj Throwable :cljs js/Error) e\n       (throw (ex-info \"Error removing empty clauses from form.\"\n                       {:form x, :path path}\n                       e))))))\n\n\n;;; +----------------------------------------------------------------------------------------------------------------+\n;;; |                                            PUTTING IT ALL TOGETHER                                             |\n;;; +----------------------------------------------------------------------------------------------------------------+\n\n(def ^{:arglists '([outer-query])} normalize\n  \"Normalize the tokens in a Dashboard query (i.e., make them all `lisp-case` keywords), rewrite deprecated clauses as\n  up-to-date MBQL 2000, and remove empty clauses.\"\n  (let [normalize* (comp remove-empty-clauses\n                         perform-whole-query-transformations\n                         canonicalize\n                         normalize-tokens)]\n    (fn [query]\n      (try\n        (normalize* query)\n        (catch #?(:clj Throwable :cljs js/Error) e\n          (throw (ex-info (i18n/tru \"Error normalizing query: {0}\" (ex-message e))\n                          {:query query}\n                          e)))))))\n\n(defn normalize-fragment\n  \"Normalize just a specific fragment of a query, such as just the inner MBQL part or just a filter clause. `path` is\n  where this fragment would normally live in a full query.\n\n    (normalize-fragment [:query :filter] [\\\"=\\\" 100 200])\n    ;;-> [:= [:field-id 100] 200]\"\n  {:style/indent 1}\n  [path x]\n  (if-not (seq path)\n    (normalize x)\n    (get (normalize-fragment (butlast path) {(last path) x}) (last path))))\n","~:reader-features",["^K",["~:cljs-release","~:cljs-dev","~:cljs"]],"~:cljc",true,"~:source-map-compact",["^ ","mappings","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","names",["metabase.mbql.normalize/mbql-clause?","x","and__5043__auto__","cljs.core/sequential?","cljs.core/map-entry?","cljs.core.some_fn","cljs.core/keyword?","cljs.core/string?","cljs.core/first","metabase.mbql.normalize/maybe-normalize-token","metabase.mbql.util/normalize-token","metabase.mbql.normalize/is-clause?","k-or-ks","clause-name","cljs.core/coll?","fexpr__80515","cljs.core/set","cljs.core._EQ_","js/metabase","js/metabase.mbql","js/metabase.mbql.normalize","js/metabase.mbql.normalize.normalize-mbql-clause-tokens","method-table__5642__auto__","cljs.core.atom","prefer-table__5643__auto__","method-cache__5644__auto__","cached-hierarchy__5645__auto__","hierarchy__5646__auto__","cljs.core.get","fexpr__80517","cljs.core/MultiFn","cljs.core.symbol","metabase.mbql.normalize/normalize-mbql-clause-tokens","cljs.core.comp","p__80518","vec__80519","cljs.core.nth","_","aggregation-index","option","G__80522","cljs.core.conj","p__80523","vec__80524","expression-name","cljs.core/Keyword","metabase.mbql.util/qualified-name","p__80528","vec__80529","field","strategy-name","strategy-param","metabase.mbql.normalize/normalize-tokens","p__80532","vec__80533","id-or-name","opts","G__80536","cljs.core.update","cljs.core/keyword","binning","G__80537","p__80538","vec__80539","field-name","field-type","cljs.core.keyword","p__80542","vec__80543","as-or-unit","maybe-unit","p__80547","vec__80548","amount","unit","options","cljs.core/integer?","p__80556","vec__80557","p__80560","vec__80561","p__80564","vec__80565","p__80568","vec__80569","p__80572","vec__80573","mode","p__80576","vec__80577","p__80580","vec__80581","y","p__80584","vec__80585","value","info","p__80589","vec__80590","seq__80591","cljs.core/seq","first__80592","cljs.core/next","args","cljs.core.into","p1__80588#","cljs.core.map","metabase.mbql.normalize/aggregation-subclause?","or__5045__auto__","G__80595","fexpr__80594","G__80596","metabase.mbql.normalize/normalize-ag-clause-tokens","ag-clause","vec__80598","seq__80599","first__80600","wrapped-ag","more","cljs.core/second","cljs.core.mapv","metabase.mbql.normalize/normalize-expressions-tokens","expressions-clause","iter__5523__auto__","s__80614","cljs.core/LazySeq","temp__5804__auto__","cljs.core/chunked-seq?","c__5521__auto__","size__5522__auto__","cljs.core/count","b__80616","cljs.core/chunk-buffer","i__80615","vec__80622","cljs.core/-nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__80613","cljs.core/chunk-rest","vec__80625","cljs.core/cons","cljs.core/rest","definition","metabase.mbql.normalize/normalize-order-by-tokens","clauses","cljs.core/vec","s__80631","b__80633","i__80632","iter__80630","subclause","cljs.core/reverse","metabase.mbql.normalize/template-tag-definition-key->transform-fn","k","cljs.core/identity","v","G__80636","G__80637","metabase.mbql.normalize/normalize-template-tag-definition","tag-definition","tag-def","p__80641","vec__80645","transform-fn","G__80648","cljs.core/not","cljs.core.assoc","metabase.mbql.normalize/normalize-template-tags","template-tags","p__80664","vec__80665","tag-name","p__80671","map__80673","cljs.core/--destructure-map","metabase.mbql.normalize/normalize-query-parameter","type","target","id","values_source_config","param","G__80677","p1__80668#","p1__80669#","cljs.core.update_in","p1__80670#","metabase.mbql.normalize/normalize-source-query","source-query","map__80681","native?","medley.core/map-keys","clojure.set/rename-keys","G__80682","G__80683","G__80684","G__80685","metabase.mbql.normalize/normalize-join","join","map__80687","strategy","fields","alias","G__80701","js/Error","metabase.mbql.normalize/normalize-source-metadata","metadata","cljs.core/map?","p1__80704#","p2__80705#","cljs.core.reduce","medley.core.update_existing","metabase.mbql.normalize/canonicalize-mbql-clauses","clojure.walk/keywordize-keys","metabase.mbql.normalize/normalize-native-query","native-query","G__80706","p1__80708#","metabase.mbql.normalize/path->special-token-normalization-fn","G__80710","var_args","args__5775__auto__","len__5769__auto__","i__5770__auto__","argseq__5776__auto__","cljs.core/IndexedSeq","p__80718","vec__80719","seq80713","G__80714","self__5754__auto__","path","special-fn","cljs.core.get_in","e80723","cljs.core/fn?","cljs.core/record?","s__80726","b__80728","i__80727","vec__80732","iter__80725","vec__80735","metabase.mbql.normalize.normalize_tokens","p1__80712#","e","cljs.core.ex_info","metabase.shared.util.i18n.js_i18n","cljs.core/ex-message","metabase.mbql.normalize/wrap-implicit-field-id","js/metabase.mbql.normalize.canonicalize-mbql-clause","fexpr__80749","metabase.mbql.normalize/canonicalize-mbql-clause","clause","metabase.mbql.normalize/canonicalize-implicit-field-id","p__80753","vec__80754","vec__80757","nested-id-or-name","nested-opts","cljs.core/not-empty","cljs.core.merge","p__80764","vec__80765","_tag","index","cljs.core/empty?","p__80770","vec__80771","p__80775","vec__80778","base-type","p__80782","vec__80785","field-1","field-2","vec__80788","vec__80791","source","dest","dest-opts","p__80794","vec__80795","join-alias","metabase.mbql.util.assoc_field_options","G__80798","vec__80799","metabase.mbql.util/with-temporal-unit","vec__80802","p__80808","vec__80809","binning-options","vec__80812","p__80822","vec__80823","seq__80824","first__80825","metabase.mbql.normalize/canonicalize-compound-filter-clause","filter-name","metabase.mbql.util/simplify-compound-filter","seq__80826","chunk__80827","count__80828","i__80829","c__5568__auto__","cljs.core/chunk-first","p__80847","vec__80848","seq__80849","first__80850","coordinates","p__80853","vec__80859","seq__80860","first__80861","G__80862","metabase.mbql.util/is-clause?","metabase.mbql.util.update_field_options","cljs.core/dissoc","p__80866","vec__80867","seq__80868","first__80869","metabase.mbql.normalize/canonicalize-simple-filter-clause","first-arg","other-args","seq__80871","chunk__80872","count__80873","i__80874","p__80897","vec__80898","wrapped-aggregation-clause","p__80903","vec__80904","seq__80905","first__80906","expr-name","vec__80909","map__80912","use-as-display-name?","p__80918","vec__80922","metabase.mbql.normalize/canonicalize-count-clause","seq__80926","chunk__80927","count__80928","i__80929","p__80953","vec__80955","metabase.mbql.normalize/canonicalize-simple-aggregation-with-field","seq__80962","chunk__80963","count__80964","i__80965","p__80994","vec__80995","percentile","p__81002","vec__81003","metabase.mbql.normalize/canonicalize-filtered-aggregation-clause","filter-subclause","seq__81007","chunk__81008","count__81009","i__81010","p__81027","vec__81028","p__81033","vec__81034","s__81041","b__81043","i__81042","vec__81046","iter__81040","vec__81050","pred","expr","p__81054","vec__81055","seq__81056","first__81057","arg","start","mbql-query","clojure.walk/prewalk","medley.core.map_vals","e81063","level__47389__auto__","metabase.util.log/glogi-level","logger__47390__auto__","metabase.util.log/is-loggable?","x__47391__auto__","lambdaisland.glogi.log","cljs.core.print_str","metabase.shared.util.i18n/js-i18n","metabase.mbql.normalize/wrap-single-aggregations","aggregations","&parents","&match","fexpr__81105","metabase.mbql.util.match.impl/match-with-pred-or-class","replace-81072","cljs.core.match/backtrack","e81091","e__62528__auto__","fexpr__81104","e81093","cljs.core/vector?","&match_left__81082","cljs.core.subvec","&match_left__81082_0__81084","&match_left__81082_1__81085","e81103","e81102","e81101","e81094","&match_left__81087","&match_left__81087_0__81089","e81097","e81096","e81095","cljs.core/seq?","cljs.core.every_pred","cljs.core/complement","cljs.core/concat","metabase.mbql.normalize/canonicalize-aggregations","cljs.core.keep","metabase.mbql.normalize/canonicalize-breakouts","breakouts","metabase.mbql.normalize/canonicalize-order-by","fexpr__81147","replace-81113","e81121","&match_1__81118","cljs.core/keyword-identical?","e81128","e81129","e81130","e81131","&match_0__81117","e81132","e81133","e81135","e81136","e81122","&match_left__81119","&match_right__81120","e81127","e81126","e81123","metabase.mbql.util.match.impl/replace-in-collection","cljs.core.distinct","p__81150","map__81151","metabase.mbql.normalize/canonicalize-template-tag","dimension","tag","G__81152","metabase.mbql.normalize/canonicalize-template-tags","tags","s__81154","b__81156","i__81155","vec__81159","iter__81153","vec__81163","p__81167","map__81168","metabase.mbql.normalize/canonicalize-native-query","G__81169","p__81170","map__81171","metabase.mbql.normalize/canonicalize-source-query","G__81172","metabase.mbql.normalize/canonicalize-inner-mbql-query","metabase.mbql.normalize/non-empty?","metabase.mbql.normalize/canonicalize-top-level-mbql-clauses","G__81175","cljs.core.partial","cljs.core/mapv","p__81178","map__81179","metabase.mbql.normalize/move-source-metadata-to-mbql-query","source-metadata","query","cljs.core.dissoc","cljs.core/assoc-in","p__81180","map__81181","metabase.mbql.normalize/canonicalize","parameters","native","outer-query","e81183","G__81184","p__81189","map__81190","map__81191","metabase.mbql.normalize/remove-breakout-fields-from-fields","breakout","breakout-fields","cljs.core.filter","cljs.core/some?","&match_0__81196","e81205","e81199","metabase.mbql.util.match.impl/match-in-collection","match-81193","cljs.core/remove","metabase.mbql.normalize/perform-whole-query-transformations","e81206","metabase.mbql.normalize/remove-empty-clauses-in-map","m","cljs.core/empty","s__81209","b__81211","i__81210","vec__81216","iter__81208","vec__81221","G__81219","G__81220","G__81224","G__81225","metabase.mbql.normalize/remove-empty-clauses","metabase.mbql.normalize/remove-empty-clauses-in-sequence","xs","p1__81227#","G__81229","G__81230","cljs.core/some","metabase.mbql.normalize/remove-empty-clauses-in-join","G__81232","G__81233","p__81235","map__81236","metabase.mbql.normalize/remove-empty-clauses-in-source-query","G__81238","G__81239","G__81240","G__81241","metabase.mbql.normalize/path->special-remove-empty-clauses-fn","G__81247","metabase.mbql.normalize.remove_empty_clauses","e81250","metabase.mbql.normalize/normalize","normalize*","e81252","metabase.mbql.normalize/normalize-fragment","G__81253","G__81254","cljs.core/butlast","cljs.core/last"]],"~:used-vars",["^K",["~$metabase.mbql.normalize/canonicalize-filtered-aggregation-clause","~$cljs.core/--destructure-map","~$metabase.mbql.normalize/canonicalize-mbql-clause","~$cljs.core/keep","~$metabase.mbql.normalize/normalize-source-metadata","~$cljs.core/some?","~$metabase.mbql.normalize/remove-empty-clauses-in-sequence","~$cljs.core.match/backtrack","~$metabase.mbql.normalize/normalize-mbql-clause-tokens","~$cljs.core/comp","~$cljs.core/rest","~$metabase.mbql.normalize/canonicalize","~$metabase.mbql.normalize/normalize-order-by-tokens","~$cljs.core/keyword","~$metabase.mbql.util/with-temporal-unit","~$cljs.core/ex-message","~$metabase.mbql.normalize/normalize-tokens","~$js/metabase.mbql.normalize","~$cljs.core/MultiFn","~$cljs.core/sequential?","~$cljs.core/keyword?","~$metabase.mbql.normalize/wrap-implicit-field-id","~$metabase.mbql.util/simplify-compound-filter","~$metabase.mbql.normalize/remove-empty-clauses","~$metabase.mbql.normalize/canonicalize-mbql-clauses","~$metabase.mbql.normalize/perform-whole-query-transformations","~$cljs.core/vector?","~$metabase.mbql.util/assoc-field-options","~$metabase.mbql.normalize/remove-empty-clauses-in-map","~$cljs.core/filter","~$cljs.core/=","~$metabase.mbql.normalize/move-source-metadata-to-mbql-query","~$cljs.core/partial","~$clojure.walk/prewalk","~$cljs.core/IndexedSeq","~$metabase.mbql.normalize/remove-empty-clauses-in-source-query","~$metabase.mbql.normalize/canonicalize-template-tags","~$metabase.mbql.normalize/canonicalize-compound-filter-clause","~$cljs.core/count","~$metabase.mbql.normalize/canonicalize-aggregations","~$cljs.core/reduce","~$cljs.core/seq","~$metabase.mbql.normalize/maybe-normalize-token","~$cljs.core/chunk-first","~$cljs.core/identity","~$cljs.core/Keyword","~$metabase.mbql.normalize/normalize-native-query","~$metabase.mbql.normalize/is-clause?","~$medley.core/map-keys","~$cljs.core/map-entry?","~$cljs.core/last","~$cljs.core/chunk","~$cljs.core/mapv","~$metabase.mbql.normalize/normalize-template-tag-definition","~$metabase.mbql.util/is-clause?","~$cljs.core/distinct","~$cljs.core/string?","~$cljs.core/dissoc","~$cljs.core/keyword-identical?","~$cljs.core/LazySeq","~$cljs.core/chunk-rest","~$lambdaisland.glogi/log","~$cljs.core/atom","~$metabase.mbql.util.match.impl/replace-in-collection","~$metabase.mbql.normalize/path->special-token-normalization-fn","~$cljs.core/concat","~$metabase.util.log/is-loggable?","~$cljs.core/set","~$cljs.core/empty?","~$cljs.core/into","~$cljs.core/map?","~$metabase.mbql.normalize/canonicalize-top-level-mbql-clauses","~$cljs.core/conj","~$metabase.mbql.normalize/mbql-clause?","~$cljs.core/update","~$cljs.core/map","~$metabase.mbql.normalize/canonicalize-simple-filter-clause","~$metabase.mbql.normalize/normalize","~$metabase.mbql.normalize/canonicalize-template-tag","~$cljs.core/fn?","~$metabase.mbql.normalize/normalize-expressions-tokens","~$medley.core/update-existing","~$cljs.core/get-in","~$metabase.mbql.normalize/normalize-fragment","~$metabase.mbql.normalize/canonicalize-simple-aggregation-with-field","~$cljs.core/empty","~$clojure.set/rename-keys","~$metabase.mbql.normalize/canonicalize-breakouts","~$cljs.core/-add-method","~$medley.core/map-vals","~$cljs.core/get","~$metabase.mbql.normalize/remove-empty-clauses-in-join","~$cljs.core/integer?","~$js/metabase.mbql.normalize.canonicalize-mbql-clause","~$cljs.core/chunk-append","~$cljs.core/-nth","~$cljs.core/remove","~$metabase.mbql.normalize/canonicalize-native-query","~$cljs.core/not-empty","~$metabase.util.log/glogi-level","~$metabase.mbql.normalize/non-empty?","~$cljs.core/symbol","~$metabase.mbql.util/normalize-token","~$metabase.mbql.normalize/template-tag-definition-key->transform-fn","~$cljs.core/record?","~$metabase.mbql.util/qualified-name","~$cljs.core/subvec","~$metabase.shared.util.i18n/js-i18n","~$metabase.mbql.util/update-field-options","~$cljs.core/nth","~$cljs.core/ex-info","~$cljs.core/second","~$cljs.core/next","~$cljs.core/vec","~$metabase.mbql.normalize/path->special-remove-empty-clauses-fn","~$cljs.core/chunk-cons","~$cljs.core/not","~$cljs.core/complement","~$cljs.core/cons","~$js/metabase.mbql.normalize.normalize-mbql-clause-tokens","~$cljs.core/assoc","~$metabase.mbql.util.match.impl/match-with-pred-or-class","~$js/metabase","~$cljs.core/assoc-in","~$cljs.core/reverse","~$metabase.mbql.normalize/canonicalize-count-clause","~$metabase.mbql.normalize/canonicalize-order-by","~$cljs.core/chunk-buffer","~$metabase.mbql.normalize/canonicalize-implicit-field-id","~$cljs.core/coll?","~$metabase.mbql.normalize/normalize-join","~$metabase.mbql.normalize/normalize-ag-clause-tokens","~$cljs.core/print-str","~$metabase.mbql.normalize/wrap-single-aggregations","~$cljs.core/some-fn","~$clojure.walk/keywordize-keys","~$cljs.core/first","~$cljs.core/butlast","~$cljs.core/seq?","~$metabase.mbql.normalize/canonicalize-inner-mbql-query","~$metabase.mbql.normalize/remove-breakout-fields-from-fields","~$js/metabase.mbql","~$cljs.core/merge","~$cljs.core/update-in","~$cljs.core/every-pred","~$metabase.mbql.normalize/normalize-template-tags","~$js/Error","~$metabase.mbql.normalize/canonicalize-source-query","~$metabase.mbql.util.match.impl/match-in-collection","~$cljs.core/some","~$metabase.mbql.normalize/aggregation-subclause?","~$cljs.core/chunked-seq?","~$metabase.mbql.normalize/normalize-query-parameter","~$metabase.mbql.normalize/normalize-source-query"]]],"~:cache-keys",["~#cmap",[["^1A","camel_snake_kebab/internals/misc.cljc"],["5ae08f83ceb8959971e6334596bff0214bf6fdf2","~:shadow.build.compiler/resolve",["^ ","~:require-id",null,"~:deps-ids",["^K",[]],"~:deps-syms",["^11","^D","~$camel-snake-kebab.internals.string-separator","~$clojure.string"]]],["^1A","goog/dom/tagname.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^5;",["^ ","^5<",null,"^5=",["^K",[]],"^5>",["^11","~$goog.dom.HtmlElement"]]],["^1A","metabase/shared/util/i18n.cljs"],["6c3c8615004b349dae9851ed547d516d45e04bd0","^5;",["^ ","^5<",null,"^5=",["^K",[]],"^5>",["^11","^D","~$shadow.js.shim.module$ttag","^5@"]]],["^1A","goog/labs/useragent/platform.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^5;",["^ ","^5<",null,"^5=",["^K",[]],"^5>",["^11","~$goog.string.internal","~$goog.labs.userAgent.util","~$goog.labs.userAgent.highEntropy.highEntropyValue","~$goog.labs.userAgent.highEntropy.highEntropyData","~$goog.labs.userAgent"]]],["^1A","metabase/types.cljc"],["00232bf78b259e26a21c218c8f2d746ba7003a15","^5;",["^ ","^5<",null,"^5=",["^K",[]],"^5>",["^11","^D","^T","~$metabase.types.coercion-hierarchies","~$metabase.util"]]],["^1A","lambdaisland/glogi.cljs"],["76286836d4172602aa08006b2a754dda736ffe09","^5;",["^ ","^5<",null,"^5=",["^K",[]],"^5>",["^11","^D","~$goog.log","~$goog.debug.Console","~$goog.array","^5@","~$goog.object","~$goog.debug.FancyWindow","~$goog.debug.DivConsole"]]],["^1A","goog/math/math.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^5;",["^ ","^5<",null,"^5=",["^K",[]],"^5>",["^11","~$goog.asserts"]]],["^1A","goog/html/trustedtypes.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^5;",["^ ","^5<",null,"^5=",["^K",[]],"^5>",["^11"]]],["^1A","goog/string/stringformat.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^5;",["^ ","^5<",null,"^5=",["^K",[]],"^5>",["^11","~$goog.string"]]],["^1A","goog/labs/useragent/browser.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^5;",["^ ","^5<",null,"^5=",["^K",[]],"^5>",["^11","^5D","^5E","^5P","^5C","^5F","^5G"]]],["^1A","goog/html/safeurl.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^5;",["^ ","^5<",null,"^5=",["^K",[]],"^5>",["^11","^5P","~$goog.fs.url","~$goog.html.TrustedResourceUrl","~$goog.string.Const","~$goog.string.TypedString","^5C"]]],["^1A","goog/style/style.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^5;",["^ ","^5<",null,"^5=",["^K",[]],"^5>",["^11","^5P","~$goog.dom","~$goog.dom.NodeType","~$goog.dom.TagName","~$goog.dom.safe","~$goog.dom.vendor","~$goog.html.SafeStyleSheet","~$goog.math.Box","~$goog.math.Coordinate","~$goog.math.Rect","~$goog.math.Size","^5M","~$goog.reflect","^5Q","~$goog.userAgent"]]],["^1A","goog/array/array.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^5;",["^ ","^5<",null,"^5=",["^K",[]],"^5>",["^11","^5P"]]],["~:shadow.build.js-support/require","moment"],["~$shadow.js.shim.module$moment","shadow.js.shim.module$moment.js","require","^5;",["^ ","^5<",null,"^5=",["^K",[]],"^5>",["^11"]]],["^66","moment-timezone"],["~$shadow.js.shim.module$moment_timezone","shadow.js.shim.module$moment_timezone.js","require","^5;",["^ ","^5<",null,"^5=",["^K",[]],"^5>",["^11"]]],["^1A","metabase/mbql/schema/macros.cljs"],["2af09bd42ffb1e15b66723cf7ba15db7dc75d10b","^5;",["^ ","^5<",null,"^5=",["^K",[]],"^5>",["^11","^D"]]],["^1A","goog/useragent/useragent.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^5;",["^ ","^5<",null,"^5=",["^K",[]],"^5>",["^11","~$goog.labs.userAgent.browser","~$goog.labs.userAgent.engine","~$goog.labs.userAgent.platform","^5D","^64","^5C"]]],["^1A","goog/debug/error.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^5;",["^ ","^5<",null,"^5=",["^K",[]],"^5>",["^11"]]],["^1A","goog/flags/flags.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^5;",["^ ","^5<",null,"^5=",["^K",[]],"^5>",["^11"]]],["^1A","net/cgrand/macrovich.cljc"],["abcb26cbfe0f8eef363b25525210c0fe1eb1f693","^5;",["^ ","^5<",null,"^5=",["^K",[]],"^5>",["^11","^D"]]],["^1A","schema/spec/variant.cljc"],["0dacc3066a87f33088c9a332b6c21e8b0560011c","^5;",["^ ","^5<",null,"^5=",["^K",[]],"^5>",["^11","^D","~$schema.utils","~$schema.spec.core"]]],["^1A","goog/structs/circularbuffer.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^5;",["^ ","^5<",null,"^5=",["^K",[]],"^5>",["^11"]]],["^1A","weavejester/dependency.cljc"],["7fd7f8879313f6a7e295f7447e668bdf492c42c1","^5;",["^ ","^5<",null,"^5=",["^K",[]],"^5>",["^11","^D","^T"]]],["^1A","goog/dom/nodetype.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^5;",["^ ","^5<",null,"^5=",["^K",[]],"^5>",["^11"]]],["^1A","goog/labs/useragent/highentropy/highentropyvalue.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^5;",["^ ","^5<",null,"^5=",["^K",[]],"^5>",["^11","^5D","^5C"]]],["^1A","cljs/pprint.cljs"],["bc14df6666853ed869d7b88aaa864111c65d0c7f","^5;",["^ ","^5<",null,"^5=",["^K",[]],"^5>",["^11","^D","^5@","^5Q","~$goog.string.StringBuffer"]]],["^1A","camel_snake_kebab/internals/string_separator.cljc"],["5ae08f83ceb8959971e6334596bff0214bf6fdf2","^5;",["^ ","^5<",null,"^5=",["^K",[]],"^5>",["^11","^D","^5@"]]],["^1A","goog/string/typedstring.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^5;",["^ ","^5<",null,"^5=",["^K",[]],"^5>",["^11"]]],["^1A","goog/object/object.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^5;",["^ ","^5<",null,"^5=",["^K",[]],"^5>",["^11"]]],["^1A","goog/dom/asserts.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^5;",["^ ","^5<",null,"^5=",["^K",[]],"^5>",["^11","^5P"]]],"~:SHADOW-TIMESTAMP",[1689947046000,1689947046000,1689947050000],["^1A","goog/math/long.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^5;",["^ ","^5<",null,"^5=",["^K",[]],"^5>",["^11","^5P","^64"]]],["^1A","goog/html/trustedresourceurl.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^5;",["^ ","^5<",null,"^5=",["^K",[]],"^5>",["^11","^5P","~$goog.fs.blob","^5R","~$goog.html.SafeScript","~$goog.html.trustedtypes","^5T","^5U"]]],["^1A","schema/spec/leaf.cljc"],["0dacc3066a87f33088c9a332b6c21e8b0560011c","^5;",["^ ","^5<",null,"^5=",["^K",[]],"^5>",["^11","^D","^6="]]],["^1A","metabase/util/format.cljc"],["875f86a08288cb3ad5a6f15df988897eaf8613af","^5;",["^ ","^5<",null,"^5=",["^K",[]],"^5>",["^11","^D","^5Q"]]],["^1A","goog/math/irect.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^5;",["^ ","^5<",null,"^5=",["^K",[]],"^5>",["^11"]]],["^1A","goog/math/box.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^5;",["^ ","^5<",null,"^5=",["^K",[]],"^5>",["^11","^5P","^61"]]],["^1A","goog/string/internal.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^5;",["^ ","^5<",null,"^5=",["^K",[]],"^5>",["^11"]]],["^1A","goog/functions/functions.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^5;",["^ ","^5<",null,"^5=",["^K",[]],"^5>",["^11"]]],["^1A","goog/html/safestyle.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^5;",["^ ","^5<",null,"^5=",["^K",[]],"^5>",["^11","^5T","~$goog.html.SafeUrl","^5U","^5P","^5C"]]],["^1A","goog/dom/safe.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^5;",["^ ","^5<",null,"^5=",["^K",[]],"^5>",["^11","^5P","~$goog.asserts.dom","~$goog.dom.asserts","~$goog.functions","~$goog.html.SafeHtml","^6A","~$goog.html.SafeStyle","^6C","^5S","~$goog.html.uncheckedconversions","^5T","^5C"]]],["^1A","goog/asserts/dom.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^5;",["^ ","^5<",null,"^5=",["^K",[]],"^5>",["^11","^5X","^5P","~$goog.dom.element"]]],["^1A","medley/core.cljc"],["f5117fa4c15ff14c4a0ab7db414b0f102afb0b8a","^5;",["^ ","^5<",null,"^5=",["^K",[]],"^5>",["^11","^D"]]],["^1A","clojure/walk.cljs"],["bc14df6666853ed869d7b88aaa864111c65d0c7f","^5;",["^ ","^5<",null,"^5=",["^K",[]],"^5>",["^11","^D"]]],["^1A","lambdaisland/glogi/console.cljs"],["76286836d4172602aa08006b2a754dda736ffe09","^5;",["^ ","^5<",null,"^5=",["^K",[]],"^5>",["^11","^D","~$lambdaisland.glogi","~$lambdaisland.glogi.print","^5M","^5K"]]],["^1A","goog/html/safehtml.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^5;",["^ ","^5<",null,"^5=",["^K",[]],"^5>",["^11","^5T","^6A","^6H","^5[","^6C","^5X","^5S","^5U","^5P","^69","^5L","^5M","^5C","~$goog.dom.tags","^6B"]]],["^1A","goog/dom/tags.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^5;",["^ ","^5<",null,"^5=",["^K",[]],"^5>",["^11","^5M"]]],["^1A","goog/math/size.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^5;",["^ ","^5<",null,"^5=",["^K",[]],"^5>",["^11"]]],["^1A","goog/labs/useragent/engine.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^5;",["^ ","^5<",null,"^5=",["^K",[]],"^5>",["^11","^5L","^5C","^5D"]]],["^1A","goog/fs/blob.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^5;",["^ ","^5<",null,"^5=",["^K",[]],"^5>",["^11"]]],["^1A","metabase/mbql/schema/helpers.cljc"],["b1f6002b97b59423b504abb666e13c9b0228b768","^5;",["^ ","^5<",null,"^5=",["^K",[]],"^5>",["^11","^D","^5@","~$metabase.types","~$schema.core"]]],["^1A","goog/dom/dom.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^5;",["^ ","^5<",null,"^5=",["^K",[]],"^5>",["^11","^5L","^5P","^6D","~$goog.dom.BrowserFeature","^5W","^5X","^5Y","^6G","^6I","^61","^63","^5M","^5Q","^5T","~$goog.string.Unicode","^65"]]],["^1A","metabase/util/log.cljs"],["7d8a3bf01eb27c2ba7269dc90dc218e46bcc1d3a","^5;",["^ ","^5<",null,"^5=",["^K",[]],"^5>",["^11","^D","^5J","^5Q","~$goog.string.format","^6K","~$lambdaisland.glogi.console"]]],["^1A","goog/asserts/asserts.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^5;",["^ ","^5<",null,"^5=",["^K",[]],"^5>",["^11","~$goog.debug.Error","^5W"]]],["^1A","goog/debug/relativetimeprovider.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^5;",["^ ","^5<",null,"^5=",["^K",[]],"^5>",["^11"]]],["^1A","goog/math/rect.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^5;",["^ ","^5<",null,"^5=",["^K",[]],"^5>",["^11","^5P","^60","^61","~$goog.math.IRect","^63"]]],["^1A","flatland/ordered/map.cljs"],["3a9cb9d79e47d77ecd4f4d550371ecf01464c461","^5;",["^ ","^5<",null,"^5=",["^K",[]],"^5>",["^11","^D"]]],["^1A","goog/uri/uri.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^5;",["^ ","^5<",null,"^5=",["^K",[]],"^5>",["^11","^5L","^5P","~$goog.collections.maps","^5Q","~$goog.structs","~$goog.uri.utils","~$goog.uri.utils.ComponentIndex","~$goog.uri.utils.StandardQueryParam"]]],["^1A","goog/labs/useragent/highentropy/highentropydata.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^5;",["^ ","^5<",null,"^5=",["^K",[]],"^5>",["^11","^5E"]]],["^1A","metabase/types/coercion_hierarchies.cljc"],["c3d70ef6080e044d61f13ff6bfd76490e2dcd0ac","^5;",["^ ","^5<",null,"^5=",["^K",[]],"^5>",["^11","^D","^T"]]],["^1A","goog/collections/maps.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^5;",["^ ","^5<",null,"^5=",["^K",[]],"^5>",["^11"]]],["^1A","goog/debug/divconsole.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^5;",["^ ","^5<",null,"^5=",["^K",[]],"^5>",["^11","~$goog.debug.HtmlFormatter","~$goog.dom.DomHelper","^5X","^5Y","^6G","^5[","^5J","^5T","~$goog.style"]]],["^1A","schema/spec/collection.cljc"],["0dacc3066a87f33088c9a332b6c21e8b0560011c","^5;",["^ ","^5<",null,"^5=",["^K",[]],"^5>",["^11","^D","^6<","^6="]]],["^1A","schema/utils.cljc"],["0dacc3066a87f33088c9a332b6c21e8b0560011c","^5;",["^ ","^5<",null,"^5=",["^K",[]],"^5>",["^11","^D","^6R","^5M","^5Q","^5@"]]],["^1A","cljs/core/match.cljs"],["f419c02deee501e9f4b29f81215ba81ffcefe9b6","^5;",["^ ","^5<",null,"^5=",["^K",[]],"^5>",["^11","^D"]]],["^1A","goog/debug/fancywindow.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^5;",["^ ","^5<",null,"^5=",["^K",[]],"^5>",["^11","^5L","^5P","~$goog.debug.DebugWindow","^70","^5X","^5Y","^6G","^5[","^5J","^5M","^5Q","^5T","^65"]]],["^1A","goog/debug/formatter.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^5;",["^ ","^5<",null,"^5=",["^K",[]],"^5>",["^11","~$goog.debug","~$goog.debug.RelativeTimeProvider","^6G","^6C","^6I","^5J","^5T"]]],["^1A","metabase/shared/util/namespaces.cljs"],["00687008abd6eb291bc9d5ff1fff73210e0bbe6e","^5;",["^ ","^5<",null,"^5=",["^K",[]],"^5>",["^11","^D"]]],["^1A","metabase/mbql/util/match/impl.cljc"],["4150e01975339d308f5cfedda77875eda19c030d","^5;",["^ ","^5<",null,"^5=",["^K",[]],"^5>",["^11","^D"]]],["^1A","goog/fs/url.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^5;",["^ ","^5<",null,"^5=",["^K",[]],"^5>",["^11"]]],["^1A","goog/base.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^5;",["^ ","^5<",null,"^5=",["^K",[]],"^5>",[]]],["^1A","goog/structs/structs.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^5;",["^ ","^5<",null,"^5=",["^K",[]],"^5>",["^11","^5L","^5M"]]],["^1A","clojure/string.cljs"],["bc14df6666853ed869d7b88aaa864111c65d0c7f","^5;",["^ ","^5<",null,"^5=",["^K",[]],"^5>",["^11","^D","^5Q","^6>"]]],["^1A","metabase/util.cljc"],["2eb945a6741f1450ecac08a9087b862ce52b9e3a","^5;",["^ ","^5<",null,"^5=",["^K",[]],"^5>",["^11","^D","~$camel-snake-kebab.internals.macros","~$clojure.data","^@","^T","^5@","^13","~$flatland.ordered.map","^14","^X","~$metabase.shared.util.namespaces","~$metabase.util.format","^V","~$net.cgrand.macrovich","~$weavejester.dependency"]]],["^1A","camel_snake_kebab/internals/macros.cljc"],["5ae08f83ceb8959971e6334596bff0214bf6fdf2","^5;",["^ ","^5<",null,"^5=",["^K",[]],"^5>",["^11","^D","~$camel-snake-kebab.internals.alter-name","~$camel-snake-kebab.internals.misc"]]],["^1A","goog/string/string.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^5;",["^ ","^5<",null,"^5=",["^K",[]],"^5>",["^11","^5Y","^6I","^5T","^5C"]]],["^1A","schema/core.cljc"],["0dacc3066a87f33088c9a332b6c21e8b0560011c","^5;",["^ ","^5<",null,"^5=",["^K",[]],"^5>",["^11","^D","^5@","^6<","^6=","~$schema.spec.leaf","~$schema.spec.variant","~$schema.spec.collection"]]],["^1A","metabase/mbql/schema.cljc"],["c51bf2a180ecbc12d6a1cd42a4049323f46a0085","^5;",["^ ","^5<",null,"^5=",["^K",[]],"^5>",["^11","^D","^67","^68","^D","^T","~$metabase.mbql.schema.helpers","~$metabase.mbql.schema.macros","^6O"]]],["^1A","metabase/mbql/util/match.cljs"],["d65aaa9fbcb7960b90ba7ca97258b1dc8a40be2b","^5;",["^ ","^5<",null,"^5=",["^K",[]],"^5>",["^11","^D","^H","~$metabase.mbql.util.match.impl"]]],["^1A","clojure/data.cljs"],["bc14df6666853ed869d7b88aaa864111c65d0c7f","^5;",["^ ","^5<",null,"^5=",["^K",[]],"^5>",["^11","^D","^T"]]],["^1A","goog/reflect/reflect.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^5;",["^ ","^5<",null,"^5=",["^K",[]],"^5>",["^11"]]],["^1A","goog/labs/useragent/util.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^5;",["^ ","^5<",null,"^5=",["^K",[]],"^5>",["^11","^5C","^5G"]]],["^1A","goog/debug/debug.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^5;",["^ ","^5<",null,"^5=",["^K",[]],"^5>",["^11","^5L","~$goog.debug.errorcontext"]]],["^1A","goog/string/stringbuffer.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^5;",["^ ","^5<",null,"^5=",["^K",[]],"^5>",["^11"]]],["^1A","schema/spec/core.cljc"],["0dacc3066a87f33088c9a332b6c21e8b0560011c","^5;",["^ ","^5<",null,"^5=",["^K",[]],"^5>",["^11","^D","^6<"]]],["^66","ttag"],["^5B","shadow.js.shim.module$ttag.js","require","^5;",["^ ","^5<",null,"^5=",["^K",[]],"^5>",["^11"]]],["^1A","goog/math/coordinate.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^5;",["^ ","^5<",null,"^5=",["^K",[]],"^5>",["^11","~$goog.math"]]],["^1A","goog/debug/errorcontext.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^5;",["^ ","^5<",null,"^5=",["^K",[]],"^5>",["^11"]]],["^1A","goog/labs/useragent/useragent.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^5;",["^ ","^5<",null,"^5=",["^K",[]],"^5>",["^11","~$goog.flags"]]],["^1A","goog/dom/element.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^5;",["^ ","^5<",null,"^5=",["^K",[]],"^5>",["^11","^5W","^5X"]]],["^1A","goog/html/uncheckedconversions.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^5;",["^ ","^5<",null,"^5=",["^K",[]],"^5>",["^11","^5P","^6G","^6A","^6H","^5[","^6C","^5S","^5T","^5C"]]],["^1A","goog/debug/debugwindow.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^5;",["^ ","^5<",null,"^5=",["^K",[]],"^5>",["^11","^6[","^5Y","^6G","^5[","^5J","^5T","~$goog.structs.CircularBuffer","^65"]]],["^1A","metabase/mbql/util.cljc"],["2532d5faa94d2a89dd06e529c641d594e298e2aa","^5;",["^ ","^5<",null,"^5=",["^K",[]],"^5>",["^11","^D","^5@","~$metabase.mbql.predicates","~$metabase.mbql.schema","^7A","^Y","^X","^6O"]]],["^1A","goog/dom/htmlelement.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^5;",["^ ","^5<",null,"^5=",["^K",[]],"^5>",["^11"]]],["^1A","cljs/core.cljs"],["bc14df6666853ed869d7b88aaa864111c65d0c7f","^5;",["^ ","^5<",null,"^5=",["^K",[]],"^5>",["^11","~$goog.math.Long","~$goog.math.Integer","^5Q","^5M","^5L","~$goog.Uri","^6>"]]],["^1A","goog/html/safescript.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^5;",["^ ","^5<",null,"^5=",["^K",[]],"^5>",["^11","^5T","^5U","^6B","^5P"]]],["^1A","goog/log/log.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^5;",["^ ","^5<",null,"^5=",["^K",[]],"^5>",["^11","^5P","^73"]]],["^1A","camel_snake_kebab/internals/alter_name.cljc"],["5ae08f83ceb8959971e6334596bff0214bf6fdf2","^5;",["^ ","^5<",null,"^5=",["^K",[]],"^5>",["^11","^D"]]],["^1A","metabase/mbql/normalize.cljc"],["04b18b0536de1d93ec656a5ad86e2fe4fdee0540","^5;",["^ ","^5<",null,"^5=",["^K",[]],"^5>",["^11","^D","^T","^13","^14","^[","^Y","^X","^V"]]],["^1A","goog/html/safestylesheet.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^5;",["^ ","^5<",null,"^5=",["^K",[]],"^5>",["^11","^5T","^6H","^5U","^5M","^5P","^5C"]]],["^1A","goog/math/integer.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^5;",["^ ","^5<",null,"^5=",["^K",[]],"^5>",["^11","^64"]]],["^1A","goog/debug/console.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^5;",["^ ","^5<",null,"^5=",["^K",[]],"^5>",["^11","~$goog.debug.TextFormatter","^5J"]]],["^1A","lambdaisland/glogi/print.cljs"],["76286836d4172602aa08006b2a754dda736ffe09","^5;",["^ ","^5<",null,"^5=",["^K",[]],"^5>",["^11","^D","^6K","^5M"]]],["^1A","goog/dom/browserfeature.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^5;",["^ ","^5<",null,"^5=",["^K",[]],"^5>",["^11","^65"]]],["^1A","clojure/set.cljs"],["bc14df6666853ed869d7b88aaa864111c65d0c7f","^5;",["^ ","^5<",null,"^5=",["^K",[]],"^5>",["^11","^D"]]],["^1A","goog/uri/utils.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^5;",["^ ","^5<",null,"^5=",["^K",[]],"^5>",["^11","^5P","^5Q"]]],["^1A","goog/string/const.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^5;",["^ ","^5<",null,"^5=",["^K",[]],"^5>",["^11","^5P","^5U"]]],["^1A","goog/dom/vendor.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^5;",["^ ","^5<",null,"^5=",["^K",[]],"^5>",["^11","^5Q","^65"]]],["^1A","metabase/mbql/predicates.cljc"],["20ab1a5ccd943c35c646c5f7396ea40f9bfa7ac4","^5;",["^ ","^5<",null,"^5=",["^K",[]],"^5>",["^11","^D","^7I","^6O"]]]]],"~:clj-info",["^ ","jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/analyzer/impl.cljc",1689947050000,"jar:file:/root/.m2/repository/instaparse/instaparse/1.4.12/instaparse-1.4.12.jar!/instaparse/line_col.clj",1689946146000,"jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/source_map/base64_vlq.clj",1689947050000,"jar:file:/root/.m2/repository/instaparse/instaparse/1.4.12/instaparse-1.4.12.jar!/instaparse/viz.clj",1689946146000,"jar:file:/root/.m2/repository/org/clojure/tools.namespace/1.4.4/tools.namespace-1.4.4.jar!/clojure/tools/namespace/parse.cljc",1689946139000,"jar:file:/root/.m2/repository/weavejester/dependency/0.2.1/dependency-0.2.1.jar!/weavejester/dependency.cljc",1689946093000,"jar:file:/root/.m2/repository/instaparse/instaparse/1.4.12/instaparse-1.4.12.jar!/instaparse/transform.clj",1689946146000,"jar:file:/root/.m2/repository/ring/ring-codec/1.2.0/ring-codec-1.2.0.jar!/ring/util/codec.clj",1689946172000,"jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/instant.clj",1689947050000,"jar:file:/root/.m2/repository/org/clojure/tools.reader/1.3.6/tools.reader-1.3.6.jar!/clojure/tools/reader/default_data_readers.clj",1689946174000,"jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/pprint.cljc",1689947050000,"jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/externs.clj",1689947050000,"file:/home/gmrworkspace/dashboard/shared/src/metabase/mbql/util/match.clj",1690286812000,"jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/vendor/clojure/tools/reader/default_data_readers.clj",1689947050000,"file:/home/gmrworkspace/dashboard/shared/src/metabase/mbql/schema/helpers.cljc",1692013156305,"jar:file:/root/.m2/repository/prismatic/schema/1.4.1/schema-1.4.1.jar!/schema/core.cljc",1689946172000,"file:/home/gmrworkspace/dashboard/shared/src/metabase/shared/util/i18n.clj",1690286812000,"jar:file:/root/.m2/repository/org/clojure/tools.reader/1.3.6/tools.reader-1.3.6.jar!/clojure/tools/reader/edn.clj",1689946174000,"jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/compiler.cljc",1689947050000,"jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/env.cljc",1689947050000,"jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/analyzer/impl/namespaces.cljc",1689947050000,"jar:file:/root/.m2/repository/prismatic/schema/1.4.1/schema-1.4.1.jar!/schema/macros.clj",1689946172000,"file:/home/gmrworkspace/dashboard/src/metabase/util/i18n/plural.clj",1690286813000,"jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/source_map.clj",1689947050000,"jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/util.cljc",1689947050000,"file:/home/gmrworkspace/dashboard/src/metabase/util.cljc",1690286813000,"jar:file:/root/.m2/repository/nano-id/nano-id/1.0.0/nano-id-1.0.0.jar!/nano_id/core.cljc",1689946171000,"file:/home/gmrworkspace/dashboard/src/metabase/plugins/classloader.clj",1692013156125,"jar:file:/root/.m2/repository/medley/medley/1.4.0/medley-1.4.0.jar!/medley/core.cljc",1689946185000,"jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/analyzer.cljc",1689947050000,"jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/analyzer/passes.cljc",1689947050000,"jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/vendor/clojure/data/json.clj",1689947050000,"file:/home/gmrworkspace/dashboard/src/metabase/util/format.cljc",1690286813000,"jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/source_map/base64.clj",1689947050000,"jar:file:/root/.m2/repository/riddley/riddley/0.2.0/riddley-0.2.0.jar!/riddley/walk.clj",1689946160000,"jar:file:/root/.m2/repository/instaparse/instaparse/1.4.12/instaparse-1.4.12.jar!/instaparse/reduction.clj",1689946146000,"jar:file:/root/.m2/repository/org/tcrawley/dynapath/1.1.0/dynapath-1.1.0.jar!/dynapath/util.clj",1689946174000,"jar:file:/root/.m2/repository/camel-snake-kebab/camel-snake-kebab/0.4.3/camel-snake-kebab-0.4.3.jar!/camel_snake_kebab/internals/macros.cljc",1689946178000,"file:/home/gmrworkspace/dashboard/shared/src/metabase/mbql/util/match/impl.cljc",1690286812000,"jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/vendor/clojure/tools/reader/reader_types.clj",1689947050000,"jar:file:/root/.m2/repository/instaparse/instaparse/1.4.12/instaparse-1.4.12.jar!/instaparse/auto_flatten_seq.clj",1689946146000,"jar:file:/root/.m2/repository/instaparse/instaparse/1.4.12/instaparse-1.4.12.jar!/instaparse/core.clj",1689946146000,"jar:file:/root/.m2/repository/org/clojure/core.cache/1.0.225/core.cache-1.0.225.jar!/clojure/core/cache.clj",1689946183000,"jar:file:/root/.m2/repository/potemkin/potemkin/0.4.6/potemkin-0.4.6.jar!/potemkin/types.clj",1689946176000,"jar:file:/root/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/set.clj",1689946092000,"jar:file:/root/.m2/repository/org/clojure/math.numeric-tower/0.0.5/math.numeric-tower-0.0.5.jar!/clojure/math/numeric_tower.clj",1689946148000,"jar:file:/root/.m2/repository/net/cgrand/macrovich/0.2.1/macrovich-0.2.1.jar!/net/cgrand/macrovich.cljc",1689946165000,"jar:file:/root/.m2/repository/colorize/colorize/0.1.1/colorize-0.1.1.jar!/colorize/core.clj",1689946104000,"jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/vendor/clojure/tools/reader/impl/inspect.clj",1689947050000,"jar:file:/root/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/string.clj",1689946092000,"jar:file:/root/.m2/repository/potemkin/potemkin/0.4.6/potemkin-0.4.6.jar!/potemkin.clj",1689946176000,"jar:file:/root/.m2/repository/instaparse/instaparse/1.4.12/instaparse-1.4.12.jar!/instaparse/failure.clj",1689946146000,"jar:file:/root/.m2/repository/prismatic/schema/1.4.1/schema-1.4.1.jar!/schema/spec/variant.cljc",1689946172000,"jar:file:/root/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/core.clj",1689946092000,"file:/home/gmrworkspace/dashboard/src/metabase/util/i18n/impl.clj",1692013156125,"jar:file:/root/.m2/repository/org/clojure/tools.namespace/1.4.4/tools.namespace-1.4.4.jar!/clojure/tools/namespace/dependency.cljc",1689946139000,"jar:file:/root/.m2/repository/prismatic/schema/1.4.1/schema-1.4.1.jar!/schema/spec/leaf.cljc",1689946172000,"jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/analyzer/passes/and_or.cljc",1689947050000,"jar:file:/root/.m2/repository/riddley/riddley/0.2.0/riddley-0.2.0.jar!/riddley/compiler.clj",1689946160000,"jar:file:/root/.m2/repository/org/clojure/core.memoize/1.0.257/core.memoize-1.0.257.jar!/clojure/core/memoize.clj",1689946178000,"jar:file:/root/.m2/repository/instaparse/instaparse/1.4.12/instaparse-1.4.12.jar!/instaparse/print.clj",1689946146000,"jar:file:/root/.m2/repository/org/clojure/tools.namespace/1.4.4/tools.namespace-1.4.4.jar!/clojure/tools/namespace/track.cljc",1689946139000,"jar:file:/root/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/pprint.clj",1689946092000,"jar:file:/root/.m2/repository/org/clojure/java.classpath/1.0.0/java.classpath-1.0.0.jar!/clojure/java/classpath.clj",1689946162000,"jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/js_deps.cljc",1689947050000,"jar:file:/root/.m2/repository/cheshire/cheshire/5.11.0/cheshire-5.11.0.jar!/cheshire/factory.clj",1689946173000,"jar:file:/root/.m2/repository/org/clojure/tools.reader/1.3.6/tools.reader-1.3.6.jar!/clojure/tools/reader/impl/errors.clj",1689946174000,"jar:file:/root/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/walk.clj",1689946092000,"jar:file:/root/.m2/repository/org/clojure/tools.reader/1.3.6/tools.reader-1.3.6.jar!/clojure/tools/reader.clj",1689946174000,"jar:file:/root/.m2/repository/prismatic/schema/1.4.1/schema-1.4.1.jar!/schema/spec/core.cljc",1689946172000,"jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/core.cljc",1689947050000,"jar:file:/root/.m2/repository/cheshire/cheshire/5.11.0/cheshire-5.11.0.jar!/cheshire/generate.clj",1689946173000,"jar:file:/root/.m2/repository/org/clojure/tools.reader/1.3.6/tools.reader-1.3.6.jar!/clojure/tools/reader/reader_types.clj",1689946174000,"jar:file:/root/.m2/repository/cheshire/cheshire/5.11.0/cheshire-5.11.0.jar!/cheshire/parse.clj",1689946173000,"file:/home/gmrworkspace/dashboard/src/metabase/util/i18n.clj",1692013156125,"jar:file:/root/.m2/repository/instaparse/instaparse/1.4.12/instaparse-1.4.12.jar!/instaparse/cfg.clj",1689946146000,"jar:file:/root/.m2/repository/cheshire/cheshire/5.11.0/cheshire-5.11.0.jar!/cheshire/core.clj",1689946173000,"jar:file:/root/.m2/repository/instaparse/instaparse/1.4.12/instaparse-1.4.12.jar!/instaparse/gll.clj",1689946146000,"jar:file:/root/.m2/repository/binaryage/devtools/1.0.6/devtools-1.0.6.jar!/devtools/defaults.clj",1689947054000,"jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/vendor/clojure/tools/reader.clj",1689947050000,"jar:file:/root/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/edn.clj",1689946092000,"jar:file:/root/.m2/repository/nano-id/nano-id/1.0.0/nano-id-1.0.0.jar!/nano_id/random.cljc",1689946171000,"jar:file:/root/.m2/repository/environ/environ/1.2.0/environ-1.2.0.jar!/environ/core.cljc",1689946163000,"jar:file:/root/.m2/repository/prismatic/schema/1.4.1/schema-1.4.1.jar!/schema/spec/collection.cljc",1689946172000,"jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/vendor/clojure/tools/reader/impl/errors.clj",1689947050000,"jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/tagged_literals.cljc",1689947050000,"jar:file:/root/.m2/repository/instaparse/instaparse/1.4.12/instaparse-1.4.12.jar!/instaparse/repeat.clj",1689946146000,"jar:file:/root/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/java/io.clj",1689946092000,"jar:file:/root/.m2/repository/com/lambdaisland/glogi/1.2.164/glogi-1.2.164.jar!/lambdaisland/glogi.clj",1689947043000,"jar:file:/root/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/instant.clj",1689946092000,"file:/home/gmrworkspace/dashboard/shared/src/metabase/shared/util/namespaces.clj",1690286812000,"jar:file:/root/.m2/repository/org/clojure/tools.namespace/1.4.4/tools.namespace-1.4.4.jar!/clojure/tools/namespace/file.clj",1689946139000,"jar:file:/root/.m2/repository/org/clojure/core.match/1.0.1/core.match-1.0.1.jar!/cljs/core/match.clj",1689946174000,"file:/home/gmrworkspace/dashboard/shared/src/metabase/mbql/schema/macros.clj",1690286812000,"jar:file:/root/.m2/repository/prismatic/schema/1.4.1/schema-1.4.1.jar!/schema/utils.cljc",1689946172000,"file:/home/gmrworkspace/dashboard/src/metabase/config.clj",1692013154929,"file:/home/gmrworkspace/dashboard/src/metabase/util/log.clj",1690286813000,"jar:file:/root/.m2/repository/org/clojure/tools.reader/1.3.6/tools.reader-1.3.6.jar!/clojure/tools/reader/impl/inspect.clj",1689946174000,"jar:file:/root/.m2/repository/instaparse/instaparse/1.4.12/instaparse-1.4.12.jar!/instaparse/combinators_source.clj",1689946146000,"jar:file:/root/.m2/repository/instaparse/instaparse/1.4.12/instaparse-1.4.12.jar!/instaparse/abnf.clj",1689946146000,"jar:file:/root/.m2/repository/org/clojure/tools.namespace/1.4.4/tools.namespace-1.4.4.jar!/clojure/tools/namespace/find.clj",1689946139000,"jar:file:/root/.m2/repository/org/tcrawley/dynapath/1.1.0/dynapath-1.1.0.jar!/dynapath/dynamic_classpath.clj",1689946174000,"jar:file:/root/.m2/repository/cheshire/cheshire/5.11.0/cheshire-5.11.0.jar!/cheshire/generate_seq.clj",1689946173000,"file:/home/gmrworkspace/dashboard/src/metabase/util/jvm.clj",1692013156125],"~:analyzer",["^ ","^3",null,"^4",["^ "],"^5",["^ ","^6","Logic for taking any sort of weird MBQL query and normalizing it into a standardized, canonical form. You can think\n  of this like taking any 'valid' MBQL query and rewriting it as-if it was written in perfect up-to-date MBQL in the\n  latest version. There are four main things done here, done as four separate steps:\n\n  #### NORMALIZING TOKENS\n\n  Converting all identifiers to lower-case, lisp-case keywords. e.g. `{\"SOURCE_TABLE\" 10}` becomes `{:source-table\n  10}`.\n\n  #### CANONICALIZING THE QUERY\n\n  Rewriting deprecated MBQL 95/98 syntax and other things that are still supported for backwards-compatibility in\n  canonical modern MBQL syntax. For example `{:breakout [:count 10]}` becomes `{:breakout [[:count [:field 10 nil]]]}`.\n\n  #### WHOLE-QUERY TRANSFORMATIONS\n\n  Transformations and cleanup of the query structure as a whole to fix inconsistencies. Whereas the canonicalization\n  phase operates on a lower-level, transforming invidual clauses, this phase focuses on transformations that affect\n  multiple clauses, such as removing duplicate references to Fields if they are specified in both the `:breakout` and\n  `:fields` clauses.\n\n  This is not the only place that does such transformations; several pieces of QP middleware perform similar\n  individual transformations, such as `reconcile-breakout-and-order-by-bucketing`.\n\n  #### REMOVING EMPTY CLAUSES\n\n  Removing empty clauses like `{:aggregation nil}` or `{:breakout []}`.\n\n  Token normalization occurs first, followed by canonicalization, followed by removing empty clauses.","^7","metabase/mbql/normalize.cljc","^8",1,"^9",5,"^:",1,"^;",28],"^<",["^ ","^=","^>","^?","^@","^A","^B","^C","^D","^E","^F","^G","^H"],"^I",null,"^J",["^K",[]],"^L","^M","^N",["^ "],"^Q",null,"^R",["^ ","^S","^T","^U","^V","^W","^X","^Y","^Y","^Z","^Y","^[","^[","^10","^[","^D","^D","^11","^11","^12","^13","^T","^T","~$m","^14","^X","^X","^V","^V","^13","^13","^14","^14"],"^15",["^K",["^16"]],"~:shadow/js-access-global",["^K",["Error"]],"^17",null,"~:defs",["^ ","~$normalize-native-query",["^ ","~:protocol-inline",null,"^5",["^ ","^7","metabase/mbql/normalize.cljc","^8",337,"^9",8,"^:",337,"^;",30,"~:private",true,"~:arglists",["^1:",["~$quote",["^1:",[["~$native-query"]]]]],"^6","For native queries, normalize the top-level keys, and template tags, but nothing else."],"^:8",true,"^L","^2Q","^7","metabase/mbql/normalize.cljc","^;",30,"~:method-params",["^1:",[["^:;"]]],"~:protocol-impl",null,"~:arglists-meta",["^1:",[null,null]],"^9",1,"~:variadic?",false,"^8",337,"~:ret-tag",["^K",[null,"~$clj","~$any"]],"^:",337,"~:max-fixed-arity",1,"~:fn-var",true,"^:9",["^1:",["^::",["^1:",[["^:;"]]]]],"^6","For native queries, normalize the top-level keys, and template tags, but nothing else."],"~$canonicalize-count-clause",["^ ","^:7",null,"^5",["^ ","^7","metabase/mbql/normalize.cljc","^8",580,"^9",8,"^:",580,"^;",33,"^:8",true,"^:9",["^1:",["^::",["^1:",[[["~$clause-name","~$field"]]]]]]],"^:8",true,"^L","^4H","^7","metabase/mbql/normalize.cljc","^;",33,"^:<",["^1:",[["~$p__80918"]]],"^:=",null,"^:>",["^1:",[null,null]],"^9",1,"^:?",false,"^8",580,"^:@","~$cljs.core/IVector","^:",580,"^:C",1,"^:D",true,"^:9",["^1:",["^::",["^1:",[[["^:F","^:G"]]]]]]],"~$canonicalize-implicit-field-id",["^ ","^:7",null,"^5",["^ ","^7","metabase/mbql/normalize.cljc","^8",442,"^9",8,"^:",442,"^;",38,"^:8",true,"^:9",["^1:",["^::",["^1:",[["~$clause"]]]]],"^6","If `clause` is a raw integer ID wrap it in a `:field` clause. Either way, canonicalize the resulting clause."],"^:8",true,"^L","^4K","^7","metabase/mbql/normalize.cljc","^;",38,"^:<",["^1:",[["^:K"]]],"^:=",null,"^:>",["^1:",[null,null]],"^9",1,"^:?",false,"^8",442,"^:@","^:B","^:",442,"^:C",1,"^:D",true,"^:9",["^1:",["^::",["^1:",[["^:K"]]]]],"^6","If `clause` is a raw integer ID wrap it in a `:field` clause. Either way, canonicalize the resulting clause."],"~$normalize-join",["^ ","^:7",null,"^5",["^ ","^7","metabase/mbql/normalize.cljc","^8",314,"^9",8,"^:",314,"^;",22,"^:8",true,"^:9",["^1:",["^::",["^1:",[["~$join"]]]]]],"^:8",true,"^L","^4M","^7","metabase/mbql/normalize.cljc","^;",22,"^:<",["^1:",[["^:M"]]],"^:=",null,"^:>",["^1:",[null,null]],"^9",1,"^:?",false,"^8",314,"^:@",["^K",[null,"^:A","^:B","~$clj-nil"]],"^:",314,"^:C",1,"^:D",true,"^:9",["^1:",["^::",["^1:",[["^:M"]]]]]],"~$remove-breakout-fields-from-fields",["^ ","^:7",null,"^5",["^ ","^7","metabase/mbql/normalize.cljc","^8",783,"^9",8,"^:",783,"^;",42,"^:8",true,"^:9",["^1:",["^::",["^1:",[[["^5:",[["^ ","~:keys",["~$breakout","~$fields"]],"~:query","^1<","~$query"]]]]]]],"^6","Remove any Fields specified in both `:breakout` and `:fields` from `:fields`; it is implied that any breakout Field\n  will be returned, specifying it in both would imply it is to be returned twice, which tends to cause confusion for\n  the QP and drivers. (This is done to work around historic bugs with the way queries were generated on the frontend;\n  I'm not sure this behavior makes sense, but removing it would break existing queries.)\n\n  We will remove either exact matches:\n\n    {:breakout [[:field-id 10]], :fields [[:field-id 10]]} ; -> {:breakout [[:field-id 10]]}\n\n  or unbucketed matches:\n\n    {:breakout [[:datetime-field [:field-id 10] :month]], :fields [[:field-id 10]]}\n    ;; -> {:breakout [[:field-id 10]]}"],"^:8",true,"^L","^4W","^7","metabase/mbql/normalize.cljc","^;",42,"^:<",["^1:",[["~$p__81189"]]],"^:=",null,"^:>",["^1:",[null,null]],"^9",1,"^:?",false,"^8",783,"^:@",["^K",[null,"^:A","^:B","^:N"]],"^:",783,"^:C",1,"^:D",true,"^:9",["^1:",["^::",["^1:",[[["^5:",[["^ ","^:P",["^:Q","^:R"]],"^:S","^1<","^:T"]]]]]]],"^6","Remove any Fields specified in both `:breakout` and `:fields` from `:fields`; it is implied that any breakout Field\n  will be returned, specifying it in both would imply it is to be returned twice, which tends to cause confusion for\n  the QP and drivers. (This is done to work around historic bugs with the way queries were generated on the frontend;\n  I'm not sure this behavior makes sense, but removing it would break existing queries.)\n\n  We will remove either exact matches:\n\n    {:breakout [[:field-id 10]], :fields [[:field-id 10]]} ; -> {:breakout [[:field-id 10]]}\n\n  or unbucketed matches:\n\n    {:breakout [[:datetime-field [:field-id 10] :month]], :fields [[:field-id 10]]}\n    ;; -> {:breakout [[:field-id 10]]}"],"~$normalize",["^ ","^5",["^ ","^7","metabase/mbql/normalize.cljc","^8",882,"^9",36,"^:",882,"^;",45,"^:9",["^1:",["^::",["^1:",[["~$outer-query"]]]]]],"^L","^3D","^7","metabase/mbql/normalize.cljc","^;",45,"^9",1,"^8",882,"^:",882,"~:tag","~$function","^:9",["^1:",["^::",["^1:",[["^:W"]]]]],"^6","Normalize the tokens in a Dashboard query (i.e., make them all `lisp-case` keywords), rewrite deprecated clauses as\n  up-to-date MBQL 2000, and remove empty clauses."],"~$canonicalize-top-level-mbql-clauses",["^ ","^:7",null,"^5",["^ ","^7","metabase/mbql/normalize.cljc","^8",741,"^9",8,"^:",741,"^;",43,"^:8",true,"^:9",["^1:",["^::",["^1:",[["~$mbql-query"]]]]],"^6","Perform specific steps to canonicalize the various top-level clauses in an MBQL query."],"^:8",true,"^L","^3>","^7","metabase/mbql/normalize.cljc","^;",43,"^:<",["^1:",[["^:["]]],"^:=",null,"^:>",["^1:",[null,null]],"^9",1,"^:?",false,"^8",741,"^:@",["^K",[null,"^:A","^:B"]],"^:",741,"^:C",1,"^:D",true,"^:9",["^1:",["^::",["^1:",[["^:["]]]]],"^6","Perform specific steps to canonicalize the various top-level clauses in an MBQL query."],"~$mbql-clause?",["^ ","^:7",null,"^5",["^ ","^7","metabase/mbql/normalize.cljc","^8",40,"^9",8,"^:",40,"^;",20,"^:8",true,"^:9",["^1:",["^::",["^1:",[["~$x"]]]]],"^6","True if `x` is an MBQL clause (a sequence with a token as its first arg). (This is different from the implementation\n  in `mbql.u` because it also supports un-normalized clauses. You shouldn't need to use this outside of this\n  namespace.)"],"^:8",true,"^L","^3@","^7","metabase/mbql/normalize.cljc","^;",20,"^:<",["^1:",[["~$x"]]],"^:=",null,"^:>",["^1:",[null,null]],"^9",1,"^:?",false,"^8",40,"^:@",["^K",["~$boolean","^:B"]],"^:",40,"^:C",1,"^:D",true,"^:9",["^1:",["^::",["^1:",[["~$x"]]]]],"^6","True if `x` is an MBQL clause (a sequence with a token as its first arg). (This is different from the implementation\n  in `mbql.u` because it also supports un-normalized clauses. You shouldn't need to use this outside of this\n  namespace.)"],"~$canonicalize-simple-filter-clause",["^ ","^:7",null,"^5",["^ ","^7","metabase/mbql/normalize.cljc","^8",540,"^9",8,"^:",540,"^;",41,"^:8",true,"^:9",["^1:",["^::",["^1:",[[["~$filter-name","~$first-arg","~$&","~$other-args"]]]]]]],"^:8",true,"^L","^3C","^7","metabase/mbql/normalize.cljc","^;",41,"^:<",["^1:",[["~$p__80866"]]],"^:=",null,"^:>",["^1:",[null,null]],"^9",1,"^:?",false,"^8",540,"^:@",["^K",[null,"^:A","^:B"]],"^:",540,"^:C",1,"^:D",true,"^:9",["^1:",["^::",["^1:",[[["^;3","^;4","~$&","^;5"]]]]]]],"~$normalize-template-tags",["^ ","^:7",null,"^5",["^ ","^7","metabase/mbql/normalize.cljc","^8",281,"^9",8,"^:",281,"^;",31,"^:8",true,"^:9",["^1:",["^::",["^1:",[["~$template-tags"]]]]],"^6","Normalize native-query template tags. Like `expressions` we want to preserve the original name rather than normalize\n  it."],"^:8",true,"^L","^50","^7","metabase/mbql/normalize.cljc","^;",31,"^:<",["^1:",[["^;8"]]],"^:=",null,"^:>",["^1:",[null,null]],"^9",1,"^:?",false,"^8",281,"^:@","^:B","^:",281,"^:C",1,"^:D",true,"^:9",["^1:",["^::",["^1:",[["^;8"]]]]],"^6","Normalize native-query template tags. Like `expressions` we want to preserve the original name rather than normalize\n  it."],"~$normalize-source-metadata",["^ ","^:7",null,"^5",["^ ","^7","metabase/mbql/normalize.cljc","^8",329,"^9",7,"^:",329,"^;",32,"^:9",["^1:",["^::",["^1:",[["~$metadata"]]]]],"^6","Normalize source/results metadata for a single column."],"^L","^1S","^7","metabase/mbql/normalize.cljc","^;",32,"^:<",["^1:",[["^;:"]]],"^:=",null,"^:>",["^1:",[null,null]],"^9",1,"^:?",false,"^8",329,"^:@",["^K",[null,"^:A","^:B"]],"^:",329,"^:C",1,"^:D",true,"^:9",["^1:",["^::",["^1:",[["^;:"]]]]],"^6","Normalize source/results metadata for a single column."],"~$normalize-order-by-tokens",["^ ","^:7",null,"^5",["^ ","^7","metabase/mbql/normalize.cljc","^8",237,"^9",8,"^:",237,"^;",33,"^:8",true,"^:9",["^1:",["^::",["^1:",[["~$clauses"]]]]],"^6","Normalize tokens in the order-by clause, which can have different syntax when using MBQL 95 or 98\n  rules (`[<field> :asc]` vs `[:asc <field>]`, for example)."],"^:8",true,"^L","^1[","^7","metabase/mbql/normalize.cljc","^;",33,"^:<",["^1:",[["^;<"]]],"^:=",null,"^:>",["^1:",[null,null]],"^9",1,"^:?",false,"^8",237,"^:@",["^K",["^:A","^:I","^:B","~$cljs.core/MetaFn","^:N"]],"^:",237,"^:C",1,"^:D",true,"^:9",["^1:",["^::",["^1:",[["^;<"]]]]],"^6","Normalize tokens in the order-by clause, which can have different syntax when using MBQL 95 or 98\n  rules (`[<field> :asc]` vs `[:asc <field>]`, for example)."],"~$canonicalize-native-query",["^ ","^:7",null,"^5",["^ ","^7","metabase/mbql/normalize.cljc","^8",727,"^9",8,"^:",727,"^;",33,"^:8",true,"^:9",["^1:",["^::",["^1:",[[["^ ","^:P",["^;8"],"^1<","^:;"]]]]]]],"^:8",true,"^L","^3X","^7","metabase/mbql/normalize.cljc","^;",33,"^:<",["^1:",[["~$p__81167"]]],"^:=",null,"^:>",["^1:",[null,null]],"^9",1,"^:?",false,"^8",727,"^:@",["^K",[null,"^:A","^:B","^:N"]],"^:",727,"^:C",1,"^:D",true,"^:9",["^1:",["^::",["^1:",[[["^ ","^:P",["^;8"],"^1<","^:;"]]]]]]],"~$non-empty?",["^ ","^:7",null,"^5",["^ ","^7","metabase/mbql/normalize.cljc","^8",736,"^9",8,"^:",736,"^;",18,"^:8",true,"^:9",["^1:",["^::",["^1:",[["~$x"]]]]]],"^:8",true,"^L","^3[","^7","metabase/mbql/normalize.cljc","^;",18,"^:<",["^1:",[["~$x"]]],"^:=",null,"^:>",["^1:",[null,null]],"^9",1,"^:?",false,"^8",736,"^:@","~$seq","^:",736,"^:C",1,"^:D",true,"^:9",["^1:",["^::",["^1:",[["~$x"]]]]]],"~$remove-empty-clauses-in-join",["^ ","^:7",null,"^5",["^ ","^7","metabase/mbql/normalize.cljc","^8",840,"^9",8,"^:",840,"^;",36,"^:8",true,"^:9",["^1:",["^::",["^1:",[["^:M"]]]]]],"^:8",true,"^L","^3R","^7","metabase/mbql/normalize.cljc","^;",36,"^:<",["^1:",[["^:M"]]],"^:=",null,"^:>",["^1:",[null,null]],"^9",1,"^:?",false,"^8",840,"^:@","^:B","^:",840,"^:C",1,"^:D",true,"^:9",["^1:",["^::",["^1:",[["^:M"]]]]]],"~$remove-empty-clauses-in-sequence",["^ ","^:7",null,"^5",["^ ","^7","metabase/mbql/normalize.cljc","^8",834,"^9",8,"^:",834,"^;",40,"^:8",true,"^:9",["^1:",["^::",["^1:",[["~$xs","~$path"]]]]]],"^:8",true,"^L","^1U","^7","metabase/mbql/normalize.cljc","^;",40,"^:<",["^1:",[["^;D","^;E"]]],"^:=",null,"^:>",["^1:",[null,null]],"^9",1,"^:?",false,"^8",834,"^:@",["^K",["^:A","^:N"]],"^:",834,"^:C",2,"^:D",true,"^:9",["^1:",["^::",["^1:",[["^;D","^;E"]]]]]],"~$remove-empty-clauses",["^ ","^:7",null,"^5",["^ ","^:8",true,"^7","metabase/mbql/normalize.cljc","^;",28,"~:top-fn",["^ ","^:?",false,"~:fixed-arity",2,"^:C",2,"^:<",[["^:T"],["~$x","^;E"]],"^:9",["^1:",[["^:T"],["~$x","^;E"]]],"^:>",["^1:",[null,null]]],"^9",8,"^8",857,"^:",857,"^:9",["^1:",["^::",["^1:",[["^:T"],["~$x","^;E"]]]]],"^6","Remove any empty or `nil` clauses in a query."],"^:8",true,"^L","^2:","^7","metabase/mbql/normalize.cljc","^;",28,"^;G",["^ ","^:?",false,"^;H",2,"^:C",2,"^:<",[["^:T"],["~$x","^;E"]],"^:9",["^1:",[["^:T"],["~$x","^;E"]]],"^:>",["^1:",[null,null]]],"^:<",[["^:T"],["~$x","^;E"]],"^:=",null,"^;H",2,"^:>",["^1:",[null,null]],"^9",1,"^:?",false,"~:methods",[["^ ","^;H",1,"^:?",false,"^:X","^:B"],["^ ","^;H",2,"^:?",false]],"^8",857,"^:",857,"^:C",2,"^:D",true,"^:9",["^1:",[["^:T"],["~$x","^;E"]]],"^6","Remove any empty or `nil` clauses in a query."],"~$normalize-expressions-tokens",["^ ","^:7",null,"^5",["^ ","^7","metabase/mbql/normalize.cljc","^8",229,"^9",8,"^:",229,"^;",36,"^:8",true,"^:9",["^1:",["^::",["^1:",[["~$expressions-clause"]]]]],"^6","For expressions, we don't want to normalize the name of the expression; keep that as is, and make it a string;\n   normalize the definitions as normal."],"^:8",true,"^L","^3G","^7","metabase/mbql/normalize.cljc","^;",36,"^:<",["^1:",[["^;K"]]],"^:=",null,"^:>",["^1:",[null,null]],"^9",1,"^:?",false,"^8",229,"^:@",["^K",[null,"^:A","^:B"]],"^:",229,"^:C",1,"^:D",true,"^:9",["^1:",["^::",["^1:",[["^;K"]]]]],"^6","For expressions, we don't want to normalize the name of the expression; keep that as is, and make it a string;\n   normalize the definitions as normal."],"~$canonicalize-breakouts",["^ ","^:7",null,"^5",["^ ","^7","metabase/mbql/normalize.cljc","^8",690,"^9",8,"^:",690,"^;",30,"^:8",true,"^:9",["^1:",["^::",["^1:",[["~$breakouts"]]]]]],"^:8",true,"^L","^3N","^7","metabase/mbql/normalize.cljc","^;",30,"^:<",["^1:",[["^;M"]]],"^:=",null,"^:>",["^1:",[null,null]],"^9",1,"^:?",false,"^8",690,"^:@",["^K",[null,"^:N"]],"^:",690,"^:C",1,"^:D",true,"^:9",["^1:",["^::",["^1:",[["^;M"]]]]]],"~$normalize-fragment",["^ ","^:7",null,"^5",["^ ","^7","metabase/mbql/normalize.cljc","^8",897,"^9",7,"^:",897,"^;",25,"^:9",["^1:",["^::",["^1:",[["^;E","~$x"]]]]],"^6","Normalize just a specific fragment of a query, such as just the inner MBQL part or just a filter clause. `path` is\n  where this fragment would normally live in a full query.\n\n    (normalize-fragment [:query :filter] [\"=\" 100 200])\n    ;;-> [:= [:field-id 100] 200]","~:style/indent",1],"^L","^3J","^7","metabase/mbql/normalize.cljc","^;",25,"^:<",["^1:",[["^;E","~$x"]]],"^:=",null,"^:>",["^1:",[null,null]],"^9",1,"^:?",false,"^8",897,"^:@",["^K",["^:B","^:N"]],"^;O",1,"^:",897,"^:C",2,"^:D",true,"^:9",["^1:",["^::",["^1:",[["^;E","~$x"]]]]],"^6","Normalize just a specific fragment of a query, such as just the inner MBQL part or just a filter clause. `path` is\n  where this fragment would normally live in a full query.\n\n    (normalize-fragment [:query :filter] [\"=\" 100 200])\n    ;;-> [:= [:field-id 100] 200]"],"~$template-tag-definition-key->transform-fn",["^ ","^:7",null,"^5",["^ ","^7","metabase/mbql/normalize.cljc","^8",249,"^9",8,"^:",249,"^;",49,"^:8",true,"^:9",["^1:",["^::",["^1:",[["~$k"]]]]],"^6","Get the function that should be used to transform values for normalized key `k` in a template tag definition."],"^:8",true,"^L","^42","^7","metabase/mbql/normalize.cljc","^;",49,"^:<",["^1:",[["~$k"]]],"^:=",null,"^:>",["^1:",[null,null]],"^9",1,"^:?",false,"^8",249,"^:@",["^K",[null,"^:B"]],"^:",249,"^:C",1,"^:D",true,"^:9",["^1:",["^::",["^1:",[["~$k"]]]]],"^6","Get the function that should be used to transform values for normalized key `k` in a template tag definition."],"~$path->special-token-normalization-fn",["^ ","^5",["^ ","^7","metabase/mbql/normalize.cljc","^8",345,"^9",16,"^:",345,"^;",52,"^:8",true],"^:8",true,"^L","^37","^7","metabase/mbql/normalize.cljc","^;",52,"^9",1,"^8",345,"^:",345,"^:X","~$cljs.core/IMap","^6","Map of special functions that should be used to perform token normalization for a given path. For example, the\n  `:expressions` key in an MBQL query should preserve the case of the expression names; this custom behavior is\n  defined below."],"~$canonicalize-compound-filter-clause",["^ ","^:7",null,"^5",["^ ","^7","metabase/mbql/normalize.cljc","^8",511,"^9",8,"^:",511,"^;",43,"^:8",true,"^:9",["^1:",["^::",["^1:",[[["^;3","~$&","~$args"]]]]]]],"^:8",true,"^L","^2H","^7","metabase/mbql/normalize.cljc","^;",43,"^:<",["^1:",[["~$p__80822"]]],"^:=",null,"^:>",["^1:",[null,null]],"^9",1,"^:?",false,"^8",511,"^:@","^:B","^:",511,"^:C",1,"^:D",true,"^:9",["^1:",["^::",["^1:",[[["^;3","~$&","^;T"]]]]]]],"~$normalize-template-tag-definition",["^ ","^:7",null,"^5",["^ ","^7","metabase/mbql/normalize.cljc","^8",262,"^9",8,"^:",262,"^;",41,"^:8",true,"^:9",["^1:",["^::",["^1:",[["~$tag-definition"]]]]],"^6","For a template tag definition, normalize all the keys appropriately."],"^:8",true,"^L","^2X","^7","metabase/mbql/normalize.cljc","^;",41,"^:<",["^1:",[["^;W"]]],"^:=",null,"^:>",["^1:",[null,null]],"^9",1,"^:?",false,"^8",262,"^:@",["^K",["^:A","^:B"]],"^:",262,"^:C",1,"^:D",true,"^:9",["^1:",["^::",["^1:",[["^;W"]]]]],"^6","For a template tag definition, normalize all the keys appropriately."],"~$is-clause?",["^ ","^:7",null,"^5",["^ ","^7","metabase/mbql/normalize.cljc","^8",56,"^9",7,"^:",56,"^;",17,"^:9",["^1:",["^::",["^1:",[["~$k-or-ks","~$x"]]]]],"^6","If `x` an MBQL clause, and an instance of clauses defined by keyword(s) `k-or-ks`?\n\n    (is-clause? :count [:count 10])        ; -> true\n    (is-clause? #{:+ :- :* :/} [:+ 10 20]) ; -> true\n\n  (This is different from the implementation in `mbql.u` because it also supports un-normalized clauses. You shouldn't\n  need to use this outside of this namespace.)"],"^L","^2R","^7","metabase/mbql/normalize.cljc","^;",17,"^:<",["^1:",[["^;Y","~$x"]]],"^:=",null,"^:>",["^1:",[null,null]],"^9",1,"^:?",false,"^8",56,"^:@",["^K",["^;1","^:B"]],"^:",56,"^:C",2,"^:D",true,"^:9",["^1:",["^::",["^1:",[["^;Y","~$x"]]]]],"^6","If `x` an MBQL clause, and an instance of clauses defined by keyword(s) `k-or-ks`?\n\n    (is-clause? :count [:count 10])        ; -> true\n    (is-clause? #{:+ :- :* :/} [:+ 10 20]) ; -> true\n\n  (This is different from the implementation in `mbql.u` because it also supports un-normalized clauses. You shouldn't\n  need to use this outside of this namespace.)"],"~$normalize-ag-clause-tokens",["^ ","^:7",null,"^5",["^ ","^7","metabase/mbql/normalize.cljc","^8",207,"^9",8,"^:",207,"^;",34,"^:8",true,"^:9",["^1:",["^::",["^1:",[["~$ag-clause"]]]]],"^6","For old-style aggregations like `{:aggregation :count}` make sure we normalize the ag type (`:count`). Other wacky\n  clauses like `{:aggregation [:count :count]}` need to be handled as well :("],"^:8",true,"^L","^4N","^7","metabase/mbql/normalize.cljc","^;",34,"^:<",["^1:",[["^;["]]],"^:=",null,"^:>",["^1:",[null,null]],"^9",1,"^:?",false,"^8",207,"^:@",["^K",[null,"^:A","^:B","^2P","^:N"]],"^:",207,"^:C",1,"^:D",true,"^:9",["^1:",["^::",["^1:",[["^;["]]]]],"^6","For old-style aggregations like `{:aggregation :count}` make sure we normalize the ag type (`:count`). Other wacky\n  clauses like `{:aggregation [:count :count]}` need to be handled as well :("],"~$canonicalize-order-by",["^ ","^:7",null,"^5",["^ ","^7","metabase/mbql/normalize.cljc","^8",695,"^9",8,"^:",695,"^;",29,"^:8",true,"^:9",["^1:",["^::",["^1:",[["^;<"]]]]],"^6","Make sure order by clauses like `[:asc 10]` get `:field-id` added where appropriate, e.g. `[:asc [:field-id 10]]`"],"^:8",true,"^L","^4I","^7","metabase/mbql/normalize.cljc","^;",29,"^:<",["^1:",[["^;<"]]],"^:=",null,"^:>",["^1:",[null,null]],"^9",1,"^:?",false,"^8",695,"^:@","^:B","^:",695,"^:C",1,"^:D",true,"^:9",["^1:",["^::",["^1:",[["^;<"]]]]],"^6","Make sure order by clauses like `[:asc 10]` get `:field-id` added where appropriate, e.g. `[:asc [:field-id 10]]`"],"~$canonicalize-source-query",["^ ","^:7",null,"^5",["^ ","^7","metabase/mbql/normalize.cljc","^8",731,"^9",8,"^:",731,"^;",33,"^:8",true,"^:9",["^1:",["^::",["^1:",[[["^ ","~$native?","~:native","^1<","~$source-query"]]]]]]],"^:8",true,"^L","^52","^7","metabase/mbql/normalize.cljc","^;",33,"^:<",["^1:",[["~$p__81170"]]],"^:=",null,"^:>",["^1:",[null,null]],"^9",1,"^:?",false,"^8",731,"^:@",["^K",[null,"^:A","^:B","^:N"]],"^:",731,"^:C",1,"^:D",true,"^:9",["^1:",["^::",["^1:",[[["^ ","^<2","^<3","^1<","^<4"]]]]]]],"~$canonicalize-inner-mbql-query",["^ ","^5",["^ ","^7","metabase/mbql/normalize.cljc","^8",751,"^9",40,"^:",751,"^;",69,"^:9",["^1:",["^::",["^1:",[["^:T"]]]]],"^:8",true],"^:8",true,"^L","^4V","^7","metabase/mbql/normalize.cljc","^;",69,"^9",1,"^8",751,"^:",751,"^:X","^:Y","^:9",["^1:",["^::",["^1:",[["^:T"]]]]]],"~$normalize-source-query",["^ ","^:7",null,"^5",["^ ","^7","metabase/mbql/normalize.cljc","^8",305,"^9",8,"^:",305,"^;",30,"^:8",true,"^:9",["^1:",["^::",["^1:",[["^<4"]]]]]],"^:8",true,"^L","^58","^7","metabase/mbql/normalize.cljc","^;",30,"^:<",["^1:",[["^<4"]]],"^:=",null,"^:>",["^1:",[null,null]],"^9",1,"^:?",false,"^8",305,"^:@",["^K",[null,"^:B"]],"^:",305,"^:C",1,"^:D",true,"^:9",["^1:",["^::",["^1:",[["^<4"]]]]]],"~$aggregation-subclause?",["^ ","^:7",null,"^5",["^ ","^7","metabase/mbql/normalize.cljc","^8",198,"^9",8,"^:",198,"^;",30,"^:8",true,"^:9",["^1:",["^::",["^1:",[["~$x"]]]]]],"^:8",true,"^L","^55","^7","metabase/mbql/normalize.cljc","^;",30,"^:<",["^1:",[["~$x"]]],"^:=",null,"^:>",["^1:",[null,null]],"^9",1,"^:?",false,"^8",198,"^:@",["^K",["^:B","^:N"]],"^:",198,"^:C",1,"^:D",true,"^:9",["^1:",["^::",["^1:",[["~$x"]]]]]],"~$canonicalize-template-tag",["^ ","^:7",null,"^5",["^ ","^7","metabase/mbql/normalize.cljc","^8",719,"^9",8,"^:",719,"^;",33,"^:8",true,"^:9",["^1:",["^::",["^1:",[[["^ ","^:P",["~$dimension"],"^1<","~$tag"]]]]]]],"^:8",true,"^L","^3E","^7","metabase/mbql/normalize.cljc","^;",33,"^:<",["^1:",[["~$p__81150"]]],"^:=",null,"^:>",["^1:",[null,null]],"^9",1,"^:?",false,"^8",719,"^:@",["^K",[null,"^:A","^:B","^:N"]],"^:",719,"^:C",1,"^:D",true,"^:9",["^1:",["^::",["^1:",[[["^ ","^:P",["^<:"],"^1<","^<;"]]]]]]],"~$normalize-query-parameter",["^ ","^:7",null,"^5",["^ ","^7","metabase/mbql/normalize.cljc","^8",294,"^9",7,"^:",294,"^;",32,"^:9",["^1:",["^::",["^1:",[[["^ ","^:P",["~$type","~$target","~$id","~$values_source_config"],"^1<","~$param"]]]]]],"^6","Normalize a parameter in the query `:parameters` list."],"^L","^57","^7","metabase/mbql/normalize.cljc","^;",32,"^:<",["^1:",[["~$p__80671"]]],"^:=",null,"^:>",["^1:",[null,null]],"^9",1,"^:?",false,"^8",294,"^:@",["^K",[null,"^:A","^:B","^:N"]],"^:",294,"^:C",1,"^:D",true,"^:9",["^1:",["^::",["^1:",[[["^ ","^:P",["^<>","^<?","^<@","^<A"],"^1<","^<B"]]]]]],"^6","Normalize a parameter in the query `:parameters` list."],"~$canonicalize-simple-aggregation-with-field",["^ ","^:7",null,"^5",["^ ","^7","metabase/mbql/normalize.cljc","^8",590,"^9",8,"^:",590,"^;",50,"^:8",true,"^:9",["^1:",["^::",["^1:",[[["^:F","^:G"]]]]]]],"^:8",true,"^L","^3K","^7","metabase/mbql/normalize.cljc","^;",50,"^:<",["^1:",[["~$p__80953"]]],"^:=",null,"^:>",["^1:",[null,null]],"^9",1,"^:?",false,"^8",590,"^:@","^:I","^:",590,"^:C",1,"^:D",true,"^:9",["^1:",["^::",["^1:",[[["^:F","^:G"]]]]]]],"~$path->special-remove-empty-clauses-fn",["^ ","^5",["^ ","^7","metabase/mbql/normalize.cljc","^8",851,"^9",16,"^:",851,"^;",53,"^:8",true],"^:8",true,"^L","^4=","^7","metabase/mbql/normalize.cljc","^;",53,"^9",1,"^8",851,"^:",851,"^:X","^;R"],"~$normalize-tokens",["^ ","^:7",null,"^5",["^ ","^7","metabase/mbql/normalize.cljc","^8",366,"^9",7,"^:",366,"^;",23,"^:9",["^1:",["^::",["^1:",[["~$x","~$&",["^;E"]]]]]],"^6","Recursively normalize tokens in `x`.\n\n  Every time this function recurses (thru a map value) it adds a new (normalized) key to key path, e.g. `path` will be\n  `[:query :order-by]` when we're in the MBQL order-by clause. If we need to handle these top-level clauses in special\n  ways add a function to `path->special-token-normalization-fn` above.\n\n  In some cases, dealing with the path isn't desirable, but we don't want to accidentally trigger normalization\n  functions (such as accidentally normalizing the `:type` key in something other than the top-level of the query), so\n  by convention please pass `:ignore-path` to avoid accidentally triggering path functions.","^;G",["^ ","^:?",true,"^;H",1,"^:C",1,"^:<",[["^1:",["~$x",["^;E"]]]],"^:9",["^1:",[["~$x","~$&",["^;E"]]]],"^:>",["^1:",[null]]]],"^L","^23","^7","metabase/mbql/normalize.cljc","^;",23,"^;G",["^ ","^:?",true,"^;H",1,"^:C",1,"^:<",[["^1:",["~$x",["^;E"]]]],"^:9",["^1:",[["~$x","~$&",["^;E"]]]],"^:>",["^1:",[null]]],"^:<",[["^1:",["~$x",["^;E"]]]],"^:=",null,"^;H",1,"^:>",["^1:",[null]],"^9",1,"^:?",true,"^;I",[["^ ","^;H",1,"^:?",true]],"^8",366,"^:@","^:B","^:",366,"^:C",1,"^:D",true,"^:9",["^1:",[["~$x","~$&",["^;E"]]]],"^6","Recursively normalize tokens in `x`.\n\n  Every time this function recurses (thru a map value) it adds a new (normalized) key to key path, e.g. `path` will be\n  `[:query :order-by]` when we're in the MBQL order-by clause. If we need to handle these top-level clauses in special\n  ways add a function to `path->special-token-normalization-fn` above.\n\n  In some cases, dealing with the path isn't desirable, but we don't want to accidentally trigger normalization\n  functions (such as accidentally normalizing the `:type` key in something other than the top-level of the query), so\n  by convention please pass `:ignore-path` to avoid accidentally triggering path functions."],"~$normalize-mbql-clause-tokens",["^ ","^5",["^ ","^7","metabase/mbql/normalize.cljc","^8",79,"^9",21,"^:",79,"^;",49,"^:8",true],"^:8",true,"^L","^1W","^7","metabase/mbql/normalize.cljc","^;",49,"^9",1,"^8",79,"^:",79,"^:X","^25"],"~$canonicalize",["^ ","^:7",null,"^5",["^ ","^7","metabase/mbql/normalize.cljc","^8",762,"^9",8,"^:",762,"^;",20,"^:8",true,"^:9",["^1:",["^::",["^1:",[[["^ ","^:P",["^:T","~$parameters","~$source-metadata","~$native"],"^1<","^:W"]]]]]],"^6","Canonicalize a query [MBQL query], rewriting the query as if you perfectly followed the recommended style guides for\n  writing MBQL. Does things like removes unneeded and empty clauses, converts older MBQL '95 syntax to MBQL '98, etc."],"^:8",true,"^L","^1Z","^7","metabase/mbql/normalize.cljc","^;",20,"^:<",["^1:",[["~$p__81180"]]],"^:=",null,"^:>",["^1:",[null,null]],"^9",1,"^:?",false,"^8",762,"^:",762,"^:C",1,"^:D",true,"^:9",["^1:",["^::",["^1:",[[["^ ","^:P",["^:T","^<J","^<K","^<L"],"^1<","^:W"]]]]]],"^6","Canonicalize a query [MBQL query], rewriting the query as if you perfectly followed the recommended style guides for\n  writing MBQL. Does things like removes unneeded and empty clauses, converts older MBQL '95 syntax to MBQL '98, etc."],"~$canonicalize-mbql-clauses",["^ ","^:7",null,"^5",["^ ","^7","metabase/mbql/normalize.cljc","^8",635,"^9",8,"^:",635,"^;",33,"^:8",true,"^:9",["^1:",["^::",["^1:",[["^:["]]]]],"^6","Walk an `mbql-query` an canonicalize non-top-level clauses like `:fk->`."],"^:8",true,"^L","^2;","^7","metabase/mbql/normalize.cljc","^;",33,"^:<",["^1:",[["^:["]]],"^:=",null,"^:>",["^1:",[null,null]],"^9",1,"^:?",false,"^8",635,"^:@","^:B","^:",635,"^:C",1,"^:D",true,"^:9",["^1:",["^::",["^1:",[["^:["]]]]],"^6","Walk an `mbql-query` an canonicalize non-top-level clauses like `:fk->`."],"~$wrap-implicit-field-id",["^ ","^:7",null,"^5",["^ ","^7","metabase/mbql/normalize.cljc","^8",422,"^9",8,"^:",422,"^;",30,"^:8",true,"^:9",["^1:",["^::",["^1:",[["^:G"]]]]],"^6","Wrap raw integer Field IDs (i.e., those in an implicit 'field' position) in a `:field` clause if they're not\n  already. Done for MBQL 95 backwards-compatibility. e.g.:\n\n    {:filter [:= 10 20]} ; -> {:filter [:= [:field 10 nil] 20]}"],"^:8",true,"^L","^28","^7","metabase/mbql/normalize.cljc","^;",30,"^:<",["^1:",[["^:G"]]],"^:=",null,"^:>",["^1:",[null,null]],"^9",1,"^:?",false,"^8",422,"^:@",["^K",[null,"^:I"]],"^:",422,"^:C",1,"^:D",true,"^:9",["^1:",["^::",["^1:",[["^:G"]]]]],"^6","Wrap raw integer Field IDs (i.e., those in an implicit 'field' position) in a `:field` clause if they're not\n  already. Done for MBQL 95 backwards-compatibility. e.g.:\n\n    {:filter [:= 10 20]} ; -> {:filter [:= [:field 10 nil] 20]}"],"~$canonicalize-filtered-aggregation-clause",["^ ","^:7",null,"^5",["^ ","^7","metabase/mbql/normalize.cljc","^8",603,"^9",8,"^:",603,"^;",48,"^:8",true,"^:9",["^1:",["^::",["^1:",[[["^:F","~$filter-subclause"]]]]]]],"^:8",true,"^L","^1O","^7","metabase/mbql/normalize.cljc","^;",48,"^:<",["^1:",[["~$p__81002"]]],"^:=",null,"^:>",["^1:",[null,null]],"^9",1,"^:?",false,"^8",603,"^:@","^:I","^:",603,"^:C",1,"^:D",true,"^:9",["^1:",["^::",["^1:",[[["^:F","^<Q"]]]]]]],"~$canonicalize-mbql-clause",["^ ","^5",["^ ","^7","metabase/mbql/normalize.cljc","^8",432,"^9",21,"^:",432,"^;",45,"^:8",true,"^:9",["^1:",["^::",["^1:",[["^:K"]]]]]],"^:8",true,"^L","^1Q","^7","metabase/mbql/normalize.cljc","^;",45,"^9",1,"^8",432,"^:",432,"^:X","^25","^:9",["^1:",["^::",["^1:",[["^:K"]]]]]],"~$wrap-single-aggregations",["^ ","^:7",null,"^5",["^ ","^7","metabase/mbql/normalize.cljc","^8",657,"^9",8,"^:",657,"^;",32,"^:8",true,"^:9",["^1:",["^::",["^1:",[["~$aggregations"]]]]],"^6","Convert old MBQL 95 single-aggregations like `{:aggregation :count}` or `{:aggregation [:count]}` to MBQL 98+\n  multiple-aggregation syntax (e.g. `{:aggregation [[:count]]}`)."],"^:8",true,"^L","^4P","^7","metabase/mbql/normalize.cljc","^;",32,"^:<",["^1:",[["^<U"]]],"^:=",null,"^:>",["^1:",[null,null]],"^9",1,"^:?",false,"^8",657,"^:@","^:B","^:",657,"^:C",1,"^:D",true,"^:9",["^1:",["^::",["^1:",[["^<U"]]]]],"^6","Convert old MBQL 95 single-aggregations like `{:aggregation :count}` or `{:aggregation [:count]}` to MBQL 98+\n  multiple-aggregation syntax (e.g. `{:aggregation [[:count]]}`)."],"~$perform-whole-query-transformations",["^ ","^:7",null,"^5",["^ ","^7","metabase/mbql/normalize.cljc","^8",809,"^9",8,"^:",809,"^;",43,"^:8",true,"^:9",["^1:",["^::",["^1:",[["^:T"]]]]],"^6","Perform transformations that operate on the query as a whole, making sure the structure as a whole is logical and\n  consistent."],"^:8",true,"^L","^2<","^7","metabase/mbql/normalize.cljc","^;",43,"^:<",["^1:",[["^:T"]]],"^:=",null,"^:>",["^1:",[null,null]],"^9",1,"^:?",false,"^8",809,"^:",809,"^:C",1,"^:D",true,"^:9",["^1:",["^::",["^1:",[["^:T"]]]]],"^6","Perform transformations that operate on the query as a whole, making sure the structure as a whole is logical and\n  consistent."],"~$remove-empty-clauses-in-source-query",["^ ","^:7",null,"^5",["^ ","^7","metabase/mbql/normalize.cljc","^8",843,"^9",8,"^:",843,"^;",44,"^:8",true,"^:9",["^1:",["^::",["^1:",[[["^ ","^<2","^<3","^1<","^<4"]]]]]]],"^:8",true,"^L","^2F","^7","metabase/mbql/normalize.cljc","^;",44,"^:<",["^1:",[["~$p__81235"]]],"^:=",null,"^:>",["^1:",[null,null]],"^9",1,"^:?",false,"^8",843,"^:@",["^K",[null,"^:B"]],"^:",843,"^:C",1,"^:D",true,"^:9",["^1:",["^::",["^1:",[[["^ ","^<2","^<3","^1<","^<4"]]]]]]],"~$remove-empty-clauses-in-map",["^ ","^:7",null,"^5",["^ ","^7","metabase/mbql/normalize.cljc","^8",826,"^9",8,"^:",826,"^;",35,"^:8",true,"^:9",["^1:",["^::",["^1:",[["~$m","^;E"]]]]]],"^:8",true,"^L","^2?","^7","metabase/mbql/normalize.cljc","^;",35,"^:<",["^1:",[["~$m","^;E"]]],"^:=",null,"^:>",["^1:",[null,null]],"^9",1,"^:?",false,"^8",826,"^:@",["^K",[null,"^:A","^:B","^:N"]],"^:",826,"^:C",2,"^:D",true,"^:9",["^1:",["^::",["^1:",[["~$m","^;E"]]]]]],"~$maybe-normalize-token",["^ ","^:7",null,"^5",["^ ","^7","metabase/mbql/normalize.cljc","^8",49,"^9",8,"^:",49,"^;",29,"^:8",true,"^:9",["^1:",["^::",["^1:",[["~$x"]]]]],"^6","Normalize token `x`, but only if it's a keyword or string."],"^:8",true,"^L","^2M","^7","metabase/mbql/normalize.cljc","^;",29,"^:<",["^1:",[["~$x"]]],"^:=",null,"^:>",["^1:",[null,null]],"^9",1,"^:?",false,"^8",49,"^:@",["^K",[null,"^2P","^:N"]],"^:",49,"^:C",1,"^:D",true,"^:9",["^1:",["^::",["^1:",[["~$x"]]]]],"^6","Normalize token `x`, but only if it's a keyword or string."],"~$canonicalize-aggregations",["^ ","^:7",null,"^5",["^ ","^7","metabase/mbql/normalize.cljc","^8",682,"^9",8,"^:",682,"^;",33,"^:8",true,"^:9",["^1:",["^::",["^1:",[["^<U"]]]]],"^6","Canonicalize subclauses (see above) and make sure `:aggregation` is a sequence of clauses instead of a single\n  clause."],"^:8",true,"^L","^2J","^7","metabase/mbql/normalize.cljc","^;",33,"^:<",["^1:",[["^<U"]]],"^:=",null,"^:>",["^1:",[null,null]],"^9",1,"^:?",false,"^8",682,"^:@",["^K",["^:A","^:I","^:B","^;=","^:N"]],"^:",682,"^:C",1,"^:D",true,"^:9",["^1:",["^::",["^1:",[["^<U"]]]]],"^6","Canonicalize subclauses (see above) and make sure `:aggregation` is a sequence of clauses instead of a single\n  clause."],"~$canonicalize-template-tags",["^ ","^:7",null,"^5",["^ ","^7","metabase/mbql/normalize.cljc","^8",723,"^9",8,"^:",723,"^;",34,"^:8",true,"^:9",["^1:",["^::",["^1:",[["~$tags"]]]]]],"^:8",true,"^L","^2G","^7","metabase/mbql/normalize.cljc","^;",34,"^:<",["^1:",[["^=1"]]],"^:=",null,"^:>",["^1:",[null,null]],"^9",1,"^:?",false,"^8",723,"^:@",["^K",[null,"^:A","^:B"]],"^:",723,"^:C",1,"^:D",true,"^:9",["^1:",["^::",["^1:",[["^=1"]]]]]],"~$move-source-metadata-to-mbql-query",["^ ","^:7",null,"^5",["^ ","^7","metabase/mbql/normalize.cljc","^8",754,"^9",8,"^:",754,"^;",42,"^:8",true,"^:9",["^1:",["^::",["^1:",[[["^ ","^:P",["^<K"],"^1<","^:T"]]]]]],"^6","In Dashboard 0.33.0 `:source-metadata` about resolved queries is added to the 'inner' MBQL query rather than to the\n  top-level; if we encounter the old style, move it to the appropriate location."],"^:8",true,"^L","^2B","^7","metabase/mbql/normalize.cljc","^;",42,"^:<",["^1:",[["~$p__81178"]]],"^:=",null,"^:>",["^1:",[null,null]],"^9",1,"^:?",false,"^8",754,"^:@",["^K",["^:A","^:B"]],"^:",754,"^:C",1,"^:D",true,"^:9",["^1:",["^::",["^1:",[[["^ ","^:P",["^<K"],"^1<","^:T"]]]]]],"^6","In Dashboard 0.33.0 `:source-metadata` about resolved queries is added to the 'inner' MBQL query rather than to the\n  top-level; if we encounter the old style, move it to the appropriate location."]],"^18",["^ ","^D","^D","^U","^V","^W","^X","^Y","^Y","^Z","^Y","^X","^X","^V","^V"],"~:cljs.analyzer/constants",["^ ","^15",["^K",["~:path","~:special-fn","~:category","~:starts-with","~:semantic_type","~:min","~:<=","~:*","~:inside","~:widget-type","~:base-type","~:expression","~:is-empty","~:substring","~:desc","~:joined-field","~:contains","~:temporal-extract","~:template-tags","~:ignore-path","~:stddev","~:else","~:source-query","~:>","~:binning-strategy","~:unit","~:default","~:count-where","^L","^1<","~:descending","~:-","~:asc","~:cum-count","~:value","~:or","~:fields","~:temporal-unit","~:value_field","~:join-alias","~:ascending","~:joins","~:get-week","~:source-metadata","~:metadata/dataset-metadata","~:between","~:sum-where","~:not","~:field","~:type","~:use-as-display-name?","~:metabase.mbql.normalize/sequence","~:cum-sum","^1E","~:/","~:fk->","~:is-null","~:>=","~:not-empty","~:distinct","~:datetime-field","~:percentile","~:rows","~:datetime-subtract","~:alias","~:field_ref","~:strategy","^<3","~:aggregation-options","~:viz-settings","~:effective_type","~:+","~:var","~:label_field","~:datetime-add","~:median","~:share","~:max","~:!=","~:id","~:case","~:expressions","~:current","~:count","~:breakout","~:info","~:order-by","~:dimension","~:and","~:context","~:display-name","~:avg","~:error","~:aggregation","~:visibility_type","~:named","~:not-null","^19","~:interval","~:field-id","~:target","~:binning","^:S","~:values_source_config","~:does-not-contain","~:hierarchy","~:datetime-diff","~:clause","~:parameters","~:=","~:ends-with","~:<","~:fingerprint","~:relative-datetime","~:sum","~:base_type","~:field-literal","~:source-field","~:time-interval"]],"~:order",["^?;","^=M","^?1","^=?","^=K","^=G","^>4","^=>","^=U","^?8","^>D","^?D","^>>","^1<","^?F","^?A","^>R","^?5","^>J","^>A","^=Z","^=E","^?<","^=R","^=:","~:*","^=H","^=N","~:-","^=Q","^>2","~:/","^>=","^>?","~:+","^>H","^>K","^>L","^>M","^>S","^>[","^?B","^?3","^=I","^>5","^==","^>W","^=7","^L","^?7","^>O","^?9","^>I","^=V","^<3","^:S","^=T","^>B","^?C","^>G","^=9","^?2","^1E","^=L","^>C","^?@","^=F","^>U","^?>","^>Y","^=[","^>F","^>Q","^>V","^=J","^=Y","^>7","^>0","^19","^=5","^=6","^?6","^>9","^?E","^=C","^=W","^>X","^=S","^>3","^=<","^=8","^??","^=D","^?:","~:=","^>N","~:<","^=;","~:>","^>;","^=@","^><","^>:","^?4","^>1","^>@","^>E","^>6","^>Z","^>8","^>P","^=A","^?0","^?=","^=B","^=P","^=O","^=X","^>T"]],"^1=",["^ ","^16",["^K",[]]],"^1>",["^ "],"^1?",["^11","^D","^T","^13","^14","^[","^Y","^X","^V"]],"^P","^M","~:ns-specs",["^ "],"~:ns-spec-vars",["^K",[]],"~:compiler-options",["^5:",[["^?J","~:static-fns"],true,["^?J","~:shadow-tweaks"],null,["^?J","~:source-map-inline"],null,["^?J","~:elide-asserts"],false,["^?J","~:optimize-constants"],null,["^?J","^1D"],null,["^?J","~:external-config"],null,["^?J","~:tooling-config"],null,["^?J","~:emit-constants"],null,["^?J","~:load-tests"],null,["^?J","~:form-size-threshold"],null,["^?J","~:global-goog-object&array"],null,["^?J","~:data-readers"],null,["^?J","~:infer-externs"],"~:auto",["^?J","^1F"],["^K",["^1G","^1H"]],["~:js-options","~:js-provider"],"^16",["~:mode"],"~:dev",["^?J","~:fn-invoke-direct"],null,["^?J","~:source-map"],"/dev/null"]]]