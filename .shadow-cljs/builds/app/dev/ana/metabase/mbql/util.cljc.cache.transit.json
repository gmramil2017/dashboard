["^ ","~:output",["^ ","~:js","goog.provide('metabase.mbql.util');\n/**\n * Like `name`, but if `x` is a namespace-qualified keyword, returns that a string including the namespace.\n */\nmetabase.mbql.util.qualified_name = (function metabase$mbql$util$qualified_name(x){\nif(cljs.core.truth_((function (){var and__5043__auto__ = (x instanceof cljs.core.Keyword);\nif(and__5043__auto__){\nreturn cljs.core.namespace(x);\n} else {\nreturn and__5043__auto__;\n}\n})())){\nreturn [cljs.core.namespace(x),\"/\",cljs.core.name(x)].join('');\n} else {\nreturn cljs.core.name(x);\n}\n});\nvar ufv63605_64419 = schema.utils.use_fn_validation;\nvar output_schema63604_64420 = schema.core.Keyword;\nvar input_schema63606_64421 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [schema.core.one(metabase.mbql.schema.helpers.KeywordOrString,cljs.core.with_meta(new cljs.core.Symbol(null,\"token\",\"token\",429068312,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"schema\",\"schema\",-1582001791),new cljs.core.Symbol(\"schema.helpers\",\"KeywordOrString\",\"schema.helpers/KeywordOrString\",-360677001,null)], null)))], null);\nvar input_checker63607_64422 = (new cljs.core.Delay((function (){\nreturn schema.core.checker(input_schema63606_64421);\n}),null));\nvar output_checker63608_64423 = (new cljs.core.Delay((function (){\nreturn schema.core.checker(output_schema63604_64420);\n}),null));\nvar ret__51869__auto___64424 = /**\n * Inputs: [token :- schema.helpers/KeywordOrString]\n *   Returns: s/Keyword\n * \n *   Convert a string or keyword in various cases (`lisp-case`, `snake_case`, or `SCREAMING_SNAKE_CASE`) to a lisp-cased\n *   keyword.\n */\nmetabase.mbql.util.normalize_token = (function metabase$mbql$util$normalize_token(G__63609){\nvar validate__50237__auto__ = cljs.core.deref(ufv63605_64419);\nif(cljs.core.truth_(validate__50237__auto__)){\nvar args__50238__auto___64425 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [G__63609], null);\nif(cljs.core.truth_(schema.core.fn_validator)){\nvar G__63611_64426 = new cljs.core.Keyword(null,\"input\",\"input\",556931961);\nvar G__63612_64427 = cljs.core.with_meta(new cljs.core.Symbol(null,\"normalize-token\",\"normalize-token\",-2048623092,null),new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"schema\",\"schema\",-1582001791),new cljs.core.Symbol(\"s\",\"Keyword\",\"s/Keyword\",-850066400,null),new cljs.core.Keyword(null,\"doc\",\"doc\",1913296891),\"Convert a string or keyword in various cases (`lisp-case`, `snake_case`, or `SCREAMING_SNAKE_CASE`) to a lisp-cased\\n  keyword.\"], null));\nvar G__63613_64428 = input_schema63606_64421;\nvar G__63614_64429 = cljs.core.deref(input_checker63607_64422);\nvar G__63615_64430 = args__50238__auto___64425;\n(schema.core.fn_validator.cljs$core$IFn$_invoke$arity$5 ? schema.core.fn_validator.cljs$core$IFn$_invoke$arity$5(G__63611_64426,G__63612_64427,G__63613_64428,G__63614_64429,G__63615_64430) : schema.core.fn_validator.call(null,G__63611_64426,G__63612_64427,G__63613_64428,G__63614_64429,G__63615_64430));\n} else {\nvar temp__5804__auto___64431 = (function (){var fexpr__63616 = cljs.core.deref(input_checker63607_64422);\nreturn (fexpr__63616.cljs$core$IFn$_invoke$arity$1 ? fexpr__63616.cljs$core$IFn$_invoke$arity$1(args__50238__auto___64425) : fexpr__63616.call(null,args__50238__auto___64425));\n})();\nif(cljs.core.truth_(temp__5804__auto___64431)){\nvar error__50239__auto___64432 = temp__5804__auto___64431;\nthrow cljs.core.ex_info.cljs$core$IFn$_invoke$arity$2(schema.utils.format_STAR_.cljs$core$IFn$_invoke$arity$variadic(\"Input to %s does not match schema: \\n\\n\\t \\u001B[0;33m  %s \\u001B[0m \\n\\n\",cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([cljs.core.with_meta(new cljs.core.Symbol(null,\"normalize-token\",\"normalize-token\",-2048623092,null),new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"schema\",\"schema\",-1582001791),new cljs.core.Symbol(\"s\",\"Keyword\",\"s/Keyword\",-850066400,null),new cljs.core.Keyword(null,\"doc\",\"doc\",1913296891),\"Convert a string or keyword in various cases (`lisp-case`, `snake_case`, or `SCREAMING_SNAKE_CASE`) to a lisp-cased\\n  keyword.\"], null)),cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([error__50239__auto___64432], 0))], 0)),new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null,\"type\",\"type\",1174270348),new cljs.core.Keyword(\"schema.core\",\"error\",\"schema.core/error\",1991454308),new cljs.core.Keyword(null,\"schema\",\"schema\",-1582001791),input_schema63606_64421,new cljs.core.Keyword(null,\"value\",\"value\",305978217),args__50238__auto___64425,new cljs.core.Keyword(null,\"error\",\"error\",-978969032),error__50239__auto___64432], null));\n} else {\n}\n}\n} else {\n}\n\nvar o__50240__auto__ = (function (){var token = G__63609;\nwhile(true){\nreturn cljs.core.keyword.cljs$core$IFn$_invoke$arity$1(clojure.string.replace(clojure.string.lower_case(metabase.mbql.util.qualified_name(token)),/_/,\"-\"));\nbreak;\n}\n})();\nif(cljs.core.truth_(validate__50237__auto__)){\nif(cljs.core.truth_(schema.core.fn_validator)){\nvar G__63617_64433 = new cljs.core.Keyword(null,\"output\",\"output\",-1105869043);\nvar G__63618_64434 = cljs.core.with_meta(new cljs.core.Symbol(null,\"normalize-token\",\"normalize-token\",-2048623092,null),new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"schema\",\"schema\",-1582001791),new cljs.core.Symbol(\"s\",\"Keyword\",\"s/Keyword\",-850066400,null),new cljs.core.Keyword(null,\"doc\",\"doc\",1913296891),\"Convert a string or keyword in various cases (`lisp-case`, `snake_case`, or `SCREAMING_SNAKE_CASE`) to a lisp-cased\\n  keyword.\"], null));\nvar G__63619_64435 = output_schema63604_64420;\nvar G__63620_64436 = cljs.core.deref(output_checker63608_64423);\nvar G__63621_64437 = o__50240__auto__;\n(schema.core.fn_validator.cljs$core$IFn$_invoke$arity$5 ? schema.core.fn_validator.cljs$core$IFn$_invoke$arity$5(G__63617_64433,G__63618_64434,G__63619_64435,G__63620_64436,G__63621_64437) : schema.core.fn_validator.call(null,G__63617_64433,G__63618_64434,G__63619_64435,G__63620_64436,G__63621_64437));\n} else {\nvar temp__5804__auto___64438 = (function (){var fexpr__63622 = cljs.core.deref(output_checker63608_64423);\nreturn (fexpr__63622.cljs$core$IFn$_invoke$arity$1 ? fexpr__63622.cljs$core$IFn$_invoke$arity$1(o__50240__auto__) : fexpr__63622.call(null,o__50240__auto__));\n})();\nif(cljs.core.truth_(temp__5804__auto___64438)){\nvar error__50239__auto___64439 = temp__5804__auto___64438;\nthrow cljs.core.ex_info.cljs$core$IFn$_invoke$arity$2(schema.utils.format_STAR_.cljs$core$IFn$_invoke$arity$variadic(\"Output of %s does not match schema: \\n\\n\\t \\u001B[0;33m  %s \\u001B[0m \\n\\n\",cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([cljs.core.with_meta(new cljs.core.Symbol(null,\"normalize-token\",\"normalize-token\",-2048623092,null),new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"schema\",\"schema\",-1582001791),new cljs.core.Symbol(\"s\",\"Keyword\",\"s/Keyword\",-850066400,null),new cljs.core.Keyword(null,\"doc\",\"doc\",1913296891),\"Convert a string or keyword in various cases (`lisp-case`, `snake_case`, or `SCREAMING_SNAKE_CASE`) to a lisp-cased\\n  keyword.\"], null)),cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([error__50239__auto___64439], 0))], 0)),new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null,\"type\",\"type\",1174270348),new cljs.core.Keyword(\"schema.core\",\"error\",\"schema.core/error\",1991454308),new cljs.core.Keyword(null,\"schema\",\"schema\",-1582001791),output_schema63604_64420,new cljs.core.Keyword(null,\"value\",\"value\",305978217),o__50240__auto__,new cljs.core.Keyword(null,\"error\",\"error\",-978969032),error__50239__auto___64439], null));\n} else {\n}\n}\n} else {\n}\n\nreturn o__50240__auto__;\n});\nschema.utils.declare_class_schema_BANG_(schema.utils.fn_schema_bearer(metabase.mbql.util.normalize_token),schema.core.__GT_FnSchema(output_schema63604_64420,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [input_schema63606_64421], null)));\n\n/**\n * True if `x` is an MBQL clause (a sequence with a keyword as its first arg). (Since this is used by the code in\n *   `normalize` this handles pre-normalized clauses as well.)\n */\nmetabase.mbql.util.mbql_clause_QMARK_ = (function metabase$mbql$util$mbql_clause_QMARK_(x){\nreturn ((cljs.core.sequential_QMARK_(x)) && ((((!(cljs.core.map_entry_QMARK_(x)))) && ((cljs.core.first(x) instanceof cljs.core.Keyword)))));\n});\n/**\n * If `x` an MBQL clause, and an instance of clauses defined by keyword(s) `k-or-ks`?\n * \n *  (is-clause? :count [:count 10])        ; -> true\n *  (is-clause? #{:+ :- :* :/} [:+ 10 20]) ; -> true\n */\nmetabase.mbql.util.is_clause_QMARK_ = (function metabase$mbql$util$is_clause_QMARK_(k_or_ks,x){\nvar and__5043__auto__ = metabase.mbql.util.mbql_clause_QMARK_(x);\nif(and__5043__auto__){\nif(cljs.core.coll_QMARK_(k_or_ks)){\nvar G__63624 = cljs.core.first(x);\nvar fexpr__63623 = cljs.core.set(k_or_ks);\nreturn (fexpr__63623.cljs$core$IFn$_invoke$arity$1 ? fexpr__63623.cljs$core$IFn$_invoke$arity$1(G__63624) : fexpr__63623.call(null,G__63624));\n} else {\nreturn cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(k_or_ks,cljs.core.first(x));\n}\n} else {\nreturn and__5043__auto__;\n}\n});\nmetabase.mbql.util.combine_compound_filters_of_type = (function metabase$mbql$util$combine_compound_filters_of_type(compound_type,subclauses){\nreturn cljs.core.mapcat.cljs$core$IFn$_invoke$arity$variadic((function (p1__63625_SHARP_){\nreturn cljs.core.first(cljs.core.seq(cljs.core.filter.cljs$core$IFn$_invoke$arity$2(cljs.core.some_QMARK_,(function metabase$mbql$util$combine_compound_filters_of_type_$_match_63626(_AMPERSAND_parents,_AMPERSAND_match){\ntry{if(((cljs.core.vector_QMARK_(_AMPERSAND_match)) && ((cljs.core.count(_AMPERSAND_match) >= (1))))){\ntry{var _AMPERSAND_match_left__63632 = cljs.core.subvec.cljs$core$IFn$_invoke$arity$3(_AMPERSAND_match,(0),(1));\nif(((cljs.core.vector_QMARK_(_AMPERSAND_match_left__63632)) && ((cljs.core.count(_AMPERSAND_match_left__63632) === (1))))){\ntry{var _AMPERSAND_match_left__63632_0__63637 = cljs.core.nth.cljs$core$IFn$_invoke$arity$2(_AMPERSAND_match_left__63632,(0));\nif(cljs.core.truth_(cljs.core.partial.cljs$core$IFn$_invoke$arity$2(cljs.core._EQ_,compound_type)(_AMPERSAND_match_left__63632_0__63637))){\nvar args = cljs.core.subvec.cljs$core$IFn$_invoke$arity$2(_AMPERSAND_match,(1));\nreturn new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [args], null);\n} else {\nthrow cljs.core.match.backtrack;\n\n}\n}catch (e63643){if((e63643 instanceof Error)){\nvar e__62528__auto__ = e63643;\nif((e__62528__auto__ === cljs.core.match.backtrack)){\nthrow cljs.core.match.backtrack;\n} else {\nthrow e__62528__auto__;\n}\n} else {\nthrow e63643;\n\n}\n}} else {\nthrow cljs.core.match.backtrack;\n\n}\n}catch (e63640){if((e63640 instanceof Error)){\nvar e__62528__auto__ = e63640;\nif((e__62528__auto__ === cljs.core.match.backtrack)){\nthrow cljs.core.match.backtrack;\n} else {\nthrow e__62528__auto__;\n}\n} else {\nthrow e63640;\n\n}\n}} else {\nthrow cljs.core.match.backtrack;\n\n}\n}catch (e63639){if((e63639 instanceof Error)){\nvar e__62528__auto__ = e63639;\nif((e__62528__auto__ === cljs.core.match.backtrack)){\nreturn new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [_AMPERSAND_match], null)], null);\n} else {\nthrow e__62528__auto__;\n}\n} else {\nthrow e63639;\n\n}\n}})(cljs.core.PersistentVector.EMPTY,p1__63625_SHARP_))));\n}),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([subclauses], 0));\n});\n/**\n * Simplify compound `:and`, `:or`, and `:not` compound filters, combining or eliminating them where possible. This\n *   also fixes theoretically disallowed compound filters like `:and` with only a single subclause, and eliminates `nils`\n *   and duplicate subclauses from the clauses.\n */\nmetabase.mbql.util.simplify_compound_filter = (function metabase$mbql$util$simplify_compound_filter(filter_clause){\nreturn (function metabase$mbql$util$simplify_compound_filter_$_replace_63647(_AMPERSAND_parents,_AMPERSAND_match){\ntry{if(cljs.core.truth_((function (){var fexpr__63748 = metabase.mbql.util.match.impl.match_with_pred_or_class(cljs.core.seq_QMARK_);\nreturn (fexpr__63748.cljs$core$IFn$_invoke$arity$1 ? fexpr__63748.cljs$core$IFn$_invoke$arity$1(_AMPERSAND_match) : fexpr__63748.call(null,_AMPERSAND_match));\n})())){\nreturn metabase$mbql$util$simplify_compound_filter_$_replace_63647(_AMPERSAND_parents,cljs.core.vec(_AMPERSAND_match));\n} else {\nthrow cljs.core.match.backtrack;\n\n}\n}catch (e63702){if((e63702 instanceof Error)){\nvar e__62528__auto__ = e63702;\nif((e__62528__auto__ === cljs.core.match.backtrack)){\ntry{if((_AMPERSAND_match === null)){\nreturn null;\n} else {\nthrow cljs.core.match.backtrack;\n\n}\n}catch (e63703){if((e63703 instanceof Error)){\nvar e__62528__auto____$1 = e63703;\nif((e__62528__auto____$1 === cljs.core.match.backtrack)){\ntry{if(((cljs.core.vector_QMARK_(_AMPERSAND_match)) && ((cljs.core.count(_AMPERSAND_match) >= (0))))){\ntry{var _AMPERSAND_match_left__63663 = cljs.core.subvec.cljs$core$IFn$_invoke$arity$3(_AMPERSAND_match,(0),(0));\nif(((cljs.core.vector_QMARK_(_AMPERSAND_match_left__63663)) && ((cljs.core.count(_AMPERSAND_match_left__63663) === (0))))){\ntry{var _AMPERSAND_match_right__63664 = cljs.core.subvec.cljs$core$IFn$_invoke$arity$2(_AMPERSAND_match,(0));\nif(cljs.core.truth_(cljs.core.partial.cljs$core$IFn$_invoke$arity$2(cljs.core.every_QMARK_,cljs.core.nil_QMARK_)(_AMPERSAND_match_right__63664))){\nreturn null;\n} else {\nthrow cljs.core.match.backtrack;\n\n}\n}catch (e63747){if((e63747 instanceof Error)){\nvar e__62528__auto____$2 = e63747;\nif((e__62528__auto____$2 === cljs.core.match.backtrack)){\nthrow cljs.core.match.backtrack;\n} else {\nthrow e__62528__auto____$2;\n}\n} else {\nthrow e63747;\n\n}\n}} else {\nthrow cljs.core.match.backtrack;\n\n}\n}catch (e63746){if((e63746 instanceof Error)){\nvar e__62528__auto____$2 = e63746;\nif((e__62528__auto____$2 === cljs.core.match.backtrack)){\nthrow cljs.core.match.backtrack;\n} else {\nthrow e__62528__auto____$2;\n}\n} else {\nthrow e63746;\n\n}\n}} else {\nthrow cljs.core.match.backtrack;\n\n}\n}catch (e63704){if((e63704 instanceof Error)){\nvar e__62528__auto____$2 = e63704;\nif((e__62528__auto____$2 === cljs.core.match.backtrack)){\ntry{if(((cljs.core.vector_QMARK_(_AMPERSAND_match)) && ((cljs.core.count(_AMPERSAND_match) === 0)))){\nreturn null;\n} else {\nthrow cljs.core.match.backtrack;\n\n}\n}catch (e63705){if((e63705 instanceof Error)){\nvar e__62528__auto____$3 = e63705;\nif((e__62528__auto____$3 === cljs.core.match.backtrack)){\ntry{if(((cljs.core.vector_QMARK_(_AMPERSAND_match)) && ((cljs.core.count(_AMPERSAND_match) === 1)))){\ntry{var _AMPERSAND_match_0__63665 = cljs.core.nth.cljs$core$IFn$_invoke$arity$2(_AMPERSAND_match,(0));\nif(cljs.core.keyword_identical_QMARK_(_AMPERSAND_match_0__63665,new cljs.core.Keyword(null,\"and\",\"and\",-971899817))){\nreturn null;\n} else {\nthrow cljs.core.match.backtrack;\n\n}\n}catch (e63744){if((e63744 instanceof Error)){\nvar e__62528__auto____$4 = e63744;\nif((e__62528__auto____$4 === cljs.core.match.backtrack)){\ntry{var _AMPERSAND_match_0__63665 = cljs.core.nth.cljs$core$IFn$_invoke$arity$2(_AMPERSAND_match,(0));\nif(cljs.core.keyword_identical_QMARK_(_AMPERSAND_match_0__63665,new cljs.core.Keyword(null,\"or\",\"or\",235744169))){\nreturn null;\n} else {\nthrow cljs.core.match.backtrack;\n\n}\n}catch (e63745){if((e63745 instanceof Error)){\nvar e__62528__auto____$5 = e63745;\nif((e__62528__auto____$5 === cljs.core.match.backtrack)){\nthrow cljs.core.match.backtrack;\n} else {\nthrow e__62528__auto____$5;\n}\n} else {\nthrow e63745;\n\n}\n}} else {\nthrow e__62528__auto____$4;\n}\n} else {\nthrow e63744;\n\n}\n}} else {\nthrow cljs.core.match.backtrack;\n\n}\n}catch (e63706){if((e63706 instanceof Error)){\nvar e__62528__auto____$4 = e63706;\nif((e__62528__auto____$4 === cljs.core.match.backtrack)){\ntry{if(((cljs.core.vector_QMARK_(_AMPERSAND_match)) && ((cljs.core.count(_AMPERSAND_match) >= (1))))){\ntry{var _AMPERSAND_match_left__63676 = cljs.core.subvec.cljs$core$IFn$_invoke$arity$3(_AMPERSAND_match,(0),(1));\nif(((cljs.core.vector_QMARK_(_AMPERSAND_match_left__63676)) && ((cljs.core.count(_AMPERSAND_match_left__63676) === (1))))){\ntry{var _AMPERSAND_match_left__63676_0__63678 = cljs.core.nth.cljs$core$IFn$_invoke$arity$2(_AMPERSAND_match_left__63676,(0));\nif(cljs.core.truth_((function (){var fexpr__63742 = new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"or\",\"or\",235744169),null,new cljs.core.Keyword(null,\"and\",\"and\",-971899817),null], null), null);\nreturn (fexpr__63742.cljs$core$IFn$_invoke$arity$1 ? fexpr__63742.cljs$core$IFn$_invoke$arity$1(_AMPERSAND_match_left__63676_0__63678) : fexpr__63742.call(null,_AMPERSAND_match_left__63676_0__63678));\n})())){\ntry{var _AMPERSAND_match_right__63677 = cljs.core.subvec.cljs$core$IFn$_invoke$arity$2(_AMPERSAND_match,(1));\nif(cljs.core.truth_(cljs.core.partial.cljs$core$IFn$_invoke$arity$2(cljs.core.some,cljs.core.nil_QMARK_)(_AMPERSAND_match_right__63677))){\nvar args = cljs.core.subvec.cljs$core$IFn$_invoke$arity$2(_AMPERSAND_match,(1));\nvar clause_name = cljs.core.nth.cljs$core$IFn$_invoke$arity$2(_AMPERSAND_match_left__63676,(0));\nreturn metabase$mbql$util$simplify_compound_filter_$_replace_63647(_AMPERSAND_parents,cljs.core.apply.cljs$core$IFn$_invoke$arity$3(cljs.core.vector,clause_name,cljs.core.filterv(cljs.core.some_QMARK_,args)));\n} else {\nthrow cljs.core.match.backtrack;\n\n}\n}catch (e63743){if((e63743 instanceof Error)){\nvar e__62528__auto____$5 = e63743;\nif((e__62528__auto____$5 === cljs.core.match.backtrack)){\nthrow cljs.core.match.backtrack;\n} else {\nthrow e__62528__auto____$5;\n}\n} else {\nthrow e63743;\n\n}\n}} else {\nthrow cljs.core.match.backtrack;\n\n}\n}catch (e63741){if((e63741 instanceof Error)){\nvar e__62528__auto____$5 = e63741;\nif((e__62528__auto____$5 === cljs.core.match.backtrack)){\nthrow cljs.core.match.backtrack;\n} else {\nthrow e__62528__auto____$5;\n}\n} else {\nthrow e63741;\n\n}\n}} else {\nthrow cljs.core.match.backtrack;\n\n}\n}catch (e63740){if((e63740 instanceof Error)){\nvar e__62528__auto____$5 = e63740;\nif((e__62528__auto____$5 === cljs.core.match.backtrack)){\nthrow cljs.core.match.backtrack;\n} else {\nthrow e__62528__auto____$5;\n}\n} else {\nthrow e63740;\n\n}\n}} else {\nthrow cljs.core.match.backtrack;\n\n}\n}catch (e63707){if((e63707 instanceof Error)){\nvar e__62528__auto____$5 = e63707;\nif((e__62528__auto____$5 === cljs.core.match.backtrack)){\ntry{if(((cljs.core.vector_QMARK_(_AMPERSAND_match)) && ((cljs.core.count(_AMPERSAND_match) === 2)))){\ntry{var _AMPERSAND_match_0__63680 = cljs.core.nth.cljs$core$IFn$_invoke$arity$2(_AMPERSAND_match,(0));\nif(cljs.core.keyword_identical_QMARK_(_AMPERSAND_match_0__63680,new cljs.core.Keyword(null,\"not\",\"not\",-595976884))){\ntry{var _AMPERSAND_match_1__63681 = cljs.core.nth.cljs$core$IFn$_invoke$arity$2(_AMPERSAND_match,(1));\nif(((cljs.core.vector_QMARK_(_AMPERSAND_match_1__63681)) && ((cljs.core.count(_AMPERSAND_match_1__63681) >= (1))))){\ntry{var _AMPERSAND_match_1__63681_left__63682 = cljs.core.subvec.cljs$core$IFn$_invoke$arity$3(_AMPERSAND_match_1__63681,(0),(1));\nif(((cljs.core.vector_QMARK_(_AMPERSAND_match_1__63681_left__63682)) && ((cljs.core.count(_AMPERSAND_match_1__63681_left__63682) === (1))))){\ntry{var _AMPERSAND_match_1__63681_left__63682_0__63684 = cljs.core.nth.cljs$core$IFn$_invoke$arity$2(_AMPERSAND_match_1__63681_left__63682,(0));\nif(cljs.core.keyword_identical_QMARK_(_AMPERSAND_match_1__63681_left__63682_0__63684,new cljs.core.Keyword(null,\"and\",\"and\",-971899817))){\nvar args = cljs.core.subvec.cljs$core$IFn$_invoke$arity$2(_AMPERSAND_match_1__63681,(1));\nreturn metabase$mbql$util$simplify_compound_filter_$_replace_63647(_AMPERSAND_parents,cljs.core.apply.cljs$core$IFn$_invoke$arity$3(cljs.core.vector,new cljs.core.Keyword(null,\"or\",\"or\",235744169),cljs.core.map.cljs$core$IFn$_invoke$arity$2((function (p1__63644_SHARP_){\nreturn (new cljs.core.PersistentVector(null,2,(5),cljs.core.PersistentVector.EMPTY_NODE,[new cljs.core.Keyword(null,\"not\",\"not\",-595976884),p1__63644_SHARP_],null));\n}),args)));\n} else {\nthrow cljs.core.match.backtrack;\n\n}\n}catch (e63738){if((e63738 instanceof Error)){\nvar e__62528__auto____$6 = e63738;\nif((e__62528__auto____$6 === cljs.core.match.backtrack)){\ntry{var _AMPERSAND_match_1__63681_left__63682_0__63684 = cljs.core.nth.cljs$core$IFn$_invoke$arity$2(_AMPERSAND_match_1__63681_left__63682,(0));\nif(cljs.core.keyword_identical_QMARK_(_AMPERSAND_match_1__63681_left__63682_0__63684,new cljs.core.Keyword(null,\"or\",\"or\",235744169))){\nvar args = cljs.core.subvec.cljs$core$IFn$_invoke$arity$2(_AMPERSAND_match_1__63681,(1));\nreturn metabase$mbql$util$simplify_compound_filter_$_replace_63647(_AMPERSAND_parents,cljs.core.apply.cljs$core$IFn$_invoke$arity$3(cljs.core.vector,new cljs.core.Keyword(null,\"and\",\"and\",-971899817),cljs.core.map.cljs$core$IFn$_invoke$arity$2((function (p1__63645_SHARP_){\nreturn (new cljs.core.PersistentVector(null,2,(5),cljs.core.PersistentVector.EMPTY_NODE,[new cljs.core.Keyword(null,\"not\",\"not\",-595976884),p1__63645_SHARP_],null));\n}),args)));\n} else {\nthrow cljs.core.match.backtrack;\n\n}\n}catch (e63739){if((e63739 instanceof Error)){\nvar e__62528__auto____$7 = e63739;\nif((e__62528__auto____$7 === cljs.core.match.backtrack)){\nthrow cljs.core.match.backtrack;\n} else {\nthrow e__62528__auto____$7;\n}\n} else {\nthrow e63739;\n\n}\n}} else {\nthrow e__62528__auto____$6;\n}\n} else {\nthrow e63738;\n\n}\n}} else {\nthrow cljs.core.match.backtrack;\n\n}\n}catch (e63737){if((e63737 instanceof Error)){\nvar e__62528__auto____$6 = e63737;\nif((e__62528__auto____$6 === cljs.core.match.backtrack)){\nthrow cljs.core.match.backtrack;\n} else {\nthrow e__62528__auto____$6;\n}\n} else {\nthrow e63737;\n\n}\n}} else {\nthrow cljs.core.match.backtrack;\n\n}\n}catch (e63736){if((e63736 instanceof Error)){\nvar e__62528__auto____$6 = e63736;\nif((e__62528__auto____$6 === cljs.core.match.backtrack)){\nthrow cljs.core.match.backtrack;\n} else {\nthrow e__62528__auto____$6;\n}\n} else {\nthrow e63736;\n\n}\n}} else {\nthrow cljs.core.match.backtrack;\n\n}\n}catch (e63732){if((e63732 instanceof Error)){\nvar e__62528__auto____$6 = e63732;\nif((e__62528__auto____$6 === cljs.core.match.backtrack)){\ntry{var _AMPERSAND_match_0__63680 = cljs.core.nth.cljs$core$IFn$_invoke$arity$2(_AMPERSAND_match,(0));\nif(cljs.core.keyword_identical_QMARK_(_AMPERSAND_match_0__63680,new cljs.core.Keyword(null,\"and\",\"and\",-971899817))){\nvar arg = cljs.core.nth.cljs$core$IFn$_invoke$arity$2(_AMPERSAND_match,(1));\nreturn metabase$mbql$util$simplify_compound_filter_$_replace_63647(_AMPERSAND_parents,arg);\n} else {\nthrow cljs.core.match.backtrack;\n\n}\n}catch (e63734){if((e63734 instanceof Error)){\nvar e__62528__auto____$7 = e63734;\nif((e__62528__auto____$7 === cljs.core.match.backtrack)){\ntry{var _AMPERSAND_match_0__63680 = cljs.core.nth.cljs$core$IFn$_invoke$arity$2(_AMPERSAND_match,(0));\nif(cljs.core.keyword_identical_QMARK_(_AMPERSAND_match_0__63680,new cljs.core.Keyword(null,\"or\",\"or\",235744169))){\nvar arg = cljs.core.nth.cljs$core$IFn$_invoke$arity$2(_AMPERSAND_match,(1));\nreturn metabase$mbql$util$simplify_compound_filter_$_replace_63647(_AMPERSAND_parents,arg);\n} else {\nthrow cljs.core.match.backtrack;\n\n}\n}catch (e63735){if((e63735 instanceof Error)){\nvar e__62528__auto____$8 = e63735;\nif((e__62528__auto____$8 === cljs.core.match.backtrack)){\nthrow cljs.core.match.backtrack;\n} else {\nthrow e__62528__auto____$8;\n}\n} else {\nthrow e63735;\n\n}\n}} else {\nthrow e__62528__auto____$7;\n}\n} else {\nthrow e63734;\n\n}\n}} else {\nthrow e__62528__auto____$6;\n}\n} else {\nthrow e63732;\n\n}\n}} else {\nthrow cljs.core.match.backtrack;\n\n}\n}catch (e63708){if((e63708 instanceof Error)){\nvar e__62528__auto____$6 = e63708;\nif((e__62528__auto____$6 === cljs.core.match.backtrack)){\ntry{if(((cljs.core.vector_QMARK_(_AMPERSAND_match)) && ((cljs.core.count(_AMPERSAND_match) >= (1))))){\ntry{var _AMPERSAND_match_left__63685 = cljs.core.subvec.cljs$core$IFn$_invoke$arity$3(_AMPERSAND_match,(0),(1));\nif(((cljs.core.vector_QMARK_(_AMPERSAND_match_left__63685)) && ((cljs.core.count(_AMPERSAND_match_left__63685) === (1))))){\ntry{var _AMPERSAND_match_left__63685_0__63691 = cljs.core.nth.cljs$core$IFn$_invoke$arity$2(_AMPERSAND_match_left__63685,(0));\nif(cljs.core.keyword_identical_QMARK_(_AMPERSAND_match_left__63685_0__63691,new cljs.core.Keyword(null,\"and\",\"and\",-971899817))){\ntry{var _AMPERSAND_match_right__63686 = cljs.core.subvec.cljs$core$IFn$_invoke$arity$2(_AMPERSAND_match,(1));\nif(cljs.core.truth_(cljs.core.partial.cljs$core$IFn$_invoke$arity$2(cljs.core.some,cljs.core.partial.cljs$core$IFn$_invoke$arity$2(metabase.mbql.util.is_clause_QMARK_,new cljs.core.Keyword(null,\"and\",\"and\",-971899817)))(_AMPERSAND_match_right__63686))){\nvar args = cljs.core.subvec.cljs$core$IFn$_invoke$arity$2(_AMPERSAND_match,(1));\nreturn metabase$mbql$util$simplify_compound_filter_$_replace_63647(_AMPERSAND_parents,cljs.core.apply.cljs$core$IFn$_invoke$arity$3(cljs.core.vector,new cljs.core.Keyword(null,\"and\",\"and\",-971899817),metabase.mbql.util.combine_compound_filters_of_type(new cljs.core.Keyword(null,\"and\",\"and\",-971899817),args)));\n} else {\nthrow cljs.core.match.backtrack;\n\n}\n}catch (e63730){if((e63730 instanceof Error)){\nvar e__62528__auto____$7 = e63730;\nif((e__62528__auto____$7 === cljs.core.match.backtrack)){\nthrow cljs.core.match.backtrack;\n} else {\nthrow e__62528__auto____$7;\n}\n} else {\nthrow e63730;\n\n}\n}} else {\nthrow cljs.core.match.backtrack;\n\n}\n}catch (e63723){if((e63723 instanceof Error)){\nvar e__62528__auto____$7 = e63723;\nif((e__62528__auto____$7 === cljs.core.match.backtrack)){\ntry{var _AMPERSAND_match_left__63685_0__63691 = cljs.core.nth.cljs$core$IFn$_invoke$arity$2(_AMPERSAND_match_left__63685,(0));\nif(cljs.core.keyword_identical_QMARK_(_AMPERSAND_match_left__63685_0__63691,new cljs.core.Keyword(null,\"or\",\"or\",235744169))){\ntry{var _AMPERSAND_match_right__63686 = cljs.core.subvec.cljs$core$IFn$_invoke$arity$2(_AMPERSAND_match,(1));\nif(cljs.core.truth_(cljs.core.partial.cljs$core$IFn$_invoke$arity$2(cljs.core.some,cljs.core.partial.cljs$core$IFn$_invoke$arity$2(metabase.mbql.util.is_clause_QMARK_,new cljs.core.Keyword(null,\"or\",\"or\",235744169)))(_AMPERSAND_match_right__63686))){\nvar args = cljs.core.subvec.cljs$core$IFn$_invoke$arity$2(_AMPERSAND_match,(1));\nreturn metabase$mbql$util$simplify_compound_filter_$_replace_63647(_AMPERSAND_parents,cljs.core.apply.cljs$core$IFn$_invoke$arity$3(cljs.core.vector,new cljs.core.Keyword(null,\"or\",\"or\",235744169),metabase.mbql.util.combine_compound_filters_of_type(new cljs.core.Keyword(null,\"or\",\"or\",235744169),args)));\n} else {\nthrow cljs.core.match.backtrack;\n\n}\n}catch (e63729){if((e63729 instanceof Error)){\nvar e__62528__auto____$8 = e63729;\nif((e__62528__auto____$8 === cljs.core.match.backtrack)){\nthrow cljs.core.match.backtrack;\n} else {\nthrow e__62528__auto____$8;\n}\n} else {\nthrow e63729;\n\n}\n}} else {\nthrow cljs.core.match.backtrack;\n\n}\n}catch (e63724){if((e63724 instanceof Error)){\nvar e__62528__auto____$8 = e63724;\nif((e__62528__auto____$8 === cljs.core.match.backtrack)){\ntry{var _AMPERSAND_match_left__63685_0__63691 = cljs.core.nth.cljs$core$IFn$_invoke$arity$2(_AMPERSAND_match_left__63685,(0));\nif(cljs.core.truth_((function (){var fexpr__63726 = new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"or\",\"or\",235744169),null,new cljs.core.Keyword(null,\"and\",\"and\",-971899817),null], null), null);\nreturn (fexpr__63726.cljs$core$IFn$_invoke$arity$1 ? fexpr__63726.cljs$core$IFn$_invoke$arity$1(_AMPERSAND_match_left__63685_0__63691) : fexpr__63726.call(null,_AMPERSAND_match_left__63685_0__63691));\n})())){\ntry{var _AMPERSAND_match_right__63686 = cljs.core.subvec.cljs$core$IFn$_invoke$arity$2(_AMPERSAND_match,(1));\nif((function (p1__63646_SHARP_){\nreturn cljs.core.not(cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.distinct_QMARK_,p1__63646_SHARP_));\n})(_AMPERSAND_match_right__63686)){\nvar args = cljs.core.subvec.cljs$core$IFn$_invoke$arity$2(_AMPERSAND_match,(1));\nvar clause = cljs.core.nth.cljs$core$IFn$_invoke$arity$2(_AMPERSAND_match_left__63685,(0));\nreturn metabase$mbql$util$simplify_compound_filter_$_replace_63647(_AMPERSAND_parents,cljs.core.apply.cljs$core$IFn$_invoke$arity$3(cljs.core.vector,clause,cljs.core.distinct.cljs$core$IFn$_invoke$arity$1(args)));\n} else {\nthrow cljs.core.match.backtrack;\n\n}\n}catch (e63727){if((e63727 instanceof Error)){\nvar e__62528__auto____$9 = e63727;\nif((e__62528__auto____$9 === cljs.core.match.backtrack)){\nthrow cljs.core.match.backtrack;\n} else {\nthrow e__62528__auto____$9;\n}\n} else {\nthrow e63727;\n\n}\n}} else {\nthrow cljs.core.match.backtrack;\n\n}\n}catch (e63725){if((e63725 instanceof Error)){\nvar e__62528__auto____$9 = e63725;\nif((e__62528__auto____$9 === cljs.core.match.backtrack)){\nthrow cljs.core.match.backtrack;\n} else {\nthrow e__62528__auto____$9;\n}\n} else {\nthrow e63725;\n\n}\n}} else {\nthrow e__62528__auto____$8;\n}\n} else {\nthrow e63724;\n\n}\n}} else {\nthrow e__62528__auto____$7;\n}\n} else {\nthrow e63723;\n\n}\n}} else {\nthrow cljs.core.match.backtrack;\n\n}\n}catch (e63722){if((e63722 instanceof Error)){\nvar e__62528__auto____$7 = e63722;\nif((e__62528__auto____$7 === cljs.core.match.backtrack)){\nthrow cljs.core.match.backtrack;\n} else {\nthrow e__62528__auto____$7;\n}\n} else {\nthrow e63722;\n\n}\n}} else {\nthrow cljs.core.match.backtrack;\n\n}\n}catch (e63709){if((e63709 instanceof Error)){\nvar e__62528__auto____$7 = e63709;\nif((e__62528__auto____$7 === cljs.core.match.backtrack)){\ntry{if(((cljs.core.vector_QMARK_(_AMPERSAND_match)) && ((cljs.core.count(_AMPERSAND_match) === 2)))){\ntry{var _AMPERSAND_match_0__63692 = cljs.core.nth.cljs$core$IFn$_invoke$arity$2(_AMPERSAND_match,(0));\nif(cljs.core.keyword_identical_QMARK_(_AMPERSAND_match_0__63692,new cljs.core.Keyword(null,\"not\",\"not\",-595976884))){\ntry{var _AMPERSAND_match_1__63693 = cljs.core.nth.cljs$core$IFn$_invoke$arity$2(_AMPERSAND_match,(1));\nif(((cljs.core.vector_QMARK_(_AMPERSAND_match_1__63693)) && ((cljs.core.count(_AMPERSAND_match_1__63693) === 2)))){\ntry{var _AMPERSAND_match_1__63693_0__63696 = cljs.core.nth.cljs$core$IFn$_invoke$arity$2(_AMPERSAND_match_1__63693,(0));\nif(cljs.core.keyword_identical_QMARK_(_AMPERSAND_match_1__63693_0__63696,new cljs.core.Keyword(null,\"not\",\"not\",-595976884))){\nvar arg = cljs.core.nth.cljs$core$IFn$_invoke$arity$2(_AMPERSAND_match_1__63693,(1));\nreturn metabase$mbql$util$simplify_compound_filter_$_replace_63647(_AMPERSAND_parents,arg);\n} else {\nthrow cljs.core.match.backtrack;\n\n}\n}catch (e63721){if((e63721 instanceof Error)){\nvar e__62528__auto____$8 = e63721;\nif((e__62528__auto____$8 === cljs.core.match.backtrack)){\nthrow cljs.core.match.backtrack;\n} else {\nthrow e__62528__auto____$8;\n}\n} else {\nthrow e63721;\n\n}\n}} else {\nthrow cljs.core.match.backtrack;\n\n}\n}catch (e63720){if((e63720 instanceof Error)){\nvar e__62528__auto____$8 = e63720;\nif((e__62528__auto____$8 === cljs.core.match.backtrack)){\nthrow cljs.core.match.backtrack;\n} else {\nthrow e__62528__auto____$8;\n}\n} else {\nthrow e63720;\n\n}\n}} else {\nthrow cljs.core.match.backtrack;\n\n}\n}catch (e63718){if((e63718 instanceof Error)){\nvar e__62528__auto____$8 = e63718;\nif((e__62528__auto____$8 === cljs.core.match.backtrack)){\nthrow cljs.core.match.backtrack;\n} else {\nthrow e__62528__auto____$8;\n}\n} else {\nthrow e63718;\n\n}\n}} else {\nthrow cljs.core.match.backtrack;\n\n}\n}catch (e63710){if((e63710 instanceof Error)){\nvar e__62528__auto____$8 = e63710;\nif((e__62528__auto____$8 === cljs.core.match.backtrack)){\ntry{if(((cljs.core.vector_QMARK_(_AMPERSAND_match)) && ((cljs.core.count(_AMPERSAND_match) >= (1))))){\ntry{var _AMPERSAND_match_left__63698 = cljs.core.subvec.cljs$core$IFn$_invoke$arity$3(_AMPERSAND_match,(0),(1));\nif(((cljs.core.vector_QMARK_(_AMPERSAND_match_left__63698)) && ((cljs.core.count(_AMPERSAND_match_left__63698) === (1))))){\ntry{var _AMPERSAND_match_left__63698_0__63700 = cljs.core.nth.cljs$core$IFn$_invoke$arity$2(_AMPERSAND_match_left__63698,(0));\nif(cljs.core.keyword_identical_QMARK_(_AMPERSAND_match_left__63698_0__63700,new cljs.core.Keyword(null,\"else\",\"else\",-1508377146))){\nreturn filter_clause;\n} else {\nthrow cljs.core.match.backtrack;\n\n}\n}catch (e63716){if((e63716 instanceof Error)){\nvar e__62528__auto____$9 = e63716;\nif((e__62528__auto____$9 === cljs.core.match.backtrack)){\nthrow cljs.core.match.backtrack;\n} else {\nthrow e__62528__auto____$9;\n}\n} else {\nthrow e63716;\n\n}\n}} else {\nthrow cljs.core.match.backtrack;\n\n}\n}catch (e63714){if((e63714 instanceof Error)){\nvar e__62528__auto____$9 = e63714;\nif((e__62528__auto____$9 === cljs.core.match.backtrack)){\nthrow cljs.core.match.backtrack;\n} else {\nthrow e__62528__auto____$9;\n}\n} else {\nthrow e63714;\n\n}\n}} else {\nthrow cljs.core.match.backtrack;\n\n}\n}catch (e63711){if((e63711 instanceof Error)){\nvar e__62528__auto____$9 = e63711;\nif((e__62528__auto____$9 === cljs.core.match.backtrack)){\nreturn metabase.mbql.util.match.impl.replace_in_collection(metabase$mbql$util$simplify_compound_filter_$_replace_63647,_AMPERSAND_parents,_AMPERSAND_match);\n} else {\nthrow e__62528__auto____$9;\n}\n} else {\nthrow e63711;\n\n}\n}} else {\nthrow e__62528__auto____$8;\n}\n} else {\nthrow e63710;\n\n}\n}} else {\nthrow e__62528__auto____$7;\n}\n} else {\nthrow e63709;\n\n}\n}} else {\nthrow e__62528__auto____$6;\n}\n} else {\nthrow e63708;\n\n}\n}} else {\nthrow e__62528__auto____$5;\n}\n} else {\nthrow e63707;\n\n}\n}} else {\nthrow e__62528__auto____$4;\n}\n} else {\nthrow e63706;\n\n}\n}} else {\nthrow e__62528__auto____$3;\n}\n} else {\nthrow e63705;\n\n}\n}} else {\nthrow e__62528__auto____$2;\n}\n} else {\nthrow e63704;\n\n}\n}} else {\nthrow e__62528__auto____$1;\n}\n} else {\nthrow e63703;\n\n}\n}} else {\nthrow e__62528__auto__;\n}\n} else {\nthrow e63702;\n\n}\n}})(cljs.core.PersistentVector.EMPTY,filter_clause);\n});\nvar ufv63750_64449 = schema.utils.use_fn_validation;\nvar output_schema63749_64450 = metabase.mbql.schema.Filter;\nvar input_schema63751_64451 = new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [schema.core.one(schema.core.Any,cljs.core.with_meta(new cljs.core.Symbol(null,\"filter-clause\",\"filter-clause\",-1237814159,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"schema\",\"schema\",-1582001791),new cljs.core.Symbol(\"schema.core\",\"Any\",\"schema.core/Any\",-1891898271,null)], null))),schema.core.Any], null);\nvar input_checker63752_64452 = (new cljs.core.Delay((function (){\nreturn schema.core.checker(input_schema63751_64451);\n}),null));\nvar output_checker63753_64453 = (new cljs.core.Delay((function (){\nreturn schema.core.checker(output_schema63749_64450);\n}),null));\nvar ret__51869__auto___64454 = (function (){\n/**\n * Inputs: [filter-clause & more-filter-clauses]\n *   Returns: mbql.s/Filter\n * \n *   Combine two filter clauses into a single clause in a way that minimizes slapping a bunch of `:and`s together if\n *   possible.\n */\nmetabase.mbql.util.combine_filter_clauses = (function metabase$mbql$util$combine_filter_clauses(var_args){\nvar args__5775__auto__ = [];\nvar len__5769__auto___64455 = arguments.length;\nvar i__5770__auto___64456 = (0);\nwhile(true){\nif((i__5770__auto___64456 < len__5769__auto___64455)){\nargs__5775__auto__.push((arguments[i__5770__auto___64456]));\n\nvar G__64457 = (i__5770__auto___64456 + (1));\ni__5770__auto___64456 = G__64457;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__5776__auto__ = ((((1) < args__5775__auto__.length))?(new cljs.core.IndexedSeq(args__5775__auto__.slice((1)),(0),null)):null);\nreturn metabase.mbql.util.combine_filter_clauses.cljs$core$IFn$_invoke$arity$variadic((arguments[(0)]),argseq__5776__auto__);\n});\n\n(metabase.mbql.util.combine_filter_clauses.cljs$core$IFn$_invoke$arity$variadic = (function (G__63754,rest63755){\nvar validate__50237__auto__ = cljs.core.deref(ufv63750_64449);\nif(cljs.core.truth_(validate__50237__auto__)){\nvar args__50238__auto___64458 = cljs.core.list_STAR_.cljs$core$IFn$_invoke$arity$2(G__63754,rest63755);\nif(cljs.core.truth_(schema.core.fn_validator)){\nvar G__63758_64459 = new cljs.core.Keyword(null,\"input\",\"input\",556931961);\nvar G__63759_64460 = cljs.core.with_meta(new cljs.core.Symbol(null,\"combine-filter-clauses\",\"combine-filter-clauses\",1245054425,null),new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"schema\",\"schema\",-1582001791),new cljs.core.Symbol(\"mbql.s\",\"Filter\",\"mbql.s/Filter\",650308569,null),new cljs.core.Keyword(null,\"doc\",\"doc\",1913296891),\"Combine two filter clauses into a single clause in a way that minimizes slapping a bunch of `:and`s together if\\n  possible.\"], null));\nvar G__63760_64461 = input_schema63751_64451;\nvar G__63761_64462 = cljs.core.deref(input_checker63752_64452);\nvar G__63762_64463 = args__50238__auto___64458;\n(schema.core.fn_validator.cljs$core$IFn$_invoke$arity$5 ? schema.core.fn_validator.cljs$core$IFn$_invoke$arity$5(G__63758_64459,G__63759_64460,G__63760_64461,G__63761_64462,G__63762_64463) : schema.core.fn_validator.call(null,G__63758_64459,G__63759_64460,G__63760_64461,G__63761_64462,G__63762_64463));\n} else {\nvar temp__5804__auto___64464 = (function (){var fexpr__63766 = cljs.core.deref(input_checker63752_64452);\nreturn (fexpr__63766.cljs$core$IFn$_invoke$arity$1 ? fexpr__63766.cljs$core$IFn$_invoke$arity$1(args__50238__auto___64458) : fexpr__63766.call(null,args__50238__auto___64458));\n})();\nif(cljs.core.truth_(temp__5804__auto___64464)){\nvar error__50239__auto___64465 = temp__5804__auto___64464;\nthrow cljs.core.ex_info.cljs$core$IFn$_invoke$arity$2(schema.utils.format_STAR_.cljs$core$IFn$_invoke$arity$variadic(\"Input to %s does not match schema: \\n\\n\\t \\u001B[0;33m  %s \\u001B[0m \\n\\n\",cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([cljs.core.with_meta(new cljs.core.Symbol(null,\"combine-filter-clauses\",\"combine-filter-clauses\",1245054425,null),new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"schema\",\"schema\",-1582001791),new cljs.core.Symbol(\"mbql.s\",\"Filter\",\"mbql.s/Filter\",650308569,null),new cljs.core.Keyword(null,\"doc\",\"doc\",1913296891),\"Combine two filter clauses into a single clause in a way that minimizes slapping a bunch of `:and`s together if\\n  possible.\"], null)),cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([error__50239__auto___64465], 0))], 0)),new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null,\"type\",\"type\",1174270348),new cljs.core.Keyword(\"schema.core\",\"error\",\"schema.core/error\",1991454308),new cljs.core.Keyword(null,\"schema\",\"schema\",-1582001791),input_schema63751_64451,new cljs.core.Keyword(null,\"value\",\"value\",305978217),args__50238__auto___64458,new cljs.core.Keyword(null,\"error\",\"error\",-978969032),error__50239__auto___64465], null));\n} else {\n}\n}\n} else {\n}\n\nvar o__50240__auto__ = (function (){var filter_clause = G__63754;\nvar more_filter_clauses = rest63755;\nwhile(true){\nreturn metabase.mbql.util.simplify_compound_filter(cljs.core.cons(new cljs.core.Keyword(null,\"and\",\"and\",-971899817),cljs.core.cons(filter_clause,more_filter_clauses)));\nbreak;\n}\n})();\nif(cljs.core.truth_(validate__50237__auto__)){\nif(cljs.core.truth_(schema.core.fn_validator)){\nvar G__63767_64468 = new cljs.core.Keyword(null,\"output\",\"output\",-1105869043);\nvar G__63768_64469 = cljs.core.with_meta(new cljs.core.Symbol(null,\"combine-filter-clauses\",\"combine-filter-clauses\",1245054425,null),new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"schema\",\"schema\",-1582001791),new cljs.core.Symbol(\"mbql.s\",\"Filter\",\"mbql.s/Filter\",650308569,null),new cljs.core.Keyword(null,\"doc\",\"doc\",1913296891),\"Combine two filter clauses into a single clause in a way that minimizes slapping a bunch of `:and`s together if\\n  possible.\"], null));\nvar G__63769_64470 = output_schema63749_64450;\nvar G__63770_64471 = cljs.core.deref(output_checker63753_64453);\nvar G__63771_64472 = o__50240__auto__;\n(schema.core.fn_validator.cljs$core$IFn$_invoke$arity$5 ? schema.core.fn_validator.cljs$core$IFn$_invoke$arity$5(G__63767_64468,G__63768_64469,G__63769_64470,G__63770_64471,G__63771_64472) : schema.core.fn_validator.call(null,G__63767_64468,G__63768_64469,G__63769_64470,G__63770_64471,G__63771_64472));\n} else {\nvar temp__5804__auto___64473 = (function (){var fexpr__63772 = cljs.core.deref(output_checker63753_64453);\nreturn (fexpr__63772.cljs$core$IFn$_invoke$arity$1 ? fexpr__63772.cljs$core$IFn$_invoke$arity$1(o__50240__auto__) : fexpr__63772.call(null,o__50240__auto__));\n})();\nif(cljs.core.truth_(temp__5804__auto___64473)){\nvar error__50239__auto___64474 = temp__5804__auto___64473;\nthrow cljs.core.ex_info.cljs$core$IFn$_invoke$arity$2(schema.utils.format_STAR_.cljs$core$IFn$_invoke$arity$variadic(\"Output of %s does not match schema: \\n\\n\\t \\u001B[0;33m  %s \\u001B[0m \\n\\n\",cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([cljs.core.with_meta(new cljs.core.Symbol(null,\"combine-filter-clauses\",\"combine-filter-clauses\",1245054425,null),new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"schema\",\"schema\",-1582001791),new cljs.core.Symbol(\"mbql.s\",\"Filter\",\"mbql.s/Filter\",650308569,null),new cljs.core.Keyword(null,\"doc\",\"doc\",1913296891),\"Combine two filter clauses into a single clause in a way that minimizes slapping a bunch of `:and`s together if\\n  possible.\"], null)),cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([error__50239__auto___64474], 0))], 0)),new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null,\"type\",\"type\",1174270348),new cljs.core.Keyword(\"schema.core\",\"error\",\"schema.core/error\",1991454308),new cljs.core.Keyword(null,\"schema\",\"schema\",-1582001791),output_schema63749_64450,new cljs.core.Keyword(null,\"value\",\"value\",305978217),o__50240__auto__,new cljs.core.Keyword(null,\"error\",\"error\",-978969032),error__50239__auto___64474], null));\n} else {\n}\n}\n} else {\n}\n\nreturn o__50240__auto__;\n}));\n\n(metabase.mbql.util.combine_filter_clauses.cljs$lang$maxFixedArity = (1));\n\n/** @this {Function} */\n(metabase.mbql.util.combine_filter_clauses.cljs$lang$applyTo = (function (seq63756){\nvar G__63757 = cljs.core.first(seq63756);\nvar seq63756__$1 = cljs.core.next(seq63756);\nvar self__5754__auto__ = this;\nreturn self__5754__auto__.cljs$core$IFn$_invoke$arity$variadic(G__63757,seq63756__$1);\n}));\n\nreturn null;\n})()\n;\nschema.utils.declare_class_schema_BANG_(schema.utils.fn_schema_bearer(metabase.mbql.util.combine_filter_clauses),schema.core.__GT_FnSchema(output_schema63749_64450,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [input_schema63751_64451], null)));\n\nvar ufv63774_64475 = schema.utils.use_fn_validation;\nvar output_schema63773_64476 = metabase.mbql.schema.MBQLQuery;\nvar input_schema63775_64477 = new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [schema.core.one(metabase.mbql.schema.MBQLQuery,cljs.core.with_meta(new cljs.core.Symbol(null,\"inner-query\",\"inner-query\",-907556093,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"schema\",\"schema\",-1582001791),new cljs.core.Symbol(\"mbql.s\",\"MBQLQuery\",\"mbql.s/MBQLQuery\",-332777720,null)], null))),schema.core.one(schema.core.maybe(metabase.mbql.schema.Filter),cljs.core.with_meta(new cljs.core.Symbol(null,\"new-clause\",\"new-clause\",-910348391,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"schema\",\"schema\",-1582001791),cljs.core.list(new cljs.core.Symbol(\"s\",\"maybe\",\"s/maybe\",1326133944,null),new cljs.core.Symbol(\"mbql.s\",\"Filter\",\"mbql.s/Filter\",650308569,null))], null)))], null);\nvar input_checker63776_64478 = (new cljs.core.Delay((function (){\nreturn schema.core.checker(input_schema63775_64477);\n}),null));\nvar output_checker63777_64479 = (new cljs.core.Delay((function (){\nreturn schema.core.checker(output_schema63773_64476);\n}),null));\nvar ret__51869__auto___64480 = /**\n * Inputs: [inner-query :- mbql.s/MBQLQuery new-clause :- (s/maybe mbql.s/Filter)]\n *   Returns: mbql.s/MBQLQuery\n * \n *   Add a additional filter clause to an *inner* MBQL query, merging with the existing filter clause with `:and` if\n *   needed.\n */\nmetabase.mbql.util.add_filter_clause_to_inner_query = (function metabase$mbql$util$add_filter_clause_to_inner_query(G__63778,G__63779){\nvar validate__50237__auto__ = cljs.core.deref(ufv63774_64475);\nif(cljs.core.truth_(validate__50237__auto__)){\nvar args__50238__auto___64481 = new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [G__63778,G__63779], null);\nif(cljs.core.truth_(schema.core.fn_validator)){\nvar G__63780_64482 = new cljs.core.Keyword(null,\"input\",\"input\",556931961);\nvar G__63781_64483 = cljs.core.with_meta(new cljs.core.Symbol(null,\"add-filter-clause-to-inner-query\",\"add-filter-clause-to-inner-query\",407708628,null),new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"schema\",\"schema\",-1582001791),new cljs.core.Symbol(\"mbql.s\",\"MBQLQuery\",\"mbql.s/MBQLQuery\",-332777720,null),new cljs.core.Keyword(null,\"doc\",\"doc\",1913296891),\"Add a additional filter clause to an *inner* MBQL query, merging with the existing filter clause with `:and` if\\n  needed.\"], null));\nvar G__63782_64484 = input_schema63775_64477;\nvar G__63783_64485 = cljs.core.deref(input_checker63776_64478);\nvar G__63784_64486 = args__50238__auto___64481;\n(schema.core.fn_validator.cljs$core$IFn$_invoke$arity$5 ? schema.core.fn_validator.cljs$core$IFn$_invoke$arity$5(G__63780_64482,G__63781_64483,G__63782_64484,G__63783_64485,G__63784_64486) : schema.core.fn_validator.call(null,G__63780_64482,G__63781_64483,G__63782_64484,G__63783_64485,G__63784_64486));\n} else {\nvar temp__5804__auto___64487 = (function (){var fexpr__63785 = cljs.core.deref(input_checker63776_64478);\nreturn (fexpr__63785.cljs$core$IFn$_invoke$arity$1 ? fexpr__63785.cljs$core$IFn$_invoke$arity$1(args__50238__auto___64481) : fexpr__63785.call(null,args__50238__auto___64481));\n})();\nif(cljs.core.truth_(temp__5804__auto___64487)){\nvar error__50239__auto___64488 = temp__5804__auto___64487;\nthrow cljs.core.ex_info.cljs$core$IFn$_invoke$arity$2(schema.utils.format_STAR_.cljs$core$IFn$_invoke$arity$variadic(\"Input to %s does not match schema: \\n\\n\\t \\u001B[0;33m  %s \\u001B[0m \\n\\n\",cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([cljs.core.with_meta(new cljs.core.Symbol(null,\"add-filter-clause-to-inner-query\",\"add-filter-clause-to-inner-query\",407708628,null),new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"schema\",\"schema\",-1582001791),new cljs.core.Symbol(\"mbql.s\",\"MBQLQuery\",\"mbql.s/MBQLQuery\",-332777720,null),new cljs.core.Keyword(null,\"doc\",\"doc\",1913296891),\"Add a additional filter clause to an *inner* MBQL query, merging with the existing filter clause with `:and` if\\n  needed.\"], null)),cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([error__50239__auto___64488], 0))], 0)),new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null,\"type\",\"type\",1174270348),new cljs.core.Keyword(\"schema.core\",\"error\",\"schema.core/error\",1991454308),new cljs.core.Keyword(null,\"schema\",\"schema\",-1582001791),input_schema63775_64477,new cljs.core.Keyword(null,\"value\",\"value\",305978217),args__50238__auto___64481,new cljs.core.Keyword(null,\"error\",\"error\",-978969032),error__50239__auto___64488], null));\n} else {\n}\n}\n} else {\n}\n\nvar o__50240__auto__ = (function (){var inner_query = G__63778;\nvar new_clause = G__63779;\nwhile(true){\nif(cljs.core.not(new_clause)){\nreturn inner_query;\n} else {\nreturn cljs.core.update.cljs$core$IFn$_invoke$arity$4(inner_query,new cljs.core.Keyword(null,\"filter\",\"filter\",-948537934),metabase.mbql.util.combine_filter_clauses,new_clause);\n}\nbreak;\n}\n})();\nif(cljs.core.truth_(validate__50237__auto__)){\nif(cljs.core.truth_(schema.core.fn_validator)){\nvar G__63786_64489 = new cljs.core.Keyword(null,\"output\",\"output\",-1105869043);\nvar G__63787_64490 = cljs.core.with_meta(new cljs.core.Symbol(null,\"add-filter-clause-to-inner-query\",\"add-filter-clause-to-inner-query\",407708628,null),new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"schema\",\"schema\",-1582001791),new cljs.core.Symbol(\"mbql.s\",\"MBQLQuery\",\"mbql.s/MBQLQuery\",-332777720,null),new cljs.core.Keyword(null,\"doc\",\"doc\",1913296891),\"Add a additional filter clause to an *inner* MBQL query, merging with the existing filter clause with `:and` if\\n  needed.\"], null));\nvar G__63788_64491 = output_schema63773_64476;\nvar G__63789_64492 = cljs.core.deref(output_checker63777_64479);\nvar G__63790_64493 = o__50240__auto__;\n(schema.core.fn_validator.cljs$core$IFn$_invoke$arity$5 ? schema.core.fn_validator.cljs$core$IFn$_invoke$arity$5(G__63786_64489,G__63787_64490,G__63788_64491,G__63789_64492,G__63790_64493) : schema.core.fn_validator.call(null,G__63786_64489,G__63787_64490,G__63788_64491,G__63789_64492,G__63790_64493));\n} else {\nvar temp__5804__auto___64494 = (function (){var fexpr__63791 = cljs.core.deref(output_checker63777_64479);\nreturn (fexpr__63791.cljs$core$IFn$_invoke$arity$1 ? fexpr__63791.cljs$core$IFn$_invoke$arity$1(o__50240__auto__) : fexpr__63791.call(null,o__50240__auto__));\n})();\nif(cljs.core.truth_(temp__5804__auto___64494)){\nvar error__50239__auto___64495 = temp__5804__auto___64494;\nthrow cljs.core.ex_info.cljs$core$IFn$_invoke$arity$2(schema.utils.format_STAR_.cljs$core$IFn$_invoke$arity$variadic(\"Output of %s does not match schema: \\n\\n\\t \\u001B[0;33m  %s \\u001B[0m \\n\\n\",cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([cljs.core.with_meta(new cljs.core.Symbol(null,\"add-filter-clause-to-inner-query\",\"add-filter-clause-to-inner-query\",407708628,null),new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"schema\",\"schema\",-1582001791),new cljs.core.Symbol(\"mbql.s\",\"MBQLQuery\",\"mbql.s/MBQLQuery\",-332777720,null),new cljs.core.Keyword(null,\"doc\",\"doc\",1913296891),\"Add a additional filter clause to an *inner* MBQL query, merging with the existing filter clause with `:and` if\\n  needed.\"], null)),cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([error__50239__auto___64495], 0))], 0)),new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null,\"type\",\"type\",1174270348),new cljs.core.Keyword(\"schema.core\",\"error\",\"schema.core/error\",1991454308),new cljs.core.Keyword(null,\"schema\",\"schema\",-1582001791),output_schema63773_64476,new cljs.core.Keyword(null,\"value\",\"value\",305978217),o__50240__auto__,new cljs.core.Keyword(null,\"error\",\"error\",-978969032),error__50239__auto___64495], null));\n} else {\n}\n}\n} else {\n}\n\nreturn o__50240__auto__;\n});\nschema.utils.declare_class_schema_BANG_(schema.utils.fn_schema_bearer(metabase.mbql.util.add_filter_clause_to_inner_query),schema.core.__GT_FnSchema(output_schema63773_64476,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [input_schema63775_64477], null)));\n\nvar ufv63793_64496 = schema.utils.use_fn_validation;\nvar output_schema63792_64497 = metabase.mbql.schema.Query;\nvar input_schema63794_64498 = new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [schema.core.one(metabase.mbql.schema.Query,cljs.core.with_meta(new cljs.core.Symbol(null,\"outer-query\",\"outer-query\",-395069361,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"schema\",\"schema\",-1582001791),new cljs.core.Symbol(\"mbql.s\",\"Query\",\"mbql.s/Query\",1061827921,null)], null))),schema.core.one(schema.core.maybe(metabase.mbql.schema.Filter),cljs.core.with_meta(new cljs.core.Symbol(null,\"new-clause\",\"new-clause\",-910348391,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"schema\",\"schema\",-1582001791),cljs.core.list(new cljs.core.Symbol(\"s\",\"maybe\",\"s/maybe\",1326133944,null),new cljs.core.Symbol(\"mbql.s\",\"Filter\",\"mbql.s/Filter\",650308569,null))], null)))], null);\nvar input_checker63795_64499 = (new cljs.core.Delay((function (){\nreturn schema.core.checker(input_schema63794_64498);\n}),null));\nvar output_checker63796_64500 = (new cljs.core.Delay((function (){\nreturn schema.core.checker(output_schema63792_64497);\n}),null));\nvar ret__51869__auto___64503 = /**\n * Inputs: [outer-query :- mbql.s/Query new-clause :- (s/maybe mbql.s/Filter)]\n *   Returns: mbql.s/Query\n * \n *   Add an additional filter clause to an `outer-query`. If `new-clause` is `nil` this is a no-op.\n */\nmetabase.mbql.util.add_filter_clause = (function metabase$mbql$util$add_filter_clause(G__63797,G__63798){\nvar validate__50237__auto__ = cljs.core.deref(ufv63793_64496);\nif(cljs.core.truth_(validate__50237__auto__)){\nvar args__50238__auto___64504 = new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [G__63797,G__63798], null);\nif(cljs.core.truth_(schema.core.fn_validator)){\nvar G__63799_64505 = new cljs.core.Keyword(null,\"input\",\"input\",556931961);\nvar G__63800_64506 = cljs.core.with_meta(new cljs.core.Symbol(null,\"add-filter-clause\",\"add-filter-clause\",-1464926076,null),new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"schema\",\"schema\",-1582001791),new cljs.core.Symbol(\"mbql.s\",\"Query\",\"mbql.s/Query\",1061827921,null),new cljs.core.Keyword(null,\"doc\",\"doc\",1913296891),\"Add an additional filter clause to an `outer-query`. If `new-clause` is `nil` this is a no-op.\"], null));\nvar G__63801_64507 = input_schema63794_64498;\nvar G__63802_64508 = cljs.core.deref(input_checker63795_64499);\nvar G__63803_64509 = args__50238__auto___64504;\n(schema.core.fn_validator.cljs$core$IFn$_invoke$arity$5 ? schema.core.fn_validator.cljs$core$IFn$_invoke$arity$5(G__63799_64505,G__63800_64506,G__63801_64507,G__63802_64508,G__63803_64509) : schema.core.fn_validator.call(null,G__63799_64505,G__63800_64506,G__63801_64507,G__63802_64508,G__63803_64509));\n} else {\nvar temp__5804__auto___64511 = (function (){var fexpr__63804 = cljs.core.deref(input_checker63795_64499);\nreturn (fexpr__63804.cljs$core$IFn$_invoke$arity$1 ? fexpr__63804.cljs$core$IFn$_invoke$arity$1(args__50238__auto___64504) : fexpr__63804.call(null,args__50238__auto___64504));\n})();\nif(cljs.core.truth_(temp__5804__auto___64511)){\nvar error__50239__auto___64512 = temp__5804__auto___64511;\nthrow cljs.core.ex_info.cljs$core$IFn$_invoke$arity$2(schema.utils.format_STAR_.cljs$core$IFn$_invoke$arity$variadic(\"Input to %s does not match schema: \\n\\n\\t \\u001B[0;33m  %s \\u001B[0m \\n\\n\",cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([cljs.core.with_meta(new cljs.core.Symbol(null,\"add-filter-clause\",\"add-filter-clause\",-1464926076,null),new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"schema\",\"schema\",-1582001791),new cljs.core.Symbol(\"mbql.s\",\"Query\",\"mbql.s/Query\",1061827921,null),new cljs.core.Keyword(null,\"doc\",\"doc\",1913296891),\"Add an additional filter clause to an `outer-query`. If `new-clause` is `nil` this is a no-op.\"], null)),cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([error__50239__auto___64512], 0))], 0)),new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null,\"type\",\"type\",1174270348),new cljs.core.Keyword(\"schema.core\",\"error\",\"schema.core/error\",1991454308),new cljs.core.Keyword(null,\"schema\",\"schema\",-1582001791),input_schema63794_64498,new cljs.core.Keyword(null,\"value\",\"value\",305978217),args__50238__auto___64504,new cljs.core.Keyword(null,\"error\",\"error\",-978969032),error__50239__auto___64512], null));\n} else {\n}\n}\n} else {\n}\n\nvar o__50240__auto__ = (function (){var outer_query = G__63797;\nvar new_clause = G__63798;\nwhile(true){\nreturn cljs.core.update.cljs$core$IFn$_invoke$arity$4(outer_query,new cljs.core.Keyword(null,\"query\",\"query\",-1288509510),metabase.mbql.util.add_filter_clause_to_inner_query,new_clause);\nbreak;\n}\n})();\nif(cljs.core.truth_(validate__50237__auto__)){\nif(cljs.core.truth_(schema.core.fn_validator)){\nvar G__63805_64514 = new cljs.core.Keyword(null,\"output\",\"output\",-1105869043);\nvar G__63806_64515 = cljs.core.with_meta(new cljs.core.Symbol(null,\"add-filter-clause\",\"add-filter-clause\",-1464926076,null),new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"schema\",\"schema\",-1582001791),new cljs.core.Symbol(\"mbql.s\",\"Query\",\"mbql.s/Query\",1061827921,null),new cljs.core.Keyword(null,\"doc\",\"doc\",1913296891),\"Add an additional filter clause to an `outer-query`. If `new-clause` is `nil` this is a no-op.\"], null));\nvar G__63807_64516 = output_schema63792_64497;\nvar G__63808_64517 = cljs.core.deref(output_checker63796_64500);\nvar G__63809_64518 = o__50240__auto__;\n(schema.core.fn_validator.cljs$core$IFn$_invoke$arity$5 ? schema.core.fn_validator.cljs$core$IFn$_invoke$arity$5(G__63805_64514,G__63806_64515,G__63807_64516,G__63808_64517,G__63809_64518) : schema.core.fn_validator.call(null,G__63805_64514,G__63806_64515,G__63807_64516,G__63808_64517,G__63809_64518));\n} else {\nvar temp__5804__auto___64519 = (function (){var fexpr__63810 = cljs.core.deref(output_checker63796_64500);\nreturn (fexpr__63810.cljs$core$IFn$_invoke$arity$1 ? fexpr__63810.cljs$core$IFn$_invoke$arity$1(o__50240__auto__) : fexpr__63810.call(null,o__50240__auto__));\n})();\nif(cljs.core.truth_(temp__5804__auto___64519)){\nvar error__50239__auto___64520 = temp__5804__auto___64519;\nthrow cljs.core.ex_info.cljs$core$IFn$_invoke$arity$2(schema.utils.format_STAR_.cljs$core$IFn$_invoke$arity$variadic(\"Output of %s does not match schema: \\n\\n\\t \\u001B[0;33m  %s \\u001B[0m \\n\\n\",cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([cljs.core.with_meta(new cljs.core.Symbol(null,\"add-filter-clause\",\"add-filter-clause\",-1464926076,null),new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"schema\",\"schema\",-1582001791),new cljs.core.Symbol(\"mbql.s\",\"Query\",\"mbql.s/Query\",1061827921,null),new cljs.core.Keyword(null,\"doc\",\"doc\",1913296891),\"Add an additional filter clause to an `outer-query`. If `new-clause` is `nil` this is a no-op.\"], null)),cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([error__50239__auto___64520], 0))], 0)),new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null,\"type\",\"type\",1174270348),new cljs.core.Keyword(\"schema.core\",\"error\",\"schema.core/error\",1991454308),new cljs.core.Keyword(null,\"schema\",\"schema\",-1582001791),output_schema63792_64497,new cljs.core.Keyword(null,\"value\",\"value\",305978217),o__50240__auto__,new cljs.core.Keyword(null,\"error\",\"error\",-978969032),error__50239__auto___64520], null));\n} else {\n}\n}\n} else {\n}\n\nreturn o__50240__auto__;\n});\nschema.utils.declare_class_schema_BANG_(schema.utils.fn_schema_bearer(metabase.mbql.util.add_filter_clause),schema.core.__GT_FnSchema(output_schema63792_64497,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [input_schema63794_64498], null)));\n\n/**\n * Rewrite `:inside` filter clauses as a pair of `:between` clauses.\n */\nmetabase.mbql.util.desugar_inside = (function metabase$mbql$util$desugar_inside(m){\nreturn (function metabase$mbql$util$desugar_inside_$_replace_63811(_AMPERSAND_parents,_AMPERSAND_match){\ntry{if(((cljs.core.vector_QMARK_(_AMPERSAND_match)) && ((cljs.core.count(_AMPERSAND_match) === 7)))){\ntry{var _AMPERSAND_match_0__63813 = cljs.core.nth.cljs$core$IFn$_invoke$arity$2(_AMPERSAND_match,(0));\nif(cljs.core.keyword_identical_QMARK_(_AMPERSAND_match_0__63813,new cljs.core.Keyword(null,\"inside\",\"inside\",1972503011))){\nvar lat_field = cljs.core.nth.cljs$core$IFn$_invoke$arity$2(_AMPERSAND_match,(1));\nvar lon_field = cljs.core.nth.cljs$core$IFn$_invoke$arity$2(_AMPERSAND_match,(2));\nvar lat_max = cljs.core.nth.cljs$core$IFn$_invoke$arity$2(_AMPERSAND_match,(3));\nvar lon_min = cljs.core.nth.cljs$core$IFn$_invoke$arity$2(_AMPERSAND_match,(4));\nvar lat_min = cljs.core.nth.cljs$core$IFn$_invoke$arity$2(_AMPERSAND_match,(5));\nvar lon_max = cljs.core.nth.cljs$core$IFn$_invoke$arity$2(_AMPERSAND_match,(6));\nreturn new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"and\",\"and\",-971899817),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"between\",\"between\",1131099276),lat_field,lat_min,lat_max], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"between\",\"between\",1131099276),lon_field,lon_min,lon_max], null)], null);\n} else {\nthrow cljs.core.match.backtrack;\n\n}\n}catch (e63821){if((e63821 instanceof Error)){\nvar e__62528__auto__ = e63821;\nif((e__62528__auto__ === cljs.core.match.backtrack)){\nthrow cljs.core.match.backtrack;\n} else {\nthrow e__62528__auto__;\n}\n} else {\nthrow e63821;\n\n}\n}} else {\nthrow cljs.core.match.backtrack;\n\n}\n}catch (e63820){if((e63820 instanceof Error)){\nvar e__62528__auto__ = e63820;\nif((e__62528__auto__ === cljs.core.match.backtrack)){\nreturn metabase.mbql.util.match.impl.replace_in_collection(metabase$mbql$util$desugar_inside_$_replace_63811,_AMPERSAND_parents,_AMPERSAND_match);\n} else {\nthrow e__62528__auto__;\n}\n} else {\nthrow e63820;\n\n}\n}})(cljs.core.PersistentVector.EMPTY,m);\n});\n/**\n * Rewrite `:is-null` and `:not-null` filter clauses as simpler `:=` and `:!=`, respectively.\n */\nmetabase.mbql.util.desugar_is_null_and_not_null = (function metabase$mbql$util$desugar_is_null_and_not_null(m){\nreturn (function metabase$mbql$util$desugar_is_null_and_not_null_$_replace_63822(_AMPERSAND_parents,_AMPERSAND_match){\ntry{if(((cljs.core.vector_QMARK_(_AMPERSAND_match)) && ((cljs.core.count(_AMPERSAND_match) === 2)))){\ntry{var _AMPERSAND_match_0__63824 = cljs.core.nth.cljs$core$IFn$_invoke$arity$2(_AMPERSAND_match,(0));\nif(cljs.core.keyword_identical_QMARK_(_AMPERSAND_match_0__63824,new cljs.core.Keyword(null,\"is-null\",\"is-null\",-1997050930))){\nvar field = cljs.core.nth.cljs$core$IFn$_invoke$arity$2(_AMPERSAND_match,(1));\nreturn new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"=\",\"=\",1152933628),field,null], null);\n} else {\nthrow cljs.core.match.backtrack;\n\n}\n}catch (e63827){if((e63827 instanceof Error)){\nvar e__62528__auto__ = e63827;\nif((e__62528__auto__ === cljs.core.match.backtrack)){\ntry{var _AMPERSAND_match_0__63824 = cljs.core.nth.cljs$core$IFn$_invoke$arity$2(_AMPERSAND_match,(0));\nif(cljs.core.keyword_identical_QMARK_(_AMPERSAND_match_0__63824,new cljs.core.Keyword(null,\"not-null\",\"not-null\",-1326718535))){\nvar field = cljs.core.nth.cljs$core$IFn$_invoke$arity$2(_AMPERSAND_match,(1));\nreturn new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"!=\",\"!=\",-1841737356),field,null], null);\n} else {\nthrow cljs.core.match.backtrack;\n\n}\n}catch (e63828){if((e63828 instanceof Error)){\nvar e__62528__auto____$1 = e63828;\nif((e__62528__auto____$1 === cljs.core.match.backtrack)){\nthrow cljs.core.match.backtrack;\n} else {\nthrow e__62528__auto____$1;\n}\n} else {\nthrow e63828;\n\n}\n}} else {\nthrow e__62528__auto__;\n}\n} else {\nthrow e63827;\n\n}\n}} else {\nthrow cljs.core.match.backtrack;\n\n}\n}catch (e63826){if((e63826 instanceof Error)){\nvar e__62528__auto__ = e63826;\nif((e__62528__auto__ === cljs.core.match.backtrack)){\nreturn metabase.mbql.util.match.impl.replace_in_collection(metabase$mbql$util$desugar_is_null_and_not_null_$_replace_63822,_AMPERSAND_parents,_AMPERSAND_match);\n} else {\nthrow e__62528__auto__;\n}\n} else {\nthrow e63826;\n\n}\n}})(cljs.core.PersistentVector.EMPTY,m);\n});\n/**\n * Rewrite `:is-empty` and `:not-empty` filter clauses as simpler `:=` and `:!=`, respectively.\n */\nmetabase.mbql.util.desugar_is_empty_and_not_empty = (function metabase$mbql$util$desugar_is_empty_and_not_empty(m){\nreturn (function metabase$mbql$util$desugar_is_empty_and_not_empty_$_replace_63829(_AMPERSAND_parents,_AMPERSAND_match){\ntry{if(((cljs.core.vector_QMARK_(_AMPERSAND_match)) && ((cljs.core.count(_AMPERSAND_match) === 2)))){\ntry{var _AMPERSAND_match_0__63831 = cljs.core.nth.cljs$core$IFn$_invoke$arity$2(_AMPERSAND_match,(0));\nif(cljs.core.keyword_identical_QMARK_(_AMPERSAND_match_0__63831,new cljs.core.Keyword(null,\"is-empty\",\"is-empty\",-1040302908))){\nvar field = cljs.core.nth.cljs$core$IFn$_invoke$arity$2(_AMPERSAND_match,(1));\nreturn new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"or\",\"or\",235744169),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"=\",\"=\",1152933628),field,null], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"=\",\"=\",1152933628),field,\"\"], null)], null);\n} else {\nthrow cljs.core.match.backtrack;\n\n}\n}catch (e63834){if((e63834 instanceof Error)){\nvar e__62528__auto__ = e63834;\nif((e__62528__auto__ === cljs.core.match.backtrack)){\ntry{var _AMPERSAND_match_0__63831 = cljs.core.nth.cljs$core$IFn$_invoke$arity$2(_AMPERSAND_match,(0));\nif(cljs.core.keyword_identical_QMARK_(_AMPERSAND_match_0__63831,new cljs.core.Keyword(null,\"not-empty\",\"not-empty\",388922063))){\nvar field = cljs.core.nth.cljs$core$IFn$_invoke$arity$2(_AMPERSAND_match,(1));\nreturn new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"and\",\"and\",-971899817),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"!=\",\"!=\",-1841737356),field,null], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"!=\",\"!=\",-1841737356),field,\"\"], null)], null);\n} else {\nthrow cljs.core.match.backtrack;\n\n}\n}catch (e63835){if((e63835 instanceof Error)){\nvar e__62528__auto____$1 = e63835;\nif((e__62528__auto____$1 === cljs.core.match.backtrack)){\nthrow cljs.core.match.backtrack;\n} else {\nthrow e__62528__auto____$1;\n}\n} else {\nthrow e63835;\n\n}\n}} else {\nthrow e__62528__auto__;\n}\n} else {\nthrow e63834;\n\n}\n}} else {\nthrow cljs.core.match.backtrack;\n\n}\n}catch (e63833){if((e63833 instanceof Error)){\nvar e__62528__auto__ = e63833;\nif((e__62528__auto__ === cljs.core.match.backtrack)){\nreturn metabase.mbql.util.match.impl.replace_in_collection(metabase$mbql$util$desugar_is_empty_and_not_empty_$_replace_63829,_AMPERSAND_parents,_AMPERSAND_match);\n} else {\nthrow e__62528__auto__;\n}\n} else {\nthrow e63833;\n\n}\n}})(cljs.core.PersistentVector.EMPTY,m);\n});\n/**\n * Replace a field or expression inside :time-interval\n */\nmetabase.mbql.util.replace_field_or_expression = (function metabase$mbql$util$replace_field_or_expression(m,unit){\nreturn (function metabase$mbql$util$replace_field_or_expression_$_replace_63836(_AMPERSAND_parents,_AMPERSAND_match){\ntry{if(((cljs.core.vector_QMARK_(_AMPERSAND_match)) && ((cljs.core.count(_AMPERSAND_match) === 3)))){\ntry{var _AMPERSAND_match_0__63838 = cljs.core.nth.cljs$core$IFn$_invoke$arity$2(_AMPERSAND_match,(0));\nif(cljs.core.keyword_identical_QMARK_(_AMPERSAND_match_0__63838,new cljs.core.Keyword(null,\"field\",\"field\",-1302436500))){\nvar id_or_name = cljs.core.nth.cljs$core$IFn$_invoke$arity$2(_AMPERSAND_match,(1));\nvar opts = cljs.core.nth.cljs$core$IFn$_invoke$arity$2(_AMPERSAND_match,(2));\nreturn new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"field\",\"field\",-1302436500),id_or_name,cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(opts,new cljs.core.Keyword(null,\"temporal-unit\",\"temporal-unit\",-1892306358),unit)], null);\n} else {\nthrow cljs.core.match.backtrack;\n\n}\n}catch (e63846){if((e63846 instanceof Error)){\nvar e__62528__auto__ = e63846;\nif((e__62528__auto__ === cljs.core.match.backtrack)){\nthrow cljs.core.match.backtrack;\n} else {\nthrow e__62528__auto__;\n}\n} else {\nthrow e63846;\n\n}\n}} else {\nthrow cljs.core.match.backtrack;\n\n}\n}catch (e63843){if((e63843 instanceof Error)){\nvar e__62528__auto__ = e63843;\nif((e__62528__auto__ === cljs.core.match.backtrack)){\ntry{if(((cljs.core.vector_QMARK_(_AMPERSAND_match)) && ((cljs.core.count(_AMPERSAND_match) === 2)))){\ntry{var _AMPERSAND_match_0__63841 = cljs.core.nth.cljs$core$IFn$_invoke$arity$2(_AMPERSAND_match,(0));\nif(cljs.core.keyword_identical_QMARK_(_AMPERSAND_match_0__63841,new cljs.core.Keyword(null,\"expression\",\"expression\",202311876))){\nvar expression_name = cljs.core.nth.cljs$core$IFn$_invoke$arity$2(_AMPERSAND_match,(1));\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"expression\",\"expression\",202311876),expression_name], null);\n} else {\nthrow cljs.core.match.backtrack;\n\n}\n}catch (e63845){if((e63845 instanceof Error)){\nvar e__62528__auto____$1 = e63845;\nif((e__62528__auto____$1 === cljs.core.match.backtrack)){\nthrow cljs.core.match.backtrack;\n} else {\nthrow e__62528__auto____$1;\n}\n} else {\nthrow e63845;\n\n}\n}} else {\nthrow cljs.core.match.backtrack;\n\n}\n}catch (e63844){if((e63844 instanceof Error)){\nvar e__62528__auto____$1 = e63844;\nif((e__62528__auto____$1 === cljs.core.match.backtrack)){\nreturn metabase.mbql.util.match.impl.replace_in_collection(metabase$mbql$util$replace_field_or_expression_$_replace_63836,_AMPERSAND_parents,_AMPERSAND_match);\n} else {\nthrow e__62528__auto____$1;\n}\n} else {\nthrow e63844;\n\n}\n}} else {\nthrow e__62528__auto__;\n}\n} else {\nthrow e63843;\n\n}\n}})(cljs.core.PersistentVector.EMPTY,m);\n});\n/**\n * Rewrite `:time-interval` filter clauses as simpler ones like `:=` or `:between`.\n */\nmetabase.mbql.util.desugar_time_interval = (function metabase$mbql$util$desugar_time_interval(m){\nreturn (function metabase$mbql$util$desugar_time_interval_$_replace_63847(_AMPERSAND_parents,_AMPERSAND_match){\ntry{if(((cljs.core.vector_QMARK_(_AMPERSAND_match)) && ((cljs.core.count(_AMPERSAND_match) === 4)))){\ntry{var _AMPERSAND_match_0__63856 = cljs.core.nth.cljs$core$IFn$_invoke$arity$2(_AMPERSAND_match,(0));\nif(cljs.core.keyword_identical_QMARK_(_AMPERSAND_match_0__63856,new cljs.core.Keyword(null,\"time-interval\",\"time-interval\",704622015))){\nvar field_or_expression = cljs.core.nth.cljs$core$IFn$_invoke$arity$2(_AMPERSAND_match,(1));\nvar n = cljs.core.nth.cljs$core$IFn$_invoke$arity$2(_AMPERSAND_match,(2));\nvar unit = cljs.core.nth.cljs$core$IFn$_invoke$arity$2(_AMPERSAND_match,(3));\nreturn metabase$mbql$util$desugar_time_interval_$_replace_63847(_AMPERSAND_parents,new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"time-interval\",\"time-interval\",704622015),field_or_expression,n,unit,null], null));\n} else {\nthrow cljs.core.match.backtrack;\n\n}\n}catch (e63882){if((e63882 instanceof Error)){\nvar e__62528__auto__ = e63882;\nif((e__62528__auto__ === cljs.core.match.backtrack)){\nthrow cljs.core.match.backtrack;\n} else {\nthrow e__62528__auto__;\n}\n} else {\nthrow e63882;\n\n}\n}} else {\nthrow cljs.core.match.backtrack;\n\n}\n}catch (e63865){if((e63865 instanceof Error)){\nvar e__62528__auto__ = e63865;\nif((e__62528__auto__ === cljs.core.match.backtrack)){\ntry{if(((cljs.core.vector_QMARK_(_AMPERSAND_match)) && ((cljs.core.count(_AMPERSAND_match) === 5)))){\ntry{var _AMPERSAND_match_0__63860 = cljs.core.nth.cljs$core$IFn$_invoke$arity$2(_AMPERSAND_match,(0));\nif(cljs.core.keyword_identical_QMARK_(_AMPERSAND_match_0__63860,new cljs.core.Keyword(null,\"time-interval\",\"time-interval\",704622015))){\ntry{var _AMPERSAND_match_2__63862 = cljs.core.nth.cljs$core$IFn$_invoke$arity$2(_AMPERSAND_match,(2));\nif(cljs.core.keyword_identical_QMARK_(_AMPERSAND_match_2__63862,new cljs.core.Keyword(null,\"current\",\"current\",-1088038603))){\nvar field_or_expression = cljs.core.nth.cljs$core$IFn$_invoke$arity$2(_AMPERSAND_match,(1));\nvar unit = cljs.core.nth.cljs$core$IFn$_invoke$arity$2(_AMPERSAND_match,(3));\nvar options = cljs.core.nth.cljs$core$IFn$_invoke$arity$2(_AMPERSAND_match,(4));\nreturn metabase$mbql$util$desugar_time_interval_$_replace_63847(_AMPERSAND_parents,new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"time-interval\",\"time-interval\",704622015),field_or_expression,(0),unit,options], null));\n} else {\nthrow cljs.core.match.backtrack;\n\n}\n}catch (e63868){if((e63868 instanceof Error)){\nvar e__62528__auto____$1 = e63868;\nif((e__62528__auto____$1 === cljs.core.match.backtrack)){\ntry{var _AMPERSAND_match_2__63862 = cljs.core.nth.cljs$core$IFn$_invoke$arity$2(_AMPERSAND_match,(2));\nif(cljs.core.keyword_identical_QMARK_(_AMPERSAND_match_2__63862,new cljs.core.Keyword(null,\"last\",\"last\",1105735132))){\nvar field_or_expression = cljs.core.nth.cljs$core$IFn$_invoke$arity$2(_AMPERSAND_match,(1));\nvar unit = cljs.core.nth.cljs$core$IFn$_invoke$arity$2(_AMPERSAND_match,(3));\nvar options = cljs.core.nth.cljs$core$IFn$_invoke$arity$2(_AMPERSAND_match,(4));\nreturn metabase$mbql$util$desugar_time_interval_$_replace_63847(_AMPERSAND_parents,new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"time-interval\",\"time-interval\",704622015),field_or_expression,(-1),unit,options], null));\n} else {\nthrow cljs.core.match.backtrack;\n\n}\n}catch (e63869){if((e63869 instanceof Error)){\nvar e__62528__auto____$2 = e63869;\nif((e__62528__auto____$2 === cljs.core.match.backtrack)){\ntry{var _AMPERSAND_match_2__63862 = cljs.core.nth.cljs$core$IFn$_invoke$arity$2(_AMPERSAND_match,(2));\nif(cljs.core.keyword_identical_QMARK_(_AMPERSAND_match_2__63862,new cljs.core.Keyword(null,\"next\",\"next\",-117701485))){\nvar field_or_expression = cljs.core.nth.cljs$core$IFn$_invoke$arity$2(_AMPERSAND_match,(1));\nvar unit = cljs.core.nth.cljs$core$IFn$_invoke$arity$2(_AMPERSAND_match,(3));\nvar options = cljs.core.nth.cljs$core$IFn$_invoke$arity$2(_AMPERSAND_match,(4));\nreturn metabase$mbql$util$desugar_time_interval_$_replace_63847(_AMPERSAND_parents,new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"time-interval\",\"time-interval\",704622015),field_or_expression,(1),unit,options], null));\n} else {\nthrow cljs.core.match.backtrack;\n\n}\n}catch (e63870){if((e63870 instanceof Error)){\nvar e__62528__auto____$3 = e63870;\nif((e__62528__auto____$3 === cljs.core.match.backtrack)){\ntry{var _AMPERSAND_match_2__63862 = cljs.core.nth.cljs$core$IFn$_invoke$arity$2(_AMPERSAND_match,(2));\nif(cljs.core.truth_((function (){var fexpr__63880 = new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [(-1),null], null), null);\nreturn (fexpr__63880.cljs$core$IFn$_invoke$arity$1 ? fexpr__63880.cljs$core$IFn$_invoke$arity$1(_AMPERSAND_match_2__63862) : fexpr__63880.call(null,_AMPERSAND_match_2__63862));\n})())){\ntry{var _AMPERSAND_match_4__63864 = cljs.core.nth.cljs$core$IFn$_invoke$arity$2(_AMPERSAND_match,(4));\nif(cljs.core.truth_(new cljs.core.Keyword(null,\"include-current\",\"include-current\",-1602371981).cljs$core$IFn$_invoke$arity$1(_AMPERSAND_match_4__63864))){\nvar n = cljs.core.nth.cljs$core$IFn$_invoke$arity$2(_AMPERSAND_match,(2));\nvar field_or_expression = cljs.core.nth.cljs$core$IFn$_invoke$arity$2(_AMPERSAND_match,(1));\nvar unit = cljs.core.nth.cljs$core$IFn$_invoke$arity$2(_AMPERSAND_match,(3));\nreturn new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"between\",\"between\",1131099276),metabase.mbql.util.replace_field_or_expression(field_or_expression,unit),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"relative-datetime\",\"relative-datetime\",1285169278),n,unit], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"relative-datetime\",\"relative-datetime\",1285169278),(0),unit], null)], null);\n} else {\nthrow cljs.core.match.backtrack;\n\n}\n}catch (e63881){if((e63881 instanceof Error)){\nvar e__62528__auto____$4 = e63881;\nif((e__62528__auto____$4 === cljs.core.match.backtrack)){\nthrow cljs.core.match.backtrack;\n} else {\nthrow e__62528__auto____$4;\n}\n} else {\nthrow e63881;\n\n}\n}} else {\nthrow cljs.core.match.backtrack;\n\n}\n}catch (e63871){if((e63871 instanceof Error)){\nvar e__62528__auto____$4 = e63871;\nif((e__62528__auto____$4 === cljs.core.match.backtrack)){\ntry{var _AMPERSAND_match_2__63862 = cljs.core.nth.cljs$core$IFn$_invoke$arity$2(_AMPERSAND_match,(2));\nif(cljs.core.truth_((function (){var fexpr__63878 = new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [(1),null], null), null);\nreturn (fexpr__63878.cljs$core$IFn$_invoke$arity$1 ? fexpr__63878.cljs$core$IFn$_invoke$arity$1(_AMPERSAND_match_2__63862) : fexpr__63878.call(null,_AMPERSAND_match_2__63862));\n})())){\ntry{var _AMPERSAND_match_4__63864 = cljs.core.nth.cljs$core$IFn$_invoke$arity$2(_AMPERSAND_match,(4));\nif(cljs.core.truth_(new cljs.core.Keyword(null,\"include-current\",\"include-current\",-1602371981).cljs$core$IFn$_invoke$arity$1(_AMPERSAND_match_4__63864))){\nvar n = cljs.core.nth.cljs$core$IFn$_invoke$arity$2(_AMPERSAND_match,(2));\nvar field_or_expression = cljs.core.nth.cljs$core$IFn$_invoke$arity$2(_AMPERSAND_match,(1));\nvar unit = cljs.core.nth.cljs$core$IFn$_invoke$arity$2(_AMPERSAND_match,(3));\nreturn new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"between\",\"between\",1131099276),metabase.mbql.util.replace_field_or_expression(field_or_expression,unit),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"relative-datetime\",\"relative-datetime\",1285169278),(0),unit], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"relative-datetime\",\"relative-datetime\",1285169278),n,unit], null)], null);\n} else {\nthrow cljs.core.match.backtrack;\n\n}\n}catch (e63879){if((e63879 instanceof Error)){\nvar e__62528__auto____$5 = e63879;\nif((e__62528__auto____$5 === cljs.core.match.backtrack)){\nthrow cljs.core.match.backtrack;\n} else {\nthrow e__62528__auto____$5;\n}\n} else {\nthrow e63879;\n\n}\n}} else {\nthrow cljs.core.match.backtrack;\n\n}\n}catch (e63872){if((e63872 instanceof Error)){\nvar e__62528__auto____$5 = e63872;\nif((e__62528__auto____$5 === cljs.core.match.backtrack)){\ntry{var _AMPERSAND_match_2__63862 = cljs.core.nth.cljs$core$IFn$_invoke$arity$2(_AMPERSAND_match,(2));\nif(cljs.core.truth_((function (){var fexpr__63877 = new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 3, [(0),null,(1),null,(-1),null], null), null);\nreturn (fexpr__63877.cljs$core$IFn$_invoke$arity$1 ? fexpr__63877.cljs$core$IFn$_invoke$arity$1(_AMPERSAND_match_2__63862) : fexpr__63877.call(null,_AMPERSAND_match_2__63862));\n})())){\nvar n = cljs.core.nth.cljs$core$IFn$_invoke$arity$2(_AMPERSAND_match,(2));\nvar field_or_expression = cljs.core.nth.cljs$core$IFn$_invoke$arity$2(_AMPERSAND_match,(1));\nvar unit = cljs.core.nth.cljs$core$IFn$_invoke$arity$2(_AMPERSAND_match,(3));\nreturn new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"=\",\"=\",1152933628),metabase.mbql.util.replace_field_or_expression(field_or_expression,unit),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"relative-datetime\",\"relative-datetime\",1285169278),n,unit], null)], null);\n} else {\nthrow cljs.core.match.backtrack;\n\n}\n}catch (e63873){if((e63873 instanceof Error)){\nvar e__62528__auto____$6 = e63873;\nif((e__62528__auto____$6 === cljs.core.match.backtrack)){\ntry{var _AMPERSAND_match_2__63862 = cljs.core.nth.cljs$core$IFn$_invoke$arity$2(_AMPERSAND_match,(2));\nif((_AMPERSAND_match_2__63862 < (0))){\ntry{var _AMPERSAND_match_4__63864 = cljs.core.nth.cljs$core$IFn$_invoke$arity$2(_AMPERSAND_match,(4));\nif(cljs.core.truth_(new cljs.core.Keyword(null,\"include-current\",\"include-current\",-1602371981).cljs$core$IFn$_invoke$arity$1(_AMPERSAND_match_4__63864))){\nvar n = cljs.core.nth.cljs$core$IFn$_invoke$arity$2(_AMPERSAND_match,(2));\nvar field_or_expression = cljs.core.nth.cljs$core$IFn$_invoke$arity$2(_AMPERSAND_match,(1));\nvar unit = cljs.core.nth.cljs$core$IFn$_invoke$arity$2(_AMPERSAND_match,(3));\nreturn new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"between\",\"between\",1131099276),metabase.mbql.util.replace_field_or_expression(field_or_expression,unit),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"relative-datetime\",\"relative-datetime\",1285169278),n,unit], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"relative-datetime\",\"relative-datetime\",1285169278),(0),unit], null)], null);\n} else {\nthrow cljs.core.match.backtrack;\n\n}\n}catch (e63876){if((e63876 instanceof Error)){\nvar e__62528__auto____$7 = e63876;\nif((e__62528__auto____$7 === cljs.core.match.backtrack)){\nvar n = cljs.core.nth.cljs$core$IFn$_invoke$arity$2(_AMPERSAND_match,(2));\nvar field_or_expression = cljs.core.nth.cljs$core$IFn$_invoke$arity$2(_AMPERSAND_match,(1));\nvar unit = cljs.core.nth.cljs$core$IFn$_invoke$arity$2(_AMPERSAND_match,(3));\nreturn new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"between\",\"between\",1131099276),metabase.mbql.util.replace_field_or_expression(field_or_expression,unit),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"relative-datetime\",\"relative-datetime\",1285169278),n,unit], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"relative-datetime\",\"relative-datetime\",1285169278),(-1),unit], null)], null);\n} else {\nthrow e__62528__auto____$7;\n}\n} else {\nthrow e63876;\n\n}\n}} else {\nthrow cljs.core.match.backtrack;\n\n}\n}catch (e63874){if((e63874 instanceof Error)){\nvar e__62528__auto____$7 = e63874;\nif((e__62528__auto____$7 === cljs.core.match.backtrack)){\ntry{var _AMPERSAND_match_4__63864 = cljs.core.nth.cljs$core$IFn$_invoke$arity$2(_AMPERSAND_match,(4));\nif(cljs.core.truth_(new cljs.core.Keyword(null,\"include-current\",\"include-current\",-1602371981).cljs$core$IFn$_invoke$arity$1(_AMPERSAND_match_4__63864))){\nvar n = cljs.core.nth.cljs$core$IFn$_invoke$arity$2(_AMPERSAND_match,(2));\nvar field_or_expression = cljs.core.nth.cljs$core$IFn$_invoke$arity$2(_AMPERSAND_match,(1));\nvar unit = cljs.core.nth.cljs$core$IFn$_invoke$arity$2(_AMPERSAND_match,(3));\nreturn new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"between\",\"between\",1131099276),metabase.mbql.util.replace_field_or_expression(field_or_expression,unit),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"relative-datetime\",\"relative-datetime\",1285169278),(0),unit], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"relative-datetime\",\"relative-datetime\",1285169278),n,unit], null)], null);\n} else {\nthrow cljs.core.match.backtrack;\n\n}\n}catch (e63875){if((e63875 instanceof Error)){\nvar e__62528__auto____$8 = e63875;\nif((e__62528__auto____$8 === cljs.core.match.backtrack)){\nvar n = cljs.core.nth.cljs$core$IFn$_invoke$arity$2(_AMPERSAND_match,(2));\nvar field_or_expression = cljs.core.nth.cljs$core$IFn$_invoke$arity$2(_AMPERSAND_match,(1));\nvar unit = cljs.core.nth.cljs$core$IFn$_invoke$arity$2(_AMPERSAND_match,(3));\nreturn new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"between\",\"between\",1131099276),metabase.mbql.util.replace_field_or_expression(field_or_expression,unit),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"relative-datetime\",\"relative-datetime\",1285169278),(1),unit], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"relative-datetime\",\"relative-datetime\",1285169278),n,unit], null)], null);\n} else {\nthrow e__62528__auto____$8;\n}\n} else {\nthrow e63875;\n\n}\n}} else {\nthrow e__62528__auto____$7;\n}\n} else {\nthrow e63874;\n\n}\n}} else {\nthrow e__62528__auto____$6;\n}\n} else {\nthrow e63873;\n\n}\n}} else {\nthrow e__62528__auto____$5;\n}\n} else {\nthrow e63872;\n\n}\n}} else {\nthrow e__62528__auto____$4;\n}\n} else {\nthrow e63871;\n\n}\n}} else {\nthrow e__62528__auto____$3;\n}\n} else {\nthrow e63870;\n\n}\n}} else {\nthrow e__62528__auto____$2;\n}\n} else {\nthrow e63869;\n\n}\n}} else {\nthrow e__62528__auto____$1;\n}\n} else {\nthrow e63868;\n\n}\n}} else {\nthrow cljs.core.match.backtrack;\n\n}\n}catch (e63867){if((e63867 instanceof Error)){\nvar e__62528__auto____$1 = e63867;\nif((e__62528__auto____$1 === cljs.core.match.backtrack)){\nthrow cljs.core.match.backtrack;\n} else {\nthrow e__62528__auto____$1;\n}\n} else {\nthrow e63867;\n\n}\n}} else {\nthrow cljs.core.match.backtrack;\n\n}\n}catch (e63866){if((e63866 instanceof Error)){\nvar e__62528__auto____$1 = e63866;\nif((e__62528__auto____$1 === cljs.core.match.backtrack)){\nreturn metabase.mbql.util.match.impl.replace_in_collection(metabase$mbql$util$desugar_time_interval_$_replace_63847,_AMPERSAND_parents,_AMPERSAND_match);\n} else {\nthrow e__62528__auto____$1;\n}\n} else {\nthrow e63866;\n\n}\n}} else {\nthrow e__62528__auto__;\n}\n} else {\nthrow e63865;\n\n}\n}})(cljs.core.PersistentVector.EMPTY,m);\n});\n/**\n * Rewrite `:does-not-contain` filter clauses as simpler `:not` clauses.\n */\nmetabase.mbql.util.desugar_does_not_contain = (function metabase$mbql$util$desugar_does_not_contain(m){\nreturn (function metabase$mbql$util$desugar_does_not_contain_$_replace_63883(_AMPERSAND_parents,_AMPERSAND_match){\ntry{if(((cljs.core.vector_QMARK_(_AMPERSAND_match)) && ((cljs.core.count(_AMPERSAND_match) >= (1))))){\ntry{var _AMPERSAND_match_left__63885 = cljs.core.subvec.cljs$core$IFn$_invoke$arity$3(_AMPERSAND_match,(0),(1));\nif(((cljs.core.vector_QMARK_(_AMPERSAND_match_left__63885)) && ((cljs.core.count(_AMPERSAND_match_left__63885) === (1))))){\ntry{var _AMPERSAND_match_left__63885_0__63887 = cljs.core.nth.cljs$core$IFn$_invoke$arity$2(_AMPERSAND_match_left__63885,(0));\nif(cljs.core.keyword_identical_QMARK_(_AMPERSAND_match_left__63885_0__63887,new cljs.core.Keyword(null,\"does-not-contain\",\"does-not-contain\",-274946853))){\nvar args = cljs.core.subvec.cljs$core$IFn$_invoke$arity$2(_AMPERSAND_match,(1));\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"not\",\"not\",-595976884),cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"contains\",\"contains\",676899812)], null),args)], null);\n} else {\nthrow cljs.core.match.backtrack;\n\n}\n}catch (e63890){if((e63890 instanceof Error)){\nvar e__62528__auto__ = e63890;\nif((e__62528__auto__ === cljs.core.match.backtrack)){\nthrow cljs.core.match.backtrack;\n} else {\nthrow e__62528__auto__;\n}\n} else {\nthrow e63890;\n\n}\n}} else {\nthrow cljs.core.match.backtrack;\n\n}\n}catch (e63889){if((e63889 instanceof Error)){\nvar e__62528__auto__ = e63889;\nif((e__62528__auto__ === cljs.core.match.backtrack)){\nthrow cljs.core.match.backtrack;\n} else {\nthrow e__62528__auto__;\n}\n} else {\nthrow e63889;\n\n}\n}} else {\nthrow cljs.core.match.backtrack;\n\n}\n}catch (e63888){if((e63888 instanceof Error)){\nvar e__62528__auto__ = e63888;\nif((e__62528__auto__ === cljs.core.match.backtrack)){\nreturn metabase.mbql.util.match.impl.replace_in_collection(metabase$mbql$util$desugar_does_not_contain_$_replace_63883,_AMPERSAND_parents,_AMPERSAND_match);\n} else {\nthrow e__62528__auto__;\n}\n} else {\nthrow e63888;\n\n}\n}})(cljs.core.PersistentVector.EMPTY,m);\n});\n/**\n * `:=` and `!=` clauses with more than 2 args automatically get rewritten as compound filters.\n * \n *   [:= field x y]  -> [:or  [:=  field x] [:=  field y]]\n *   [:!= field x y] -> [:and [:!= field x] [:!= field y]]\n */\nmetabase.mbql.util.desugar_equals_and_not_equals_with_extra_args = (function metabase$mbql$util$desugar_equals_and_not_equals_with_extra_args(m){\nreturn (function metabase$mbql$util$desugar_equals_and_not_equals_with_extra_args_$_replace_63891(_AMPERSAND_parents,_AMPERSAND_match){\ntry{if(((cljs.core.vector_QMARK_(_AMPERSAND_match)) && ((cljs.core.count(_AMPERSAND_match) >= (4))))){\ntry{var _AMPERSAND_match_left__63893 = cljs.core.subvec.cljs$core$IFn$_invoke$arity$3(_AMPERSAND_match,(0),(4));\nif(((cljs.core.vector_QMARK_(_AMPERSAND_match_left__63893)) && ((cljs.core.count(_AMPERSAND_match_left__63893) === (4))))){\ntry{var _AMPERSAND_match_left__63893_0__63895 = cljs.core.nth.cljs$core$IFn$_invoke$arity$2(_AMPERSAND_match_left__63893,(0));\nif(cljs.core.keyword_identical_QMARK_(_AMPERSAND_match_left__63893_0__63895,new cljs.core.Keyword(null,\"=\",\"=\",1152933628))){\nvar field = cljs.core.nth.cljs$core$IFn$_invoke$arity$2(_AMPERSAND_match_left__63893,(1));\nvar x = cljs.core.nth.cljs$core$IFn$_invoke$arity$2(_AMPERSAND_match_left__63893,(2));\nvar y = cljs.core.nth.cljs$core$IFn$_invoke$arity$2(_AMPERSAND_match_left__63893,(3));\nvar more = cljs.core.subvec.cljs$core$IFn$_invoke$arity$2(_AMPERSAND_match,(4));\nreturn cljs.core.apply.cljs$core$IFn$_invoke$arity$3(cljs.core.vector,new cljs.core.Keyword(null,\"or\",\"or\",235744169),(function (){var iter__5523__auto__ = (function metabase$mbql$util$desugar_equals_and_not_equals_with_extra_args_$_replace_63891_$_iter__63907(s__63908){\nreturn (new cljs.core.LazySeq(null,(function (){\nvar s__63908__$1 = s__63908;\nwhile(true){\nvar temp__5804__auto__ = cljs.core.seq(s__63908__$1);\nif(temp__5804__auto__){\nvar s__63908__$2 = temp__5804__auto__;\nif(cljs.core.chunked_seq_QMARK_(s__63908__$2)){\nvar c__5521__auto__ = cljs.core.chunk_first(s__63908__$2);\nvar size__5522__auto__ = cljs.core.count(c__5521__auto__);\nvar b__63910 = cljs.core.chunk_buffer(size__5522__auto__);\nif((function (){var i__63909 = (0);\nwhile(true){\nif((i__63909 < size__5522__auto__)){\nvar x__$1 = cljs.core._nth(c__5521__auto__,i__63909);\ncljs.core.chunk_append(b__63910,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"=\",\"=\",1152933628),field,x__$1], null));\n\nvar G__64531 = (i__63909 + (1));\ni__63909 = G__64531;\ncontinue;\n} else {\nreturn true;\n}\nbreak;\n}\n})()){\nreturn cljs.core.chunk_cons(cljs.core.chunk(b__63910),metabase$mbql$util$desugar_equals_and_not_equals_with_extra_args_$_replace_63891_$_iter__63907(cljs.core.chunk_rest(s__63908__$2)));\n} else {\nreturn cljs.core.chunk_cons(cljs.core.chunk(b__63910),null);\n}\n} else {\nvar x__$1 = cljs.core.first(s__63908__$2);\nreturn cljs.core.cons(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"=\",\"=\",1152933628),field,x__$1], null),metabase$mbql$util$desugar_equals_and_not_equals_with_extra_args_$_replace_63891_$_iter__63907(cljs.core.rest(s__63908__$2)));\n}\n} else {\nreturn null;\n}\nbreak;\n}\n}),null,null));\n});\nreturn iter__5523__auto__(cljs.core.concat.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [x,y], null),more));\n})());\n} else {\nthrow cljs.core.match.backtrack;\n\n}\n}catch (e63901){if((e63901 instanceof Error)){\nvar e__62528__auto__ = e63901;\nif((e__62528__auto__ === cljs.core.match.backtrack)){\ntry{var _AMPERSAND_match_left__63893_0__63895 = cljs.core.nth.cljs$core$IFn$_invoke$arity$2(_AMPERSAND_match_left__63893,(0));\nif(cljs.core.keyword_identical_QMARK_(_AMPERSAND_match_left__63893_0__63895,new cljs.core.Keyword(null,\"!=\",\"!=\",-1841737356))){\nvar field = cljs.core.nth.cljs$core$IFn$_invoke$arity$2(_AMPERSAND_match_left__63893,(1));\nvar x = cljs.core.nth.cljs$core$IFn$_invoke$arity$2(_AMPERSAND_match_left__63893,(2));\nvar y = cljs.core.nth.cljs$core$IFn$_invoke$arity$2(_AMPERSAND_match_left__63893,(3));\nvar more = cljs.core.subvec.cljs$core$IFn$_invoke$arity$2(_AMPERSAND_match,(4));\nreturn cljs.core.apply.cljs$core$IFn$_invoke$arity$3(cljs.core.vector,new cljs.core.Keyword(null,\"and\",\"and\",-971899817),(function (){var iter__5523__auto__ = (function metabase$mbql$util$desugar_equals_and_not_equals_with_extra_args_$_replace_63891_$_iter__63903(s__63904){\nreturn (new cljs.core.LazySeq(null,(function (){\nvar s__63904__$1 = s__63904;\nwhile(true){\nvar temp__5804__auto__ = cljs.core.seq(s__63904__$1);\nif(temp__5804__auto__){\nvar s__63904__$2 = temp__5804__auto__;\nif(cljs.core.chunked_seq_QMARK_(s__63904__$2)){\nvar c__5521__auto__ = cljs.core.chunk_first(s__63904__$2);\nvar size__5522__auto__ = cljs.core.count(c__5521__auto__);\nvar b__63906 = cljs.core.chunk_buffer(size__5522__auto__);\nif((function (){var i__63905 = (0);\nwhile(true){\nif((i__63905 < size__5522__auto__)){\nvar x__$1 = cljs.core._nth(c__5521__auto__,i__63905);\ncljs.core.chunk_append(b__63906,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"!=\",\"!=\",-1841737356),field,x__$1], null));\n\nvar G__64533 = (i__63905 + (1));\ni__63905 = G__64533;\ncontinue;\n} else {\nreturn true;\n}\nbreak;\n}\n})()){\nreturn cljs.core.chunk_cons(cljs.core.chunk(b__63906),metabase$mbql$util$desugar_equals_and_not_equals_with_extra_args_$_replace_63891_$_iter__63903(cljs.core.chunk_rest(s__63904__$2)));\n} else {\nreturn cljs.core.chunk_cons(cljs.core.chunk(b__63906),null);\n}\n} else {\nvar x__$1 = cljs.core.first(s__63904__$2);\nreturn cljs.core.cons(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"!=\",\"!=\",-1841737356),field,x__$1], null),metabase$mbql$util$desugar_equals_and_not_equals_with_extra_args_$_replace_63891_$_iter__63903(cljs.core.rest(s__63904__$2)));\n}\n} else {\nreturn null;\n}\nbreak;\n}\n}),null,null));\n});\nreturn iter__5523__auto__(cljs.core.concat.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [x,y], null),more));\n})());\n} else {\nthrow cljs.core.match.backtrack;\n\n}\n}catch (e63902){if((e63902 instanceof Error)){\nvar e__62528__auto____$1 = e63902;\nif((e__62528__auto____$1 === cljs.core.match.backtrack)){\nthrow cljs.core.match.backtrack;\n} else {\nthrow e__62528__auto____$1;\n}\n} else {\nthrow e63902;\n\n}\n}} else {\nthrow e__62528__auto__;\n}\n} else {\nthrow e63901;\n\n}\n}} else {\nthrow cljs.core.match.backtrack;\n\n}\n}catch (e63900){if((e63900 instanceof Error)){\nvar e__62528__auto__ = e63900;\nif((e__62528__auto__ === cljs.core.match.backtrack)){\nthrow cljs.core.match.backtrack;\n} else {\nthrow e__62528__auto__;\n}\n} else {\nthrow e63900;\n\n}\n}} else {\nthrow cljs.core.match.backtrack;\n\n}\n}catch (e63899){if((e63899 instanceof Error)){\nvar e__62528__auto__ = e63899;\nif((e__62528__auto__ === cljs.core.match.backtrack)){\nreturn metabase.mbql.util.match.impl.replace_in_collection(metabase$mbql$util$desugar_equals_and_not_equals_with_extra_args_$_replace_63891,_AMPERSAND_parents,_AMPERSAND_match);\n} else {\nthrow e__62528__auto__;\n}\n} else {\nthrow e63899;\n\n}\n}})(cljs.core.PersistentVector.EMPTY,m);\n});\n/**\n * Replace `relative-datetime` clauses like `[:relative-datetime :current]` with `[:relative-datetime 0 <unit>]`.\n *   `<unit>` is inferred from the `:field` the clause is being compared to (if any), otherwise falls back to `default.`\n */\nmetabase.mbql.util.desugar_current_relative_datetime = (function metabase$mbql$util$desugar_current_relative_datetime(m){\nreturn (function metabase$mbql$util$desugar_current_relative_datetime_$_replace_63911(_AMPERSAND_parents,_AMPERSAND_match){\ntry{if(((cljs.core.vector_QMARK_(_AMPERSAND_match)) && ((cljs.core.count(_AMPERSAND_match) >= (2))))){\ntry{var _AMPERSAND_match_left__63913 = cljs.core.subvec.cljs$core$IFn$_invoke$arity$3(_AMPERSAND_match,(0),(2));\nif(((cljs.core.vector_QMARK_(_AMPERSAND_match_left__63913)) && ((cljs.core.count(_AMPERSAND_match_left__63913) === (2))))){\ntry{var _AMPERSAND_match_right__63914 = cljs.core.subvec.cljs$core$IFn$_invoke$arity$2(_AMPERSAND_match,(2));\nif(cljs.core.truth_(cljs.core.partial.cljs$core$IFn$_invoke$arity$2(cljs.core.some,cljs.core.partial.cljs$core$IFn$_invoke$arity$2(cljs.core._EQ_,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"relative-datetime\",\"relative-datetime\",1285169278),new cljs.core.Keyword(null,\"current\",\"current\",-1088038603)], null)))(_AMPERSAND_match_right__63914))){\nvar args = cljs.core.subvec.cljs$core$IFn$_invoke$arity$2(_AMPERSAND_match,(2));\nvar clause = cljs.core.nth.cljs$core$IFn$_invoke$arity$2(_AMPERSAND_match_left__63913,(0));\nvar field = cljs.core.nth.cljs$core$IFn$_invoke$arity$2(_AMPERSAND_match_left__63913,(1));\nvar temporal_unit = (function (){var or__5045__auto__ = cljs.core.first(cljs.core.seq(cljs.core.filter.cljs$core$IFn$_invoke$arity$2(cljs.core.some_QMARK_,(function metabase$mbql$util$desugar_current_relative_datetime_$_replace_63911_$_match_63920(_AMPERSAND_parents__$1,_AMPERSAND_match__$1){\ntry{if(((cljs.core.vector_QMARK_(_AMPERSAND_match__$1)) && ((cljs.core.count(_AMPERSAND_match__$1) === 3)))){\ntry{var _AMPERSAND_match_0__63923 = cljs.core.nth.cljs$core$IFn$_invoke$arity$2(_AMPERSAND_match__$1,(0));\nif(cljs.core.keyword_identical_QMARK_(_AMPERSAND_match_0__63923,new cljs.core.Keyword(null,\"field\",\"field\",-1302436500))){\ntry{var _AMPERSAND_match_2__63925 = cljs.core.nth.cljs$core$IFn$_invoke$arity$2(_AMPERSAND_match__$1,(2));\nif((((!((_AMPERSAND_match_2__63925 == null))))?(((((_AMPERSAND_match_2__63925.cljs$lang$protocol_mask$partition0$ & (256))) || ((cljs.core.PROTOCOL_SENTINEL === _AMPERSAND_match_2__63925.cljs$core$ILookup$))))?true:(((!_AMPERSAND_match_2__63925.cljs$lang$protocol_mask$partition0$))?cljs.core.native_satisfies_QMARK_(cljs.core.ILookup,_AMPERSAND_match_2__63925):false)):cljs.core.native_satisfies_QMARK_(cljs.core.ILookup,_AMPERSAND_match_2__63925))){\ntry{var _AMPERSAND_match_2__63925_temporal_unit__63928 = cljs.core.get.cljs$core$IFn$_invoke$arity$3(_AMPERSAND_match_2__63925,new cljs.core.Keyword(null,\"temporal-unit\",\"temporal-unit\",-1892306358),new cljs.core.Keyword(\"clojure.core.match\",\"not-found\",\"clojure.core.match/not-found\",1553053780));\nif(cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2(_AMPERSAND_match_2__63925_temporal_unit__63928,new cljs.core.Keyword(\"clojure.core.match\",\"not-found\",\"clojure.core.match/not-found\",1553053780))){\nvar temporal_unit = cljs.core.get.cljs$core$IFn$_invoke$arity$2(_AMPERSAND_match_2__63925,new cljs.core.Keyword(null,\"temporal-unit\",\"temporal-unit\",-1892306358));\nreturn new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [temporal_unit], null);\n} else {\nthrow cljs.core.match.backtrack;\n\n}\n}catch (e63933){if((e63933 instanceof Error)){\nvar e__62528__auto__ = e63933;\nif((e__62528__auto__ === cljs.core.match.backtrack)){\nthrow cljs.core.match.backtrack;\n} else {\nthrow e__62528__auto__;\n}\n} else {\nthrow e63933;\n\n}\n}} else {\nthrow cljs.core.match.backtrack;\n\n}\n}catch (e63931){if((e63931 instanceof Error)){\nvar e__62528__auto__ = e63931;\nif((e__62528__auto__ === cljs.core.match.backtrack)){\nthrow cljs.core.match.backtrack;\n} else {\nthrow e__62528__auto__;\n}\n} else {\nthrow e63931;\n\n}\n}} else {\nthrow cljs.core.match.backtrack;\n\n}\n}catch (e63930){if((e63930 instanceof Error)){\nvar e__62528__auto__ = e63930;\nif((e__62528__auto__ === cljs.core.match.backtrack)){\nthrow cljs.core.match.backtrack;\n} else {\nthrow e__62528__auto__;\n}\n} else {\nthrow e63930;\n\n}\n}} else {\nthrow cljs.core.match.backtrack;\n\n}\n}catch (e63929){if((e63929 instanceof Error)){\nvar e__62528__auto__ = e63929;\nif((e__62528__auto__ === cljs.core.match.backtrack)){\nreturn metabase.mbql.util.match.impl.match_in_collection(metabase$mbql$util$desugar_current_relative_datetime_$_replace_63911_$_match_63920,_AMPERSAND_parents__$1,_AMPERSAND_match__$1);\n} else {\nthrow e__62528__auto__;\n}\n} else {\nthrow e63929;\n\n}\n}})(cljs.core.PersistentVector.EMPTY,field))));\nif(cljs.core.truth_(or__5045__auto__)){\nreturn or__5045__auto__;\n} else {\nreturn new cljs.core.Keyword(null,\"default\",\"default\",-1987822328);\n}\n})();\nreturn cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [clause,field], null),(function metabase$mbql$util$desugar_current_relative_datetime_$_replace_63911_$_replace_63934(_AMPERSAND_parents__$1,_AMPERSAND_match__$1){\ntry{if(((cljs.core.vector_QMARK_(_AMPERSAND_match__$1)) && ((cljs.core.count(_AMPERSAND_match__$1) === 2)))){\ntry{var _AMPERSAND_match_0__63936 = cljs.core.nth.cljs$core$IFn$_invoke$arity$2(_AMPERSAND_match__$1,(0));\nif(cljs.core.keyword_identical_QMARK_(_AMPERSAND_match_0__63936,new cljs.core.Keyword(null,\"relative-datetime\",\"relative-datetime\",1285169278))){\ntry{var _AMPERSAND_match_1__63937 = cljs.core.nth.cljs$core$IFn$_invoke$arity$2(_AMPERSAND_match__$1,(1));\nif(cljs.core.keyword_identical_QMARK_(_AMPERSAND_match_1__63937,new cljs.core.Keyword(null,\"current\",\"current\",-1088038603))){\nreturn new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"relative-datetime\",\"relative-datetime\",1285169278),(0),temporal_unit], null);\n} else {\nthrow cljs.core.match.backtrack;\n\n}\n}catch (e63940){if((e63940 instanceof Error)){\nvar e__62528__auto__ = e63940;\nif((e__62528__auto__ === cljs.core.match.backtrack)){\nthrow cljs.core.match.backtrack;\n} else {\nthrow e__62528__auto__;\n}\n} else {\nthrow e63940;\n\n}\n}} else {\nthrow cljs.core.match.backtrack;\n\n}\n}catch (e63939){if((e63939 instanceof Error)){\nvar e__62528__auto__ = e63939;\nif((e__62528__auto__ === cljs.core.match.backtrack)){\nthrow cljs.core.match.backtrack;\n} else {\nthrow e__62528__auto__;\n}\n} else {\nthrow e63939;\n\n}\n}} else {\nthrow cljs.core.match.backtrack;\n\n}\n}catch (e63938){if((e63938 instanceof Error)){\nvar e__62528__auto__ = e63938;\nif((e__62528__auto__ === cljs.core.match.backtrack)){\nreturn metabase.mbql.util.match.impl.replace_in_collection(metabase$mbql$util$desugar_current_relative_datetime_$_replace_63911_$_replace_63934,_AMPERSAND_parents__$1,_AMPERSAND_match__$1);\n} else {\nthrow e__62528__auto__;\n}\n} else {\nthrow e63938;\n\n}\n}})(cljs.core.PersistentVector.EMPTY,args));\n} else {\nthrow cljs.core.match.backtrack;\n\n}\n}catch (e63919){if((e63919 instanceof Error)){\nvar e__62528__auto__ = e63919;\nif((e__62528__auto__ === cljs.core.match.backtrack)){\nthrow cljs.core.match.backtrack;\n} else {\nthrow e__62528__auto__;\n}\n} else {\nthrow e63919;\n\n}\n}} else {\nthrow cljs.core.match.backtrack;\n\n}\n}catch (e63918){if((e63918 instanceof Error)){\nvar e__62528__auto__ = e63918;\nif((e__62528__auto__ === cljs.core.match.backtrack)){\nthrow cljs.core.match.backtrack;\n} else {\nthrow e__62528__auto__;\n}\n} else {\nthrow e63918;\n\n}\n}} else {\nthrow cljs.core.match.backtrack;\n\n}\n}catch (e63917){if((e63917 instanceof Error)){\nvar e__62528__auto__ = e63917;\nif((e__62528__auto__ === cljs.core.match.backtrack)){\nreturn metabase.mbql.util.match.impl.replace_in_collection(metabase$mbql$util$desugar_current_relative_datetime_$_replace_63911,_AMPERSAND_parents,_AMPERSAND_match);\n} else {\nthrow e__62528__auto__;\n}\n} else {\nthrow e63917;\n\n}\n}})(cljs.core.PersistentVector.EMPTY,m);\n});\n/**\n * Mapping from the sugar syntax to extract datetime to the unit.\n */\nmetabase.mbql.util.temporal_extract_ops__GT_unit = cljs.core.PersistentHashMap.fromArrays([new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"get-quarter\",\"get-quarter\",1327778593),null], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"get-year\",\"get-year\",-936011274),null], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"get-week\",\"get-week\",-888059349),new cljs.core.Keyword(null,\"us\",\"us\",746429226)], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"get-week\",\"get-week\",-888059349),null], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"get-hour\",\"get-hour\",622714059),null], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"get-day\",\"get-day\",127568857),null], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"get-minute\",\"get-minute\",1468086343),null], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"get-month\",\"get-month\",-369374731),null], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"get-day-of-week\",\"get-day-of-week\",2010140752),null], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"get-week\",\"get-week\",-888059349),new cljs.core.Keyword(null,\"iso\",\"iso\",-1366207543)], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"get-week\",\"get-week\",-888059349),new cljs.core.Keyword(null,\"instance\",\"instance\",-2121349050)], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"get-second\",\"get-second\",-2065946318),null], null)],[new cljs.core.Keyword(null,\"quarter-of-year\",\"quarter-of-year\",-472803491),new cljs.core.Keyword(null,\"year-of-era\",\"year-of-era\",682445876),new cljs.core.Keyword(null,\"week-of-year-us\",\"week-of-year-us\",849423511),new cljs.core.Keyword(null,\"week-of-year-iso\",\"week-of-year-iso\",-1827744293),new cljs.core.Keyword(null,\"hour-of-day\",\"hour-of-day\",2086777099),new cljs.core.Keyword(null,\"day-of-month\",\"day-of-month\",-1096650288),new cljs.core.Keyword(null,\"minute-of-hour\",\"minute-of-hour\",1903220478),new cljs.core.Keyword(null,\"month-of-year\",\"month-of-year\",760756492),new cljs.core.Keyword(null,\"day-of-week\",\"day-of-week\",1639326729),new cljs.core.Keyword(null,\"week-of-year-iso\",\"week-of-year-iso\",-1827744293),new cljs.core.Keyword(null,\"week-of-year-instance\",\"week-of-year-instance\",2047974624),new cljs.core.Keyword(null,\"second-of-minute\",\"second-of-minute\",222734326)]);\nmetabase.mbql.util.temporal_extract_ops = cljs.core.set(cljs.core.map.cljs$core$IFn$_invoke$arity$2(cljs.core.first,cljs.core.keys(metabase.mbql.util.temporal_extract_ops__GT_unit)));\n/**\n * Replace datetime extractions clauses like `[:get-year field]` with `[:temporal-extract field :year]`.\n */\nmetabase.mbql.util.desugar_temporal_extract = (function metabase$mbql$util$desugar_temporal_extract(m){\nreturn (function metabase$mbql$util$desugar_temporal_extract_$_replace_63941(_AMPERSAND_parents,_AMPERSAND_match){\ntry{if(((cljs.core.vector_QMARK_(_AMPERSAND_match)) && ((cljs.core.count(_AMPERSAND_match) >= (2))))){\ntry{var _AMPERSAND_match_left__63943 = cljs.core.subvec.cljs$core$IFn$_invoke$arity$3(_AMPERSAND_match,(0),(2));\nif(((cljs.core.vector_QMARK_(_AMPERSAND_match_left__63943)) && ((cljs.core.count(_AMPERSAND_match_left__63943) === (2))))){\ntry{var _AMPERSAND_match_left__63943_0__63945 = cljs.core.nth.cljs$core$IFn$_invoke$arity$2(_AMPERSAND_match_left__63943,(0));\nif(cljs.core.truth_((metabase.mbql.util.temporal_extract_ops.cljs$core$IFn$_invoke$arity$1 ? metabase.mbql.util.temporal_extract_ops.cljs$core$IFn$_invoke$arity$1(_AMPERSAND_match_left__63943_0__63945) : metabase.mbql.util.temporal_extract_ops.call(null,_AMPERSAND_match_left__63943_0__63945)))){\nvar op = cljs.core.nth.cljs$core$IFn$_invoke$arity$2(_AMPERSAND_match_left__63943,(0));\nvar field = cljs.core.nth.cljs$core$IFn$_invoke$arity$2(_AMPERSAND_match_left__63943,(1));\nvar args = cljs.core.subvec.cljs$core$IFn$_invoke$arity$2(_AMPERSAND_match,(2));\nreturn new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"temporal-extract\",\"temporal-extract\",1781686405),field,(function (){var G__63950 = new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [op,cljs.core.first(args)], null);\nreturn (metabase.mbql.util.temporal_extract_ops__GT_unit.cljs$core$IFn$_invoke$arity$1 ? metabase.mbql.util.temporal_extract_ops__GT_unit.cljs$core$IFn$_invoke$arity$1(G__63950) : metabase.mbql.util.temporal_extract_ops__GT_unit.call(null,G__63950));\n})()], null);\n} else {\nthrow cljs.core.match.backtrack;\n\n}\n}catch (e63949){if((e63949 instanceof Error)){\nvar e__62528__auto__ = e63949;\nif((e__62528__auto__ === cljs.core.match.backtrack)){\nthrow cljs.core.match.backtrack;\n} else {\nthrow e__62528__auto__;\n}\n} else {\nthrow e63949;\n\n}\n}} else {\nthrow cljs.core.match.backtrack;\n\n}\n}catch (e63948){if((e63948 instanceof Error)){\nvar e__62528__auto__ = e63948;\nif((e__62528__auto__ === cljs.core.match.backtrack)){\nthrow cljs.core.match.backtrack;\n} else {\nthrow e__62528__auto__;\n}\n} else {\nthrow e63948;\n\n}\n}} else {\nthrow cljs.core.match.backtrack;\n\n}\n}catch (e63947){if((e63947 instanceof Error)){\nvar e__62528__auto__ = e63947;\nif((e__62528__auto__ === cljs.core.match.backtrack)){\nreturn metabase.mbql.util.match.impl.replace_in_collection(metabase$mbql$util$desugar_temporal_extract_$_replace_63941,_AMPERSAND_parents,_AMPERSAND_match);\n} else {\nthrow e__62528__auto__;\n}\n} else {\nthrow e63947;\n\n}\n}})(cljs.core.PersistentVector.EMPTY,m);\n});\nmetabase.mbql.util.desugar_divide_with_extra_args = (function metabase$mbql$util$desugar_divide_with_extra_args(expression){\nreturn (function metabase$mbql$util$desugar_divide_with_extra_args_$_replace_63951(_AMPERSAND_parents,_AMPERSAND_match){\ntry{if(((cljs.core.vector_QMARK_(_AMPERSAND_match)) && ((cljs.core.count(_AMPERSAND_match) >= (4))))){\ntry{var _AMPERSAND_match_left__63953 = cljs.core.subvec.cljs$core$IFn$_invoke$arity$3(_AMPERSAND_match,(0),(4));\nif(((cljs.core.vector_QMARK_(_AMPERSAND_match_left__63953)) && ((cljs.core.count(_AMPERSAND_match_left__63953) === (4))))){\ntry{var _AMPERSAND_match_left__63953_0__63955 = cljs.core.nth.cljs$core$IFn$_invoke$arity$2(_AMPERSAND_match_left__63953,(0));\nif(cljs.core.keyword_identical_QMARK_(_AMPERSAND_match_left__63953_0__63955,new cljs.core.Keyword(null,\"/\",\"/\",1282502798))){\nvar x = cljs.core.nth.cljs$core$IFn$_invoke$arity$2(_AMPERSAND_match_left__63953,(1));\nvar y = cljs.core.nth.cljs$core$IFn$_invoke$arity$2(_AMPERSAND_match_left__63953,(2));\nvar z = cljs.core.nth.cljs$core$IFn$_invoke$arity$2(_AMPERSAND_match_left__63953,(3));\nvar more = cljs.core.subvec.cljs$core$IFn$_invoke$arity$2(_AMPERSAND_match,(4));\nreturn metabase$mbql$util$desugar_divide_with_extra_args_$_replace_63951(_AMPERSAND_parents,cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"/\",\"/\",1282502798),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"/\",\"/\",1282502798),x,y], null)], null),cljs.core.cons(z,more)));\n} else {\nthrow cljs.core.match.backtrack;\n\n}\n}catch (e63961){if((e63961 instanceof Error)){\nvar e__62528__auto__ = e63961;\nif((e__62528__auto__ === cljs.core.match.backtrack)){\nthrow cljs.core.match.backtrack;\n} else {\nthrow e__62528__auto__;\n}\n} else {\nthrow e63961;\n\n}\n}} else {\nthrow cljs.core.match.backtrack;\n\n}\n}catch (e63960){if((e63960 instanceof Error)){\nvar e__62528__auto__ = e63960;\nif((e__62528__auto__ === cljs.core.match.backtrack)){\nthrow cljs.core.match.backtrack;\n} else {\nthrow e__62528__auto__;\n}\n} else {\nthrow e63960;\n\n}\n}} else {\nthrow cljs.core.match.backtrack;\n\n}\n}catch (e63959){if((e63959 instanceof Error)){\nvar e__62528__auto__ = e63959;\nif((e__62528__auto__ === cljs.core.match.backtrack)){\nreturn metabase.mbql.util.match.impl.replace_in_collection(metabase$mbql$util$desugar_divide_with_extra_args_$_replace_63951,_AMPERSAND_parents,_AMPERSAND_match);\n} else {\nthrow e__62528__auto__;\n}\n} else {\nthrow e63959;\n\n}\n}})(cljs.core.PersistentVector.EMPTY,expression);\n});\nvar ufv63963_64542 = schema.utils.use_fn_validation;\nvar output_schema63962_64543 = metabase.mbql.schema.FieldOrExpressionDef;\nvar input_schema63964_64544 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [schema.core.one(metabase.mbql.schema.FieldOrExpressionDef,cljs.core.with_meta(new cljs.core.Symbol(null,\"expression\",\"expression\",1842843403,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"schema\",\"schema\",-1582001791),new cljs.core.Symbol(\"mbql.s\",\"FieldOrExpressionDef\",\"mbql.s/FieldOrExpressionDef\",-1851966074,null)], null)))], null);\nvar input_checker63965_64545 = (new cljs.core.Delay((function (){\nreturn schema.core.checker(input_schema63964_64544);\n}),null));\nvar output_checker63966_64546 = (new cljs.core.Delay((function (){\nreturn schema.core.checker(output_schema63962_64543);\n}),null));\nvar ret__51869__auto___64547 = /**\n * Inputs: [expression :- mbql.s/FieldOrExpressionDef]\n *   Returns: mbql.s/FieldOrExpressionDef\n * \n *   Rewrite various 'syntactic sugar' expressions like `:/` with more than two args into something simpler for drivers\n *   to compile.\n */\nmetabase.mbql.util.desugar_expression = (function metabase$mbql$util$desugar_expression(G__63967){\nvar validate__50237__auto__ = cljs.core.deref(ufv63963_64542);\nif(cljs.core.truth_(validate__50237__auto__)){\nvar args__50238__auto___64548 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [G__63967], null);\nif(cljs.core.truth_(schema.core.fn_validator)){\nvar G__63968_64549 = new cljs.core.Keyword(null,\"input\",\"input\",556931961);\nvar G__63969_64550 = cljs.core.with_meta(new cljs.core.Symbol(null,\"desugar-expression\",\"desugar-expression\",374099700,null),new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"schema\",\"schema\",-1582001791),new cljs.core.Symbol(\"mbql.s\",\"FieldOrExpressionDef\",\"mbql.s/FieldOrExpressionDef\",-1851966074,null),new cljs.core.Keyword(null,\"doc\",\"doc\",1913296891),\"Rewrite various 'syntactic sugar' expressions like `:/` with more than two args into something simpler for drivers\\n  to compile.\"], null));\nvar G__63970_64551 = input_schema63964_64544;\nvar G__63971_64552 = cljs.core.deref(input_checker63965_64545);\nvar G__63972_64553 = args__50238__auto___64548;\n(schema.core.fn_validator.cljs$core$IFn$_invoke$arity$5 ? schema.core.fn_validator.cljs$core$IFn$_invoke$arity$5(G__63968_64549,G__63969_64550,G__63970_64551,G__63971_64552,G__63972_64553) : schema.core.fn_validator.call(null,G__63968_64549,G__63969_64550,G__63970_64551,G__63971_64552,G__63972_64553));\n} else {\nvar temp__5804__auto___64554 = (function (){var fexpr__63973 = cljs.core.deref(input_checker63965_64545);\nreturn (fexpr__63973.cljs$core$IFn$_invoke$arity$1 ? fexpr__63973.cljs$core$IFn$_invoke$arity$1(args__50238__auto___64548) : fexpr__63973.call(null,args__50238__auto___64548));\n})();\nif(cljs.core.truth_(temp__5804__auto___64554)){\nvar error__50239__auto___64555 = temp__5804__auto___64554;\nthrow cljs.core.ex_info.cljs$core$IFn$_invoke$arity$2(schema.utils.format_STAR_.cljs$core$IFn$_invoke$arity$variadic(\"Input to %s does not match schema: \\n\\n\\t \\u001B[0;33m  %s \\u001B[0m \\n\\n\",cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([cljs.core.with_meta(new cljs.core.Symbol(null,\"desugar-expression\",\"desugar-expression\",374099700,null),new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"schema\",\"schema\",-1582001791),new cljs.core.Symbol(\"mbql.s\",\"FieldOrExpressionDef\",\"mbql.s/FieldOrExpressionDef\",-1851966074,null),new cljs.core.Keyword(null,\"doc\",\"doc\",1913296891),\"Rewrite various 'syntactic sugar' expressions like `:/` with more than two args into something simpler for drivers\\n  to compile.\"], null)),cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([error__50239__auto___64555], 0))], 0)),new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null,\"type\",\"type\",1174270348),new cljs.core.Keyword(\"schema.core\",\"error\",\"schema.core/error\",1991454308),new cljs.core.Keyword(null,\"schema\",\"schema\",-1582001791),input_schema63964_64544,new cljs.core.Keyword(null,\"value\",\"value\",305978217),args__50238__auto___64548,new cljs.core.Keyword(null,\"error\",\"error\",-978969032),error__50239__auto___64555], null));\n} else {\n}\n}\n} else {\n}\n\nvar o__50240__auto__ = (function (){var expression = G__63967;\nwhile(true){\nreturn metabase.mbql.util.desugar_divide_with_extra_args(expression);\nbreak;\n}\n})();\nif(cljs.core.truth_(validate__50237__auto__)){\nif(cljs.core.truth_(schema.core.fn_validator)){\nvar G__63974_64556 = new cljs.core.Keyword(null,\"output\",\"output\",-1105869043);\nvar G__63975_64557 = cljs.core.with_meta(new cljs.core.Symbol(null,\"desugar-expression\",\"desugar-expression\",374099700,null),new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"schema\",\"schema\",-1582001791),new cljs.core.Symbol(\"mbql.s\",\"FieldOrExpressionDef\",\"mbql.s/FieldOrExpressionDef\",-1851966074,null),new cljs.core.Keyword(null,\"doc\",\"doc\",1913296891),\"Rewrite various 'syntactic sugar' expressions like `:/` with more than two args into something simpler for drivers\\n  to compile.\"], null));\nvar G__63976_64558 = output_schema63962_64543;\nvar G__63977_64559 = cljs.core.deref(output_checker63966_64546);\nvar G__63978_64560 = o__50240__auto__;\n(schema.core.fn_validator.cljs$core$IFn$_invoke$arity$5 ? schema.core.fn_validator.cljs$core$IFn$_invoke$arity$5(G__63974_64556,G__63975_64557,G__63976_64558,G__63977_64559,G__63978_64560) : schema.core.fn_validator.call(null,G__63974_64556,G__63975_64557,G__63976_64558,G__63977_64559,G__63978_64560));\n} else {\nvar temp__5804__auto___64561 = (function (){var fexpr__63979 = cljs.core.deref(output_checker63966_64546);\nreturn (fexpr__63979.cljs$core$IFn$_invoke$arity$1 ? fexpr__63979.cljs$core$IFn$_invoke$arity$1(o__50240__auto__) : fexpr__63979.call(null,o__50240__auto__));\n})();\nif(cljs.core.truth_(temp__5804__auto___64561)){\nvar error__50239__auto___64562 = temp__5804__auto___64561;\nthrow cljs.core.ex_info.cljs$core$IFn$_invoke$arity$2(schema.utils.format_STAR_.cljs$core$IFn$_invoke$arity$variadic(\"Output of %s does not match schema: \\n\\n\\t \\u001B[0;33m  %s \\u001B[0m \\n\\n\",cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([cljs.core.with_meta(new cljs.core.Symbol(null,\"desugar-expression\",\"desugar-expression\",374099700,null),new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"schema\",\"schema\",-1582001791),new cljs.core.Symbol(\"mbql.s\",\"FieldOrExpressionDef\",\"mbql.s/FieldOrExpressionDef\",-1851966074,null),new cljs.core.Keyword(null,\"doc\",\"doc\",1913296891),\"Rewrite various 'syntactic sugar' expressions like `:/` with more than two args into something simpler for drivers\\n  to compile.\"], null)),cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([error__50239__auto___64562], 0))], 0)),new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null,\"type\",\"type\",1174270348),new cljs.core.Keyword(\"schema.core\",\"error\",\"schema.core/error\",1991454308),new cljs.core.Keyword(null,\"schema\",\"schema\",-1582001791),output_schema63962_64543,new cljs.core.Keyword(null,\"value\",\"value\",305978217),o__50240__auto__,new cljs.core.Keyword(null,\"error\",\"error\",-978969032),error__50239__auto___64562], null));\n} else {\n}\n}\n} else {\n}\n\nreturn o__50240__auto__;\n});\nschema.utils.declare_class_schema_BANG_(schema.utils.fn_schema_bearer(metabase.mbql.util.desugar_expression),schema.core.__GT_FnSchema(output_schema63962_64543,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [input_schema63964_64544], null)));\n\nmetabase.mbql.util.maybe_desugar_expression = (function metabase$mbql$util$maybe_desugar_expression(clause){\nvar G__63980 = clause;\nif(cljs.core.truth_(metabase.mbql.predicates.FieldOrExpressionDef_QMARK_(clause))){\nreturn metabase.mbql.util.desugar_expression(G__63980);\n} else {\nreturn G__63980;\n}\n});\nvar ufv63982_64563 = schema.utils.use_fn_validation;\nvar output_schema63981_64564 = metabase.mbql.schema.Filter;\nvar input_schema63983_64565 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [schema.core.one(metabase.mbql.schema.Filter,cljs.core.with_meta(new cljs.core.Symbol(null,\"filter-clause\",\"filter-clause\",-1237814159,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"schema\",\"schema\",-1582001791),new cljs.core.Symbol(\"mbql.s\",\"Filter\",\"mbql.s/Filter\",650308569,null)], null)))], null);\nvar input_checker63984_64566 = (new cljs.core.Delay((function (){\nreturn schema.core.checker(input_schema63983_64565);\n}),null));\nvar output_checker63985_64567 = (new cljs.core.Delay((function (){\nreturn schema.core.checker(output_schema63981_64564);\n}),null));\nvar ret__51869__auto___64568 = /**\n * Inputs: [filter-clause :- mbql.s/Filter]\n *   Returns: mbql.s/Filter\n * \n *   Rewrite various 'syntatic sugar' filter clauses like `:time-interval` and `:inside` as simpler, logically\n *   equivalent clauses. This can be used to simplify the number of filter clauses that need to be supported by anything\n *   that needs to enumerate all the possible filter types (such as driver query processor implementations, or the\n *   implementation [[negate-filter-clause]] below.)\n */\nmetabase.mbql.util.desugar_filter_clause = (function metabase$mbql$util$desugar_filter_clause(G__63986){\nvar validate__50237__auto__ = cljs.core.deref(ufv63982_64563);\nif(cljs.core.truth_(validate__50237__auto__)){\nvar args__50238__auto___64570 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [G__63986], null);\nif(cljs.core.truth_(schema.core.fn_validator)){\nvar G__63987_64571 = new cljs.core.Keyword(null,\"input\",\"input\",556931961);\nvar G__63988_64572 = cljs.core.with_meta(new cljs.core.Symbol(null,\"desugar-filter-clause\",\"desugar-filter-clause\",1980710942,null),new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"schema\",\"schema\",-1582001791),new cljs.core.Symbol(\"mbql.s\",\"Filter\",\"mbql.s/Filter\",650308569,null),new cljs.core.Keyword(null,\"doc\",\"doc\",1913296891),\"Rewrite various 'syntatic sugar' filter clauses like `:time-interval` and `:inside` as simpler, logically\\n  equivalent clauses. This can be used to simplify the number of filter clauses that need to be supported by anything\\n  that needs to enumerate all the possible filter types (such as driver query processor implementations, or the\\n  implementation [[negate-filter-clause]] below.)\"], null));\nvar G__63989_64573 = input_schema63983_64565;\nvar G__63990_64574 = cljs.core.deref(input_checker63984_64566);\nvar G__63991_64575 = args__50238__auto___64570;\n(schema.core.fn_validator.cljs$core$IFn$_invoke$arity$5 ? schema.core.fn_validator.cljs$core$IFn$_invoke$arity$5(G__63987_64571,G__63988_64572,G__63989_64573,G__63990_64574,G__63991_64575) : schema.core.fn_validator.call(null,G__63987_64571,G__63988_64572,G__63989_64573,G__63990_64574,G__63991_64575));\n} else {\nvar temp__5804__auto___64576 = (function (){var fexpr__63992 = cljs.core.deref(input_checker63984_64566);\nreturn (fexpr__63992.cljs$core$IFn$_invoke$arity$1 ? fexpr__63992.cljs$core$IFn$_invoke$arity$1(args__50238__auto___64570) : fexpr__63992.call(null,args__50238__auto___64570));\n})();\nif(cljs.core.truth_(temp__5804__auto___64576)){\nvar error__50239__auto___64577 = temp__5804__auto___64576;\nthrow cljs.core.ex_info.cljs$core$IFn$_invoke$arity$2(schema.utils.format_STAR_.cljs$core$IFn$_invoke$arity$variadic(\"Input to %s does not match schema: \\n\\n\\t \\u001B[0;33m  %s \\u001B[0m \\n\\n\",cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([cljs.core.with_meta(new cljs.core.Symbol(null,\"desugar-filter-clause\",\"desugar-filter-clause\",1980710942,null),new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"schema\",\"schema\",-1582001791),new cljs.core.Symbol(\"mbql.s\",\"Filter\",\"mbql.s/Filter\",650308569,null),new cljs.core.Keyword(null,\"doc\",\"doc\",1913296891),\"Rewrite various 'syntatic sugar' filter clauses like `:time-interval` and `:inside` as simpler, logically\\n  equivalent clauses. This can be used to simplify the number of filter clauses that need to be supported by anything\\n  that needs to enumerate all the possible filter types (such as driver query processor implementations, or the\\n  implementation [[negate-filter-clause]] below.)\"], null)),cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([error__50239__auto___64577], 0))], 0)),new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null,\"type\",\"type\",1174270348),new cljs.core.Keyword(\"schema.core\",\"error\",\"schema.core/error\",1991454308),new cljs.core.Keyword(null,\"schema\",\"schema\",-1582001791),input_schema63983_64565,new cljs.core.Keyword(null,\"value\",\"value\",305978217),args__50238__auto___64570,new cljs.core.Keyword(null,\"error\",\"error\",-978969032),error__50239__auto___64577], null));\n} else {\n}\n}\n} else {\n}\n\nvar o__50240__auto__ = (function (){var filter_clause = G__63986;\nwhile(true){\nreturn metabase.mbql.util.maybe_desugar_expression(metabase.mbql.util.desugar_temporal_extract(metabase.mbql.util.simplify_compound_filter(metabase.mbql.util.desugar_inside(metabase.mbql.util.desugar_is_empty_and_not_empty(metabase.mbql.util.desugar_is_null_and_not_null(metabase.mbql.util.desugar_time_interval(metabase.mbql.util.desugar_does_not_contain(metabase.mbql.util.desugar_equals_and_not_equals_with_extra_args(metabase.mbql.util.desugar_current_relative_datetime(filter_clause))))))))));\nbreak;\n}\n})();\nif(cljs.core.truth_(validate__50237__auto__)){\nif(cljs.core.truth_(schema.core.fn_validator)){\nvar G__63993_64578 = new cljs.core.Keyword(null,\"output\",\"output\",-1105869043);\nvar G__63994_64579 = cljs.core.with_meta(new cljs.core.Symbol(null,\"desugar-filter-clause\",\"desugar-filter-clause\",1980710942,null),new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"schema\",\"schema\",-1582001791),new cljs.core.Symbol(\"mbql.s\",\"Filter\",\"mbql.s/Filter\",650308569,null),new cljs.core.Keyword(null,\"doc\",\"doc\",1913296891),\"Rewrite various 'syntatic sugar' filter clauses like `:time-interval` and `:inside` as simpler, logically\\n  equivalent clauses. This can be used to simplify the number of filter clauses that need to be supported by anything\\n  that needs to enumerate all the possible filter types (such as driver query processor implementations, or the\\n  implementation [[negate-filter-clause]] below.)\"], null));\nvar G__63995_64580 = output_schema63981_64564;\nvar G__63996_64581 = cljs.core.deref(output_checker63985_64567);\nvar G__63997_64582 = o__50240__auto__;\n(schema.core.fn_validator.cljs$core$IFn$_invoke$arity$5 ? schema.core.fn_validator.cljs$core$IFn$_invoke$arity$5(G__63993_64578,G__63994_64579,G__63995_64580,G__63996_64581,G__63997_64582) : schema.core.fn_validator.call(null,G__63993_64578,G__63994_64579,G__63995_64580,G__63996_64581,G__63997_64582));\n} else {\nvar temp__5804__auto___64583 = (function (){var fexpr__63998 = cljs.core.deref(output_checker63985_64567);\nreturn (fexpr__63998.cljs$core$IFn$_invoke$arity$1 ? fexpr__63998.cljs$core$IFn$_invoke$arity$1(o__50240__auto__) : fexpr__63998.call(null,o__50240__auto__));\n})();\nif(cljs.core.truth_(temp__5804__auto___64583)){\nvar error__50239__auto___64584 = temp__5804__auto___64583;\nthrow cljs.core.ex_info.cljs$core$IFn$_invoke$arity$2(schema.utils.format_STAR_.cljs$core$IFn$_invoke$arity$variadic(\"Output of %s does not match schema: \\n\\n\\t \\u001B[0;33m  %s \\u001B[0m \\n\\n\",cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([cljs.core.with_meta(new cljs.core.Symbol(null,\"desugar-filter-clause\",\"desugar-filter-clause\",1980710942,null),new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"schema\",\"schema\",-1582001791),new cljs.core.Symbol(\"mbql.s\",\"Filter\",\"mbql.s/Filter\",650308569,null),new cljs.core.Keyword(null,\"doc\",\"doc\",1913296891),\"Rewrite various 'syntatic sugar' filter clauses like `:time-interval` and `:inside` as simpler, logically\\n  equivalent clauses. This can be used to simplify the number of filter clauses that need to be supported by anything\\n  that needs to enumerate all the possible filter types (such as driver query processor implementations, or the\\n  implementation [[negate-filter-clause]] below.)\"], null)),cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([error__50239__auto___64584], 0))], 0)),new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null,\"type\",\"type\",1174270348),new cljs.core.Keyword(\"schema.core\",\"error\",\"schema.core/error\",1991454308),new cljs.core.Keyword(null,\"schema\",\"schema\",-1582001791),output_schema63981_64564,new cljs.core.Keyword(null,\"value\",\"value\",305978217),o__50240__auto__,new cljs.core.Keyword(null,\"error\",\"error\",-978969032),error__50239__auto___64584], null));\n} else {\n}\n}\n} else {\n}\n\nreturn o__50240__auto__;\n});\nschema.utils.declare_class_schema_BANG_(schema.utils.fn_schema_bearer(metabase.mbql.util.desugar_filter_clause),schema.core.__GT_FnSchema(output_schema63981_64564,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [input_schema63983_64565], null)));\n\nif((typeof metabase !== 'undefined') && (typeof metabase.mbql !== 'undefined') && (typeof metabase.mbql.util !== 'undefined') && (typeof metabase.mbql.util.negate_STAR_ !== 'undefined')){\n} else {\nmetabase.mbql.util.negate_STAR_ = (function (){var method_table__5642__auto__ = cljs.core.atom.cljs$core$IFn$_invoke$arity$1(cljs.core.PersistentArrayMap.EMPTY);\nvar prefer_table__5643__auto__ = cljs.core.atom.cljs$core$IFn$_invoke$arity$1(cljs.core.PersistentArrayMap.EMPTY);\nvar method_cache__5644__auto__ = cljs.core.atom.cljs$core$IFn$_invoke$arity$1(cljs.core.PersistentArrayMap.EMPTY);\nvar cached_hierarchy__5645__auto__ = cljs.core.atom.cljs$core$IFn$_invoke$arity$1(cljs.core.PersistentArrayMap.EMPTY);\nvar hierarchy__5646__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$3(cljs.core.PersistentArrayMap.EMPTY,new cljs.core.Keyword(null,\"hierarchy\",\"hierarchy\",-1053470341),(function (){var fexpr__63999 = cljs.core.get_global_hierarchy;\nreturn (fexpr__63999.cljs$core$IFn$_invoke$arity$0 ? fexpr__63999.cljs$core$IFn$_invoke$arity$0() : fexpr__63999.call(null));\n})());\nreturn (new cljs.core.MultiFn(cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(\"metabase.mbql.util\",\"negate*\"),cljs.core.first,new cljs.core.Keyword(null,\"default\",\"default\",-1987822328),hierarchy__5646__auto__,method_table__5642__auto__,prefer_table__5643__auto__,method_cache__5644__auto__,cached_hierarchy__5645__auto__));\n})();\n}\nmetabase.mbql.util.negate_STAR_.cljs$core$IMultiFn$_add_method$arity$3(null,new cljs.core.Keyword(null,\"not\",\"not\",-595976884),(function (p__64000){\nvar vec__64001 = p__64000;\nvar _ = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__64001,(0),null);\nvar subclause = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__64001,(1),null);\nreturn subclause;\n}));\nmetabase.mbql.util.negate_STAR_.cljs$core$IMultiFn$_add_method$arity$3(null,new cljs.core.Keyword(null,\"and\",\"and\",-971899817),(function (p__64004){\nvar vec__64005 = p__64004;\nvar seq__64006 = cljs.core.seq(vec__64005);\nvar first__64007 = cljs.core.first(seq__64006);\nvar seq__64006__$1 = cljs.core.next(seq__64006);\nvar _ = first__64007;\nvar subclauses = seq__64006__$1;\nreturn cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"or\",\"or\",235744169)], null),cljs.core.map.cljs$core$IFn$_invoke$arity$2(metabase.mbql.util.negate_STAR_,subclauses));\n}));\nmetabase.mbql.util.negate_STAR_.cljs$core$IMultiFn$_add_method$arity$3(null,new cljs.core.Keyword(null,\"or\",\"or\",235744169),(function (p__64008){\nvar vec__64009 = p__64008;\nvar seq__64010 = cljs.core.seq(vec__64009);\nvar first__64011 = cljs.core.first(seq__64010);\nvar seq__64010__$1 = cljs.core.next(seq__64010);\nvar _ = first__64011;\nvar subclauses = seq__64010__$1;\nreturn cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"and\",\"and\",-971899817)], null),cljs.core.map.cljs$core$IFn$_invoke$arity$2(metabase.mbql.util.negate_STAR_,subclauses));\n}));\nmetabase.mbql.util.negate_STAR_.cljs$core$IMultiFn$_add_method$arity$3(null,new cljs.core.Keyword(null,\"=\",\"=\",1152933628),(function (p__64012){\nvar vec__64013 = p__64012;\nvar _ = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__64013,(0),null);\nvar field = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__64013,(1),null);\nvar value = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__64013,(2),null);\nreturn new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"!=\",\"!=\",-1841737356),field,value], null);\n}));\nmetabase.mbql.util.negate_STAR_.cljs$core$IMultiFn$_add_method$arity$3(null,new cljs.core.Keyword(null,\"!=\",\"!=\",-1841737356),(function (p__64016){\nvar vec__64017 = p__64016;\nvar _ = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__64017,(0),null);\nvar field = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__64017,(1),null);\nvar value = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__64017,(2),null);\nreturn new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"=\",\"=\",1152933628),field,value], null);\n}));\nmetabase.mbql.util.negate_STAR_.cljs$core$IMultiFn$_add_method$arity$3(null,new cljs.core.Keyword(null,\">\",\">\",-555517146),(function (p__64020){\nvar vec__64021 = p__64020;\nvar _ = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__64021,(0),null);\nvar field = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__64021,(1),null);\nvar value = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__64021,(2),null);\nreturn new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"<=\",\"<=\",-395636158),field,value], null);\n}));\nmetabase.mbql.util.negate_STAR_.cljs$core$IMultiFn$_add_method$arity$3(null,new cljs.core.Keyword(null,\"<\",\"<\",-646864291),(function (p__64024){\nvar vec__64025 = p__64024;\nvar _ = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__64025,(0),null);\nvar field = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__64025,(1),null);\nvar value = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__64025,(2),null);\nreturn new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\">=\",\">=\",-623615505),field,value], null);\n}));\nmetabase.mbql.util.negate_STAR_.cljs$core$IMultiFn$_add_method$arity$3(null,new cljs.core.Keyword(null,\">=\",\">=\",-623615505),(function (p__64028){\nvar vec__64029 = p__64028;\nvar _ = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__64029,(0),null);\nvar field = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__64029,(1),null);\nvar value = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__64029,(2),null);\nreturn new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"<\",\"<\",-646864291),field,value], null);\n}));\nmetabase.mbql.util.negate_STAR_.cljs$core$IMultiFn$_add_method$arity$3(null,new cljs.core.Keyword(null,\"<=\",\"<=\",-395636158),(function (p__64032){\nvar vec__64033 = p__64032;\nvar _ = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__64033,(0),null);\nvar field = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__64033,(1),null);\nvar value = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__64033,(2),null);\nreturn new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\">\",\">\",-555517146),field,value], null);\n}));\nmetabase.mbql.util.negate_STAR_.cljs$core$IMultiFn$_add_method$arity$3(null,new cljs.core.Keyword(null,\"between\",\"between\",1131099276),(function (p__64036){\nvar vec__64037 = p__64036;\nvar _ = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__64037,(0),null);\nvar field = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__64037,(1),null);\nvar min = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__64037,(2),null);\nvar max = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__64037,(3),null);\nreturn new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"or\",\"or\",235744169),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"<\",\"<\",-646864291),field,min], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\">\",\">\",-555517146),field,max], null)], null);\n}));\nmetabase.mbql.util.negate_STAR_.cljs$core$IMultiFn$_add_method$arity$3(null,new cljs.core.Keyword(null,\"contains\",\"contains\",676899812),(function (clause){\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"not\",\"not\",-595976884),clause], null);\n}));\nmetabase.mbql.util.negate_STAR_.cljs$core$IMultiFn$_add_method$arity$3(null,new cljs.core.Keyword(null,\"starts-with\",\"starts-with\",366503009),(function (clause){\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"not\",\"not\",-595976884),clause], null);\n}));\nmetabase.mbql.util.negate_STAR_.cljs$core$IMultiFn$_add_method$arity$3(null,new cljs.core.Keyword(null,\"ends-with\",\"ends-with\",-456791011),(function (clause){\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"not\",\"not\",-595976884),clause], null);\n}));\nvar ufv64041_64586 = schema.utils.use_fn_validation;\nvar output_schema64040_64587 = metabase.mbql.schema.Filter;\nvar input_schema64042_64588 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [schema.core.one(metabase.mbql.schema.Filter,cljs.core.with_meta(new cljs.core.Symbol(null,\"filter-clause\",\"filter-clause\",-1237814159,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"schema\",\"schema\",-1582001791),new cljs.core.Symbol(\"mbql.s\",\"Filter\",\"mbql.s/Filter\",650308569,null)], null)))], null);\nvar input_checker64043_64589 = (new cljs.core.Delay((function (){\nreturn schema.core.checker(input_schema64042_64588);\n}),null));\nvar output_checker64044_64590 = (new cljs.core.Delay((function (){\nreturn schema.core.checker(output_schema64040_64587);\n}),null));\nvar ret__51869__auto___64591 = /**\n * Inputs: [filter-clause :- mbql.s/Filter]\n *   Returns: mbql.s/Filter\n * \n *   Return the logical compliment of an MBQL filter clause, generally without using `:not` (except for the string\n *   filter clause types). Useful for generating highly optimized filter clauses and for drivers that do not support\n *   top-level `:not` filter clauses.\n */\nmetabase.mbql.util.negate_filter_clause = (function metabase$mbql$util$negate_filter_clause(G__64045){\nvar validate__50237__auto__ = cljs.core.deref(ufv64041_64586);\nif(cljs.core.truth_(validate__50237__auto__)){\nvar args__50238__auto___64592 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [G__64045], null);\nif(cljs.core.truth_(schema.core.fn_validator)){\nvar G__64046_64593 = new cljs.core.Keyword(null,\"input\",\"input\",556931961);\nvar G__64047_64594 = cljs.core.with_meta(new cljs.core.Symbol(null,\"negate-filter-clause\",\"negate-filter-clause\",1540259292,null),new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"schema\",\"schema\",-1582001791),new cljs.core.Symbol(\"mbql.s\",\"Filter\",\"mbql.s/Filter\",650308569,null),new cljs.core.Keyword(null,\"doc\",\"doc\",1913296891),\"Return the logical compliment of an MBQL filter clause, generally without using `:not` (except for the string\\n  filter clause types). Useful for generating highly optimized filter clauses and for drivers that do not support\\n  top-level `:not` filter clauses.\"], null));\nvar G__64048_64595 = input_schema64042_64588;\nvar G__64049_64596 = cljs.core.deref(input_checker64043_64589);\nvar G__64050_64597 = args__50238__auto___64592;\n(schema.core.fn_validator.cljs$core$IFn$_invoke$arity$5 ? schema.core.fn_validator.cljs$core$IFn$_invoke$arity$5(G__64046_64593,G__64047_64594,G__64048_64595,G__64049_64596,G__64050_64597) : schema.core.fn_validator.call(null,G__64046_64593,G__64047_64594,G__64048_64595,G__64049_64596,G__64050_64597));\n} else {\nvar temp__5804__auto___64598 = (function (){var fexpr__64051 = cljs.core.deref(input_checker64043_64589);\nreturn (fexpr__64051.cljs$core$IFn$_invoke$arity$1 ? fexpr__64051.cljs$core$IFn$_invoke$arity$1(args__50238__auto___64592) : fexpr__64051.call(null,args__50238__auto___64592));\n})();\nif(cljs.core.truth_(temp__5804__auto___64598)){\nvar error__50239__auto___64599 = temp__5804__auto___64598;\nthrow cljs.core.ex_info.cljs$core$IFn$_invoke$arity$2(schema.utils.format_STAR_.cljs$core$IFn$_invoke$arity$variadic(\"Input to %s does not match schema: \\n\\n\\t \\u001B[0;33m  %s \\u001B[0m \\n\\n\",cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([cljs.core.with_meta(new cljs.core.Symbol(null,\"negate-filter-clause\",\"negate-filter-clause\",1540259292,null),new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"schema\",\"schema\",-1582001791),new cljs.core.Symbol(\"mbql.s\",\"Filter\",\"mbql.s/Filter\",650308569,null),new cljs.core.Keyword(null,\"doc\",\"doc\",1913296891),\"Return the logical compliment of an MBQL filter clause, generally without using `:not` (except for the string\\n  filter clause types). Useful for generating highly optimized filter clauses and for drivers that do not support\\n  top-level `:not` filter clauses.\"], null)),cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([error__50239__auto___64599], 0))], 0)),new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null,\"type\",\"type\",1174270348),new cljs.core.Keyword(\"schema.core\",\"error\",\"schema.core/error\",1991454308),new cljs.core.Keyword(null,\"schema\",\"schema\",-1582001791),input_schema64042_64588,new cljs.core.Keyword(null,\"value\",\"value\",305978217),args__50238__auto___64592,new cljs.core.Keyword(null,\"error\",\"error\",-978969032),error__50239__auto___64599], null));\n} else {\n}\n}\n} else {\n}\n\nvar o__50240__auto__ = (function (){var filter_clause = G__64045;\nwhile(true){\nreturn metabase.mbql.util.simplify_compound_filter(metabase.mbql.util.negate_STAR_.cljs$core$IFn$_invoke$arity$1(metabase.mbql.util.desugar_filter_clause(filter_clause)));\nbreak;\n}\n})();\nif(cljs.core.truth_(validate__50237__auto__)){\nif(cljs.core.truth_(schema.core.fn_validator)){\nvar G__64052_64601 = new cljs.core.Keyword(null,\"output\",\"output\",-1105869043);\nvar G__64053_64602 = cljs.core.with_meta(new cljs.core.Symbol(null,\"negate-filter-clause\",\"negate-filter-clause\",1540259292,null),new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"schema\",\"schema\",-1582001791),new cljs.core.Symbol(\"mbql.s\",\"Filter\",\"mbql.s/Filter\",650308569,null),new cljs.core.Keyword(null,\"doc\",\"doc\",1913296891),\"Return the logical compliment of an MBQL filter clause, generally without using `:not` (except for the string\\n  filter clause types). Useful for generating highly optimized filter clauses and for drivers that do not support\\n  top-level `:not` filter clauses.\"], null));\nvar G__64054_64603 = output_schema64040_64587;\nvar G__64055_64604 = cljs.core.deref(output_checker64044_64590);\nvar G__64056_64605 = o__50240__auto__;\n(schema.core.fn_validator.cljs$core$IFn$_invoke$arity$5 ? schema.core.fn_validator.cljs$core$IFn$_invoke$arity$5(G__64052_64601,G__64053_64602,G__64054_64603,G__64055_64604,G__64056_64605) : schema.core.fn_validator.call(null,G__64052_64601,G__64053_64602,G__64054_64603,G__64055_64604,G__64056_64605));\n} else {\nvar temp__5804__auto___64606 = (function (){var fexpr__64057 = cljs.core.deref(output_checker64044_64590);\nreturn (fexpr__64057.cljs$core$IFn$_invoke$arity$1 ? fexpr__64057.cljs$core$IFn$_invoke$arity$1(o__50240__auto__) : fexpr__64057.call(null,o__50240__auto__));\n})();\nif(cljs.core.truth_(temp__5804__auto___64606)){\nvar error__50239__auto___64607 = temp__5804__auto___64606;\nthrow cljs.core.ex_info.cljs$core$IFn$_invoke$arity$2(schema.utils.format_STAR_.cljs$core$IFn$_invoke$arity$variadic(\"Output of %s does not match schema: \\n\\n\\t \\u001B[0;33m  %s \\u001B[0m \\n\\n\",cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([cljs.core.with_meta(new cljs.core.Symbol(null,\"negate-filter-clause\",\"negate-filter-clause\",1540259292,null),new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"schema\",\"schema\",-1582001791),new cljs.core.Symbol(\"mbql.s\",\"Filter\",\"mbql.s/Filter\",650308569,null),new cljs.core.Keyword(null,\"doc\",\"doc\",1913296891),\"Return the logical compliment of an MBQL filter clause, generally without using `:not` (except for the string\\n  filter clause types). Useful for generating highly optimized filter clauses and for drivers that do not support\\n  top-level `:not` filter clauses.\"], null)),cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([error__50239__auto___64607], 0))], 0)),new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null,\"type\",\"type\",1174270348),new cljs.core.Keyword(\"schema.core\",\"error\",\"schema.core/error\",1991454308),new cljs.core.Keyword(null,\"schema\",\"schema\",-1582001791),output_schema64040_64587,new cljs.core.Keyword(null,\"value\",\"value\",305978217),o__50240__auto__,new cljs.core.Keyword(null,\"error\",\"error\",-978969032),error__50239__auto___64607], null));\n} else {\n}\n}\n} else {\n}\n\nreturn o__50240__auto__;\n});\nschema.utils.declare_class_schema_BANG_(schema.utils.fn_schema_bearer(metabase.mbql.util.negate_filter_clause),schema.core.__GT_FnSchema(output_schema64040_64587,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [input_schema64042_64588], null)));\n\nvar ufv64059_64608 = schema.utils.use_fn_validation;\nvar output_schema64058_64609 = schema.core.maybe(metabase.mbql.schema.helpers.IntGreaterThanZero);\nvar input_schema64060_64610 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [schema.core.one(schema.core.Any,new cljs.core.Symbol(null,\"arg0\",\"arg0\",-1024593414,null))], null);\nvar input_checker64061_64611 = (new cljs.core.Delay((function (){\nreturn schema.core.checker(input_schema64060_64610);\n}),null));\nvar output_checker64062_64612 = (new cljs.core.Delay((function (){\nreturn schema.core.checker(output_schema64058_64609);\n}),null));\nvar ret__51869__auto___64613 = /**\n * Inputs: [{{source-table-id :source-table, source-query :source-query} :query, query-type :type, :as query}]\n *   Returns: (s/maybe schema.helpers/IntGreaterThanZero)\n * \n *   Return the source Table ID associated with `query`, if applicable; handles nested queries as well. If `query` is\n *   `nil`, returns `nil`.\n * \n *   Throws an Exception when it encounters a unresolved source query (i.e., the `:source-table \"card__id\"`\n *   form), because it cannot return an accurate result for a query that has not yet been preprocessed.\n */\nmetabase.mbql.util.query__GT_source_table_id = (function metabase$mbql$util$query__GT_source_table_id(G__64063){\nvar validate__50237__auto__ = cljs.core.deref(ufv64059_64608);\nif(cljs.core.truth_(validate__50237__auto__)){\nvar args__50238__auto___64614 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [G__64063], null);\nif(cljs.core.truth_(schema.core.fn_validator)){\nvar G__64064_64615 = new cljs.core.Keyword(null,\"input\",\"input\",556931961);\nvar G__64065_64616 = cljs.core.with_meta(new cljs.core.Symbol(null,\"query->source-table-id\",\"query->source-table-id\",246142827,null),new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null,\"schema\",\"schema\",-1582001791),cljs.core.list(new cljs.core.Symbol(\"s\",\"maybe\",\"s/maybe\",1326133944,null),new cljs.core.Symbol(\"schema.helpers\",\"IntGreaterThanZero\",\"schema.helpers/IntGreaterThanZero\",-728908174,null)),new cljs.core.Keyword(null,\"arglists\",\"arglists\",1661989754),cljs.core.list(new cljs.core.Symbol(null,\"quote\",\"quote\",1377916282,null),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,\"outer-query\",\"outer-query\",-395069361,null)], null))),new cljs.core.Keyword(null,\"doc\",\"doc\",1913296891),\"Return the source Table ID associated with `query`, if applicable; handles nested queries as well. If `query` is\\n  `nil`, returns `nil`.\\n\\n  Throws an Exception when it encounters a unresolved source query (i.e., the `:source-table \\\"card__id\\\"`\\n  form), because it cannot return an accurate result for a query that has not yet been preprocessed.\"], null));\nvar G__64066_64617 = input_schema64060_64610;\nvar G__64067_64618 = cljs.core.deref(input_checker64061_64611);\nvar G__64068_64619 = args__50238__auto___64614;\n(schema.core.fn_validator.cljs$core$IFn$_invoke$arity$5 ? schema.core.fn_validator.cljs$core$IFn$_invoke$arity$5(G__64064_64615,G__64065_64616,G__64066_64617,G__64067_64618,G__64068_64619) : schema.core.fn_validator.call(null,G__64064_64615,G__64065_64616,G__64066_64617,G__64067_64618,G__64068_64619));\n} else {\nvar temp__5804__auto___64620 = (function (){var fexpr__64069 = cljs.core.deref(input_checker64061_64611);\nreturn (fexpr__64069.cljs$core$IFn$_invoke$arity$1 ? fexpr__64069.cljs$core$IFn$_invoke$arity$1(args__50238__auto___64614) : fexpr__64069.call(null,args__50238__auto___64614));\n})();\nif(cljs.core.truth_(temp__5804__auto___64620)){\nvar error__50239__auto___64621 = temp__5804__auto___64620;\nthrow cljs.core.ex_info.cljs$core$IFn$_invoke$arity$2(schema.utils.format_STAR_.cljs$core$IFn$_invoke$arity$variadic(\"Input to %s does not match schema: \\n\\n\\t \\u001B[0;33m  %s \\u001B[0m \\n\\n\",cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([cljs.core.with_meta(new cljs.core.Symbol(null,\"query->source-table-id\",\"query->source-table-id\",246142827,null),new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null,\"schema\",\"schema\",-1582001791),cljs.core.list(new cljs.core.Symbol(\"s\",\"maybe\",\"s/maybe\",1326133944,null),new cljs.core.Symbol(\"schema.helpers\",\"IntGreaterThanZero\",\"schema.helpers/IntGreaterThanZero\",-728908174,null)),new cljs.core.Keyword(null,\"arglists\",\"arglists\",1661989754),cljs.core.list(new cljs.core.Symbol(null,\"quote\",\"quote\",1377916282,null),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,\"outer-query\",\"outer-query\",-395069361,null)], null))),new cljs.core.Keyword(null,\"doc\",\"doc\",1913296891),\"Return the source Table ID associated with `query`, if applicable; handles nested queries as well. If `query` is\\n  `nil`, returns `nil`.\\n\\n  Throws an Exception when it encounters a unresolved source query (i.e., the `:source-table \\\"card__id\\\"`\\n  form), because it cannot return an accurate result for a query that has not yet been preprocessed.\"], null)),cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([error__50239__auto___64621], 0))], 0)),new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null,\"type\",\"type\",1174270348),new cljs.core.Keyword(\"schema.core\",\"error\",\"schema.core/error\",1991454308),new cljs.core.Keyword(null,\"schema\",\"schema\",-1582001791),input_schema64060_64610,new cljs.core.Keyword(null,\"value\",\"value\",305978217),args__50238__auto___64614,new cljs.core.Keyword(null,\"error\",\"error\",-978969032),error__50239__auto___64621], null));\n} else {\n}\n}\n} else {\n}\n\nvar o__50240__auto__ = (function (){var G__64072 = G__64063;\nvar map__64073 = G__64072;\nvar map__64073__$1 = cljs.core.__destructure_map(map__64073);\nvar query = map__64073__$1;\nvar map__64074 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__64073__$1,new cljs.core.Keyword(null,\"query\",\"query\",-1288509510));\nvar map__64074__$1 = cljs.core.__destructure_map(map__64074);\nvar source_table_id = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__64074__$1,new cljs.core.Keyword(null,\"source-table\",\"source-table\",-225307692));\nvar source_query = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__64074__$1,new cljs.core.Keyword(null,\"source-query\",\"source-query\",198004422));\nvar query_type = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__64073__$1,new cljs.core.Keyword(null,\"type\",\"type\",1174270348));\nvar G__64072__$1 = G__64072;\nwhile(true){\nvar map__64075 = G__64072__$1;\nvar map__64075__$1 = cljs.core.__destructure_map(map__64075);\nvar query__$1 = map__64075__$1;\nvar map__64076 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__64075__$1,new cljs.core.Keyword(null,\"query\",\"query\",-1288509510));\nvar map__64076__$1 = cljs.core.__destructure_map(map__64076);\nvar source_table_id__$1 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__64076__$1,new cljs.core.Keyword(null,\"source-table\",\"source-table\",-225307692));\nvar source_query__$1 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__64076__$1,new cljs.core.Keyword(null,\"source-query\",\"source-query\",198004422));\nvar query_type__$1 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__64075__$1,new cljs.core.Keyword(null,\"type\",\"type\",1174270348));\nif(cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2(query_type__$1,new cljs.core.Keyword(null,\"query\",\"query\",-1288509510))){\nreturn null;\n} else {\nif(cljs.core.truth_((function (){var and__5043__auto__ = (source_table_id__$1 == null);\nif(and__5043__auto__){\nvar and__5043__auto____$1 = source_query__$1;\nif(cljs.core.truth_(and__5043__auto____$1)){\nreturn new cljs.core.Keyword(null,\"native\",\"native\",-613060878).cljs$core$IFn$_invoke$arity$1(source_query__$1);\n} else {\nreturn and__5043__auto____$1;\n}\n} else {\nreturn and__5043__auto__;\n}\n})())){\nreturn null;\n} else {\nif(cljs.core.truth_((function (){var and__5043__auto__ = (source_table_id__$1 == null);\nif(and__5043__auto__){\nreturn source_query__$1;\n} else {\nreturn and__5043__auto__;\n}\n})())){\nvar G__64622 = cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(query__$1,new cljs.core.Keyword(null,\"query\",\"query\",-1288509510),source_query__$1);\nG__64072__$1 = G__64622;\ncontinue;\n} else {\nif(cljs.core.truth_(cljs.core.every_pred.cljs$core$IFn$_invoke$arity$2(cljs.core.string_QMARK_,cljs.core.partial.cljs$core$IFn$_invoke$arity$2(cljs.core.re_matches,metabase.mbql.schema.source_table_card_id_regex))(source_table_id__$1))){\nthrow cljs.core.ex_info.cljs$core$IFn$_invoke$arity$2(metabase.shared.util.i18n.js_i18n(\"Error: query''s source query has not been resolved. You probably need to `preprocess` the query first.\"),cljs.core.PersistentArrayMap.EMPTY);\n} else {\nreturn source_table_id__$1;\n\n}\n}\n}\n}\nbreak;\n}\n})();\nif(cljs.core.truth_(validate__50237__auto__)){\nif(cljs.core.truth_(schema.core.fn_validator)){\nvar G__64077_64624 = new cljs.core.Keyword(null,\"output\",\"output\",-1105869043);\nvar G__64078_64625 = cljs.core.with_meta(new cljs.core.Symbol(null,\"query->source-table-id\",\"query->source-table-id\",246142827,null),new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null,\"schema\",\"schema\",-1582001791),cljs.core.list(new cljs.core.Symbol(\"s\",\"maybe\",\"s/maybe\",1326133944,null),new cljs.core.Symbol(\"schema.helpers\",\"IntGreaterThanZero\",\"schema.helpers/IntGreaterThanZero\",-728908174,null)),new cljs.core.Keyword(null,\"arglists\",\"arglists\",1661989754),cljs.core.list(new cljs.core.Symbol(null,\"quote\",\"quote\",1377916282,null),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,\"outer-query\",\"outer-query\",-395069361,null)], null))),new cljs.core.Keyword(null,\"doc\",\"doc\",1913296891),\"Return the source Table ID associated with `query`, if applicable; handles nested queries as well. If `query` is\\n  `nil`, returns `nil`.\\n\\n  Throws an Exception when it encounters a unresolved source query (i.e., the `:source-table \\\"card__id\\\"`\\n  form), because it cannot return an accurate result for a query that has not yet been preprocessed.\"], null));\nvar G__64079_64626 = output_schema64058_64609;\nvar G__64080_64627 = cljs.core.deref(output_checker64062_64612);\nvar G__64081_64628 = o__50240__auto__;\n(schema.core.fn_validator.cljs$core$IFn$_invoke$arity$5 ? schema.core.fn_validator.cljs$core$IFn$_invoke$arity$5(G__64077_64624,G__64078_64625,G__64079_64626,G__64080_64627,G__64081_64628) : schema.core.fn_validator.call(null,G__64077_64624,G__64078_64625,G__64079_64626,G__64080_64627,G__64081_64628));\n} else {\nvar temp__5804__auto___64630 = (function (){var fexpr__64082 = cljs.core.deref(output_checker64062_64612);\nreturn (fexpr__64082.cljs$core$IFn$_invoke$arity$1 ? fexpr__64082.cljs$core$IFn$_invoke$arity$1(o__50240__auto__) : fexpr__64082.call(null,o__50240__auto__));\n})();\nif(cljs.core.truth_(temp__5804__auto___64630)){\nvar error__50239__auto___64632 = temp__5804__auto___64630;\nthrow cljs.core.ex_info.cljs$core$IFn$_invoke$arity$2(schema.utils.format_STAR_.cljs$core$IFn$_invoke$arity$variadic(\"Output of %s does not match schema: \\n\\n\\t \\u001B[0;33m  %s \\u001B[0m \\n\\n\",cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([cljs.core.with_meta(new cljs.core.Symbol(null,\"query->source-table-id\",\"query->source-table-id\",246142827,null),new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null,\"schema\",\"schema\",-1582001791),cljs.core.list(new cljs.core.Symbol(\"s\",\"maybe\",\"s/maybe\",1326133944,null),new cljs.core.Symbol(\"schema.helpers\",\"IntGreaterThanZero\",\"schema.helpers/IntGreaterThanZero\",-728908174,null)),new cljs.core.Keyword(null,\"arglists\",\"arglists\",1661989754),cljs.core.list(new cljs.core.Symbol(null,\"quote\",\"quote\",1377916282,null),cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,\"outer-query\",\"outer-query\",-395069361,null)], null))),new cljs.core.Keyword(null,\"doc\",\"doc\",1913296891),\"Return the source Table ID associated with `query`, if applicable; handles nested queries as well. If `query` is\\n  `nil`, returns `nil`.\\n\\n  Throws an Exception when it encounters a unresolved source query (i.e., the `:source-table \\\"card__id\\\"`\\n  form), because it cannot return an accurate result for a query that has not yet been preprocessed.\"], null)),cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([error__50239__auto___64632], 0))], 0)),new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null,\"type\",\"type\",1174270348),new cljs.core.Keyword(\"schema.core\",\"error\",\"schema.core/error\",1991454308),new cljs.core.Keyword(null,\"schema\",\"schema\",-1582001791),output_schema64058_64609,new cljs.core.Keyword(null,\"value\",\"value\",305978217),o__50240__auto__,new cljs.core.Keyword(null,\"error\",\"error\",-978969032),error__50239__auto___64632], null));\n} else {\n}\n}\n} else {\n}\n\nreturn o__50240__auto__;\n});\nschema.utils.declare_class_schema_BANG_(schema.utils.fn_schema_bearer(metabase.mbql.util.query__GT_source_table_id),schema.core.__GT_FnSchema(output_schema64058_64609,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [input_schema64060_64610], null)));\n\nvar ufv64084_64633 = schema.utils.use_fn_validation;\nvar output_schema64083_64634 = schema.core.maybe(metabase.mbql.schema.helpers.IntGreaterThanZero);\nvar input_schema64085_64635 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [schema.core.one(schema.core.Any,cljs.core.with_meta(new cljs.core.Symbol(null,\"join\",\"join\",881669637,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"schema\",\"schema\",-1582001791),new cljs.core.Symbol(\"schema.core\",\"Any\",\"schema.core/Any\",-1891898271,null)], null)))], null);\nvar input_checker64086_64636 = (new cljs.core.Delay((function (){\nreturn schema.core.checker(input_schema64085_64635);\n}),null));\nvar output_checker64087_64637 = (new cljs.core.Delay((function (){\nreturn schema.core.checker(output_schema64083_64634);\n}),null));\nvar ret__51869__auto___64638 = /**\n * Inputs: [join]\n *   Returns: (s/maybe schema.helpers/IntGreaterThanZero)\n * \n *   Like `query->source-table-id`, but for a join.\n */\nmetabase.mbql.util.join__GT_source_table_id = (function metabase$mbql$util$join__GT_source_table_id(G__64088){\nvar validate__50237__auto__ = cljs.core.deref(ufv64084_64633);\nif(cljs.core.truth_(validate__50237__auto__)){\nvar args__50238__auto___64639 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [G__64088], null);\nif(cljs.core.truth_(schema.core.fn_validator)){\nvar G__64089_64640 = new cljs.core.Keyword(null,\"input\",\"input\",556931961);\nvar G__64090_64641 = cljs.core.with_meta(new cljs.core.Symbol(null,\"join->source-table-id\",\"join->source-table-id\",1032348273,null),new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"schema\",\"schema\",-1582001791),cljs.core.list(new cljs.core.Symbol(\"s\",\"maybe\",\"s/maybe\",1326133944,null),new cljs.core.Symbol(\"schema.helpers\",\"IntGreaterThanZero\",\"schema.helpers/IntGreaterThanZero\",-728908174,null)),new cljs.core.Keyword(null,\"doc\",\"doc\",1913296891),\"Like `query->source-table-id`, but for a join.\"], null));\nvar G__64091_64642 = input_schema64085_64635;\nvar G__64092_64643 = cljs.core.deref(input_checker64086_64636);\nvar G__64093_64644 = args__50238__auto___64639;\n(schema.core.fn_validator.cljs$core$IFn$_invoke$arity$5 ? schema.core.fn_validator.cljs$core$IFn$_invoke$arity$5(G__64089_64640,G__64090_64641,G__64091_64642,G__64092_64643,G__64093_64644) : schema.core.fn_validator.call(null,G__64089_64640,G__64090_64641,G__64091_64642,G__64092_64643,G__64093_64644));\n} else {\nvar temp__5804__auto___64645 = (function (){var fexpr__64094 = cljs.core.deref(input_checker64086_64636);\nreturn (fexpr__64094.cljs$core$IFn$_invoke$arity$1 ? fexpr__64094.cljs$core$IFn$_invoke$arity$1(args__50238__auto___64639) : fexpr__64094.call(null,args__50238__auto___64639));\n})();\nif(cljs.core.truth_(temp__5804__auto___64645)){\nvar error__50239__auto___64646 = temp__5804__auto___64645;\nthrow cljs.core.ex_info.cljs$core$IFn$_invoke$arity$2(schema.utils.format_STAR_.cljs$core$IFn$_invoke$arity$variadic(\"Input to %s does not match schema: \\n\\n\\t \\u001B[0;33m  %s \\u001B[0m \\n\\n\",cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([cljs.core.with_meta(new cljs.core.Symbol(null,\"join->source-table-id\",\"join->source-table-id\",1032348273,null),new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"schema\",\"schema\",-1582001791),cljs.core.list(new cljs.core.Symbol(\"s\",\"maybe\",\"s/maybe\",1326133944,null),new cljs.core.Symbol(\"schema.helpers\",\"IntGreaterThanZero\",\"schema.helpers/IntGreaterThanZero\",-728908174,null)),new cljs.core.Keyword(null,\"doc\",\"doc\",1913296891),\"Like `query->source-table-id`, but for a join.\"], null)),cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([error__50239__auto___64646], 0))], 0)),new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null,\"type\",\"type\",1174270348),new cljs.core.Keyword(\"schema.core\",\"error\",\"schema.core/error\",1991454308),new cljs.core.Keyword(null,\"schema\",\"schema\",-1582001791),input_schema64085_64635,new cljs.core.Keyword(null,\"value\",\"value\",305978217),args__50238__auto___64639,new cljs.core.Keyword(null,\"error\",\"error\",-978969032),error__50239__auto___64646], null));\n} else {\n}\n}\n} else {\n}\n\nvar o__50240__auto__ = (function (){var join = G__64088;\nwhile(true){\nreturn metabase.mbql.util.query__GT_source_table_id(new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"type\",\"type\",1174270348),new cljs.core.Keyword(null,\"query\",\"query\",-1288509510),new cljs.core.Keyword(null,\"query\",\"query\",-1288509510),join], null));\nbreak;\n}\n})();\nif(cljs.core.truth_(validate__50237__auto__)){\nif(cljs.core.truth_(schema.core.fn_validator)){\nvar G__64095_64647 = new cljs.core.Keyword(null,\"output\",\"output\",-1105869043);\nvar G__64096_64648 = cljs.core.with_meta(new cljs.core.Symbol(null,\"join->source-table-id\",\"join->source-table-id\",1032348273,null),new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"schema\",\"schema\",-1582001791),cljs.core.list(new cljs.core.Symbol(\"s\",\"maybe\",\"s/maybe\",1326133944,null),new cljs.core.Symbol(\"schema.helpers\",\"IntGreaterThanZero\",\"schema.helpers/IntGreaterThanZero\",-728908174,null)),new cljs.core.Keyword(null,\"doc\",\"doc\",1913296891),\"Like `query->source-table-id`, but for a join.\"], null));\nvar G__64097_64649 = output_schema64083_64634;\nvar G__64098_64650 = cljs.core.deref(output_checker64087_64637);\nvar G__64099_64651 = o__50240__auto__;\n(schema.core.fn_validator.cljs$core$IFn$_invoke$arity$5 ? schema.core.fn_validator.cljs$core$IFn$_invoke$arity$5(G__64095_64647,G__64096_64648,G__64097_64649,G__64098_64650,G__64099_64651) : schema.core.fn_validator.call(null,G__64095_64647,G__64096_64648,G__64097_64649,G__64098_64650,G__64099_64651));\n} else {\nvar temp__5804__auto___64652 = (function (){var fexpr__64100 = cljs.core.deref(output_checker64087_64637);\nreturn (fexpr__64100.cljs$core$IFn$_invoke$arity$1 ? fexpr__64100.cljs$core$IFn$_invoke$arity$1(o__50240__auto__) : fexpr__64100.call(null,o__50240__auto__));\n})();\nif(cljs.core.truth_(temp__5804__auto___64652)){\nvar error__50239__auto___64653 = temp__5804__auto___64652;\nthrow cljs.core.ex_info.cljs$core$IFn$_invoke$arity$2(schema.utils.format_STAR_.cljs$core$IFn$_invoke$arity$variadic(\"Output of %s does not match schema: \\n\\n\\t \\u001B[0;33m  %s \\u001B[0m \\n\\n\",cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([cljs.core.with_meta(new cljs.core.Symbol(null,\"join->source-table-id\",\"join->source-table-id\",1032348273,null),new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"schema\",\"schema\",-1582001791),cljs.core.list(new cljs.core.Symbol(\"s\",\"maybe\",\"s/maybe\",1326133944,null),new cljs.core.Symbol(\"schema.helpers\",\"IntGreaterThanZero\",\"schema.helpers/IntGreaterThanZero\",-728908174,null)),new cljs.core.Keyword(null,\"doc\",\"doc\",1913296891),\"Like `query->source-table-id`, but for a join.\"], null)),cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([error__50239__auto___64653], 0))], 0)),new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null,\"type\",\"type\",1174270348),new cljs.core.Keyword(\"schema.core\",\"error\",\"schema.core/error\",1991454308),new cljs.core.Keyword(null,\"schema\",\"schema\",-1582001791),output_schema64083_64634,new cljs.core.Keyword(null,\"value\",\"value\",305978217),o__50240__auto__,new cljs.core.Keyword(null,\"error\",\"error\",-978969032),error__50239__auto___64653], null));\n} else {\n}\n}\n} else {\n}\n\nreturn o__50240__auto__;\n});\nschema.utils.declare_class_schema_BANG_(schema.utils.fn_schema_bearer(metabase.mbql.util.join__GT_source_table_id),schema.core.__GT_FnSchema(output_schema64083_64634,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [input_schema64085_64635], null)));\n\nvar ufv64102_64654 = schema.utils.use_fn_validation;\nvar output_schema64101_64655 = metabase.mbql.schema.MBQLQuery;\nvar input_schema64103_64656 = new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [schema.core.one(metabase.mbql.schema.MBQLQuery,cljs.core.with_meta(new cljs.core.Symbol(null,\"inner-query\",\"inner-query\",-907556093,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"schema\",\"schema\",-1582001791),new cljs.core.Symbol(\"mbql.s\",\"MBQLQuery\",\"mbql.s/MBQLQuery\",-332777720,null)], null))),schema.core.one(metabase.mbql.schema.OrderBy,new cljs.core.Symbol(null,\"arg1\",\"arg1\",-1702536411,null))], null);\nvar input_checker64104_64657 = (new cljs.core.Delay((function (){\nreturn schema.core.checker(input_schema64103_64656);\n}),null));\nvar output_checker64105_64658 = (new cljs.core.Delay((function (){\nreturn schema.core.checker(output_schema64101_64655);\n}),null));\nvar ret__51869__auto___64659 = /**\n * Inputs: [inner-query :- mbql.s/MBQLQuery [_ [_ id-or-name :as _field] :as order-by-clause] :- mbql.s/OrderBy]\n *   Returns: mbql.s/MBQLQuery\n * \n *   Add a new `:order-by` clause to an MBQL `inner-query`. If the new order-by clause references a Field that is\n *   already being used in another order-by clause, this function does nothing.\n */\nmetabase.mbql.util.add_order_by_clause = (function metabase$mbql$util$add_order_by_clause(G__64106,G__64107){\nvar validate__50237__auto__ = cljs.core.deref(ufv64102_64654);\nif(cljs.core.truth_(validate__50237__auto__)){\nvar args__50238__auto___64660 = new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [G__64106,G__64107], null);\nif(cljs.core.truth_(schema.core.fn_validator)){\nvar G__64108_64661 = new cljs.core.Keyword(null,\"input\",\"input\",556931961);\nvar G__64109_64662 = cljs.core.with_meta(new cljs.core.Symbol(null,\"add-order-by-clause\",\"add-order-by-clause\",240938699,null),new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"schema\",\"schema\",-1582001791),new cljs.core.Symbol(\"mbql.s\",\"MBQLQuery\",\"mbql.s/MBQLQuery\",-332777720,null),new cljs.core.Keyword(null,\"doc\",\"doc\",1913296891),\"Add a new `:order-by` clause to an MBQL `inner-query`. If the new order-by clause references a Field that is\\n  already being used in another order-by clause, this function does nothing.\"], null));\nvar G__64110_64663 = input_schema64103_64656;\nvar G__64111_64664 = cljs.core.deref(input_checker64104_64657);\nvar G__64112_64665 = args__50238__auto___64660;\n(schema.core.fn_validator.cljs$core$IFn$_invoke$arity$5 ? schema.core.fn_validator.cljs$core$IFn$_invoke$arity$5(G__64108_64661,G__64109_64662,G__64110_64663,G__64111_64664,G__64112_64665) : schema.core.fn_validator.call(null,G__64108_64661,G__64109_64662,G__64110_64663,G__64111_64664,G__64112_64665));\n} else {\nvar temp__5804__auto___64666 = (function (){var fexpr__64113 = cljs.core.deref(input_checker64104_64657);\nreturn (fexpr__64113.cljs$core$IFn$_invoke$arity$1 ? fexpr__64113.cljs$core$IFn$_invoke$arity$1(args__50238__auto___64660) : fexpr__64113.call(null,args__50238__auto___64660));\n})();\nif(cljs.core.truth_(temp__5804__auto___64666)){\nvar error__50239__auto___64668 = temp__5804__auto___64666;\nthrow cljs.core.ex_info.cljs$core$IFn$_invoke$arity$2(schema.utils.format_STAR_.cljs$core$IFn$_invoke$arity$variadic(\"Input to %s does not match schema: \\n\\n\\t \\u001B[0;33m  %s \\u001B[0m \\n\\n\",cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([cljs.core.with_meta(new cljs.core.Symbol(null,\"add-order-by-clause\",\"add-order-by-clause\",240938699,null),new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"schema\",\"schema\",-1582001791),new cljs.core.Symbol(\"mbql.s\",\"MBQLQuery\",\"mbql.s/MBQLQuery\",-332777720,null),new cljs.core.Keyword(null,\"doc\",\"doc\",1913296891),\"Add a new `:order-by` clause to an MBQL `inner-query`. If the new order-by clause references a Field that is\\n  already being used in another order-by clause, this function does nothing.\"], null)),cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([error__50239__auto___64668], 0))], 0)),new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null,\"type\",\"type\",1174270348),new cljs.core.Keyword(\"schema.core\",\"error\",\"schema.core/error\",1991454308),new cljs.core.Keyword(null,\"schema\",\"schema\",-1582001791),input_schema64103_64656,new cljs.core.Keyword(null,\"value\",\"value\",305978217),args__50238__auto___64660,new cljs.core.Keyword(null,\"error\",\"error\",-978969032),error__50239__auto___64668], null));\n} else {\n}\n}\n} else {\n}\n\nvar o__50240__auto__ = (function (){var inner_query = G__64106;\nvar G__64120 = G__64107;\nvar vec__64121 = G__64120;\nvar _ = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__64121,(0),null);\nvar vec__64124 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__64121,(1),null);\nvar ___$1 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__64124,(0),null);\nvar id_or_name = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__64124,(1),null);\nvar _field = vec__64124;\nvar order_by_clause = vec__64121;\nvar inner_query__$1 = inner_query;\nvar G__64120__$1 = G__64120;\nwhile(true){\nvar inner_query__$2 = inner_query__$1;\nvar vec__64127 = G__64120__$1;\nvar ___$2 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__64127,(0),null);\nvar vec__64130 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__64127,(1),null);\nvar ___$3 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__64130,(0),null);\nvar id_or_name__$1 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__64130,(1),null);\nvar _field__$1 = vec__64130;\nvar order_by_clause__$1 = vec__64127;\nvar existing_fields = cljs.core.set((function (){var iter__5523__auto__ = ((function (inner_query__$2,vec__64127,___$2,vec__64130,___$3,id_or_name__$1,_field__$1,order_by_clause__$1,inner_query,G__64120,vec__64121,_,vec__64124,___$1,id_or_name,_field,order_by_clause,validate__50237__auto__,ufv64102_64654,output_schema64101_64655,input_schema64103_64656,input_checker64104_64657,output_checker64105_64658){\nreturn (function metabase$mbql$util$add_order_by_clause_$_iter__64133(s__64134){\nreturn (new cljs.core.LazySeq(null,(function (){\nvar s__64134__$1 = s__64134;\nwhile(true){\nvar temp__5804__auto__ = cljs.core.seq(s__64134__$1);\nif(temp__5804__auto__){\nvar s__64134__$2 = temp__5804__auto__;\nif(cljs.core.chunked_seq_QMARK_(s__64134__$2)){\nvar c__5521__auto__ = cljs.core.chunk_first(s__64134__$2);\nvar size__5522__auto__ = cljs.core.count(c__5521__auto__);\nvar b__64136 = cljs.core.chunk_buffer(size__5522__auto__);\nif((function (){var i__64135 = (0);\nwhile(true){\nif((i__64135 < size__5522__auto__)){\nvar vec__64137 = cljs.core._nth(c__5521__auto__,i__64135);\nvar ___$4 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__64137,(0),null);\nvar vec__64140 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__64137,(1),null);\nvar ___$5 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__64140,(0),null);\nvar id_or_name__$2 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__64140,(1),null);\ncljs.core.chunk_append(b__64136,id_or_name__$2);\n\nvar G__64672 = (i__64135 + (1));\ni__64135 = G__64672;\ncontinue;\n} else {\nreturn true;\n}\nbreak;\n}\n})()){\nreturn cljs.core.chunk_cons(cljs.core.chunk(b__64136),metabase$mbql$util$add_order_by_clause_$_iter__64133(cljs.core.chunk_rest(s__64134__$2)));\n} else {\nreturn cljs.core.chunk_cons(cljs.core.chunk(b__64136),null);\n}\n} else {\nvar vec__64143 = cljs.core.first(s__64134__$2);\nvar ___$4 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__64143,(0),null);\nvar vec__64146 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__64143,(1),null);\nvar ___$5 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__64146,(0),null);\nvar id_or_name__$2 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__64146,(1),null);\nreturn cljs.core.cons(id_or_name__$2,metabase$mbql$util$add_order_by_clause_$_iter__64133(cljs.core.rest(s__64134__$2)));\n}\n} else {\nreturn null;\n}\nbreak;\n}\n}),null,null));\n});})(inner_query__$2,vec__64127,___$2,vec__64130,___$3,id_or_name__$1,_field__$1,order_by_clause__$1,inner_query,G__64120,vec__64121,_,vec__64124,___$1,id_or_name,_field,order_by_clause,validate__50237__auto__,ufv64102_64654,output_schema64101_64655,input_schema64103_64656,input_checker64104_64657,output_checker64105_64658))\n;\nreturn iter__5523__auto__(new cljs.core.Keyword(null,\"order-by\",\"order-by\",1527318070).cljs$core$IFn$_invoke$arity$1(inner_query__$2));\n})());\nif(cljs.core.truth_((existing_fields.cljs$core$IFn$_invoke$arity$1 ? existing_fields.cljs$core$IFn$_invoke$arity$1(id_or_name__$1) : existing_fields.call(null,id_or_name__$1)))){\nreturn inner_query__$2;\n} else {\nreturn cljs.core.update.cljs$core$IFn$_invoke$arity$4(inner_query__$2,new cljs.core.Keyword(null,\"order-by\",\"order-by\",1527318070),cljs.core.comp.cljs$core$IFn$_invoke$arity$3(cljs.core.vec,cljs.core.distinct,cljs.core.conj),order_by_clause__$1);\n}\nbreak;\n}\n})();\nif(cljs.core.truth_(validate__50237__auto__)){\nif(cljs.core.truth_(schema.core.fn_validator)){\nvar G__64149_64674 = new cljs.core.Keyword(null,\"output\",\"output\",-1105869043);\nvar G__64150_64675 = cljs.core.with_meta(new cljs.core.Symbol(null,\"add-order-by-clause\",\"add-order-by-clause\",240938699,null),new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"schema\",\"schema\",-1582001791),new cljs.core.Symbol(\"mbql.s\",\"MBQLQuery\",\"mbql.s/MBQLQuery\",-332777720,null),new cljs.core.Keyword(null,\"doc\",\"doc\",1913296891),\"Add a new `:order-by` clause to an MBQL `inner-query`. If the new order-by clause references a Field that is\\n  already being used in another order-by clause, this function does nothing.\"], null));\nvar G__64151_64676 = output_schema64101_64655;\nvar G__64152_64677 = cljs.core.deref(output_checker64105_64658);\nvar G__64153_64678 = o__50240__auto__;\n(schema.core.fn_validator.cljs$core$IFn$_invoke$arity$5 ? schema.core.fn_validator.cljs$core$IFn$_invoke$arity$5(G__64149_64674,G__64150_64675,G__64151_64676,G__64152_64677,G__64153_64678) : schema.core.fn_validator.call(null,G__64149_64674,G__64150_64675,G__64151_64676,G__64152_64677,G__64153_64678));\n} else {\nvar temp__5804__auto___64679 = (function (){var fexpr__64154 = cljs.core.deref(output_checker64105_64658);\nreturn (fexpr__64154.cljs$core$IFn$_invoke$arity$1 ? fexpr__64154.cljs$core$IFn$_invoke$arity$1(o__50240__auto__) : fexpr__64154.call(null,o__50240__auto__));\n})();\nif(cljs.core.truth_(temp__5804__auto___64679)){\nvar error__50239__auto___64680 = temp__5804__auto___64679;\nthrow cljs.core.ex_info.cljs$core$IFn$_invoke$arity$2(schema.utils.format_STAR_.cljs$core$IFn$_invoke$arity$variadic(\"Output of %s does not match schema: \\n\\n\\t \\u001B[0;33m  %s \\u001B[0m \\n\\n\",cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([cljs.core.with_meta(new cljs.core.Symbol(null,\"add-order-by-clause\",\"add-order-by-clause\",240938699,null),new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"schema\",\"schema\",-1582001791),new cljs.core.Symbol(\"mbql.s\",\"MBQLQuery\",\"mbql.s/MBQLQuery\",-332777720,null),new cljs.core.Keyword(null,\"doc\",\"doc\",1913296891),\"Add a new `:order-by` clause to an MBQL `inner-query`. If the new order-by clause references a Field that is\\n  already being used in another order-by clause, this function does nothing.\"], null)),cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([error__50239__auto___64680], 0))], 0)),new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null,\"type\",\"type\",1174270348),new cljs.core.Keyword(\"schema.core\",\"error\",\"schema.core/error\",1991454308),new cljs.core.Keyword(null,\"schema\",\"schema\",-1582001791),output_schema64101_64655,new cljs.core.Keyword(null,\"value\",\"value\",305978217),o__50240__auto__,new cljs.core.Keyword(null,\"error\",\"error\",-978969032),error__50239__auto___64680], null));\n} else {\n}\n}\n} else {\n}\n\nreturn o__50240__auto__;\n});\nschema.utils.declare_class_schema_BANG_(schema.utils.fn_schema_bearer(metabase.mbql.util.add_order_by_clause),schema.core.__GT_FnSchema(output_schema64101_64655,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [input_schema64103_64656], null)));\n\n/**\n * Dispatch function perfect for use with multimethods that dispatch off elements of an MBQL query. If `x` is an MBQL\n *   clause, dispatches off the clause name; otherwise dispatches off `x`'s class.\n */\nmetabase.mbql.util.dispatch_by_clause_name_or_class = (function metabase$mbql$util$dispatch_by_clause_name_or_class(var_args){\nvar G__64156 = arguments.length;\nswitch (G__64156) {\ncase 1:\nreturn metabase.mbql.util.dispatch_by_clause_name_or_class.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\n\nbreak;\ncase 2:\nreturn metabase.mbql.util.dispatch_by_clause_name_or_class.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\n(metabase.mbql.util.dispatch_by_clause_name_or_class.cljs$core$IFn$_invoke$arity$1 = (function (x){\nif(metabase.mbql.util.mbql_clause_QMARK_(x)){\nreturn cljs.core.first(x);\n} else {\nreturn cljs.core.type(x);\n}\n}));\n\n(metabase.mbql.util.dispatch_by_clause_name_or_class.cljs$core$IFn$_invoke$arity$2 = (function (x,_){\nreturn metabase.mbql.util.dispatch_by_clause_name_or_class.cljs$core$IFn$_invoke$arity$1(x);\n}));\n\n(metabase.mbql.util.dispatch_by_clause_name_or_class.cljs$lang$maxFixedArity = 2);\n\nvar ufv64158_64683 = schema.utils.use_fn_validation;\nvar output_schema64157_64684 = metabase.mbql.schema.FieldOrExpressionDef;\nvar input_schema64159_64685 = new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [schema.core.one(schema.core.Any,cljs.core.with_meta(new cljs.core.Symbol(null,\"inner-query\",\"inner-query\",-907556093,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"schema\",\"schema\",-1582001791),new cljs.core.Symbol(\"schema.core\",\"Any\",\"schema.core/Any\",-1891898271,null)], null))),schema.core.one(schema.core.cond_pre.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([schema.core.Keyword,metabase.mbql.schema.helpers.NonBlankString], 0)),cljs.core.with_meta(new cljs.core.Symbol(null,\"expression-name\",\"expression-name\",-157919182,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"schema\",\"schema\",-1582001791),cljs.core.list(new cljs.core.Symbol(\"s\",\"cond-pre\",\"s/cond-pre\",-923707600,null),new cljs.core.Symbol(\"s\",\"Keyword\",\"s/Keyword\",-850066400,null),new cljs.core.Symbol(\"schema.helpers\",\"NonBlankString\",\"schema.helpers/NonBlankString\",1984244415,null))], null)))], null);\nvar input_checker64160_64686 = (new cljs.core.Delay((function (){\nreturn schema.core.checker(input_schema64159_64685);\n}),null));\nvar output_checker64161_64687 = (new cljs.core.Delay((function (){\nreturn schema.core.checker(output_schema64157_64684);\n}),null));\nvar ret__51869__auto___64688 = /**\n * Inputs: [inner-query expression-name :- (s/cond-pre s/Keyword schema.helpers/NonBlankString)]\n *   Returns: mbql.s/FieldOrExpressionDef\n * \n *   Return the `Expression` referenced by a given `expression-name`.\n */\nmetabase.mbql.util.expression_with_name = (function metabase$mbql$util$expression_with_name(G__64162,G__64163){\nvar validate__50237__auto__ = cljs.core.deref(ufv64158_64683);\nif(cljs.core.truth_(validate__50237__auto__)){\nvar args__50238__auto___64690 = new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [G__64162,G__64163], null);\nif(cljs.core.truth_(schema.core.fn_validator)){\nvar G__64164_64691 = new cljs.core.Keyword(null,\"input\",\"input\",556931961);\nvar G__64165_64692 = cljs.core.with_meta(new cljs.core.Symbol(null,\"expression-with-name\",\"expression-with-name\",-417674245,null),new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"schema\",\"schema\",-1582001791),new cljs.core.Symbol(\"mbql.s\",\"FieldOrExpressionDef\",\"mbql.s/FieldOrExpressionDef\",-1851966074,null),new cljs.core.Keyword(null,\"doc\",\"doc\",1913296891),\"Return the `Expression` referenced by a given `expression-name`.\"], null));\nvar G__64166_64693 = input_schema64159_64685;\nvar G__64167_64694 = cljs.core.deref(input_checker64160_64686);\nvar G__64168_64695 = args__50238__auto___64690;\n(schema.core.fn_validator.cljs$core$IFn$_invoke$arity$5 ? schema.core.fn_validator.cljs$core$IFn$_invoke$arity$5(G__64164_64691,G__64165_64692,G__64166_64693,G__64167_64694,G__64168_64695) : schema.core.fn_validator.call(null,G__64164_64691,G__64165_64692,G__64166_64693,G__64167_64694,G__64168_64695));\n} else {\nvar temp__5804__auto___64696 = (function (){var fexpr__64169 = cljs.core.deref(input_checker64160_64686);\nreturn (fexpr__64169.cljs$core$IFn$_invoke$arity$1 ? fexpr__64169.cljs$core$IFn$_invoke$arity$1(args__50238__auto___64690) : fexpr__64169.call(null,args__50238__auto___64690));\n})();\nif(cljs.core.truth_(temp__5804__auto___64696)){\nvar error__50239__auto___64697 = temp__5804__auto___64696;\nthrow cljs.core.ex_info.cljs$core$IFn$_invoke$arity$2(schema.utils.format_STAR_.cljs$core$IFn$_invoke$arity$variadic(\"Input to %s does not match schema: \\n\\n\\t \\u001B[0;33m  %s \\u001B[0m \\n\\n\",cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([cljs.core.with_meta(new cljs.core.Symbol(null,\"expression-with-name\",\"expression-with-name\",-417674245,null),new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"schema\",\"schema\",-1582001791),new cljs.core.Symbol(\"mbql.s\",\"FieldOrExpressionDef\",\"mbql.s/FieldOrExpressionDef\",-1851966074,null),new cljs.core.Keyword(null,\"doc\",\"doc\",1913296891),\"Return the `Expression` referenced by a given `expression-name`.\"], null)),cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([error__50239__auto___64697], 0))], 0)),new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null,\"type\",\"type\",1174270348),new cljs.core.Keyword(\"schema.core\",\"error\",\"schema.core/error\",1991454308),new cljs.core.Keyword(null,\"schema\",\"schema\",-1582001791),input_schema64159_64685,new cljs.core.Keyword(null,\"value\",\"value\",305978217),args__50238__auto___64690,new cljs.core.Keyword(null,\"error\",\"error\",-978969032),error__50239__auto___64697], null));\n} else {\n}\n}\n} else {\n}\n\nvar o__50240__auto__ = (function (){var inner_query = G__64162;\nvar expression_name = G__64163;\nwhile(true){\nvar allowed_names = new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [metabase.mbql.util.qualified_name(expression_name),cljs.core.keyword.cljs$core$IFn$_invoke$arity$1(expression_name)], null);\nvar G__64171 = inner_query;\nvar map__64172 = G__64171;\nvar map__64172__$1 = cljs.core.__destructure_map(map__64172);\nvar expressions = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__64172__$1,new cljs.core.Keyword(null,\"expressions\",\"expressions\",255689909));\nvar source_query = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__64172__$1,new cljs.core.Keyword(null,\"source-query\",\"source-query\",198004422));\nvar found = cljs.core.PersistentHashSet.EMPTY;\nvar G__64171__$1 = G__64171;\nvar found__$1 = found;\nwhile(true){\nvar map__64174 = G__64171__$1;\nvar map__64174__$1 = cljs.core.__destructure_map(map__64174);\nvar expressions__$1 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__64174__$1,new cljs.core.Keyword(null,\"expressions\",\"expressions\",255689909));\nvar source_query__$1 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__64174__$1,new cljs.core.Keyword(null,\"source-query\",\"source-query\",198004422));\nvar found__$2 = found__$1;\nvar or__5045__auto__ = cljs.core.some(cljs.core.partial.cljs$core$IFn$_invoke$arity$2(cljs.core.get,expressions__$1),allowed_names);\nif(cljs.core.truth_(or__5045__auto__)){\nreturn or__5045__auto__;\n} else {\nvar found__$3 = cljs.core.into.cljs$core$IFn$_invoke$arity$2(found__$2,cljs.core.keys(expressions__$1));\nif(cljs.core.truth_(source_query__$1)){\nvar G__64698 = source_query__$1;\nvar G__64699 = found__$3;\nG__64171__$1 = G__64698;\nfound__$1 = G__64699;\ncontinue;\n} else {\nthrow cljs.core.ex_info.cljs$core$IFn$_invoke$arity$2(metabase.shared.util.i18n.js_i18n.cljs$core$IFn$_invoke$arity$variadic(\"No expression named ''{0}''\",cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([metabase.mbql.util.qualified_name(expression_name)], 0)),new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null,\"type\",\"type\",1174270348),new cljs.core.Keyword(null,\"invalid-query\",\"invalid-query\",-1009703371),new cljs.core.Keyword(null,\"expression-name\",\"expression-name\",-1798450709),expression_name,new cljs.core.Keyword(null,\"tried\",\"tried\",-1728444308),allowed_names,new cljs.core.Keyword(null,\"found\",\"found\",-584700170),found__$3], null));\n}\n}\nbreak;\n}\nbreak;\n}\n})();\nif(cljs.core.truth_(validate__50237__auto__)){\nif(cljs.core.truth_(schema.core.fn_validator)){\nvar G__64175_64701 = new cljs.core.Keyword(null,\"output\",\"output\",-1105869043);\nvar G__64176_64702 = cljs.core.with_meta(new cljs.core.Symbol(null,\"expression-with-name\",\"expression-with-name\",-417674245,null),new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"schema\",\"schema\",-1582001791),new cljs.core.Symbol(\"mbql.s\",\"FieldOrExpressionDef\",\"mbql.s/FieldOrExpressionDef\",-1851966074,null),new cljs.core.Keyword(null,\"doc\",\"doc\",1913296891),\"Return the `Expression` referenced by a given `expression-name`.\"], null));\nvar G__64177_64703 = output_schema64157_64684;\nvar G__64178_64704 = cljs.core.deref(output_checker64161_64687);\nvar G__64179_64705 = o__50240__auto__;\n(schema.core.fn_validator.cljs$core$IFn$_invoke$arity$5 ? schema.core.fn_validator.cljs$core$IFn$_invoke$arity$5(G__64175_64701,G__64176_64702,G__64177_64703,G__64178_64704,G__64179_64705) : schema.core.fn_validator.call(null,G__64175_64701,G__64176_64702,G__64177_64703,G__64178_64704,G__64179_64705));\n} else {\nvar temp__5804__auto___64706 = (function (){var fexpr__64180 = cljs.core.deref(output_checker64161_64687);\nreturn (fexpr__64180.cljs$core$IFn$_invoke$arity$1 ? fexpr__64180.cljs$core$IFn$_invoke$arity$1(o__50240__auto__) : fexpr__64180.call(null,o__50240__auto__));\n})();\nif(cljs.core.truth_(temp__5804__auto___64706)){\nvar error__50239__auto___64707 = temp__5804__auto___64706;\nthrow cljs.core.ex_info.cljs$core$IFn$_invoke$arity$2(schema.utils.format_STAR_.cljs$core$IFn$_invoke$arity$variadic(\"Output of %s does not match schema: \\n\\n\\t \\u001B[0;33m  %s \\u001B[0m \\n\\n\",cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([cljs.core.with_meta(new cljs.core.Symbol(null,\"expression-with-name\",\"expression-with-name\",-417674245,null),new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"schema\",\"schema\",-1582001791),new cljs.core.Symbol(\"mbql.s\",\"FieldOrExpressionDef\",\"mbql.s/FieldOrExpressionDef\",-1851966074,null),new cljs.core.Keyword(null,\"doc\",\"doc\",1913296891),\"Return the `Expression` referenced by a given `expression-name`.\"], null)),cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([error__50239__auto___64707], 0))], 0)),new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null,\"type\",\"type\",1174270348),new cljs.core.Keyword(\"schema.core\",\"error\",\"schema.core/error\",1991454308),new cljs.core.Keyword(null,\"schema\",\"schema\",-1582001791),output_schema64157_64684,new cljs.core.Keyword(null,\"value\",\"value\",305978217),o__50240__auto__,new cljs.core.Keyword(null,\"error\",\"error\",-978969032),error__50239__auto___64707], null));\n} else {\n}\n}\n} else {\n}\n\nreturn o__50240__auto__;\n});\nschema.utils.declare_class_schema_BANG_(schema.utils.fn_schema_bearer(metabase.mbql.util.expression_with_name),schema.core.__GT_FnSchema(output_schema64157_64684,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [input_schema64159_64685], null)));\n\nvar ufv64182_64710 = schema.utils.use_fn_validation;\nvar output_schema64181_64711 = metabase.mbql.schema.Aggregation;\nvar input_schema64183_64712 = new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [schema.core.one(schema.core.Any,cljs.core.with_meta(new cljs.core.Symbol(null,\"query\",\"query\",352022017,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"schema\",\"schema\",-1582001791),new cljs.core.Symbol(\"schema.core\",\"Any\",\"schema.core/Any\",-1891898271,null)], null))),schema.core.one(schema.core.Any,cljs.core.with_meta(new cljs.core.Symbol(null,\"index\",\"index\",108845612,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"schema\",\"schema\",-1582001791),new cljs.core.Symbol(\"schema.core\",\"Any\",\"schema.core/Any\",-1891898271,null)], null)))], null);\nvar input_schema64188_64713 = new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [schema.core.one(metabase.mbql.schema.Query,cljs.core.with_meta(new cljs.core.Symbol(null,\"query\",\"query\",352022017,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"schema\",\"schema\",-1582001791),new cljs.core.Symbol(\"mbql.s\",\"Query\",\"mbql.s/Query\",1061827921,null)], null))),schema.core.one(metabase.mbql.schema.helpers.IntGreaterThanOrEqualToZero,cljs.core.with_meta(new cljs.core.Symbol(null,\"index\",\"index\",108845612,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"schema\",\"schema\",-1582001791),new cljs.core.Symbol(\"schema.helpers\",\"IntGreaterThanOrEqualToZero\",\"schema.helpers/IntGreaterThanOrEqualToZero\",-1218348852,null)], null))),schema.core.one(metabase.mbql.schema.helpers.IntGreaterThanOrEqualToZero,cljs.core.with_meta(new cljs.core.Symbol(null,\"nesting-level\",\"nesting-level\",-2057556677,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"schema\",\"schema\",-1582001791),new cljs.core.Symbol(\"schema.helpers\",\"IntGreaterThanOrEqualToZero\",\"schema.helpers/IntGreaterThanOrEqualToZero\",-1218348852,null)], null)))], null);\nvar input_checker64184_64714 = (new cljs.core.Delay((function (){\nreturn schema.core.checker(input_schema64183_64712);\n}),null));\nvar output_checker64185_64715 = (new cljs.core.Delay((function (){\nreturn schema.core.checker(output_schema64181_64711);\n}),null));\nvar input_checker64189_64716 = (new cljs.core.Delay((function (){\nreturn schema.core.checker(input_schema64188_64713);\n}),null));\nvar output_checker64190_64717 = (new cljs.core.Delay((function (){\nreturn schema.core.checker(output_schema64181_64711);\n}),null));\nvar ret__51869__auto___64719 = (function (){\n/**\n * Inputs: ([query index] [query :- mbql.s/Query index :- schema.helpers/IntGreaterThanOrEqualToZero nesting-level :- schema.helpers/IntGreaterThanOrEqualToZero])\n *   Returns: mbql.s/Aggregation\n * \n *   Fetch the aggregation at index. This is intended to power aggregate field references (e.g. [:aggregation 0]).\n * This also handles nested queries, which could be potentially ambiguous if multiple levels had aggregations. To\n * support nested queries, you'll need to keep tract of how many `:source-query`s deep you've traveled; pass in this\n * number to as optional arg `nesting-level` to make sure you reference aggregations at the right level of nesting.\n */\nmetabase.mbql.util.aggregation_at_index = (function metabase$mbql$util$aggregation_at_index(var_args){\nvar G__64195 = arguments.length;\nswitch (G__64195) {\ncase 2:\nreturn metabase.mbql.util.aggregation_at_index.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ncase 3:\nreturn metabase.mbql.util.aggregation_at_index.cljs$core$IFn$_invoke$arity$3((arguments[(0)]),(arguments[(1)]),(arguments[(2)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\n(metabase.mbql.util.aggregation_at_index.cljs$core$IFn$_invoke$arity$2 = (function (G__64186,G__64187){\nvar validate__50237__auto__ = cljs.core.deref(ufv64182_64710);\nif(cljs.core.truth_(validate__50237__auto__)){\nvar args__50238__auto___64721 = new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [G__64186,G__64187], null);\nif(cljs.core.truth_(schema.core.fn_validator)){\nvar G__64196_64722 = new cljs.core.Keyword(null,\"input\",\"input\",556931961);\nvar G__64197_64723 = cljs.core.with_meta(new cljs.core.Symbol(null,\"aggregation-at-index\",\"aggregation-at-index\",1145258383,null),new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"schema\",\"schema\",-1582001791),new cljs.core.Symbol(\"mbql.s\",\"Aggregation\",\"mbql.s/Aggregation\",124504849,null),new cljs.core.Keyword(null,\"doc\",\"doc\",1913296891),\"Fetch the aggregation at index. This is intended to power aggregate field references (e.g. [:aggregation 0]).\\n   This also handles nested queries, which could be potentially ambiguous if multiple levels had aggregations. To\\n   support nested queries, you'll need to keep tract of how many `:source-query`s deep you've traveled; pass in this\\n   number to as optional arg `nesting-level` to make sure you reference aggregations at the right level of nesting.\"], null));\nvar G__64198_64724 = input_schema64183_64712;\nvar G__64199_64725 = cljs.core.deref(input_checker64184_64714);\nvar G__64200_64726 = args__50238__auto___64721;\n(schema.core.fn_validator.cljs$core$IFn$_invoke$arity$5 ? schema.core.fn_validator.cljs$core$IFn$_invoke$arity$5(G__64196_64722,G__64197_64723,G__64198_64724,G__64199_64725,G__64200_64726) : schema.core.fn_validator.call(null,G__64196_64722,G__64197_64723,G__64198_64724,G__64199_64725,G__64200_64726));\n} else {\nvar temp__5804__auto___64727 = (function (){var fexpr__64201 = cljs.core.deref(input_checker64184_64714);\nreturn (fexpr__64201.cljs$core$IFn$_invoke$arity$1 ? fexpr__64201.cljs$core$IFn$_invoke$arity$1(args__50238__auto___64721) : fexpr__64201.call(null,args__50238__auto___64721));\n})();\nif(cljs.core.truth_(temp__5804__auto___64727)){\nvar error__50239__auto___64728 = temp__5804__auto___64727;\nthrow cljs.core.ex_info.cljs$core$IFn$_invoke$arity$2(schema.utils.format_STAR_.cljs$core$IFn$_invoke$arity$variadic(\"Input to %s does not match schema: \\n\\n\\t \\u001B[0;33m  %s \\u001B[0m \\n\\n\",cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([cljs.core.with_meta(new cljs.core.Symbol(null,\"aggregation-at-index\",\"aggregation-at-index\",1145258383,null),new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"schema\",\"schema\",-1582001791),new cljs.core.Symbol(\"mbql.s\",\"Aggregation\",\"mbql.s/Aggregation\",124504849,null),new cljs.core.Keyword(null,\"doc\",\"doc\",1913296891),\"Fetch the aggregation at index. This is intended to power aggregate field references (e.g. [:aggregation 0]).\\n   This also handles nested queries, which could be potentially ambiguous if multiple levels had aggregations. To\\n   support nested queries, you'll need to keep tract of how many `:source-query`s deep you've traveled; pass in this\\n   number to as optional arg `nesting-level` to make sure you reference aggregations at the right level of nesting.\"], null)),cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([error__50239__auto___64728], 0))], 0)),new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null,\"type\",\"type\",1174270348),new cljs.core.Keyword(\"schema.core\",\"error\",\"schema.core/error\",1991454308),new cljs.core.Keyword(null,\"schema\",\"schema\",-1582001791),input_schema64183_64712,new cljs.core.Keyword(null,\"value\",\"value\",305978217),args__50238__auto___64721,new cljs.core.Keyword(null,\"error\",\"error\",-978969032),error__50239__auto___64728], null));\n} else {\n}\n}\n} else {\n}\n\nvar o__50240__auto__ = (function (){var query = G__64186;\nvar index = G__64187;\nwhile(true){\nreturn metabase.mbql.util.aggregation_at_index.cljs$core$IFn$_invoke$arity$3(query,index,(0));\nbreak;\n}\n})();\nif(cljs.core.truth_(validate__50237__auto__)){\nif(cljs.core.truth_(schema.core.fn_validator)){\nvar G__64202_64729 = new cljs.core.Keyword(null,\"output\",\"output\",-1105869043);\nvar G__64203_64730 = cljs.core.with_meta(new cljs.core.Symbol(null,\"aggregation-at-index\",\"aggregation-at-index\",1145258383,null),new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"schema\",\"schema\",-1582001791),new cljs.core.Symbol(\"mbql.s\",\"Aggregation\",\"mbql.s/Aggregation\",124504849,null),new cljs.core.Keyword(null,\"doc\",\"doc\",1913296891),\"Fetch the aggregation at index. This is intended to power aggregate field references (e.g. [:aggregation 0]).\\n   This also handles nested queries, which could be potentially ambiguous if multiple levels had aggregations. To\\n   support nested queries, you'll need to keep tract of how many `:source-query`s deep you've traveled; pass in this\\n   number to as optional arg `nesting-level` to make sure you reference aggregations at the right level of nesting.\"], null));\nvar G__64204_64731 = output_schema64181_64711;\nvar G__64205_64732 = cljs.core.deref(output_checker64185_64715);\nvar G__64206_64733 = o__50240__auto__;\n(schema.core.fn_validator.cljs$core$IFn$_invoke$arity$5 ? schema.core.fn_validator.cljs$core$IFn$_invoke$arity$5(G__64202_64729,G__64203_64730,G__64204_64731,G__64205_64732,G__64206_64733) : schema.core.fn_validator.call(null,G__64202_64729,G__64203_64730,G__64204_64731,G__64205_64732,G__64206_64733));\n} else {\nvar temp__5804__auto___64734 = (function (){var fexpr__64207 = cljs.core.deref(output_checker64185_64715);\nreturn (fexpr__64207.cljs$core$IFn$_invoke$arity$1 ? fexpr__64207.cljs$core$IFn$_invoke$arity$1(o__50240__auto__) : fexpr__64207.call(null,o__50240__auto__));\n})();\nif(cljs.core.truth_(temp__5804__auto___64734)){\nvar error__50239__auto___64735 = temp__5804__auto___64734;\nthrow cljs.core.ex_info.cljs$core$IFn$_invoke$arity$2(schema.utils.format_STAR_.cljs$core$IFn$_invoke$arity$variadic(\"Output of %s does not match schema: \\n\\n\\t \\u001B[0;33m  %s \\u001B[0m \\n\\n\",cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([cljs.core.with_meta(new cljs.core.Symbol(null,\"aggregation-at-index\",\"aggregation-at-index\",1145258383,null),new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"schema\",\"schema\",-1582001791),new cljs.core.Symbol(\"mbql.s\",\"Aggregation\",\"mbql.s/Aggregation\",124504849,null),new cljs.core.Keyword(null,\"doc\",\"doc\",1913296891),\"Fetch the aggregation at index. This is intended to power aggregate field references (e.g. [:aggregation 0]).\\n   This also handles nested queries, which could be potentially ambiguous if multiple levels had aggregations. To\\n   support nested queries, you'll need to keep tract of how many `:source-query`s deep you've traveled; pass in this\\n   number to as optional arg `nesting-level` to make sure you reference aggregations at the right level of nesting.\"], null)),cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([error__50239__auto___64735], 0))], 0)),new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null,\"type\",\"type\",1174270348),new cljs.core.Keyword(\"schema.core\",\"error\",\"schema.core/error\",1991454308),new cljs.core.Keyword(null,\"schema\",\"schema\",-1582001791),output_schema64181_64711,new cljs.core.Keyword(null,\"value\",\"value\",305978217),o__50240__auto__,new cljs.core.Keyword(null,\"error\",\"error\",-978969032),error__50239__auto___64735], null));\n} else {\n}\n}\n} else {\n}\n\nreturn o__50240__auto__;\n}));\n\n(metabase.mbql.util.aggregation_at_index.cljs$core$IFn$_invoke$arity$3 = (function (G__64191,G__64192,G__64193){\nvar validate__50237__auto__ = cljs.core.deref(ufv64182_64710);\nif(cljs.core.truth_(validate__50237__auto__)){\nvar args__50238__auto___64736 = new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [G__64191,G__64192,G__64193], null);\nif(cljs.core.truth_(schema.core.fn_validator)){\nvar G__64208_64737 = new cljs.core.Keyword(null,\"input\",\"input\",556931961);\nvar G__64209_64738 = cljs.core.with_meta(new cljs.core.Symbol(null,\"aggregation-at-index\",\"aggregation-at-index\",1145258383,null),new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"schema\",\"schema\",-1582001791),new cljs.core.Symbol(\"mbql.s\",\"Aggregation\",\"mbql.s/Aggregation\",124504849,null),new cljs.core.Keyword(null,\"doc\",\"doc\",1913296891),\"Fetch the aggregation at index. This is intended to power aggregate field references (e.g. [:aggregation 0]).\\n   This also handles nested queries, which could be potentially ambiguous if multiple levels had aggregations. To\\n   support nested queries, you'll need to keep tract of how many `:source-query`s deep you've traveled; pass in this\\n   number to as optional arg `nesting-level` to make sure you reference aggregations at the right level of nesting.\"], null));\nvar G__64210_64739 = input_schema64188_64713;\nvar G__64211_64740 = cljs.core.deref(input_checker64189_64716);\nvar G__64212_64741 = args__50238__auto___64736;\n(schema.core.fn_validator.cljs$core$IFn$_invoke$arity$5 ? schema.core.fn_validator.cljs$core$IFn$_invoke$arity$5(G__64208_64737,G__64209_64738,G__64210_64739,G__64211_64740,G__64212_64741) : schema.core.fn_validator.call(null,G__64208_64737,G__64209_64738,G__64210_64739,G__64211_64740,G__64212_64741));\n} else {\nvar temp__5804__auto___64742 = (function (){var fexpr__64213 = cljs.core.deref(input_checker64189_64716);\nreturn (fexpr__64213.cljs$core$IFn$_invoke$arity$1 ? fexpr__64213.cljs$core$IFn$_invoke$arity$1(args__50238__auto___64736) : fexpr__64213.call(null,args__50238__auto___64736));\n})();\nif(cljs.core.truth_(temp__5804__auto___64742)){\nvar error__50239__auto___64743 = temp__5804__auto___64742;\nthrow cljs.core.ex_info.cljs$core$IFn$_invoke$arity$2(schema.utils.format_STAR_.cljs$core$IFn$_invoke$arity$variadic(\"Input to %s does not match schema: \\n\\n\\t \\u001B[0;33m  %s \\u001B[0m \\n\\n\",cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([cljs.core.with_meta(new cljs.core.Symbol(null,\"aggregation-at-index\",\"aggregation-at-index\",1145258383,null),new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"schema\",\"schema\",-1582001791),new cljs.core.Symbol(\"mbql.s\",\"Aggregation\",\"mbql.s/Aggregation\",124504849,null),new cljs.core.Keyword(null,\"doc\",\"doc\",1913296891),\"Fetch the aggregation at index. This is intended to power aggregate field references (e.g. [:aggregation 0]).\\n   This also handles nested queries, which could be potentially ambiguous if multiple levels had aggregations. To\\n   support nested queries, you'll need to keep tract of how many `:source-query`s deep you've traveled; pass in this\\n   number to as optional arg `nesting-level` to make sure you reference aggregations at the right level of nesting.\"], null)),cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([error__50239__auto___64743], 0))], 0)),new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null,\"type\",\"type\",1174270348),new cljs.core.Keyword(\"schema.core\",\"error\",\"schema.core/error\",1991454308),new cljs.core.Keyword(null,\"schema\",\"schema\",-1582001791),input_schema64188_64713,new cljs.core.Keyword(null,\"value\",\"value\",305978217),args__50238__auto___64736,new cljs.core.Keyword(null,\"error\",\"error\",-978969032),error__50239__auto___64743], null));\n} else {\n}\n}\n} else {\n}\n\nvar o__50240__auto__ = (function (){var query = G__64191;\nvar index = G__64192;\nvar nesting_level = G__64193;\nwhile(true){\nif((nesting_level === (0))){\nvar or__5045__auto__ = cljs.core.nth.cljs$core$IFn$_invoke$arity$2(cljs.core.get_in.cljs$core$IFn$_invoke$arity$2(query,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"query\",\"query\",-1288509510),new cljs.core.Keyword(null,\"aggregation\",\"aggregation\",1597476696)], null)),index);\nif(cljs.core.truth_(or__5045__auto__)){\nreturn or__5045__auto__;\n} else {\nthrow cljs.core.ex_info.cljs$core$IFn$_invoke$arity$2(metabase.shared.util.i18n.js_i18n.cljs$core$IFn$_invoke$arity$variadic(\"No aggregation at index: {0}\",cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([index], 0)),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"index\",\"index\",-1531685915),index], null));\n}\n} else {\nvar G__64744 = new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"query\",\"query\",-1288509510),cljs.core.get_in.cljs$core$IFn$_invoke$arity$2(query,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"query\",\"query\",-1288509510),new cljs.core.Keyword(null,\"source-query\",\"source-query\",198004422)], null))], null);\nvar G__64745 = index;\nvar G__64746 = (nesting_level - (1));\nquery = G__64744;\nindex = G__64745;\nnesting_level = G__64746;\ncontinue;\n}\nbreak;\n}\n})();\nif(cljs.core.truth_(validate__50237__auto__)){\nif(cljs.core.truth_(schema.core.fn_validator)){\nvar G__64214_64747 = new cljs.core.Keyword(null,\"output\",\"output\",-1105869043);\nvar G__64215_64748 = cljs.core.with_meta(new cljs.core.Symbol(null,\"aggregation-at-index\",\"aggregation-at-index\",1145258383,null),new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"schema\",\"schema\",-1582001791),new cljs.core.Symbol(\"mbql.s\",\"Aggregation\",\"mbql.s/Aggregation\",124504849,null),new cljs.core.Keyword(null,\"doc\",\"doc\",1913296891),\"Fetch the aggregation at index. This is intended to power aggregate field references (e.g. [:aggregation 0]).\\n   This also handles nested queries, which could be potentially ambiguous if multiple levels had aggregations. To\\n   support nested queries, you'll need to keep tract of how many `:source-query`s deep you've traveled; pass in this\\n   number to as optional arg `nesting-level` to make sure you reference aggregations at the right level of nesting.\"], null));\nvar G__64216_64749 = output_schema64181_64711;\nvar G__64217_64750 = cljs.core.deref(output_checker64190_64717);\nvar G__64218_64751 = o__50240__auto__;\n(schema.core.fn_validator.cljs$core$IFn$_invoke$arity$5 ? schema.core.fn_validator.cljs$core$IFn$_invoke$arity$5(G__64214_64747,G__64215_64748,G__64216_64749,G__64217_64750,G__64218_64751) : schema.core.fn_validator.call(null,G__64214_64747,G__64215_64748,G__64216_64749,G__64217_64750,G__64218_64751));\n} else {\nvar temp__5804__auto___64752 = (function (){var fexpr__64219 = cljs.core.deref(output_checker64190_64717);\nreturn (fexpr__64219.cljs$core$IFn$_invoke$arity$1 ? fexpr__64219.cljs$core$IFn$_invoke$arity$1(o__50240__auto__) : fexpr__64219.call(null,o__50240__auto__));\n})();\nif(cljs.core.truth_(temp__5804__auto___64752)){\nvar error__50239__auto___64753 = temp__5804__auto___64752;\nthrow cljs.core.ex_info.cljs$core$IFn$_invoke$arity$2(schema.utils.format_STAR_.cljs$core$IFn$_invoke$arity$variadic(\"Output of %s does not match schema: \\n\\n\\t \\u001B[0;33m  %s \\u001B[0m \\n\\n\",cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([cljs.core.with_meta(new cljs.core.Symbol(null,\"aggregation-at-index\",\"aggregation-at-index\",1145258383,null),new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"schema\",\"schema\",-1582001791),new cljs.core.Symbol(\"mbql.s\",\"Aggregation\",\"mbql.s/Aggregation\",124504849,null),new cljs.core.Keyword(null,\"doc\",\"doc\",1913296891),\"Fetch the aggregation at index. This is intended to power aggregate field references (e.g. [:aggregation 0]).\\n   This also handles nested queries, which could be potentially ambiguous if multiple levels had aggregations. To\\n   support nested queries, you'll need to keep tract of how many `:source-query`s deep you've traveled; pass in this\\n   number to as optional arg `nesting-level` to make sure you reference aggregations at the right level of nesting.\"], null)),cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([error__50239__auto___64753], 0))], 0)),new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null,\"type\",\"type\",1174270348),new cljs.core.Keyword(\"schema.core\",\"error\",\"schema.core/error\",1991454308),new cljs.core.Keyword(null,\"schema\",\"schema\",-1582001791),output_schema64181_64711,new cljs.core.Keyword(null,\"value\",\"value\",305978217),o__50240__auto__,new cljs.core.Keyword(null,\"error\",\"error\",-978969032),error__50239__auto___64753], null));\n} else {\n}\n}\n} else {\n}\n\nreturn o__50240__auto__;\n}));\n\n(metabase.mbql.util.aggregation_at_index.cljs$lang$maxFixedArity = 3);\n\nreturn null;\n})()\n;\nschema.utils.declare_class_schema_BANG_(schema.utils.fn_schema_bearer(metabase.mbql.util.aggregation_at_index),schema.core.make_fn_schema(output_schema64181_64711,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [input_schema64183_64712,input_schema64188_64713], null)));\n\n/**\n * Is this ID (presumably of a Metric or Segment) a GA one?\n */\nmetabase.mbql.util.ga_id_QMARK_ = (function metabase$mbql$util$ga_id_QMARK_(id){\nreturn cljs.core.boolean$((cljs.core.truth_(cljs.core.some_fn.cljs$core$IFn$_invoke$arity$2(cljs.core.string_QMARK_,cljs.core.keyword_QMARK_)(id))?cljs.core.re_find(/^ga(id)?:/,cljs.core.name(id)):null));\n});\n/**\n * Is this metric or segment clause not a Dashboard Metric or Segment, but rather a GA one? E.g. something like `[:metric\n *   ga:users]`. We want to ignore those because they're not the same thing at all as MB Metrics/Segments and don't\n *   correspond to objects in our application DB.\n */\nmetabase.mbql.util.ga_metric_or_segment_QMARK_ = (function metabase$mbql$util$ga_metric_or_segment_QMARK_(p__64220){\nvar vec__64221 = p__64220;\nvar _ = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__64221,(0),null);\nvar id = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__64221,(1),null);\nreturn metabase.mbql.util.ga_id_QMARK_(id);\n});\n/**\n * Return a function that can be used to uniquify string names. Function maintains an internal counter that will suffix\n *   any names passed to it as needed so all results will be unique.\n * \n *  (let [unique-name (unique-name-generator)]\n *    [(unique-name \"A\")\n *     (unique-name \"B\")\n *     (unique-name \"A\")])\n *  ;; -> [\"A\" \"B\" \"A_2\"]\n * \n *   By default, unique aliases are generated for each unique `[id original-name]` key pair. By default, a unique `id` is\n *   generated for every call, meaning repeated calls to [[unique-name-generator]] with the same `original-name` will\n *   return different unique aliases. If idempotence is desired, the function returned by the generator also has a 2\n *   airity version with the signature\n * \n *  (unique-name-fn id original-name)\n * \n *   for example:\n * \n *  (let [unique-name (unique-name-generator)]\n *    [(unique-name :x \"A\")\n *     (unique-name :x \"B\")\n *     (unique-name :x \"A\")\n *     (unique-name :y \"A\")])\n *  ;; -> [\"A\" \"B\" \"A\" \"A_2\"]\n * \n *   Finally, [[unique-name-generator]] accepts the following options to further customize behavior:\n * \n *   ### `:name-key-fn`\n * \n *   Generated aliases are unique by the value of `[id (name-key-fn original-name)]`; the default is `identity`, so by\n *   default aliases are unique by `[id name-key-fn]`. Specify something custom here if you want to make the unique\n *   aliases unique by some other value, for example to make them unique without regards to case:\n * \n *  (let [f (unique-name-generator :name-key-fn str/lower-case)]\n *    [(f \"x\")\n *     (f \"X\")\n *     (f \"X\")])\n *  ;; -> [\"x\" \"X_2\" \"X_3\"]\n * \n *   This is useful for databases that treat column aliases as case-insensitive (see #19618 for some examples of this).\n * \n *   ### `:unique-alias-fn`\n * \n *   The function used to generate a potentially-unique alias given an original alias and unique suffix with the signature\n * \n *  (unique-alias-fn original suffix)\n * \n *   By default, combines them like `original_suffix`, but you can supply a custom function if you need to change this\n *   behavior:\n * \n *  (let [f (unique-name-generator :unique-alias-fn (fn [x y] (format \"%s~~%s\" y x)))]\n *    [(f \"x\")\n *     (f \"x\")])\n *   ;; -> [\"x\" \"2~~x\"]\n * \n *   This is useful if you need to constrain the generated suffix in some way, for example by limiting its length or\n *   escaping characters disallowed in a column alias.\n * \n *   Values generated by this function are recursively checked for uniqueness, and will keep trying values a unique value\n *   is generated; for this reason the function *must* return a unique value for every unique input. Use caution when\n *   limiting the length of the identifier generated (consider appending a hash in cases like these).\n */\nmetabase.mbql.util.unique_name_generator = (function metabase$mbql$util$unique_name_generator(var_args){\nvar args__5775__auto__ = [];\nvar len__5769__auto___64755 = arguments.length;\nvar i__5770__auto___64756 = (0);\nwhile(true){\nif((i__5770__auto___64756 < len__5769__auto___64755)){\nargs__5775__auto__.push((arguments[i__5770__auto___64756]));\n\nvar G__64757 = (i__5770__auto___64756 + (1));\ni__5770__auto___64756 = G__64757;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__5776__auto__ = ((((0) < args__5775__auto__.length))?(new cljs.core.IndexedSeq(args__5775__auto__.slice((0)),(0),null)):null);\nreturn metabase.mbql.util.unique_name_generator.cljs$core$IFn$_invoke$arity$variadic(argseq__5776__auto__);\n});\n\n(metabase.mbql.util.unique_name_generator.cljs$core$IFn$_invoke$arity$variadic = (function (p__64225){\nvar map__64226 = p__64225;\nvar map__64226__$1 = cljs.core.__destructure_map(map__64226);\nvar name_key_fn = cljs.core.get.cljs$core$IFn$_invoke$arity$3(map__64226__$1,new cljs.core.Keyword(null,\"name-key-fn\",\"name-key-fn\",-1634839199),cljs.core.identity);\nvar unique_alias_fn = cljs.core.get.cljs$core$IFn$_invoke$arity$3(map__64226__$1,new cljs.core.Keyword(null,\"unique-alias-fn\",\"unique-alias-fn\",32555420),(function (original,suffix){\nreturn [cljs.core.str.cljs$core$IFn$_invoke$arity$1(original),\"_\",cljs.core.str.cljs$core$IFn$_invoke$arity$1(suffix)].join('');\n}));\nvar id_PLUS_original__GT_unique = cljs.core.atom.cljs$core$IFn$_invoke$arity$1(cljs.core.PersistentArrayMap.EMPTY);\nvar original__GT_count = cljs.core.atom.cljs$core$IFn$_invoke$arity$1(cljs.core.PersistentArrayMap.EMPTY);\nreturn (function() {\nvar metabase$mbql$util$generate_name = null;\nvar metabase$mbql$util$generate_name__1 = (function (alias){\nreturn metabase$mbql$util$generate_name.cljs$core$IFn$_invoke$arity$2(cljs.core.gensym.cljs$core$IFn$_invoke$arity$0(),alias);\n});\nvar metabase$mbql$util$generate_name__2 = (function (id,original){\nwhile(true){\nvar name_key = (name_key_fn.cljs$core$IFn$_invoke$arity$1 ? name_key_fn.cljs$core$IFn$_invoke$arity$1(original) : name_key_fn.call(null,original));\nvar or__5045__auto__ = (function (){var G__64228 = new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [id,name_key], null);\nvar fexpr__64227 = cljs.core.deref(id_PLUS_original__GT_unique);\nreturn (fexpr__64227.cljs$core$IFn$_invoke$arity$1 ? fexpr__64227.cljs$core$IFn$_invoke$arity$1(G__64228) : fexpr__64227.call(null,G__64228));\n})();\nif(cljs.core.truth_(or__5045__auto__)){\nreturn or__5045__auto__;\n} else {\nvar total_count = cljs.core.get.cljs$core$IFn$_invoke$arity$2(cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4(original__GT_count,cljs.core.update,name_key,cljs.core.fnil.cljs$core$IFn$_invoke$arity$2(cljs.core.inc,(0))),name_key);\nif(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(total_count,(1))){\ncljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4(id_PLUS_original__GT_unique,cljs.core.assoc,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [id,name_key], null),original);\n\nreturn original;\n} else {\nvar candidate = (function (){var G__64229 = original;\nvar G__64230 = cljs.core.str.cljs$core$IFn$_invoke$arity$1(total_count);\nreturn (unique_alias_fn.cljs$core$IFn$_invoke$arity$2 ? unique_alias_fn.cljs$core$IFn$_invoke$arity$2(G__64229,G__64230) : unique_alias_fn.call(null,G__64229,G__64230));\n})();\nif(cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2(candidate,original)){\n} else {\nthrow (new Error([\"Assert failed: \",[\"unique-alias-fn must return a different string than its input. Input: \",cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([candidate], 0))].join(''),\"\\n\",\"(not= candidate original)\"].join('')));\n}\n\nvar G__64758 = id;\nvar G__64759 = candidate;\nid = G__64758;\noriginal = G__64759;\ncontinue;\n}\n}\nbreak;\n}\n});\nmetabase$mbql$util$generate_name = function(id,original){\nswitch(arguments.length){\ncase 1:\nreturn metabase$mbql$util$generate_name__1.call(this,id);\ncase 2:\nreturn metabase$mbql$util$generate_name__2.call(this,id,original);\n}\nthrow(new Error('Invalid arity: ' + arguments.length));\n};\nmetabase$mbql$util$generate_name.cljs$core$IFn$_invoke$arity$1 = metabase$mbql$util$generate_name__1;\nmetabase$mbql$util$generate_name.cljs$core$IFn$_invoke$arity$2 = metabase$mbql$util$generate_name__2;\nreturn metabase$mbql$util$generate_name;\n})()\n}));\n\n(metabase.mbql.util.unique_name_generator.cljs$lang$maxFixedArity = (0));\n\n/** @this {Function} */\n(metabase.mbql.util.unique_name_generator.cljs$lang$applyTo = (function (seq64224){\nvar self__5755__auto__ = this;\nreturn self__5755__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq64224));\n}));\n\nvar ufv64232_64760 = schema.utils.use_fn_validation;\nvar output_schema64231_64761 = schema.core.constrained.cljs$core$IFn$_invoke$arity$3(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [schema.core.Str], null),cljs.core.distinct_QMARK_,\"sequence of unique strings\");\nvar input_schema64233_64762 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [schema.core.one(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [schema.core.Str], null),cljs.core.with_meta(new cljs.core.Symbol(null,\"names\",\"names\",-302543131,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"schema\",\"schema\",-1582001791),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(\"s\",\"Str\",\"s/Str\",907974338,null)], null)], null)))], null);\nvar input_checker64234_64763 = (new cljs.core.Delay((function (){\nreturn schema.core.checker(input_schema64233_64762);\n}),null));\nvar output_checker64235_64764 = (new cljs.core.Delay((function (){\nreturn schema.core.checker(output_schema64231_64761);\n}),null));\nvar ret__51869__auto___64765 = /**\n * Inputs: [names :- [s/Str]]\n *   Returns: (s/constrained [s/Str] distinct? \"sequence of unique strings\")\n * \n *   Make the names in a sequence of string names unique by adding suffixes such as `_2`.\n * \n *   (uniquify-names [\"count\" \"sum\" \"count\" \"count_2\"])\n *   ;; -> [\"count\" \"sum\" \"count_2\" \"count_2_2\"]\n */\nmetabase.mbql.util.uniquify_names = (function metabase$mbql$util$uniquify_names(G__64236){\nvar validate__50237__auto__ = cljs.core.deref(ufv64232_64760);\nif(cljs.core.truth_(validate__50237__auto__)){\nvar args__50238__auto___64766 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [G__64236], null);\nif(cljs.core.truth_(schema.core.fn_validator)){\nvar G__64237_64767 = new cljs.core.Keyword(null,\"input\",\"input\",556931961);\nvar G__64238_64768 = cljs.core.with_meta(new cljs.core.Symbol(null,\"uniquify-names\",\"uniquify-names\",1444516604,null),new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"schema\",\"schema\",-1582001791),cljs.core.list(new cljs.core.Symbol(\"s\",\"constrained\",\"s/constrained\",-2057147677,null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(\"s\",\"Str\",\"s/Str\",907974338,null)], null),new cljs.core.Symbol(null,\"distinct?\",\"distinct?\",-1684357959,null),\"sequence of unique strings\"),new cljs.core.Keyword(null,\"doc\",\"doc\",1913296891),\"Make the names in a sequence of string names unique by adding suffixes such as `_2`.\\n\\n     (uniquify-names [\\\"count\\\" \\\"sum\\\" \\\"count\\\" \\\"count_2\\\"])\\n     ;; -> [\\\"count\\\" \\\"sum\\\" \\\"count_2\\\" \\\"count_2_2\\\"]\"], null));\nvar G__64239_64769 = input_schema64233_64762;\nvar G__64240_64770 = cljs.core.deref(input_checker64234_64763);\nvar G__64241_64771 = args__50238__auto___64766;\n(schema.core.fn_validator.cljs$core$IFn$_invoke$arity$5 ? schema.core.fn_validator.cljs$core$IFn$_invoke$arity$5(G__64237_64767,G__64238_64768,G__64239_64769,G__64240_64770,G__64241_64771) : schema.core.fn_validator.call(null,G__64237_64767,G__64238_64768,G__64239_64769,G__64240_64770,G__64241_64771));\n} else {\nvar temp__5804__auto___64772 = (function (){var fexpr__64242 = cljs.core.deref(input_checker64234_64763);\nreturn (fexpr__64242.cljs$core$IFn$_invoke$arity$1 ? fexpr__64242.cljs$core$IFn$_invoke$arity$1(args__50238__auto___64766) : fexpr__64242.call(null,args__50238__auto___64766));\n})();\nif(cljs.core.truth_(temp__5804__auto___64772)){\nvar error__50239__auto___64773 = temp__5804__auto___64772;\nthrow cljs.core.ex_info.cljs$core$IFn$_invoke$arity$2(schema.utils.format_STAR_.cljs$core$IFn$_invoke$arity$variadic(\"Input to %s does not match schema: \\n\\n\\t \\u001B[0;33m  %s \\u001B[0m \\n\\n\",cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([cljs.core.with_meta(new cljs.core.Symbol(null,\"uniquify-names\",\"uniquify-names\",1444516604,null),new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"schema\",\"schema\",-1582001791),cljs.core.list(new cljs.core.Symbol(\"s\",\"constrained\",\"s/constrained\",-2057147677,null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(\"s\",\"Str\",\"s/Str\",907974338,null)], null),new cljs.core.Symbol(null,\"distinct?\",\"distinct?\",-1684357959,null),\"sequence of unique strings\"),new cljs.core.Keyword(null,\"doc\",\"doc\",1913296891),\"Make the names in a sequence of string names unique by adding suffixes such as `_2`.\\n\\n     (uniquify-names [\\\"count\\\" \\\"sum\\\" \\\"count\\\" \\\"count_2\\\"])\\n     ;; -> [\\\"count\\\" \\\"sum\\\" \\\"count_2\\\" \\\"count_2_2\\\"]\"], null)),cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([error__50239__auto___64773], 0))], 0)),new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null,\"type\",\"type\",1174270348),new cljs.core.Keyword(\"schema.core\",\"error\",\"schema.core/error\",1991454308),new cljs.core.Keyword(null,\"schema\",\"schema\",-1582001791),input_schema64233_64762,new cljs.core.Keyword(null,\"value\",\"value\",305978217),args__50238__auto___64766,new cljs.core.Keyword(null,\"error\",\"error\",-978969032),error__50239__auto___64773], null));\n} else {\n}\n}\n} else {\n}\n\nvar o__50240__auto__ = (function (){var names = G__64236;\nwhile(true){\nreturn cljs.core.map.cljs$core$IFn$_invoke$arity$2(metabase.mbql.util.unique_name_generator(),names);\nbreak;\n}\n})();\nif(cljs.core.truth_(validate__50237__auto__)){\nif(cljs.core.truth_(schema.core.fn_validator)){\nvar G__64243_64774 = new cljs.core.Keyword(null,\"output\",\"output\",-1105869043);\nvar G__64244_64775 = cljs.core.with_meta(new cljs.core.Symbol(null,\"uniquify-names\",\"uniquify-names\",1444516604,null),new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"schema\",\"schema\",-1582001791),cljs.core.list(new cljs.core.Symbol(\"s\",\"constrained\",\"s/constrained\",-2057147677,null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(\"s\",\"Str\",\"s/Str\",907974338,null)], null),new cljs.core.Symbol(null,\"distinct?\",\"distinct?\",-1684357959,null),\"sequence of unique strings\"),new cljs.core.Keyword(null,\"doc\",\"doc\",1913296891),\"Make the names in a sequence of string names unique by adding suffixes such as `_2`.\\n\\n     (uniquify-names [\\\"count\\\" \\\"sum\\\" \\\"count\\\" \\\"count_2\\\"])\\n     ;; -> [\\\"count\\\" \\\"sum\\\" \\\"count_2\\\" \\\"count_2_2\\\"]\"], null));\nvar G__64245_64776 = output_schema64231_64761;\nvar G__64246_64777 = cljs.core.deref(output_checker64235_64764);\nvar G__64247_64778 = o__50240__auto__;\n(schema.core.fn_validator.cljs$core$IFn$_invoke$arity$5 ? schema.core.fn_validator.cljs$core$IFn$_invoke$arity$5(G__64243_64774,G__64244_64775,G__64245_64776,G__64246_64777,G__64247_64778) : schema.core.fn_validator.call(null,G__64243_64774,G__64244_64775,G__64245_64776,G__64246_64777,G__64247_64778));\n} else {\nvar temp__5804__auto___64779 = (function (){var fexpr__64248 = cljs.core.deref(output_checker64235_64764);\nreturn (fexpr__64248.cljs$core$IFn$_invoke$arity$1 ? fexpr__64248.cljs$core$IFn$_invoke$arity$1(o__50240__auto__) : fexpr__64248.call(null,o__50240__auto__));\n})();\nif(cljs.core.truth_(temp__5804__auto___64779)){\nvar error__50239__auto___64780 = temp__5804__auto___64779;\nthrow cljs.core.ex_info.cljs$core$IFn$_invoke$arity$2(schema.utils.format_STAR_.cljs$core$IFn$_invoke$arity$variadic(\"Output of %s does not match schema: \\n\\n\\t \\u001B[0;33m  %s \\u001B[0m \\n\\n\",cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([cljs.core.with_meta(new cljs.core.Symbol(null,\"uniquify-names\",\"uniquify-names\",1444516604,null),new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"schema\",\"schema\",-1582001791),cljs.core.list(new cljs.core.Symbol(\"s\",\"constrained\",\"s/constrained\",-2057147677,null),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(\"s\",\"Str\",\"s/Str\",907974338,null)], null),new cljs.core.Symbol(null,\"distinct?\",\"distinct?\",-1684357959,null),\"sequence of unique strings\"),new cljs.core.Keyword(null,\"doc\",\"doc\",1913296891),\"Make the names in a sequence of string names unique by adding suffixes such as `_2`.\\n\\n     (uniquify-names [\\\"count\\\" \\\"sum\\\" \\\"count\\\" \\\"count_2\\\"])\\n     ;; -> [\\\"count\\\" \\\"sum\\\" \\\"count_2\\\" \\\"count_2_2\\\"]\"], null)),cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([error__50239__auto___64780], 0))], 0)),new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null,\"type\",\"type\",1174270348),new cljs.core.Keyword(\"schema.core\",\"error\",\"schema.core/error\",1991454308),new cljs.core.Keyword(null,\"schema\",\"schema\",-1582001791),output_schema64231_64761,new cljs.core.Keyword(null,\"value\",\"value\",305978217),o__50240__auto__,new cljs.core.Keyword(null,\"error\",\"error\",-978969032),error__50239__auto___64780], null));\n} else {\n}\n}\n} else {\n}\n\nreturn o__50240__auto__;\n});\nschema.utils.declare_class_schema_BANG_(schema.utils.fn_schema_bearer(metabase.mbql.util.uniquify_names),schema.core.__GT_FnSchema(output_schema64231_64761,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [input_schema64233_64762], null)));\n\nmetabase.mbql.util.NamedAggregation = schema.core.constrained.cljs$core$IFn$_invoke$arity$3(metabase.mbql.schema.aggregation_options,(function (p1__64249_SHARP_){\nreturn new cljs.core.Keyword(null,\"name\",\"name\",1843675177).cljs$core$IFn$_invoke$arity$1(cljs.core.nth.cljs$core$IFn$_invoke$arity$2(p1__64249_SHARP_,(2)));\n}),\"`:aggregation-options` with a `:name`\");\nmetabase.mbql.util.UniquelyNamedAggregations = schema.core.constrained.cljs$core$IFn$_invoke$arity$3(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [metabase.mbql.util.NamedAggregation], null),(function (clauses){\nreturn cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.distinct_QMARK_,(function (){var iter__5523__auto__ = (function metabase$mbql$util$iter__64250(s__64251){\nreturn (new cljs.core.LazySeq(null,(function (){\nvar s__64251__$1 = s__64251;\nwhile(true){\nvar temp__5804__auto__ = cljs.core.seq(s__64251__$1);\nif(temp__5804__auto__){\nvar s__64251__$2 = temp__5804__auto__;\nif(cljs.core.chunked_seq_QMARK_(s__64251__$2)){\nvar c__5521__auto__ = cljs.core.chunk_first(s__64251__$2);\nvar size__5522__auto__ = cljs.core.count(c__5521__auto__);\nvar b__64253 = cljs.core.chunk_buffer(size__5522__auto__);\nif((function (){var i__64252 = (0);\nwhile(true){\nif((i__64252 < size__5522__auto__)){\nvar vec__64254 = cljs.core._nth(c__5521__auto__,i__64252);\nvar _ = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__64254,(0),null);\nvar ___$1 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__64254,(1),null);\nvar map__64257 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__64254,(2),null);\nvar map__64257__$1 = cljs.core.__destructure_map(map__64257);\nvar ag_name = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__64257__$1,new cljs.core.Keyword(null,\"name\",\"name\",1843675177));\ncljs.core.chunk_append(b__64253,ag_name);\n\nvar G__64783 = (i__64252 + (1));\ni__64252 = G__64783;\ncontinue;\n} else {\nreturn true;\n}\nbreak;\n}\n})()){\nreturn cljs.core.chunk_cons(cljs.core.chunk(b__64253),metabase$mbql$util$iter__64250(cljs.core.chunk_rest(s__64251__$2)));\n} else {\nreturn cljs.core.chunk_cons(cljs.core.chunk(b__64253),null);\n}\n} else {\nvar vec__64258 = cljs.core.first(s__64251__$2);\nvar _ = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__64258,(0),null);\nvar ___$1 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__64258,(1),null);\nvar map__64261 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__64258,(2),null);\nvar map__64261__$1 = cljs.core.__destructure_map(map__64261);\nvar ag_name = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__64261__$1,new cljs.core.Keyword(null,\"name\",\"name\",1843675177));\nreturn cljs.core.cons(ag_name,metabase$mbql$util$iter__64250(cljs.core.rest(s__64251__$2)));\n}\n} else {\nreturn null;\n}\nbreak;\n}\n}),null,null));\n});\nreturn iter__5523__auto__(clauses);\n})());\n}),\"sequence of named aggregations with unique names\");\nvar ufv64263_64784 = schema.utils.use_fn_validation;\nvar output_schema64262_64785 = metabase.mbql.util.UniquelyNamedAggregations;\nvar input_schema64264_64786 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [schema.core.one(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [metabase.mbql.util.NamedAggregation], null),cljs.core.with_meta(new cljs.core.Symbol(null,\"named-aggregations\",\"named-aggregations\",-771029585,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"schema\",\"schema\",-1582001791),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,\"NamedAggregation\",\"NamedAggregation\",1856050571,null)], null)], null)))], null);\nvar input_checker64265_64787 = (new cljs.core.Delay((function (){\nreturn schema.core.checker(input_schema64264_64786);\n}),null));\nvar output_checker64266_64788 = (new cljs.core.Delay((function (){\nreturn schema.core.checker(output_schema64262_64785);\n}),null));\nvar ret__51869__auto___64792 = /**\n * Inputs: [named-aggregations :- [NamedAggregation]]\n *   Returns: UniquelyNamedAggregations\n * \n *   Make the names of a sequence of named aggregations unique by adding suffixes such as `_2`.\n */\nmetabase.mbql.util.uniquify_named_aggregations = (function metabase$mbql$util$uniquify_named_aggregations(G__64267){\nvar validate__50237__auto__ = cljs.core.deref(ufv64263_64784);\nif(cljs.core.truth_(validate__50237__auto__)){\nvar args__50238__auto___64793 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [G__64267], null);\nif(cljs.core.truth_(schema.core.fn_validator)){\nvar G__64268_64794 = new cljs.core.Keyword(null,\"input\",\"input\",556931961);\nvar G__64269_64795 = cljs.core.with_meta(new cljs.core.Symbol(null,\"uniquify-named-aggregations\",\"uniquify-named-aggregations\",1690441863,null),new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"schema\",\"schema\",-1582001791),new cljs.core.Symbol(null,\"UniquelyNamedAggregations\",\"UniquelyNamedAggregations\",119403282,null),new cljs.core.Keyword(null,\"doc\",\"doc\",1913296891),\"Make the names of a sequence of named aggregations unique by adding suffixes such as `_2`.\"], null));\nvar G__64270_64796 = input_schema64264_64786;\nvar G__64271_64797 = cljs.core.deref(input_checker64265_64787);\nvar G__64272_64798 = args__50238__auto___64793;\n(schema.core.fn_validator.cljs$core$IFn$_invoke$arity$5 ? schema.core.fn_validator.cljs$core$IFn$_invoke$arity$5(G__64268_64794,G__64269_64795,G__64270_64796,G__64271_64797,G__64272_64798) : schema.core.fn_validator.call(null,G__64268_64794,G__64269_64795,G__64270_64796,G__64271_64797,G__64272_64798));\n} else {\nvar temp__5804__auto___64799 = (function (){var fexpr__64273 = cljs.core.deref(input_checker64265_64787);\nreturn (fexpr__64273.cljs$core$IFn$_invoke$arity$1 ? fexpr__64273.cljs$core$IFn$_invoke$arity$1(args__50238__auto___64793) : fexpr__64273.call(null,args__50238__auto___64793));\n})();\nif(cljs.core.truth_(temp__5804__auto___64799)){\nvar error__50239__auto___64800 = temp__5804__auto___64799;\nthrow cljs.core.ex_info.cljs$core$IFn$_invoke$arity$2(schema.utils.format_STAR_.cljs$core$IFn$_invoke$arity$variadic(\"Input to %s does not match schema: \\n\\n\\t \\u001B[0;33m  %s \\u001B[0m \\n\\n\",cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([cljs.core.with_meta(new cljs.core.Symbol(null,\"uniquify-named-aggregations\",\"uniquify-named-aggregations\",1690441863,null),new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"schema\",\"schema\",-1582001791),new cljs.core.Symbol(null,\"UniquelyNamedAggregations\",\"UniquelyNamedAggregations\",119403282,null),new cljs.core.Keyword(null,\"doc\",\"doc\",1913296891),\"Make the names of a sequence of named aggregations unique by adding suffixes such as `_2`.\"], null)),cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([error__50239__auto___64800], 0))], 0)),new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null,\"type\",\"type\",1174270348),new cljs.core.Keyword(\"schema.core\",\"error\",\"schema.core/error\",1991454308),new cljs.core.Keyword(null,\"schema\",\"schema\",-1582001791),input_schema64264_64786,new cljs.core.Keyword(null,\"value\",\"value\",305978217),args__50238__auto___64793,new cljs.core.Keyword(null,\"error\",\"error\",-978969032),error__50239__auto___64800], null));\n} else {\n}\n}\n} else {\n}\n\nvar o__50240__auto__ = (function (){var named_aggregations = G__64267;\nwhile(true){\nvar unique_names = metabase.mbql.util.uniquify_names((function (){var iter__5523__auto__ = ((function (validate__50237__auto__,ufv64263_64784,output_schema64262_64785,input_schema64264_64786,input_checker64265_64787,output_checker64266_64788){\nreturn (function metabase$mbql$util$uniquify_named_aggregations_$_iter__64274(s__64275){\nreturn (new cljs.core.LazySeq(null,(function (){\nvar s__64275__$1 = s__64275;\nwhile(true){\nvar temp__5804__auto__ = cljs.core.seq(s__64275__$1);\nif(temp__5804__auto__){\nvar s__64275__$2 = temp__5804__auto__;\nif(cljs.core.chunked_seq_QMARK_(s__64275__$2)){\nvar c__5521__auto__ = cljs.core.chunk_first(s__64275__$2);\nvar size__5522__auto__ = cljs.core.count(c__5521__auto__);\nvar b__64277 = cljs.core.chunk_buffer(size__5522__auto__);\nif((function (){var i__64276 = (0);\nwhile(true){\nif((i__64276 < size__5522__auto__)){\nvar vec__64278 = cljs.core._nth(c__5521__auto__,i__64276);\nvar _ = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__64278,(0),null);\nvar _wrapped_ag = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__64278,(1),null);\nvar map__64281 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__64278,(2),null);\nvar map__64281__$1 = cljs.core.__destructure_map(map__64281);\nvar ag_name = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__64281__$1,new cljs.core.Keyword(null,\"name\",\"name\",1843675177));\ncljs.core.chunk_append(b__64277,ag_name);\n\nvar G__64806 = (i__64276 + (1));\ni__64276 = G__64806;\ncontinue;\n} else {\nreturn true;\n}\nbreak;\n}\n})()){\nreturn cljs.core.chunk_cons(cljs.core.chunk(b__64277),metabase$mbql$util$uniquify_named_aggregations_$_iter__64274(cljs.core.chunk_rest(s__64275__$2)));\n} else {\nreturn cljs.core.chunk_cons(cljs.core.chunk(b__64277),null);\n}\n} else {\nvar vec__64282 = cljs.core.first(s__64275__$2);\nvar _ = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__64282,(0),null);\nvar _wrapped_ag = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__64282,(1),null);\nvar map__64285 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__64282,(2),null);\nvar map__64285__$1 = cljs.core.__destructure_map(map__64285);\nvar ag_name = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__64285__$1,new cljs.core.Keyword(null,\"name\",\"name\",1843675177));\nreturn cljs.core.cons(ag_name,metabase$mbql$util$uniquify_named_aggregations_$_iter__64274(cljs.core.rest(s__64275__$2)));\n}\n} else {\nreturn null;\n}\nbreak;\n}\n}),null,null));\n});})(validate__50237__auto__,ufv64263_64784,output_schema64262_64785,input_schema64264_64786,input_checker64265_64787,output_checker64266_64788))\n;\nreturn iter__5523__auto__(named_aggregations);\n})());\nreturn cljs.core.map.cljs$core$IFn$_invoke$arity$3(((function (unique_names,validate__50237__auto__,ufv64263_64784,output_schema64262_64785,input_schema64264_64786,input_checker64265_64787,output_checker64266_64788){\nreturn (function (p__64286,unique_name){\nvar vec__64287 = p__64286;\nvar _ = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__64287,(0),null);\nvar wrapped_ag = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__64287,(1),null);\nvar options = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__64287,(2),null);\nreturn new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"aggregation-options\",\"aggregation-options\",-1904917550),wrapped_ag,cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(options,new cljs.core.Keyword(null,\"name\",\"name\",1843675177),unique_name)], null);\n});})(unique_names,validate__50237__auto__,ufv64263_64784,output_schema64262_64785,input_schema64264_64786,input_checker64265_64787,output_checker64266_64788))\n,named_aggregations,unique_names);\nbreak;\n}\n})();\nif(cljs.core.truth_(validate__50237__auto__)){\nif(cljs.core.truth_(schema.core.fn_validator)){\nvar G__64290_64807 = new cljs.core.Keyword(null,\"output\",\"output\",-1105869043);\nvar G__64291_64808 = cljs.core.with_meta(new cljs.core.Symbol(null,\"uniquify-named-aggregations\",\"uniquify-named-aggregations\",1690441863,null),new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"schema\",\"schema\",-1582001791),new cljs.core.Symbol(null,\"UniquelyNamedAggregations\",\"UniquelyNamedAggregations\",119403282,null),new cljs.core.Keyword(null,\"doc\",\"doc\",1913296891),\"Make the names of a sequence of named aggregations unique by adding suffixes such as `_2`.\"], null));\nvar G__64292_64810 = output_schema64262_64785;\nvar G__64293_64811 = cljs.core.deref(output_checker64266_64788);\nvar G__64294_64812 = o__50240__auto__;\n(schema.core.fn_validator.cljs$core$IFn$_invoke$arity$5 ? schema.core.fn_validator.cljs$core$IFn$_invoke$arity$5(G__64290_64807,G__64291_64808,G__64292_64810,G__64293_64811,G__64294_64812) : schema.core.fn_validator.call(null,G__64290_64807,G__64291_64808,G__64292_64810,G__64293_64811,G__64294_64812));\n} else {\nvar temp__5804__auto___64813 = (function (){var fexpr__64295 = cljs.core.deref(output_checker64266_64788);\nreturn (fexpr__64295.cljs$core$IFn$_invoke$arity$1 ? fexpr__64295.cljs$core$IFn$_invoke$arity$1(o__50240__auto__) : fexpr__64295.call(null,o__50240__auto__));\n})();\nif(cljs.core.truth_(temp__5804__auto___64813)){\nvar error__50239__auto___64814 = temp__5804__auto___64813;\nthrow cljs.core.ex_info.cljs$core$IFn$_invoke$arity$2(schema.utils.format_STAR_.cljs$core$IFn$_invoke$arity$variadic(\"Output of %s does not match schema: \\n\\n\\t \\u001B[0;33m  %s \\u001B[0m \\n\\n\",cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([cljs.core.with_meta(new cljs.core.Symbol(null,\"uniquify-named-aggregations\",\"uniquify-named-aggregations\",1690441863,null),new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"schema\",\"schema\",-1582001791),new cljs.core.Symbol(null,\"UniquelyNamedAggregations\",\"UniquelyNamedAggregations\",119403282,null),new cljs.core.Keyword(null,\"doc\",\"doc\",1913296891),\"Make the names of a sequence of named aggregations unique by adding suffixes such as `_2`.\"], null)),cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([error__50239__auto___64814], 0))], 0)),new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null,\"type\",\"type\",1174270348),new cljs.core.Keyword(\"schema.core\",\"error\",\"schema.core/error\",1991454308),new cljs.core.Keyword(null,\"schema\",\"schema\",-1582001791),output_schema64262_64785,new cljs.core.Keyword(null,\"value\",\"value\",305978217),o__50240__auto__,new cljs.core.Keyword(null,\"error\",\"error\",-978969032),error__50239__auto___64814], null));\n} else {\n}\n}\n} else {\n}\n\nreturn o__50240__auto__;\n});\nschema.utils.declare_class_schema_BANG_(schema.utils.fn_schema_bearer(metabase.mbql.util.uniquify_named_aggregations),schema.core.__GT_FnSchema(output_schema64262_64785,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [input_schema64264_64786], null)));\n\nvar ufv64297_64816 = schema.utils.use_fn_validation;\nvar output_schema64296_64817 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [metabase.mbql.util.NamedAggregation], null);\nvar input_schema64298_64818 = new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [schema.core.one(schema.core.pred.cljs$core$IFn$_invoke$arity$1(cljs.core.fn_QMARK_),cljs.core.with_meta(new cljs.core.Symbol(null,\"aggregation->name-fn\",\"aggregation->name-fn\",596978962,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"schema\",\"schema\",-1582001791),cljs.core.list(new cljs.core.Symbol(\"s\",\"pred\",\"s/pred\",-727014287,null),new cljs.core.Symbol(null,\"fn?\",\"fn?\",1820990818,null))], null))),schema.core.one(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [metabase.mbql.schema.Aggregation], null),cljs.core.with_meta(new cljs.core.Symbol(null,\"aggregations\",\"aggregations\",559417189,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"schema\",\"schema\",-1582001791),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(\"mbql.s\",\"Aggregation\",\"mbql.s/Aggregation\",124504849,null)], null)], null)))], null);\nvar input_checker64299_64819 = (new cljs.core.Delay((function (){\nreturn schema.core.checker(input_schema64298_64818);\n}),null));\nvar output_checker64300_64820 = (new cljs.core.Delay((function (){\nreturn schema.core.checker(output_schema64296_64817);\n}),null));\nvar ret__51869__auto___64821 = /**\n * Inputs: [aggregation->name-fn :- (s/pred fn?) aggregations :- [mbql.s/Aggregation]]\n *   Returns: [NamedAggregation]\n * \n *   Wrap every aggregation clause in an `:aggregation-options` clause, using the name returned\n *   by `(aggregation->name-fn ag-clause)` as names for any clauses that do not already have a `:name` in\n *   `:aggregation-options`.\n * \n *  (pre-alias-aggregations annotate/aggregation-name\n *   [[:count] [:count] [:aggregation-options [:sum [:field 1 nil] {:name \"Sum-41\"}]])\n *  ;; -> [[:aggregation-options [:count] {:name \"count\"}]\n *         [:aggregation-options [:count] {:name \"count\"}]\n *         [:aggregation-options [:sum [:field 1 nil]] {:name \"Sum-41\"}]]\n * \n *   Most often, `aggregation->name-fn` will be something like `annotate/aggregation-name`, but for purposes of keeping\n *   the `metabase.mbql` module seperate from the `metabase.query-processor` code we'll let you pass that in yourself.\n */\nmetabase.mbql.util.pre_alias_aggregations = (function metabase$mbql$util$pre_alias_aggregations(G__64301,G__64302){\nvar validate__50237__auto__ = cljs.core.deref(ufv64297_64816);\nif(cljs.core.truth_(validate__50237__auto__)){\nvar args__50238__auto___64822 = new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [G__64301,G__64302], null);\nif(cljs.core.truth_(schema.core.fn_validator)){\nvar G__64303_64823 = new cljs.core.Keyword(null,\"input\",\"input\",556931961);\nvar G__64304_64824 = cljs.core.with_meta(new cljs.core.Symbol(null,\"pre-alias-aggregations\",\"pre-alias-aggregations\",-480645200,null),new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null,\"schema\",\"schema\",-1582001791),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,\"NamedAggregation\",\"NamedAggregation\",1856050571,null)], null),new cljs.core.Keyword(\"style\",\"indent\",\"style/indent\",-39468490),(1),new cljs.core.Keyword(null,\"doc\",\"doc\",1913296891),\"Wrap every aggregation clause in an `:aggregation-options` clause, using the name returned\\n  by `(aggregation->name-fn ag-clause)` as names for any clauses that do not already have a `:name` in\\n  `:aggregation-options`.\\n\\n    (pre-alias-aggregations annotate/aggregation-name\\n     [[:count] [:count] [:aggregation-options [:sum [:field 1 nil] {:name \\\"Sum-41\\\"}]])\\n    ;; -> [[:aggregation-options [:count] {:name \\\"count\\\"}]\\n           [:aggregation-options [:count] {:name \\\"count\\\"}]\\n           [:aggregation-options [:sum [:field 1 nil]] {:name \\\"Sum-41\\\"}]]\\n\\n  Most often, `aggregation->name-fn` will be something like `annotate/aggregation-name`, but for purposes of keeping\\n  the `metabase.mbql` module seperate from the `metabase.query-processor` code we'll let you pass that in yourself.\"], null));\nvar G__64305_64825 = input_schema64298_64818;\nvar G__64306_64826 = cljs.core.deref(input_checker64299_64819);\nvar G__64307_64827 = args__50238__auto___64822;\n(schema.core.fn_validator.cljs$core$IFn$_invoke$arity$5 ? schema.core.fn_validator.cljs$core$IFn$_invoke$arity$5(G__64303_64823,G__64304_64824,G__64305_64825,G__64306_64826,G__64307_64827) : schema.core.fn_validator.call(null,G__64303_64823,G__64304_64824,G__64305_64825,G__64306_64826,G__64307_64827));\n} else {\nvar temp__5804__auto___64829 = (function (){var fexpr__64308 = cljs.core.deref(input_checker64299_64819);\nreturn (fexpr__64308.cljs$core$IFn$_invoke$arity$1 ? fexpr__64308.cljs$core$IFn$_invoke$arity$1(args__50238__auto___64822) : fexpr__64308.call(null,args__50238__auto___64822));\n})();\nif(cljs.core.truth_(temp__5804__auto___64829)){\nvar error__50239__auto___64830 = temp__5804__auto___64829;\nthrow cljs.core.ex_info.cljs$core$IFn$_invoke$arity$2(schema.utils.format_STAR_.cljs$core$IFn$_invoke$arity$variadic(\"Input to %s does not match schema: \\n\\n\\t \\u001B[0;33m  %s \\u001B[0m \\n\\n\",cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([cljs.core.with_meta(new cljs.core.Symbol(null,\"pre-alias-aggregations\",\"pre-alias-aggregations\",-480645200,null),new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null,\"schema\",\"schema\",-1582001791),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,\"NamedAggregation\",\"NamedAggregation\",1856050571,null)], null),new cljs.core.Keyword(\"style\",\"indent\",\"style/indent\",-39468490),(1),new cljs.core.Keyword(null,\"doc\",\"doc\",1913296891),\"Wrap every aggregation clause in an `:aggregation-options` clause, using the name returned\\n  by `(aggregation->name-fn ag-clause)` as names for any clauses that do not already have a `:name` in\\n  `:aggregation-options`.\\n\\n    (pre-alias-aggregations annotate/aggregation-name\\n     [[:count] [:count] [:aggregation-options [:sum [:field 1 nil] {:name \\\"Sum-41\\\"}]])\\n    ;; -> [[:aggregation-options [:count] {:name \\\"count\\\"}]\\n           [:aggregation-options [:count] {:name \\\"count\\\"}]\\n           [:aggregation-options [:sum [:field 1 nil]] {:name \\\"Sum-41\\\"}]]\\n\\n  Most often, `aggregation->name-fn` will be something like `annotate/aggregation-name`, but for purposes of keeping\\n  the `metabase.mbql` module seperate from the `metabase.query-processor` code we'll let you pass that in yourself.\"], null)),cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([error__50239__auto___64830], 0))], 0)),new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null,\"type\",\"type\",1174270348),new cljs.core.Keyword(\"schema.core\",\"error\",\"schema.core/error\",1991454308),new cljs.core.Keyword(null,\"schema\",\"schema\",-1582001791),input_schema64298_64818,new cljs.core.Keyword(null,\"value\",\"value\",305978217),args__50238__auto___64822,new cljs.core.Keyword(null,\"error\",\"error\",-978969032),error__50239__auto___64830], null));\n} else {\n}\n}\n} else {\n}\n\nvar o__50240__auto__ = (function (){var aggregation__GT_name_fn = G__64301;\nvar aggregations = G__64302;\nwhile(true){\nreturn ((function (validate__50237__auto__,ufv64297_64816,output_schema64296_64817,input_schema64298_64818,input_checker64299_64819,output_checker64300_64820){\nreturn (function metabase$mbql$util$pre_alias_aggregations_$_replace_64309(_AMPERSAND_parents,_AMPERSAND_match){\ntry{if(((cljs.core.vector_QMARK_(_AMPERSAND_match)) && ((cljs.core.count(_AMPERSAND_match) === 3)))){\ntry{var _AMPERSAND_match_0__64315 = cljs.core.nth.cljs$core$IFn$_invoke$arity$2(_AMPERSAND_match,(0));\nif(cljs.core.keyword_identical_QMARK_(_AMPERSAND_match_0__64315,new cljs.core.Keyword(null,\"aggregation-options\",\"aggregation-options\",-1904917550))){\ntry{var _AMPERSAND_match_2__64317 = cljs.core.nth.cljs$core$IFn$_invoke$arity$2(_AMPERSAND_match,(2));\nif(cljs.core.truth_(new cljs.core.Keyword(null,\"name\",\"name\",1843675177).cljs$core$IFn$_invoke$arity$1(_AMPERSAND_match_2__64317))){\nreturn _AMPERSAND_match;\n} else {\nthrow cljs.core.match.backtrack;\n\n}\n}catch (e64326){if((e64326 instanceof Error)){\nvar e__62528__auto__ = e64326;\nif((e__62528__auto__ === cljs.core.match.backtrack)){\nvar options = cljs.core.nth.cljs$core$IFn$_invoke$arity$2(_AMPERSAND_match,(2));\nvar wrapped_ag = cljs.core.nth.cljs$core$IFn$_invoke$arity$2(_AMPERSAND_match,(1));\nreturn new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"aggregation-options\",\"aggregation-options\",-1904917550),wrapped_ag,cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(options,new cljs.core.Keyword(null,\"name\",\"name\",1843675177),(aggregation__GT_name_fn.cljs$core$IFn$_invoke$arity$1 ? aggregation__GT_name_fn.cljs$core$IFn$_invoke$arity$1(wrapped_ag) : aggregation__GT_name_fn.call(null,wrapped_ag)))], null);\n} else {\nthrow e__62528__auto__;\n}\n} else {\nthrow e64326;\n\n}\n}} else {\nthrow cljs.core.match.backtrack;\n\n}\n}catch (e64325){if((e64325 instanceof Error)){\nvar e__62528__auto__ = e64325;\nif((e__62528__auto__ === cljs.core.match.backtrack)){\nthrow cljs.core.match.backtrack;\n} else {\nthrow e__62528__auto__;\n}\n} else {\nthrow e64325;\n\n}\n}} else {\nthrow cljs.core.match.backtrack;\n\n}\n}catch (e64321){if((e64321 instanceof Error)){\nvar e__62528__auto__ = e64321;\nif((e__62528__auto__ === cljs.core.match.backtrack)){\ntry{if(((cljs.core.vector_QMARK_(_AMPERSAND_match)) && ((cljs.core.count(_AMPERSAND_match) >= (1))))){\ntry{var _AMPERSAND_match_left__64318 = cljs.core.subvec.cljs$core$IFn$_invoke$arity$3(_AMPERSAND_match,(0),(1));\nif(((cljs.core.vector_QMARK_(_AMPERSAND_match_left__64318)) && ((cljs.core.count(_AMPERSAND_match_left__64318) === (1))))){\ntry{var _AMPERSAND_match_left__64318_0__64320 = cljs.core.nth.cljs$core$IFn$_invoke$arity$2(_AMPERSAND_match_left__64318,(0));\nif((_AMPERSAND_match_left__64318_0__64320 instanceof cljs.core.Keyword)){\nreturn new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"aggregation-options\",\"aggregation-options\",-1904917550),_AMPERSAND_match,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"name\",\"name\",1843675177),(aggregation__GT_name_fn.cljs$core$IFn$_invoke$arity$1 ? aggregation__GT_name_fn.cljs$core$IFn$_invoke$arity$1(_AMPERSAND_match) : aggregation__GT_name_fn.call(null,_AMPERSAND_match))], null)], null);\n} else {\nthrow cljs.core.match.backtrack;\n\n}\n}catch (e64324){if((e64324 instanceof Error)){\nvar e__62528__auto____$1 = e64324;\nif((e__62528__auto____$1 === cljs.core.match.backtrack)){\nthrow cljs.core.match.backtrack;\n} else {\nthrow e__62528__auto____$1;\n}\n} else {\nthrow e64324;\n\n}\n}} else {\nthrow cljs.core.match.backtrack;\n\n}\n}catch (e64323){if((e64323 instanceof Error)){\nvar e__62528__auto____$1 = e64323;\nif((e__62528__auto____$1 === cljs.core.match.backtrack)){\nthrow cljs.core.match.backtrack;\n} else {\nthrow e__62528__auto____$1;\n}\n} else {\nthrow e64323;\n\n}\n}} else {\nthrow cljs.core.match.backtrack;\n\n}\n}catch (e64322){if((e64322 instanceof Error)){\nvar e__62528__auto____$1 = e64322;\nif((e__62528__auto____$1 === cljs.core.match.backtrack)){\nreturn metabase.mbql.util.match.impl.replace_in_collection(metabase$mbql$util$pre_alias_aggregations_$_replace_64309,_AMPERSAND_parents,_AMPERSAND_match);\n} else {\nthrow e__62528__auto____$1;\n}\n} else {\nthrow e64322;\n\n}\n}} else {\nthrow e__62528__auto__;\n}\n} else {\nthrow e64321;\n\n}\n}});})(validate__50237__auto__,ufv64297_64816,output_schema64296_64817,input_schema64298_64818,input_checker64299_64819,output_checker64300_64820))\n(cljs.core.PersistentVector.EMPTY,aggregations);\nbreak;\n}\n})();\nif(cljs.core.truth_(validate__50237__auto__)){\nif(cljs.core.truth_(schema.core.fn_validator)){\nvar G__64327_64832 = new cljs.core.Keyword(null,\"output\",\"output\",-1105869043);\nvar G__64328_64833 = cljs.core.with_meta(new cljs.core.Symbol(null,\"pre-alias-aggregations\",\"pre-alias-aggregations\",-480645200,null),new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null,\"schema\",\"schema\",-1582001791),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,\"NamedAggregation\",\"NamedAggregation\",1856050571,null)], null),new cljs.core.Keyword(\"style\",\"indent\",\"style/indent\",-39468490),(1),new cljs.core.Keyword(null,\"doc\",\"doc\",1913296891),\"Wrap every aggregation clause in an `:aggregation-options` clause, using the name returned\\n  by `(aggregation->name-fn ag-clause)` as names for any clauses that do not already have a `:name` in\\n  `:aggregation-options`.\\n\\n    (pre-alias-aggregations annotate/aggregation-name\\n     [[:count] [:count] [:aggregation-options [:sum [:field 1 nil] {:name \\\"Sum-41\\\"}]])\\n    ;; -> [[:aggregation-options [:count] {:name \\\"count\\\"}]\\n           [:aggregation-options [:count] {:name \\\"count\\\"}]\\n           [:aggregation-options [:sum [:field 1 nil]] {:name \\\"Sum-41\\\"}]]\\n\\n  Most often, `aggregation->name-fn` will be something like `annotate/aggregation-name`, but for purposes of keeping\\n  the `metabase.mbql` module seperate from the `metabase.query-processor` code we'll let you pass that in yourself.\"], null));\nvar G__64329_64834 = output_schema64296_64817;\nvar G__64330_64835 = cljs.core.deref(output_checker64300_64820);\nvar G__64331_64836 = o__50240__auto__;\n(schema.core.fn_validator.cljs$core$IFn$_invoke$arity$5 ? schema.core.fn_validator.cljs$core$IFn$_invoke$arity$5(G__64327_64832,G__64328_64833,G__64329_64834,G__64330_64835,G__64331_64836) : schema.core.fn_validator.call(null,G__64327_64832,G__64328_64833,G__64329_64834,G__64330_64835,G__64331_64836));\n} else {\nvar temp__5804__auto___64837 = (function (){var fexpr__64332 = cljs.core.deref(output_checker64300_64820);\nreturn (fexpr__64332.cljs$core$IFn$_invoke$arity$1 ? fexpr__64332.cljs$core$IFn$_invoke$arity$1(o__50240__auto__) : fexpr__64332.call(null,o__50240__auto__));\n})();\nif(cljs.core.truth_(temp__5804__auto___64837)){\nvar error__50239__auto___64838 = temp__5804__auto___64837;\nthrow cljs.core.ex_info.cljs$core$IFn$_invoke$arity$2(schema.utils.format_STAR_.cljs$core$IFn$_invoke$arity$variadic(\"Output of %s does not match schema: \\n\\n\\t \\u001B[0;33m  %s \\u001B[0m \\n\\n\",cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([cljs.core.with_meta(new cljs.core.Symbol(null,\"pre-alias-aggregations\",\"pre-alias-aggregations\",-480645200,null),new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null,\"schema\",\"schema\",-1582001791),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,\"NamedAggregation\",\"NamedAggregation\",1856050571,null)], null),new cljs.core.Keyword(\"style\",\"indent\",\"style/indent\",-39468490),(1),new cljs.core.Keyword(null,\"doc\",\"doc\",1913296891),\"Wrap every aggregation clause in an `:aggregation-options` clause, using the name returned\\n  by `(aggregation->name-fn ag-clause)` as names for any clauses that do not already have a `:name` in\\n  `:aggregation-options`.\\n\\n    (pre-alias-aggregations annotate/aggregation-name\\n     [[:count] [:count] [:aggregation-options [:sum [:field 1 nil] {:name \\\"Sum-41\\\"}]])\\n    ;; -> [[:aggregation-options [:count] {:name \\\"count\\\"}]\\n           [:aggregation-options [:count] {:name \\\"count\\\"}]\\n           [:aggregation-options [:sum [:field 1 nil]] {:name \\\"Sum-41\\\"}]]\\n\\n  Most often, `aggregation->name-fn` will be something like `annotate/aggregation-name`, but for purposes of keeping\\n  the `metabase.mbql` module seperate from the `metabase.query-processor` code we'll let you pass that in yourself.\"], null)),cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([error__50239__auto___64838], 0))], 0)),new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null,\"type\",\"type\",1174270348),new cljs.core.Keyword(\"schema.core\",\"error\",\"schema.core/error\",1991454308),new cljs.core.Keyword(null,\"schema\",\"schema\",-1582001791),output_schema64296_64817,new cljs.core.Keyword(null,\"value\",\"value\",305978217),o__50240__auto__,new cljs.core.Keyword(null,\"error\",\"error\",-978969032),error__50239__auto___64838], null));\n} else {\n}\n}\n} else {\n}\n\nreturn o__50240__auto__;\n});\nschema.utils.declare_class_schema_BANG_(schema.utils.fn_schema_bearer(metabase.mbql.util.pre_alias_aggregations),schema.core.__GT_FnSchema(output_schema64296_64817,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [input_schema64298_64818], null)));\n\nvar ufv64334_64840 = schema.utils.use_fn_validation;\nvar output_schema64333_64841 = metabase.mbql.util.UniquelyNamedAggregations;\nvar input_schema64335_64842 = new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [schema.core.one(schema.core.pred.cljs$core$IFn$_invoke$arity$1(cljs.core.fn_QMARK_),cljs.core.with_meta(new cljs.core.Symbol(null,\"aggregation->name-fn\",\"aggregation->name-fn\",596978962,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"schema\",\"schema\",-1582001791),cljs.core.list(new cljs.core.Symbol(\"s\",\"pred\",\"s/pred\",-727014287,null),new cljs.core.Symbol(null,\"fn?\",\"fn?\",1820990818,null))], null))),schema.core.one(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [metabase.mbql.schema.Aggregation], null),cljs.core.with_meta(new cljs.core.Symbol(null,\"aggregations\",\"aggregations\",559417189,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"schema\",\"schema\",-1582001791),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(\"mbql.s\",\"Aggregation\",\"mbql.s/Aggregation\",124504849,null)], null)], null)))], null);\nvar input_checker64336_64843 = (new cljs.core.Delay((function (){\nreturn schema.core.checker(input_schema64335_64842);\n}),null));\nvar output_checker64337_64844 = (new cljs.core.Delay((function (){\nreturn schema.core.checker(output_schema64333_64841);\n}),null));\nvar ret__51869__auto___64845 = /**\n * Inputs: [aggregation->name-fn :- (s/pred fn?) aggregations :- [mbql.s/Aggregation]]\n *   Returns: UniquelyNamedAggregations\n * \n *   Wrap every aggregation clause in a `:named` clause with a unique name. Combines `pre-alias-aggregations` with\n *   `uniquify-named-aggregations`.\n */\nmetabase.mbql.util.pre_alias_and_uniquify_aggregations = (function metabase$mbql$util$pre_alias_and_uniquify_aggregations(G__64338,G__64339){\nvar validate__50237__auto__ = cljs.core.deref(ufv64334_64840);\nif(cljs.core.truth_(validate__50237__auto__)){\nvar args__50238__auto___64846 = new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [G__64338,G__64339], null);\nif(cljs.core.truth_(schema.core.fn_validator)){\nvar G__64340_64847 = new cljs.core.Keyword(null,\"input\",\"input\",556931961);\nvar G__64341_64848 = cljs.core.with_meta(new cljs.core.Symbol(null,\"pre-alias-and-uniquify-aggregations\",\"pre-alias-and-uniquify-aggregations\",-1180929281,null),new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null,\"schema\",\"schema\",-1582001791),new cljs.core.Symbol(null,\"UniquelyNamedAggregations\",\"UniquelyNamedAggregations\",119403282,null),new cljs.core.Keyword(\"style\",\"indent\",\"style/indent\",-39468490),(1),new cljs.core.Keyword(null,\"doc\",\"doc\",1913296891),\"Wrap every aggregation clause in a `:named` clause with a unique name. Combines `pre-alias-aggregations` with\\n  `uniquify-named-aggregations`.\"], null));\nvar G__64342_64849 = input_schema64335_64842;\nvar G__64343_64850 = cljs.core.deref(input_checker64336_64843);\nvar G__64344_64851 = args__50238__auto___64846;\n(schema.core.fn_validator.cljs$core$IFn$_invoke$arity$5 ? schema.core.fn_validator.cljs$core$IFn$_invoke$arity$5(G__64340_64847,G__64341_64848,G__64342_64849,G__64343_64850,G__64344_64851) : schema.core.fn_validator.call(null,G__64340_64847,G__64341_64848,G__64342_64849,G__64343_64850,G__64344_64851));\n} else {\nvar temp__5804__auto___64853 = (function (){var fexpr__64345 = cljs.core.deref(input_checker64336_64843);\nreturn (fexpr__64345.cljs$core$IFn$_invoke$arity$1 ? fexpr__64345.cljs$core$IFn$_invoke$arity$1(args__50238__auto___64846) : fexpr__64345.call(null,args__50238__auto___64846));\n})();\nif(cljs.core.truth_(temp__5804__auto___64853)){\nvar error__50239__auto___64854 = temp__5804__auto___64853;\nthrow cljs.core.ex_info.cljs$core$IFn$_invoke$arity$2(schema.utils.format_STAR_.cljs$core$IFn$_invoke$arity$variadic(\"Input to %s does not match schema: \\n\\n\\t \\u001B[0;33m  %s \\u001B[0m \\n\\n\",cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([cljs.core.with_meta(new cljs.core.Symbol(null,\"pre-alias-and-uniquify-aggregations\",\"pre-alias-and-uniquify-aggregations\",-1180929281,null),new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null,\"schema\",\"schema\",-1582001791),new cljs.core.Symbol(null,\"UniquelyNamedAggregations\",\"UniquelyNamedAggregations\",119403282,null),new cljs.core.Keyword(\"style\",\"indent\",\"style/indent\",-39468490),(1),new cljs.core.Keyword(null,\"doc\",\"doc\",1913296891),\"Wrap every aggregation clause in a `:named` clause with a unique name. Combines `pre-alias-aggregations` with\\n  `uniquify-named-aggregations`.\"], null)),cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([error__50239__auto___64854], 0))], 0)),new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null,\"type\",\"type\",1174270348),new cljs.core.Keyword(\"schema.core\",\"error\",\"schema.core/error\",1991454308),new cljs.core.Keyword(null,\"schema\",\"schema\",-1582001791),input_schema64335_64842,new cljs.core.Keyword(null,\"value\",\"value\",305978217),args__50238__auto___64846,new cljs.core.Keyword(null,\"error\",\"error\",-978969032),error__50239__auto___64854], null));\n} else {\n}\n}\n} else {\n}\n\nvar o__50240__auto__ = (function (){var aggregation__GT_name_fn = G__64338;\nvar aggregations = G__64339;\nwhile(true){\nreturn metabase.mbql.util.uniquify_named_aggregations(metabase.mbql.util.pre_alias_aggregations(aggregation__GT_name_fn,aggregations));\nbreak;\n}\n})();\nif(cljs.core.truth_(validate__50237__auto__)){\nif(cljs.core.truth_(schema.core.fn_validator)){\nvar G__64346_64855 = new cljs.core.Keyword(null,\"output\",\"output\",-1105869043);\nvar G__64347_64856 = cljs.core.with_meta(new cljs.core.Symbol(null,\"pre-alias-and-uniquify-aggregations\",\"pre-alias-and-uniquify-aggregations\",-1180929281,null),new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null,\"schema\",\"schema\",-1582001791),new cljs.core.Symbol(null,\"UniquelyNamedAggregations\",\"UniquelyNamedAggregations\",119403282,null),new cljs.core.Keyword(\"style\",\"indent\",\"style/indent\",-39468490),(1),new cljs.core.Keyword(null,\"doc\",\"doc\",1913296891),\"Wrap every aggregation clause in a `:named` clause with a unique name. Combines `pre-alias-aggregations` with\\n  `uniquify-named-aggregations`.\"], null));\nvar G__64348_64857 = output_schema64333_64841;\nvar G__64349_64858 = cljs.core.deref(output_checker64337_64844);\nvar G__64350_64859 = o__50240__auto__;\n(schema.core.fn_validator.cljs$core$IFn$_invoke$arity$5 ? schema.core.fn_validator.cljs$core$IFn$_invoke$arity$5(G__64346_64855,G__64347_64856,G__64348_64857,G__64349_64858,G__64350_64859) : schema.core.fn_validator.call(null,G__64346_64855,G__64347_64856,G__64348_64857,G__64349_64858,G__64350_64859));\n} else {\nvar temp__5804__auto___64860 = (function (){var fexpr__64351 = cljs.core.deref(output_checker64337_64844);\nreturn (fexpr__64351.cljs$core$IFn$_invoke$arity$1 ? fexpr__64351.cljs$core$IFn$_invoke$arity$1(o__50240__auto__) : fexpr__64351.call(null,o__50240__auto__));\n})();\nif(cljs.core.truth_(temp__5804__auto___64860)){\nvar error__50239__auto___64861 = temp__5804__auto___64860;\nthrow cljs.core.ex_info.cljs$core$IFn$_invoke$arity$2(schema.utils.format_STAR_.cljs$core$IFn$_invoke$arity$variadic(\"Output of %s does not match schema: \\n\\n\\t \\u001B[0;33m  %s \\u001B[0m \\n\\n\",cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([cljs.core.with_meta(new cljs.core.Symbol(null,\"pre-alias-and-uniquify-aggregations\",\"pre-alias-and-uniquify-aggregations\",-1180929281,null),new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null,\"schema\",\"schema\",-1582001791),new cljs.core.Symbol(null,\"UniquelyNamedAggregations\",\"UniquelyNamedAggregations\",119403282,null),new cljs.core.Keyword(\"style\",\"indent\",\"style/indent\",-39468490),(1),new cljs.core.Keyword(null,\"doc\",\"doc\",1913296891),\"Wrap every aggregation clause in a `:named` clause with a unique name. Combines `pre-alias-aggregations` with\\n  `uniquify-named-aggregations`.\"], null)),cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([error__50239__auto___64861], 0))], 0)),new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null,\"type\",\"type\",1174270348),new cljs.core.Keyword(\"schema.core\",\"error\",\"schema.core/error\",1991454308),new cljs.core.Keyword(null,\"schema\",\"schema\",-1582001791),output_schema64333_64841,new cljs.core.Keyword(null,\"value\",\"value\",305978217),o__50240__auto__,new cljs.core.Keyword(null,\"error\",\"error\",-978969032),error__50239__auto___64861], null));\n} else {\n}\n}\n} else {\n}\n\nreturn o__50240__auto__;\n});\nschema.utils.declare_class_schema_BANG_(schema.utils.fn_schema_bearer(metabase.mbql.util.pre_alias_and_uniquify_aggregations),schema.core.__GT_FnSchema(output_schema64333_64841,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [input_schema64335_64842], null)));\n\n/**\n * Calculate the absolute maximum number of results that should be returned by this query (MBQL or native), useful for\n *   doing the equivalent of\n * \n *  java.sql.Statement statement = ...;\n *  statement.setMaxRows(<max-rows-limit>).\n * \n *   to ensure the DB cursor or equivalent doesn't fetch more rows than will be consumed.\n * \n *   This is calculated as follows:\n * \n *   *  If query is `MBQL` and has a `:limit` or `:page` clause, returns appropriate number\n *   *  If query has `:constraints` with `:max-results-bare-rows` or `:max-results`, returns the appropriate number\n *   *  `:max-results-bare-rows` is returned if set and Query does not have any aggregations\n *   *  `:max-results` is returned otherwise\n *   *  If none of the above are set, returns `nil`. In this case, you should use something like the Dashboard QP's\n *   `max-rows-limit`\n */\nmetabase.mbql.util.query__GT_max_rows_limit = (function metabase$mbql$util$query__GT_max_rows_limit(p__64352){\nvar map__64353 = p__64352;\nvar map__64353__$1 = cljs.core.__destructure_map(map__64353);\nvar map__64354 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__64353__$1,new cljs.core.Keyword(null,\"constraints\",\"constraints\",422775616));\nvar map__64354__$1 = cljs.core.__destructure_map(map__64354);\nvar max_results = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__64354__$1,new cljs.core.Keyword(null,\"max-results\",\"max-results\",-32858165));\nvar max_results_bare_rows = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__64354__$1,new cljs.core.Keyword(null,\"max-results-bare-rows\",\"max-results-bare-rows\",2096475889));\nvar map__64355 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__64353__$1,new cljs.core.Keyword(null,\"query\",\"query\",-1288509510));\nvar map__64355__$1 = cljs.core.__destructure_map(map__64355);\nvar limit = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__64355__$1,new cljs.core.Keyword(null,\"limit\",\"limit\",-1355822363));\nvar aggregations = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__64355__$1,new cljs.core.Keyword(null,\"aggregation\",\"aggregation\",1597476696));\nvar map__64356 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__64355__$1,new cljs.core.Keyword(null,\"page\",\"page\",849072397));\nvar map__64356__$1 = cljs.core.__destructure_map(map__64356);\nvar items = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__64356__$1,new cljs.core.Keyword(null,\"items\",\"items\",1031954938));\nvar query_type = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__64353__$1,new cljs.core.Keyword(null,\"type\",\"type\",1174270348));\nvar safe_min = (function() { \nvar G__64863__delegate = function (args){\nvar temp__5804__auto__ = cljs.core.seq(cljs.core.filter.cljs$core$IFn$_invoke$arity$2(cljs.core.some_QMARK_,args));\nif(temp__5804__auto__){\nvar args__$1 = temp__5804__auto__;\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$2(cljs.core.min,args__$1);\n} else {\nreturn null;\n}\n};\nvar G__64863 = function (var_args){\nvar args = null;\nif (arguments.length > 0) {\nvar G__64864__i = 0, G__64864__a = new Array(arguments.length -  0);\nwhile (G__64864__i < G__64864__a.length) {G__64864__a[G__64864__i] = arguments[G__64864__i + 0]; ++G__64864__i;}\n  args = new cljs.core.IndexedSeq(G__64864__a,0,null);\n} \nreturn G__64863__delegate.call(this,args);};\nG__64863.cljs$lang$maxFixedArity = 0;\nG__64863.cljs$lang$applyTo = (function (arglist__64865){\nvar args = cljs.core.seq(arglist__64865);\nreturn G__64863__delegate(args);\n});\nG__64863.cljs$core$IFn$_invoke$arity$variadic = G__64863__delegate;\nreturn G__64863;\n})()\n;\nvar mbql_limit = ((cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(query_type,new cljs.core.Keyword(null,\"query\",\"query\",-1288509510)))?safe_min(items,limit):null);\nvar constraints_limit = (function (){var or__5045__auto__ = (cljs.core.truth_(aggregations)?null:max_results_bare_rows);\nif(cljs.core.truth_(or__5045__auto__)){\nreturn or__5045__auto__;\n} else {\nreturn max_results;\n}\n})();\nreturn safe_min(mbql_limit,constraints_limit);\n});\nmetabase.mbql.util.remove_empty = (function metabase$mbql$util$remove_empty(x){\nif(cljs.core.map_QMARK_(x)){\nreturn cljs.core.not_empty(cljs.core.into.cljs$core$IFn$_invoke$arity$2(cljs.core.PersistentArrayMap.EMPTY,(function (){var iter__5523__auto__ = (function metabase$mbql$util$remove_empty_$_iter__64357(s__64358){\nreturn (new cljs.core.LazySeq(null,(function (){\nvar s__64358__$1 = s__64358;\nwhile(true){\nvar temp__5804__auto__ = cljs.core.seq(s__64358__$1);\nif(temp__5804__auto__){\nvar s__64358__$2 = temp__5804__auto__;\nif(cljs.core.chunked_seq_QMARK_(s__64358__$2)){\nvar c__5521__auto__ = cljs.core.chunk_first(s__64358__$2);\nvar size__5522__auto__ = cljs.core.count(c__5521__auto__);\nvar b__64360 = cljs.core.chunk_buffer(size__5522__auto__);\nif((function (){var i__64359 = (0);\nwhile(true){\nif((i__64359 < size__5522__auto__)){\nvar vec__64361 = cljs.core._nth(c__5521__auto__,i__64359);\nvar k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__64361,(0),null);\nvar v = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__64361,(1),null);\nvar v__$1 = (metabase.mbql.util.remove_empty.cljs$core$IFn$_invoke$arity$1 ? metabase.mbql.util.remove_empty.cljs$core$IFn$_invoke$arity$1(v) : metabase.mbql.util.remove_empty.call(null,v));\nif((!((v__$1 == null)))){\ncljs.core.chunk_append(b__64360,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [k,v__$1], null));\n\nvar G__64866 = (i__64359 + (1));\ni__64359 = G__64866;\ncontinue;\n} else {\nvar G__64867 = (i__64359 + (1));\ni__64359 = G__64867;\ncontinue;\n}\n} else {\nreturn true;\n}\nbreak;\n}\n})()){\nreturn cljs.core.chunk_cons(cljs.core.chunk(b__64360),metabase$mbql$util$remove_empty_$_iter__64357(cljs.core.chunk_rest(s__64358__$2)));\n} else {\nreturn cljs.core.chunk_cons(cljs.core.chunk(b__64360),null);\n}\n} else {\nvar vec__64364 = cljs.core.first(s__64358__$2);\nvar k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__64364,(0),null);\nvar v = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__64364,(1),null);\nvar v__$1 = (metabase.mbql.util.remove_empty.cljs$core$IFn$_invoke$arity$1 ? metabase.mbql.util.remove_empty.cljs$core$IFn$_invoke$arity$1(v) : metabase.mbql.util.remove_empty.call(null,v));\nif((!((v__$1 == null)))){\nreturn cljs.core.cons(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [k,v__$1], null),metabase$mbql$util$remove_empty_$_iter__64357(cljs.core.rest(s__64358__$2)));\n} else {\nvar G__64869 = cljs.core.rest(s__64358__$2);\ns__64358__$1 = G__64869;\ncontinue;\n}\n}\n} else {\nreturn null;\n}\nbreak;\n}\n}),null,null));\n});\nreturn iter__5523__auto__(x);\n})()));\n} else {\nif(cljs.core.sequential_QMARK_(x)){\nreturn cljs.core.not_empty(cljs.core.into.cljs$core$IFn$_invoke$arity$2(cljs.core.empty(x),cljs.core.filter.cljs$core$IFn$_invoke$arity$2(cljs.core.some_QMARK_,cljs.core.map.cljs$core$IFn$_invoke$arity$2(metabase.mbql.util.remove_empty,x))));\n} else {\nreturn x;\n\n}\n}\n});\nvar ufv64368_64870 = schema.utils.use_fn_validation;\nvar output_schema64367_64871 = metabase.mbql.schema.FieldOrAggregationReference;\nvar input_schema64369_64872 = new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [schema.core.one(metabase.mbql.schema.FieldOrAggregationReference,new cljs.core.Symbol(null,\"arg0\",\"arg0\",-1024593414,null)),schema.core.one(schema.core.Any,cljs.core.with_meta(new cljs.core.Symbol(null,\"f\",\"f\",43394975,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"schema\",\"schema\",-1582001791),new cljs.core.Symbol(\"schema.core\",\"Any\",\"schema.core/Any\",-1891898271,null)], null))),schema.core.Any], null);\nvar input_checker64370_64873 = (new cljs.core.Delay((function (){\nreturn schema.core.checker(input_schema64369_64872);\n}),null));\nvar output_checker64371_64874 = (new cljs.core.Delay((function (){\nreturn schema.core.checker(output_schema64367_64871);\n}),null));\nvar ret__51869__auto___64875 = (function (){\n/**\n * Inputs: [[clause-type id-or-name opts] :- mbql.s/FieldOrAggregationReference f & args]\n *   Returns: mbql.s/FieldOrAggregationReference\n * \n *   Like [[clojure.core/update]], but for the options in a `:field`, `:expression`, or `:aggregation` clause.\n */\nmetabase.mbql.util.update_field_options = (function metabase$mbql$util$update_field_options(var_args){\nvar args__5775__auto__ = [];\nvar len__5769__auto___64876 = arguments.length;\nvar i__5770__auto___64877 = (0);\nwhile(true){\nif((i__5770__auto___64877 < len__5769__auto___64876)){\nargs__5775__auto__.push((arguments[i__5770__auto___64877]));\n\nvar G__64878 = (i__5770__auto___64877 + (1));\ni__5770__auto___64877 = G__64878;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__5776__auto__ = ((((2) < args__5775__auto__.length))?(new cljs.core.IndexedSeq(args__5775__auto__.slice((2)),(0),null)):null);\nreturn metabase.mbql.util.update_field_options.cljs$core$IFn$_invoke$arity$variadic((arguments[(0)]),(arguments[(1)]),argseq__5776__auto__);\n});\n\n(metabase.mbql.util.update_field_options.cljs$core$IFn$_invoke$arity$variadic = (function (G__64372,G__64373,rest64374){\nvar validate__50237__auto__ = cljs.core.deref(ufv64368_64870);\nif(cljs.core.truth_(validate__50237__auto__)){\nvar args__50238__auto___64880 = cljs.core.list_STAR_.cljs$core$IFn$_invoke$arity$3(G__64372,G__64373,rest64374);\nif(cljs.core.truth_(schema.core.fn_validator)){\nvar G__64378_64881 = new cljs.core.Keyword(null,\"input\",\"input\",556931961);\nvar G__64379_64882 = cljs.core.with_meta(new cljs.core.Symbol(null,\"update-field-options\",\"update-field-options\",-330736515,null),new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null,\"schema\",\"schema\",-1582001791),new cljs.core.Symbol(\"mbql.s\",\"FieldOrAggregationReference\",\"mbql.s/FieldOrAggregationReference\",-990538387,null),new cljs.core.Keyword(null,\"arglists\",\"arglists\",1661989754),cljs.core.list(new cljs.core.Symbol(null,\"quote\",\"quote\",1377916282,null),cljs.core.list(new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,\"field-or-ag-ref-or-expression-ref\",\"field-or-ag-ref-or-expression-ref\",722676055,null),new cljs.core.Symbol(null,\"f\",\"f\",43394975,null),new cljs.core.Symbol(null,\"&\",\"&\",-2144855648,null),new cljs.core.Symbol(null,\"args\",\"args\",-1338879193,null)], null))),new cljs.core.Keyword(null,\"doc\",\"doc\",1913296891),\"Like [[clojure.core/update]], but for the options in a `:field`, `:expression`, or `:aggregation` clause.\"], null));\nvar G__64380_64883 = input_schema64369_64872;\nvar G__64381_64884 = cljs.core.deref(input_checker64370_64873);\nvar G__64382_64885 = args__50238__auto___64880;\n(schema.core.fn_validator.cljs$core$IFn$_invoke$arity$5 ? schema.core.fn_validator.cljs$core$IFn$_invoke$arity$5(G__64378_64881,G__64379_64882,G__64380_64883,G__64381_64884,G__64382_64885) : schema.core.fn_validator.call(null,G__64378_64881,G__64379_64882,G__64380_64883,G__64381_64884,G__64382_64885));\n} else {\nvar temp__5804__auto___64886 = (function (){var fexpr__64383 = cljs.core.deref(input_checker64370_64873);\nreturn (fexpr__64383.cljs$core$IFn$_invoke$arity$1 ? fexpr__64383.cljs$core$IFn$_invoke$arity$1(args__50238__auto___64880) : fexpr__64383.call(null,args__50238__auto___64880));\n})();\nif(cljs.core.truth_(temp__5804__auto___64886)){\nvar error__50239__auto___64887 = temp__5804__auto___64886;\nthrow cljs.core.ex_info.cljs$core$IFn$_invoke$arity$2(schema.utils.format_STAR_.cljs$core$IFn$_invoke$arity$variadic(\"Input to %s does not match schema: \\n\\n\\t \\u001B[0;33m  %s \\u001B[0m \\n\\n\",cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([cljs.core.with_meta(new cljs.core.Symbol(null,\"update-field-options\",\"update-field-options\",-330736515,null),new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null,\"schema\",\"schema\",-1582001791),new cljs.core.Symbol(\"mbql.s\",\"FieldOrAggregationReference\",\"mbql.s/FieldOrAggregationReference\",-990538387,null),new cljs.core.Keyword(null,\"arglists\",\"arglists\",1661989754),cljs.core.list(new cljs.core.Symbol(null,\"quote\",\"quote\",1377916282,null),cljs.core.list(new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,\"field-or-ag-ref-or-expression-ref\",\"field-or-ag-ref-or-expression-ref\",722676055,null),new cljs.core.Symbol(null,\"f\",\"f\",43394975,null),new cljs.core.Symbol(null,\"&\",\"&\",-2144855648,null),new cljs.core.Symbol(null,\"args\",\"args\",-1338879193,null)], null))),new cljs.core.Keyword(null,\"doc\",\"doc\",1913296891),\"Like [[clojure.core/update]], but for the options in a `:field`, `:expression`, or `:aggregation` clause.\"], null)),cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([error__50239__auto___64887], 0))], 0)),new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null,\"type\",\"type\",1174270348),new cljs.core.Keyword(\"schema.core\",\"error\",\"schema.core/error\",1991454308),new cljs.core.Keyword(null,\"schema\",\"schema\",-1582001791),input_schema64369_64872,new cljs.core.Keyword(null,\"value\",\"value\",305978217),args__50238__auto___64880,new cljs.core.Keyword(null,\"error\",\"error\",-978969032),error__50239__auto___64887], null));\n} else {\n}\n}\n} else {\n}\n\nvar o__50240__auto__ = (function (){var G__64387 = G__64372;\nvar vec__64388 = G__64387;\nvar clause_type = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__64388,(0),null);\nvar id_or_name = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__64388,(1),null);\nvar opts = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__64388,(2),null);\nvar f = G__64373;\nvar args = rest64374;\nvar G__64387__$1 = G__64387;\nvar f__$1 = f;\nvar args__$1 = args;\nwhile(true){\nvar vec__64391 = G__64387__$1;\nvar clause_type__$1 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__64391,(0),null);\nvar id_or_name__$1 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__64391,(1),null);\nvar opts__$1 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__64391,(2),null);\nvar f__$2 = f__$1;\nvar args__$2 = args__$1;\nvar opts__$2 = cljs.core.not_empty(metabase.mbql.util.remove_empty(cljs.core.apply.cljs$core$IFn$_invoke$arity$3(f__$2,opts__$1,args__$2)));\nif(cljs.core.truth_(opts__$2)){\nreturn new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [clause_type__$1,id_or_name__$1,opts__$2], null);\n} else {\nif(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(clause_type__$1,new cljs.core.Keyword(null,\"field\",\"field\",-1302436500))){\nreturn new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [clause_type__$1,id_or_name__$1,null], null);\n} else {\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [clause_type__$1,id_or_name__$1], null);\n\n}\n}\nbreak;\n}\n})();\nif(cljs.core.truth_(validate__50237__auto__)){\nif(cljs.core.truth_(schema.core.fn_validator)){\nvar G__64394_64889 = new cljs.core.Keyword(null,\"output\",\"output\",-1105869043);\nvar G__64395_64890 = cljs.core.with_meta(new cljs.core.Symbol(null,\"update-field-options\",\"update-field-options\",-330736515,null),new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null,\"schema\",\"schema\",-1582001791),new cljs.core.Symbol(\"mbql.s\",\"FieldOrAggregationReference\",\"mbql.s/FieldOrAggregationReference\",-990538387,null),new cljs.core.Keyword(null,\"arglists\",\"arglists\",1661989754),cljs.core.list(new cljs.core.Symbol(null,\"quote\",\"quote\",1377916282,null),cljs.core.list(new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,\"field-or-ag-ref-or-expression-ref\",\"field-or-ag-ref-or-expression-ref\",722676055,null),new cljs.core.Symbol(null,\"f\",\"f\",43394975,null),new cljs.core.Symbol(null,\"&\",\"&\",-2144855648,null),new cljs.core.Symbol(null,\"args\",\"args\",-1338879193,null)], null))),new cljs.core.Keyword(null,\"doc\",\"doc\",1913296891),\"Like [[clojure.core/update]], but for the options in a `:field`, `:expression`, or `:aggregation` clause.\"], null));\nvar G__64396_64891 = output_schema64367_64871;\nvar G__64397_64892 = cljs.core.deref(output_checker64371_64874);\nvar G__64398_64893 = o__50240__auto__;\n(schema.core.fn_validator.cljs$core$IFn$_invoke$arity$5 ? schema.core.fn_validator.cljs$core$IFn$_invoke$arity$5(G__64394_64889,G__64395_64890,G__64396_64891,G__64397_64892,G__64398_64893) : schema.core.fn_validator.call(null,G__64394_64889,G__64395_64890,G__64396_64891,G__64397_64892,G__64398_64893));\n} else {\nvar temp__5804__auto___64895 = (function (){var fexpr__64399 = cljs.core.deref(output_checker64371_64874);\nreturn (fexpr__64399.cljs$core$IFn$_invoke$arity$1 ? fexpr__64399.cljs$core$IFn$_invoke$arity$1(o__50240__auto__) : fexpr__64399.call(null,o__50240__auto__));\n})();\nif(cljs.core.truth_(temp__5804__auto___64895)){\nvar error__50239__auto___64896 = temp__5804__auto___64895;\nthrow cljs.core.ex_info.cljs$core$IFn$_invoke$arity$2(schema.utils.format_STAR_.cljs$core$IFn$_invoke$arity$variadic(\"Output of %s does not match schema: \\n\\n\\t \\u001B[0;33m  %s \\u001B[0m \\n\\n\",cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([cljs.core.with_meta(new cljs.core.Symbol(null,\"update-field-options\",\"update-field-options\",-330736515,null),new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null,\"schema\",\"schema\",-1582001791),new cljs.core.Symbol(\"mbql.s\",\"FieldOrAggregationReference\",\"mbql.s/FieldOrAggregationReference\",-990538387,null),new cljs.core.Keyword(null,\"arglists\",\"arglists\",1661989754),cljs.core.list(new cljs.core.Symbol(null,\"quote\",\"quote\",1377916282,null),cljs.core.list(new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,\"field-or-ag-ref-or-expression-ref\",\"field-or-ag-ref-or-expression-ref\",722676055,null),new cljs.core.Symbol(null,\"f\",\"f\",43394975,null),new cljs.core.Symbol(null,\"&\",\"&\",-2144855648,null),new cljs.core.Symbol(null,\"args\",\"args\",-1338879193,null)], null))),new cljs.core.Keyword(null,\"doc\",\"doc\",1913296891),\"Like [[clojure.core/update]], but for the options in a `:field`, `:expression`, or `:aggregation` clause.\"], null)),cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([error__50239__auto___64896], 0))], 0)),new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null,\"type\",\"type\",1174270348),new cljs.core.Keyword(\"schema.core\",\"error\",\"schema.core/error\",1991454308),new cljs.core.Keyword(null,\"schema\",\"schema\",-1582001791),output_schema64367_64871,new cljs.core.Keyword(null,\"value\",\"value\",305978217),o__50240__auto__,new cljs.core.Keyword(null,\"error\",\"error\",-978969032),error__50239__auto___64896], null));\n} else {\n}\n}\n} else {\n}\n\nreturn o__50240__auto__;\n}));\n\n(metabase.mbql.util.update_field_options.cljs$lang$maxFixedArity = (2));\n\n/** @this {Function} */\n(metabase.mbql.util.update_field_options.cljs$lang$applyTo = (function (seq64375){\nvar G__64376 = cljs.core.first(seq64375);\nvar seq64375__$1 = cljs.core.next(seq64375);\nvar G__64377 = cljs.core.first(seq64375__$1);\nvar seq64375__$2 = cljs.core.next(seq64375__$1);\nvar self__5754__auto__ = this;\nreturn self__5754__auto__.cljs$core$IFn$_invoke$arity$variadic(G__64376,G__64377,seq64375__$2);\n}));\n\nreturn null;\n})()\n;\nschema.utils.declare_class_schema_BANG_(schema.utils.fn_schema_bearer(metabase.mbql.util.update_field_options),schema.core.__GT_FnSchema(output_schema64367_64871,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [input_schema64369_64872], null)));\n\n/**\n * Like [[clojure.core/assoc]], but for the options in a `:field`, `:expression`, or `:aggregation` clause.\n */\nmetabase.mbql.util.assoc_field_options = (function metabase$mbql$util$assoc_field_options(var_args){\nvar args__5775__auto__ = [];\nvar len__5769__auto___64898 = arguments.length;\nvar i__5770__auto___64899 = (0);\nwhile(true){\nif((i__5770__auto___64899 < len__5769__auto___64898)){\nargs__5775__auto__.push((arguments[i__5770__auto___64899]));\n\nvar G__64900 = (i__5770__auto___64899 + (1));\ni__5770__auto___64899 = G__64900;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__5776__auto__ = ((((1) < args__5775__auto__.length))?(new cljs.core.IndexedSeq(args__5775__auto__.slice((1)),(0),null)):null);\nreturn metabase.mbql.util.assoc_field_options.cljs$core$IFn$_invoke$arity$variadic((arguments[(0)]),argseq__5776__auto__);\n});\n\n(metabase.mbql.util.assoc_field_options.cljs$core$IFn$_invoke$arity$variadic = (function (clause,kvs){\nreturn cljs.core.apply.cljs$core$IFn$_invoke$arity$4(metabase.mbql.util.update_field_options,clause,cljs.core.assoc,kvs);\n}));\n\n(metabase.mbql.util.assoc_field_options.cljs$lang$maxFixedArity = (1));\n\n/** @this {Function} */\n(metabase.mbql.util.assoc_field_options.cljs$lang$applyTo = (function (seq64400){\nvar G__64401 = cljs.core.first(seq64400);\nvar seq64400__$1 = cljs.core.next(seq64400);\nvar self__5754__auto__ = this;\nreturn self__5754__auto__.cljs$core$IFn$_invoke$arity$variadic(G__64401,seq64400__$1);\n}));\n\n/**\n * Set the `:temporal-unit` of a `:field` clause to `unit`.\n */\nmetabase.mbql.util.with_temporal_unit = (function metabase$mbql$util$with_temporal_unit(p__64402,unit){\nvar vec__64403 = p__64402;\nvar _ = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__64403,(0),null);\nvar ___$1 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__64403,(1),null);\nvar map__64406 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__64403,(2),null);\nvar map__64406__$1 = cljs.core.__destructure_map(map__64406);\nvar base_type = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__64406__$1,new cljs.core.Keyword(null,\"base-type\",\"base-type\",1167971299));\nvar clause = vec__64403;\nif(cljs.core.truth_(metabase.mbql.util.is_clause_QMARK_(new cljs.core.Keyword(null,\"field\",\"field\",-1302436500),clause))){\n} else {\nthrow (new Error(\"Assert failed: (is-clause? :field clause)\"));\n}\n\nif(((cljs.core.not(base_type)) || (metabase.mbql.schema.valid_temporal_unit_for_base_type_QMARK_.cljs$core$IFn$_invoke$arity$2(base_type,unit)))){\nreturn metabase.mbql.util.assoc_field_options.cljs$core$IFn$_invoke$arity$variadic(clause,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"temporal-unit\",\"temporal-unit\",-1892306358),unit], 0));\n} else {\nreturn clause;\n}\n});\n/**\n * Update a `:field`, `:expression` reference, or `:aggregation` reference clause by removing all namespaced keys in the\n *   options map. This is mainly for clause equality comparison purposes -- in current usage namespaced keys are used by\n *   individual pieces of middleware or driver implementations for tracking little bits of information that should not be\n *   considered relevant when comparing clauses for equality.\n */\nmetabase.mbql.util.remove_namespaced_options = (function metabase$mbql$util$remove_namespaced_options(field_or_ref){\nreturn metabase.mbql.util.update_field_options(field_or_ref,cljs.core.partial.cljs$core$IFn$_invoke$arity$3(cljs.core.into,cljs.core.PersistentArrayMap.EMPTY,cljs.core.remove.cljs$core$IFn$_invoke$arity$1((function (p__64407){\nvar vec__64408 = p__64407;\nvar k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__64408,(0),null);\nvar _ = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__64408,(1),null);\nreturn cljs.core.qualified_keyword_QMARK_(k);\n}))));\n});\n/**\n * Find all the `:field` references with integer IDs in `coll`, which can be a full MBQL query, a snippet of MBQL, or a\n *   sequence of those things; return a set of Field IDs. Includes Fields referenced indirectly via `:source-field`.\n *   Returns `nil` if no IDs are found.\n */\nmetabase.mbql.util.referenced_field_ids = (function metabase$mbql$util$referenced_field_ids(coll){\nreturn cljs.core.not_empty(cljs.core.into.cljs$core$IFn$_invoke$arity$3(cljs.core.PersistentHashSet.EMPTY,cljs.core.comp.cljs$core$IFn$_invoke$arity$2(cljs.core.cat,cljs.core.filter.cljs$core$IFn$_invoke$arity$1(cljs.core.some_QMARK_)),cljs.core.seq(cljs.core.filter.cljs$core$IFn$_invoke$arity$2(cljs.core.some_QMARK_,(function metabase$mbql$util$referenced_field_ids_$_match_64411(_AMPERSAND_parents,_AMPERSAND_match){\ntry{if(((cljs.core.vector_QMARK_(_AMPERSAND_match)) && ((cljs.core.count(_AMPERSAND_match) === 3)))){\ntry{var _AMPERSAND_match_0__64413 = cljs.core.nth.cljs$core$IFn$_invoke$arity$2(_AMPERSAND_match,(0));\nif(cljs.core.keyword_identical_QMARK_(_AMPERSAND_match_0__64413,new cljs.core.Keyword(null,\"field\",\"field\",-1302436500))){\ntry{var _AMPERSAND_match_1__64414 = cljs.core.nth.cljs$core$IFn$_invoke$arity$2(_AMPERSAND_match,(1));\nif(cljs.core.integer_QMARK_(_AMPERSAND_match_1__64414)){\nvar id = cljs.core.nth.cljs$core$IFn$_invoke$arity$2(_AMPERSAND_match,(1));\nvar opts = cljs.core.nth.cljs$core$IFn$_invoke$arity$2(_AMPERSAND_match,(2));\nreturn new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [id,new cljs.core.Keyword(null,\"source-field\",\"source-field\",933829534).cljs$core$IFn$_invoke$arity$1(opts)], null)], null);\n} else {\nthrow cljs.core.match.backtrack;\n\n}\n}catch (e64418){if((e64418 instanceof Error)){\nvar e__62528__auto__ = e64418;\nif((e__62528__auto__ === cljs.core.match.backtrack)){\nthrow cljs.core.match.backtrack;\n} else {\nthrow e__62528__auto__;\n}\n} else {\nthrow e64418;\n\n}\n}} else {\nthrow cljs.core.match.backtrack;\n\n}\n}catch (e64417){if((e64417 instanceof Error)){\nvar e__62528__auto__ = e64417;\nif((e__62528__auto__ === cljs.core.match.backtrack)){\nthrow cljs.core.match.backtrack;\n} else {\nthrow e__62528__auto__;\n}\n} else {\nthrow e64417;\n\n}\n}} else {\nthrow cljs.core.match.backtrack;\n\n}\n}catch (e64416){if((e64416 instanceof Error)){\nvar e__62528__auto__ = e64416;\nif((e__62528__auto__ === cljs.core.match.backtrack)){\nreturn metabase.mbql.util.match.impl.match_in_collection(metabase$mbql$util$referenced_field_ids_$_match_64411,_AMPERSAND_parents,_AMPERSAND_match);\n} else {\nthrow e__62528__auto__;\n}\n} else {\nthrow e64416;\n\n}\n}})(cljs.core.PersistentVector.EMPTY,coll)))));\n});\n","~:ns-info",["^ ","~:rename-macros",null,"~:renames",["^ "],"~:meta",["^ ","~:doc","Utilitiy functions for working with MBQL queries.","~:file","metabase/mbql/util.cljc","~:line",1,"~:column",5,"~:end-line",1,"~:end-column",23],"~:ns-aliases",["^ ","~$cljs.loader","~$shadow.loader","~$clojure.pprint","~$cljs.pprint","~$clojure.spec.alpha","~$cljs.spec.alpha","~$clojure.core","~$cljs.core","~$clojure.spec.gen.alpha","~$cljs.spec.gen.alpha","~$clojure.core.match","~$cljs.core.match"],"~:use-macros",null,"~:excludes",["~#set",["~$replace"]],"~:name","~$metabase.mbql.util","~:reader-aliases",["^ "],"~:op","~:ns","~:imports",null,"~:requires",["^ ","~$metabase.mbql.predicates","^T","~$mbql.s","~$metabase.mbql.schema","~$schema.core","^W","~$i18n","~$metabase.shared.util.i18n","~$metabase.mbql.util.match","^Z","~$mbql.match","^Z","^D","^D","~$goog","^10","~$metabase.mbql.schema.helpers","^11","^Y","^Y","~$s","^W","~$schema.helpers","^11","^V","^V","~$str","~$clojure.string","^14","^14","~$mbql.preds","^T"],"~:seen",["^K",["~:require"]],"~:uses",null,"~:require-macros",["^ ","^D","^D","^W","^W","^X","^Y","^Z","^Z","^[","^Z","^Y","^Y","~$s","^W"],"~:form",["~#list",["~$ns","^N","Utilitiy functions for working with MBQL queries.",["^1;",["~:refer-clojure","~:exclude",["^L"]]],["^1;",["^17",["^14","~:as","^13"],["^T","^1?","^15"],["^V","^1?","^U"],["^11","^1?","^12"],["^Z","^1?","^["],["^Y","^1?","^X"],["^W","^1?","~$s"]]]]],"~:flags",["^ ","^17",["^K",[]]],"~:js-deps",["^ "],"~:deps",["^10","^D","^14","^T","^V","^11","^Z","^Y","^W"]],"^Q","^N","~:resource-id",["~:shadow.build.classpath/resource","metabase/mbql/util.cljc"],"~:compiled-at",1692014617343,"^O",["^ ","^T","^T","^U","^V","^W","^W","^X","^Y","^Z","^Z","^[","^Z","^D","^D","^10","^10","^11","^11","^Y","^Y","~$s","^W","^12","^11","^V","^V","^13","^14","^14","^14","^15","^T"],"~:resource-name","metabase/mbql/util.cljc","~:warnings",[],"~:source","(ns metabase.mbql.util\n  \"Utilitiy functions for working with MBQL queries.\"\n  (:refer-clojure :exclude [replace])\n  #?@\n  (:clj\n   [(:require\n     [clojure.string :as str]\n     [metabase.mbql.predicates :as mbql.preds]\n     [metabase.mbql.schema :as mbql.s]\n     [metabase.mbql.schema.helpers :as schema.helpers]\n     [metabase.mbql.util.match :as mbql.match]\n     [metabase.models.dispatch :as models.dispatch]\n     [metabase.shared.util.i18n :as i18n]\n     [metabase.util.i18n]\n     [metabase.util.log :as log]\n     [potemkin :as p]\n     [schema.core :as s])]\n   :cljs\n   [(:require\n     [clojure.string :as str]\n     [metabase.mbql.predicates :as mbql.preds]\n     [metabase.mbql.schema :as mbql.s]\n     [metabase.mbql.schema.helpers :as schema.helpers]\n     [metabase.mbql.util.match :as mbql.match]\n     [metabase.shared.util.i18n :as i18n]\n     [schema.core :as s])]))\n\n(defn qualified-name\n  \"Like `name`, but if `x` is a namespace-qualified keyword, returns that a string including the namespace.\"\n  [x]\n  (if (and (keyword? x) (namespace x))\n    (str (namespace x) \"/\" (name x))\n    (name x)))\n\n(s/defn normalize-token :- s/Keyword\n  \"Convert a string or keyword in various cases (`lisp-case`, `snake_case`, or `SCREAMING_SNAKE_CASE`) to a lisp-cased\n  keyword.\"\n  [token :- schema.helpers/KeywordOrString]\n  #_{:clj-kondo/ignore [:discouraged-var]}\n  (-> (qualified-name token)\n      str/lower-case\n      (str/replace #\"_\" \"-\")\n      keyword))\n\n(defn mbql-clause?\n  \"True if `x` is an MBQL clause (a sequence with a keyword as its first arg). (Since this is used by the code in\n  `normalize` this handles pre-normalized clauses as well.)\"\n  [x]\n  (and (sequential? x)\n       (not (map-entry? x))\n       (keyword? (first x))))\n\n(defn is-clause?\n  \"If `x` an MBQL clause, and an instance of clauses defined by keyword(s) `k-or-ks`?\n\n    (is-clause? :count [:count 10])        ; -> true\n    (is-clause? #{:+ :- :* :/} [:+ 10 20]) ; -> true\"\n  [k-or-ks x]\n  (and\n   (mbql-clause? x)\n   (if (coll? k-or-ks)\n     ((set k-or-ks) (first x))\n     (= k-or-ks (first x)))))\n\n;;; +----------------------------------------------------------------------------------------------------------------+\n;;; |                                       Functions for manipulating queries                                       |\n;;; +----------------------------------------------------------------------------------------------------------------+\n\n(defn- combine-compound-filters-of-type [compound-type subclauses]\n  (mapcat #(mbql.match/match-one %\n             [(_ :guard (partial = compound-type)) & args]\n             args\n             _\n             [&match])\n          subclauses))\n\n(defn simplify-compound-filter\n  \"Simplify compound `:and`, `:or`, and `:not` compound filters, combining or eliminating them where possible. This\n  also fixes theoretically disallowed compound filters like `:and` with only a single subclause, and eliminates `nils`\n  and duplicate subclauses from the clauses.\"\n  [filter-clause]\n  (mbql.match/replace filter-clause\n    seq? (recur (vec &match))\n\n    ;; if this an an empty filter, toss it\n    nil                                  nil\n    [& (_ :guard (partial every? nil?))] nil\n    []                                   nil\n    [(:or :and :or)]                     nil\n\n    ;; if the COMPOUND clause contains any nils, toss them\n    [(clause-name :guard #{:and :or}) & (args :guard (partial some nil?))]\n    (recur (apply vector clause-name (filterv some? args)))\n\n    ;; Rewrite a `:not` over `:and` using de Morgan's law\n    [:not [:and & args]]\n    (recur (apply vector :or (map #(vector :not %) args)))\n\n    ;; Rewrite a `:not` over `:or` using de Morgan's law\n    [:not [:or & args]]\n    (recur (apply vector :and (map #(vector :not %) args)))\n\n    ;; for `and` or `not` compound filters with only one subclase, just unnest the subclause\n    [(:or :and :or) arg] (recur arg)\n\n    ;; for `and` and `not` compound filters with subclauses of the same type pull up any compounds of the same type\n    ;; e.g. [:and :a [:and b c]] ; -> [:and a b c]\n    [:and & (args :guard (partial some (partial is-clause? :and)))]\n    (recur (apply vector :and (combine-compound-filters-of-type :and args)))\n\n    [:or & (args :guard (partial some (partial is-clause? :or)))]\n    (recur (apply vector :or (combine-compound-filters-of-type :or args)))\n\n    ;; for `and` or `or` clauses with duplicate args, remove the duplicates and recur\n    [(clause :guard #{:and :or}) & (args :guard #(not (apply distinct? %)))]\n    (recur (apply vector clause (distinct args)))\n\n    ;; for `not` that wraps another `not`, eliminate both\n    [:not [:not arg]]\n    (recur arg)\n\n    :else\n    filter-clause))\n\n(s/defn combine-filter-clauses :- mbql.s/Filter\n  \"Combine two filter clauses into a single clause in a way that minimizes slapping a bunch of `:and`s together if\n  possible.\"\n  [filter-clause & more-filter-clauses]\n  (simplify-compound-filter (cons :and (cons filter-clause more-filter-clauses))))\n\n(s/defn add-filter-clause-to-inner-query :- mbql.s/MBQLQuery\n  \"Add a additional filter clause to an *inner* MBQL query, merging with the existing filter clause with `:and` if\n  needed.\"\n  [inner-query :- mbql.s/MBQLQuery new-clause :- (s/maybe mbql.s/Filter)]\n  (if-not new-clause\n    inner-query\n    (update inner-query :filter combine-filter-clauses new-clause)))\n\n(s/defn add-filter-clause :- mbql.s/Query\n  \"Add an additional filter clause to an `outer-query`. If `new-clause` is `nil` this is a no-op.\"\n  [outer-query :- mbql.s/Query new-clause :- (s/maybe mbql.s/Filter)]\n  (update outer-query :query add-filter-clause-to-inner-query new-clause))\n\n(defn desugar-inside\n  \"Rewrite `:inside` filter clauses as a pair of `:between` clauses.\"\n  [m]\n  (mbql.match/replace m\n    [:inside lat-field lon-field lat-max lon-min lat-min lon-max]\n    [:and\n     [:between lat-field lat-min lat-max]\n     [:between lon-field lon-min lon-max]]))\n\n(defn desugar-is-null-and-not-null\n  \"Rewrite `:is-null` and `:not-null` filter clauses as simpler `:=` and `:!=`, respectively.\"\n  [m]\n  (mbql.match/replace m\n    [:is-null field]  [:=  field nil]\n    [:not-null field] [:!= field nil]))\n\n(defn desugar-is-empty-and-not-empty\n  \"Rewrite `:is-empty` and `:not-empty` filter clauses as simpler `:=` and `:!=`, respectively.\"\n  [m]\n  (mbql.match/replace m\n    [:is-empty field]  [:or  [:=  field nil] [:=  field \"\"]]\n    [:not-empty field] [:and [:!= field nil] [:!= field \"\"]]))\n\n(defn- replace-field-or-expression\n  \"Replace a field or expression inside :time-interval\"\n  [m unit]\n  (mbql.match/replace m\n    [:field id-or-name opts] [:field id-or-name (assoc opts :temporal-unit unit)]\n    [:expression expression-name] [:expression expression-name]))\n\n(defn desugar-time-interval\n  \"Rewrite `:time-interval` filter clauses as simpler ones like `:=` or `:between`.\"\n  [m]\n  (mbql.match/replace m\n    [:time-interval field-or-expression n unit] (recur [:time-interval field-or-expression n unit nil])\n\n    ;; replace current/last/next with corresponding value of n and recur\n    [:time-interval field-or-expression :current unit options] (recur [:time-interval field-or-expression  0 unit options])\n    [:time-interval field-or-expression :last    unit options] (recur [:time-interval field-or-expression -1 unit options])\n    [:time-interval field-or-expression :next    unit options] (recur [:time-interval field-or-expression  1 unit options])\n\n    [:time-interval field-or-expression (n :guard #{-1}) unit (_ :guard :include-current)]\n    [:between\n     (replace-field-or-expression field-or-expression unit)\n     [:relative-datetime n unit]\n     [:relative-datetime 0 unit]]\n\n    [:time-interval field-or-expression (n :guard #{1}) unit (_ :guard :include-current)]\n    [:between\n     (replace-field-or-expression field-or-expression unit)\n     [:relative-datetime 0 unit]\n     [:relative-datetime n unit]]\n\n    [:time-interval field-or-expression (n :guard #{-1 0 1}) unit _]\n    [:= (replace-field-or-expression field-or-expression unit) [:relative-datetime n unit]]\n\n    [:time-interval field-or-expression (n :guard neg?) unit (_ :guard :include-current)]\n    [:between\n     (replace-field-or-expression field-or-expression unit)\n     [:relative-datetime n unit]\n     [:relative-datetime 0 unit]]\n\n    [:time-interval field-or-expression (n :guard neg?) unit _]\n    [:between\n     (replace-field-or-expression field-or-expression unit)\n     [:relative-datetime n unit]\n     [:relative-datetime -1 unit]]\n\n    [:time-interval field-or-expression n unit (_ :guard :include-current)]\n    [:between\n     (replace-field-or-expression field-or-expression unit)\n     [:relative-datetime 0 unit]\n     [:relative-datetime n unit]]\n\n    [:time-interval field-or-expression n unit _]\n    [:between\n     (replace-field-or-expression field-or-expression unit)\n     [:relative-datetime 1 unit]\n     [:relative-datetime n unit]]))\n\n(defn desugar-does-not-contain\n  \"Rewrite `:does-not-contain` filter clauses as simpler `:not` clauses.\"\n  [m]\n  (mbql.match/replace m\n    [:does-not-contain & args]\n    [:not (into [:contains] args)]))\n\n(defn desugar-equals-and-not-equals-with-extra-args\n  \"`:=` and `!=` clauses with more than 2 args automatically get rewritten as compound filters.\n\n     [:= field x y]  -> [:or  [:=  field x] [:=  field y]]\n     [:!= field x y] -> [:and [:!= field x] [:!= field y]]\"\n  [m]\n  (mbql.match/replace m\n    [:= field x y & more]\n    (apply vector :or (for [x (concat [x y] more)]\n                        [:= field x]))\n\n    [:!= field x y & more]\n    (apply vector :and (for [x (concat [x y] more)]\n                         [:!= field x]))))\n\n(defn desugar-current-relative-datetime\n  \"Replace `relative-datetime` clauses like `[:relative-datetime :current]` with `[:relative-datetime 0 <unit>]`.\n  `<unit>` is inferred from the `:field` the clause is being compared to (if any), otherwise falls back to `default.`\"\n  [m]\n  (mbql.match/replace m\n    [clause field & (args :guard (partial some (partial = [:relative-datetime :current])))]\n    (let [temporal-unit (or (mbql.match/match-one field [:field _ {:temporal-unit temporal-unit}] temporal-unit)\n                            :default)]\n      (into [clause field] (mbql.match/replace args\n                             [:relative-datetime :current]\n                             [:relative-datetime 0 temporal-unit])))))\n\n(def temporal-extract-ops->unit\n  \"Mapping from the sugar syntax to extract datetime to the unit.\"\n  {[:get-year        nil]       :year-of-era\n   [:get-quarter     nil]       :quarter-of-year\n   [:get-month       nil]       :month-of-year\n   ;; default get-week mode is iso\n   [:get-week        nil]       :week-of-year-iso\n   [:get-week        :iso]      :week-of-year-iso\n   [:get-week        :us]       :week-of-year-us\n   [:get-week        :instance] :week-of-year-instance\n   [:get-day         nil]       :day-of-month\n   [:get-day-of-week nil]       :day-of-week\n   [:get-hour        nil]       :hour-of-day\n   [:get-minute      nil]       :minute-of-hour\n   [:get-second      nil]       :second-of-minute})\n\n(def ^:private temporal-extract-ops\n  (->> (keys temporal-extract-ops->unit)\n       (map first)\n       set))\n\n(defn desugar-temporal-extract\n  \"Replace datetime extractions clauses like `[:get-year field]` with `[:temporal-extract field :year]`.\"\n  [m]\n  (mbql.match/replace m\n    [(op :guard temporal-extract-ops) field & args]\n    [:temporal-extract field (temporal-extract-ops->unit [op (first args)])]))\n\n(defn- desugar-divide-with-extra-args [expression]\n  (mbql.match/replace expression\n    [:/ x y z & more]\n    (recur (into [:/ [:/ x y]] (cons z more)))))\n\n(s/defn desugar-expression :- mbql.s/FieldOrExpressionDef\n  \"Rewrite various 'syntactic sugar' expressions like `:/` with more than two args into something simpler for drivers\n  to compile.\"\n  [expression :- mbql.s/FieldOrExpressionDef]\n  (-> expression\n      desugar-divide-with-extra-args))\n\n(defn- maybe-desugar-expression [clause]\n  (cond-> clause\n    (mbql.preds/FieldOrExpressionDef? clause) desugar-expression))\n\n(s/defn desugar-filter-clause :- mbql.s/Filter\n  \"Rewrite various 'syntatic sugar' filter clauses like `:time-interval` and `:inside` as simpler, logically\n  equivalent clauses. This can be used to simplify the number of filter clauses that need to be supported by anything\n  that needs to enumerate all the possible filter types (such as driver query processor implementations, or the\n  implementation [[negate-filter-clause]] below.)\"\n  [filter-clause :- mbql.s/Filter]\n  (-> filter-clause\n      desugar-current-relative-datetime\n      desugar-equals-and-not-equals-with-extra-args\n      desugar-does-not-contain\n      desugar-time-interval\n      desugar-is-null-and-not-null\n      desugar-is-empty-and-not-empty\n      desugar-inside\n      simplify-compound-filter\n      desugar-temporal-extract\n      maybe-desugar-expression))\n\n(defmulti ^:private negate* first)\n\n(defmethod negate* :not [[_ subclause]]    subclause)\n(defmethod negate* :and [[_ & subclauses]] (into [:or]  (map negate* subclauses)))\n(defmethod negate* :or  [[_ & subclauses]] (into [:and] (map negate* subclauses)))\n(defmethod negate* :=   [[_ field value]]  [:!= field value])\n(defmethod negate* :!=  [[_ field value]]  [:=  field value])\n(defmethod negate* :>   [[_ field value]]  [:<= field value])\n(defmethod negate* :<   [[_ field value]]  [:>= field value])\n(defmethod negate* :>=  [[_ field value]]  [:<  field value])\n(defmethod negate* :<=  [[_ field value]]  [:>  field value])\n\n(defmethod negate* :between [[_ field min max]] [:or [:< field min] [:> field max]])\n\n(defmethod negate* :contains    [clause] [:not clause])\n(defmethod negate* :starts-with [clause] [:not clause])\n(defmethod negate* :ends-with   [clause] [:not clause])\n\n(s/defn negate-filter-clause :- mbql.s/Filter\n  \"Return the logical compliment of an MBQL filter clause, generally without using `:not` (except for the string\n  filter clause types). Useful for generating highly optimized filter clauses and for drivers that do not support\n  top-level `:not` filter clauses.\"\n  [filter-clause :- mbql.s/Filter]\n  (-> filter-clause desugar-filter-clause negate* simplify-compound-filter))\n\n(s/defn query->source-table-id :- (s/maybe schema.helpers/IntGreaterThanZero)\n  \"Return the source Table ID associated with `query`, if applicable; handles nested queries as well. If `query` is\n  `nil`, returns `nil`.\n\n  Throws an Exception when it encounters a unresolved source query (i.e., the `:source-table \\\"card__id\\\"`\n  form), because it cannot return an accurate result for a query that has not yet been preprocessed.\"\n  {:arglists '([outer-query])}\n  [{{source-table-id :source-table, source-query :source-query} :query, query-type :type, :as query}]\n  (cond\n    ;; for native queries, there's no source table to resolve\n    (not= query-type :query)\n    nil\n\n    ;; for MBQL queries with a *native* source query, it's the same story\n    (and (nil? source-table-id) source-query (:native source-query))\n    nil\n\n    ;; for MBQL queries with an MBQL source query, recurse on the source query and try again\n    (and (nil? source-table-id) source-query)\n    (recur (assoc query :query source-query))\n\n    ;; if ID is a `card__id` form that can only mean we haven't preprocessed the query and resolved the source query.\n    ;; This is almost certainly an accident, so throw an Exception so we can make the proper fixes\n    ((every-pred string? (partial re-matches mbql.s/source-table-card-id-regex)) source-table-id)\n    (throw\n     (ex-info\n      (i18n/tru \"Error: query''s source query has not been resolved. You probably need to `preprocess` the query first.\")\n      {}))\n\n    ;; otherwise resolve the source Table\n    :else\n    source-table-id))\n\n(s/defn join->source-table-id :- (s/maybe schema.helpers/IntGreaterThanZero)\n  \"Like `query->source-table-id`, but for a join.\"\n  [join]\n  (query->source-table-id {:type :query, :query join}))\n\n(s/defn add-order-by-clause :- mbql.s/MBQLQuery\n  \"Add a new `:order-by` clause to an MBQL `inner-query`. If the new order-by clause references a Field that is\n  already being used in another order-by clause, this function does nothing.\"\n  [inner-query :- mbql.s/MBQLQuery, [_ [_ id-or-name :as _field], :as order-by-clause] :- mbql.s/OrderBy]\n  (let [existing-fields (set (for [[_ [_ id-or-name]] (:order-by inner-query)]\n                               id-or-name))]\n    (if (existing-fields id-or-name)\n      ;; Field already referenced, nothing to do\n      inner-query\n      ;; otherwise add new clause at the end\n      (update inner-query :order-by (comp vec distinct conj) order-by-clause))))\n\n(defn dispatch-by-clause-name-or-class\n  \"Dispatch function perfect for use with multimethods that dispatch off elements of an MBQL query. If `x` is an MBQL\n  clause, dispatches off the clause name; otherwise dispatches off `x`'s class.\"\n  ([x]\n   #?(:clj\n      (if (mbql-clause? x)\n        (first x)\n        (or (metabase.models.dispatch/model x)\n            (type x)))\n      :cljs\n      (if (mbql-clause? x)\n        (first x)\n        (type x))))\n  ([x _]\n   (dispatch-by-clause-name-or-class x)))\n\n(s/defn expression-with-name :- mbql.s/FieldOrExpressionDef\n  \"Return the `Expression` referenced by a given `expression-name`.\"\n  [inner-query expression-name :- (s/cond-pre s/Keyword schema.helpers/NonBlankString)]\n  (let [allowed-names [(qualified-name expression-name) (keyword expression-name)]]\n    (loop [{:keys [expressions source-query]} inner-query, found #{}]\n      (or\n       ;; look for either string or keyword version of `expression-name` in `expressions`\n       (some (partial get expressions) allowed-names)\n       ;; otherwise, if we have a source query recursively look in that (do we allow that??)\n       (let [found (into found (keys expressions))]\n         (if source-query\n           (recur source-query found)\n           ;; failing that throw an Exception with detailed info about what we tried and what the actual expressions\n           ;; were\n           (throw (ex-info (i18n/tru \"No expression named ''{0}''\" (qualified-name expression-name))\n                           {:type            :invalid-query\n                            :expression-name expression-name\n                            :tried           allowed-names\n                            :found           found}))))))))\n\n(s/defn aggregation-at-index :- mbql.s/Aggregation\n  \"Fetch the aggregation at index. This is intended to power aggregate field references (e.g. [:aggregation 0]).\n   This also handles nested queries, which could be potentially ambiguous if multiple levels had aggregations. To\n   support nested queries, you'll need to keep tract of how many `:source-query`s deep you've traveled; pass in this\n   number to as optional arg `nesting-level` to make sure you reference aggregations at the right level of nesting.\"\n  ([query index]\n   (aggregation-at-index query index 0))\n\n  ([query         :- mbql.s/Query\n    index         :- schema.helpers/IntGreaterThanOrEqualToZero\n    nesting-level :- schema.helpers/IntGreaterThanOrEqualToZero]\n   (if (zero? nesting-level)\n     (or (nth (get-in query [:query :aggregation]) index)\n         (throw (ex-info (i18n/tru \"No aggregation at index: {0}\" index) {:index index})))\n     ;; keep recursing deeper into the query until we get to the same level the aggregation reference was defined at\n     (recur {:query (get-in query [:query :source-query])} index (dec nesting-level)))))\n\n(defn ga-id?\n  \"Is this ID (presumably of a Metric or Segment) a GA one?\"\n  [id]\n  (boolean\n   (when ((some-fn string? keyword?) id)\n     (re-find #\"^ga(id)?:\" (name id)))))\n\n(defn ga-metric-or-segment?\n  \"Is this metric or segment clause not a Dashboard Metric or Segment, but rather a GA one? E.g. something like `[:metric\n  ga:users]`. We want to ignore those because they're not the same thing at all as MB Metrics/Segments and don't\n  correspond to objects in our application DB.\"\n  [[_ id]]\n  (ga-id? id))\n\n;;; --------------------------------- Unique names & transforming ags to have names ----------------------------------\n\n(defn unique-name-generator\n  \"Return a function that can be used to uniquify string names. Function maintains an internal counter that will suffix\n  any names passed to it as needed so all results will be unique.\n\n    (let [unique-name (unique-name-generator)]\n      [(unique-name \\\"A\\\")\n       (unique-name \\\"B\\\")\n       (unique-name \\\"A\\\")])\n    ;; -> [\\\"A\\\" \\\"B\\\" \\\"A_2\\\"]\n\n  By default, unique aliases are generated for each unique `[id original-name]` key pair. By default, a unique `id` is\n  generated for every call, meaning repeated calls to [[unique-name-generator]] with the same `original-name` will\n  return different unique aliases. If idempotence is desired, the function returned by the generator also has a 2\n  airity version with the signature\n\n    (unique-name-fn id original-name)\n\n  for example:\n\n    (let [unique-name (unique-name-generator)]\n      [(unique-name :x \\\"A\\\")\n       (unique-name :x \\\"B\\\")\n       (unique-name :x \\\"A\\\")\n       (unique-name :y \\\"A\\\")])\n    ;; -> [\\\"A\\\" \\\"B\\\" \\\"A\\\" \\\"A_2\\\"]\n\n  Finally, [[unique-name-generator]] accepts the following options to further customize behavior:\n\n  ### `:name-key-fn`\n\n  Generated aliases are unique by the value of `[id (name-key-fn original-name)]`; the default is `identity`, so by\n  default aliases are unique by `[id name-key-fn]`. Specify something custom here if you want to make the unique\n  aliases unique by some other value, for example to make them unique without regards to case:\n\n    (let [f (unique-name-generator :name-key-fn str/lower-case)]\n      [(f \\\"x\\\")\n       (f \\\"X\\\")\n       (f \\\"X\\\")])\n    ;; -> [\\\"x\\\" \\\"X_2\\\" \\\"X_3\\\"]\n\n  This is useful for databases that treat column aliases as case-insensitive (see #19618 for some examples of this).\n\n  ### `:unique-alias-fn`\n\n  The function used to generate a potentially-unique alias given an original alias and unique suffix with the signature\n\n    (unique-alias-fn original suffix)\n\n  By default, combines them like `original_suffix`, but you can supply a custom function if you need to change this\n  behavior:\n\n    (let [f (unique-name-generator :unique-alias-fn (fn [x y] (format \\\"%s~~%s\\\" y x)))]\n      [(f \\\"x\\\")\n       (f \\\"x\\\")])\n  ;; -> [\\\"x\\\" \\\"2~~x\\\"]\n\n  This is useful if you need to constrain the generated suffix in some way, for example by limiting its length or\n  escaping characters disallowed in a column alias.\n\n  Values generated by this function are recursively checked for uniqueness, and will keep trying values a unique value\n  is generated; for this reason the function *must* return a unique value for every unique input. Use caution when\n  limiting the length of the identifier generated (consider appending a hash in cases like these).\"\n  [& {:keys [name-key-fn unique-alias-fn]\n      :or   {name-key-fn     identity\n             unique-alias-fn (fn [original suffix]\n                               (str original \\_ suffix))}}]\n  (let [id+original->unique (atom {})   ; map of [id original-alias] -> unique-alias\n        original->count     (atom {})]  ; map of original-alias -> count\n    (fn generate-name\n      ([alias]\n       (generate-name (gensym) alias))\n\n      ([id original]\n       (let [name-key (name-key-fn original)]\n         (or\n          ;; if we already have generated an alias for this key (e.g. `[id original]`), return it as-is.\n          (@id+original->unique [id name-key])\n          ;; otherwise generate a new unique alias.\n          ;; see if we're the first to try to use this candidate alias. Update the usage count in `original->count`\n          (let [total-count (get (swap! original->count update name-key (fnil inc 0)) name-key)]\n            (if (= total-count 1)\n              ;; if we are the first to do it, record it in `id+original->unique` and return it.\n              (do\n                (swap! id+original->unique assoc [id name-key] original)\n                original)\n              ;; otherwise prefix the alias by the current total count (e.g. `id` becomes `id_2`) and recur. If `id_2`\n              ;; is unused, it will get returned. Otherwise we'll recursively try `id_2_2`, and so forth.\n              (let [candidate (unique-alias-fn original (str total-count))]\n                ;; double-check that `unique-alias-fn` isn't doing something silly like truncating the generated alias\n                ;; to aggressively or forgetting to include the `suffix` -- otherwise we could end up with an infinite\n                ;; loop\n                (assert (not= candidate original)\n                        (str \"unique-alias-fn must return a different string than its input. Input: \"\n                             (pr-str candidate)))\n                (recur id candidate))))))))))\n\n(s/defn uniquify-names :- (s/constrained [s/Str] distinct? \"sequence of unique strings\")\n  \"Make the names in a sequence of string names unique by adding suffixes such as `_2`.\n\n     (uniquify-names [\\\"count\\\" \\\"sum\\\" \\\"count\\\" \\\"count_2\\\"])\n     ;; -> [\\\"count\\\" \\\"sum\\\" \\\"count_2\\\" \\\"count_2_2\\\"]\"\n  [names :- [s/Str]]\n  (map (unique-name-generator) names))\n\n(def ^:private NamedAggregation\n  (s/constrained\n   mbql.s/aggregation-options\n   #(:name (nth % 2))\n   \"`:aggregation-options` with a `:name`\"))\n\n(def ^:private UniquelyNamedAggregations\n  (s/constrained\n   [NamedAggregation]\n   (fn [clauses]\n     (apply distinct? (for [[_ _ {ag-name :name}] clauses]\n                        ag-name)))\n   \"sequence of named aggregations with unique names\"))\n\n(s/defn uniquify-named-aggregations :- UniquelyNamedAggregations\n  \"Make the names of a sequence of named aggregations unique by adding suffixes such as `_2`.\"\n  [named-aggregations :- [NamedAggregation]]\n  (let [unique-names (uniquify-names\n                      (for [[_ _wrapped-ag {ag-name :name}] named-aggregations]\n                        ag-name))]\n    (map\n     (fn [[_ wrapped-ag options] unique-name]\n       [:aggregation-options wrapped-ag (assoc options :name unique-name)])\n     named-aggregations\n     unique-names)))\n\n(s/defn pre-alias-aggregations :- [NamedAggregation]\n  \"Wrap every aggregation clause in an `:aggregation-options` clause, using the name returned\n  by `(aggregation->name-fn ag-clause)` as names for any clauses that do not already have a `:name` in\n  `:aggregation-options`.\n\n    (pre-alias-aggregations annotate/aggregation-name\n     [[:count] [:count] [:aggregation-options [:sum [:field 1 nil] {:name \\\"Sum-41\\\"}]])\n    ;; -> [[:aggregation-options [:count] {:name \\\"count\\\"}]\n           [:aggregation-options [:count] {:name \\\"count\\\"}]\n           [:aggregation-options [:sum [:field 1 nil]] {:name \\\"Sum-41\\\"}]]\n\n  Most often, `aggregation->name-fn` will be something like `annotate/aggregation-name`, but for purposes of keeping\n  the `metabase.mbql` module seperate from the `metabase.query-processor` code we'll let you pass that in yourself.\"\n  {:style/indent 1}\n  [aggregation->name-fn :- (s/pred fn?), aggregations :- [mbql.s/Aggregation]]\n  (mbql.match/replace aggregations\n    [:aggregation-options _ (_ :guard :name)]\n    &match\n\n    [:aggregation-options wrapped-ag options]\n    [:aggregation-options wrapped-ag (assoc options :name (aggregation->name-fn wrapped-ag))]\n\n    [(_ :guard keyword?) & _]\n    [:aggregation-options &match {:name (aggregation->name-fn &match)}]))\n\n(s/defn pre-alias-and-uniquify-aggregations :- UniquelyNamedAggregations\n  \"Wrap every aggregation clause in a `:named` clause with a unique name. Combines `pre-alias-aggregations` with\n  `uniquify-named-aggregations`.\"\n  {:style/indent 1}\n  [aggregation->name-fn :- (s/pred fn?), aggregations :- [mbql.s/Aggregation]]\n  (-> (pre-alias-aggregations aggregation->name-fn aggregations)\n      uniquify-named-aggregations))\n\n(defn query->max-rows-limit\n  \"Calculate the absolute maximum number of results that should be returned by this query (MBQL or native), useful for\n  doing the equivalent of\n\n    java.sql.Statement statement = ...;\n    statement.setMaxRows(<max-rows-limit>).\n\n  to ensure the DB cursor or equivalent doesn't fetch more rows than will be consumed.\n\n  This is calculated as follows:\n\n  *  If query is `MBQL` and has a `:limit` or `:page` clause, returns appropriate number\n  *  If query has `:constraints` with `:max-results-bare-rows` or `:max-results`, returns the appropriate number\n     *  `:max-results-bare-rows` is returned if set and Query does not have any aggregations\n     *  `:max-results` is returned otherwise\n  *  If none of the above are set, returns `nil`. In this case, you should use something like the Dashboard QP's\n     `max-rows-limit`\"\n  [{{:keys [max-results max-results-bare-rows]}                      :constraints\n    {limit :limit, aggregations :aggregation, {:keys [items]} :page} :query\n    query-type                                                       :type}]\n  (let [safe-min          (fn [& args]\n                            (when-let [args (seq (filter some? args))]\n                              (reduce min args)))\n        mbql-limit        (when (= query-type :query)\n                            (safe-min items limit))\n        constraints-limit (or\n                           (when-not aggregations\n                             max-results-bare-rows)\n                           max-results)]\n    (safe-min mbql-limit constraints-limit)))\n\n(defn- remove-empty [x]\n  (cond\n    (map? x)\n    (not-empty (into {} (for [[k v] x\n                              :let  [v (remove-empty v)]\n                              :when (some? v)]\n                          [k v])))\n\n    (sequential? x)\n    (not-empty (into (empty x) (filter some? (map remove-empty x))))\n\n    :else\n    x))\n\n(s/defn update-field-options :- mbql.s/FieldOrAggregationReference\n  \"Like [[clojure.core/update]], but for the options in a `:field`, `:expression`, or `:aggregation` clause.\"\n  {:arglists '([field-or-ag-ref-or-expression-ref f & args])}\n  [[clause-type id-or-name opts] :- mbql.s/FieldOrAggregationReference f & args]\n  (let [opts (not-empty (remove-empty (apply f opts args)))]\n    ;; `:field` clauses should have a `nil` options map if there are no options. `:aggregation` and `:expression`\n    ;; should get the arg removed if it's `nil` or empty. (For now. In the future we may change this if we make the\n    ;; 3-arg versions the \"official\" normalized versions.)\n    (cond\n      opts                   [clause-type id-or-name opts]\n      (= clause-type :field) [clause-type id-or-name nil]\n      :else                  [clause-type id-or-name])))\n\n(defn assoc-field-options\n  \"Like [[clojure.core/assoc]], but for the options in a `:field`, `:expression`, or `:aggregation` clause.\"\n  [clause & kvs]\n  (apply update-field-options clause assoc kvs))\n\n(defn with-temporal-unit\n  \"Set the `:temporal-unit` of a `:field` clause to `unit`.\"\n  [[_ _ {:keys [base-type]} :as clause] unit]\n  ;; it doesn't make sense to call this on an `:expression` or `:aggregation`.\n  (assert (is-clause? :field clause))\n  (if (or (not base-type)\n          (mbql.s/valid-temporal-unit-for-base-type? base-type unit))\n    (assoc-field-options clause :temporal-unit unit)\n    #_{:clj-kondo/ignore [:redundant-do]} ; The linter detects that this is redundant in CLJS and warns for it.\n    (do\n      #?(:clj\n         (log/warn (metabase.util.i18n/trs \"{0} is not a valid temporal unit for {1}; not adding to clause {2}\"\n                                           unit base-type (pr-str clause))))\n      clause)))\n\n(defn remove-namespaced-options\n  \"Update a `:field`, `:expression` reference, or `:aggregation` reference clause by removing all namespaced keys in the\n  options map. This is mainly for clause equality comparison purposes -- in current usage namespaced keys are used by\n  individual pieces of middleware or driver implementations for tracking little bits of information that should not be\n  considered relevant when comparing clauses for equality.\"\n  [field-or-ref]\n  (update-field-options field-or-ref (partial into {} (remove (fn [[k _]]\n                                                                (qualified-keyword? k))))))\n\n(defn referenced-field-ids\n  \"Find all the `:field` references with integer IDs in `coll`, which can be a full MBQL query, a snippet of MBQL, or a\n  sequence of those things; return a set of Field IDs. Includes Fields referenced indirectly via `:source-field`.\n  Returns `nil` if no IDs are found.\"\n  [coll]\n  (not-empty\n   (into #{}\n         (comp cat (filter some?))\n         (mbql.match/match coll\n           [:field (id :guard integer?) opts]\n           [id (:source-field opts)]))))\n\n#?(:clj\n   (p/import-vars\n    [mbql.match\n     match\n     match-one\n     replace\n     replace-in]))\n","~:reader-features",["^K",["~:cljs-release","~:cljs-dev","~:cljs"]],"~:cljc",true,"~:source-map-compact",["^ ","mappings","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","names",["metabase.mbql.util/qualified-name","x","and__5043__auto__","cljs.core/Keyword","cljs.core/namespace","cljs.core/name","ufv63605","schema.utils/use-fn-validation","output-schema63604","input-schema63606","schema.core/one","input-checker63607","cljs.core/Delay","schema.core/checker","output-checker63608","ret__51869__auto__","validate__50237__auto__","cljs.core/deref","args__50238__auto__","G__63609","schema.core/fn-validator","G__63611","G__63612","G__63613","G__63614","G__63615","temp__5804__auto__","fexpr__63616","error__50239__auto__","cljs.core.ex_info","schema.utils.format_STAR_","cljs.core.pr_str","o__50240__auto__","token","G__63617","G__63618","G__63619","G__63620","G__63621","fexpr__63622","schema.utils/declare-class-schema!","schema.utils/fn-schema-bearer","schema.core/->FnSchema","metabase.mbql.util/normalize-token","schema.core/Keyword","metabase.mbql.schema.helpers/KeywordOrString","clojure.string/lower-case","clojure.string/replace","cljs.core.keyword","metabase.mbql.util/mbql-clause?","cljs.core/sequential?","cljs.core/map-entry?","cljs.core/first","metabase.mbql.util/is-clause?","k-or-ks","cljs.core/coll?","G__63624","fexpr__63623","cljs.core/set","cljs.core._EQ_","metabase.mbql.util/combine-compound-filters-of-type","compound-type","subclauses","p1__63625#","cljs.core.mapcat","cljs.core/seq","cljs.core.filter","cljs.core/some?","&parents","&match","cljs.core/vector?","cljs.core/count","&match_left__63632","cljs.core.subvec","&match_left__63632_0__63637","cljs.core.nth","cljs.core.match/backtrack","e63643","js/Error","e__62528__auto__","e63640","e63639","cljs.core.partial","cljs.core/=","args","metabase.mbql.util/simplify-compound-filter","filter-clause","fexpr__63748","metabase.mbql.util.match.impl/match-with-pred-or-class","replace-63647","e63702","e63703","&match_left__63663","&match_right__63664","e63747","e63746","e63704","e63705","&match_0__63665","cljs.core/keyword-identical?","e63744","e63745","e63706","&match_left__63676","&match_left__63676_0__63678","fexpr__63742","&match_right__63677","e63743","e63741","e63740","e63707","&match_0__63680","&match_1__63681","&match_1__63681_left__63682","&match_1__63681_left__63682_0__63684","p1__63644#","cljs.core/PersistentVector","e63738","p1__63645#","e63739","e63737","e63736","e63732","e63734","e63735","e63708","&match_left__63685","&match_left__63685_0__63691","&match_right__63686","e63730","e63723","e63729","e63724","fexpr__63726","p1__63646#","e63727","e63725","e63722","e63709","&match_0__63692","&match_1__63693","&match_1__63693_0__63696","e63721","e63720","e63718","e63710","&match_left__63698","&match_left__63698_0__63700","e63716","e63714","e63711","metabase.mbql.util.match.impl/replace-in-collection","cljs.core/seq?","cljs.core/vec","cljs.core/every?","cljs.core/nil?","clause-name","cljs.core/some","cljs.core.apply","cljs.core/vector","cljs.core/filterv","cljs.core.map","arg","clause","cljs.core/not","cljs.core/distinct?","cljs.core.distinct","ufv63750","output-schema63749","input-schema63751","schema.core/Any","input-checker63752","output-checker63753","var_args","args__5775__auto__","len__5769__auto__","i__5770__auto__","argseq__5776__auto__","cljs.core/IndexedSeq","metabase.mbql.util/combine-filter-clauses","rest63755","cljs.core.list_STAR_","G__63754","G__63758","G__63759","G__63760","G__63761","G__63762","fexpr__63766","G__63767","G__63768","G__63769","G__63770","G__63771","fexpr__63772","seq63756","G__63757","cljs.core/next","self__5754__auto__","metabase.mbql.schema/Filter","more-filter-clauses","cljs.core/cons","ufv63774","output-schema63773","input-schema63775","input-checker63776","output-checker63777","G__63778","G__63779","G__63780","G__63781","G__63782","G__63783","G__63784","fexpr__63785","inner-query","new-clause","G__63786","G__63787","G__63788","G__63789","G__63790","fexpr__63791","metabase.mbql.util/add-filter-clause-to-inner-query","metabase.mbql.schema/MBQLQuery","schema.core/maybe","cljs.core.update","ufv63793","output-schema63792","input-schema63794","input-checker63795","output-checker63796","G__63797","G__63798","G__63799","G__63800","G__63801","G__63802","G__63803","fexpr__63804","outer-query","G__63805","G__63806","G__63807","G__63808","G__63809","fexpr__63810","metabase.mbql.util/add-filter-clause","metabase.mbql.schema/Query","metabase.mbql.util/desugar-inside","m","&match_0__63813","e63821","e63820","replace-63811","lat-field","lon-field","lat-max","lon-min","lat-min","lon-max","metabase.mbql.util/desugar-is-null-and-not-null","&match_0__63824","e63827","e63828","e63826","replace-63822","field","metabase.mbql.util/desugar-is-empty-and-not-empty","&match_0__63831","e63834","e63835","e63833","replace-63829","metabase.mbql.util/replace-field-or-expression","unit","&match_0__63838","e63846","e63843","&match_0__63841","e63845","e63844","replace-63836","id-or-name","opts","cljs.core.assoc","expression-name","metabase.mbql.util/desugar-time-interval","&match_0__63856","replace-63847","e63882","e63865","&match_0__63860","&match_2__63862","e63868","e63869","e63870","fexpr__63880","&match_4__63864","e63881","e63871","fexpr__63878","e63879","e63872","fexpr__63877","e63873","e63876","e63874","e63875","e63867","e63866","field-or-expression","n","options","metabase.mbql.util/desugar-does-not-contain","&match_left__63885","&match_left__63885_0__63887","e63890","e63889","e63888","replace-63883","cljs.core.into","metabase.mbql.util/desugar-equals-and-not-equals-with-extra-args","&match_left__63893","&match_left__63893_0__63895","iter__5523__auto__","s__63908","cljs.core/LazySeq","cljs.core/chunked-seq?","c__5521__auto__","size__5522__auto__","b__63910","cljs.core/chunk-buffer","i__63909","cljs.core/-nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__63907","cljs.core/chunk-rest","cljs.core/rest","e63901","s__63904","b__63906","i__63905","iter__63903","e63902","e63900","e63899","replace-63891","y","more","cljs.core.concat","metabase.mbql.util/desugar-current-relative-datetime","&match_left__63913","&match_right__63914","or__5045__auto__","&match_0__63923","&match_2__63925","cljs.core/PROTOCOL_SENTINEL","cljs.core/native-satisfies?","cljs.core/ILookup","&match_2__63925_temporal-unit__63928","cljs.core.get","cljs.core.not_EQ_","e63933","e63931","e63930","e63929","metabase.mbql.util.match.impl/match-in-collection","match-63920","&match_0__63936","&match_1__63937","e63940","e63939","e63938","replace-63934","e63919","e63918","e63917","replace-63911","temporal-unit","metabase.mbql.util/temporal-extract-ops->unit","metabase.mbql.util/temporal-extract-ops","cljs.core/keys","metabase.mbql.util/desugar-temporal-extract","&match_left__63943","&match_left__63943_0__63945","G__63950","e63949","e63948","e63947","replace-63941","op","metabase.mbql.util/desugar-divide-with-extra-args","expression","&match_left__63953","&match_left__63953_0__63955","replace-63951","e63961","e63960","e63959","z","ufv63963","output-schema63962","input-schema63964","input-checker63965","output-checker63966","G__63967","G__63968","G__63969","G__63970","G__63971","G__63972","fexpr__63973","G__63974","G__63975","G__63976","G__63977","G__63978","fexpr__63979","metabase.mbql.util/desugar-expression","metabase.mbql.schema/FieldOrExpressionDef","metabase.mbql.util/maybe-desugar-expression","G__63980","metabase.mbql.predicates/FieldOrExpressionDef?","ufv63982","output-schema63981","input-schema63983","input-checker63984","output-checker63985","G__63986","G__63987","G__63988","G__63989","G__63990","G__63991","fexpr__63992","G__63993","G__63994","G__63995","G__63996","G__63997","fexpr__63998","metabase.mbql.util/desugar-filter-clause","js/metabase","js/metabase.mbql","js/metabase.mbql.util","js/metabase.mbql.util.negate*","method-table__5642__auto__","cljs.core.atom","prefer-table__5643__auto__","method-cache__5644__auto__","cached-hierarchy__5645__auto__","hierarchy__5646__auto__","fexpr__63999","cljs.core/MultiFn","cljs.core.symbol","metabase.mbql.util/negate*","p__64000","vec__64001","_","subclause","p__64004","vec__64005","seq__64006","first__64007","p__64008","vec__64009","seq__64010","first__64011","p__64012","vec__64013","value","p__64016","vec__64017","p__64020","vec__64021","p__64024","vec__64025","p__64028","vec__64029","p__64032","vec__64033","p__64036","vec__64037","min","max","ufv64041","output-schema64040","input-schema64042","input-checker64043","output-checker64044","G__64045","G__64046","G__64047","G__64048","G__64049","G__64050","fexpr__64051","G__64052","G__64053","G__64054","G__64055","G__64056","fexpr__64057","metabase.mbql.util/negate-filter-clause","ufv64059","output-schema64058","input-schema64060","input-checker64061","output-checker64062","G__64063","G__64064","G__64065","G__64066","G__64067","G__64068","fexpr__64069","G__64072","map__64073","cljs.core/--destructure-map","map__64074","map__64075","map__64076","G__64077","G__64078","G__64079","G__64080","G__64081","fexpr__64082","metabase.mbql.util/query->source-table-id","metabase.mbql.schema.helpers/IntGreaterThanZero","source-table-id","source-query","query-type","query","cljs.core.every_pred","cljs.core/string?","cljs.core/re-matches","metabase.mbql.schema/source-table-card-id-regex","metabase.shared.util.i18n/js-i18n","ufv64084","output-schema64083","input-schema64085","input-checker64086","output-checker64087","G__64088","G__64089","G__64090","G__64091","G__64092","G__64093","fexpr__64094","join","G__64095","G__64096","G__64097","G__64098","G__64099","fexpr__64100","metabase.mbql.util/join->source-table-id","ufv64102","output-schema64101","input-schema64103","input-checker64104","output-checker64105","G__64106","G__64107","G__64108","G__64109","G__64110","G__64111","G__64112","fexpr__64113","G__64120","vec__64121","vec__64124","vec__64127","vec__64130","G__64149","G__64150","G__64151","G__64152","G__64153","fexpr__64154","metabase.mbql.util/add-order-by-clause","_field","order-by-clause","metabase.mbql.schema/OrderBy","existing-fields","s__64134","b__64136","i__64135","vec__64137","vec__64140","iter__64133","vec__64143","vec__64146","cljs.core.comp","cljs.core/distinct","cljs.core/conj","G__64156","metabase.mbql.util/dispatch-by-clause-name-or-class","cljs.core/type","metabase.mbql.util.dispatch_by_clause_name_or_class","ufv64158","output-schema64157","input-schema64159","input-checker64160","output-checker64161","G__64162","G__64163","G__64164","G__64165","G__64166","G__64167","G__64168","fexpr__64169","G__64175","G__64176","G__64177","G__64178","G__64179","fexpr__64180","metabase.mbql.util/expression-with-name","schema.core.cond_pre","metabase.mbql.schema.helpers/NonBlankString","allowed-names","G__64171","map__64172","map__64174","expressions","found","cljs.core/get","metabase.shared.util.i18n.js_i18n","ufv64182","output-schema64181","input-schema64183","input-schema64188","input-checker64184","output-checker64185","input-checker64189","output-checker64190","G__64195","metabase.mbql.util/aggregation-at-index","G__64186","G__64187","G__64196","G__64197","G__64198","G__64199","G__64200","fexpr__64201","index","G__64202","G__64203","G__64204","G__64205","G__64206","fexpr__64207","G__64191","G__64192","G__64193","G__64208","G__64209","G__64210","G__64211","G__64212","fexpr__64213","nesting-level","G__64214","G__64215","G__64216","G__64217","G__64218","fexpr__64219","schema.core/make-fn-schema","metabase.mbql.schema/Aggregation","metabase.mbql.util.aggregation_at_index","metabase.mbql.schema.helpers/IntGreaterThanOrEqualToZero","cljs.core.get_in","metabase.mbql.util/ga-id?","id","cljs.core/boolean","cljs.core.some_fn","cljs.core/keyword?","cljs.core/re-find","p__64220","vec__64221","metabase.mbql.util/ga-metric-or-segment?","metabase.mbql.util/unique-name-generator","p__64225","map__64226","seq64224","self__5755__auto__","name-key-fn","unique-alias-fn","cljs.core/identity","original","suffix","id+original->unique","original->count","alias","metabase$mbql$util$generate_name","cljs.core.gensym","name-key","G__64228","fexpr__64227","total-count","cljs.core.swap_BANG_","cljs.core/update","cljs.core.fnil","cljs.core/inc","cljs.core/assoc","candidate","G__64229","G__64230","ufv64232","output-schema64231","input-schema64233","input-checker64234","output-checker64235","G__64236","G__64237","G__64238","G__64239","G__64240","G__64241","fexpr__64242","names","G__64243","G__64244","G__64245","G__64246","G__64247","fexpr__64248","metabase.mbql.util/uniquify-names","schema.core.constrained","schema.core/Str","metabase.mbql.util/NamedAggregation","p1__64249#","metabase.mbql.schema/aggregation-options","metabase.mbql.util/UniquelyNamedAggregations","clauses","s__64251","b__64253","i__64252","vec__64254","map__64257","iter__64250","vec__64258","map__64261","ag-name","ufv64263","output-schema64262","input-schema64264","input-checker64265","output-checker64266","G__64267","G__64268","G__64269","G__64270","G__64271","G__64272","fexpr__64273","named-aggregations","G__64290","G__64291","G__64292","G__64293","G__64294","fexpr__64295","metabase.mbql.util/uniquify-named-aggregations","unique-names","s__64275","b__64277","i__64276","vec__64278","map__64281","iter__64274","vec__64282","map__64285","_wrapped-ag","p__64286","vec__64287","wrapped-ag","unique-name","ufv64297","output-schema64296","input-schema64298","input-checker64299","output-checker64300","G__64301","G__64302","G__64303","G__64304","G__64305","G__64306","G__64307","fexpr__64308","aggregation->name-fn","aggregations","G__64327","G__64328","G__64329","G__64330","G__64331","fexpr__64332","metabase.mbql.util/pre-alias-aggregations","schema.core.pred","cljs.core/fn?","&match_0__64315","&match_2__64317","e64326","e64325","e64321","&match_left__64318","&match_left__64318_0__64320","e64324","e64323","e64322","replace-64309","ufv64334","output-schema64333","input-schema64335","input-checker64336","output-checker64337","G__64338","G__64339","G__64340","G__64341","G__64342","G__64343","G__64344","fexpr__64345","G__64346","G__64347","G__64348","G__64349","G__64350","fexpr__64351","metabase.mbql.util/pre-alias-and-uniquify-aggregations","p__64352","map__64353","map__64354","map__64355","map__64356","metabase.mbql.util/query->max-rows-limit","max-results","max-results-bare-rows","limit","items","safe-min","cljs.core.reduce","cljs.core/min","mbql-limit","constraints-limit","metabase.mbql.util/remove-empty","cljs.core/map?","cljs.core/not-empty","s__64358","b__64360","i__64359","vec__64361","iter__64357","vec__64364","k","v","cljs.core/empty","ufv64368","output-schema64367","input-schema64369","input-checker64370","output-checker64371","metabase.mbql.util/update-field-options","rest64374","G__64372","G__64373","G__64378","G__64379","G__64380","G__64381","G__64382","fexpr__64383","G__64387","vec__64388","f","vec__64391","G__64394","G__64395","G__64396","G__64397","G__64398","fexpr__64399","seq64375","G__64376","G__64377","metabase.mbql.schema/FieldOrAggregationReference","clause-type","metabase.mbql.util/assoc-field-options","seq64400","G__64401","kvs","p__64402","vec__64403","map__64406","metabase.mbql.util/with-temporal-unit","base-type","metabase.mbql.schema.valid_temporal_unit_for_base_type_QMARK_","metabase.mbql.util.assoc_field_options","metabase.mbql.util/remove-namespaced-options","field-or-ref","cljs.core/into","cljs.core.remove","p__64407","vec__64408","cljs.core/qualified-keyword?","metabase.mbql.util/referenced-field-ids","coll","cljs.core/cat","&match_0__64413","&match_1__64414","e64418","e64417","e64416","match-64411","cljs.core/integer?","cljs.core/chunk-first"]],"~:used-vars",["^K",["~$cljs.core/mapcat","~$cljs.core/--destructure-map","~$metabase.mbql.util/replace-field-or-expression","~$cljs.core/some?","~$cljs.core.match/backtrack","~$cljs.core/PROTOCOL_SENTINEL","~$cljs.core/comp","~$cljs.core/rest","~$schema.core/Any","~$schema.core/->FnSchema","~$cljs.core/keyword","~$metabase.mbql.util/with-temporal-unit","~$schema.utils/format*","~$cljs.core/MultiFn","~$cljs.core/sequential?","~$cljs.core/keyword?","~$metabase.mbql.util/simplify-compound-filter","~$metabase.mbql.util/desugar-divide-with-extra-args","~$metabase.mbql.util/unique-name-generator","~$cljs.core/vector?","~$metabase.mbql.util/assoc-field-options","~$cljs.core/filter","~$cljs.core/=","~$cljs.core/keys","~$js/metabase.mbql.util.negate*","~$cljs.core/re-matches","~$cljs.core/partial","~$cljs.core/IndexedSeq","~$metabase.mbql.util/desugar-filter-clause","~$metabase.mbql.schema/MBQLQuery","~$cljs.core/count","~$cljs.core/deref","~$metabase.mbql.schema/Aggregation","~$metabase.mbql.util/query->max-rows-limit","~$js/metabase.mbql.util","~$metabase.mbql.util/desugar-equals-and-not-equals-with-extra-args","~$cljs.core/reduce","~$cljs.core/seq","~$cljs.core/chunk-first","~$cljs.core/apply","~$metabase.mbql.util/maybe-desugar-expression","~$metabase.mbql.schema/Query","~$cljs.core/identity","~$cljs.core/Keyword","~$metabase.mbql.util/desugar-is-null-and-not-null","~$cljs.core/map-entry?","~$metabase.mbql.util/referenced-field-ids","~$cljs.core/chunk","~$cljs.core/not=","~$metabase.mbql.util/is-clause?","~$cljs.core/distinct","~$cljs.core/string?","~$metabase.mbql.predicates/FieldOrExpressionDef?","~$cljs.core/keyword-identical?","~$cljs.core/Delay","~$cljs.core/LazySeq","~$cljs.core/chunk-rest","~$cljs.core/atom","~$metabase.mbql.util.match.impl/replace-in-collection","~$schema.utils/use-fn-validation","~$cljs.core/qualified-keyword?","~$cljs.core/concat","~$cljs.core/pr-str","~$schema.core/checker","~$schema.utils/fn-schema-bearer","~$cljs.core/set","~$metabase.mbql.util/add-filter-clause","~$metabase.mbql.util/temporal-extract-ops","~$cljs.core/native-satisfies?","~$metabase.mbql.util/add-filter-clause-to-inner-query","~$cljs.core/fnil","~$metabase.mbql.schema.helpers/KeywordOrString","~$metabase.mbql.util/temporal-extract-ops->unit","~$metabase.mbql.util/combine-compound-filters-of-type","~$cljs.core/into","~$metabase.mbql.util/mbql-clause?","~$cljs.core/map?","~$cljs.core/conj","~$metabase.mbql.util/remove-empty","~$cljs.core/update","~$cljs.core/namespace","~$cljs.core/map","~$cljs.core/fn?","~$metabase.mbql.util/uniquify-named-aggregations","~$cljs.core/filterv","~$cljs.core/PersistentVector","~$cljs.core/get-in","~$metabase.mbql.schema/aggregation-options","~$cljs.core/empty","~$cljs.core/swap!","~$cljs.core/-add-method","~$metabase.mbql.util/combine-filter-clauses","~$cljs.core/get","~$metabase.mbql.schema.helpers/IntGreaterThanOrEqualToZero","~$cljs.core/integer?","~$metabase.mbql.util/desugar-is-empty-and-not-empty","~$cljs.core/chunk-append","~$cljs.core/-nth","~$cljs.core/remove","~$schema.core/one","~$metabase.mbql.util/NamedAggregation","~$metabase.mbql.util/expression-with-name","~$metabase.mbql.schema/valid-temporal-unit-for-base-type?","~$cljs.core/not-empty","~$schema.core/maybe","~$metabase.mbql.util/query->source-table-id","~$cljs.core/cat","~$metabase.mbql.util/add-order-by-clause","~$metabase.mbql.util/desugar-temporal-extract","~$cljs.core/symbol","~$metabase.mbql.util/normalize-token","~$cljs.core/distinct?","~$metabase.mbql.schema.helpers/IntGreaterThanZero","~$metabase.mbql.util/negate-filter-clause","~$metabase.mbql.schema/FieldOrExpressionDef","~$cljs.core/min","~$cljs.core/re-find","~$metabase.mbql.util/uniquify-names","~$metabase.mbql.util/qualified-name","~$cljs.core/subvec","~$metabase.mbql.schema.helpers/NonBlankString","~$cljs.core/nil?","~$metabase.shared.util.i18n/js-i18n","~$metabase.mbql.util/update-field-options","~$metabase.mbql.util/desugar-inside","~$cljs.core/nth","~$cljs.core/ex-info","~$clojure.string/replace","~$metabase.mbql.schema/Filter","~$metabase.mbql.schema/source-table-card-id-regex","~$metabase.mbql.util/pre-alias-and-uniquify-aggregations","~$clojure.string/lower-case","~$cljs.core/next","~$cljs.core/vec","~$metabase.mbql.util/aggregation-at-index","~$metabase.mbql.util/negate*","~$metabase.mbql.util/pre-alias-aggregations","~$cljs.core/chunk-cons","~$schema.core/pred","~$cljs.core/not","~$schema.core/constrained","~$cljs.core/cons","~$schema.core/cond-pre","~$metabase.mbql.util/desugar-current-relative-datetime","~$cljs.core/assoc","~$metabase.mbql.util/join->source-table-id","~$metabase.mbql.util.match.impl/match-with-pred-or-class","~$js/metabase","~$metabase.mbql.util/UniquelyNamedAggregations","~$cljs.core/chunk-buffer","~$metabase.mbql.util/ga-metric-or-segment?","~$schema.core/make-fn-schema","~$cljs.core/coll?","~$schema.core/Str","~$schema.core/Keyword","~$metabase.mbql.util/ga-id?","~$metabase.mbql.schema/OrderBy","~$schema.utils/declare-class-schema!","~$cljs.core/some-fn","~$metabase.mbql.util/desugar-time-interval","~$schema.core/fn-validator","~$cljs.core/gensym","~$cljs.core/first","~$cljs.core/seq?","~$metabase.mbql.util/desugar-expression","~$metabase.mbql.util/dispatch-by-clause-name-or-class","~$cljs.core/name","~$js/metabase.mbql","~$cljs.core/every?","~$cljs.core/every-pred","~$js/Error","~$cljs.core/list*","~$cljs.core/vector","~$cljs.core/boolean","~$cljs.core/type","~$metabase.mbql.util.match.impl/match-in-collection","~$cljs.core/inc","~$cljs.core/ILookup","~$cljs.core/some","~$metabase.mbql.util/desugar-does-not-contain","~$metabase.mbql.schema/FieldOrAggregationReference","~$cljs.core/chunked-seq?","~$metabase.mbql.util/remove-namespaced-options"]]],"~:cache-keys",["~#cmap",[["^1D","camel_snake_kebab/internals/misc.cljc"],["5ae08f83ceb8959971e6334596bff0214bf6fdf2","~:shadow.build.compiler/resolve",["^ ","~:require-id",null,"~:deps-ids",["^K",[]],"~:deps-syms",["^10","^D","~$camel-snake-kebab.internals.string-separator","^14"]]],["^1D","goog/dom/tagname.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^5[",["^ ","^60",null,"^61",["^K",[]],"^62",["^10","~$goog.dom.HtmlElement"]]],["^1D","metabase/shared/util/i18n.cljs"],["6c3c8615004b349dae9851ed547d516d45e04bd0","^5[",["^ ","^60",null,"^61",["^K",[]],"^62",["^10","^D","~$shadow.js.shim.module$ttag","^14"]]],["^1D","goog/labs/useragent/platform.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^5[",["^ ","^60",null,"^61",["^K",[]],"^62",["^10","~$goog.string.internal","~$goog.labs.userAgent.util","~$goog.labs.userAgent.highEntropy.highEntropyValue","~$goog.labs.userAgent.highEntropy.highEntropyData","~$goog.labs.userAgent"]]],["^1D","metabase/types.cljc"],["00232bf78b259e26a21c218c8f2d746ba7003a15","^5[",["^ ","^60",null,"^61",["^K",[]],"^62",["^10","^D","~$clojure.set","~$metabase.types.coercion-hierarchies","~$metabase.util"]]],["^1D","lambdaisland/glogi.cljs"],["76286836d4172602aa08006b2a754dda736ffe09","^5[",["^ ","^60",null,"^61",["^K",[]],"^62",["^10","^D","~$goog.log","~$goog.debug.Console","~$goog.array","^14","~$goog.object","~$goog.debug.FancyWindow","~$goog.debug.DivConsole"]]],["^1D","goog/math/math.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^5[",["^ ","^60",null,"^61",["^K",[]],"^62",["^10","~$goog.asserts"]]],["^1D","goog/html/trustedtypes.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^5[",["^ ","^60",null,"^61",["^K",[]],"^62",["^10"]]],["^1D","goog/string/stringformat.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^5[",["^ ","^60",null,"^61",["^K",[]],"^62",["^10","~$goog.string"]]],["^1D","goog/labs/useragent/browser.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^5[",["^ ","^60",null,"^61",["^K",[]],"^62",["^10","^67","^68","^6D","^66","^69","^6:"]]],["^1D","goog/html/safeurl.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^5[",["^ ","^60",null,"^61",["^K",[]],"^62",["^10","^6D","~$goog.fs.url","~$goog.html.TrustedResourceUrl","~$goog.string.Const","~$goog.string.TypedString","^66"]]],["^1D","goog/style/style.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^5[",["^ ","^60",null,"^61",["^K",[]],"^62",["^10","^6D","~$goog.dom","~$goog.dom.NodeType","~$goog.dom.TagName","~$goog.dom.safe","~$goog.dom.vendor","~$goog.html.SafeStyleSheet","~$goog.math.Box","~$goog.math.Coordinate","~$goog.math.Rect","~$goog.math.Size","^6A","~$goog.reflect","^6E","~$goog.userAgent"]]],["^1D","goog/array/array.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^5[",["^ ","^60",null,"^61",["^K",[]],"^62",["^10","^6D"]]],["~:shadow.build.js-support/require","moment"],["~$shadow.js.shim.module$moment","shadow.js.shim.module$moment.js","require","^5[",["^ ","^60",null,"^61",["^K",[]],"^62",["^10"]]],["^6V","moment-timezone"],["~$shadow.js.shim.module$moment_timezone","shadow.js.shim.module$moment_timezone.js","require","^5[",["^ ","^60",null,"^61",["^K",[]],"^62",["^10"]]],["^1D","metabase/mbql/schema/macros.cljs"],["2af09bd42ffb1e15b66723cf7ba15db7dc75d10b","^5[",["^ ","^60",null,"^61",["^K",[]],"^62",["^10","^D"]]],["^1D","goog/useragent/useragent.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^5[",["^ ","^60",null,"^61",["^K",[]],"^62",["^10","~$goog.labs.userAgent.browser","~$goog.labs.userAgent.engine","~$goog.labs.userAgent.platform","^67","^6T","^66"]]],["^1D","goog/debug/error.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^5[",["^ ","^60",null,"^61",["^K",[]],"^62",["^10"]]],["^1D","goog/flags/flags.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^5[",["^ ","^60",null,"^61",["^K",[]],"^62",["^10"]]],["^1D","net/cgrand/macrovich.cljc"],["abcb26cbfe0f8eef363b25525210c0fe1eb1f693","^5[",["^ ","^60",null,"^61",["^K",[]],"^62",["^10","^D"]]],["^1D","schema/spec/variant.cljc"],["0dacc3066a87f33088c9a332b6c21e8b0560011c","^5[",["^ ","^60",null,"^61",["^K",[]],"^62",["^10","^D","~$schema.utils","~$schema.spec.core"]]],["^1D","goog/structs/circularbuffer.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^5[",["^ ","^60",null,"^61",["^K",[]],"^62",["^10"]]],["^1D","weavejester/dependency.cljc"],["7fd7f8879313f6a7e295f7447e668bdf492c42c1","^5[",["^ ","^60",null,"^61",["^K",[]],"^62",["^10","^D","^6;"]]],["^1D","goog/dom/nodetype.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^5[",["^ ","^60",null,"^61",["^K",[]],"^62",["^10"]]],["^1D","goog/labs/useragent/highentropy/highentropyvalue.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^5[",["^ ","^60",null,"^61",["^K",[]],"^62",["^10","^67","^66"]]],["^1D","cljs/pprint.cljs"],["bc14df6666853ed869d7b88aaa864111c65d0c7f","^5[",["^ ","^60",null,"^61",["^K",[]],"^62",["^10","^D","^14","^6E","~$goog.string.StringBuffer"]]],["^1D","camel_snake_kebab/internals/string_separator.cljc"],["5ae08f83ceb8959971e6334596bff0214bf6fdf2","^5[",["^ ","^60",null,"^61",["^K",[]],"^62",["^10","^D","^14"]]],["^1D","goog/string/typedstring.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^5[",["^ ","^60",null,"^61",["^K",[]],"^62",["^10"]]],["^1D","goog/object/object.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^5[",["^ ","^60",null,"^61",["^K",[]],"^62",["^10"]]],["^1D","goog/dom/asserts.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^5[",["^ ","^60",null,"^61",["^K",[]],"^62",["^10","^6D"]]],"~:SHADOW-TIMESTAMP",[1689947046000,1689947046000,1689947050000],["^1D","goog/math/long.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^5[",["^ ","^60",null,"^61",["^K",[]],"^62",["^10","^6D","^6T"]]],["^1D","goog/html/trustedresourceurl.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^5[",["^ ","^60",null,"^61",["^K",[]],"^62",["^10","^6D","~$goog.fs.blob","^6F","~$goog.html.SafeScript","~$goog.html.trustedtypes","^6H","^6I"]]],["^1D","schema/spec/leaf.cljc"],["0dacc3066a87f33088c9a332b6c21e8b0560011c","^5[",["^ ","^60",null,"^61",["^K",[]],"^62",["^10","^D","^71"]]],["^1D","metabase/util/format.cljc"],["875f86a08288cb3ad5a6f15df988897eaf8613af","^5[",["^ ","^60",null,"^61",["^K",[]],"^62",["^10","^D","^6E"]]],["^1D","goog/math/irect.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^5[",["^ ","^60",null,"^61",["^K",[]],"^62",["^10"]]],["^1D","goog/math/box.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^5[",["^ ","^60",null,"^61",["^K",[]],"^62",["^10","^6D","^6Q"]]],["^1D","goog/string/internal.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^5[",["^ ","^60",null,"^61",["^K",[]],"^62",["^10"]]],["^1D","goog/functions/functions.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^5[",["^ ","^60",null,"^61",["^K",[]],"^62",["^10"]]],["^1D","goog/html/safestyle.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^5[",["^ ","^60",null,"^61",["^K",[]],"^62",["^10","^6H","~$goog.html.SafeUrl","^6I","^6D","^66"]]],["^1D","goog/dom/safe.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^5[",["^ ","^60",null,"^61",["^K",[]],"^62",["^10","^6D","~$goog.asserts.dom","~$goog.dom.asserts","~$goog.functions","~$goog.html.SafeHtml","^75","~$goog.html.SafeStyle","^77","^6G","~$goog.html.uncheckedconversions","^6H","^66"]]],["^1D","goog/asserts/dom.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^5[",["^ ","^60",null,"^61",["^K",[]],"^62",["^10","^6L","^6D","~$goog.dom.element"]]],["^1D","medley/core.cljc"],["f5117fa4c15ff14c4a0ab7db414b0f102afb0b8a","^5[",["^ ","^60",null,"^61",["^K",[]],"^62",["^10","^D"]]],["^1D","clojure/walk.cljs"],["bc14df6666853ed869d7b88aaa864111c65d0c7f","^5[",["^ ","^60",null,"^61",["^K",[]],"^62",["^10","^D"]]],["^1D","lambdaisland/glogi/console.cljs"],["76286836d4172602aa08006b2a754dda736ffe09","^5[",["^ ","^60",null,"^61",["^K",[]],"^62",["^10","^D","~$lambdaisland.glogi","~$lambdaisland.glogi.print","^6A","^6?"]]],["^1D","goog/html/safehtml.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^5[",["^ ","^60",null,"^61",["^K",[]],"^62",["^10","^6H","^75","^7<","^6O","^77","^6L","^6G","^6I","^6D","^6Y","^6@","^6A","^66","~$goog.dom.tags","^76"]]],["^1D","goog/dom/tags.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^5[",["^ ","^60",null,"^61",["^K",[]],"^62",["^10","^6A"]]],["^1D","goog/math/size.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^5[",["^ ","^60",null,"^61",["^K",[]],"^62",["^10"]]],["^1D","goog/labs/useragent/engine.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^5[",["^ ","^60",null,"^61",["^K",[]],"^62",["^10","^6@","^66","^67"]]],["^1D","goog/fs/blob.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^5[",["^ ","^60",null,"^61",["^K",[]],"^62",["^10"]]],["^1D","metabase/mbql/schema/helpers.cljc"],["b1f6002b97b59423b504abb666e13c9b0228b768","^5[",["^ ","^60",null,"^61",["^K",[]],"^62",["^10","^D","^14","~$metabase.types","^W"]]],["^1D","goog/dom/dom.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^5[",["^ ","^60",null,"^61",["^K",[]],"^62",["^10","^6@","^6D","^78","~$goog.dom.BrowserFeature","^6K","^6L","^6M","^7;","^7=","^6Q","^6S","^6A","^6E","^6H","~$goog.string.Unicode","^6U"]]],["^1D","metabase/util/log.cljs"],["7d8a3bf01eb27c2ba7269dc90dc218e46bcc1d3a","^5[",["^ ","^60",null,"^61",["^K",[]],"^62",["^10","^D","^6>","^6E","~$goog.string.format","^7?","~$lambdaisland.glogi.console"]]],["^1D","goog/asserts/asserts.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^5[",["^ ","^60",null,"^61",["^K",[]],"^62",["^10","~$goog.debug.Error","^6K"]]],["^1D","goog/debug/relativetimeprovider.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^5[",["^ ","^60",null,"^61",["^K",[]],"^62",["^10"]]],["^1D","goog/math/rect.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^5[",["^ ","^60",null,"^61",["^K",[]],"^62",["^10","^6D","^6P","^6Q","~$goog.math.IRect","^6S"]]],["^1D","flatland/ordered/map.cljs"],["3a9cb9d79e47d77ecd4f4d550371ecf01464c461","^5[",["^ ","^60",null,"^61",["^K",[]],"^62",["^10","^D"]]],["^1D","goog/uri/uri.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^5[",["^ ","^60",null,"^61",["^K",[]],"^62",["^10","^6@","^6D","~$goog.collections.maps","^6E","~$goog.structs","~$goog.uri.utils","~$goog.uri.utils.ComponentIndex","~$goog.uri.utils.StandardQueryParam"]]],["^1D","goog/labs/useragent/highentropy/highentropydata.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^5[",["^ ","^60",null,"^61",["^K",[]],"^62",["^10","^68"]]],["^1D","metabase/types/coercion_hierarchies.cljc"],["c3d70ef6080e044d61f13ff6bfd76490e2dcd0ac","^5[",["^ ","^60",null,"^61",["^K",[]],"^62",["^10","^D","^6;"]]],["^1D","goog/collections/maps.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^5[",["^ ","^60",null,"^61",["^K",[]],"^62",["^10"]]],["^1D","goog/debug/divconsole.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^5[",["^ ","^60",null,"^61",["^K",[]],"^62",["^10","~$goog.debug.HtmlFormatter","~$goog.dom.DomHelper","^6L","^6M","^7;","^6O","^6>","^6H","~$goog.style"]]],["^1D","schema/spec/collection.cljc"],["0dacc3066a87f33088c9a332b6c21e8b0560011c","^5[",["^ ","^60",null,"^61",["^K",[]],"^62",["^10","^D","^70","^71"]]],["^1D","schema/utils.cljc"],["0dacc3066a87f33088c9a332b6c21e8b0560011c","^5[",["^ ","^60",null,"^61",["^K",[]],"^62",["^10","^D","^7E","^6A","^6E","^14"]]],["^1D","cljs/core/match.cljs"],["f419c02deee501e9f4b29f81215ba81ffcefe9b6","^5[",["^ ","^60",null,"^61",["^K",[]],"^62",["^10","^D"]]],["^1D","goog/debug/fancywindow.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^5[",["^ ","^60",null,"^61",["^K",[]],"^62",["^10","^6@","^6D","~$goog.debug.DebugWindow","^7O","^6L","^6M","^7;","^6O","^6>","^6A","^6E","^6H","^6U"]]],["^1D","goog/debug/formatter.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^5[",["^ ","^60",null,"^61",["^K",[]],"^62",["^10","~$goog.debug","~$goog.debug.RelativeTimeProvider","^7;","^77","^7=","^6>","^6H"]]],["^1D","metabase/shared/util/namespaces.cljs"],["00687008abd6eb291bc9d5ff1fff73210e0bbe6e","^5[",["^ ","^60",null,"^61",["^K",[]],"^62",["^10","^D"]]],["^1D","metabase/mbql/util/match/impl.cljc"],["4150e01975339d308f5cfedda77875eda19c030d","^5[",["^ ","^60",null,"^61",["^K",[]],"^62",["^10","^D"]]],["^1D","goog/fs/url.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^5[",["^ ","^60",null,"^61",["^K",[]],"^62",["^10"]]],["^1D","goog/base.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^5[",["^ ","^60",null,"^61",["^K",[]],"^62",[]]],["^1D","goog/structs/structs.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^5[",["^ ","^60",null,"^61",["^K",[]],"^62",["^10","^6@","^6A"]]],["^1D","clojure/string.cljs"],["bc14df6666853ed869d7b88aaa864111c65d0c7f","^5[",["^ ","^60",null,"^61",["^K",[]],"^62",["^10","^D","^6E","^72"]]],["^1D","metabase/util.cljc"],["2eb945a6741f1450ecac08a9087b862ce52b9e3a","^5[",["^ ","^60",null,"^61",["^K",[]],"^62",["^10","^D","~$camel-snake-kebab.internals.macros","~$clojure.data","^@","^6;","^14","~$clojure.walk","~$flatland.ordered.map","~$medley.core","^Y","~$metabase.shared.util.namespaces","~$metabase.util.format","~$metabase.util.log","~$net.cgrand.macrovich","~$weavejester.dependency"]]],["^1D","camel_snake_kebab/internals/macros.cljc"],["5ae08f83ceb8959971e6334596bff0214bf6fdf2","^5[",["^ ","^60",null,"^61",["^K",[]],"^62",["^10","^D","~$camel-snake-kebab.internals.alter-name","~$camel-snake-kebab.internals.misc"]]],["^1D","goog/string/string.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^5[",["^ ","^60",null,"^61",["^K",[]],"^62",["^10","^6M","^7=","^6H","^66"]]],["^1D","schema/core.cljc"],["0dacc3066a87f33088c9a332b6c21e8b0560011c","^5[",["^ ","^60",null,"^61",["^K",[]],"^62",["^10","^D","^14","^70","^71","~$schema.spec.leaf","~$schema.spec.variant","~$schema.spec.collection"]]],["^1D","metabase/mbql/schema.cljc"],["c51bf2a180ecbc12d6a1cd42a4049323f46a0085","^5[",["^ ","^60",null,"^61",["^K",[]],"^62",["^10","^D","^6W","^6X","^D","^6;","^11","~$metabase.mbql.schema.macros","^W"]]],["^1D","metabase/mbql/util/match.cljs"],["d65aaa9fbcb7960b90ba7ca97258b1dc8a40be2b","^5[",["^ ","^60",null,"^61",["^K",[]],"^62",["^10","^D","^H","~$metabase.mbql.util.match.impl"]]],["^1D","clojure/data.cljs"],["bc14df6666853ed869d7b88aaa864111c65d0c7f","^5[",["^ ","^60",null,"^61",["^K",[]],"^62",["^10","^D","^6;"]]],["^1D","goog/reflect/reflect.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^5[",["^ ","^60",null,"^61",["^K",[]],"^62",["^10"]]],["^1D","goog/labs/useragent/util.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^5[",["^ ","^60",null,"^61",["^K",[]],"^62",["^10","^66","^6:"]]],["^1D","goog/debug/debug.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^5[",["^ ","^60",null,"^61",["^K",[]],"^62",["^10","^6@","~$goog.debug.errorcontext"]]],["^1D","goog/string/stringbuffer.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^5[",["^ ","^60",null,"^61",["^K",[]],"^62",["^10"]]],["^1D","schema/spec/core.cljc"],["0dacc3066a87f33088c9a332b6c21e8b0560011c","^5[",["^ ","^60",null,"^61",["^K",[]],"^62",["^10","^D","^70"]]],["^6V","ttag"],["^65","shadow.js.shim.module$ttag.js","require","^5[",["^ ","^60",null,"^61",["^K",[]],"^62",["^10"]]],["^1D","goog/math/coordinate.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^5[",["^ ","^60",null,"^61",["^K",[]],"^62",["^10","~$goog.math"]]],["^1D","goog/debug/errorcontext.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^5[",["^ ","^60",null,"^61",["^K",[]],"^62",["^10"]]],["^1D","goog/labs/useragent/useragent.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^5[",["^ ","^60",null,"^61",["^K",[]],"^62",["^10","~$goog.flags"]]],["^1D","goog/dom/element.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^5[",["^ ","^60",null,"^61",["^K",[]],"^62",["^10","^6K","^6L"]]],["^1D","goog/html/uncheckedconversions.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^5[",["^ ","^60",null,"^61",["^K",[]],"^62",["^10","^6D","^7;","^75","^7<","^6O","^77","^6G","^6H","^66"]]],["^1D","goog/debug/debugwindow.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^5[",["^ ","^60",null,"^61",["^K",[]],"^62",["^10","^7N","^6M","^7;","^6O","^6>","^6H","~$goog.structs.CircularBuffer","^6U"]]],["^1D","metabase/mbql/util.cljc"],["2532d5faa94d2a89dd06e529c641d594e298e2aa","^5[",["^ ","^60",null,"^61",["^K",[]],"^62",["^10","^D","^14","^T","^V","^11","^Z","^Y","^W"]]],["^1D","goog/dom/htmlelement.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^5[",["^ ","^60",null,"^61",["^K",[]],"^62",["^10"]]],["^1D","cljs/core.cljs"],["bc14df6666853ed869d7b88aaa864111c65d0c7f","^5[",["^ ","^60",null,"^61",["^K",[]],"^62",["^10","~$goog.math.Long","~$goog.math.Integer","^6E","^6A","^6@","~$goog.Uri","^72"]]],["^1D","goog/html/safescript.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^5[",["^ ","^60",null,"^61",["^K",[]],"^62",["^10","^6H","^6I","^76","^6D"]]],["^1D","goog/log/log.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^5[",["^ ","^60",null,"^61",["^K",[]],"^62",["^10","^6D","^7R"]]],["^1D","camel_snake_kebab/internals/alter_name.cljc"],["5ae08f83ceb8959971e6334596bff0214bf6fdf2","^5[",["^ ","^60",null,"^61",["^K",[]],"^62",["^10","^D"]]],["^1D","goog/html/safestylesheet.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^5[",["^ ","^60",null,"^61",["^K",[]],"^62",["^10","^6H","^7<","^6I","^6A","^6D","^66"]]],["^1D","goog/math/integer.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^5[",["^ ","^60",null,"^61",["^K",[]],"^62",["^10","^6T"]]],["^1D","goog/debug/console.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^5[",["^ ","^60",null,"^61",["^K",[]],"^62",["^10","~$goog.debug.TextFormatter","^6>"]]],["^1D","lambdaisland/glogi/print.cljs"],["76286836d4172602aa08006b2a754dda736ffe09","^5[",["^ ","^60",null,"^61",["^K",[]],"^62",["^10","^D","^7?","^6A"]]],["^1D","goog/dom/browserfeature.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^5[",["^ ","^60",null,"^61",["^K",[]],"^62",["^10","^6U"]]],["^1D","clojure/set.cljs"],["bc14df6666853ed869d7b88aaa864111c65d0c7f","^5[",["^ ","^60",null,"^61",["^K",[]],"^62",["^10","^D"]]],["^1D","goog/uri/utils.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^5[",["^ ","^60",null,"^61",["^K",[]],"^62",["^10","^6D","^6E"]]],["^1D","goog/string/const.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^5[",["^ ","^60",null,"^61",["^K",[]],"^62",["^10","^6D","^6I"]]],["^1D","goog/dom/vendor.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^5[",["^ ","^60",null,"^61",["^K",[]],"^62",["^10","^6E","^6U"]]],["^1D","metabase/mbql/predicates.cljc"],["20ab1a5ccd943c35c646c5f7396ea40f9bfa7ac4","^5[",["^ ","^60",null,"^61",["^K",[]],"^62",["^10","^D","^V","^W"]]]]],"~:clj-info",["^ ","jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/analyzer/impl.cljc",1689947050000,"jar:file:/root/.m2/repository/instaparse/instaparse/1.4.12/instaparse-1.4.12.jar!/instaparse/line_col.clj",1689946146000,"jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/source_map/base64_vlq.clj",1689947050000,"jar:file:/root/.m2/repository/instaparse/instaparse/1.4.12/instaparse-1.4.12.jar!/instaparse/viz.clj",1689946146000,"jar:file:/root/.m2/repository/org/clojure/tools.namespace/1.4.4/tools.namespace-1.4.4.jar!/clojure/tools/namespace/parse.cljc",1689946139000,"jar:file:/root/.m2/repository/weavejester/dependency/0.2.1/dependency-0.2.1.jar!/weavejester/dependency.cljc",1689946093000,"jar:file:/root/.m2/repository/instaparse/instaparse/1.4.12/instaparse-1.4.12.jar!/instaparse/transform.clj",1689946146000,"jar:file:/root/.m2/repository/ring/ring-codec/1.2.0/ring-codec-1.2.0.jar!/ring/util/codec.clj",1689946172000,"jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/instant.clj",1689947050000,"jar:file:/root/.m2/repository/org/clojure/tools.reader/1.3.6/tools.reader-1.3.6.jar!/clojure/tools/reader/default_data_readers.clj",1689946174000,"jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/pprint.cljc",1689947050000,"jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/externs.clj",1689947050000,"file:/home/gmrworkspace/dashboard/shared/src/metabase/mbql/util/match.clj",1690286812000,"jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/vendor/clojure/tools/reader/default_data_readers.clj",1689947050000,"file:/home/gmrworkspace/dashboard/shared/src/metabase/mbql/schema/helpers.cljc",1692013156305,"jar:file:/root/.m2/repository/prismatic/schema/1.4.1/schema-1.4.1.jar!/schema/core.cljc",1689946172000,"file:/home/gmrworkspace/dashboard/shared/src/metabase/shared/util/i18n.clj",1690286812000,"jar:file:/root/.m2/repository/org/clojure/tools.reader/1.3.6/tools.reader-1.3.6.jar!/clojure/tools/reader/edn.clj",1689946174000,"jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/compiler.cljc",1689947050000,"jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/env.cljc",1689947050000,"jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/analyzer/impl/namespaces.cljc",1689947050000,"jar:file:/root/.m2/repository/prismatic/schema/1.4.1/schema-1.4.1.jar!/schema/macros.clj",1689946172000,"file:/home/gmrworkspace/dashboard/src/metabase/util/i18n/plural.clj",1690286813000,"jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/source_map.clj",1689947050000,"jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/util.cljc",1689947050000,"file:/home/gmrworkspace/dashboard/src/metabase/util.cljc",1690286813000,"jar:file:/root/.m2/repository/nano-id/nano-id/1.0.0/nano-id-1.0.0.jar!/nano_id/core.cljc",1689946171000,"file:/home/gmrworkspace/dashboard/src/metabase/plugins/classloader.clj",1692013156125,"jar:file:/root/.m2/repository/medley/medley/1.4.0/medley-1.4.0.jar!/medley/core.cljc",1689946185000,"jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/analyzer.cljc",1689947050000,"jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/analyzer/passes.cljc",1689947050000,"jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/vendor/clojure/data/json.clj",1689947050000,"file:/home/gmrworkspace/dashboard/src/metabase/util/format.cljc",1690286813000,"jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/source_map/base64.clj",1689947050000,"jar:file:/root/.m2/repository/riddley/riddley/0.2.0/riddley-0.2.0.jar!/riddley/walk.clj",1689946160000,"jar:file:/root/.m2/repository/instaparse/instaparse/1.4.12/instaparse-1.4.12.jar!/instaparse/reduction.clj",1689946146000,"jar:file:/root/.m2/repository/org/tcrawley/dynapath/1.1.0/dynapath-1.1.0.jar!/dynapath/util.clj",1689946174000,"jar:file:/root/.m2/repository/camel-snake-kebab/camel-snake-kebab/0.4.3/camel-snake-kebab-0.4.3.jar!/camel_snake_kebab/internals/macros.cljc",1689946178000,"file:/home/gmrworkspace/dashboard/shared/src/metabase/mbql/util/match/impl.cljc",1690286812000,"jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/vendor/clojure/tools/reader/reader_types.clj",1689947050000,"jar:file:/root/.m2/repository/instaparse/instaparse/1.4.12/instaparse-1.4.12.jar!/instaparse/auto_flatten_seq.clj",1689946146000,"jar:file:/root/.m2/repository/instaparse/instaparse/1.4.12/instaparse-1.4.12.jar!/instaparse/core.clj",1689946146000,"jar:file:/root/.m2/repository/org/clojure/core.cache/1.0.225/core.cache-1.0.225.jar!/clojure/core/cache.clj",1689946183000,"jar:file:/root/.m2/repository/potemkin/potemkin/0.4.6/potemkin-0.4.6.jar!/potemkin/types.clj",1689946176000,"jar:file:/root/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/set.clj",1689946092000,"jar:file:/root/.m2/repository/org/clojure/math.numeric-tower/0.0.5/math.numeric-tower-0.0.5.jar!/clojure/math/numeric_tower.clj",1689946148000,"jar:file:/root/.m2/repository/net/cgrand/macrovich/0.2.1/macrovich-0.2.1.jar!/net/cgrand/macrovich.cljc",1689946165000,"jar:file:/root/.m2/repository/colorize/colorize/0.1.1/colorize-0.1.1.jar!/colorize/core.clj",1689946104000,"jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/vendor/clojure/tools/reader/impl/inspect.clj",1689947050000,"jar:file:/root/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/string.clj",1689946092000,"jar:file:/root/.m2/repository/potemkin/potemkin/0.4.6/potemkin-0.4.6.jar!/potemkin.clj",1689946176000,"jar:file:/root/.m2/repository/instaparse/instaparse/1.4.12/instaparse-1.4.12.jar!/instaparse/failure.clj",1689946146000,"jar:file:/root/.m2/repository/prismatic/schema/1.4.1/schema-1.4.1.jar!/schema/spec/variant.cljc",1689946172000,"jar:file:/root/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/core.clj",1689946092000,"file:/home/gmrworkspace/dashboard/src/metabase/util/i18n/impl.clj",1692013156125,"jar:file:/root/.m2/repository/org/clojure/tools.namespace/1.4.4/tools.namespace-1.4.4.jar!/clojure/tools/namespace/dependency.cljc",1689946139000,"jar:file:/root/.m2/repository/prismatic/schema/1.4.1/schema-1.4.1.jar!/schema/spec/leaf.cljc",1689946172000,"jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/analyzer/passes/and_or.cljc",1689947050000,"jar:file:/root/.m2/repository/riddley/riddley/0.2.0/riddley-0.2.0.jar!/riddley/compiler.clj",1689946160000,"jar:file:/root/.m2/repository/org/clojure/core.memoize/1.0.257/core.memoize-1.0.257.jar!/clojure/core/memoize.clj",1689946178000,"jar:file:/root/.m2/repository/instaparse/instaparse/1.4.12/instaparse-1.4.12.jar!/instaparse/print.clj",1689946146000,"jar:file:/root/.m2/repository/org/clojure/tools.namespace/1.4.4/tools.namespace-1.4.4.jar!/clojure/tools/namespace/track.cljc",1689946139000,"jar:file:/root/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/pprint.clj",1689946092000,"jar:file:/root/.m2/repository/org/clojure/java.classpath/1.0.0/java.classpath-1.0.0.jar!/clojure/java/classpath.clj",1689946162000,"jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/js_deps.cljc",1689947050000,"jar:file:/root/.m2/repository/cheshire/cheshire/5.11.0/cheshire-5.11.0.jar!/cheshire/factory.clj",1689946173000,"jar:file:/root/.m2/repository/org/clojure/tools.reader/1.3.6/tools.reader-1.3.6.jar!/clojure/tools/reader/impl/errors.clj",1689946174000,"jar:file:/root/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/walk.clj",1689946092000,"jar:file:/root/.m2/repository/org/clojure/tools.reader/1.3.6/tools.reader-1.3.6.jar!/clojure/tools/reader.clj",1689946174000,"jar:file:/root/.m2/repository/prismatic/schema/1.4.1/schema-1.4.1.jar!/schema/spec/core.cljc",1689946172000,"jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/core.cljc",1689947050000,"jar:file:/root/.m2/repository/cheshire/cheshire/5.11.0/cheshire-5.11.0.jar!/cheshire/generate.clj",1689946173000,"jar:file:/root/.m2/repository/org/clojure/tools.reader/1.3.6/tools.reader-1.3.6.jar!/clojure/tools/reader/reader_types.clj",1689946174000,"jar:file:/root/.m2/repository/cheshire/cheshire/5.11.0/cheshire-5.11.0.jar!/cheshire/parse.clj",1689946173000,"file:/home/gmrworkspace/dashboard/src/metabase/util/i18n.clj",1692013156125,"jar:file:/root/.m2/repository/instaparse/instaparse/1.4.12/instaparse-1.4.12.jar!/instaparse/cfg.clj",1689946146000,"jar:file:/root/.m2/repository/cheshire/cheshire/5.11.0/cheshire-5.11.0.jar!/cheshire/core.clj",1689946173000,"jar:file:/root/.m2/repository/instaparse/instaparse/1.4.12/instaparse-1.4.12.jar!/instaparse/gll.clj",1689946146000,"jar:file:/root/.m2/repository/binaryage/devtools/1.0.6/devtools-1.0.6.jar!/devtools/defaults.clj",1689947054000,"jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/vendor/clojure/tools/reader.clj",1689947050000,"jar:file:/root/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/edn.clj",1689946092000,"jar:file:/root/.m2/repository/nano-id/nano-id/1.0.0/nano-id-1.0.0.jar!/nano_id/random.cljc",1689946171000,"jar:file:/root/.m2/repository/environ/environ/1.2.0/environ-1.2.0.jar!/environ/core.cljc",1689946163000,"jar:file:/root/.m2/repository/prismatic/schema/1.4.1/schema-1.4.1.jar!/schema/spec/collection.cljc",1689946172000,"jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/vendor/clojure/tools/reader/impl/errors.clj",1689947050000,"jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/tagged_literals.cljc",1689947050000,"jar:file:/root/.m2/repository/instaparse/instaparse/1.4.12/instaparse-1.4.12.jar!/instaparse/repeat.clj",1689946146000,"jar:file:/root/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/java/io.clj",1689946092000,"jar:file:/root/.m2/repository/com/lambdaisland/glogi/1.2.164/glogi-1.2.164.jar!/lambdaisland/glogi.clj",1689947043000,"jar:file:/root/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/instant.clj",1689946092000,"file:/home/gmrworkspace/dashboard/shared/src/metabase/shared/util/namespaces.clj",1690286812000,"jar:file:/root/.m2/repository/org/clojure/tools.namespace/1.4.4/tools.namespace-1.4.4.jar!/clojure/tools/namespace/file.clj",1689946139000,"jar:file:/root/.m2/repository/org/clojure/core.match/1.0.1/core.match-1.0.1.jar!/cljs/core/match.clj",1689946174000,"file:/home/gmrworkspace/dashboard/shared/src/metabase/mbql/schema/macros.clj",1690286812000,"jar:file:/root/.m2/repository/prismatic/schema/1.4.1/schema-1.4.1.jar!/schema/utils.cljc",1689946172000,"file:/home/gmrworkspace/dashboard/src/metabase/config.clj",1692013154929,"file:/home/gmrworkspace/dashboard/src/metabase/util/log.clj",1690286813000,"jar:file:/root/.m2/repository/org/clojure/tools.reader/1.3.6/tools.reader-1.3.6.jar!/clojure/tools/reader/impl/inspect.clj",1689946174000,"jar:file:/root/.m2/repository/instaparse/instaparse/1.4.12/instaparse-1.4.12.jar!/instaparse/combinators_source.clj",1689946146000,"jar:file:/root/.m2/repository/instaparse/instaparse/1.4.12/instaparse-1.4.12.jar!/instaparse/abnf.clj",1689946146000,"jar:file:/root/.m2/repository/org/clojure/tools.namespace/1.4.4/tools.namespace-1.4.4.jar!/clojure/tools/namespace/find.clj",1689946139000,"jar:file:/root/.m2/repository/org/tcrawley/dynapath/1.1.0/dynapath-1.1.0.jar!/dynapath/dynamic_classpath.clj",1689946174000,"jar:file:/root/.m2/repository/cheshire/cheshire/5.11.0/cheshire-5.11.0.jar!/cheshire/generate_seq.clj",1689946173000,"file:/home/gmrworkspace/dashboard/src/metabase/util/jvm.clj",1692013156125],"~:analyzer",["^ ","^3",null,"^4",["^ "],"^5",["^ ","^6","Utilitiy functions for working with MBQL queries.","^7","metabase/mbql/util.cljc","^8",1,"^9",5,"^:",1,"^;",23],"^<",["^ ","^=","^>","^?","^@","^A","^B","^C","^D","^E","^F","^G","^H"],"^I",null,"^J",["^K",["^L"]],"^M","^N","^O",["^ "],"^R",null,"^S",["^ ","^T","^T","^U","^V","^W","^W","^X","^Y","^Z","^Z","^[","^Z","^D","^D","^10","^10","^11","^11","^Y","^Y","~$s","^W","^12","^11","^V","^V","^13","^14","^14","^14","^15","^T"],"^16",["^K",["^17"]],"~:shadow/js-access-global",["^K",["Error"]],"^18",null,"~:defs",["^ ","~$referenced-field-ids",["^ ","~:protocol-inline",null,"^5",["^ ","^7","metabase/mbql/util.cljc","^8",714,"^9",7,"^:",714,"^;",27,"~:arglists",["^1;",["~$quote",["^1;",[["~$coll"]]]]],"^6","Find all the `:field` references with integer IDs in `coll`, which can be a full MBQL query, a snippet of MBQL, or a\n  sequence of those things; return a set of Field IDs. Includes Fields referenced indirectly via `:source-field`.\n  Returns `nil` if no IDs are found."],"^M","^2T","^7","metabase/mbql/util.cljc","^;",27,"~:method-params",["^1;",[["^:Y"]]],"~:protocol-impl",null,"~:arglists-meta",["^1;",[null,null]],"^9",1,"~:variadic?",false,"^8",714,"~:ret-tag",["^K",[null,"~$clj-nil"]],"^:",714,"~:max-fixed-arity",1,"~:fn-var",true,"^:W",["^1;",["^:X",["^1;",[["^:Y"]]]]],"^6","Find all the `:field` references with integer IDs in `coll`, which can be a full MBQL query, a snippet of MBQL, or a\n  sequence of those things; return a set of Field IDs. Includes Fields referenced indirectly via `:source-field`.\n  Returns `nil` if no IDs are found."],"~$desugar-is-null-and-not-null",["^ ","^:V",null,"^5",["^ ","^7","metabase/mbql/util.cljc","^8",153,"^9",7,"^:",153,"^;",35,"^:W",["^1;",["^:X",["^1;",[["~$m"]]]]],"^6","Rewrite `:is-null` and `:not-null` filter clauses as simpler `:=` and `:!=`, respectively."],"^M","^2R","^7","metabase/mbql/util.cljc","^;",35,"^:Z",["^1;",[["~$m"]]],"^:[",null,"^;0",["^1;",[null,null]],"^9",1,"^;1",false,"^8",153,"^;2","~$any","^:",153,"^;4",1,"^;5",true,"^:W",["^1;",["^:X",["^1;",[["~$m"]]]]],"^6","Rewrite `:is-null` and `:not-null` filter clauses as simpler `:=` and `:!=`, respectively."],"~$desugar-current-relative-datetime",["^ ","^:V",null,"^5",["^ ","^7","metabase/mbql/util.cljc","^8",246,"^9",7,"^:",246,"^;",40,"^:W",["^1;",["^:X",["^1;",[["~$m"]]]]],"^6","Replace `relative-datetime` clauses like `[:relative-datetime :current]` with `[:relative-datetime 0 <unit>]`.\n  `<unit>` is inferred from the `:field` the clause is being compared to (if any), otherwise falls back to `default.`"],"^M","^51","^7","metabase/mbql/util.cljc","^;",40,"^:Z",["^1;",[["~$m"]]],"^:[",null,"^;0",["^1;",[null,null]],"^9",1,"^;1",false,"^8",246,"^;2","^;7","^:",246,"^;4",1,"^;5",true,"^:W",["^1;",["^:X",["^1;",[["~$m"]]]]],"^6","Replace `relative-datetime` clauses like `[:relative-datetime :current]` with `[:relative-datetime 0 <unit>]`.\n  `<unit>` is inferred from the `:field` the clause is being compared to (if any), otherwise falls back to `default.`"],"~$ga-id?",["^ ","^:V",null,"^5",["^ ","^7","metabase/mbql/util.cljc","^8",448,"^9",7,"^:",448,"^;",13,"^:W",["^1;",["^:X",["^1;",[["~$id"]]]]],"^6","Is this ID (presumably of a Metric or Segment) a GA one?"],"^M","^5=","^7","metabase/mbql/util.cljc","^;",13,"^:Z",["^1;",[["^;:"]]],"^:[",null,"^;0",["^1;",[null,null]],"^9",1,"^;1",false,"^8",448,"^;2","~$boolean","^:",448,"^;4",1,"^;5",true,"^:W",["^1;",["^:X",["^1;",[["^;:"]]]]],"^6","Is this ID (presumably of a Metric or Segment) a GA one?"],"~$add-filter-clause",["^ ","~:schema",["^1;",["^1[","~$output-schema63792",["~$input-schema63794"]]],"^:V",null,"^5",["^ ","^;=",["^1;",["^1[","^;>",["^;?"]]],"^7","metabase/mbql/util.cljc","^;",26,"^9",9,"~:raw-arglists",["^1;",["^:X",["^1;",[["~$outer-query","~:-","~$mbql.s/Query","~$new-clause","~:-",["^1;",["~$s/maybe","~$mbql.s/Filter"]]]]]]],"^8",139,"^:",139,"^:W",["^1;",["^:X",["^1;",[["^;A","^;C"]]]]],"^6","Inputs: [outer-query :- mbql.s/Query new-clause :- (s/maybe mbql.s/Filter)]\n  Returns: mbql.s/Query\n\n  Add an additional filter clause to an `outer-query`. If `new-clause` is `nil` this is a no-op."],"^M","^3<","^7","metabase/mbql/util.cljc","^;",26,"^:Z",["^1;",[["~$G__63797","~$G__63798"]]],"^:[",null,"^;0",["^1;",[null,null]],"^9",1,"^;1",false,"^;@",["^1;",["^:X",["^1;",[["^;A","~:-","^;B","^;C","~:-",["^1;",["^;D","^;E"]]]]]]],"^8",139,"^;2",["^K",["~$clj","^;7"]],"^:",139,"^;4",2,"^;5",true,"^:W",["^1;",["^:X",["^1;",[["^;A","^;C"]]]]],"^6","Inputs: [outer-query :- mbql.s/Query new-clause :- (s/maybe mbql.s/Filter)]\n  Returns: mbql.s/Query\n\n  Add an additional filter clause to an `outer-query`. If `new-clause` is `nil` this is a no-op."],"~$dispatch-by-clause-name-or-class",["^ ","^:V",null,"^5",["^ ","^7","metabase/mbql/util.cljc","^8",395,"^9",7,"^:",395,"^;",39,"^:W",["^1;",["^:X",["^1;",[["~$x"],["~$x","~$_"]]]]],"^6","Dispatch function perfect for use with multimethods that dispatch off elements of an MBQL query. If `x` is an MBQL\n  clause, dispatches off the clause name; otherwise dispatches off `x`'s class.","~:top-fn",["^ ","^;1",false,"~:fixed-arity",2,"^;4",2,"^:Z",[["~$x"],["~$x","~$_"]],"^:W",["^1;",[["~$x"],["~$x","~$_"]]],"^;0",["^1;",[null,null]]]],"^M","^5G","^7","metabase/mbql/util.cljc","^;",39,"^;J",["^ ","^;1",false,"^;K",2,"^;4",2,"^:Z",[["~$x"],["~$x","~$_"]],"^:W",["^1;",[["~$x"],["~$x","~$_"]]],"^;0",["^1;",[null,null]]],"^:Z",[["~$x"],["~$x","~$_"]],"^:[",null,"^;K",2,"^;0",["^1;",[null,null]],"^9",1,"^;1",false,"~:methods",[["^ ","^;K",1,"^;1",false,"~:tag",["^K",["^;7","^;3"]]],["^ ","^;K",2,"^;1",false,"^;M",["^K",["^;7","^;3"]]]],"^8",395,"^:",395,"^;4",2,"^;5",true,"^:W",["^1;",[["~$x"],["~$x","~$_"]]],"^6","Dispatch function perfect for use with multimethods that dispatch off elements of an MBQL query. If `x` is an MBQL\n  clause, dispatches off the clause name; otherwise dispatches off `x`'s class."],"~$mbql-clause?",["^ ","^:V",null,"^5",["^ ","^7","metabase/mbql/util.cljc","^8",45,"^9",7,"^:",45,"^;",19,"^:W",["^1;",["^:X",["^1;",[["~$x"]]]]],"^6","True if `x` is an MBQL clause (a sequence with a keyword as its first arg). (Since this is used by the code in\n  `normalize` this handles pre-normalized clauses as well.)"],"^M","^3E","^7","metabase/mbql/util.cljc","^;",19,"^:Z",["^1;",[["~$x"]]],"^:[",null,"^;0",["^1;",[null,null]],"^9",1,"^;1",false,"^8",45,"^;2","^;;","^:",45,"^;4",1,"^;5",true,"^:W",["^1;",["^:X",["^1;",[["~$x"]]]]],"^6","True if `x` is an MBQL clause (a sequence with a keyword as its first arg). (Since this is used by the code in\n  `normalize` this handles pre-normalized clauses as well.)"],"~$uniquify-named-aggregations",["^ ","^;=",["^1;",["^1[","~$output-schema64262",["~$input-schema64264"]]],"^:V",null,"^5",["^ ","^;=",["^1;",["^1[","^;P",["^;Q"]]],"^7","metabase/mbql/util.cljc","^;",36,"^9",9,"^;@",["^1;",["^:X",["^1;",[["~$named-aggregations","~:-",["~$NamedAggregation"]]]]]],"^8",582,"^:",582,"^:W",["^1;",["^:X",["^1;",[["^;R"]]]]],"^6","Inputs: [named-aggregations :- [NamedAggregation]]\n  Returns: UniquelyNamedAggregations\n\n  Make the names of a sequence of named aggregations unique by adding suffixes such as `_2`."],"^M","^3M","^7","metabase/mbql/util.cljc","^;",36,"^:Z",["^1;",[["~$G__64267"]]],"^:[",null,"^;0",["^1;",[null,null]],"^9",1,"^;1",false,"^;@",["^1;",["^:X",["^1;",[["^;R","~:-",["^;S"]]]]]],"^8",582,"^;2","^31","^:",582,"^;4",1,"^;5",true,"^:W",["^1;",["^:X",["^1;",[["^;R"]]]]],"^6","Inputs: [named-aggregations :- [NamedAggregation]]\n  Returns: UniquelyNamedAggregations\n\n  Make the names of a sequence of named aggregations unique by adding suffixes such as `_2`."],"~$remove-namespaced-options",["^ ","^:V",null,"^5",["^ ","^7","metabase/mbql/util.cljc","^8",705,"^9",7,"^:",705,"^;",32,"^:W",["^1;",["^:X",["^1;",[["~$field-or-ref"]]]]],"^6","Update a `:field`, `:expression` reference, or `:aggregation` reference clause by removing all namespaced keys in the\n  options map. This is mainly for clause equality comparison purposes -- in current usage namespaced keys are used by\n  individual pieces of middleware or driver implementations for tracking little bits of information that should not be\n  considered relevant when comparing clauses for equality."],"^M","^5X","^7","metabase/mbql/util.cljc","^;",32,"^:Z",["^1;",[["^;V"]]],"^:[",null,"^;0",["^1;",[null,null]],"^9",1,"^;1",false,"^8",705,"^;2","~$cljs.core/IVector","^:",705,"^;4",1,"^;5",true,"^:W",["^1;",["^:X",["^1;",[["^;V"]]]]],"^6","Update a `:field`, `:expression` reference, or `:aggregation` reference clause by removing all namespaced keys in the\n  options map. This is mainly for clause equality comparison purposes -- in current usage namespaced keys are used by\n  individual pieces of middleware or driver implementations for tracking little bits of information that should not be\n  considered relevant when comparing clauses for equality."],"~$desugar-is-empty-and-not-empty",["^ ","^:V",null,"^5",["^ ","^7","metabase/mbql/util.cljc","^8",160,"^9",7,"^:",160,"^;",37,"^:W",["^1;",["^:X",["^1;",[["~$m"]]]]],"^6","Rewrite `:is-empty` and `:not-empty` filter clauses as simpler `:=` and `:!=`, respectively."],"^M","^3Y","^7","metabase/mbql/util.cljc","^;",37,"^:Z",["^1;",[["~$m"]]],"^:[",null,"^;0",["^1;",[null,null]],"^9",1,"^;1",false,"^8",160,"^;2","^;7","^:",160,"^;4",1,"^;5",true,"^:W",["^1;",["^:X",["^1;",[["~$m"]]]]],"^6","Rewrite `:is-empty` and `:not-empty` filter clauses as simpler `:=` and `:!=`, respectively."],"~$desugar-divide-with-extra-args",["^ ","^:V",null,"^5",["^ ","^7","metabase/mbql/util.cljc","^8",286,"^9",8,"^:",286,"^;",38,"~:private",true,"^:W",["^1;",["^:X",["^1;",[["~$expression"]]]]]],"^;Z",true,"^M","^27","^7","metabase/mbql/util.cljc","^;",38,"^:Z",["^1;",[["^;["]]],"^:[",null,"^;0",["^1;",[null,null]],"^9",1,"^;1",false,"^8",286,"^;2","^;7","^:",286,"^;4",1,"^;5",true,"^:W",["^1;",["^:X",["^1;",[["^;["]]]]]],"~$simplify-compound-filter",["^ ","^:V",null,"^5",["^ ","^7","metabase/mbql/util.cljc","^8",77,"^9",7,"^:",77,"^;",31,"^:W",["^1;",["^:X",["^1;",[["~$filter-clause"]]]]],"^6","Simplify compound `:and`, `:or`, and `:not` compound filters, combining or eliminating them where possible. This\n  also fixes theoretically disallowed compound filters like `:and` with only a single subclause, and eliminates `nils`\n  and duplicate subclauses from the clauses."],"^M","^26","^7","metabase/mbql/util.cljc","^;",31,"^:Z",["^1;",[["^<1"]]],"^:[",null,"^;0",["^1;",[null,null]],"^9",1,"^;1",false,"^8",77,"^;2","^;7","^:",77,"^;4",1,"^;5",true,"^:W",["^1;",["^:X",["^1;",[["^<1"]]]]],"^6","Simplify compound `:and`, `:or`, and `:not` compound filters, combining or eliminating them where possible. This\n  also fixes theoretically disallowed compound filters like `:and` with only a single subclause, and eliminates `nils`\n  and duplicate subclauses from the clauses."],"^;S",["^ ","^5",["^ ","^7","metabase/mbql/util.cljc","^8",568,"^9",16,"^:",568,"^;",32,"^;Z",true],"^;Z",true,"^M","^42","^7","metabase/mbql/util.cljc","^;",32,"^9",1,"^8",568,"^:",568,"^;M","~$schema.core/Constrained"],"~$add-order-by-clause",["^ ","^;=",["^1;",["^1[","~$output-schema64101",["~$input-schema64103"]]],"^:V",null,"^5",["^ ","^;=",["^1;",["^1[","^<4",["^<5"]]],"^7","metabase/mbql/util.cljc","^;",28,"^9",9,"^;@",["^1;",["^:X",["^1;",[["~$inner-query","~:-","~$mbql.s/MBQLQuery",["~$_",["~$_","~$id-or-name","^1?","~$_field"],"^1?","~$order-by-clause"],"~:-","~$mbql.s/OrderBy"]]]]],"^8",383,"^:",383,"^:W",["^1;",["^:X",["^1;",[["^<6",["~$_",["~$_","^<8","^1?","^<9"],"^1?","^<:"]]]]]],"^6","Inputs: [inner-query :- mbql.s/MBQLQuery [_ [_ id-or-name :as _field] :as order-by-clause] :- mbql.s/OrderBy]\n  Returns: mbql.s/MBQLQuery\n\n  Add a new `:order-by` clause to an MBQL `inner-query`. If the new order-by clause references a Field that is\n  already being used in another order-by clause, this function does nothing."],"^M","^49","^7","metabase/mbql/util.cljc","^;",28,"^:Z",["^1;",[["~$G__64106","~$G__64107"]]],"^:[",null,"^;0",["^1;",[null,null]],"^9",1,"^;1",false,"^;@",["^1;",["^:X",["^1;",[["^<6","~:-","^<7",["~$_",["~$_","^<8","^1?","^<9"],"^1?","^<:"],"~:-","^<;"]]]]],"^8",383,"^;2",["^K",[null,"^;H","^;7"]],"^:",383,"^;4",2,"^;5",true,"^:W",["^1;",["^:X",["^1;",[["^<6",["~$_",["~$_","^<8","^1?","^<9"],"^1?","^<:"]]]]]],"^6","Inputs: [inner-query :- mbql.s/MBQLQuery [_ [_ id-or-name :as _field] :as order-by-clause] :- mbql.s/OrderBy]\n  Returns: mbql.s/MBQLQuery\n\n  Add a new `:order-by` clause to an MBQL `inner-query`. If the new order-by clause references a Field that is\n  already being used in another order-by clause, this function does nothing."],"~$query->source-table-id",["^ ","^;=",["^1;",["^1[","~$output-schema64058",["~$input-schema64060"]]],"^:V",null,"^5",["^ ","^;=",["^1;",["^1[","^<?",["^<@"]]],"^7","metabase/mbql/util.cljc","^;",31,"^9",9,"^;@",["^1;",["^:X",["^1;",[[["^5Z",[["^ ","~$source-table-id","~:source-table","~$source-query","~:source-query"],"~:query","~$query-type","~:type","^1?","~$query"]]]]]]],"^8",345,"^:",345,"^:W",["^1;",["^:X",["^1;",[[["^5Z",[["^ ","^<A","^<B","^<C","^<D"],"^<E","^<F","^<G","^1?","^<H"]]]]]]],"^6","Inputs: [{{source-table-id :source-table, source-query :source-query} :query, query-type :type, :as query}]\n  Returns: (s/maybe schema.helpers/IntGreaterThanZero)\n\n  Return the source Table ID associated with `query`, if applicable; handles nested queries as well. If `query` is\n  `nil`, returns `nil`.\n\n  Throws an Exception when it encounters a unresolved source query (i.e., the `:source-table \"card__id\"`\n  form), because it cannot return an accurate result for a query that has not yet been preprocessed."],"^M","^47","^7","metabase/mbql/util.cljc","^;",31,"^:Z",["^1;",[["~$G__64063"]]],"^:[",null,"^;0",["^1;",[null,null]],"^9",1,"^;1",false,"^;@",["^1;",["^:X",["^1;",[[["^5Z",[["^ ","^<A","^<B","^<C","^<D"],"^<E","^<F","^<G","^1?","^<H"]]]]]]],"^8",345,"^;2",["^K",["^;7","^;3"]],"^:",345,"^;4",1,"^;5",true,"^:W",["^1;",["^:X",["^1;",[[["^5Z",[["^ ","^<A","^<B","^<C","^<D"],"^<E","^<F","^<G","^1?","^<H"]]]]]]],"^6","Inputs: [{{source-table-id :source-table, source-query :source-query} :query, query-type :type, :as query}]\n  Returns: (s/maybe schema.helpers/IntGreaterThanZero)\n\n  Return the source Table ID associated with `query`, if applicable; handles nested queries as well. If `query` is\n  `nil`, returns `nil`.\n\n  Throws an Exception when it encounters a unresolved source query (i.e., the `:source-table \"card__id\"`\n  form), because it cannot return an accurate result for a query that has not yet been preprocessed."],"~$normalize-token",["^ ","^;=",["^1;",["^1[","~$output-schema63604",["~$input-schema63606"]]],"^:V",null,"^5",["^ ","^;=",["^1;",["^1[","^<K",["^<L"]]],"^7","metabase/mbql/util.cljc","^;",24,"^9",9,"^;@",["^1;",["^:X",["^1;",[["~$token","~:-","~$schema.helpers/KeywordOrString"]]]]],"^8",35,"^:",35,"^:W",["^1;",["^:X",["^1;",[["^<M"]]]]],"^6","Inputs: [token :- schema.helpers/KeywordOrString]\n  Returns: s/Keyword\n\n  Convert a string or keyword in various cases (`lisp-case`, `snake_case`, or `SCREAMING_SNAKE_CASE`) to a lisp-cased\n  keyword."],"^M","^4<","^7","metabase/mbql/util.cljc","^;",24,"^:Z",["^1;",[["~$G__63609"]]],"^:[",null,"^;0",["^1;",[null,null]],"^9",1,"^;1",false,"^;@",["^1;",["^:X",["^1;",[["^<M","~:-","^<N"]]]]],"^8",35,"^;2",["^K",["^2Q","^;3"]],"^:",35,"^;4",1,"^;5",true,"^:W",["^1;",["^:X",["^1;",[["^<M"]]]]],"^6","Inputs: [token :- schema.helpers/KeywordOrString]\n  Returns: s/Keyword\n\n  Convert a string or keyword in various cases (`lisp-case`, `snake_case`, or `SCREAMING_SNAKE_CASE`) to a lisp-cased\n  keyword."],"~$qualified-name",["^ ","^:V",null,"^5",["^ ","^7","metabase/mbql/util.cljc","^8",28,"^9",7,"^:",28,"^;",21,"^:W",["^1;",["^:X",["^1;",[["~$x"]]]]],"^6","Like `name`, but if `x` is a namespace-qualified keyword, returns that a string including the namespace."],"^M","^4D","^7","metabase/mbql/util.cljc","^;",21,"^:Z",["^1;",[["~$x"]]],"^:[",null,"^;0",["^1;",[null,null]],"^9",1,"^;1",false,"^8",28,"^;2","~$string","^:",28,"^;4",1,"^;5",true,"^:W",["^1;",["^:X",["^1;",[["~$x"]]]]],"^6","Like `name`, but if `x` is a namespace-qualified keyword, returns that a string including the namespace."],"~$desugar-inside",["^ ","^:V",null,"^5",["^ ","^7","metabase/mbql/util.cljc","^8",144,"^9",7,"^:",144,"^;",21,"^:W",["^1;",["^:X",["^1;",[["~$m"]]]]],"^6","Rewrite `:inside` filter clauses as a pair of `:between` clauses."],"^M","^4J","^7","metabase/mbql/util.cljc","^;",21,"^:Z",["^1;",[["~$m"]]],"^:[",null,"^;0",["^1;",[null,null]],"^9",1,"^;1",false,"^8",144,"^;2","^;7","^:",144,"^;4",1,"^;5",true,"^:W",["^1;",["^:X",["^1;",[["~$m"]]]]],"^6","Rewrite `:inside` filter clauses as a pair of `:between` clauses."],"~$aggregation-at-index",["^ ","^;=",["^1;",["^59","~$output-schema64181",["~$input-schema64183","~$input-schema64188"]]],"^:V",null,"^5",["^ ","^;=",["^1;",["^59","^<T",["^<U","^<V"]]],"^7","metabase/mbql/util.cljc","^;",29,"^;J",["^ ","^;1",false,"^;K",3,"^;4",3,"^:Z",[["~$G__64186","~$G__64187"],["~$G__64191","~$G__64192","~$G__64193"]],"^:W",["^1;",[["^<W","^<X"],["^<Y","^<Z","^<["]]],"^;0",["^1;",[null,null]]],"^9",9,"^;@",["^1;",["^:X",["^1;",[["^<H","~$index"],["^<H","~:-","^;B","^=0","~:-","~$schema.helpers/IntGreaterThanOrEqualToZero","~$nesting-level","~:-","^=1"]]]]],"^8",431,"^:",431,"^:W",["^1;",["^:X",["^1;",[["^<H","^=0"],["^<H","^=0","^=2"]]]]],"^6","Inputs: ([query index] [query :- mbql.s/Query index :- schema.helpers/IntGreaterThanOrEqualToZero nesting-level :- schema.helpers/IntGreaterThanOrEqualToZero])\n  Returns: mbql.s/Aggregation\n\n  Fetch the aggregation at index. This is intended to power aggregate field references (e.g. [:aggregation 0]).\n   This also handles nested queries, which could be potentially ambiguous if multiple levels had aggregations. To\n   support nested queries, you'll need to keep tract of how many `:source-query`s deep you've traveled; pass in this\n   number to as optional arg `nesting-level` to make sure you reference aggregations at the right level of nesting."],"^M","^4T","^7","metabase/mbql/util.cljc","^;",29,"^;J",["^ ","^;1",false,"^;K",3,"^;4",3,"^:Z",[["^<W","^<X"],["^<Y","^<Z","^<["]],"^:W",["^1;",[["^<W","^<X"],["^<Y","^<Z","^<["]]],"^;0",["^1;",[null,null]]],"^:Z",[["^<W","^<X"],["^<Y","^<Z","^<["]],"^:[",null,"^;K",3,"^;0",["^1;",[null,null]],"^9",1,"^;1",false,"^;L",[["^ ","^;K",2,"^;1",false,"^;M","^;7"],["^ ","^;K",3,"^;1",false,"^;M","^;7"]],"^;@",["^1;",["^:X",["^1;",[["^<H","^=0"],["^<H","~:-","^;B","^=0","~:-","^=1","^=2","~:-","^=1"]]]]],"^8",431,"^:",431,"^;4",3,"^;5",true,"^:W",["^1;",[["^<W","^<X"],["^<Y","^<Z","^<["]]],"^6","Inputs: ([query index] [query :- mbql.s/Query index :- schema.helpers/IntGreaterThanOrEqualToZero nesting-level :- schema.helpers/IntGreaterThanOrEqualToZero])\n  Returns: mbql.s/Aggregation\n\n  Fetch the aggregation at index. This is intended to power aggregate field references (e.g. [:aggregation 0]).\n   This also handles nested queries, which could be potentially ambiguous if multiple levels had aggregations. To\n   support nested queries, you'll need to keep tract of how many `:source-query`s deep you've traveled; pass in this\n   number to as optional arg `nesting-level` to make sure you reference aggregations at the right level of nesting."],"~$maybe-desugar-expression",["^ ","^:V",null,"^5",["^ ","^7","metabase/mbql/util.cljc","^8",298,"^9",8,"^:",298,"^;",32,"^;Z",true,"^:W",["^1;",["^:X",["^1;",[["~$clause"]]]]]],"^;Z",true,"^M","^2N","^7","metabase/mbql/util.cljc","^;",32,"^:Z",["^1;",[["^=4"]]],"^:[",null,"^;0",["^1;",[null,null]],"^9",1,"^;1",false,"^8",298,"^;2",["^K",[null,"^;7"]],"^:",298,"^;4",1,"^;5",true,"^:W",["^1;",["^:X",["^1;",[["^=4"]]]]]],"~$query->max-rows-limit",["^ ","^:V",null,"^5",["^ ","^7","metabase/mbql/util.cljc","^8",627,"^9",7,"^:",627,"^;",28,"^:W",["^1;",["^:X",["^1;",[[["^5Z",[["^ ","~:keys",["~$max-results","~$max-results-bare-rows"]],"~:constraints",["^5Z",["~$limit","~:limit","~$aggregations","~:aggregation",["^ ","^=6",["~$items"]],"~:page"]],"^<E","^<F","^<G"]]]]]]],"^6","Calculate the absolute maximum number of results that should be returned by this query (MBQL or native), useful for\n  doing the equivalent of\n\n    java.sql.Statement statement = ...;\n    statement.setMaxRows(<max-rows-limit>).\n\n  to ensure the DB cursor or equivalent doesn't fetch more rows than will be consumed.\n\n  This is calculated as follows:\n\n  *  If query is `MBQL` and has a `:limit` or `:page` clause, returns appropriate number\n  *  If query has `:constraints` with `:max-results-bare-rows` or `:max-results`, returns the appropriate number\n     *  `:max-results-bare-rows` is returned if set and Query does not have any aggregations\n     *  `:max-results` is returned otherwise\n  *  If none of the above are set, returns `nil`. In this case, you should use something like the Dashboard QP's\n     `max-rows-limit`"],"^M","^2G","^7","metabase/mbql/util.cljc","^;",28,"^:Z",["^1;",[["~$p__64352"]]],"^:[",null,"^;0",["^1;",[null,null]],"^9",1,"^;1",false,"^8",627,"^;2",["^K",["^;7","^;3"]],"^:",627,"^;4",1,"^;5",true,"^:W",["^1;",["^:X",["^1;",[[["^5Z",[["^ ","^=6",["^=7","^=8"]],"^=9",["^5Z",["^=:","^=;","^=<","^==",["^ ","^=6",["^=>"]],"^=?"]],"^<E","^<F","^<G"]]]]]]],"^6","Calculate the absolute maximum number of results that should be returned by this query (MBQL or native), useful for\n  doing the equivalent of\n\n    java.sql.Statement statement = ...;\n    statement.setMaxRows(<max-rows-limit>).\n\n  to ensure the DB cursor or equivalent doesn't fetch more rows than will be consumed.\n\n  This is calculated as follows:\n\n  *  If query is `MBQL` and has a `:limit` or `:page` clause, returns appropriate number\n  *  If query has `:constraints` with `:max-results-bare-rows` or `:max-results`, returns the appropriate number\n     *  `:max-results-bare-rows` is returned if set and Query does not have any aggregations\n     *  `:max-results` is returned otherwise\n  *  If none of the above are set, returns `nil`. In this case, you should use something like the Dashboard QP's\n     `max-rows-limit`"],"~$negate*",["^ ","^5",["^ ","^7","metabase/mbql/util.cljc","^8",320,"^9",21,"^:",320,"^;",28,"^;Z",true],"^;Z",true,"^M","^4U","^7","metabase/mbql/util.cljc","^;",28,"^9",1,"^8",320,"^:",320,"^;M","^23"],"~$pre-alias-aggregations",["^ ","^;=",["^1;",["^1[","~$output-schema64296",["~$input-schema64298"]]],"^:V",null,"^5",["^ ","^;=",["^1;",["^1[","^=C",["^=D"]]],"^7","metabase/mbql/util.cljc","^;",31,"^9",9,"^;@",["^1;",["^:X",["^1;",[["~$aggregation->name-fn","~:-",["^1;",["~$s/pred","~$fn?"]],"^=<","~:-",["~$mbql.s/Aggregation"]]]]]],"^8",594,"~:style/indent",1,"^:",594,"^:W",["^1;",["^:X",["^1;",[["^=E","^=<"]]]]],"^6","Inputs: [aggregation->name-fn :- (s/pred fn?) aggregations :- [mbql.s/Aggregation]]\n  Returns: [NamedAggregation]\n\n  Wrap every aggregation clause in an `:aggregation-options` clause, using the name returned\n  by `(aggregation->name-fn ag-clause)` as names for any clauses that do not already have a `:name` in\n  `:aggregation-options`.\n\n    (pre-alias-aggregations annotate/aggregation-name\n     [[:count] [:count] [:aggregation-options [:sum [:field 1 nil] {:name \"Sum-41\"}]])\n    ;; -> [[:aggregation-options [:count] {:name \"count\"}]\n           [:aggregation-options [:count] {:name \"count\"}]\n           [:aggregation-options [:sum [:field 1 nil]] {:name \"Sum-41\"}]]\n\n  Most often, `aggregation->name-fn` will be something like `annotate/aggregation-name`, but for purposes of keeping\n  the `metabase.mbql` module seperate from the `metabase.query-processor` code we'll let you pass that in yourself."],"^M","^4V","^7","metabase/mbql/util.cljc","^;",31,"^:Z",["^1;",[["~$G__64301","~$G__64302"]]],"^:[",null,"^;0",["^1;",[null,null]],"^9",1,"^;1",false,"^;@",["^1;",["^:X",["^1;",[["^=E","~:-",["^1;",["^=F","^=G"]],"^=<","~:-",["^=H"]]]]]],"^8",594,"^;2","^;7","^=I",1,"^:",594,"^;4",2,"^;5",true,"^:W",["^1;",["^:X",["^1;",[["^=E","^=<"]]]]],"^6","Inputs: [aggregation->name-fn :- (s/pred fn?) aggregations :- [mbql.s/Aggregation]]\n  Returns: [NamedAggregation]\n\n  Wrap every aggregation clause in an `:aggregation-options` clause, using the name returned\n  by `(aggregation->name-fn ag-clause)` as names for any clauses that do not already have a `:name` in\n  `:aggregation-options`.\n\n    (pre-alias-aggregations annotate/aggregation-name\n     [[:count] [:count] [:aggregation-options [:sum [:field 1 nil] {:name \"Sum-41\"}]])\n    ;; -> [[:aggregation-options [:count] {:name \"count\"}]\n           [:aggregation-options [:count] {:name \"count\"}]\n           [:aggregation-options [:sum [:field 1 nil]] {:name \"Sum-41\"}]]\n\n  Most often, `aggregation->name-fn` will be something like `annotate/aggregation-name`, but for purposes of keeping\n  the `metabase.mbql` module seperate from the `metabase.query-processor` code we'll let you pass that in yourself."],"~$is-clause?",["^ ","^:V",null,"^5",["^ ","^7","metabase/mbql/util.cljc","^8",53,"^9",7,"^:",53,"^;",17,"^:W",["^1;",["^:X",["^1;",[["~$k-or-ks","~$x"]]]]],"^6","If `x` an MBQL clause, and an instance of clauses defined by keyword(s) `k-or-ks`?\n\n    (is-clause? :count [:count 10])        ; -> true\n    (is-clause? #{:+ :- :* :/} [:+ 10 20]) ; -> true"],"^M","^2W","^7","metabase/mbql/util.cljc","^;",17,"^:Z",["^1;",[["^=M","~$x"]]],"^:[",null,"^;0",["^1;",[null,null]],"^9",1,"^;1",false,"^8",53,"^;2",["^K",["^;;","^;7"]],"^:",53,"^;4",2,"^;5",true,"^:W",["^1;",["^:X",["^1;",[["^=M","~$x"]]]]],"^6","If `x` an MBQL clause, and an instance of clauses defined by keyword(s) `k-or-ks`?\n\n    (is-clause? :count [:count 10])        ; -> true\n    (is-clause? #{:+ :- :* :/} [:+ 10 20]) ; -> true"],"~$join->source-table-id",["^ ","^;=",["^1;",["^1[","~$output-schema64083",["~$input-schema64085"]]],"^:V",null,"^5",["^ ","^;=",["^1;",["^1[","^=O",["^=P"]]],"^7","metabase/mbql/util.cljc","^;",30,"^9",9,"^;@",["^1;",["^:X",["^1;",[["~$join"]]]]],"^8",378,"^:",378,"^:W",["^1;",["^:X",["^1;",[["^=Q"]]]]],"^6","Inputs: [join]\n  Returns: (s/maybe schema.helpers/IntGreaterThanZero)\n\n  Like `query->source-table-id`, but for a join."],"^M","^53","^7","metabase/mbql/util.cljc","^;",30,"^:Z",["^1;",[["~$G__64088"]]],"^:[",null,"^;0",["^1;",[null,null]],"^9",1,"^;1",false,"^;@",["^1;",["^:X",["^1;",[["^=Q"]]]]],"^8",378,"^;2",["^K",["^;7","^;3"]],"^:",378,"^;4",1,"^;5",true,"^:W",["^1;",["^:X",["^1;",[["^=Q"]]]]],"^6","Inputs: [join]\n  Returns: (s/maybe schema.helpers/IntGreaterThanZero)\n\n  Like `query->source-table-id`, but for a join."],"~$ga-metric-or-segment?",["^ ","^:V",null,"^5",["^ ","^7","metabase/mbql/util.cljc","^8",455,"^9",7,"^:",455,"^;",28,"^:W",["^1;",["^:X",["^1;",[[["~$_","^;:"]]]]]],"^6","Is this metric or segment clause not a Dashboard Metric or Segment, but rather a GA one? E.g. something like `[:metric\n  ga:users]`. We want to ignore those because they're not the same thing at all as MB Metrics/Segments and don't\n  correspond to objects in our application DB."],"^M","^58","^7","metabase/mbql/util.cljc","^;",28,"^:Z",["^1;",[["~$p__64220"]]],"^:[",null,"^;0",["^1;",[null,null]],"^9",1,"^;1",false,"^8",455,"^;2","^;;","^:",455,"^;4",1,"^;5",true,"^:W",["^1;",["^:X",["^1;",[[["~$_","^;:"]]]]]],"^6","Is this metric or segment clause not a Dashboard Metric or Segment, but rather a GA one? E.g. something like `[:metric\n  ga:users]`. We want to ignore those because they're not the same thing at all as MB Metrics/Segments and don't\n  correspond to objects in our application DB."],"~$UniquelyNamedAggregations",["^ ","^5",["^ ","^7","metabase/mbql/util.cljc","^8",574,"^9",16,"^:",574,"^;",41,"^;Z",true],"^;Z",true,"^M","^56","^7","metabase/mbql/util.cljc","^;",41,"^9",1,"^8",574,"^:",574,"^;M","^<2"],"~$desugar-time-interval",["^ ","^:V",null,"^5",["^ ","^7","metabase/mbql/util.cljc","^8",174,"^9",7,"^:",174,"^;",28,"^:W",["^1;",["^:X",["^1;",[["~$m"]]]]],"^6","Rewrite `:time-interval` filter clauses as simpler ones like `:=` or `:between`."],"^M","^5A","^7","metabase/mbql/util.cljc","^;",28,"^:Z",["^1;",[["~$m"]]],"^:[",null,"^;0",["^1;",[null,null]],"^9",1,"^;1",false,"^8",174,"^;2","^;7","^:",174,"^;4",1,"^;5",true,"^:W",["^1;",["^:X",["^1;",[["~$m"]]]]],"^6","Rewrite `:time-interval` filter clauses as simpler ones like `:=` or `:between`."],"~$temporal-extract-ops",["^ ","^5",["^ ","^7","metabase/mbql/util.cljc","^8",274,"^9",16,"^:",274,"^;",36,"^;Z",true],"^;Z",true,"^M","^3=","^7","metabase/mbql/util.cljc","^;",36,"^9",1,"^8",274,"^:",274,"^;M",["^K",["^;H","^;7","~$cljs.core/ISet","~$cljs.core/MetaFn","^;3"]]],"~$desugar-expression",["^ ","^;=",["^1;",["^1[","~$output-schema63962",["~$input-schema63964"]]],"^:V",null,"^5",["^ ","^;=",["^1;",["^1[","^=[",["^>0"]]],"^7","metabase/mbql/util.cljc","^;",27,"^9",9,"^;@",["^1;",["^:X",["^1;",[["^;[","~:-","~$mbql.s/FieldOrExpressionDef"]]]]],"^8",291,"^:",291,"^:W",["^1;",["^:X",["^1;",[["^;["]]]]],"^6","Inputs: [expression :- mbql.s/FieldOrExpressionDef]\n  Returns: mbql.s/FieldOrExpressionDef\n\n  Rewrite various 'syntactic sugar' expressions like `:/` with more than two args into something simpler for drivers\n  to compile."],"^M","^5F","^7","metabase/mbql/util.cljc","^;",27,"^:Z",["^1;",[["~$G__63967"]]],"^:[",null,"^;0",["^1;",[null,null]],"^9",1,"^;1",false,"^;@",["^1;",["^:X",["^1;",[["^;[","~:-","^>1"]]]]],"^8",291,"^;2","^;7","^:",291,"^;4",1,"^;5",true,"^:W",["^1;",["^:X",["^1;",[["^;["]]]]],"^6","Inputs: [expression :- mbql.s/FieldOrExpressionDef]\n  Returns: mbql.s/FieldOrExpressionDef\n\n  Rewrite various 'syntactic sugar' expressions like `:/` with more than two args into something simpler for drivers\n  to compile."],"~$add-filter-clause-to-inner-query",["^ ","^;=",["^1;",["^1[","~$output-schema63773",["~$input-schema63775"]]],"^:V",null,"^5",["^ ","^;=",["^1;",["^1[","^>4",["^>5"]]],"^7","metabase/mbql/util.cljc","^;",41,"^9",9,"^;@",["^1;",["^:X",["^1;",[["^<6","~:-","^<7","^;C","~:-",["^1;",["^;D","^;E"]]]]]]],"^8",131,"^:",131,"^:W",["^1;",["^:X",["^1;",[["^<6","^;C"]]]]],"^6","Inputs: [inner-query :- mbql.s/MBQLQuery new-clause :- (s/maybe mbql.s/Filter)]\n  Returns: mbql.s/MBQLQuery\n\n  Add a additional filter clause to an *inner* MBQL query, merging with the existing filter clause with `:and` if\n  needed."],"^M","^3?","^7","metabase/mbql/util.cljc","^;",41,"^:Z",["^1;",[["~$G__63778","~$G__63779"]]],"^:[",null,"^;0",["^1;",[null,null]],"^9",1,"^;1",false,"^;@",["^1;",["^:X",["^1;",[["^<6","~:-","^<7","^;C","~:-",["^1;",["^;D","^;E"]]]]]]],"^8",131,"^;2",["^K",[null,"^;H","^;7"]],"^:",131,"^;4",2,"^;5",true,"^:W",["^1;",["^:X",["^1;",[["^<6","^;C"]]]]],"^6","Inputs: [inner-query :- mbql.s/MBQLQuery new-clause :- (s/maybe mbql.s/Filter)]\n  Returns: mbql.s/MBQLQuery\n\n  Add a additional filter clause to an *inner* MBQL query, merging with the existing filter clause with `:and` if\n  needed."],"~$combine-compound-filters-of-type",["^ ","^:V",null,"^5",["^ ","^7","metabase/mbql/util.cljc","^8",69,"^9",8,"^:",69,"^;",40,"^;Z",true,"^:W",["^1;",["^:X",["^1;",[["~$compound-type","~$subclauses"]]]]]],"^;Z",true,"^M","^3C","^7","metabase/mbql/util.cljc","^;",40,"^:Z",["^1;",[["^>9","^>:"]]],"^:[",null,"^;0",["^1;",[null,null]],"^9",1,"^;1",false,"^8",69,"^;2","^;7","^:",69,"^;4",2,"^;5",true,"^:W",["^1;",["^:X",["^1;",[["^>9","^>:"]]]]]],"~$temporal-extract-ops->unit",["^ ","^5",["^ ","^7","metabase/mbql/util.cljc","^8",258,"^9",6,"^:",258,"^;",32],"^M","^3B","^7","metabase/mbql/util.cljc","^;",32,"^9",1,"^8",258,"^:",258,"^;M","~$cljs.core/IMap","^6","Mapping from the sugar syntax to extract datetime to the unit."],"~$remove-empty",["^ ","^:V",null,"^5",["^ ","^7","metabase/mbql/util.cljc","^8",658,"^9",8,"^:",658,"^;",20,"^;Z",true,"^:W",["^1;",["^:X",["^1;",[["~$x"]]]]]],"^;Z",true,"^M","^3H","^7","metabase/mbql/util.cljc","^;",20,"^:Z",["^1;",[["~$x"]]],"^:[",null,"^;0",["^1;",[null,null]],"^9",1,"^;1",false,"^8",658,"^;2",["^K",[null,"^;3"]],"^:",658,"^;4",1,"^;5",true,"^:W",["^1;",["^:X",["^1;",[["~$x"]]]]]],"~$desugar-does-not-contain",["^ ","^:V",null,"^5",["^ ","^7","metabase/mbql/util.cljc","^8",224,"^9",7,"^:",224,"^;",31,"^:W",["^1;",["^:X",["^1;",[["~$m"]]]]],"^6","Rewrite `:does-not-contain` filter clauses as simpler `:not` clauses."],"^M","^5U","^7","metabase/mbql/util.cljc","^;",31,"^:Z",["^1;",[["~$m"]]],"^:[",null,"^;0",["^1;",[null,null]],"^9",1,"^;1",false,"^8",224,"^;2","^;7","^:",224,"^;4",1,"^;5",true,"^:W",["^1;",["^:X",["^1;",[["~$m"]]]]],"^6","Rewrite `:does-not-contain` filter clauses as simpler `:not` clauses."],"~$replace-field-or-expression",["^ ","^:V",null,"^5",["^ ","^7","metabase/mbql/util.cljc","^8",167,"^9",8,"^:",167,"^;",35,"^;Z",true,"^:W",["^1;",["^:X",["^1;",[["~$m","~$unit"]]]]],"^6","Replace a field or expression inside :time-interval"],"^;Z",true,"^M","^1T","^7","metabase/mbql/util.cljc","^;",35,"^:Z",["^1;",[["~$m","^>@"]]],"^:[",null,"^;0",["^1;",[null,null]],"^9",1,"^;1",false,"^8",167,"^;2","^;7","^:",167,"^;4",2,"^;5",true,"^:W",["^1;",["^:X",["^1;",[["~$m","^>@"]]]]],"^6","Replace a field or expression inside :time-interval"],"~$with-temporal-unit",["^ ","^:V",null,"^5",["^ ","^7","metabase/mbql/util.cljc","^8",690,"^9",7,"^:",690,"^;",25,"^:W",["^1;",["^:X",["^1;",[[["~$_","~$_",["^ ","^=6",["~$base-type"]],"^1?","^=4"],"^>@"]]]]],"^6","Set the `:temporal-unit` of a `:field` clause to `unit`."],"^M","^21","^7","metabase/mbql/util.cljc","^;",25,"^:Z",["^1;",[["~$p__64402","^>@"]]],"^:[",null,"^;0",["^1;",[null,null]],"^9",1,"^;1",false,"^8",690,"^;2",["^K",[null,"^;7"]],"^:",690,"^;4",2,"^;5",true,"^:W",["^1;",["^:X",["^1;",[[["~$_","~$_",["^ ","^=6",["^>B"]],"^1?","^=4"],"^>@"]]]]],"^6","Set the `:temporal-unit` of a `:field` clause to `unit`."],"~$combine-filter-clauses",["^ ","^;=",["^1;",["^1[","~$output-schema63749",["~$input-schema63751"]]],"^:V",null,"^5",["^ ","^;=",["^1;",["^1[","^>E",["^>F"]]],"^7","metabase/mbql/util.cljc","^;",31,"^;J",["^ ","^;1",true,"^;K",1,"^;4",1,"^:Z",[["^1;",["~$G__63754","~$rest63755"]]],"^:W",["^1;",[["^>G","~$&","^>H"]]],"^;0",["^1;",[null]]],"^9",9,"^;@",["^1;",["^:X",["^1;",[["^<1","~$&","~$more-filter-clauses"]]]]],"^8",125,"^:",125,"^:W",["^1;",["^:X",["^1;",[["^<1","~$&","^>I"]]]]],"^6","Inputs: [filter-clause & more-filter-clauses]\n  Returns: mbql.s/Filter\n\n  Combine two filter clauses into a single clause in a way that minimizes slapping a bunch of `:and`s together if\n  possible."],"^M","^3U","^7","metabase/mbql/util.cljc","^;",31,"^;J",["^ ","^;1",true,"^;K",1,"^;4",1,"^:Z",[["^1;",["^>G","^>H"]]],"^:W",["^1;",[["^>G","~$&","^>H"]]],"^;0",["^1;",[null]]],"^:Z",[["^1;",["^>G","^>H"]]],"^:[",null,"^;K",1,"^;0",["^1;",[null]],"^9",1,"^;1",true,"^;L",[["^ ","^;K",1,"^;1",true,"^;M","^;7"]],"^;@",["^1;",["^:X",["^1;",[["^<1","~$&","^>I"]]]]],"^8",125,"^;2","^;7","^:",125,"^;4",1,"^;5",true,"^:W",["^1;",[["^>G","~$&","^>H"]]],"^6","Inputs: [filter-clause & more-filter-clauses]\n  Returns: mbql.s/Filter\n\n  Combine two filter clauses into a single clause in a way that minimizes slapping a bunch of `:and`s together if\n  possible."],"~$unique-name-generator",["^ ","^:V",null,"^5",["^ ","^7","metabase/mbql/util.cljc","^8",464,"^9",7,"^:",464,"^;",28,"^:W",["^1;",["^:X",["^1;",[["~$&",["^ ","^=6",["~$name-key-fn","~$unique-alias-fn"],"~:or",["^ ","^>K","~$identity","^>L",["^1;",["~$fn",["~$original","~$suffix"],["^1;",["^13","^>P","~c_","^>Q"]]]]]]]]]]],"^6","Return a function that can be used to uniquify string names. Function maintains an internal counter that will suffix\n  any names passed to it as needed so all results will be unique.\n\n    (let [unique-name (unique-name-generator)]\n      [(unique-name \"A\")\n       (unique-name \"B\")\n       (unique-name \"A\")])\n    ;; -> [\"A\" \"B\" \"A_2\"]\n\n  By default, unique aliases are generated for each unique `[id original-name]` key pair. By default, a unique `id` is\n  generated for every call, meaning repeated calls to [[unique-name-generator]] with the same `original-name` will\n  return different unique aliases. If idempotence is desired, the function returned by the generator also has a 2\n  airity version with the signature\n\n    (unique-name-fn id original-name)\n\n  for example:\n\n    (let [unique-name (unique-name-generator)]\n      [(unique-name :x \"A\")\n       (unique-name :x \"B\")\n       (unique-name :x \"A\")\n       (unique-name :y \"A\")])\n    ;; -> [\"A\" \"B\" \"A\" \"A_2\"]\n\n  Finally, [[unique-name-generator]] accepts the following options to further customize behavior:\n\n  ### `:name-key-fn`\n\n  Generated aliases are unique by the value of `[id (name-key-fn original-name)]`; the default is `identity`, so by\n  default aliases are unique by `[id name-key-fn]`. Specify something custom here if you want to make the unique\n  aliases unique by some other value, for example to make them unique without regards to case:\n\n    (let [f (unique-name-generator :name-key-fn str/lower-case)]\n      [(f \"x\")\n       (f \"X\")\n       (f \"X\")])\n    ;; -> [\"x\" \"X_2\" \"X_3\"]\n\n  This is useful for databases that treat column aliases as case-insensitive (see #19618 for some examples of this).\n\n  ### `:unique-alias-fn`\n\n  The function used to generate a potentially-unique alias given an original alias and unique suffix with the signature\n\n    (unique-alias-fn original suffix)\n\n  By default, combines them like `original_suffix`, but you can supply a custom function if you need to change this\n  behavior:\n\n    (let [f (unique-name-generator :unique-alias-fn (fn [x y] (format \"%s~~%s\" y x)))]\n      [(f \"x\")\n       (f \"x\")])\n  ;; -> [\"x\" \"2~~x\"]\n\n  This is useful if you need to constrain the generated suffix in some way, for example by limiting its length or\n  escaping characters disallowed in a column alias.\n\n  Values generated by this function are recursively checked for uniqueness, and will keep trying values a unique value\n  is generated; for this reason the function *must* return a unique value for every unique input. Use caution when\n  limiting the length of the identifier generated (consider appending a hash in cases like these).","^;J",["^ ","^;1",true,"^;K",0,"^;4",0,"^:Z",[["^1;",[["^ ","^=6",["^>K","^>L"],"^>M",["^ ","^>K","^>N","^>L",["^1;",["^>O",["^>P","^>Q"],["^1;",["^13","^>P","~c_","^>Q"]]]]]]]]],"^:W",["^1;",[["~$&",["^ ","^=6",["^>K","^>L"],"^>M",["^ ","^>K","^>N","^>L",["^1;",["^>O",["^>P","^>Q"],["^1;",["^13","^>P","~c_","^>Q"]]]]]]]]],"^;0",["^1;",[null]]]],"^M","^28","^7","metabase/mbql/util.cljc","^;",28,"^;J",["^ ","^;1",true,"^;K",0,"^;4",0,"^:Z",[["^1;",[["^ ","^=6",["^>K","^>L"],"^>M",["^ ","^>K","^>N","^>L",["^1;",["^>O",["^>P","^>Q"],["^1;",["^13","^>P","~c_","^>Q"]]]]]]]]],"^:W",["^1;",[["~$&",["^ ","^=6",["^>K","^>L"],"^>M",["^ ","^>K","^>N","^>L",["^1;",["^>O",["^>P","^>Q"],["^1;",["^13","^>P","~c_","^>Q"]]]]]]]]],"^;0",["^1;",[null]]],"^:Z",[["^1;",[["^ ","^=6",["^>K","^>L"],"^>M",["^ ","^>K","^>N","^>L",["^1;",["^>O",["^>P","^>Q"],["^1;",["^13","^>P","~c_","^>Q"]]]]]]]]],"^:[",null,"^;K",0,"^;0",["^1;",[null]],"^9",1,"^;1",true,"^;L",[["^ ","^;K",0,"^;1",true,"^;M","~$function"]],"^8",464,"^;2","^;7","^:",464,"^;4",0,"^;5",true,"^:W",["^1;",[["~$&",["^ ","^=6",["^>K","^>L"],"^>M",["^ ","^>K","^>N","^>L",["^1;",["^>O",["^>P","^>Q"],["^1;",["^13","^>P","~c_","^>Q"]]]]]]]]],"^6","Return a function that can be used to uniquify string names. Function maintains an internal counter that will suffix\n  any names passed to it as needed so all results will be unique.\n\n    (let [unique-name (unique-name-generator)]\n      [(unique-name \"A\")\n       (unique-name \"B\")\n       (unique-name \"A\")])\n    ;; -> [\"A\" \"B\" \"A_2\"]\n\n  By default, unique aliases are generated for each unique `[id original-name]` key pair. By default, a unique `id` is\n  generated for every call, meaning repeated calls to [[unique-name-generator]] with the same `original-name` will\n  return different unique aliases. If idempotence is desired, the function returned by the generator also has a 2\n  airity version with the signature\n\n    (unique-name-fn id original-name)\n\n  for example:\n\n    (let [unique-name (unique-name-generator)]\n      [(unique-name :x \"A\")\n       (unique-name :x \"B\")\n       (unique-name :x \"A\")\n       (unique-name :y \"A\")])\n    ;; -> [\"A\" \"B\" \"A\" \"A_2\"]\n\n  Finally, [[unique-name-generator]] accepts the following options to further customize behavior:\n\n  ### `:name-key-fn`\n\n  Generated aliases are unique by the value of `[id (name-key-fn original-name)]`; the default is `identity`, so by\n  default aliases are unique by `[id name-key-fn]`. Specify something custom here if you want to make the unique\n  aliases unique by some other value, for example to make them unique without regards to case:\n\n    (let [f (unique-name-generator :name-key-fn str/lower-case)]\n      [(f \"x\")\n       (f \"X\")\n       (f \"X\")])\n    ;; -> [\"x\" \"X_2\" \"X_3\"]\n\n  This is useful for databases that treat column aliases as case-insensitive (see #19618 for some examples of this).\n\n  ### `:unique-alias-fn`\n\n  The function used to generate a potentially-unique alias given an original alias and unique suffix with the signature\n\n    (unique-alias-fn original suffix)\n\n  By default, combines them like `original_suffix`, but you can supply a custom function if you need to change this\n  behavior:\n\n    (let [f (unique-name-generator :unique-alias-fn (fn [x y] (format \"%s~~%s\" y x)))]\n      [(f \"x\")\n       (f \"x\")])\n  ;; -> [\"x\" \"2~~x\"]\n\n  This is useful if you need to constrain the generated suffix in some way, for example by limiting its length or\n  escaping characters disallowed in a column alias.\n\n  Values generated by this function are recursively checked for uniqueness, and will keep trying values a unique value\n  is generated; for this reason the function *must* return a unique value for every unique input. Use caution when\n  limiting the length of the identifier generated (consider appending a hash in cases like these)."],"~$desugar-temporal-extract",["^ ","^:V",null,"^5",["^ ","^7","metabase/mbql/util.cljc","^8",279,"^9",7,"^:",279,"^;",31,"^:W",["^1;",["^:X",["^1;",[["~$m"]]]]],"^6","Replace datetime extractions clauses like `[:get-year field]` with `[:temporal-extract field :year]`."],"^M","^4:","^7","metabase/mbql/util.cljc","^;",31,"^:Z",["^1;",[["~$m"]]],"^:[",null,"^;0",["^1;",[null,null]],"^9",1,"^;1",false,"^8",279,"^;2","^;7","^:",279,"^;4",1,"^;5",true,"^:W",["^1;",["^:X",["^1;",[["~$m"]]]]],"^6","Replace datetime extractions clauses like `[:get-year field]` with `[:temporal-extract field :year]`."],"~$expression-with-name",["^ ","^;=",["^1;",["^1[","~$output-schema64157",["~$input-schema64159"]]],"^:V",null,"^5",["^ ","^;=",["^1;",["^1[","^>U",["^>V"]]],"^7","metabase/mbql/util.cljc","^;",29,"^9",9,"^;@",["^1;",["^:X",["^1;",[["^<6","~$expression-name","~:-",["^1;",["~$s/cond-pre","~$s/Keyword","~$schema.helpers/NonBlankString"]]]]]]],"^8",411,"^:",411,"^:W",["^1;",["^:X",["^1;",[["^<6","^>W"]]]]],"^6","Inputs: [inner-query expression-name :- (s/cond-pre s/Keyword schema.helpers/NonBlankString)]\n  Returns: mbql.s/FieldOrExpressionDef\n\n  Return the `Expression` referenced by a given `expression-name`."],"^M","^43","^7","metabase/mbql/util.cljc","^;",29,"^:Z",["^1;",[["~$G__64162","~$G__64163"]]],"^:[",null,"^;0",["^1;",[null,null]],"^9",1,"^;1",false,"^;@",["^1;",["^:X",["^1;",[["^<6","^>W","~:-",["^1;",["^>X","^>Y","^>Z"]]]]]]],"^8",411,"^;2","^;7","^:",411,"^;4",2,"^;5",true,"^:W",["^1;",["^:X",["^1;",[["^<6","^>W"]]]]],"^6","Inputs: [inner-query expression-name :- (s/cond-pre s/Keyword schema.helpers/NonBlankString)]\n  Returns: mbql.s/FieldOrExpressionDef\n\n  Return the `Expression` referenced by a given `expression-name`."],"~$assoc-field-options",["^ ","^:V",null,"^5",["^ ","^7","metabase/mbql/util.cljc","^8",685,"^9",7,"^:",685,"^;",26,"^:W",["^1;",["^:X",["^1;",[["^=4","~$&","~$kvs"]]]]],"^6","Like [[clojure.core/assoc]], but for the options in a `:field`, `:expression`, or `:aggregation` clause.","^;J",["^ ","^;1",true,"^;K",1,"^;4",1,"^:Z",[["^1;",["^=4","^?2"]]],"^:W",["^1;",[["^=4","~$&","^?2"]]],"^;0",["^1;",[null]]]],"^M","^2:","^7","metabase/mbql/util.cljc","^;",26,"^;J",["^ ","^;1",true,"^;K",1,"^;4",1,"^:Z",[["^1;",["^=4","^?2"]]],"^:W",["^1;",[["^=4","~$&","^?2"]]],"^;0",["^1;",[null]]],"^:Z",[["^1;",["^=4","^?2"]]],"^:[",null,"^;K",1,"^;0",["^1;",[null]],"^9",1,"^;1",true,"^;L",[["^ ","^;K",1,"^;1",true,"^;M","^;7"]],"^8",685,"^;2","^;7","^:",685,"^;4",1,"^;5",true,"^:W",["^1;",[["^=4","~$&","^?2"]]],"^6","Like [[clojure.core/assoc]], but for the options in a `:field`, `:expression`, or `:aggregation` clause."],"~$negate-filter-clause",["^ ","^;=",["^1;",["^1[","~$output-schema64040",["~$input-schema64042"]]],"^:V",null,"^5",["^ ","^;=",["^1;",["^1[","^?4",["^?5"]]],"^7","metabase/mbql/util.cljc","^;",29,"^9",9,"^;@",["^1;",["^:X",["^1;",[["^<1","~:-","^;E"]]]]],"^8",338,"^:",338,"^:W",["^1;",["^:X",["^1;",[["^<1"]]]]],"^6","Inputs: [filter-clause :- mbql.s/Filter]\n  Returns: mbql.s/Filter\n\n  Return the logical compliment of an MBQL filter clause, generally without using `:not` (except for the string\n  filter clause types). Useful for generating highly optimized filter clauses and for drivers that do not support\n  top-level `:not` filter clauses."],"^M","^4?","^7","metabase/mbql/util.cljc","^;",29,"^:Z",["^1;",[["~$G__64045"]]],"^:[",null,"^;0",["^1;",[null,null]],"^9",1,"^;1",false,"^;@",["^1;",["^:X",["^1;",[["^<1","~:-","^;E"]]]]],"^8",338,"^;2","^;7","^:",338,"^;4",1,"^;5",true,"^:W",["^1;",["^:X",["^1;",[["^<1"]]]]],"^6","Inputs: [filter-clause :- mbql.s/Filter]\n  Returns: mbql.s/Filter\n\n  Return the logical compliment of an MBQL filter clause, generally without using `:not` (except for the string\n  filter clause types). Useful for generating highly optimized filter clauses and for drivers that do not support\n  top-level `:not` filter clauses."],"~$uniquify-names",["^ ","^;=",["^1;",["^1[","~$output-schema64231",["~$input-schema64233"]]],"^:V",null,"^5",["^ ","^;=",["^1;",["^1[","^?8",["^?9"]]],"^7","metabase/mbql/util.cljc","^;",23,"^9",9,"^;@",["^1;",["^:X",["^1;",[["~$names","~:-",["~$s/Str"]]]]]],"^8",560,"^:",560,"^:W",["^1;",["^:X",["^1;",[["^?:"]]]]],"^6","Inputs: [names :- [s/Str]]\n  Returns: (s/constrained [s/Str] distinct? \"sequence of unique strings\")\n\n  Make the names in a sequence of string names unique by adding suffixes such as `_2`.\n\n     (uniquify-names [\"count\" \"sum\" \"count\" \"count_2\"])\n     ;; -> [\"count\" \"sum\" \"count_2\" \"count_2_2\"]"],"^M","^4C","^7","metabase/mbql/util.cljc","^;",23,"^:Z",["^1;",[["~$G__64236"]]],"^:[",null,"^;0",["^1;",[null,null]],"^9",1,"^;1",false,"^;@",["^1;",["^:X",["^1;",[["^?:","~:-",["^?;"]]]]]],"^8",560,"^;2","^31","^:",560,"^;4",1,"^;5",true,"^:W",["^1;",["^:X",["^1;",[["^?:"]]]]],"^6","Inputs: [names :- [s/Str]]\n  Returns: (s/constrained [s/Str] distinct? \"sequence of unique strings\")\n\n  Make the names in a sequence of string names unique by adding suffixes such as `_2`.\n\n     (uniquify-names [\"count\" \"sum\" \"count\" \"count_2\"])\n     ;; -> [\"count\" \"sum\" \"count_2\" \"count_2_2\"]"],"~$update-field-options",["^ ","^;=",["^1;",["^1[","~$output-schema64367",["~$input-schema64369"]]],"^:V",null,"^5",["^ ","^;=",["^1;",["^1[","^?>",["^??"]]],"^7","metabase/mbql/util.cljc","^;",29,"^;J",["^ ","^;1",true,"^;K",2,"^;4",2,"^:Z",[["^1;",["~$G__64372","~$G__64373","~$rest64374"]]],"^:W",["^1;",[["^?@","^?A","~$&","^?B"]]],"^;0",["^1;",[null]]],"^9",9,"^;@",["^1;",["^:X",["^1;",[[["~$clause-type","^<8","~$opts"],"~:-","~$mbql.s/FieldOrAggregationReference","~$f","~$&","~$args"]]]]],"^8",672,"^:",672,"^:W",["^1;",["^:X",["^1;",[[["^?C","^<8","^?D"],"~$f","~$&","^?F"]]]]],"^6","Inputs: [[clause-type id-or-name opts] :- mbql.s/FieldOrAggregationReference f & args]\n  Returns: mbql.s/FieldOrAggregationReference\n\n  Like [[clojure.core/update]], but for the options in a `:field`, `:expression`, or `:aggregation` clause."],"^M","^4I","^7","metabase/mbql/util.cljc","^;",29,"^;J",["^ ","^;1",true,"^;K",2,"^;4",2,"^:Z",[["^1;",["^?@","^?A","^?B"]]],"^:W",["^1;",[["^?@","^?A","~$&","^?B"]]],"^;0",["^1;",[null]]],"^:Z",[["^1;",["^?@","^?A","^?B"]]],"^:[",null,"^;K",2,"^;0",["^1;",[null]],"^9",1,"^;1",true,"^;L",[["^ ","^;K",2,"^;1",true,"^;M","^;W"]],"^;@",["^1;",["^:X",["^1;",[[["^?C","^<8","^?D"],"~:-","^?E","~$f","~$&","^?F"]]]]],"^8",672,"^;2","^;7","^:",672,"^;4",2,"^;5",true,"^:W",["^1;",[["^?@","^?A","~$&","^?B"]]],"^6","Inputs: [[clause-type id-or-name opts] :- mbql.s/FieldOrAggregationReference f & args]\n  Returns: mbql.s/FieldOrAggregationReference\n\n  Like [[clojure.core/update]], but for the options in a `:field`, `:expression`, or `:aggregation` clause."],"~$desugar-filter-clause",["^ ","^;=",["^1;",["^1[","~$output-schema63981",["~$input-schema63983"]]],"^:V",null,"^5",["^ ","^;=",["^1;",["^1[","^?H",["^?I"]]],"^7","metabase/mbql/util.cljc","^;",30,"^9",9,"^;@",["^1;",["^:X",["^1;",[["^<1","~:-","^;E"]]]]],"^8",302,"^:",302,"^:W",["^1;",["^:X",["^1;",[["^<1"]]]]],"^6","Inputs: [filter-clause :- mbql.s/Filter]\n  Returns: mbql.s/Filter\n\n  Rewrite various 'syntatic sugar' filter clauses like `:time-interval` and `:inside` as simpler, logically\n  equivalent clauses. This can be used to simplify the number of filter clauses that need to be supported by anything\n  that needs to enumerate all the possible filter types (such as driver query processor implementations, or the\n  implementation [[negate-filter-clause]] below.)"],"^M","^2B","^7","metabase/mbql/util.cljc","^;",30,"^:Z",["^1;",[["~$G__63986"]]],"^:[",null,"^;0",["^1;",[null,null]],"^9",1,"^;1",false,"^;@",["^1;",["^:X",["^1;",[["^<1","~:-","^;E"]]]]],"^8",302,"^;2",["^K",[null,"^;7"]],"^:",302,"^;4",1,"^;5",true,"^:W",["^1;",["^:X",["^1;",[["^<1"]]]]],"^6","Inputs: [filter-clause :- mbql.s/Filter]\n  Returns: mbql.s/Filter\n\n  Rewrite various 'syntatic sugar' filter clauses like `:time-interval` and `:inside` as simpler, logically\n  equivalent clauses. This can be used to simplify the number of filter clauses that need to be supported by anything\n  that needs to enumerate all the possible filter types (such as driver query processor implementations, or the\n  implementation [[negate-filter-clause]] below.)"],"~$desugar-equals-and-not-equals-with-extra-args",["^ ","^:V",null,"^5",["^ ","^7","metabase/mbql/util.cljc","^8",231,"^9",7,"^:",231,"^;",52,"^:W",["^1;",["^:X",["^1;",[["~$m"]]]]],"^6","~`:=` and `!=` clauses with more than 2 args automatically get rewritten as compound filters.\n\n     [:= field x y]  -> [:or  [:=  field x] [:=  field y]]\n     [:!= field x y] -> [:and [:!= field x] [:!= field y]]"],"^M","^2I","^7","metabase/mbql/util.cljc","^;",52,"^:Z",["^1;",[["~$m"]]],"^:[",null,"^;0",["^1;",[null,null]],"^9",1,"^;1",false,"^8",231,"^;2","^;7","^:",231,"^;4",1,"^;5",true,"^:W",["^1;",["^:X",["^1;",[["~$m"]]]]],"^6","~`:=` and `!=` clauses with more than 2 args automatically get rewritten as compound filters.\n\n     [:= field x y]  -> [:or  [:=  field x] [:=  field y]]\n     [:!= field x y] -> [:and [:!= field x] [:!= field y]]"],"~$pre-alias-and-uniquify-aggregations",["^ ","^;=",["^1;",["^1[","~$output-schema64333",["~$input-schema64335"]]],"^:V",null,"^5",["^ ","^;=",["^1;",["^1[","^?M",["^?N"]]],"^7","metabase/mbql/util.cljc","^;",44,"^9",9,"^;@",["^1;",["^:X",["^1;",[["^=E","~:-",["^1;",["^=F","^=G"]],"^=<","~:-",["^=H"]]]]]],"^8",619,"^=I",1,"^:",619,"^:W",["^1;",["^:X",["^1;",[["^=E","^=<"]]]]],"^6","Inputs: [aggregation->name-fn :- (s/pred fn?) aggregations :- [mbql.s/Aggregation]]\n  Returns: UniquelyNamedAggregations\n\n  Wrap every aggregation clause in a `:named` clause with a unique name. Combines `pre-alias-aggregations` with\n  `uniquify-named-aggregations`."],"^M","^4P","^7","metabase/mbql/util.cljc","^;",44,"^:Z",["^1;",[["~$G__64338","~$G__64339"]]],"^:[",null,"^;0",["^1;",[null,null]],"^9",1,"^;1",false,"^;@",["^1;",["^:X",["^1;",[["^=E","~:-",["^1;",["^=F","^=G"]],"^=<","~:-",["^=H"]]]]]],"^8",619,"^;2","^31","^=I",1,"^:",619,"^;4",2,"^;5",true,"^:W",["^1;",["^:X",["^1;",[["^=E","^=<"]]]]],"^6","Inputs: [aggregation->name-fn :- (s/pred fn?) aggregations :- [mbql.s/Aggregation]]\n  Returns: UniquelyNamedAggregations\n\n  Wrap every aggregation clause in a `:named` clause with a unique name. Combines `pre-alias-aggregations` with\n  `uniquify-named-aggregations`."]],"^19",["^ ","^D","^D","^W","^W","^X","^Y","^Z","^Z","^[","^Z","^Y","^Y","~$s","^W"],"~:cljs.analyzer/constants",["^ ","^16",["^K",["^>Y","~:week-of-year-instance","~$&","^=9","~:starts-with","^1Z","~:name-key-fn","^;=","^<H","~:get-quarter","^=G","~:<=","^?;","~:inside","~$s/constrained","^<6","~:base-type","^;<","~:expression","~:is-empty","~:schema.core/error","~:contains","~:temporal-extract","^=Q","^?:","^=;","~$arg1","^=<","~:index","~:instance","^>1","~:else","^<D","~:>","~:get-minute","^;O","^?F","~:default","^<7","~:day-of-week","^M","~:value","^>M","~:iso","~:temporal-unit","~:us","~:get-hour","~:hour-of-day","^;S","~:expression-name","~:get-week","^<3","^;[","^<>","~:max-results","~:tried","~:between","^=1","~:month-of-year","~:not","~:field","^<G","^<J","^=0","^=?","^?E","^0","~:/","~:is-null","^;A","^<S","^;R","~:>=","~:not-empty","~:get-day-of-week","~:day-of-month","^>X","^=B","^=F","^<1","^;B","^=N","~:max-results-bare-rows","^=H","^>W","^=E","~:get-second","~:filter","~$schema.helpers/IntGreaterThanZero","~:native","^=U","~:aggregation-options","~:next","~:include-current","~:year-of-era","~:clojure.core.match/not-found","~:!=","^=Z","^<B","^>3","~:expressions","~:current","~:get-month","~:invalid-query","~:get-year","~:order-by","^=I","~:found","~:second-of-minute","~:and","~:week-of-year-us","~$field-or-ag-ref-or-expression-ref","^<N","^<M","~:error","^;D","^==","~$distinct?","~:not-null","^>D","~:input","^;C","~:get-day","^;E","^:X","~:items","~$arg0","^:W","^<E","~:does-not-contain","^=2","~:hierarchy","~:week-of-year-iso","^6","^>T","~:unique-alias-fn","~:last","^?3","^?7","~:=","~:ends-with","^?=","~:<","~:quarter-of-year","^?G","~:relative-datetime","~:minute-of-hour","~:source-field","~:time-interval","^>Z","^?L","~$f"]],"~:order",["^<M","^;=","^<N","^A:","^<J","^6","^>Y","^<G","^@:","^A7","^@0","^0","^@6","^@F","^>M","^A4","^<1","^1Z","^>D","^;E","^<6","^<7","^;C","^;D","^>3","^@O","^;A","^;B","^;<","^<E","^?W","^@D","^A9","^@W","^@H","~:=","^@J","^?[","^?Z","^@G","^@<","^AH","^AE","^@T","^@S","^AB","^@Y","^A>","^@1","^@V","^@8","^?U","^A0","^@A","^@=","^@>","^A;","^@7","^@Z","^@K","^@;","^@5","^@N","^AD","^@U","^A5","^A@","^@?","^@L","^AF","^@E","^@9","^?R","^A3","^@2","~:/","^;[","^>1","^=Z","^?G","^A?","~:>","^?V","~:<","^@I","^?S","^AC","^?3","^A=","^<>","^:W","^@P","^:X","^<B","^<D","^@Q","^=Q","^=N","^@3","^<3","^A1","^>W","^>X","^>Z","^>T","^@X","^@@","^@C","^A2","^@[","^<H","^=0","^=1","^=2","^<S","^=H","^==","^@4","^?T","^AA","^?:","^?;","^?7","^?X","^A8","^M","^;R","^;S","^;O","^=U","^@R","^=E","^=F","^=G","^=<","^=B","^=I","^?L","^=9","^@B","^@M","^=;","^=?","^A<","~$f","^?=","^?E","^A6","~$&","^?F","^?Y","^AG"]],"^1@",["^ ","^17",["^K",[]]],"^1A",["^ "],"^1B",["^10","^D","^14","^T","^V","^11","^Z","^Y","^W"]],"^Q","^N","~:ns-specs",["^ "],"~:ns-spec-vars",["^K",[]],"~:compiler-options",["^5Z",[["^AL","~:static-fns"],true,["^AL","~:shadow-tweaks"],null,["^AL","~:source-map-inline"],null,["^AL","~:elide-asserts"],false,["^AL","~:optimize-constants"],null,["^AL","^1G"],null,["^AL","~:external-config"],null,["^AL","~:tooling-config"],null,["^AL","~:emit-constants"],null,["^AL","~:load-tests"],null,["^AL","~:form-size-threshold"],null,["^AL","~:global-goog-object&array"],null,["^AL","~:data-readers"],null,["^AL","~:infer-externs"],"~:auto",["^AL","^1I"],["^K",["^1J","^1K"]],["~:js-options","~:js-provider"],"^17",["~:mode"],"~:dev",["^AL","~:fn-invoke-direct"],null,["^AL","~:source-map"],"/dev/null"]]]