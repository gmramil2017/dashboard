["^ ","~:output",["^ ","~:js","goog.provide('clojure.test.check.random');\n\n/**\n * @interface\n */\nclojure.test.check.random.IRandom = function(){};\n\nvar clojure$test$check$random$IRandom$rand_long$dyn_44846 = (function (rng){\nvar x__5393__auto__ = (((rng == null))?null:rng);\nvar m__5394__auto__ = (clojure.test.check.random.rand_long[goog.typeOf(x__5393__auto__)]);\nif((!((m__5394__auto__ == null)))){\nreturn (m__5394__auto__.cljs$core$IFn$_invoke$arity$1 ? m__5394__auto__.cljs$core$IFn$_invoke$arity$1(rng) : m__5394__auto__.call(null,rng));\n} else {\nvar m__5392__auto__ = (clojure.test.check.random.rand_long[\"_\"]);\nif((!((m__5392__auto__ == null)))){\nreturn (m__5392__auto__.cljs$core$IFn$_invoke$arity$1 ? m__5392__auto__.cljs$core$IFn$_invoke$arity$1(rng) : m__5392__auto__.call(null,rng));\n} else {\nthrow cljs.core.missing_protocol(\"IRandom.rand-long\",rng);\n}\n}\n});\n/**\n * Returns a random goog.math.Long based on the given immutable RNG.\n * \n *   Note: to maintain independence you should not call more than one\n *   function in the IRandom protocol with the same argument\n */\nclojure.test.check.random.rand_long = (function clojure$test$check$random$rand_long(rng){\nif((((!((rng == null)))) && ((!((rng.clojure$test$check$random$IRandom$rand_long$arity$1 == null)))))){\nreturn rng.clojure$test$check$random$IRandom$rand_long$arity$1(rng);\n} else {\nreturn clojure$test$check$random$IRandom$rand_long$dyn_44846(rng);\n}\n});\n\nvar clojure$test$check$random$IRandom$rand_double$dyn_44853 = (function (rng){\nvar x__5393__auto__ = (((rng == null))?null:rng);\nvar m__5394__auto__ = (clojure.test.check.random.rand_double[goog.typeOf(x__5393__auto__)]);\nif((!((m__5394__auto__ == null)))){\nreturn (m__5394__auto__.cljs$core$IFn$_invoke$arity$1 ? m__5394__auto__.cljs$core$IFn$_invoke$arity$1(rng) : m__5394__auto__.call(null,rng));\n} else {\nvar m__5392__auto__ = (clojure.test.check.random.rand_double[\"_\"]);\nif((!((m__5392__auto__ == null)))){\nreturn (m__5392__auto__.cljs$core$IFn$_invoke$arity$1 ? m__5392__auto__.cljs$core$IFn$_invoke$arity$1(rng) : m__5392__auto__.call(null,rng));\n} else {\nthrow cljs.core.missing_protocol(\"IRandom.rand-double\",rng);\n}\n}\n});\n/**\n * Returns a random double between 0.0 (inclusive) and 1.0 (exclusive)\n *   based on the given immutable RNG.\n * \n *   Note: to maintain independence you should not call more than one\n *   function in the IRandom protocol with the same argument\n */\nclojure.test.check.random.rand_double = (function clojure$test$check$random$rand_double(rng){\nif((((!((rng == null)))) && ((!((rng.clojure$test$check$random$IRandom$rand_double$arity$1 == null)))))){\nreturn rng.clojure$test$check$random$IRandom$rand_double$arity$1(rng);\n} else {\nreturn clojure$test$check$random$IRandom$rand_double$dyn_44853(rng);\n}\n});\n\nvar clojure$test$check$random$IRandom$split$dyn_44856 = (function (rng){\nvar x__5393__auto__ = (((rng == null))?null:rng);\nvar m__5394__auto__ = (clojure.test.check.random.split[goog.typeOf(x__5393__auto__)]);\nif((!((m__5394__auto__ == null)))){\nreturn (m__5394__auto__.cljs$core$IFn$_invoke$arity$1 ? m__5394__auto__.cljs$core$IFn$_invoke$arity$1(rng) : m__5394__auto__.call(null,rng));\n} else {\nvar m__5392__auto__ = (clojure.test.check.random.split[\"_\"]);\nif((!((m__5392__auto__ == null)))){\nreturn (m__5392__auto__.cljs$core$IFn$_invoke$arity$1 ? m__5392__auto__.cljs$core$IFn$_invoke$arity$1(rng) : m__5392__auto__.call(null,rng));\n} else {\nthrow cljs.core.missing_protocol(\"IRandom.split\",rng);\n}\n}\n});\n/**\n * Returns two new RNGs [rng1 rng2], which should generate\n *   sufficiently independent random data.\n * \n *   Note: to maintain independence you should not call more than one\n *   function in the IRandom protocol with the same argument\n */\nclojure.test.check.random.split = (function clojure$test$check$random$split(rng){\nif((((!((rng == null)))) && ((!((rng.clojure$test$check$random$IRandom$split$arity$1 == null)))))){\nreturn rng.clojure$test$check$random$IRandom$split$arity$1(rng);\n} else {\nreturn clojure$test$check$random$IRandom$split$dyn_44856(rng);\n}\n});\n\nvar clojure$test$check$random$IRandom$split_n$dyn_44858 = (function (rng,n){\nvar x__5393__auto__ = (((rng == null))?null:rng);\nvar m__5394__auto__ = (clojure.test.check.random.split_n[goog.typeOf(x__5393__auto__)]);\nif((!((m__5394__auto__ == null)))){\nreturn (m__5394__auto__.cljs$core$IFn$_invoke$arity$2 ? m__5394__auto__.cljs$core$IFn$_invoke$arity$2(rng,n) : m__5394__auto__.call(null,rng,n));\n} else {\nvar m__5392__auto__ = (clojure.test.check.random.split_n[\"_\"]);\nif((!((m__5392__auto__ == null)))){\nreturn (m__5392__auto__.cljs$core$IFn$_invoke$arity$2 ? m__5392__auto__.cljs$core$IFn$_invoke$arity$2(rng,n) : m__5392__auto__.call(null,rng,n));\n} else {\nthrow cljs.core.missing_protocol(\"IRandom.split-n\",rng);\n}\n}\n});\n/**\n * Returns a collection of `n` RNGs, which should generate\n *   sufficiently independent random data.\n * \n *   Note: to maintain independence you should not call more than one\n *   function in the IRandom protocol with the same argument\n */\nclojure.test.check.random.split_n = (function clojure$test$check$random$split_n(rng,n){\nif((((!((rng == null)))) && ((!((rng.clojure$test$check$random$IRandom$split_n$arity$2 == null)))))){\nreturn rng.clojure$test$check$random$IRandom$split_n$arity$2(rng,n);\n} else {\nreturn clojure$test$check$random$IRandom$split_n$dyn_44858(rng,n);\n}\n});\n\n/**\n * Helper for defining constants.\n */\nclojure.test.check.random.hex_long = (function clojure$test$check$random$hex_long(s){\nreturn clojure.test.check.random.longs.from_string(s,(16));\n});\n/**\n * Performs (-> x (unsigned-bit-shift-right n) (bit-xor x)).\n */\nclojure.test.check.random.bxoubsr = (function clojure$test$check$random$bxoubsr(x,n){\nreturn clojure.test.check.random.longs.bit_xor(clojure.test.check.random.longs.unsigned_bit_shift_right(x,n),x);\n});\nclojure.test.check.random.mix_64_const_1 = clojure.test.check.random.hex_long(\"bf58476d1ce4e5b9\");\nclojure.test.check.random.mix_64_const_2 = clojure.test.check.random.hex_long(\"94d049bb133111eb\");\nclojure.test.check.random.mix_64 = (function clojure$test$check$random$mix_64(n){\nreturn clojure.test.check.random.bxoubsr(clojure.test.check.random.longs._STAR_(clojure.test.check.random.bxoubsr(clojure.test.check.random.longs._STAR_(clojure.test.check.random.bxoubsr(n,(30)),clojure.test.check.random.mix_64_const_1),(27)),clojure.test.check.random.mix_64_const_2),(31));\n});\nclojure.test.check.random.mix_gamma_const_1 = clojure.test.check.random.hex_long(\"ff51afd7ed558ccd\");\nclojure.test.check.random.mix_gamma_const_2 = clojure.test.check.random.hex_long(\"c4ceb9fe1a85ec53\");\nclojure.test.check.random.mix_gamma_const_3 = clojure.test.check.random.hex_long(\"aaaaaaaaaaaaaaaa\");\nclojure.test.check.random.mix_gamma = (function clojure$test$check$random$mix_gamma(n){\nvar z = clojure.test.check.random.longs.bit_or(clojure.test.check.random.bxoubsr(clojure.test.check.random.longs._STAR_(clojure.test.check.random.bxoubsr(clojure.test.check.random.longs._STAR_(clojure.test.check.random.bxoubsr(n,(33)),clojure.test.check.random.mix_gamma_const_1),(33)),clojure.test.check.random.mix_gamma_const_2),(33)),clojure.test.check.random.longs.ONE);\nvar G__44821 = z;\nif(((24) > (function (){var G__44822 = clojure.test.check.random.bxoubsr(z,(1));\nreturn (clojure.test.check.random.longs.bit_count.cljs$core$IFn$_invoke$arity$1 ? clojure.test.check.random.longs.bit_count.cljs$core$IFn$_invoke$arity$1(G__44822) : clojure.test.check.random.longs.bit_count.call(null,G__44822));\n})())){\nreturn clojure.test.check.random.longs.bit_xor(G__44821,clojure.test.check.random.mix_gamma_const_3);\n} else {\nreturn G__44821;\n}\n});\n\n/**\n* @constructor\n * @implements {clojure.test.check.random.IRandom}\n*/\nclojure.test.check.random.JavaUtilSplittableRandom = (function (gamma,state){\nthis.gamma = gamma;\nthis.state = state;\n});\n(clojure.test.check.random.JavaUtilSplittableRandom.prototype.clojure$test$check$random$IRandom$ = cljs.core.PROTOCOL_SENTINEL);\n\n(clojure.test.check.random.JavaUtilSplittableRandom.prototype.clojure$test$check$random$IRandom$rand_long$arity$1 = (function (_){\nvar self__ = this;\nvar ___$1 = this;\nreturn clojure.test.check.random.mix_64(clojure.test.check.random.longs._PLUS_(self__.state,self__.gamma));\n}));\n\n(clojure.test.check.random.JavaUtilSplittableRandom.prototype.clojure$test$check$random$IRandom$rand_double$arity$1 = (function (this$){\nvar self__ = this;\nvar this$__$1 = this;\nreturn clojure.test.check.random.doubles.rand_long__GT_rand_double(this$__$1.clojure$test$check$random$IRandom$rand_long$arity$1(null));\n}));\n\n(clojure.test.check.random.JavaUtilSplittableRandom.prototype.clojure$test$check$random$IRandom$split$arity$1 = (function (this$){\nvar self__ = this;\nvar this$__$1 = this;\nvar state_SINGLEQUOTE_ = clojure.test.check.random.longs._PLUS_(self__.gamma,self__.state);\nvar state_SINGLEQUOTE__SINGLEQUOTE_ = clojure.test.check.random.longs._PLUS_(self__.gamma,state_SINGLEQUOTE_);\nvar gamma_SINGLEQUOTE_ = clojure.test.check.random.mix_gamma(state_SINGLEQUOTE__SINGLEQUOTE_);\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(new clojure.test.check.random.JavaUtilSplittableRandom(self__.gamma,state_SINGLEQUOTE__SINGLEQUOTE_)),(new clojure.test.check.random.JavaUtilSplittableRandom(gamma_SINGLEQUOTE_,clojure.test.check.random.mix_64(state_SINGLEQUOTE_)))], null);\n}));\n\n(clojure.test.check.random.JavaUtilSplittableRandom.prototype.clojure$test$check$random$IRandom$split_n$arity$2 = (function (this$,n){\nvar self__ = this;\nvar this$__$1 = this;\nvar G__44832 = n;\nswitch (G__44832) {\ncase (0):\nreturn cljs.core.PersistentVector.EMPTY;\n\nbreak;\ncase (1):\nreturn new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [this$__$1], null);\n\nbreak;\ndefault:\nvar n_dec = (n - (1));\nvar state__$1 = self__.state;\nvar ret = cljs.core.transient$(cljs.core.PersistentVector.EMPTY);\nwhile(true){\nif(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(n_dec,cljs.core.count(ret))){\nreturn cljs.core.persistent_BANG_(cljs.core.conj_BANG_.cljs$core$IFn$_invoke$arity$2(ret,(new clojure.test.check.random.JavaUtilSplittableRandom(self__.gamma,state__$1))));\n} else {\nvar state_SINGLEQUOTE_ = clojure.test.check.random.longs._PLUS_(self__.gamma,state__$1);\nvar state_SINGLEQUOTE__SINGLEQUOTE_ = clojure.test.check.random.longs._PLUS_(self__.gamma,state_SINGLEQUOTE_);\nvar gamma_SINGLEQUOTE_ = clojure.test.check.random.mix_gamma(state_SINGLEQUOTE__SINGLEQUOTE_);\nvar new_rng = (new clojure.test.check.random.JavaUtilSplittableRandom(gamma_SINGLEQUOTE_,clojure.test.check.random.mix_64(state_SINGLEQUOTE_)));\nvar G__44867 = state_SINGLEQUOTE__SINGLEQUOTE_;\nvar G__44868 = cljs.core.conj_BANG_.cljs$core$IFn$_invoke$arity$2(ret,new_rng);\nstate__$1 = G__44867;\nret = G__44868;\ncontinue;\n}\nbreak;\n}\n\n}\n}));\n\n(clojure.test.check.random.JavaUtilSplittableRandom.getBasis = (function (){\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,\"gamma\",\"gamma\",-770466082,null),new cljs.core.Symbol(null,\"state\",\"state\",-348086572,null)], null);\n}));\n\n(clojure.test.check.random.JavaUtilSplittableRandom.cljs$lang$type = true);\n\n(clojure.test.check.random.JavaUtilSplittableRandom.cljs$lang$ctorStr = \"clojure.test.check.random/JavaUtilSplittableRandom\");\n\n(clojure.test.check.random.JavaUtilSplittableRandom.cljs$lang$ctorPrWriter = (function (this__5330__auto__,writer__5331__auto__,opt__5332__auto__){\nreturn cljs.core._write(writer__5331__auto__,\"clojure.test.check.random/JavaUtilSplittableRandom\");\n}));\n\n/**\n * Positional factory function for clojure.test.check.random/JavaUtilSplittableRandom.\n */\nclojure.test.check.random.__GT_JavaUtilSplittableRandom = (function clojure$test$check$random$__GT_JavaUtilSplittableRandom(gamma,state){\nreturn (new clojure.test.check.random.JavaUtilSplittableRandom(gamma,state));\n});\n\nclojure.test.check.random.golden_gamma = clojure.test.check.random.hex_long(\"9e3779b97f4a7c15\");\nclojure.test.check.random.make_java_util_splittable_random = (function clojure$test$check$random$make_java_util_splittable_random(seed){\nreturn (new clojure.test.check.random.JavaUtilSplittableRandom(clojure.test.check.random.golden_gamma,(function (){var or__5045__auto__ = clojure.test.check.random.longs.__GT_long(seed);\nif(cljs.core.truth_(or__5045__auto__)){\nreturn or__5045__auto__;\n} else {\nthrow cljs.core.ex_info.cljs$core$IFn$_invoke$arity$2(\"Bad random seed!\",new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"seed\",\"seed\",68613327),seed], null));\n}\n})()));\n});\nclojure.test.check.random.next_rng = (function (){var a = cljs.core.atom.cljs$core$IFn$_invoke$arity$1(new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"state\",\"state\",-1988618099),clojure.test.check.random.make_java_util_splittable_random((new Date()).valueOf())], null));\nreturn (function (){\nreturn new cljs.core.Keyword(null,\"returned\",\"returned\",-2020439163).cljs$core$IFn$_invoke$arity$1(cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2(a,(function (p__44839){\nvar map__44840 = p__44839;\nvar map__44840__$1 = cljs.core.__destructure_map(map__44840);\nvar state = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__44840__$1,new cljs.core.Keyword(null,\"state\",\"state\",-1988618099));\nvar vec__44841 = clojure.test.check.random.split(state);\nvar r1 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__44841,(0),null);\nvar r2 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__44841,(1),null);\nreturn new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"state\",\"state\",-1988618099),r1,new cljs.core.Keyword(null,\"returned\",\"returned\",-2020439163),r2], null);\n})));\n});\n})();\n/**\n * Given an optional integer (or goog.math.Long) seed, returns an\n *   implementation of the IRandom protocol.\n */\nclojure.test.check.random.make_random = (function clojure$test$check$random$make_random(var_args){\nvar G__44845 = arguments.length;\nswitch (G__44845) {\ncase 0:\nreturn clojure.test.check.random.make_random.cljs$core$IFn$_invoke$arity$0();\n\nbreak;\ncase 1:\nreturn clojure.test.check.random.make_random.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\n(clojure.test.check.random.make_random.cljs$core$IFn$_invoke$arity$0 = (function (){\nreturn clojure.test.check.random.next_rng();\n}));\n\n(clojure.test.check.random.make_random.cljs$core$IFn$_invoke$arity$1 = (function (seed){\nreturn clojure.test.check.random.make_java_util_splittable_random(seed);\n}));\n\n(clojure.test.check.random.make_random.cljs$lang$maxFixedArity = 1);\n\n","~:ns-info",["^ ","~:rename-macros",null,"~:renames",["^ "],"~:meta",["^ ","~:file","clojure/test/check/random.cljs","~:line",12,"~:column",2,"~:end-line",12,"~:end-column",27,"~:author","Gary Fredericks","~:doc","Purely functional and splittable pseudo-random number generators."],"~:ns-aliases",["^ ","~$cljs.loader","~$shadow.loader","~$clojure.pprint","~$cljs.pprint","~$clojure.spec.alpha","~$cljs.spec.alpha","~$clojure.core","~$cljs.core","~$clojure.spec.gen.alpha","~$cljs.spec.gen.alpha","~$clojure.core.match","~$cljs.core.match"],"~:use-macros",null,"~:excludes",["~#set",["~$bit-count","~$bit-xor","~$unsigned-bit-shift-right","~$*","~$bit-or","~$+"]],"~:name","~$clojure.test.check.random","~:reader-aliases",["^ "],"~:op","~:ns","~:imports",null,"~:requires",["^ ","~$clojure.test.check.random.doubles","^X","~$doubles","^X","~$clojure.test.check.random.longs","^Z","~$longs","^Z","^E","^E","~$goog","^10"],"~:seen",["^L",["~:require"]],"~:uses",["^ ","~$+","^Z","~$*","^Z","^N","^Z","^P","^Z","^M","^Z","^O","^Z"],"~:require-macros",["^ ","^E","^E"],"~:form",["~#list",["~$ns","^R",["^16",["~:refer-clojure","~:exclude",["~$+","~$*","^N","^P","^M","^O"]]],["^16",["^12",["^X","~:as","^Y"],["^Z","^1:","^[","~:refer",["~$+","~$*","^N","^P","^M","^O"]]]]]],"~:flags",["^ ","^12",["^L",[]]],"~:js-deps",["^ "],"~:deps",["^10","^E","^X","^Z"]],"^U","^R","~:resource-id",["~:shadow.build.classpath/resource","clojure/test/check/random.cljs"],"~:compiled-at",1692014591399,"^S",["^ ","^X","^X","^Y","^X","^Z","^Z","^[","^Z","^E","^E","^10","^10"],"~:resource-name","clojure/test/check/random.cljs","~:warnings",[],"~:source",";   Copyright (c) Rich Hickey, Reid Draper, and contributors.\n;   All rights reserved.\n;   The use and distribution terms for this software are covered by the\n;   Eclipse Public License 1.0 (http://opensource.org/licenses/eclipse-1.0.php)\n;   which can be found in the file epl-v10.html at the root of this distribution.\n;   By using this software in any fashion, you are agreeing to be bound by\n;   the terms of this license.\n;   You must not remove this notice, or any other, from this software.\n\n(ns ^{:author \"Gary Fredericks\"\n      :doc \"Purely functional and splittable pseudo-random number generators.\"}\n clojure.test.check.random\n  (:refer-clojure :exclude [+ * bit-xor bit-or bit-count\n                            unsigned-bit-shift-right])\n  (:require [clojure.test.check.random.doubles :as doubles]\n            [clojure.test.check.random.longs :as longs\n             :refer [+ * bit-xor bit-or bit-count unsigned-bit-shift-right]]))\n\n(defprotocol IRandom\n  (rand-long [rng]\n    \"Returns a random goog.math.Long based on the given immutable RNG.\n\n  Note: to maintain independence you should not call more than one\n  function in the IRandom protocol with the same argument\")\n  (rand-double [rng]\n    \"Returns a random double between 0.0 (inclusive) and 1.0 (exclusive)\n  based on the given immutable RNG.\n\n  Note: to maintain independence you should not call more than one\n  function in the IRandom protocol with the same argument\")\n  (split [rng]\n    \"Returns two new RNGs [rng1 rng2], which should generate\n  sufficiently independent random data.\n\n  Note: to maintain independence you should not call more than one\n  function in the IRandom protocol with the same argument\")\n  (split-n [rng n]\n    \"Returns a collection of `n` RNGs, which should generate\n  sufficiently independent random data.\n\n  Note: to maintain independence you should not call more than one\n  function in the IRandom protocol with the same argument\"))\n\n;;\n;; This is a port of the clojure-jvm port of\n;; java.util.SplittableRandom, and should give identical results.\n;;\n\n(defn ^:private hex-long\n  \"Helper for defining constants.\"\n  [s]\n  (longs/from-string s 16))\n\n(defn ^:private bxoubsr\n  \"Performs (-> x (unsigned-bit-shift-right n) (bit-xor x)).\"\n  [x n]\n  (-> x (unsigned-bit-shift-right n) (bit-xor x)))\n\n(def ^:private mix-64-const-1 (hex-long \"bf58476d1ce4e5b9\"))\n(def ^:private mix-64-const-2 (hex-long \"94d049bb133111eb\"))\n\n(defn ^:private mix-64\n  [n]\n  (-> n\n      (bxoubsr 30)\n      (* mix-64-const-1)\n      (bxoubsr 27)\n      (* mix-64-const-2)\n      (bxoubsr 31)))\n\n(def ^:private mix-gamma-const-1 (hex-long \"ff51afd7ed558ccd\"))\n(def ^:private mix-gamma-const-2 (hex-long \"c4ceb9fe1a85ec53\"))\n(def ^:private mix-gamma-const-3 (hex-long \"aaaaaaaaaaaaaaaa\"))\n\n(defn ^:private mix-gamma\n  [n]\n  (-> n\n      (bxoubsr 33)\n      (* mix-gamma-const-1)\n      (bxoubsr 33)\n      (* mix-gamma-const-2)\n      (bxoubsr 33)\n      (bit-or longs/ONE)\n      (as-> z\n            (cond-> z\n              (> 24 (-> z\n                        (bxoubsr 1)\n                        (bit-count)))\n              (bit-xor mix-gamma-const-3)))))\n\n(deftype JavaUtilSplittableRandom [gamma state]\n  IRandom\n  (rand-long [_]\n    (-> state (+ gamma) (mix-64)))\n  (rand-double [this]\n    (-> this rand-long doubles/rand-long->rand-double))\n  (split [this]\n    (let [state' (+ gamma state)\n          state'' (+ gamma state')\n          gamma' (mix-gamma state'')]\n      [(JavaUtilSplittableRandom. gamma state'')\n       (JavaUtilSplittableRandom. gamma' (mix-64 state'))]))\n  (split-n [this n]\n    (case n\n      0 []\n      1 [this]\n      (let [n-dec (dec n)]\n        (loop [state state\n               ret (transient [])]\n          (if (= n-dec (count ret))\n            (-> ret\n                (conj! (JavaUtilSplittableRandom. gamma state))\n                (persistent!))\n            (let [state' (+ gamma state)\n                  state'' (+ gamma state')\n                  gamma' (mix-gamma state'')\n                  new-rng (JavaUtilSplittableRandom. gamma' (mix-64 state'))]\n              (recur state'' (conj! ret new-rng)))))))))\n\n(def ^:private golden-gamma\n  (hex-long \"9e3779b97f4a7c15\"))\n\n(defn make-java-util-splittable-random\n  [seed]\n  (JavaUtilSplittableRandom. golden-gamma\n                             (or (longs/->long seed)\n                                 (throw (ex-info \"Bad random seed!\"\n                                                 {:seed seed})))))\n\n(def ^:private next-rng\n  (let [a (atom {:state\n                 (make-java-util-splittable-random (.valueOf (js/Date.)))})]\n    (fn []\n      (:returned\n       (swap! a (fn [{:keys [state]}]\n                  (let [[r1 r2] (split state)]\n                    {:state r1 :returned r2})))))))\n\n(defn make-random\n  \"Given an optional integer (or goog.math.Long) seed, returns an\n  implementation of the IRandom protocol.\"\n  ([] (next-rng))\n  ([seed]\n   (make-java-util-splittable-random seed)))\n","~:reader-features",["^L",["~:cljs-release","~:cljs-dev","~:cljs"]],"~:cljc",false,"~:source-map-compact",["^ ","mappings","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","names",["clojure$test$check$random$IRandom$rand_long$dyn","x__5393__auto__","m__5394__auto__","clojure.test.check.random/rand-long","goog/typeOf","m__5392__auto__","cljs.core/missing-protocol","clojure$test$check$random$IRandom$rand_double$dyn","clojure.test.check.random/rand-double","clojure$test$check$random$IRandom$split$dyn","clojure.test.check.random/split","clojure$test$check$random$IRandom$split_n$dyn","clojure.test.check.random/split-n","clojure.test.check.random/IRandom","rng","n","clojure.test.check.random/hex-long","s","clojure.test.check.random.longs/from-string","clojure.test.check.random/bxoubsr","x","clojure.test.check.random.longs/unsigned-bit-shift-right","clojure.test.check.random.longs/bit-xor","clojure.test.check.random/mix-64-const-1","clojure.test.check.random/mix-64-const-2","clojure.test.check.random/mix-64","clojure.test.check.random.longs/*","clojure.test.check.random/mix-gamma-const-1","clojure.test.check.random/mix-gamma-const-2","clojure.test.check.random/mix-gamma-const-3","clojure.test.check.random/mix-gamma","clojure.test.check.random.longs/bit-or","clojure.test.check.random.longs/ONE","z","G__44821","G__44822","clojure.test.check.random.longs/bit-count","cljs.core/PROTOCOL_SENTINEL","this__5330__auto__","writer__5331__auto__","opt__5332__auto__","cljs.core/-write","clojure.test.check.random/JavaUtilSplittableRandom","clojure.test.check.random/->JavaUtilSplittableRandom","gamma","state","_","clojure.test.check.random.longs/+","this","clojure.test.check.random.doubles/rand-long->rand-double","state'","state''","gamma'","G__44832","n-dec","ret","cljs.core/transient","cljs.core._EQ_","cljs.core/count","cljs.core.conj_BANG_","cljs.core/persistent!","new-rng","clojure.test.check.random/golden-gamma","clojure.test.check.random/make-java-util-splittable-random","seed","or__5045__auto__","clojure.test.check.random.longs/->long","cljs.core.ex_info","clojure.test.check.random/next-rng","a","cljs.core.atom","js/Date","cljs.core.swap_BANG_","p__44839","map__44840","cljs.core/--destructure-map","cljs.core.get","vec__44841","cljs.core.nth","r1","r2","var_args","G__44845","clojure.test.check.random/make-random","js/Error"]],"~:used-vars",["^L",["~$cljs.core/--destructure-map","~$cljs.core/PROTOCOL_SENTINEL","~$clojure.test.check.random/mix-64","~$clojure.test.check.random/make-java-util-splittable-random","~$clojure.test.check.random/make-random","~$clojure.test.check.random/bxoubsr","~$clojure.test.check.random.longs/bit-xor","~$clojure.test.check.random.longs/unsigned-bit-shift-right","~$clojure.test.check.random/mix-64-const-2","~$cljs.core/=","~$clojure.test.check.random/split","~$js/Date","~$cljs.core/-write","~$clojure.test.check.random/IRandom","~$clojure.test.check.random.longs/+","~$cljs.core/count","~$goog/typeOf","~$clojure.test.check.random.longs/from-string","~$clojure.test.check.random/hex-long","~$clojure.test.check.random.longs/bit-count","~$clojure.test.check.random.longs/bit-or","~$cljs.core/atom","~$clojure.test.check.random.longs/*","~$clojure.test.check.random.longs/->long","~$clojure.test.check.random/mix-gamma-const-1","~$clojure.test.check.random/rand-long","~$cljs.core/swap!","~$cljs.core/get","~$clojure.test.check.random/rand-double","~$clojure.test.check.random/next-rng","~$cljs.core/conj!","~$clojure.test.check.random/mix-64-const-1","~$cljs.core/missing-protocol","~$clojure.test.check.random/mix-gamma-const-2","~$cljs.core/persistent!","~$clojure.test.check.random.longs/ONE","~$cljs.core/nth","~$cljs.core/ex-info","~$clojure.test.check.random/JavaUtilSplittableRandom","~$cljs.core/transient","~$cljs.core/not","~$clojure.test.check.random.doubles/rand-long->rand-double","~$clojure.test.check.random/golden-gamma","~$clojure.test.check.random/->JavaUtilSplittableRandom","~$clojure.test.check.random/mix-gamma","~$clojure.test.check.random/split-n","~$js/Error","~$clojure.test.check.random/mix-gamma-const-3"]]],"~:cache-keys",["~#cmap",[["^1@","goog/dom/tagname.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","~:shadow.build.compiler/resolve",["^ ","~:require-id",null,"~:deps-ids",["^L",[]],"~:deps-syms",["^10","~$goog.dom.HtmlElement"]]],["^1@","goog/html/trustedtypes.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2T",["^ ","^2U",null,"^2V",["^L",[]],"^2W",["^10"]]],["^1@","goog/labs/useragent/browser.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2T",["^ ","^2U",null,"^2V",["^L",[]],"^2W",["^10","~$goog.labs.userAgent.util","~$goog.labs.userAgent.highEntropy.highEntropyValue","~$goog.asserts","~$goog.string.internal","~$goog.labs.userAgent.highEntropy.highEntropyData","~$goog.labs.userAgent"]]],["^1@","goog/html/safeurl.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2T",["^ ","^2U",null,"^2V",["^L",[]],"^2W",["^10","^2[","~$goog.fs.url","~$goog.html.TrustedResourceUrl","~$goog.string.Const","~$goog.string.TypedString","^30"]]],["^1@","goog/array/array.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2T",["^ ","^2U",null,"^2V",["^L",[]],"^2W",["^10","^2["]]],["^1@","goog/debug/error.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2T",["^ ","^2U",null,"^2V",["^L",[]],"^2W",["^10"]]],["^1@","goog/flags/flags.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2T",["^ ","^2U",null,"^2V",["^L",[]],"^2W",["^10"]]],["^1@","clojure/test/check/random/doubles.cljs"],["f33d988fd57bc9c11af1952db81c10f319c91416","^2T",["^ ","^2U",null,"^2V",["^L",[]],"^2W",["^10","^E","^Z"]]],["^1@","goog/dom/nodetype.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2T",["^ ","^2U",null,"^2V",["^L",[]],"^2W",["^10"]]],["^1@","goog/labs/useragent/highentropy/highentropyvalue.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2T",["^ ","^2U",null,"^2V",["^L",[]],"^2W",["^10","^2Y","^30"]]],["^1@","clojure/test/check/random.cljs"],["f33d988fd57bc9c11af1952db81c10f319c91416","^2T",["^ ","^2U",null,"^2V",["^L",[]],"^2W",["^10","^E","^X","^Z"]]],["^1@","goog/string/typedstring.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2T",["^ ","^2U",null,"^2V",["^L",[]],"^2W",["^10"]]],["^1@","goog/object/object.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2T",["^ ","^2U",null,"^2V",["^L",[]],"^2W",["^10"]]],["^1@","goog/dom/asserts.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2T",["^ ","^2U",null,"^2V",["^L",[]],"^2W",["^10","^2["]]],"~:SHADOW-TIMESTAMP",[1689947046000,1689947046000,1689947050000],["^1@","goog/math/long.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2T",["^ ","^2U",null,"^2V",["^L",[]],"^2W",["^10","^2[","~$goog.reflect"]]],["^1@","goog/html/trustedresourceurl.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2T",["^ ","^2U",null,"^2V",["^L",[]],"^2W",["^10","^2[","~$goog.fs.blob","^33","~$goog.html.SafeScript","~$goog.html.trustedtypes","^35","^36"]]],["^1@","goog/string/internal.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2T",["^ ","^2U",null,"^2V",["^L",[]],"^2W",["^10"]]],["^1@","goog/functions/functions.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2T",["^ ","^2U",null,"^2V",["^L",[]],"^2W",["^10"]]],["^1@","goog/html/safestyle.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2T",["^ ","^2U",null,"^2V",["^L",[]],"^2W",["^10","^35","~$goog.html.SafeUrl","^36","^2[","^30"]]],["^1@","goog/dom/safe.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2T",["^ ","^2U",null,"^2V",["^L",[]],"^2W",["^10","^2[","~$goog.asserts.dom","~$goog.dom.asserts","~$goog.functions","~$goog.html.SafeHtml","^3:","~$goog.html.SafeStyle","^3<","^34","~$goog.html.uncheckedconversions","^35","^30"]]],["^1@","goog/asserts/dom.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2T",["^ ","^2U",null,"^2V",["^L",[]],"^2W",["^10","~$goog.dom.TagName","^2[","~$goog.dom.element"]]],["^1@","goog/html/safehtml.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2T",["^ ","^2U",null,"^2V",["^L",[]],"^2W",["^10","^35","^3:","^3A","~$goog.html.SafeStyleSheet","^3<","^3C","^34","^36","^2[","~$goog.labs.userAgent.browser","~$goog.array","~$goog.object","^30","~$goog.dom.tags","^3;"]]],["^1@","goog/dom/tags.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2T",["^ ","^2U",null,"^2V",["^L",[]],"^2W",["^10","^3H"]]],["^1@","goog/fs/blob.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2T",["^ ","^2U",null,"^2V",["^L",[]],"^2W",["^10"]]],["^1@","goog/asserts/asserts.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2T",["^ ","^2U",null,"^2V",["^L",[]],"^2W",["^10","~$goog.debug.Error","~$goog.dom.NodeType"]]],["^1@","goog/uri/uri.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2T",["^ ","^2U",null,"^2V",["^L",[]],"^2W",["^10","^3G","^2[","~$goog.collections.maps","~$goog.string","~$goog.structs","~$goog.uri.utils","~$goog.uri.utils.ComponentIndex","~$goog.uri.utils.StandardQueryParam"]]],["^1@","goog/labs/useragent/highentropy/highentropydata.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2T",["^ ","^2U",null,"^2V",["^L",[]],"^2W",["^10","^2Z"]]],["^1@","goog/collections/maps.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2T",["^ ","^2U",null,"^2V",["^L",[]],"^2W",["^10"]]],["^1@","goog/fs/url.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2T",["^ ","^2U",null,"^2V",["^L",[]],"^2W",["^10"]]],["^1@","goog/base.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2T",["^ ","^2U",null,"^2V",["^L",[]],"^2W",[]]],["^1@","goog/structs/structs.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2T",["^ ","^2U",null,"^2V",["^L",[]],"^2W",["^10","^3G","^3H"]]],["^1@","clojure/test/check/random/longs/bit_count_impl.cljs"],["f33d988fd57bc9c11af1952db81c10f319c91416","^2T",["^ ","^2U",null,"^2V",["^L",[]],"^2W",["^10","^E"]]],["^1@","goog/string/string.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2T",["^ ","^2U",null,"^2V",["^L",[]],"^2W",["^10","~$goog.dom.safe","^3B","^35","^30"]]],["^1@","goog/reflect/reflect.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2T",["^ ","^2U",null,"^2V",["^L",[]],"^2W",["^10"]]],["^1@","goog/labs/useragent/util.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2T",["^ ","^2U",null,"^2V",["^L",[]],"^2W",["^10","^30","^32"]]],["^1@","goog/string/stringbuffer.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2T",["^ ","^2U",null,"^2V",["^L",[]],"^2W",["^10"]]],["^1@","goog/labs/useragent/useragent.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2T",["^ ","^2U",null,"^2V",["^L",[]],"^2W",["^10","~$goog.flags"]]],["^1@","goog/dom/element.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2T",["^ ","^2U",null,"^2V",["^L",[]],"^2W",["^10","^3K","^3C"]]],["^1@","goog/html/uncheckedconversions.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2T",["^ ","^2U",null,"^2V",["^L",[]],"^2W",["^10","^2[","^3@","^3:","^3A","^3E","^3<","^34","^35","^30"]]],["^1@","goog/dom/htmlelement.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2T",["^ ","^2U",null,"^2V",["^L",[]],"^2W",["^10"]]],["^1@","cljs/core.cljs"],["bc14df6666853ed869d7b88aaa864111c65d0c7f","^2T",["^ ","^2U",null,"^2V",["^L",[]],"^2W",["^10","~$goog.math.Long","~$goog.math.Integer","^3M","^3H","^3G","~$goog.Uri","~$goog.string.StringBuffer"]]],["^1@","goog/html/safescript.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2T",["^ ","^2U",null,"^2V",["^L",[]],"^2W",["^10","^35","^36","^3;","^2["]]],["^1@","clojure/test/check/random/longs.cljs"],["f33d988fd57bc9c11af1952db81c10f319c91416","^2T",["^ ","^2U",null,"^2V",["^L",[]],"^2W",["^10","^E","~$clojure.test.check.random.longs.bit-count-impl","^3T","^E"]]],["^1@","goog/html/safestylesheet.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2T",["^ ","^2U",null,"^2V",["^L",[]],"^2W",["^10","^35","^3A","^36","^3H","^2[","^30"]]],["^1@","goog/math/integer.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2T",["^ ","^2U",null,"^2V",["^L",[]],"^2W",["^10","^38"]]],["^1@","goog/uri/utils.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2T",["^ ","^2U",null,"^2V",["^L",[]],"^2W",["^10","^2[","^3M"]]],["^1@","goog/string/const.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2T",["^ ","^2U",null,"^2V",["^L",[]],"^2W",["^10","^2[","^36"]]]]],"~:clj-info",["^ ","jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/analyzer/impl.cljc",1689947050000,"jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/source_map/base64_vlq.clj",1689947050000,"jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/instant.clj",1689947050000,"jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/externs.clj",1689947050000,"jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/vendor/clojure/tools/reader/default_data_readers.clj",1689947050000,"jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/compiler.cljc",1689947050000,"jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/env.cljc",1689947050000,"jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/analyzer/impl/namespaces.cljc",1689947050000,"jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/source_map.clj",1689947050000,"jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/util.cljc",1689947050000,"jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/analyzer.cljc",1689947050000,"jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/analyzer/passes.cljc",1689947050000,"jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/vendor/clojure/data/json.clj",1689947050000,"jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/source_map/base64.clj",1689947050000,"jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/vendor/clojure/tools/reader/reader_types.clj",1689947050000,"jar:file:/root/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/set.clj",1689946092000,"jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/vendor/clojure/tools/reader/impl/inspect.clj",1689947050000,"jar:file:/root/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/string.clj",1689946092000,"jar:file:/root/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/core.clj",1689946092000,"jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/analyzer/passes/and_or.cljc",1689947050000,"jar:file:/root/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/pprint.clj",1689946092000,"jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/js_deps.cljc",1689947050000,"jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/core.cljc",1689947050000,"jar:file:/root/.m2/repository/binaryage/devtools/1.0.6/devtools-1.0.6.jar!/devtools/defaults.clj",1689947054000,"jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/vendor/clojure/tools/reader.clj",1689947050000,"jar:file:/root/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/edn.clj",1689946092000,"jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/vendor/clojure/tools/reader/impl/errors.clj",1689947050000,"jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/tagged_literals.cljc",1689947050000,"jar:file:/root/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/java/io.clj",1689946092000,"jar:file:/root/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/instant.clj",1689946092000],"~:analyzer",["^ ","^3",null,"^4",["^ "],"^5",["^ ","^6","clojure/test/check/random.cljs","^7",12,"^8",2,"^9",12,"^:",27,"^;","Gary Fredericks","^<","Purely functional and splittable pseudo-random number generators."],"^=",["^ ","^>","^?","^@","^A","^B","^C","^D","^E","^F","^G","^H","^I"],"~:shadow/protocol-prefixes",["^L",["clojure$test$check$random$IRandom$"]],"^J",null,"^K",["^L",["^M","^N","^O","~$*","^P","~$+"]],"^Q","^R","^S",["^ "],"^V",null,"^W",["^ ","^X","^X","^Y","^X","^Z","^Z","^[","^Z","^E","^E","^10","^10"],"^11",["^L",["^12"]],"~:shadow/js-access-global",["^L",["Date","Error"]],"^13",["^ ","~$+","^Z","~$*","^Z","^N","^Z","^P","^Z","^M","^Z","^O","^Z"],"~:defs",["^ ","~$mix-gamma-const-1",["^ ","^5",["^ ","^6","clojure/test/check/random.cljs","^7",71,"^8",16,"^9",71,"^:",33,"~:private",true],"^4Q",true,"^Q","^2:","^6","clojure/test/check/random.cljs","^:",33,"^8",1,"^7",71,"^9",71,"~:tag","~$js"],"~$make-java-util-splittable-random",["^ ","~:protocol-inline",null,"^5",["^ ","^6","clojure/test/check/random.cljs","^7",123,"^8",7,"^9",123,"^:",39,"~:arglists",["^16",["~$quote",["^16",[["~$seed"]]]]]],"^Q","^1Q","^6","clojure/test/check/random.cljs","^:",39,"~:method-params",["^16",[["^4X"]]],"~:protocol-impl",null,"~:arglists-meta",["^16",[null,null]],"^8",1,"~:variadic?",false,"^7",123,"~:ret-tag","^2H","^9",123,"~:max-fixed-arity",1,"~:fn-var",true,"^4V",["^16",["^4W",["^16",[["^4X"]]]]]],"~$rand-long",["^ ","^4U",null,"^5",["^ ","^6","clojure/test/check/random.cljs","^7",20,"^8",4,"^9",20,"^:",13,"~:protocol","^1[","^<","Returns a random goog.math.Long based on the given immutable RNG.\n\n  Note: to maintain independence you should not call more than one\n  function in the IRandom protocol with the same argument","^4V",["^16",["^4W",["^16",[["~$rng"]]]]]],"^55","^1[","^Q","^2;","^6","clojure/test/check/random.cljs","^:",13,"^4Y",["^16",[["^56"]]],"^4Z",null,"^4[",["^16",[null,null]],"^8",1,"^50",false,"^7",19,"^51","~$any","^9",20,"^52",1,"^53",true,"^4V",["^16",["^4W",["^16",[["^56"]]]]],"^<","Returns a random goog.math.Long based on the given immutable RNG.\n\n  Note: to maintain independence you should not call more than one\n  function in the IRandom protocol with the same argument"],"~$mix-64",["^ ","^4U",null,"^5",["^ ","^6","clojure/test/check/random.cljs","^7",62,"^8",17,"^9",62,"^:",23,"^4Q",true,"^4V",["^16",["^4W",["^16",[["~$n"]]]]]],"^4Q",true,"^Q","^1P","^6","clojure/test/check/random.cljs","^:",23,"^4Y",["^16",[["~$n"]]],"^4Z",null,"^4[",["^16",[null,null]],"^8",1,"^50",false,"^7",62,"^51","^57","^9",62,"^52",1,"^53",true,"^4V",["^16",["^4W",["^16",[["~$n"]]]]]],"~$golden-gamma",["^ ","^5",["^ ","^6","clojure/test/check/random.cljs","^7",120,"^8",16,"^9",120,"^:",28,"^4Q",true],"^4Q",true,"^Q","^2L","^6","clojure/test/check/random.cljs","^:",28,"^8",1,"^7",120,"^9",120,"^4R","^4S"],"~$mix-gamma-const-2",["^ ","^5",["^ ","^6","clojure/test/check/random.cljs","^7",72,"^8",16,"^9",72,"^:",33,"^4Q",true],"^4Q",true,"^Q","^2C","^6","clojure/test/check/random.cljs","^:",33,"^8",1,"^7",72,"^9",72,"^4R","^4S"],"~$mix-64-const-2",["^ ","^5",["^ ","^6","clojure/test/check/random.cljs","^7",60,"^8",16,"^9",60,"^:",30,"^4Q",true],"^4Q",true,"^Q","^1V","^6","clojure/test/check/random.cljs","^:",30,"^8",1,"^7",60,"^9",60,"^4R","^4S"],"~$bxoubsr",["^ ","^4U",null,"^5",["^ ","^6","clojure/test/check/random.cljs","^7",54,"^8",17,"^9",54,"^:",24,"^4Q",true,"^4V",["^16",["^4W",["^16",[["~$x","~$n"]]]]],"^<","Performs (-> x (unsigned-bit-shift-right n) (bit-xor x))."],"^4Q",true,"^Q","^1S","^6","clojure/test/check/random.cljs","^:",24,"^4Y",["^16",[["~$x","~$n"]]],"^4Z",null,"^4[",["^16",[null,null]],"^8",1,"^50",false,"^7",54,"^51","^57","^9",54,"^52",2,"^53",true,"^4V",["^16",["^4W",["^16",[["~$x","~$n"]]]]],"^<","Performs (-> x (unsigned-bit-shift-right n) (bit-xor x))."],"~$make-random",["^ ","^4U",null,"^5",["^ ","^6","clojure/test/check/random.cljs","^7",139,"^8",7,"^9",139,"^:",18,"^4V",["^16",["^4W",["^16",[[],["^4X"]]]]],"^<","Given an optional integer (or goog.math.Long) seed, returns an\n  implementation of the IRandom protocol.","~:top-fn",["^ ","^50",false,"~:fixed-arity",1,"^52",1,"^4Y",[[],["^4X"]],"^4V",["^16",[[],["^4X"]]],"^4[",["^16",[null,null]]]],"^Q","^1R","^6","clojure/test/check/random.cljs","^:",18,"^5>",["^ ","^50",false,"^5?",1,"^52",1,"^4Y",[[],["^4X"]],"^4V",["^16",[[],["^4X"]]],"^4[",["^16",[null,null]]],"^4Y",[[],["^4X"]],"^4Z",null,"^5?",1,"^4[",["^16",[null,null]],"^8",1,"^50",false,"~:methods",[["^ ","^5?",0,"^50",false,"^4R","^57"],["^ ","^5?",1,"^50",false,"^4R","^2H"]],"^7",139,"^9",139,"^52",1,"^53",true,"^4V",["^16",[[],["^4X"]]],"^<","Given an optional integer (or goog.math.Long) seed, returns an\n  implementation of the IRandom protocol."],"~$mix-gamma",["^ ","^4U",null,"^5",["^ ","^6","clojure/test/check/random.cljs","^7",75,"^8",17,"^9",75,"^:",26,"^4Q",true,"^4V",["^16",["^4W",["^16",[["~$n"]]]]]],"^4Q",true,"^Q","^2N","^6","clojure/test/check/random.cljs","^:",26,"^4Y",["^16",[["~$n"]]],"^4Z",null,"^4[",["^16",[null,null]],"^8",1,"^50",false,"^7",75,"^51","^57","^9",75,"^52",1,"^53",true,"^4V",["^16",["^4W",["^16",[["~$n"]]]]]],"~$mix-gamma-const-3",["^ ","^5",["^ ","^6","clojure/test/check/random.cljs","^7",73,"^8",16,"^9",73,"^:",33,"^4Q",true],"^4Q",true,"^Q","^2Q","^6","clojure/test/check/random.cljs","^:",33,"^8",1,"^7",73,"^9",73,"^4R","^4S"],"~$split-n",["^ ","^4U",null,"^5",["^ ","^6","clojure/test/check/random.cljs","^7",37,"^8",4,"^9",37,"^:",11,"^55","^1[","^<","Returns a collection of `n` RNGs, which should generate\n  sufficiently independent random data.\n\n  Note: to maintain independence you should not call more than one\n  function in the IRandom protocol with the same argument","^4V",["^16",["^4W",["^16",[["^56","~$n"]]]]]],"^55","^1[","^Q","^2O","^6","clojure/test/check/random.cljs","^:",11,"^4Y",["^16",[["^56","~$n"]]],"^4Z",null,"^4[",["^16",[null,null]],"^8",1,"^50",false,"^7",19,"^51","^57","^9",37,"^52",2,"^53",true,"^4V",["^16",["^4W",["^16",[["^56","~$n"]]]]],"^<","Returns a collection of `n` RNGs, which should generate\n  sufficiently independent random data.\n\n  Note: to maintain independence you should not call more than one\n  function in the IRandom protocol with the same argument"],"~$next-rng",["^ ","^5",["^ ","^6","clojure/test/check/random.cljs","^7",130,"^8",16,"^9",130,"^:",24,"^4Q",true],"^4Q",true,"^Q","^2?","^6","clojure/test/check/random.cljs","^:",24,"^8",1,"^7",130,"^9",130,"^4R","~$function"],"~$hex-long",["^ ","^4U",null,"^5",["^ ","^6","clojure/test/check/random.cljs","^7",49,"^8",17,"^9",49,"^:",25,"^4Q",true,"^4V",["^16",["^4W",["^16",[["~$s"]]]]],"^<","Helper for defining constants."],"^4Q",true,"^Q","^24","^6","clojure/test/check/random.cljs","^:",25,"^4Y",["^16",[["~$s"]]],"^4Z",null,"^4[",["^16",[null,null]],"^8",1,"^50",false,"^7",49,"^51","^4S","^9",49,"^52",1,"^53",true,"^4V",["^16",["^4W",["^16",[["~$s"]]]]],"^<","Helper for defining constants."],"~$rand-double",["^ ","^4U",null,"^5",["^ ","^6","clojure/test/check/random.cljs","^7",25,"^8",4,"^9",25,"^:",15,"^55","^1[","^<","Returns a random double between 0.0 (inclusive) and 1.0 (exclusive)\n  based on the given immutable RNG.\n\n  Note: to maintain independence you should not call more than one\n  function in the IRandom protocol with the same argument","^4V",["^16",["^4W",["^16",[["^56"]]]]]],"^55","^1[","^Q","^2>","^6","clojure/test/check/random.cljs","^:",15,"^4Y",["^16",[["^56"]]],"^4Z",null,"^4[",["^16",[null,null]],"^8",1,"^50",false,"^7",19,"^51","^57","^9",25,"^52",1,"^53",true,"^4V",["^16",["^4W",["^16",[["^56"]]]]],"^<","Returns a random double between 0.0 (inclusive) and 1.0 (exclusive)\n  based on the given immutable RNG.\n\n  Note: to maintain independence you should not call more than one\n  function in the IRandom protocol with the same argument"],"~$mix-64-const-1",["^ ","^5",["^ ","^6","clojure/test/check/random.cljs","^7",59,"^8",16,"^9",59,"^:",30,"^4Q",true],"^4Q",true,"^Q","^2A","^6","clojure/test/check/random.cljs","^:",30,"^8",1,"^7",59,"^9",59,"^4R","^4S"],"~$split",["^ ","^4U",null,"^5",["^ ","^6","clojure/test/check/random.cljs","^7",31,"^8",4,"^9",31,"^:",9,"^55","^1[","^<","Returns two new RNGs [rng1 rng2], which should generate\n  sufficiently independent random data.\n\n  Note: to maintain independence you should not call more than one\n  function in the IRandom protocol with the same argument","^4V",["^16",["^4W",["^16",[["^56"]]]]]],"^55","^1[","^Q","^1X","^6","clojure/test/check/random.cljs","^:",9,"^4Y",["^16",[["^56"]]],"^4Z",null,"^4[",["^16",[null,null]],"^8",1,"^50",false,"^7",19,"^51","^57","^9",31,"^52",1,"^53",true,"^4V",["^16",["^4W",["^16",[["^56"]]]]],"^<","Returns two new RNGs [rng1 rng2], which should generate\n  sufficiently independent random data.\n\n  Note: to maintain independence you should not call more than one\n  function in the IRandom protocol with the same argument"],"~$JavaUtilSplittableRandom",["^ ","~:num-fields",2,"~:protocols",["^L",["^1["]],"^Q","^2H","^6","clojure/test/check/random.cljs","^:",34,"~:type",true,"^8",10,"^7",91,"~:record",false,"^9",91,"^4R","^5E","~:skip-protocol-flag",null],"~$IRandom",["^ ","^5",["^ ","~:protocol-symbol",true,"^6","clojure/test/check/random.cljs","^:",21,"^8",14,"^7",19,"~:protocol-info",["^ ","^5@",["^ ","^54",[["^56"]],"^5G",[["^56"]],"^5I",[["^56"]],"^5C",[["^56","~$n"]]]],"^9",19,"~:sigs",["^ ","~:rand-long",["^ ","^Q","^54","^4V",["^16",[["^56"]]],"^<","Returns a random goog.math.Long based on the given immutable RNG.\n\n  Note: to maintain independence you should not call more than one\n  function in the IRandom protocol with the same argument"],"~:rand-double",["^ ","^Q","^5G","^4V",["^16",[["^56"]]],"^<","Returns a random double between 0.0 (inclusive) and 1.0 (exclusive)\n  based on the given immutable RNG.\n\n  Note: to maintain independence you should not call more than one\n  function in the IRandom protocol with the same argument"],"~:split",["^ ","^Q","^5I","^4V",["^16",[["^56"]]],"^<","Returns two new RNGs [rng1 rng2], which should generate\n  sufficiently independent random data.\n\n  Note: to maintain independence you should not call more than one\n  function in the IRandom protocol with the same argument"],"~:split-n",["^ ","^Q","^5C","^4V",["^16",[["^56","~$n"]]],"^<","Returns a collection of `n` RNGs, which should generate\n  sufficiently independent random data.\n\n  Note: to maintain independence you should not call more than one\n  function in the IRandom protocol with the same argument"]],"~:jsdoc",["^16",["@interface"]]],"^5Q",true,"^Q","^1[","^6","clojure/test/check/random.cljs","^:",21,"^8",1,"^7",19,"^5R",["^ ","^5@",["^ ","^54",[["^56"]],"^5G",[["^56"]],"^5I",[["^56"]],"^5C",[["^56","~$n"]]]],"~:info",null,"^9",19,"^4R","^57","^5S",["^ ","^5T",["^ ","^Q","^54","^4V",["^16",[["^56"]]],"^<","Returns a random goog.math.Long based on the given immutable RNG.\n\n  Note: to maintain independence you should not call more than one\n  function in the IRandom protocol with the same argument"],"^5U",["^ ","^Q","^5G","^4V",["^16",[["^56"]]],"^<","Returns a random double between 0.0 (inclusive) and 1.0 (exclusive)\n  based on the given immutable RNG.\n\n  Note: to maintain independence you should not call more than one\n  function in the IRandom protocol with the same argument"],"^5V",["^ ","^Q","^5I","^4V",["^16",[["^56"]]],"^<","Returns two new RNGs [rng1 rng2], which should generate\n  sufficiently independent random data.\n\n  Note: to maintain independence you should not call more than one\n  function in the IRandom protocol with the same argument"],"^5W",["^ ","^Q","^5C","^4V",["^16",[["^56","~$n"]]],"^<","Returns a collection of `n` RNGs, which should generate\n  sufficiently independent random data.\n\n  Note: to maintain independence you should not call more than one\n  function in the IRandom protocol with the same argument"]],"~:impls",["^L",["^2H"]],"^5X",["^16",["@interface"]]],"~$->JavaUtilSplittableRandom",["^ ","^4U",null,"^5",["^ ","^5L",["^L",["^1["]],"^6","clojure/test/check/random.cljs","^:",34,"^8",10,"~:factory","~:positional","^7",91,"^9",91,"^4V",["^16",["^4W",["^16",[["~$gamma","~$state"]]]]],"^5O",null,"^<","Positional factory function for clojure.test.check.random/JavaUtilSplittableRandom."],"^5L",["^L",["^1["]],"^Q","^2M","^6","clojure/test/check/random.cljs","^:",34,"^4Y",["^16",[["^62","^63"]]],"^4Z",null,"^4[",["^16",[null,null]],"^8",1,"^50",false,"^60","^61","^7",91,"^51","^2H","^9",91,"^52",2,"^53",true,"^4V",["^16",["^4W",["^16",[["^62","^63"]]]]],"^5O",null,"^<","Positional factory function for clojure.test.check.random/JavaUtilSplittableRandom."]],"^14",["^ ","^E","^E"],"~:cljs.analyzer/constants",["^ ","^11",["^L",["~:returned","~:state","~:seed","^63","^62"]],"~:order",["^62","^63","^67","^66","^65"]],"^1<",["^ ","^12",["^L",[]]],"^1=",["^ "],"^1>",["^10","^E","^X","^Z"]],"^U","^R","~:ns-specs",["^ "],"~:ns-spec-vars",["^L",[]],"~:compiler-options",["^2S",[["^6;","~:static-fns"],true,["^6;","~:shadow-tweaks"],null,["^6;","~:source-map-inline"],null,["^6;","~:elide-asserts"],false,["^6;","~:optimize-constants"],null,["^6;","^1C"],null,["^6;","~:external-config"],null,["^6;","~:tooling-config"],null,["^6;","~:emit-constants"],null,["^6;","~:load-tests"],null,["^6;","~:form-size-threshold"],null,["^6;","~:global-goog-object&array"],null,["^6;","~:data-readers"],null,["^6;","~:infer-externs"],"~:auto",["^6;","^1E"],["^L",["^1F","^1G"]],["~:js-options","~:js-provider"],"^12",["~:mode"],"~:dev",["^6;","~:fn-invoke-direct"],null,["^6;","~:source-map"],"/dev/null"]]]