["^ ","~:output",["^ ","~:js","goog.provide('metabase.lib.stage');\nmetabase.lib.hierarchy.derive(new cljs.core.Keyword(\"mbql.stage\",\"mbql\",\"mbql.stage/mbql\",1578747798),new cljs.core.Keyword(\"metabase.lib.stage\",\"stage\",\"metabase.lib.stage/stage\",1448689281));\nmetabase.lib.hierarchy.derive(new cljs.core.Keyword(\"mbql.stage\",\"native\",\"mbql.stage/native\",359422194),new cljs.core.Keyword(\"metabase.lib.stage\",\"stage\",\"metabase.lib.stage/stage\",1448689281));\nmetabase.lib.normalize.normalize.cljs$core$IMultiFn$_add_method$arity$3(null,new cljs.core.Keyword(\"mbql.stage\",\"mbql\",\"mbql.stage/mbql\",1578747798),(function (stage){\nreturn metabase.lib.normalize.normalize_map.cljs$core$IFn$_invoke$arity$3(stage,cljs.core.keyword,new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"aggregation\",\"aggregation\",1597476696),cljs.core.partial.cljs$core$IFn$_invoke$arity$2(cljs.core.mapv,metabase.lib.normalize.normalize),new cljs.core.Keyword(null,\"filters\",\"filters\",974726919),cljs.core.partial.cljs$core$IFn$_invoke$arity$2(cljs.core.mapv,metabase.lib.normalize.normalize)], null));\n}));\nmetabase.lib.metadata.calculation.metadata_method.cljs$core$IMultiFn$_add_method$arity$3(null,new cljs.core.Keyword(\"metabase.lib.stage\",\"stage\",\"metabase.lib.stage/stage\",1448689281),(function (_query,_stage_number,_stage){\nthrow cljs.core.ex_info.cljs$core$IFn$_invoke$arity$2(\"You can't calculate a metadata map for a stage! Use lib.metadata.calculation/returned-columns-method instead.\",cljs.core.PersistentArrayMap.EMPTY);\n}));\n/**\n * Inputs: [query :- :metabase.lib.schema/query stage-number :- :int]\n *   Return: :metabase.lib.schema/query\n *        \n * \n *   Recursively calculate the metadata for the previous stages and add it to them, we'll need it for metadata\n *   calculations for [[lib.metadata.calculation/returned-columns]] and [[lib.metadata.calculation/visible-columns]], and\n *   we don't want to have to calculate it more than once...\n */\nmetabase.lib.stage.ensure_previous_stages_have_metadata = (function metabase$lib$stage$ensure_previous_stages_have_metadata(query,stage_number){\n\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$3((function (query__$1,stage_number__$1){\nreturn metabase.lib.util.update_query_stage.cljs$core$IFn$_invoke$arity$variadic(query__$1,stage_number__$1,cljs.core.assoc,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(\"metabase.lib.stage\",\"cached-metadata\",\"metabase.lib.stage/cached-metadata\",-1406479151),metabase.lib.metadata.calculation.returned_columns.cljs$core$IFn$_invoke$arity$3(query__$1,stage_number__$1,metabase.lib.util.query_stage(query__$1,stage_number__$1))], 0));\n}),query,cljs.core.range.cljs$core$IFn$_invoke$arity$2((0),metabase.lib.util.canonical_stage_index(query,stage_number)));\n});\n/**\n * Inputs: [query :- :metabase.lib.schema/query stage-number :- :int]\n *   Return: [:maybe lib.metadata.calculation/ColumnsWithUniqueAliases]\n *        \n * \n *   Return existing stage metadata attached to a stage if is already present: return it as-is, but only if this is a\n *   native stage or a source-Card stage. if it's any other sort of stage then ignore the metadata, it's probably wrong;\n *   we can recalculate the correct metadata anyway.\n */\nmetabase.lib.stage.existing_stage_metadata = (function metabase$lib$stage$existing_stage_metadata(query,stage_number){\n\nvar map__64479 = metabase.lib.util.query_stage(query,stage_number);\nvar map__64479__$1 = cljs.core.__destructure_map(map__64479);\nvar stage = map__64479__$1;\nvar stage_type = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__64479__$1,new cljs.core.Keyword(\"lib\",\"type\",\"lib/type\",1175424801));\nvar source_card = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__64479__$1,new cljs.core.Keyword(null,\"source-card\",\"source-card\",-1580820390));\nvar or__5045__auto__ = new cljs.core.Keyword(\"metabase.lib.stage\",\"cached-metadata\",\"metabase.lib.stage/cached-metadata\",-1406479151).cljs$core$IFn$_invoke$arity$1(stage);\nif(cljs.core.truth_(or__5045__auto__)){\nreturn or__5045__auto__;\n} else {\nvar temp__5804__auto__ = new cljs.core.Keyword(\"lib\",\"stage-metadata\",\"lib/stage-metadata\",1079153610).cljs$core$IFn$_invoke$arity$1(stage);\nif(cljs.core.truth_(temp__5804__auto__)){\nvar metadata = temp__5804__auto__;\nif(cljs.core.truth_((function (){var or__5045__auto____$1 = cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(stage_type,new cljs.core.Keyword(\"mbql.stage\",\"native\",\"mbql.stage/native\",359422194));\nif(or__5045__auto____$1){\nreturn or__5045__auto____$1;\n} else {\nreturn source_card;\n}\n})())){\nvar source_type = (function (){var G__64480 = stage_type;\nvar G__64480__$1 = (((G__64480 instanceof cljs.core.Keyword))?G__64480.fqn:null);\nswitch (G__64480__$1) {\ncase \"mbql.stage/native\":\nreturn new cljs.core.Keyword(\"source\",\"native\",\"source/native\",-1444604147);\n\nbreak;\ncase \"mbql.stage/mbql\":\nreturn new cljs.core.Keyword(\"source\",\"card\",\"source/card\",-139977973);\n\nbreak;\ndefault:\nthrow (new Error([\"No matching clause: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(G__64480__$1)].join('')));\n\n}\n})();\nreturn cljs.core.not_empty((function (){var iter__5523__auto__ = (function metabase$lib$stage$existing_stage_metadata_$_iter__64483(s__64484){\nreturn (new cljs.core.LazySeq(null,(function (){\nvar s__64484__$1 = s__64484;\nwhile(true){\nvar temp__5804__auto____$1 = cljs.core.seq(s__64484__$1);\nif(temp__5804__auto____$1){\nvar s__64484__$2 = temp__5804__auto____$1;\nif(cljs.core.chunked_seq_QMARK_(s__64484__$2)){\nvar c__5521__auto__ = cljs.core.chunk_first(s__64484__$2);\nvar size__5522__auto__ = cljs.core.count(c__5521__auto__);\nvar b__64486 = cljs.core.chunk_buffer(size__5522__auto__);\nif((function (){var i__64485 = (0);\nwhile(true){\nif((i__64485 < size__5522__auto__)){\nvar col = cljs.core._nth(c__5521__auto__,i__64485);\ncljs.core.chunk_append(b__64486,cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(\"lib\",\"source-column-alias\",\"lib/source-column-alias\",1494821386),new cljs.core.Keyword(null,\"name\",\"name\",1843675177).cljs$core$IFn$_invoke$arity$1(col),new cljs.core.Keyword(\"lib\",\"desired-column-alias\",\"lib/desired-column-alias\",-1998967402),new cljs.core.Keyword(null,\"name\",\"name\",1843675177).cljs$core$IFn$_invoke$arity$1(col)], null),col,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(\"lib\",\"source\",\"lib/source\",-434086550),source_type], null)], 0)));\n\nvar G__64925 = (i__64485 + (1));\ni__64485 = G__64925;\ncontinue;\n} else {\nreturn true;\n}\nbreak;\n}\n})()){\nreturn cljs.core.chunk_cons(cljs.core.chunk(b__64486),metabase$lib$stage$existing_stage_metadata_$_iter__64483(cljs.core.chunk_rest(s__64484__$2)));\n} else {\nreturn cljs.core.chunk_cons(cljs.core.chunk(b__64486),null);\n}\n} else {\nvar col = cljs.core.first(s__64484__$2);\nreturn cljs.core.cons(cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(\"lib\",\"source-column-alias\",\"lib/source-column-alias\",1494821386),new cljs.core.Keyword(null,\"name\",\"name\",1843675177).cljs$core$IFn$_invoke$arity$1(col),new cljs.core.Keyword(\"lib\",\"desired-column-alias\",\"lib/desired-column-alias\",-1998967402),new cljs.core.Keyword(null,\"name\",\"name\",1843675177).cljs$core$IFn$_invoke$arity$1(col)], null),col,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(\"lib\",\"source\",\"lib/source\",-434086550),source_type], null)], 0)),metabase$lib$stage$existing_stage_metadata_$_iter__64483(cljs.core.rest(s__64484__$2)));\n}\n} else {\nreturn null;\n}\nbreak;\n}\n}),null,null));\n});\nreturn iter__5523__auto__(new cljs.core.Keyword(null,\"columns\",\"columns\",1998437288).cljs$core$IFn$_invoke$arity$1(metadata));\n})());\n} else {\nreturn null;\n}\n} else {\nreturn null;\n}\n}\n});\n/**\n * Inputs: [query :- :metabase.lib.schema/query stage-number :- :int unique-name-fn :- fn?]\n *   Return: [:maybe lib.metadata.calculation/ColumnsWithUniqueAliases]\n */\nmetabase.lib.stage.breakouts_columns = (function metabase$lib$stage$breakouts_columns(query,stage_number,unique_name_fn){\n\nreturn cljs.core.not_empty((function (){var iter__5523__auto__ = (function metabase$lib$stage$breakouts_columns_$_iter__64502(s__64503){\nreturn (new cljs.core.LazySeq(null,(function (){\nvar s__64503__$1 = s__64503;\nwhile(true){\nvar temp__5804__auto__ = cljs.core.seq(s__64503__$1);\nif(temp__5804__auto__){\nvar s__64503__$2 = temp__5804__auto__;\nif(cljs.core.chunked_seq_QMARK_(s__64503__$2)){\nvar c__5521__auto__ = cljs.core.chunk_first(s__64503__$2);\nvar size__5522__auto__ = cljs.core.count(c__5521__auto__);\nvar b__64505 = cljs.core.chunk_buffer(size__5522__auto__);\nif((function (){var i__64504 = (0);\nwhile(true){\nif((i__64504 < size__5522__auto__)){\nvar breakout = cljs.core._nth(c__5521__auto__,i__64504);\ncljs.core.chunk_append(b__64505,cljs.core.assoc.cljs$core$IFn$_invoke$arity$variadic(breakout,new cljs.core.Keyword(\"lib\",\"source\",\"lib/source\",-434086550),new cljs.core.Keyword(\"source\",\"breakouts\",\"source/breakouts\",-1706018158),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(\"lib\",\"source-column-alias\",\"lib/source-column-alias\",1494821386),cljs.core.some_fn.cljs$core$IFn$_invoke$arity$2(new cljs.core.Keyword(\"lib\",\"source-column-alias\",\"lib/source-column-alias\",1494821386),new cljs.core.Keyword(null,\"name\",\"name\",1843675177))(breakout),new cljs.core.Keyword(\"lib\",\"desired-column-alias\",\"lib/desired-column-alias\",-1998967402),(function (){var G__64509 = metabase.lib.field.desired_alias(query,breakout);\nreturn (unique_name_fn.cljs$core$IFn$_invoke$arity$1 ? unique_name_fn.cljs$core$IFn$_invoke$arity$1(G__64509) : unique_name_fn.call(null,G__64509));\n})()], 0)));\n\nvar G__64926 = (i__64504 + (1));\ni__64504 = G__64926;\ncontinue;\n} else {\nreturn true;\n}\nbreak;\n}\n})()){\nreturn cljs.core.chunk_cons(cljs.core.chunk(b__64505),metabase$lib$stage$breakouts_columns_$_iter__64502(cljs.core.chunk_rest(s__64503__$2)));\n} else {\nreturn cljs.core.chunk_cons(cljs.core.chunk(b__64505),null);\n}\n} else {\nvar breakout = cljs.core.first(s__64503__$2);\nreturn cljs.core.cons(cljs.core.assoc.cljs$core$IFn$_invoke$arity$variadic(breakout,new cljs.core.Keyword(\"lib\",\"source\",\"lib/source\",-434086550),new cljs.core.Keyword(\"source\",\"breakouts\",\"source/breakouts\",-1706018158),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(\"lib\",\"source-column-alias\",\"lib/source-column-alias\",1494821386),cljs.core.some_fn.cljs$core$IFn$_invoke$arity$2(new cljs.core.Keyword(\"lib\",\"source-column-alias\",\"lib/source-column-alias\",1494821386),new cljs.core.Keyword(null,\"name\",\"name\",1843675177))(breakout),new cljs.core.Keyword(\"lib\",\"desired-column-alias\",\"lib/desired-column-alias\",-1998967402),(function (){var G__64512 = metabase.lib.field.desired_alias(query,breakout);\nreturn (unique_name_fn.cljs$core$IFn$_invoke$arity$1 ? unique_name_fn.cljs$core$IFn$_invoke$arity$1(G__64512) : unique_name_fn.call(null,G__64512));\n})()], 0)),metabase$lib$stage$breakouts_columns_$_iter__64502(cljs.core.rest(s__64503__$2)));\n}\n} else {\nreturn null;\n}\nbreak;\n}\n}),null,null));\n});\nreturn iter__5523__auto__(metabase.lib.breakout.breakouts_metadata(query,stage_number));\n})());\n});\n/**\n * Inputs: [query :- :metabase.lib.schema/query stage-number :- :int unique-name-fn :- fn?]\n *   Return: [:maybe lib.metadata.calculation/ColumnsWithUniqueAliases]\n */\nmetabase.lib.stage.aggregations_columns = (function metabase$lib$stage$aggregations_columns(query,stage_number,unique_name_fn){\n\nreturn cljs.core.not_empty((function (){var iter__5523__auto__ = (function metabase$lib$stage$aggregations_columns_$_iter__64524(s__64525){\nreturn (new cljs.core.LazySeq(null,(function (){\nvar s__64525__$1 = s__64525;\nwhile(true){\nvar temp__5804__auto__ = cljs.core.seq(s__64525__$1);\nif(temp__5804__auto__){\nvar s__64525__$2 = temp__5804__auto__;\nif(cljs.core.chunked_seq_QMARK_(s__64525__$2)){\nvar c__5521__auto__ = cljs.core.chunk_first(s__64525__$2);\nvar size__5522__auto__ = cljs.core.count(c__5521__auto__);\nvar b__64527 = cljs.core.chunk_buffer(size__5522__auto__);\nif((function (){var i__64526 = (0);\nwhile(true){\nif((i__64526 < size__5522__auto__)){\nvar ag = cljs.core._nth(c__5521__auto__,i__64526);\ncljs.core.chunk_append(b__64527,cljs.core.assoc.cljs$core$IFn$_invoke$arity$variadic(ag,new cljs.core.Keyword(\"lib\",\"source\",\"lib/source\",-434086550),new cljs.core.Keyword(\"source\",\"aggregations\",\"source/aggregations\",-1828710137),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(\"lib\",\"source-column-alias\",\"lib/source-column-alias\",1494821386),new cljs.core.Keyword(null,\"name\",\"name\",1843675177).cljs$core$IFn$_invoke$arity$1(ag),new cljs.core.Keyword(\"lib\",\"desired-column-alias\",\"lib/desired-column-alias\",-1998967402),(function (){var G__64535 = new cljs.core.Keyword(null,\"name\",\"name\",1843675177).cljs$core$IFn$_invoke$arity$1(ag);\nreturn (unique_name_fn.cljs$core$IFn$_invoke$arity$1 ? unique_name_fn.cljs$core$IFn$_invoke$arity$1(G__64535) : unique_name_fn.call(null,G__64535));\n})()], 0)));\n\nvar G__64932 = (i__64526 + (1));\ni__64526 = G__64932;\ncontinue;\n} else {\nreturn true;\n}\nbreak;\n}\n})()){\nreturn cljs.core.chunk_cons(cljs.core.chunk(b__64527),metabase$lib$stage$aggregations_columns_$_iter__64524(cljs.core.chunk_rest(s__64525__$2)));\n} else {\nreturn cljs.core.chunk_cons(cljs.core.chunk(b__64527),null);\n}\n} else {\nvar ag = cljs.core.first(s__64525__$2);\nreturn cljs.core.cons(cljs.core.assoc.cljs$core$IFn$_invoke$arity$variadic(ag,new cljs.core.Keyword(\"lib\",\"source\",\"lib/source\",-434086550),new cljs.core.Keyword(\"source\",\"aggregations\",\"source/aggregations\",-1828710137),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(\"lib\",\"source-column-alias\",\"lib/source-column-alias\",1494821386),new cljs.core.Keyword(null,\"name\",\"name\",1843675177).cljs$core$IFn$_invoke$arity$1(ag),new cljs.core.Keyword(\"lib\",\"desired-column-alias\",\"lib/desired-column-alias\",-1998967402),(function (){var G__64536 = new cljs.core.Keyword(null,\"name\",\"name\",1843675177).cljs$core$IFn$_invoke$arity$1(ag);\nreturn (unique_name_fn.cljs$core$IFn$_invoke$arity$1 ? unique_name_fn.cljs$core$IFn$_invoke$arity$1(G__64536) : unique_name_fn.call(null,G__64536));\n})()], 0)),metabase$lib$stage$aggregations_columns_$_iter__64524(cljs.core.rest(s__64525__$2)));\n}\n} else {\nreturn null;\n}\nbreak;\n}\n}),null,null));\n});\nreturn iter__5523__auto__(metabase.lib.aggregation.aggregations_metadata.cljs$core$IFn$_invoke$arity$2(query,stage_number));\n})());\n});\n/**\n * Inputs: [query :- :metabase.lib.schema/query stage-number :- :int unique-name-fn :- fn?]\n *   Return: [:maybe lib.metadata.calculation/ColumnsWithUniqueAliases]\n */\nmetabase.lib.stage.fields_columns = (function metabase$lib$stage$fields_columns(query,stage_number,unique_name_fn){\n\nvar temp__5804__auto__ = metabase.lib.util.query_stage(query,stage_number);\nif(cljs.core.truth_(temp__5804__auto__)){\nvar map__64549 = temp__5804__auto__;\nvar map__64549__$1 = cljs.core.__destructure_map(map__64549);\nvar fields = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__64549__$1,new cljs.core.Keyword(null,\"fields\",\"fields\",-1932066230));\nreturn cljs.core.not_empty((function (){var iter__5523__auto__ = (function metabase$lib$stage$fields_columns_$_iter__64551(s__64552){\nreturn (new cljs.core.LazySeq(null,(function (){\nvar s__64552__$1 = s__64552;\nwhile(true){\nvar temp__5804__auto____$1 = cljs.core.seq(s__64552__$1);\nif(temp__5804__auto____$1){\nvar s__64552__$2 = temp__5804__auto____$1;\nif(cljs.core.chunked_seq_QMARK_(s__64552__$2)){\nvar c__5521__auto__ = cljs.core.chunk_first(s__64552__$2);\nvar size__5522__auto__ = cljs.core.count(c__5521__auto__);\nvar b__64554 = cljs.core.chunk_buffer(size__5522__auto__);\nif((function (){var i__64553 = (0);\nwhile(true){\nif((i__64553 < size__5522__auto__)){\nvar vec__64569 = cljs.core._nth(c__5521__auto__,i__64553);\nvar tag = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__64569,(0),null);\nvar ref_clause = vec__64569;\nvar source = (function (){var G__64573 = tag;\nvar G__64573__$1 = (((G__64573 instanceof cljs.core.Keyword))?G__64573.fqn:null);\nswitch (G__64573__$1) {\ncase \"field\":\nreturn new cljs.core.Keyword(\"source\",\"fields\",\"source/fields\",-649667981);\n\nbreak;\ncase \"expression\":\nreturn new cljs.core.Keyword(\"source\",\"expressions\",\"source/expressions\",-458367840);\n\nbreak;\ndefault:\nthrow (new Error([\"No matching clause: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(G__64573__$1)].join('')));\n\n}\n})();\nvar metadata = metabase.lib.metadata.calculation.metadata.cljs$core$IFn$_invoke$arity$3(query,stage_number,ref_clause);\ncljs.core.chunk_append(b__64554,cljs.core.assoc.cljs$core$IFn$_invoke$arity$variadic(metadata,new cljs.core.Keyword(\"lib\",\"source\",\"lib/source\",-434086550),source,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(\"lib\",\"source-column-alias\",\"lib/source-column-alias\",1494821386),metabase.lib.metadata.calculation.column_name.cljs$core$IFn$_invoke$arity$3(query,stage_number,metadata),new cljs.core.Keyword(\"lib\",\"desired-column-alias\",\"lib/desired-column-alias\",-1998967402),(function (){var G__64579 = metabase.lib.field.desired_alias(query,metadata);\nreturn (unique_name_fn.cljs$core$IFn$_invoke$arity$1 ? unique_name_fn.cljs$core$IFn$_invoke$arity$1(G__64579) : unique_name_fn.call(null,G__64579));\n})()], 0)));\n\nvar G__64942 = (i__64553 + (1));\ni__64553 = G__64942;\ncontinue;\n} else {\nreturn true;\n}\nbreak;\n}\n})()){\nreturn cljs.core.chunk_cons(cljs.core.chunk(b__64554),metabase$lib$stage$fields_columns_$_iter__64551(cljs.core.chunk_rest(s__64552__$2)));\n} else {\nreturn cljs.core.chunk_cons(cljs.core.chunk(b__64554),null);\n}\n} else {\nvar vec__64582 = cljs.core.first(s__64552__$2);\nvar tag = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__64582,(0),null);\nvar ref_clause = vec__64582;\nvar source = (function (){var G__64585 = tag;\nvar G__64585__$1 = (((G__64585 instanceof cljs.core.Keyword))?G__64585.fqn:null);\nswitch (G__64585__$1) {\ncase \"field\":\nreturn new cljs.core.Keyword(\"source\",\"fields\",\"source/fields\",-649667981);\n\nbreak;\ncase \"expression\":\nreturn new cljs.core.Keyword(\"source\",\"expressions\",\"source/expressions\",-458367840);\n\nbreak;\ndefault:\nthrow (new Error([\"No matching clause: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(G__64585__$1)].join('')));\n\n}\n})();\nvar metadata = metabase.lib.metadata.calculation.metadata.cljs$core$IFn$_invoke$arity$3(query,stage_number,ref_clause);\nreturn cljs.core.cons(cljs.core.assoc.cljs$core$IFn$_invoke$arity$variadic(metadata,new cljs.core.Keyword(\"lib\",\"source\",\"lib/source\",-434086550),source,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(\"lib\",\"source-column-alias\",\"lib/source-column-alias\",1494821386),metabase.lib.metadata.calculation.column_name.cljs$core$IFn$_invoke$arity$3(query,stage_number,metadata),new cljs.core.Keyword(\"lib\",\"desired-column-alias\",\"lib/desired-column-alias\",-1998967402),(function (){var G__64586 = metabase.lib.field.desired_alias(query,metadata);\nreturn (unique_name_fn.cljs$core$IFn$_invoke$arity$1 ? unique_name_fn.cljs$core$IFn$_invoke$arity$1(G__64586) : unique_name_fn.call(null,G__64586));\n})()], 0)),metabase$lib$stage$fields_columns_$_iter__64551(cljs.core.rest(s__64552__$2)));\n}\n} else {\nreturn null;\n}\nbreak;\n}\n}),null,null));\n});\nreturn iter__5523__auto__(fields);\n})());\n} else {\nreturn null;\n}\n});\n/**\n * Inputs: [query :- :metabase.lib.schema/query stage-number :- :int unique-name-fn :- fn?]\n *   Return: [:maybe lib.metadata.calculation/ColumnsWithUniqueAliases]\n */\nmetabase.lib.stage.summary_columns = (function metabase$lib$stage$summary_columns(query,stage_number,unique_name_fn){\n\nreturn cljs.core.not_empty(cljs.core.into.cljs$core$IFn$_invoke$arity$3(cljs.core.PersistentVector.EMPTY,cljs.core.mapcat.cljs$core$IFn$_invoke$arity$1((function (f){\nreturn (f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(query,stage_number,unique_name_fn) : f.call(null,query,stage_number,unique_name_fn));\n})),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [metabase.lib.stage.breakouts_columns,metabase.lib.stage.aggregations_columns], null)));\n});\n/**\n * Inputs: [query :- :metabase.lib.schema/query stage-number :- :int unique-name-fn :- fn?]\n *   Return: [:maybe lib.metadata.calculation/ColumnsWithUniqueAliases]\n *        \n * \n *   Metadata for the previous stage, if there is one.\n */\nmetabase.lib.stage.previous_stage_metadata = (function metabase$lib$stage$previous_stage_metadata(query,stage_number,unique_name_fn){\n\nvar temp__5804__auto__ = metabase.lib.util.previous_stage_number(query,stage_number);\nif(cljs.core.truth_(temp__5804__auto__)){\nvar previous_stage_number = temp__5804__auto__;\nreturn cljs.core.not_empty((function (){var iter__5523__auto__ = (function metabase$lib$stage$previous_stage_metadata_$_iter__64611(s__64612){\nreturn (new cljs.core.LazySeq(null,(function (){\nvar s__64612__$1 = s__64612;\nwhile(true){\nvar temp__5804__auto____$1 = cljs.core.seq(s__64612__$1);\nif(temp__5804__auto____$1){\nvar s__64612__$2 = temp__5804__auto____$1;\nif(cljs.core.chunked_seq_QMARK_(s__64612__$2)){\nvar c__5521__auto__ = cljs.core.chunk_first(s__64612__$2);\nvar size__5522__auto__ = cljs.core.count(c__5521__auto__);\nvar b__64614 = cljs.core.chunk_buffer(size__5522__auto__);\nif((function (){var i__64613 = (0);\nwhile(true){\nif((i__64613 < size__5522__auto__)){\nvar col = cljs.core._nth(c__5521__auto__,i__64613);\nvar source_alias = (function (){var or__5045__auto__ = cljs.core.some_fn.cljs$core$IFn$_invoke$arity$2(new cljs.core.Keyword(\"lib\",\"desired-column-alias\",\"lib/desired-column-alias\",-1998967402),new cljs.core.Keyword(\"lib\",\"source-column-alias\",\"lib/source-column-alias\",1494821386))(col);\nif(cljs.core.truth_(or__5045__auto__)){\nreturn or__5045__auto__;\n} else {\nreturn metabase.lib.metadata.calculation.column_name.cljs$core$IFn$_invoke$arity$3(query,stage_number,col);\n}\n})();\ncljs.core.chunk_append(b__64614,cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(cljs.core.assoc.cljs$core$IFn$_invoke$arity$variadic(col,new cljs.core.Keyword(\"lib\",\"source\",\"lib/source\",-434086550),new cljs.core.Keyword(\"source\",\"previous-stage\",\"source/previous-stage\",1962610878),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(\"lib\",\"source-column-alias\",\"lib/source-column-alias\",1494821386),source_alias,new cljs.core.Keyword(\"lib\",\"desired-column-alias\",\"lib/desired-column-alias\",-1998967402),(unique_name_fn.cljs$core$IFn$_invoke$arity$1 ? unique_name_fn.cljs$core$IFn$_invoke$arity$1(source_alias) : unique_name_fn.call(null,source_alias))], 0)),new cljs.core.Keyword(\"metabase.lib.field\",\"temporal-unit\",\"metabase.lib.field/temporal-unit\",602312727)));\n\nvar G__64951 = (i__64613 + (1));\ni__64613 = G__64951;\ncontinue;\n} else {\nreturn true;\n}\nbreak;\n}\n})()){\nreturn cljs.core.chunk_cons(cljs.core.chunk(b__64614),metabase$lib$stage$previous_stage_metadata_$_iter__64611(cljs.core.chunk_rest(s__64612__$2)));\n} else {\nreturn cljs.core.chunk_cons(cljs.core.chunk(b__64614),null);\n}\n} else {\nvar col = cljs.core.first(s__64612__$2);\nvar source_alias = (function (){var or__5045__auto__ = cljs.core.some_fn.cljs$core$IFn$_invoke$arity$2(new cljs.core.Keyword(\"lib\",\"desired-column-alias\",\"lib/desired-column-alias\",-1998967402),new cljs.core.Keyword(\"lib\",\"source-column-alias\",\"lib/source-column-alias\",1494821386))(col);\nif(cljs.core.truth_(or__5045__auto__)){\nreturn or__5045__auto__;\n} else {\nreturn metabase.lib.metadata.calculation.column_name.cljs$core$IFn$_invoke$arity$3(query,stage_number,col);\n}\n})();\nreturn cljs.core.cons(cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(cljs.core.assoc.cljs$core$IFn$_invoke$arity$variadic(col,new cljs.core.Keyword(\"lib\",\"source\",\"lib/source\",-434086550),new cljs.core.Keyword(\"source\",\"previous-stage\",\"source/previous-stage\",1962610878),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(\"lib\",\"source-column-alias\",\"lib/source-column-alias\",1494821386),source_alias,new cljs.core.Keyword(\"lib\",\"desired-column-alias\",\"lib/desired-column-alias\",-1998967402),(unique_name_fn.cljs$core$IFn$_invoke$arity$1 ? unique_name_fn.cljs$core$IFn$_invoke$arity$1(source_alias) : unique_name_fn.call(null,source_alias))], 0)),new cljs.core.Keyword(\"metabase.lib.field\",\"temporal-unit\",\"metabase.lib.field/temporal-unit\",602312727)),metabase$lib$stage$previous_stage_metadata_$_iter__64611(cljs.core.rest(s__64612__$2)));\n}\n} else {\nreturn null;\n}\nbreak;\n}\n}),null,null));\n});\nreturn iter__5523__auto__(metabase.lib.metadata.calculation.returned_columns.cljs$core$IFn$_invoke$arity$3(query,previous_stage_number,metabase.lib.util.query_stage(query,previous_stage_number)));\n})());\n} else {\nreturn null;\n}\n});\n/**\n * Inputs: [query :- :metabase.lib.schema/query stage-number :- :int card-id :- [:maybe :metabase.lib.schema.id/card] unique-name-fn :- fn?]\n *   Return: [:maybe lib.metadata.calculation/ColumnsWithUniqueAliases]\n *        \n * \n *   Metadata associated with a Saved Question, e.g. if we have a `:source-card`\n */\nmetabase.lib.stage.saved_question_metadata = (function metabase$lib$stage$saved_question_metadata(query,stage_number,card_id,unique_name_fn){\n\nif(cljs.core.truth_(card_id)){\nvar temp__5804__auto__ = metabase.lib.metadata.card(query,card_id);\nif(cljs.core.truth_(temp__5804__auto__)){\nvar card = temp__5804__auto__;\nreturn cljs.core.not_empty(cljs.core.mapv.cljs$core$IFn$_invoke$arity$2((function (p1__64636_SHARP_){\nreturn cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(p1__64636_SHARP_,new cljs.core.Keyword(null,\"fk-target-field-id\",\"fk-target-field-id\",2019750287));\n}),metabase.lib.metadata.calculation.visible_columns.cljs$core$IFn$_invoke$arity$4(query,stage_number,card,new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"unique-name-fn\",\"unique-name-fn\",-755402870),unique_name_fn,new cljs.core.Keyword(null,\"include-implicitly-joinable?\",\"include-implicitly-joinable?\",-772701866),false], null))));\n} else {\nreturn null;\n}\n} else {\nreturn null;\n}\n});\n/**\n * Inputs: [query :- :metabase.lib.schema/query stage-number :- :int unique-name-fn :- fn?]\n *   Return: [:maybe lib.metadata.calculation/ColumnsWithUniqueAliases]\n */\nmetabase.lib.stage.expressions_metadata = (function metabase$lib$stage$expressions_metadata(query,stage_number,unique_name_fn){\n\nreturn cljs.core.not_empty((function (){var iter__5523__auto__ = (function metabase$lib$stage$expressions_metadata_$_iter__64643(s__64644){\nreturn (new cljs.core.LazySeq(null,(function (){\nvar s__64644__$1 = s__64644;\nwhile(true){\nvar temp__5804__auto__ = cljs.core.seq(s__64644__$1);\nif(temp__5804__auto__){\nvar s__64644__$2 = temp__5804__auto__;\nif(cljs.core.chunked_seq_QMARK_(s__64644__$2)){\nvar c__5521__auto__ = cljs.core.chunk_first(s__64644__$2);\nvar size__5522__auto__ = cljs.core.count(c__5521__auto__);\nvar b__64646 = cljs.core.chunk_buffer(size__5522__auto__);\nif((function (){var i__64645 = (0);\nwhile(true){\nif((i__64645 < size__5522__auto__)){\nvar expression = cljs.core._nth(c__5521__auto__,i__64645);\ncljs.core.chunk_append(b__64646,(function (){var base_type = new cljs.core.Keyword(null,\"base-type\",\"base-type\",1167971299).cljs$core$IFn$_invoke$arity$1(expression);\nreturn metabase.util.assoc_default.cljs$core$IFn$_invoke$arity$3(cljs.core.assoc.cljs$core$IFn$_invoke$arity$variadic(expression,new cljs.core.Keyword(\"lib\",\"source\",\"lib/source\",-434086550),new cljs.core.Keyword(\"source\",\"expressions\",\"source/expressions\",-458367840),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(\"lib\",\"source-column-alias\",\"lib/source-column-alias\",1494821386),new cljs.core.Keyword(null,\"name\",\"name\",1843675177).cljs$core$IFn$_invoke$arity$1(expression),new cljs.core.Keyword(\"lib\",\"desired-column-alias\",\"lib/desired-column-alias\",-1998967402),(function (){var G__64649 = new cljs.core.Keyword(null,\"name\",\"name\",1843675177).cljs$core$IFn$_invoke$arity$1(expression);\nreturn (unique_name_fn.cljs$core$IFn$_invoke$arity$1 ? unique_name_fn.cljs$core$IFn$_invoke$arity$1(G__64649) : unique_name_fn.call(null,G__64649));\n})()], 0)),new cljs.core.Keyword(null,\"effective-type\",\"effective-type\",-355725458),(function (){var or__5045__auto__ = base_type;\nif(cljs.core.truth_(or__5045__auto__)){\nreturn or__5045__auto__;\n} else {\nreturn new cljs.core.Keyword(\"type\",\"*\",\"type/*\",-1283496752);\n}\n})());\n})());\n\nvar G__64961 = (i__64645 + (1));\ni__64645 = G__64961;\ncontinue;\n} else {\nreturn true;\n}\nbreak;\n}\n})()){\nreturn cljs.core.chunk_cons(cljs.core.chunk(b__64646),metabase$lib$stage$expressions_metadata_$_iter__64643(cljs.core.chunk_rest(s__64644__$2)));\n} else {\nreturn cljs.core.chunk_cons(cljs.core.chunk(b__64646),null);\n}\n} else {\nvar expression = cljs.core.first(s__64644__$2);\nreturn cljs.core.cons((function (){var base_type = new cljs.core.Keyword(null,\"base-type\",\"base-type\",1167971299).cljs$core$IFn$_invoke$arity$1(expression);\nreturn metabase.util.assoc_default.cljs$core$IFn$_invoke$arity$3(cljs.core.assoc.cljs$core$IFn$_invoke$arity$variadic(expression,new cljs.core.Keyword(\"lib\",\"source\",\"lib/source\",-434086550),new cljs.core.Keyword(\"source\",\"expressions\",\"source/expressions\",-458367840),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(\"lib\",\"source-column-alias\",\"lib/source-column-alias\",1494821386),new cljs.core.Keyword(null,\"name\",\"name\",1843675177).cljs$core$IFn$_invoke$arity$1(expression),new cljs.core.Keyword(\"lib\",\"desired-column-alias\",\"lib/desired-column-alias\",-1998967402),(function (){var G__64650 = new cljs.core.Keyword(null,\"name\",\"name\",1843675177).cljs$core$IFn$_invoke$arity$1(expression);\nreturn (unique_name_fn.cljs$core$IFn$_invoke$arity$1 ? unique_name_fn.cljs$core$IFn$_invoke$arity$1(G__64650) : unique_name_fn.call(null,G__64650));\n})()], 0)),new cljs.core.Keyword(null,\"effective-type\",\"effective-type\",-355725458),(function (){var or__5045__auto__ = base_type;\nif(cljs.core.truth_(or__5045__auto__)){\nreturn or__5045__auto__;\n} else {\nreturn new cljs.core.Keyword(\"type\",\"*\",\"type/*\",-1283496752);\n}\n})());\n})(),metabase$lib$stage$expressions_metadata_$_iter__64643(cljs.core.rest(s__64644__$2)));\n}\n} else {\nreturn null;\n}\nbreak;\n}\n}),null,null));\n});\nreturn iter__5523__auto__(metabase.lib.expression.expressions_metadata.cljs$core$IFn$_invoke$arity$2(query,stage_number));\n})());\n});\n/**\n * Columns that are implicitly joinable from some other columns in `column-metadatas`. To be joinable, the column has to\n *   have appropriate FK metadata, i.e. have an `:fk-target-field-id` pointing to another Field. (I think we only include\n *   this information for Databases that support FKs and joins, so I don't think we need to do an additional DB feature\n *   check here.)\n * \n *   This does not include columns from any Tables that are already explicitly joined, and does not include multiple\n *   versions of a column when there are multiple pathways to it (i.e. if there is more than one FK to a Table). This\n *   behavior matches how things currently work in MLv1, at least for order by; we can adjust as needed in the future if\n *   it turns out we do need that stuff.\n * \n *   Does not include columns that would be implicitly joinable via multiple hops.\n */\nmetabase.lib.stage.implicitly_joinable_columns = (function metabase$lib$stage$implicitly_joinable_columns(query,stage_number,column_metadatas,unique_name_fn){\nvar existing_table_ids = cljs.core.into.cljs$core$IFn$_invoke$arity$3(cljs.core.PersistentHashSet.EMPTY,cljs.core.map.cljs$core$IFn$_invoke$arity$1(new cljs.core.Keyword(null,\"table-id\",\"table-id\",-766649466)),column_metadatas);\nreturn cljs.core.into.cljs$core$IFn$_invoke$arity$3(cljs.core.PersistentVector.EMPTY,cljs.core.comp.cljs$core$IFn$_invoke$arity$variadic(cljs.core.filter.cljs$core$IFn$_invoke$arity$1(new cljs.core.Keyword(null,\"fk-target-field-id\",\"fk-target-field-id\",2019750287)),medley.core.distinct_by.cljs$core$IFn$_invoke$arity$1(new cljs.core.Keyword(null,\"fk-target-field-id\",\"fk-target-field-id\",2019750287)),cljs.core.map.cljs$core$IFn$_invoke$arity$1((function (p__64657){\nvar map__64658 = p__64657;\nvar map__64658__$1 = cljs.core.__destructure_map(map__64658);\nvar source_field_id = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__64658__$1,new cljs.core.Keyword(null,\"id\",\"id\",-1388402092));\nvar fk_target_field_id = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__64658__$1,new cljs.core.Keyword(null,\"fk-target-field-id\",\"fk-target-field-id\",2019750287));\nreturn cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(metabase.lib.metadata.field(query,fk_target_field_id),new cljs.core.Keyword(\"metabase.lib.stage\",\"source-field-id\",\"metabase.lib.stage/source-field-id\",-962431705),source_field_id);\n})),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([cljs.core.remove.cljs$core$IFn$_invoke$arity$1((function (p1__64654_SHARP_){\nreturn cljs.core.contains_QMARK_(existing_table_ids,new cljs.core.Keyword(null,\"table-id\",\"table-id\",-766649466).cljs$core$IFn$_invoke$arity$1(p1__64654_SHARP_));\n})),medley.core.distinct_by.cljs$core$IFn$_invoke$arity$1(new cljs.core.Keyword(null,\"table-id\",\"table-id\",-766649466)),cljs.core.mapcat.cljs$core$IFn$_invoke$arity$1((function (p__64659){\nvar map__64660 = p__64659;\nvar map__64660__$1 = cljs.core.__destructure_map(map__64660);\nvar table_id = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__64660__$1,new cljs.core.Keyword(null,\"table-id\",\"table-id\",-766649466));\nvar source_field_id = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__64660__$1,new cljs.core.Keyword(\"metabase.lib.stage\",\"source-field-id\",\"metabase.lib.stage/source-field-id\",-962431705));\nvar table_metadata = metabase.lib.metadata.table(query,table_id);\nvar options = new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"unique-name-fn\",\"unique-name-fn\",-755402870),unique_name_fn,new cljs.core.Keyword(null,\"include-implicitly-joinable?\",\"include-implicitly-joinable?\",-772701866),false], null);\nvar iter__5523__auto__ = (function metabase$lib$stage$implicitly_joinable_columns_$_iter__64661(s__64662){\nreturn (new cljs.core.LazySeq(null,(function (){\nvar s__64662__$1 = s__64662;\nwhile(true){\nvar temp__5804__auto__ = cljs.core.seq(s__64662__$1);\nif(temp__5804__auto__){\nvar s__64662__$2 = temp__5804__auto__;\nif(cljs.core.chunked_seq_QMARK_(s__64662__$2)){\nvar c__5521__auto__ = cljs.core.chunk_first(s__64662__$2);\nvar size__5522__auto__ = cljs.core.count(c__5521__auto__);\nvar b__64664 = cljs.core.chunk_buffer(size__5522__auto__);\nif((function (){var i__64663 = (0);\nwhile(true){\nif((i__64663 < size__5522__auto__)){\nvar field = cljs.core._nth(c__5521__auto__,i__64663);\nvar field__$1 = cljs.core.assoc.cljs$core$IFn$_invoke$arity$variadic(field,new cljs.core.Keyword(null,\"fk-field-id\",\"fk-field-id\",1124127357),source_field_id,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(\"lib\",\"source\",\"lib/source\",-434086550),new cljs.core.Keyword(\"source\",\"implicitly-joinable\",\"source/implicitly-joinable\",-729101197),new cljs.core.Keyword(\"lib\",\"source-column-alias\",\"lib/source-column-alias\",1494821386),new cljs.core.Keyword(null,\"name\",\"name\",1843675177).cljs$core$IFn$_invoke$arity$1(field)], 0));\ncljs.core.chunk_append(b__64664,cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(field__$1,new cljs.core.Keyword(\"lib\",\"desired-column-alias\",\"lib/desired-column-alias\",-1998967402),(function (){var G__64667 = metabase.lib.field.desired_alias(query,field__$1);\nreturn (unique_name_fn.cljs$core$IFn$_invoke$arity$1 ? unique_name_fn.cljs$core$IFn$_invoke$arity$1(G__64667) : unique_name_fn.call(null,G__64667));\n})()));\n\nvar G__64973 = (i__64663 + (1));\ni__64663 = G__64973;\ncontinue;\n} else {\nreturn true;\n}\nbreak;\n}\n})()){\nreturn cljs.core.chunk_cons(cljs.core.chunk(b__64664),metabase$lib$stage$implicitly_joinable_columns_$_iter__64661(cljs.core.chunk_rest(s__64662__$2)));\n} else {\nreturn cljs.core.chunk_cons(cljs.core.chunk(b__64664),null);\n}\n} else {\nvar field = cljs.core.first(s__64662__$2);\nvar field__$1 = cljs.core.assoc.cljs$core$IFn$_invoke$arity$variadic(field,new cljs.core.Keyword(null,\"fk-field-id\",\"fk-field-id\",1124127357),source_field_id,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(\"lib\",\"source\",\"lib/source\",-434086550),new cljs.core.Keyword(\"source\",\"implicitly-joinable\",\"source/implicitly-joinable\",-729101197),new cljs.core.Keyword(\"lib\",\"source-column-alias\",\"lib/source-column-alias\",1494821386),new cljs.core.Keyword(null,\"name\",\"name\",1843675177).cljs$core$IFn$_invoke$arity$1(field)], 0));\nreturn cljs.core.cons(cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(field__$1,new cljs.core.Keyword(\"lib\",\"desired-column-alias\",\"lib/desired-column-alias\",-1998967402),(function (){var G__64669 = metabase.lib.field.desired_alias(query,field__$1);\nreturn (unique_name_fn.cljs$core$IFn$_invoke$arity$1 ? unique_name_fn.cljs$core$IFn$_invoke$arity$1(G__64669) : unique_name_fn.call(null,G__64669));\n})()),metabase$lib$stage$implicitly_joinable_columns_$_iter__64661(cljs.core.rest(s__64662__$2)));\n}\n} else {\nreturn null;\n}\nbreak;\n}\n}),null,null));\n});\nreturn iter__5523__auto__(metabase.lib.metadata.calculation.visible_columns_method.cljs$core$IFn$_invoke$arity$4(query,stage_number,table_metadata,options));\n}))], 0)),column_metadatas);\n});\n/**\n * Inputs: [query :- :metabase.lib.schema/query stage-number :- :int {:keys [unique-name-fn], :as options} :- lib.metadata.calculation/VisibleColumnsOptions]\n *   Return: lib.metadata.calculation/ColumnsWithUniqueAliases\n *        \n * \n *   Return columns from the previous query stage or source Table/Card.\n */\nmetabase.lib.stage.previous_stage_or_source_visible_columns = (function metabase$lib$stage$previous_stage_or_source_visible_columns(query,stage_number,p__64687){\nvar map__64688 = p__64687;\nvar map__64688__$1 = cljs.core.__destructure_map(map__64688);\nvar options = map__64688__$1;\nvar unique_name_fn = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__64688__$1,new cljs.core.Keyword(null,\"unique-name-fn\",\"unique-name-fn\",-755402870));\n\nreturn cljs.core.mapv.cljs$core$IFn$_invoke$arity$2((function (p1__64674_SHARP_){\nreturn cljs.core.dissoc.cljs$core$IFn$_invoke$arity$variadic(p1__64674_SHARP_,new cljs.core.Keyword(\"metabase.lib.join\",\"join-alias\",\"metabase.lib.join/join-alias\",1166233023),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(\"metabase.lib.field\",\"temporal-unit\",\"metabase.lib.field/temporal-unit\",602312727),new cljs.core.Keyword(\"metabase.lib.field\",\"binning\",\"metabase.lib.field/binning\",-222751823),new cljs.core.Keyword(null,\"fk-field-id\",\"fk-field-id\",1124127357)], 0));\n}),(function (){var or__5045__auto__ = metabase.lib.stage.previous_stage_metadata(query,stage_number,unique_name_fn);\nif(cljs.core.truth_(or__5045__auto__)){\nreturn or__5045__auto__;\n} else {\nvar map__64692 = metabase.lib.util.query_stage(query,stage_number);\nvar map__64692__$1 = cljs.core.__destructure_map(map__64692);\nvar this_stage = map__64692__$1;\nvar source_table = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__64692__$1,new cljs.core.Keyword(null,\"source-table\",\"source-table\",-225307692));\nvar source_card = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__64692__$1,new cljs.core.Keyword(null,\"source-card\",\"source-card\",-1580820390));\nvar or__5045__auto____$1 = (cljs.core.truth_(source_table)?(function (){\n\nvar table_metadata = metabase.lib.metadata.table(query,source_table);\nreturn metabase.lib.metadata.calculation.visible_columns.cljs$core$IFn$_invoke$arity$4(query,stage_number,table_metadata,options);\n})()\n:null);\nif(cljs.core.truth_(or__5045__auto____$1)){\nreturn or__5045__auto____$1;\n} else {\nvar or__5045__auto____$2 = (cljs.core.truth_(source_card)?metabase.lib.stage.saved_question_metadata(query,stage_number,source_card,unique_name_fn):null);\nif(cljs.core.truth_(or__5045__auto____$2)){\nreturn or__5045__auto____$2;\n} else {\nvar iter__5523__auto__ = (function metabase$lib$stage$previous_stage_or_source_visible_columns_$_iter__64693(s__64694){\nreturn (new cljs.core.LazySeq(null,(function (){\nvar s__64694__$1 = s__64694;\nwhile(true){\nvar temp__5804__auto__ = cljs.core.seq(s__64694__$1);\nif(temp__5804__auto__){\nvar s__64694__$2 = temp__5804__auto__;\nif(cljs.core.chunked_seq_QMARK_(s__64694__$2)){\nvar c__5521__auto__ = cljs.core.chunk_first(s__64694__$2);\nvar size__5522__auto__ = cljs.core.count(c__5521__auto__);\nvar b__64696 = cljs.core.chunk_buffer(size__5522__auto__);\nif((function (){var i__64695 = (0);\nwhile(true){\nif((i__64695 < size__5522__auto__)){\nvar col = cljs.core._nth(c__5521__auto__,i__64695);\ncljs.core.chunk_append(b__64696,cljs.core.assoc.cljs$core$IFn$_invoke$arity$variadic(col,new cljs.core.Keyword(\"lib\",\"source\",\"lib/source\",-434086550),new cljs.core.Keyword(\"source\",\"native\",\"source/native\",-1444604147),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(\"lib\",\"source-column-alias\",\"lib/source-column-alias\",1494821386),new cljs.core.Keyword(null,\"name\",\"name\",1843675177).cljs$core$IFn$_invoke$arity$1(col),new cljs.core.Keyword(\"lib\",\"desired-column-alias\",\"lib/desired-column-alias\",-1998967402),(function (){var G__64706 = new cljs.core.Keyword(null,\"name\",\"name\",1843675177).cljs$core$IFn$_invoke$arity$1(col);\nreturn (unique_name_fn.cljs$core$IFn$_invoke$arity$1 ? unique_name_fn.cljs$core$IFn$_invoke$arity$1(G__64706) : unique_name_fn.call(null,G__64706));\n})()], 0)));\n\nvar G__64988 = (i__64695 + (1));\ni__64695 = G__64988;\ncontinue;\n} else {\nreturn true;\n}\nbreak;\n}\n})()){\nreturn cljs.core.chunk_cons(cljs.core.chunk(b__64696),metabase$lib$stage$previous_stage_or_source_visible_columns_$_iter__64693(cljs.core.chunk_rest(s__64694__$2)));\n} else {\nreturn cljs.core.chunk_cons(cljs.core.chunk(b__64696),null);\n}\n} else {\nvar col = cljs.core.first(s__64694__$2);\nreturn cljs.core.cons(cljs.core.assoc.cljs$core$IFn$_invoke$arity$variadic(col,new cljs.core.Keyword(\"lib\",\"source\",\"lib/source\",-434086550),new cljs.core.Keyword(\"source\",\"native\",\"source/native\",-1444604147),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(\"lib\",\"source-column-alias\",\"lib/source-column-alias\",1494821386),new cljs.core.Keyword(null,\"name\",\"name\",1843675177).cljs$core$IFn$_invoke$arity$1(col),new cljs.core.Keyword(\"lib\",\"desired-column-alias\",\"lib/desired-column-alias\",-1998967402),(function (){var G__64712 = new cljs.core.Keyword(null,\"name\",\"name\",1843675177).cljs$core$IFn$_invoke$arity$1(col);\nreturn (unique_name_fn.cljs$core$IFn$_invoke$arity$1 ? unique_name_fn.cljs$core$IFn$_invoke$arity$1(G__64712) : unique_name_fn.call(null,G__64712));\n})()], 0)),metabase$lib$stage$previous_stage_or_source_visible_columns_$_iter__64693(cljs.core.rest(s__64694__$2)));\n}\n} else {\nreturn null;\n}\nbreak;\n}\n}),null,null));\n});\nreturn iter__5523__auto__(new cljs.core.Keyword(null,\"columns\",\"columns\",1998437288).cljs$core$IFn$_invoke$arity$1(new cljs.core.Keyword(\"lib\",\"stage-metadata\",\"lib/stage-metadata\",1079153610).cljs$core$IFn$_invoke$arity$1(this_stage)));\n}\n}\n}\n})());\n});\n/**\n * Inputs: [query :- :metabase.lib.schema/query stage-number :- :int {:keys [unique-name-fn include-joined? include-expressions?], :as options} :- lib.metadata.calculation/VisibleColumnsOptions]\n *   Return: lib.metadata.calculation/ColumnsWithUniqueAliases\n */\nmetabase.lib.stage.existing_visible_columns = (function metabase$lib$stage$existing_visible_columns(query,stage_number,p__64763){\nvar map__64764 = p__64763;\nvar map__64764__$1 = cljs.core.__destructure_map(map__64764);\nvar options = map__64764__$1;\nvar unique_name_fn = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__64764__$1,new cljs.core.Keyword(null,\"unique-name-fn\",\"unique-name-fn\",-755402870));\nvar include_joined_QMARK_ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__64764__$1,new cljs.core.Keyword(null,\"include-joined?\",\"include-joined?\",-410632824));\nvar include_expressions_QMARK_ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__64764__$1,new cljs.core.Keyword(null,\"include-expressions?\",\"include-expressions?\",-1817639288));\n\nreturn cljs.core.concat.cljs$core$IFn$_invoke$arity$variadic(metabase.lib.stage.previous_stage_or_source_visible_columns(query,stage_number,options),(cljs.core.truth_(include_expressions_QMARK_)?metabase.lib.stage.expressions_metadata(query,stage_number,unique_name_fn):null),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([(cljs.core.truth_(include_joined_QMARK_)?metabase.lib.join.all_joins_visible_columns(query,stage_number,unique_name_fn):null)], 0));\n});\nmetabase.lib.stage.ref_to_QMARK_ = (function metabase$lib$stage$ref_to_QMARK_(p__64836,column){\nvar vec__64837 = p__64836;\nvar tag = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__64837,(0),null);\nvar _opts = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__64837,(1),null);\nvar pointer = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__64837,(2),null);\nvar clause = vec__64837;\nvar G__64841 = tag;\nvar G__64841__$1 = (((G__64841 instanceof cljs.core.Keyword))?G__64841.fqn:null);\nswitch (G__64841__$1) {\ncase \"field\":\nif(((typeof pointer === 'number') || (typeof pointer === 'string'))){\nreturn cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(pointer,new cljs.core.Keyword(null,\"id\",\"id\",-1388402092).cljs$core$IFn$_invoke$arity$1(column));\n} else {\nthrow cljs.core.ex_info.cljs$core$IFn$_invoke$arity$2(\"unknown type of :field ref in lib.stage/ref-to?\",new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"clause\",\"clause\",1479668060),clause,new cljs.core.Keyword(null,\"column\",\"column\",2078222095),column], null));\n}\n\nbreak;\ncase \"expression\":\nreturn cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(pointer,new cljs.core.Keyword(null,\"name\",\"name\",1843675177).cljs$core$IFn$_invoke$arity$1(column));\n\nbreak;\ndefault:\nthrow cljs.core.ex_info.cljs$core$IFn$_invoke$arity$2(\"unknown clause in lib.stage/ref-to?\",new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"clause\",\"clause\",1479668060),clause,new cljs.core.Keyword(null,\"column\",\"column\",2078222095),column], null));\n\n}\n});\nmetabase.lib.stage.mark_selected_breakouts = (function metabase$lib$stage$mark_selected_breakouts(query,stage_number,columns){\nvar temp__5802__auto__ = new cljs.core.Keyword(null,\"breakout\",\"breakout\",-732419050).cljs$core$IFn$_invoke$arity$1(metabase.lib.util.query_stage(query,stage_number));\nif(cljs.core.truth_(temp__5802__auto__)){\nvar breakouts = temp__5802__auto__;\nvar iter__5523__auto__ = (function metabase$lib$stage$mark_selected_breakouts_$_iter__64860(s__64861){\nreturn (new cljs.core.LazySeq(null,(function (){\nvar s__64861__$1 = s__64861;\nwhile(true){\nvar temp__5804__auto__ = cljs.core.seq(s__64861__$1);\nif(temp__5804__auto__){\nvar s__64861__$2 = temp__5804__auto__;\nif(cljs.core.chunked_seq_QMARK_(s__64861__$2)){\nvar c__5521__auto__ = cljs.core.chunk_first(s__64861__$2);\nvar size__5522__auto__ = cljs.core.count(c__5521__auto__);\nvar b__64863 = cljs.core.chunk_buffer(size__5522__auto__);\nif((function (){var i__64862 = (0);\nwhile(true){\nif((i__64862 < size__5522__auto__)){\nvar column = cljs.core._nth(c__5521__auto__,i__64862);\ncljs.core.chunk_append(b__64863,(function (){var temp__5802__auto____$1 = medley.core.find_first.cljs$core$IFn$_invoke$arity$2(((function (i__64862,column,c__5521__auto__,size__5522__auto__,b__64863,s__64861__$2,temp__5804__auto__,breakouts,temp__5802__auto__){\nreturn (function (p1__64857_SHARP_){\nreturn metabase.lib.stage.ref_to_QMARK_(p1__64857_SHARP_,column);\n});})(i__64862,column,c__5521__auto__,size__5522__auto__,b__64863,s__64861__$2,temp__5804__auto__,breakouts,temp__5802__auto__))\n,breakouts);\nif(cljs.core.truth_(temp__5802__auto____$1)){\nvar match = temp__5802__auto____$1;\nvar binning = metabase.lib.binning.binning(match);\nvar map__64870 = metabase.lib.temporal_bucket.temporal_bucket(match);\nvar map__64870__$1 = cljs.core.__destructure_map(map__64870);\nvar unit = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__64870__$1,new cljs.core.Keyword(null,\"unit\",\"unit\",375175175));\nvar G__64871 = column;\nvar G__64871__$1 = (cljs.core.truth_(binning)?metabase.lib.binning.with_binning(G__64871,binning):G__64871);\nif(cljs.core.truth_(unit)){\nreturn metabase.lib.temporal_bucket.with_temporal_bucket(G__64871__$1,unit);\n} else {\nreturn G__64871__$1;\n}\n} else {\nreturn column;\n}\n})());\n\nvar G__64994 = (i__64862 + (1));\ni__64862 = G__64994;\ncontinue;\n} else {\nreturn true;\n}\nbreak;\n}\n})()){\nreturn cljs.core.chunk_cons(cljs.core.chunk(b__64863),metabase$lib$stage$mark_selected_breakouts_$_iter__64860(cljs.core.chunk_rest(s__64861__$2)));\n} else {\nreturn cljs.core.chunk_cons(cljs.core.chunk(b__64863),null);\n}\n} else {\nvar column = cljs.core.first(s__64861__$2);\nreturn cljs.core.cons((function (){var temp__5802__auto____$1 = medley.core.find_first.cljs$core$IFn$_invoke$arity$2(((function (column,s__64861__$2,temp__5804__auto__,breakouts,temp__5802__auto__){\nreturn (function (p1__64857_SHARP_){\nreturn metabase.lib.stage.ref_to_QMARK_(p1__64857_SHARP_,column);\n});})(column,s__64861__$2,temp__5804__auto__,breakouts,temp__5802__auto__))\n,breakouts);\nif(cljs.core.truth_(temp__5802__auto____$1)){\nvar match = temp__5802__auto____$1;\nvar binning = metabase.lib.binning.binning(match);\nvar map__64874 = metabase.lib.temporal_bucket.temporal_bucket(match);\nvar map__64874__$1 = cljs.core.__destructure_map(map__64874);\nvar unit = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__64874__$1,new cljs.core.Keyword(null,\"unit\",\"unit\",375175175));\nvar G__64875 = column;\nvar G__64875__$1 = (cljs.core.truth_(binning)?metabase.lib.binning.with_binning(G__64875,binning):G__64875);\nif(cljs.core.truth_(unit)){\nreturn metabase.lib.temporal_bucket.with_temporal_bucket(G__64875__$1,unit);\n} else {\nreturn G__64875__$1;\n}\n} else {\nreturn column;\n}\n})(),metabase$lib$stage$mark_selected_breakouts_$_iter__64860(cljs.core.rest(s__64861__$2)));\n}\n} else {\nreturn null;\n}\nbreak;\n}\n}),null,null));\n});\nreturn iter__5523__auto__(columns);\n} else {\nreturn columns;\n}\n});\nmetabase.lib.metadata.calculation.visible_columns_method.cljs$core$IMultiFn$_add_method$arity$3(null,new cljs.core.Keyword(\"metabase.lib.stage\",\"stage\",\"metabase.lib.stage/stage\",1448689281),(function (query,stage_number,_stage,p__64877){\nvar map__64878 = p__64877;\nvar map__64878__$1 = cljs.core.__destructure_map(map__64878);\nvar options = map__64878__$1;\nvar unique_name_fn = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__64878__$1,new cljs.core.Keyword(null,\"unique-name-fn\",\"unique-name-fn\",-755402870));\nvar include_implicitly_joinable_QMARK_ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__64878__$1,new cljs.core.Keyword(null,\"include-implicitly-joinable?\",\"include-implicitly-joinable?\",-772701866));\nvar query__$1 = metabase.lib.stage.ensure_previous_stages_have_metadata(query,stage_number);\nvar existing_columns = metabase.lib.stage.existing_visible_columns(query__$1,stage_number,options);\nreturn metabase.lib.stage.mark_selected_breakouts(query__$1,stage_number,cljs.core.concat.cljs$core$IFn$_invoke$arity$2(existing_columns,(cljs.core.truth_(include_implicitly_joinable_QMARK_)?metabase.lib.stage.implicitly_joinable_columns(query__$1,stage_number,existing_columns,unique_name_fn):null)));\n}));\nmetabase.lib.metadata.calculation.returned_columns_method.cljs$core$IMultiFn$_add_method$arity$3(null,new cljs.core.Keyword(\"metabase.lib.stage\",\"stage\",\"metabase.lib.stage/stage\",1448689281),(function (query,stage_number,_stage,p__64884){\nvar map__64885 = p__64884;\nvar map__64885__$1 = cljs.core.__destructure_map(map__64885);\nvar options = map__64885__$1;\nvar unique_name_fn = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__64885__$1,new cljs.core.Keyword(null,\"unique-name-fn\",\"unique-name-fn\",-755402870));\nvar or__5045__auto__ = metabase.lib.stage.existing_stage_metadata(query,stage_number);\nif(cljs.core.truth_(or__5045__auto__)){\nreturn or__5045__auto__;\n} else {\nvar query__$1 = metabase.lib.stage.ensure_previous_stages_have_metadata(query,stage_number);\nvar summary_cols = metabase.lib.stage.summary_columns(query__$1,stage_number,unique_name_fn);\nvar field_cols = metabase.lib.stage.fields_columns(query__$1,stage_number,unique_name_fn);\nif(cljs.core.truth_(summary_cols)){\nreturn cljs.core.into.cljs$core$IFn$_invoke$arity$2(summary_cols,field_cols);\n} else {\nif(cljs.core.truth_(field_cols)){\ncljs.core.doall.cljs$core$IFn$_invoke$arity$1(field_cols);\n\nreturn cljs.core.into.cljs$core$IFn$_invoke$arity$3(cljs.core.PersistentVector.EMPTY,medley.core.distinct_by.cljs$core$IFn$_invoke$arity$1((function (p1__64882_SHARP_){\nreturn cljs.core.dissoc.cljs$core$IFn$_invoke$arity$variadic(p1__64882_SHARP_,new cljs.core.Keyword(null,\"source-alias\",\"source-alias\",1652088724),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(\"lib\",\"source\",\"lib/source\",-434086550),new cljs.core.Keyword(\"lib\",\"source-uuid\",\"lib/source-uuid\",1828897581),new cljs.core.Keyword(\"lib\",\"desired-column-alias\",\"lib/desired-column-alias\",-1998967402)], 0));\n})),cljs.core.concat.cljs$core$IFn$_invoke$arity$2(field_cols,metabase.lib.join.all_joins_expected_columns(query__$1,stage_number,options)));\n} else {\nreturn cljs.core.concat.cljs$core$IFn$_invoke$arity$variadic(metabase.lib.stage.previous_stage_or_source_visible_columns(query__$1,stage_number,new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"include-implicitly-joinable?\",\"include-implicitly-joinable?\",-772701866),false,new cljs.core.Keyword(null,\"unique-name-fn\",\"unique-name-fn\",-755402870),unique_name_fn], null)),metabase.lib.stage.expressions_metadata(query__$1,stage_number,unique_name_fn),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([metabase.lib.join.all_joins_expected_columns(query__$1,stage_number,options)], 0));\n\n}\n}\n}\n}));\nmetabase.lib.metadata.calculation.display_name_method.cljs$core$IMultiFn$_add_method$arity$3(null,new cljs.core.Keyword(\"mbql.stage\",\"native\",\"mbql.stage/native\",359422194),(function (_query,_stage_number,_stage,_style){\nreturn metabase.shared.util.i18n.js_i18n(\"Native query\");\n}));\nmetabase.lib.stage.display_name_parts = new cljs.core.PersistentVector(null, 7, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"source-table\",\"source-table\",-225307692),new cljs.core.Keyword(null,\"source-card\",\"source-card\",-1580820390),new cljs.core.Keyword(null,\"aggregation\",\"aggregation\",1597476696),new cljs.core.Keyword(null,\"breakout\",\"breakout\",-732419050),new cljs.core.Keyword(null,\"filters\",\"filters\",974726919),new cljs.core.Keyword(null,\"order-by\",\"order-by\",1527318070),new cljs.core.Keyword(null,\"limit\",\"limit\",-1355822363)], null);\nmetabase.lib.metadata.calculation.display_name_method.cljs$core$IMultiFn$_add_method$arity$3(null,new cljs.core.Keyword(\"mbql.stage\",\"mbql\",\"mbql.stage/mbql\",1578747798),(function (query,stage_number,_stage,style){\nvar query__$1 = metabase.lib.stage.ensure_previous_stages_have_metadata(query,stage_number);\nvar or__5045__auto__ = cljs.core.not_empty((function (){var descriptions = (function (){var iter__5523__auto__ = (function metabase$lib$stage$iter__64892(s__64893){\nreturn (new cljs.core.LazySeq(null,(function (){\nvar s__64893__$1 = s__64893;\nwhile(true){\nvar temp__5804__auto__ = cljs.core.seq(s__64893__$1);\nif(temp__5804__auto__){\nvar s__64893__$2 = temp__5804__auto__;\nif(cljs.core.chunked_seq_QMARK_(s__64893__$2)){\nvar c__5521__auto__ = cljs.core.chunk_first(s__64893__$2);\nvar size__5522__auto__ = cljs.core.count(c__5521__auto__);\nvar b__64895 = cljs.core.chunk_buffer(size__5522__auto__);\nif((function (){var i__64894 = (0);\nwhile(true){\nif((i__64894 < size__5522__auto__)){\nvar k = cljs.core._nth(c__5521__auto__,i__64894);\ncljs.core.chunk_append(b__64895,metabase.lib.metadata.calculation.describe_top_level_key.cljs$core$IFn$_invoke$arity$3(query__$1,stage_number,k));\n\nvar G__65007 = (i__64894 + (1));\ni__64894 = G__65007;\ncontinue;\n} else {\nreturn true;\n}\nbreak;\n}\n})()){\nreturn cljs.core.chunk_cons(cljs.core.chunk(b__64895),metabase$lib$stage$iter__64892(cljs.core.chunk_rest(s__64893__$2)));\n} else {\nreturn cljs.core.chunk_cons(cljs.core.chunk(b__64895),null);\n}\n} else {\nvar k = cljs.core.first(s__64893__$2);\nreturn cljs.core.cons(metabase.lib.metadata.calculation.describe_top_level_key.cljs$core$IFn$_invoke$arity$3(query__$1,stage_number,k),metabase$lib$stage$iter__64892(cljs.core.rest(s__64893__$2)));\n}\n} else {\nreturn null;\n}\nbreak;\n}\n}),null,null));\n});\nreturn iter__5523__auto__(metabase.lib.stage.display_name_parts);\n})();\nreturn clojure.string.join.cljs$core$IFn$_invoke$arity$2(\", \",cljs.core.remove.cljs$core$IFn$_invoke$arity$2(clojure.string.blank_QMARK_,descriptions));\n})());\nif(cljs.core.truth_(or__5045__auto__)){\nreturn or__5045__auto__;\n} else {\nvar temp__5804__auto__ = metabase.lib.util.previous_stage_number(query__$1,stage_number);\nif(cljs.core.truth_(temp__5804__auto__)){\nvar previous_stage_number = temp__5804__auto__;\nreturn metabase.lib.metadata.calculation.display_name.cljs$core$IFn$_invoke$arity$4(query__$1,previous_stage_number,metabase.lib.util.query_stage(query__$1,previous_stage_number),style);\n} else {\nreturn null;\n}\n}\n}));\n/**\n * Inputs: [query]\n *   Return: :metabase.lib.schema/query\n *        \n * \n *   Adds a new blank stage to the end of the pipeline\n */\nmetabase.lib.stage.append_stage = (function metabase$lib$stage$append_stage(query){\n\nreturn cljs.core.update.cljs$core$IFn$_invoke$arity$4(query,new cljs.core.Keyword(null,\"stages\",\"stages\",-442109532),cljs.core.conj,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(\"lib\",\"type\",\"lib/type\",1175424801),new cljs.core.Keyword(\"mbql.stage\",\"mbql\",\"mbql.stage/mbql\",1578747798)], null));\n});\n/**\n * Inputs: [query]\n *   Return: :metabase.lib.schema/query\n *        \n * \n *   Drops the final stage in the pipeline\n */\nmetabase.lib.stage.drop_stage = (function metabase$lib$stage$drop_stage(query){\n\nif(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2((1),cljs.core.count(new cljs.core.Keyword(null,\"stages\",\"stages\",-442109532).cljs$core$IFn$_invoke$arity$1(query)))){\nthrow cljs.core.ex_info.cljs$core$IFn$_invoke$arity$2(metabase.shared.util.i18n.js_i18n(\"Cannot drop the only stage\"),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"stages\",\"stages\",-442109532),new cljs.core.Keyword(null,\"stages\",\"stages\",-442109532).cljs$core$IFn$_invoke$arity$1(query)], null));\n} else {\n}\n\nreturn cljs.core.update.cljs$core$IFn$_invoke$arity$3(query,new cljs.core.Keyword(null,\"stages\",\"stages\",-442109532),cljs.core.comp.cljs$core$IFn$_invoke$arity$2(cljs.core.vec,cljs.core.butlast));\n});\n","~:ns-info",["^ ","~:rename-macros",null,"~:renames",["^ "],"~:meta",["^ ","~:doc","Method implementations for a stage of a query.","~:file","metabase/lib/stage.cljc","~:line",1,"~:column",5,"~:end-line",1,"~:end-column",23],"~:ns-aliases",["^ ","~$cljs.loader","~$shadow.loader","~$clojure.core","~$cljs.core","~$clojure.spec.gen.alpha","~$cljs.spec.gen.alpha","~$clojure.pprint","~$cljs.pprint","~$clojure.core.match","~$cljs.core.match"],"~:use-macros",null,"~:excludes",["~#set",[]],"~:name","~$metabase.lib.stage","~:reader-aliases",["^ "],"~:op","~:ns","~:imports",null,"~:requires",["^ ","~$metabase.lib.schema","^Q","~$mu","~$metabase.util.malli","~$metabase.lib.metadata.calculation","^T","~$metabase.lib.metadata","^U","~$metabase.lib.breakout","^V","~$i18n","~$metabase.shared.util.i18n","~$u","~$metabase.util","~$metabase.lib.field","^Z","~$lib.breakout","^V","~$lib.metadata","^U","~$metabase.lib.normalize","^11","^@","^@","~$lib.binning","~$metabase.lib.binning","~$metabase.lib.expression","^14","~$metabase.lib.util","^15","~$goog","^16","~$lib.aggregation","~$metabase.lib.aggregation","~$lib.schema","^Q","~$lib.hierarchy","~$metabase.lib.hierarchy","~$metabase.lib.schema.id","^1<","~$lib.join","~$metabase.lib.join","~$metabase.lib.temporal-bucket","^1?","~$m","~$medley.core","^Y","^Y","^X","^X","~$lib.util","^15","~$lib.field","^Z","~$lib.normalize","^11","^S","^S","^1>","^1>","~$lib.metadata.calculation","^T","~$lib.temporal-bucket","^1?","~$str","~$clojure.string","^1;","^1;","~$lib.schema.id","^1<","^1G","^1G","^18","^18","~$lib.expression","^14","^13","^13","^1@","^1@"],"~:seen",["^I",["~:require"]],"~:uses",null,"~:require-macros",["^ ","^@","^@","^R","^S","^W","^X","~$u","^Y","^Y","^Y","^X","^X","^S","^S"],"~:form",["~#list",["~$ns","^K","Method implementations for a stage of a query.",["^1O",["^1K",["^1G","~:as","^1F"],["^1@","^1Q","~$m"],["^18","^1Q","^17"],["^13","^1Q","^12"],["^V","^1Q","^["],["^14","^1Q","^1I"],["^Z","^1Q","^1B"],["^1;","^1Q","^1:"],["^1>","^1Q","^1="],["^U","^1Q","^10"],["^T","^1Q","^1D"],["^11","^1Q","^1C"],["^Q","^1Q","^19"],["^1<","^1Q","^1H"],["^1?","^1Q","^1E"],["^15","^1Q","^1A"],["^X","^1Q","^W"],["^Y","^1Q","~$u"],["^S","^1Q","^R"]]]]],"~:flags",["^ ","^1K",["^I",[]]],"~:js-deps",["^ "],"~:deps",["^16","^@","^1G","^1@","^18","^13","^V","^14","^Z","^1;","^1>","^U","^T","^11","^Q","^1<","^1?","^15","^X","^Y","^S"]],"^N","^K","~:resource-id",["~:shadow.build.classpath/resource","metabase/lib/stage.cljc"],"~:compiled-at",1692612548544,"^L",["^ ","^Q","^Q","^R","^S","^T","^T","^U","^U","^V","^V","^W","^X","~$u","^Y","^Z","^Z","^[","^V","^10","^U","^11","^11","^@","^@","^12","^13","^14","^14","^15","^15","^16","^16","^17","^18","^19","^Q","^1:","^1;","^1<","^1<","^1=","^1>","^1?","^1?","~$m","^1@","^Y","^Y","^X","^X","^1A","^15","^1B","^Z","^1C","^11","^S","^S","^1>","^1>","^1D","^T","^1E","^1?","^1F","^1G","^1;","^1;","^1H","^1<","^1G","^1G","^18","^18","^1I","^14","^13","^13","^1@","^1@"],"~:resource-name","metabase/lib/stage.cljc","~:warnings",[],"~:source","(ns metabase.lib.stage\n  \"Method implementations for a stage of a query.\"\n  (:require\n   [clojure.string :as str]\n   [medley.core :as m]\n   [metabase.lib.aggregation :as lib.aggregation]\n   [metabase.lib.binning :as lib.binning]\n   [metabase.lib.breakout :as lib.breakout]\n   [metabase.lib.expression :as lib.expression]\n   [metabase.lib.field :as lib.field]\n   [metabase.lib.hierarchy :as lib.hierarchy]\n   [metabase.lib.join :as lib.join]\n   [metabase.lib.metadata :as lib.metadata]\n   [metabase.lib.metadata.calculation :as lib.metadata.calculation]\n   [metabase.lib.normalize :as lib.normalize]\n   [metabase.lib.schema :as lib.schema]\n   [metabase.lib.schema.id :as lib.schema.id]\n   [metabase.lib.temporal-bucket :as lib.temporal-bucket]\n   [metabase.lib.util :as lib.util]\n   [metabase.shared.util.i18n :as i18n]\n   [metabase.util :as u]\n   [metabase.util.malli :as mu]))\n\n(lib.hierarchy/derive :mbql.stage/mbql   ::stage)\n(lib.hierarchy/derive :mbql.stage/native ::stage)\n\n(defmethod lib.normalize/normalize :mbql.stage/mbql\n  [stage]\n  (lib.normalize/normalize-map\n   stage\n   keyword\n   {:aggregation (partial mapv lib.normalize/normalize)\n    :filters     (partial mapv lib.normalize/normalize)}))\n\n(defmethod lib.metadata.calculation/metadata-method ::stage\n  [_query _stage-number _stage]\n  ;; not i18n'ed because this shouldn't be developer-facing.\n  (throw (ex-info \"You can't calculate a metadata map for a stage! Use lib.metadata.calculation/returned-columns-method instead.\"\n                  {})))\n\n(mu/defn ensure-previous-stages-have-metadata :- ::lib.schema/query\n  \"Recursively calculate the metadata for the previous stages and add it to them, we'll need it for metadata\n  calculations for [[lib.metadata.calculation/returned-columns]] and [[lib.metadata.calculation/visible-columns]], and\n  we don't want to have to calculate it more than once...\"\n  [query        :- ::lib.schema/query\n   stage-number :- :int]\n  (reduce\n   (fn [query stage-number]\n     (lib.util/update-query-stage query\n                                  stage-number\n                                  assoc ::cached-metadata\n                                  (lib.metadata.calculation/returned-columns query\n                                                                             stage-number\n                                                                             (lib.util/query-stage query stage-number))))\n   query\n   (range 0 (lib.util/canonical-stage-index query stage-number))))\n\n(mu/defn ^:private existing-stage-metadata :- [:maybe lib.metadata.calculation/ColumnsWithUniqueAliases]\n  \"Return existing stage metadata attached to a stage if is already present: return it as-is, but only if this is a\n  native stage or a source-Card stage. if it's any other sort of stage then ignore the metadata, it's probably wrong;\n  we can recalculate the correct metadata anyway.\"\n  [query        :- ::lib.schema/query\n   stage-number :- :int]\n  (let [{stage-type :lib/type, :keys [source-card] :as stage} (lib.util/query-stage query stage-number)]\n    (or (::cached-metadata stage)\n        (when-let [metadata (:lib/stage-metadata stage)]\n          (when (or (= stage-type :mbql.stage/native)\n                    source-card)\n            (let [source-type (case stage-type\n                                :mbql.stage/native :source/native\n                                :mbql.stage/mbql   :source/card)]\n              (not-empty\n               (for [col (:columns metadata)]\n                 (merge\n                  {:lib/source-column-alias  (:name col)\n                   :lib/desired-column-alias (:name col)}\n                  col\n                  {:lib/source source-type})))))))))\n\n(mu/defn ^:private breakouts-columns :- [:maybe lib.metadata.calculation/ColumnsWithUniqueAliases]\n  [query          :- ::lib.schema/query\n   stage-number   :- :int\n   unique-name-fn :- fn?]\n  (not-empty\n   (for [breakout (lib.breakout/breakouts-metadata query stage-number)]\n     (assoc breakout\n            :lib/source               :source/breakouts\n            :lib/source-column-alias  ((some-fn :lib/source-column-alias :name) breakout)\n            :lib/desired-column-alias (unique-name-fn (lib.field/desired-alias query breakout))))))\n\n(mu/defn ^:private aggregations-columns :- [:maybe lib.metadata.calculation/ColumnsWithUniqueAliases]\n  [query          :- ::lib.schema/query\n   stage-number   :- :int\n   unique-name-fn :- fn?]\n  (not-empty\n   (for [ag (lib.aggregation/aggregations-metadata query stage-number)]\n     (assoc ag\n            :lib/source               :source/aggregations\n            :lib/source-column-alias  (:name ag)\n            :lib/desired-column-alias (unique-name-fn (:name ag))))))\n\n;;; TODO -- maybe the bulk of this logic should be moved into [[metabase.lib.field]], like we did for breakouts and\n;;; aggregations above.\n(mu/defn ^:private fields-columns :- [:maybe lib.metadata.calculation/ColumnsWithUniqueAliases]\n  [query          :- ::lib.schema/query\n   stage-number   :- :int\n   unique-name-fn :- fn?]\n  (when-let [{fields :fields} (lib.util/query-stage query stage-number)]\n    (not-empty\n     (for [[tag :as ref-clause] fields\n           :let                 [source (case tag\n                                          ;; you can't have an `:aggregation` reference in `:fields`; anything in\n                                          ;; `:aggregations` is returned automatically anyway\n                                          ;; by [[aggregations-columns]] above.\n                                          :field      :source/fields\n                                          :expression :source/expressions)\n                                 metadata (lib.metadata.calculation/metadata query stage-number ref-clause)]]\n       (assoc metadata\n              :lib/source               source\n              :lib/source-column-alias  (lib.metadata.calculation/column-name query stage-number metadata)\n              :lib/desired-column-alias (unique-name-fn (lib.field/desired-alias query metadata)))))))\n\n(mu/defn ^:private summary-columns :- [:maybe lib.metadata.calculation/ColumnsWithUniqueAliases]\n  [query          :- ::lib.schema/query\n   stage-number   :- :int\n   unique-name-fn :- fn?]\n  (not-empty\n   (into []\n         (mapcat (fn [f]\n                   (f query stage-number unique-name-fn)))\n         [breakouts-columns\n          aggregations-columns])))\n\n(mu/defn ^:private previous-stage-metadata :- [:maybe lib.metadata.calculation/ColumnsWithUniqueAliases]\n  \"Metadata for the previous stage, if there is one.\"\n  [query          :- ::lib.schema/query\n   stage-number   :- :int\n   unique-name-fn :- fn?]\n  (when-let [previous-stage-number (lib.util/previous-stage-number query stage-number)]\n    (not-empty\n     (for [col  (lib.metadata.calculation/returned-columns query\n                                                           previous-stage-number\n                                                           (lib.util/query-stage query previous-stage-number))\n           :let [source-alias (or ((some-fn :lib/desired-column-alias :lib/source-column-alias) col)\n                                  (lib.metadata.calculation/column-name query stage-number col))]]\n       (-> col\n           (assoc :lib/source               :source/previous-stage\n                  :lib/source-column-alias  source-alias\n                  :lib/desired-column-alias (unique-name-fn source-alias))\n           ;; do not retain `:temporal-unit`; it's not like we're doing a extract(month from <x>) twice, in both\n           ;; stages of a query. It's a little hacky that we're manipulating `::lib.field` keys directly here since\n           ;; they're presumably supposed to be private-ish, but I don't have a more elegant way of solving this sort\n           ;; of problem at this point in time.\n           (dissoc ::lib.field/temporal-unit))))))\n\n(mu/defn ^:private saved-question-metadata :- [:maybe lib.metadata.calculation/ColumnsWithUniqueAliases]\n  \"Metadata associated with a Saved Question, e.g. if we have a `:source-card`\"\n  [query          :- ::lib.schema/query\n   stage-number   :- :int\n   card-id        :- [:maybe ::lib.schema.id/card]\n   unique-name-fn :- fn?]\n  (when card-id\n    (when-let [card (lib.metadata/card query card-id)]\n      (->> (lib.metadata.calculation/visible-columns\n            query stage-number card {:unique-name-fn               unique-name-fn\n                                     :include-implicitly-joinable? false})\n           ;; Questions should not have implicitly joinable columns (#30950).\n           ;; :include-implicitly-joinable? false in the call above makes sure\n           ;; no implicitly joinable columns show up in the list, but this is\n           ;; not enough. If the returned columns contain :fk-target-field-id\n           ;; fields, then [[metabase.lib.metadata.calculation/visible-columns-method]]\n           ;; for :metabase.lib.stage/stage would add the implicitly joinable\n           ;; columns. Dissocing these fields prevents that.\n           (mapv #(dissoc % :fk-target-field-id))\n           not-empty))))\n\n(mu/defn ^:private expressions-metadata :- [:maybe lib.metadata.calculation/ColumnsWithUniqueAliases]\n  [query           :- ::lib.schema/query\n   stage-number    :- :int\n   unique-name-fn  :- fn?]\n  (not-empty\n   (for [expression (lib.expression/expressions-metadata query stage-number)]\n     (let [base-type (:base-type expression)]\n       (-> (assoc expression\n                  :lib/source               :source/expressions\n                  :lib/source-column-alias  (:name expression)\n                  :lib/desired-column-alias (unique-name-fn (:name expression)))\n           (u/assoc-default :effective-type (or base-type :type/*)))))))\n\n(defn- implicitly-joinable-columns\n  \"Columns that are implicitly joinable from some other columns in `column-metadatas`. To be joinable, the column has to\n  have appropriate FK metadata, i.e. have an `:fk-target-field-id` pointing to another Field. (I think we only include\n  this information for Databases that support FKs and joins, so I don't think we need to do an additional DB feature\n  check here.)\n\n  This does not include columns from any Tables that are already explicitly joined, and does not include multiple\n  versions of a column when there are multiple pathways to it (i.e. if there is more than one FK to a Table). This\n  behavior matches how things currently work in MLv1, at least for order by; we can adjust as needed in the future if\n  it turns out we do need that stuff.\n\n  Does not include columns that would be implicitly joinable via multiple hops.\"\n  [query stage-number column-metadatas unique-name-fn]\n  (let [existing-table-ids (into #{} (map :table-id) column-metadatas)]\n    (into []\n          (comp (filter :fk-target-field-id)\n                (m/distinct-by :fk-target-field-id)\n                (map (fn [{source-field-id :id, :keys [fk-target-field-id]}]\n                       (-> (lib.metadata/field query fk-target-field-id)\n                           (assoc ::source-field-id source-field-id))))\n                (remove #(contains? existing-table-ids (:table-id %)))\n                (m/distinct-by :table-id)\n                (mapcat (fn [{:keys [table-id], ::keys [source-field-id]}]\n                          (let [table-metadata (lib.metadata/table query table-id)\n                                options        {:unique-name-fn               unique-name-fn\n                                                :include-implicitly-joinable? false}]\n                            (for [field (lib.metadata.calculation/visible-columns-method query stage-number table-metadata options)\n                                  :let  [field (assoc field\n                                                      :fk-field-id              source-field-id\n                                                      :lib/source               :source/implicitly-joinable\n                                                      :lib/source-column-alias  (:name field))]]\n                              (assoc field :lib/desired-column-alias (unique-name-fn\n                                                                      (lib.field/desired-alias query field))))))))\n          column-metadatas)))\n\n;;; Calculate the columns to return if `:aggregations`/`:breakout`/`:fields` are unspecified.\n;;;\n;;; Formula for the so-called 'default' columns is\n;;;\n;;; 1a. Columns returned by the previous stage of the query (if there is one), OR\n;;;\n;;; 1b. Default 'visible' Fields for our `:source-table`, OR\n;;;\n;;; 1c. Metadata associated with a Saved Question, if we have `:source-card` (`:source-table` is a `card__<id>` string\n;;;     in legacy MBQL), OR\n;;;\n;;; 1d. `:lib/stage-metadata` if this is a `:mbql.stage/native` stage\n;;;\n;;; PLUS\n;;;\n;;; 2. Expressions (aka calculated columns) added in this stage\n;;;\n;;; PLUS\n;;;\n;;; 3. Columns added by joins at this stage\n(mu/defn ^:private previous-stage-or-source-visible-columns :- lib.metadata.calculation/ColumnsWithUniqueAliases\n  \"Return columns from the previous query stage or source Table/Card.\"\n  [query                                 :- ::lib.schema/query\n   stage-number                          :- :int\n   {:keys [unique-name-fn], :as options} :- lib.metadata.calculation/VisibleColumnsOptions]\n  {:pre [(fn? unique-name-fn)]}\n  (mapv\n   #(dissoc % ::lib.join/join-alias ::lib.field/temporal-unit ::lib.field/binning :fk-field-id)\n   (or\n    ;; 1a. columns returned by previous stage\n    (previous-stage-metadata query stage-number unique-name-fn)\n    ;; 1b or 1c\n    (let [{:keys [source-table source-card], :as this-stage} (lib.util/query-stage query stage-number)]\n      (or\n       ;; 1b: default visible Fields for the source Table\n       (when source-table\n         (assert (integer? source-table))\n         (let [table-metadata (lib.metadata/table query source-table)]\n           (lib.metadata.calculation/visible-columns query stage-number table-metadata options)))\n       ;; 1c. Metadata associated with a saved Question\n       (when source-card\n         (saved-question-metadata query stage-number source-card unique-name-fn))\n       ;; 1d: `:lib/stage-metadata` for the (presumably native) query\n       (for [col (:columns (:lib/stage-metadata this-stage))]\n         (assoc col\n                :lib/source :source/native\n                :lib/source-column-alias  (:name col)\n                ;; these should already be unique, but run them thru `unique-name-fn` anyway to make sure anything\n                ;; that gets added later gets deduplicated from these.\n                :lib/desired-column-alias (unique-name-fn (:name col)))))))))\n\n(mu/defn ^:private existing-visible-columns :- lib.metadata.calculation/ColumnsWithUniqueAliases\n  [query        :- ::lib.schema/query\n   stage-number :- :int\n   {:keys [unique-name-fn include-joined? include-expressions?], :as options} :- lib.metadata.calculation/VisibleColumnsOptions]\n  (concat\n   ;; 1: columns from the previous stage, source table or query\n   (previous-stage-or-source-visible-columns query stage-number options)\n   ;; 2: expressions (aka calculated columns) added in this stage\n   (when include-expressions?\n     (expressions-metadata query stage-number unique-name-fn))\n   ;; 3: columns added by joins at this stage\n   (when include-joined?\n     (lib.join/all-joins-visible-columns query stage-number unique-name-fn))))\n\n(defn- ref-to? [[tag _opts pointer :as clause] column]\n  (case tag\n    :field (if (or (number? pointer) (string? pointer))\n             (= pointer (:id column))\n             (throw (ex-info \"unknown type of :field ref in lib.stage/ref-to?\"\n                             {:clause clause\n                              :column column})))\n    :expression (= pointer (:name column))\n    (throw (ex-info \"unknown clause in lib.stage/ref-to?\"\n                    {:clause clause\n                     :column column}))))\n\n(defn- mark-selected-breakouts [query stage-number columns]\n  (if-let [breakouts (:breakout (lib.util/query-stage query stage-number))]\n    (for [column columns]\n      (if-let [match (m/find-first #(ref-to? % column) breakouts)]\n        (let [binning        (lib.binning/binning match)\n              {:keys [unit]} (lib.temporal-bucket/temporal-bucket match)]\n          (cond-> column\n            binning (lib.binning/with-binning binning)\n            unit    (lib.temporal-bucket/with-temporal-bucket unit)))\n        column))\n    columns))\n\n(defmethod lib.metadata.calculation/visible-columns-method ::stage\n  [query stage-number _stage {:keys [unique-name-fn include-implicitly-joinable?], :as options}]\n  (let [query            (ensure-previous-stages-have-metadata query stage-number)\n        existing-columns (existing-visible-columns query stage-number options)]\n    (->> (concat\n           existing-columns\n           ;; add implicitly joinable columns if desired\n           (when include-implicitly-joinable?\n             (implicitly-joinable-columns query stage-number existing-columns unique-name-fn)))\n         (mark-selected-breakouts query stage-number))))\n\n;;; Return results metadata about the expected columns in an MBQL query stage. If the query has\n;;; aggregations/breakouts, then return those and the fields columns. Otherwise if there are fields columns return\n;;; those and the joined columns. Otherwise return the defaults based on the source Table or previous stage + joins.\n(defmethod lib.metadata.calculation/returned-columns-method ::stage\n  [query stage-number _stage {:keys [unique-name-fn], :as options}]\n  (or\n   (existing-stage-metadata query stage-number)\n   (let [query        (ensure-previous-stages-have-metadata query stage-number)\n         summary-cols (summary-columns query stage-number unique-name-fn)\n         field-cols   (fields-columns query stage-number unique-name-fn)]\n     ;; ... then calculate metadata for this stage\n     (cond\n       summary-cols\n       (into summary-cols field-cols)\n\n       field-cols\n       (do (doall field-cols)           ; force generation of unique names before join columns\n           (into []\n                 (m/distinct-by #(dissoc % :source-alias :lib/source :lib/source-uuid :lib/desired-column-alias))\n                 (concat field-cols\n                         (lib.join/all-joins-expected-columns query stage-number options))))\n\n       :else\n       ;; there is no `:fields` or summary columns (aggregtions or breakouts) which means we return all the visible\n       ;; columns from the source or previous stage plus all the expressions. We return only the `:fields` from any\n       ;; joins\n       (concat\n        ;; we don't want to include all visible joined columns, so calculate that separately\n        (previous-stage-or-source-visible-columns query stage-number {:include-implicitly-joinable? false\n                                                                      :unique-name-fn               unique-name-fn})\n        (expressions-metadata query stage-number unique-name-fn)\n        (lib.join/all-joins-expected-columns query stage-number options))))))\n\n(defmethod lib.metadata.calculation/display-name-method :mbql.stage/native\n  [_query _stage-number _stage _style]\n  (i18n/tru \"Native query\"))\n\n(def ^:private display-name-parts\n  [:source-table\n   :source-card\n   :aggregation\n   :breakout\n   :filters\n   :order-by\n   :limit])\n\n(defmethod lib.metadata.calculation/display-name-method :mbql.stage/mbql\n  [query stage-number _stage style]\n  (let [query (ensure-previous-stages-have-metadata query stage-number)]\n    (or\n     (not-empty\n      (let [descriptions (for [k display-name-parts]\n                           (lib.metadata.calculation/describe-top-level-key query stage-number k))]\n        (str/join \", \" (remove str/blank? descriptions))))\n     (when-let [previous-stage-number (lib.util/previous-stage-number query stage-number)]\n       (lib.metadata.calculation/display-name query\n                                              previous-stage-number\n                                              (lib.util/query-stage query previous-stage-number)\n                                              style)))))\n\n(mu/defn append-stage :- ::lib.schema/query\n  \"Adds a new blank stage to the end of the pipeline\"\n  [query]\n  (update query :stages conj {:lib/type :mbql.stage/mbql}))\n\n(mu/defn drop-stage :- ::lib.schema/query\n  \"Drops the final stage in the pipeline\"\n  [query]\n  (when (= 1 (count (:stages query)))\n    (throw (ex-info (i18n/tru \"Cannot drop the only stage\") {:stages (:stages query)})))\n  (update query :stages (comp vec butlast)))\n","~:reader-features",["^I",["~:cljs-release","~:cljs"]],"~:cljc",true,"~:source-map-compact",["^ ","mappings","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","names",["metabase.lib.hierarchy/derive","metabase.lib.normalize/normalize","stage","metabase.lib.normalize.normalize_map","cljs.core/keyword","cljs.core.partial","cljs.core/mapv","metabase.lib.metadata.calculation/metadata-method","_query","_stage-number","_stage","cljs.core.ex_info","metabase.lib.stage/ensure-previous-stages-have-metadata","query","stage-number","cljs.core.reduce","metabase.lib.util.update_query_stage","cljs.core/assoc","metabase.lib.metadata.calculation.returned_columns","metabase.lib.util/query-stage","cljs.core.range","metabase.lib.util/canonical-stage-index","metabase.lib.stage/existing-stage-metadata","map__64479","cljs.core/--destructure-map","cljs.core.get","stage-type","source-card","or__5045__auto__","temp__5804__auto__","metadata","cljs.core._EQ_","source-type","G__64480","cljs.core/Keyword","js/Error","cljs.core/not-empty","iter__5523__auto__","s__64484","cljs.core/LazySeq","cljs.core/seq","cljs.core/chunked-seq?","c__5521__auto__","size__5522__auto__","cljs.core/count","b__64486","cljs.core/chunk-buffer","i__64485","cljs.core/-nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__64483","cljs.core/chunk-rest","cljs.core/first","cljs.core/cons","cljs.core/rest","col","cljs.core.merge","metabase.lib.stage/breakouts-columns","unique-name-fn","s__64503","b__64505","i__64504","iter__64502","breakout","metabase.lib.breakout/breakouts-metadata","cljs.core.assoc","cljs.core.some_fn","G__64509","G__64512","metabase.lib.field/desired-alias","metabase.lib.stage/aggregations-columns","s__64525","b__64527","i__64526","iter__64524","ag","metabase.lib.aggregation.aggregations_metadata","G__64535","G__64536","metabase.lib.stage/fields-columns","map__64549","fields","s__64552","b__64554","i__64553","vec__64569","cljs.core.nth","iter__64551","vec__64582","tag","ref-clause","source","G__64573","G__64585","metabase.lib.metadata.calculation.metadata","metabase.lib.metadata.calculation.column_name","G__64579","G__64586","metabase.lib.stage/summary-columns","cljs.core.into","cljs.core.mapcat","f","metabase.lib.stage/previous-stage-metadata","previous-stage-number","metabase.lib.util/previous-stage-number","s__64612","b__64614","i__64613","iter__64611","source-alias","cljs.core.dissoc","metabase.lib.stage/saved-question-metadata","card-id","card","metabase.lib.metadata/card","metabase.lib.metadata.calculation.visible_columns","p1__64636#","cljs.core.mapv","metabase.lib.stage/expressions-metadata","s__64644","b__64646","i__64645","iter__64643","expression","metabase.lib.expression.expressions_metadata","base-type","G__64649","G__64650","metabase.util.assoc_default","metabase.lib.stage/implicitly-joinable-columns","column-metadatas","existing-table-ids","cljs.core.map","cljs.core.comp","cljs.core.filter","medley.core.distinct_by","p__64657","map__64658","source-field-id","fk-target-field-id","metabase.lib.metadata/field","p1__64654#","cljs.core.remove","cljs.core/contains?","p__64659","map__64660","table-id","table-metadata","metabase.lib.metadata/table","options","s__64662","b__64664","i__64663","iter__64661","field","metabase.lib.metadata.calculation/visible-columns-method","G__64667","G__64669","p__64687","map__64688","metabase.lib.stage/previous-stage-or-source-visible-columns","p1__64674#","map__64692","source-table","this-stage","s__64694","b__64696","i__64695","iter__64693","G__64706","G__64712","p__64763","map__64764","metabase.lib.stage/existing-visible-columns","include-joined?","include-expressions?","cljs.core.concat","metabase.lib.join/all-joins-visible-columns","p__64836","vec__64837","metabase.lib.stage/ref-to?","_opts","pointer","clause","column","G__64841","metabase.lib.stage/mark-selected-breakouts","columns","temp__5802__auto__","breakouts","s__64861","b__64863","i__64862","iter__64860","match","p1__64857#","medley.core.find_first","map__64870","map__64874","binning","metabase.lib.binning/binning","unit","metabase.lib.temporal-bucket/temporal-bucket","G__64871","G__64875","metabase.lib.binning/with-binning","metabase.lib.temporal-bucket/with-temporal-bucket","p__64877","map__64878","include-implicitly-joinable?","existing-columns","metabase.lib.metadata.calculation/returned-columns-method","p__64884","map__64885","summary-cols","field-cols","cljs.core.doall","p1__64882#","metabase.lib.join/all-joins-expected-columns","metabase.lib.metadata.calculation/display-name-method","_style","metabase.shared.util.i18n/js-i18n","metabase.lib.stage/display-name-parts","style","descriptions","s__64893","b__64895","i__64894","iter__64892","k","metabase.lib.metadata.calculation.describe_top_level_key","clojure.string.join","clojure.string/blank?","metabase.lib.metadata.calculation.display_name","metabase.lib.stage/append-stage","cljs.core.update","cljs.core/conj","metabase.lib.stage/drop-stage","cljs.core/vec","cljs.core/butlast","cljs.core/chunk-first"]],"~:used-vars",["^I",["~$metabase.lib.metadata.calculation/visible-columns","~$cljs.core/mapcat","~$cljs.core/--destructure-map","~$clojure.string/join","~$metabase.lib.stage/drop-stage","~$medley.core/distinct-by","~$cljs.core/comp","~$cljs.core/rest","~$metabase.lib.stage/previous-stage-metadata","~$cljs.core/keyword","~$metabase.lib.metadata.calculation/returned-columns-method","~$metabase.lib.metadata.calculation/visible-columns-method","~$metabase.util/assoc-default","~$metabase.lib.stage/implicitly-joinable-columns","~$metabase.lib.expression/expressions-metadata","~$metabase.lib.metadata/field","~$metabase.lib.normalize/normalize-map","~$clojure.string/blank?","~$cljs.core/filter","~$cljs.core/=","~$cljs.core/partial","~$cljs.core/doall","~$metabase.lib.util/query-stage","~$metabase.lib.stage/summary-columns","~$cljs.core/count","~$metabase.lib.stage/display-name-parts","~$metabase.lib.stage/ensure-previous-stages-have-metadata","~$cljs.core/reduce","~$cljs.core/seq","~$cljs.core/chunk-first","~$metabase.lib.metadata/card","~$metabase.lib.binning/binning","~$cljs.core/Keyword","~$metabase.lib.util/canonical-stage-index","~$metabase.lib.normalize/normalize","~$metabase.lib.field/desired-alias","~$cljs.core/chunk","~$cljs.core/mapv","~$cljs.core/dissoc","~$cljs.core/LazySeq","~$cljs.core/chunk-rest","~$cljs.core/concat","~$metabase.lib.metadata.calculation/describe-top-level-key","~$metabase.lib.hierarchy/derive","~$metabase.lib.stage/aggregations-columns","~$metabase.lib.join/all-joins-expected-columns","~$metabase.lib.util/update-query-stage","~$cljs.core/contains?","~$cljs.core/into","~$metabase.lib.metadata.calculation/returned-columns","~$cljs.core/conj","~$metabase.lib.stage/expressions-metadata","~$cljs.core/update","~$metabase.lib.temporal-bucket/temporal-bucket","~$metabase.lib.binning/with-binning","~$cljs.core/map","~$metabase.lib.stage/saved-question-metadata","~$medley.core/find-first","~$cljs.core/-add-method","~$metabase.lib.metadata.calculation/metadata","~$metabase.lib.metadata.calculation/metadata-method","~$cljs.core/get","~$metabase.lib.temporal-bucket/with-temporal-bucket","~$cljs.core/chunk-append","~$cljs.core/-nth","~$cljs.core/remove","~$metabase.lib.aggregation/aggregations-metadata","~$metabase.lib.breakout/breakouts-metadata","~$cljs.core/not-empty","~$metabase.lib.metadata.calculation/display-name","~$metabase.lib.stage/mark-selected-breakouts","~$metabase.shared.util.i18n/js-i18n","~$cljs.core/nth","~$cljs.core/ex-info","~$metabase.lib.join/all-joins-visible-columns","~$metabase.lib.stage/breakouts-columns","~$cljs.core/vec","~$metabase.lib.stage/fields-columns","~$metabase.lib.stage/append-stage","~$metabase.lib.metadata.calculation/column-name","~$cljs.core/chunk-cons","~$metabase.lib.util/previous-stage-number","~$metabase.lib.stage/existing-stage-metadata","~$cljs.core/cons","~$cljs.core/assoc","~$cljs.core/chunk-buffer","~$cljs.core/range","~$metabase.lib.metadata/table","~$metabase.lib.stage/previous-stage-or-source-visible-columns","~$cljs.core/some-fn","~$cljs.core/first","~$cljs.core/butlast","~$metabase.lib.stage/ref-to?","~$cljs.core/merge","~$metabase.lib.metadata.calculation/display-name-method","~$js/Error","~$metabase.lib.stage/existing-visible-columns","~$cljs.core/chunked-seq?"]]],"~:cache-keys",["~#cmap",[["^1V","camel_snake_kebab/internals/misc.cljc"],["5ae08f83ceb8959971e6334596bff0214bf6fdf2","~:shadow.build.compiler/resolve",["^ ","~:require-id",null,"~:deps-ids",["^I",[]],"~:deps-syms",["^16","^@","~$camel-snake-kebab.internals.string-separator","^1G"]]],["^1V","goog/dom/tagname.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4C",["^ ","^4D",null,"^4E",["^I",[]],"^4F",["^16","~$goog.dom.HtmlElement"]]],["^1V","metabase/shared/util/internal/time_common.cljc"],["163f2e345dbdab8903e43302a6f45950d2b8975d","^4C",["^ ","^4D",null,"^4E",["^I",[]],"^4F",["^16","^@"]]],["^1V","metabase/shared/util/i18n.cljs"],["6c3c8615004b349dae9851ed547d516d45e04bd0","^4C",["^ ","^4D",null,"^4E",["^I",[]],"^4F",["^16","^@","~$shadow.js.shim.module$ttag","^1G"]]],["^1V","goog/labs/useragent/platform.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4C",["^ ","^4D",null,"^4E",["^I",[]],"^4F",["^16","~$goog.string.internal","~$goog.labs.userAgent.util","~$goog.labs.userAgent.highEntropy.highEntropyValue","~$goog.labs.userAgent.highEntropy.highEntropyData","~$goog.labs.userAgent"]]],["^1V","metabase/lib/expression.cljc"],["10987df1e6eb50a264d740d0e7139634b3bce1f6","^4C",["^ ","^4D",null,"^4E",["^I",[]],"^4F",["^16","^@","^1G","^1@","~$metabase.lib.common","^1;","^U","^T","~$metabase.lib.options","~$metabase.lib.ref","^Q","~$metabase.lib.schema.common","~$metabase.lib.schema.expression","~$metabase.lib.schema.temporal-bucketing","^1?","^15","^X","~$metabase.types","^Y","^S"]]],["^1V","metabase/lib/schema/binning.cljc"],["d927ad1ec35ab24dde0eb7ea95cd81b19d96ecd4","^4C",["^ ","^4D",null,"^4E",["^I",[]],"^4F",["^16","^@","^4R","~$metabase.util.malli.registry"]]],["^1V","goog/crypt/crypt.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4C",["^ ","^4D",null,"^4E",["^I",[]],"^4F",["^16","~$goog.asserts","~$goog.async.throwException"]]],["^1V","metabase/types.cljc"],["00232bf78b259e26a21c218c8f2d746ba7003a15","^4C",["^ ","^4D",null,"^4E",["^I",[]],"^4F",["^16","^@","~$clojure.set","~$metabase.types.coercion-hierarchies","^Y"]]],["^1V","cljs/spec/gen/alpha.cljs"],["bc14df6666853ed869d7b88aaa864111c65d0c7f","^4C",["^ ","^4D",null,"^4E",["^I",[]],"^4F",["^16","^@","~$goog.Uri"]]],["^1V","cljs/tools/reader/impl/utils.cljs"],["927809dcb44fa726e4969d993e3e733636d95ebb","^4C",["^ ","^4D",null,"^4E",["^I",[]],"^4F",["^16","^@","^1G","~$goog.string"]]],["^1V","metabase/lib/util.cljc"],["11c3262368d876979e323f3e646aab21fbf9b86e","^4C",["^ ","^4D",null,"^4E",["^I",[]],"^4F",["^16","^@","~$shadow.js.shim.module$crc_32","^50","~$goog.string.format","^4Y","^1G","^1@","^4O","^4P","^Q","^4R","^4S","^1<","~$metabase.mbql.util","^X","^Y","^S"]]],["^1V","lambdaisland/glogi.cljs"],["76286836d4172602aa08006b2a754dda736ffe09","^4C",["^ ","^4D",null,"^4E",["^I",[]],"^4F",["^16","^@","~$goog.log","~$goog.debug.Console","~$goog.array","^1G","~$goog.object","~$goog.debug.FancyWindow","~$goog.debug.DivConsole"]]],["^1V","goog/math/math.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4C",["^ ","^4D",null,"^4E",["^I",[]],"^4F",["^16","^4W"]]],["^1V","goog/html/trustedtypes.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4C",["^ ","^4D",null,"^4E",["^I",[]],"^4F",["^16"]]],["^1V","goog/string/stringformat.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4C",["^ ","^4D",null,"^4E",["^I",[]],"^4F",["^16","^50"]]],["^1V","malli/registry.cljc"],["514c6f7d69d7e40b56fa75bfd1a49a683ca15982","^4C",["^ ","^4D",null,"^4E",["^I",[]],"^4F",["^16","^@"]]],["^1V","goog/labs/useragent/browser.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4C",["^ ","^4D",null,"^4E",["^I",[]],"^4F",["^16","^4K","^4L","^4W","^4J","^4M","^4N"]]],["^1V","goog/html/safeurl.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4C",["^ ","^4D",null,"^4E",["^I",[]],"^4F",["^16","^4W","~$goog.fs.url","~$goog.html.TrustedResourceUrl","~$goog.string.Const","~$goog.string.TypedString","^4J"]]],["^1V","metabase/shared/util/currency.cljc"],["eebcc7f82aa7cb7e46caf6a9633d84c6b4396e93","^4C",["^ ","^4D",null,"^4E",["^I",[]],"^4F",["^16","^@"]]],["^1V","goog/style/style.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4C",["^ ","^4D",null,"^4E",["^I",[]],"^4F",["^16","^4W","~$goog.dom","~$goog.dom.NodeType","~$goog.dom.TagName","~$goog.dom.safe","~$goog.dom.vendor","~$goog.html.SafeStyleSheet","~$goog.math.Box","~$goog.math.Coordinate","~$goog.math.Rect","~$goog.math.Size","^57","~$goog.reflect","^50","~$goog.userAgent"]]],["^1V","goog/array/array.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4C",["^ ","^4D",null,"^4E",["^I",[]],"^4F",["^16","^4W"]]],["~:shadow.build.js-support/require","moment"],["~$shadow.js.shim.module$moment","shadow.js.shim.module$moment.js","require","^4C",["^ ","^4D",null,"^4E",["^I",[]],"^4F",["^16"]]],["^5J","moment-timezone"],["~$shadow.js.shim.module$moment_timezone","shadow.js.shim.module$moment_timezone.js","require","^4C",["^ ","^4D",null,"^4E",["^I",[]],"^4F",["^16"]]],["^1V","metabase/mbql/schema/macros.cljs"],["2af09bd42ffb1e15b66723cf7ba15db7dc75d10b","^4C",["^ ","^4D",null,"^4E",["^I",[]],"^4F",["^16","^@"]]],["^1V","metabase/lib/schema/mbql_clause.cljc"],["e5bdd00c58db706b1219843528fd3cd9dd8ab728","^4C",["^ ","^4D",null,"^4E",["^I",[]],"^4F",["^16","^@","^4R","^4S","^4U","^S","^4V"]]],["^1V","goog/useragent/useragent.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4C",["^ ","^4D",null,"^4E",["^I",[]],"^4F",["^16","~$goog.labs.userAgent.browser","~$goog.labs.userAgent.engine","~$goog.labs.userAgent.platform","^4K","^5H","^4J"]]],["^1V","malli/generator.cljc"],["514c6f7d69d7e40b56fa75bfd1a49a683ca15982","^4C",["^ ","^4D",null,"^4E",["^I",[]],"^4F",["^16","^@","^B","^1G","~$clojure.test.check","~$clojure.test.check.generators","~$clojure.test.check.properties","~$clojure.test.check.random","~$clojure.test.check.rose-tree","~$malli.core","~$malli.registry"]]],["^1V","clojure/test/check/properties.cljc"],["f33d988fd57bc9c11af1952db81c10f319c91416","^4C",["^ ","^4D",null,"^4E",["^I",[]],"^4F",["^16","^@","^5Q","~$clojure.test.check.results"]]],["^1V","clojure/test/check/generators.cljc"],["f33d988fd57bc9c11af1952db81c10f319c91416","^4C",["^ ","^4D",null,"^4E",["^I",[]],"^4F",["^16","^@","^1G","^5S","^5T","^50"]]],["^1V","goog/debug/error.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4C",["^ ","^4D",null,"^4E",["^I",[]],"^4F",["^16"]]],["^1V","metabase/lib/common.cljc"],["a3bc6343077ef13a3da77612b68f23f9b2a3d890","^4C",["^ ","^4D",null,"^4E",["^I",[]],"^4F",["^16","^@","~$metabase.lib.dispatch","^1;","^4P","^4Q","^4R","^S"]]],["^1V","metabase/lib/schema/util.cljc"],["14a9e8a90c56f5e44b4ecd361e962722fd97aecf","^4C",["^ ","^4D",null,"^4E",["^I",[]],"^4F",["^16","^@","^4P"]]],["^1V","metabase/lib/stage.cljc"],["fe4344b80c27764f34c9c3677daf5b78cdcb4a6d","^4C",["^ ","^4D",null,"^4E",["^I",[]],"^4F",["^16","^@","^1G","^1@","^18","^13","^V","^14","^Z","^1;","^1>","^U","^T","^11","^Q","^1<","^1?","^15","^X","^Y","^S"]]],["^1V","goog/flags/flags.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4C",["^ ","^4D",null,"^4E",["^I",[]],"^4F",["^16"]]],["^1V","malli/util.cljc"],["514c6f7d69d7e40b56fa75bfd1a49a683ca15982","^4C",["^ ","^4D",null,"^4E",["^I",[]],"^4F",["^16","^@","^@","^5U"]]],["^1V","cljs/tools/reader/edn.cljs"],["927809dcb44fa726e4969d993e3e733636d95ebb","^4C",["^ ","^4D",null,"^4E",["^I",[]],"^4F",["^16","^@","~$cljs.tools.reader.impl.errors","~$cljs.tools.reader.reader-types","~$cljs.tools.reader.impl.utils","~$cljs.tools.reader.impl.commons","~$cljs.tools.reader","^50","~$goog.string.StringBuffer"]]],["^1V","clojure/test/check/random/doubles.cljs"],["f33d988fd57bc9c11af1952db81c10f319c91416","^4C",["^ ","^4D",null,"^4E",["^I",[]],"^4F",["^16","^@","~$clojure.test.check.random.longs"]]],["^1V","net/cgrand/macrovich.cljc"],["abcb26cbfe0f8eef363b25525210c0fe1eb1f693","^4C",["^ ","^4D",null,"^4E",["^I",[]],"^4F",["^16","^@"]]],["^1V","malli/destructure.cljc"],["514c6f7d69d7e40b56fa75bfd1a49a683ca15982","^4C",["^ ","^4D",null,"^4E",["^I",[]],"^4F",["^16","^@","~$clojure.walk","^5U","~$malli.impl.util"]]],["^1V","schema/spec/variant.cljc"],["0dacc3066a87f33088c9a332b6c21e8b0560011c","^4C",["^ ","^4D",null,"^4E",["^I",[]],"^4F",["^16","^@","~$schema.utils","~$schema.spec.core"]]],["^1V","goog/structs/circularbuffer.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4C",["^ ","^4D",null,"^4E",["^I",[]],"^4F",["^16"]]],["^1V","weavejester/dependency.cljc"],["7fd7f8879313f6a7e295f7447e668bdf492c42c1","^4C",["^ ","^4D",null,"^4E",["^I",[]],"^4F",["^16","^@","^4Y"]]],["^1V","metabase/lib/binning.cljc"],["d0ecf0860e95e263d5509b1f63ed02a449134510","^4C",["^ ","^4D",null,"^4E",["^I",[]],"^4F",["^16","^@","^5X","^1;","^T","^Q","~$metabase.lib.schema.binning","~$metabase.shared.formatting.numbers","^X","^S"]]],["^1V","metabase/lib/schema/common.cljc"],["3f51a06335a7cb84c835d859c422919499874414","^4C",["^ ","^4D",null,"^4E",["^I",[]],"^4F",["^16","^@","^1G","^4U","^4V"]]],["^1V","goog/dom/nodetype.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4C",["^ ","^4D",null,"^4E",["^I",[]],"^4F",["^16"]]],["^1V","cljs/tools/reader/impl/inspect.cljs"],["927809dcb44fa726e4969d993e3e733636d95ebb","^4C",["^ ","^4D",null,"^4E",["^I",[]],"^4F",["^16","^@"]]],["^1V","goog/labs/useragent/highentropy/highentropyvalue.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4C",["^ ","^4D",null,"^4E",["^I",[]],"^4F",["^16","^4K","^4J"]]],["^1V","cljs/pprint.cljs"],["bc14df6666853ed869d7b88aaa864111c65d0c7f","^4C",["^ ","^4D",null,"^4E",["^I",[]],"^4F",["^16","^@","^1G","^50","^62"]]],["^1V","metabase/lib/breakout.cljc"],["9be2c53668f30478c70c02a5ae6b17f41e46c995","^4C",["^ ","^4D",null,"^4E",["^I",[]],"^4F",["^16","^@","^1G","~$metabase.lib.equality","^U","^T","^4Q","^Q","^4S","^15","^X","^S"]]],["^1V","metabase/lib/schema/template_tag.cljc"],["f1b6289b8e576857fe667aed3da134e4ad1ea26a","^4C",["^ ","^4D",null,"^4E",["^I",[]],"^4F",["^16","^@","^5U","^4R","^1<","~$metabase.mbql.schema","^4V"]]],["^1V","metabase/lib/schema/ref.cljc"],["5037a60b3d2f427702cf5cedf23f02bcc394d051","^4C",["^ ","^4D",null,"^4E",["^I",[]],"^4F",["^16","^@","^1G","^5X","^1;","^4R","^4S","^1<","~$metabase.lib.schema.mbql-clause","^4T","^4U","^4V"]]],["^1V","cljs/tools/reader.cljs"],["927809dcb44fa726e4969d993e3e733636d95ebb","^4C",["^ ","^4D",null,"^4E",["^I",[]],"^4F",["^16","^@","^5Z","^5[","^60","^5Y","^56","^50","^62"]]],["^1V","clojure/test/check/rose_tree.cljc"],["f33d988fd57bc9c11af1952db81c10f319c91416","^4C",["^ ","^4D",null,"^4E",["^I",[]],"^4F",["^16","^@"]]],["^1V","clojure/test/check/impl.cljc"],["f33d988fd57bc9c11af1952db81c10f319c91416","^4C",["^ ","^4D",null,"^4E",["^I",[]],"^4F",["^16","^@"]]],["^1V","camel_snake_kebab/internals/string_separator.cljc"],["5ae08f83ceb8959971e6334596bff0214bf6fdf2","^4C",["^ ","^4D",null,"^4E",["^I",[]],"^4F",["^16","^@","^1G"]]],["^1V","clojure/test/check/random.cljs"],["f33d988fd57bc9c11af1952db81c10f319c91416","^4C",["^ ","^4D",null,"^4E",["^I",[]],"^4F",["^16","^@","~$clojure.test.check.random.doubles","^63"]]],["^1V","metabase/lib/schema/expression/arithmetic.cljc"],["e6936a3e0b11bc3cd40d4e396c708af4622c21cb","^4C",["^ ","^4D",null,"^4E",["^I",[]],"^4F",["^16","^@","^5U","^1@","^1;","^4R","^4S","^6<","^4T","^4U","^4V"]]],["^1V","goog/string/typedstring.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4C",["^ ","^4D",null,"^4E",["^I",[]],"^4F",["^16"]]],["^1V","metabase/lib/schema/expression/string.cljc"],["b2d7de575aaaa880fdc88dfc31642c8e002c3669","^4C",["^ ","^4D",null,"^4E",["^I",[]],"^4F",["^16","^@","^4S","^6<"]]],["^1V","metabase/lib/types/constants.cljc"],["efb91045e39c9ec06192309589f82a778219a002","^4C",["^ ","^4D",null,"^4E",["^I",[]],"^4F",["^16","^@","^57"]]],["^1V","goog/object/object.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4C",["^ ","^4D",null,"^4E",["^I",[]],"^4F",["^16"]]],["^1V","metabase/lib/schema/filter.cljc"],["0147dea423ebfd097bf1edb97f0325c9e2908a85","^4C",["^ ","^4D",null,"^4E",["^I",[]],"^4F",["^16","^@","^4R","^4S","^6<","^4T","^4V"]]],["^1V","goog/dom/asserts.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4C",["^ ","^4D",null,"^4E",["^I",[]],"^4F",["^16","^4W"]]],"~:SHADOW-TIMESTAMP",[1689947046000,1689947046000,1689947050000],["^1V","metabase/lib/ref.cljc"],["86a9fbeddec3e58f7bb54e61f5342658b370fb3b","^4C",["^ ","^4D",null,"^4E",["^I",[]],"^4F",["^16","^@","^5X","~$metabase.lib.schema.ref","^S"]]],["^1V","goog/math/long.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4C",["^ ","^4D",null,"^4E",["^I",[]],"^4F",["^16","^4W","^5H"]]],["^1V","goog/html/trustedresourceurl.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4C",["^ ","^4D",null,"^4E",["^I",[]],"^4F",["^16","^4W","~$goog.fs.blob","^5:","~$goog.html.SafeScript","~$goog.html.trustedtypes","^5<","^5="]]],["^1V","schema/spec/leaf.cljc"],["0dacc3066a87f33088c9a332b6c21e8b0560011c","^4C",["^ ","^4D",null,"^4E",["^I",[]],"^4F",["^16","^@","^67"]]],["^1V","metabase/util/format.cljc"],["875f86a08288cb3ad5a6f15df988897eaf8613af","^4C",["^ ","^4D",null,"^4E",["^I",[]],"^4F",["^16","^@","^50"]]],["^1V","goog/math/irect.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4C",["^ ","^4D",null,"^4E",["^I",[]],"^4F",["^16"]]],["^1V","goog/math/box.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4C",["^ ","^4D",null,"^4E",["^I",[]],"^4F",["^16","^4W","^5E"]]],["^1V","metabase/shared/formatting/internal/numbers.cljs"],["efe49c9ffcc7bb82081aea64e55fd1a6b5038abc","^4C",["^ ","^4D",null,"^4E",["^I",[]],"^4F",["^16","^@","^1G","~$metabase.shared.formatting.internal.numbers-core","~$metabase.shared.util.currency","^Y"]]],["^1V","metabase/lib/options.cljc"],["1870276153adf026e09a3e9ed1ba8beaad80e1c8","^4C",["^ ","^4D",null,"^4E",["^I",[]],"^4F",["^16","^@","^4R","^X","^Y","^S"]]],["^1V","metabase/lib/field.cljc"],["65ccdbedd0d2c332e8e930fd31eede7c7014685e","^4C",["^ ","^4D",null,"^4E",["^I",[]],"^4F",["^16","^@","^1G","^1@","^18","^13","~$metabase.lib.card","^6:","^14","^1>","^U","^T","^11","^4P","^4Q","^Q","^4R","^1<","^6?","^4T","^1?","^15","^X","~$metabase.shared.util.time","^Y","~$metabase.util.humanization","~$metabase.util.log","^S"]]],["^1V","goog/string/internal.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4C",["^ ","^4D",null,"^4E",["^I",[]],"^4F",["^16"]]],["^1V","clojure/test/check.cljc"],["f33d988fd57bc9c11af1952db81c10f319c91416","^4C",["^ ","^4D",null,"^4E",["^I",[]],"^4F",["^16","^@","^5Q","^5S","^5W","^5T","~$clojure.test.check.impl"]]],["^1V","goog/functions/functions.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4C",["^ ","^4D",null,"^4E",["^I",[]],"^4F",["^16"]]],["^1V","metabase/lib/metadata.cljc"],["a8652a185953ef0e0b1c77d5540a4aa7271c0c63","^4C",["^ ","^4D",null,"^4E",["^I",[]],"^4F",["^16","^@","~$metabase.lib.metadata.protocols","^4R","^1<","^15","^S","^4V"]]],["^1V","goog/html/safestyle.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4C",["^ ","^4D",null,"^4E",["^I",[]],"^4F",["^16","^5<","~$goog.html.SafeUrl","^5=","^4W","^4J"]]],["^1V","goog/dom/safe.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4C",["^ ","^4D",null,"^4E",["^I",[]],"^4F",["^16","^4W","~$goog.asserts.dom","~$goog.dom.asserts","~$goog.functions","~$goog.html.SafeHtml","^6A","~$goog.html.SafeStyle","^6K","^5;","~$goog.html.uncheckedconversions","^5<","^4J"]]],["^1V","goog/asserts/dom.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4C",["^ ","^4D",null,"^4E",["^I",[]],"^4F",["^16","^5@","^4W","~$goog.dom.element"]]],["^1V","medley/core.cljc"],["f5117fa4c15ff14c4a0ab7db414b0f102afb0b8a","^4C",["^ ","^4D",null,"^4E",["^I",[]],"^4F",["^16","^@"]]],["^1V","clojure/walk.cljs"],["bc14df6666853ed869d7b88aaa864111c65d0c7f","^4C",["^ ","^4D",null,"^4E",["^I",[]],"^4F",["^16","^@"]]],["^1V","goog/useragent/product.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4C",["^ ","^4D",null,"^4E",["^I",[]],"^4F",["^16","^5M","^5O","^5I"]]],["^1V","metabase/lib/metadata/protocols.cljc"],["f5c81e2cab09f5dabb3cab711f7db1c5df1b398d","^4C",["^ ","^4D",null,"^4E",["^I",[]],"^4F",["^16","^@"]]],["^1V","metabase/lib/schema/expression/conditional.cljc"],["226c4623394b90853fcb014e9a95e84ffc8bd6db","^4C",["^ ","^4D",null,"^4E",["^I",[]],"^4F",["^16","^@","^4Y","^4S","^6<","^4U","^4V"]]],["^1V","lambdaisland/glogi/console.cljs"],["76286836d4172602aa08006b2a754dda736ffe09","^4C",["^ ","^4D",null,"^4E",["^I",[]],"^4F",["^16","^@","~$lambdaisland.glogi","~$lambdaisland.glogi.print","^57","^55"]]],["^1V","metabase/shared/formatting/numbers.cljc"],["de8b3f8bd2448079e930afa0a16faf5b2dff1534","^4C",["^ ","^4D",null,"^4E",["^I",[]],"^4F",["^16","^@","~$metabase.shared.formatting.internal.numbers","^6C","^Y"]]],["^1V","goog/html/safehtml.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4C",["^ ","^4D",null,"^4E",["^I",[]],"^4F",["^16","^5<","^6A","^6P","^5C","^6K","^5@","^5;","^5=","^4W","^5M","^56","^57","^4J","~$goog.dom.tags","^6B"]]],["^1V","metabase/lib/filter/operator.cljc"],["6b85a92dc1ffb19ca21aec66064d18564c2fbbc2","^4C",["^ ","^4D",null,"^4E",["^I",[]],"^4F",["^16","^@","^U","^T","^4R","~$metabase.lib.schema.filter","~$metabase.lib.types.isa","^X","^Y","^S"]]],["^1V","goog/dom/tags.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4C",["^ ","^4D",null,"^4E",["^I",[]],"^4F",["^16","^57"]]],["^1V","goog/math/size.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4C",["^ ","^4D",null,"^4E",["^I",[]],"^4F",["^16"]]],["^1V","metabase/lib/temporal_bucket.cljc"],["22c08818f6579bd329ece9f6a337c75bf33381e2","^4C",["^ ","^4D",null,"^4E",["^I",[]],"^4F",["^16","^@","^1G","^5X","^1;","^T","^Q","^4R","^4T","^X","^S"]]],["^1V","malli/error.cljc"],["514c6f7d69d7e40b56fa75bfd1a49a683ca15982","^4C",["^ ","^4D",null,"^4E",["^I",[]],"^4F",["^16","^@","^1G","^5U","~$malli.util"]]],["^1V","metabase/lib/dispatch.cljc"],["914208cd51b78412eff1b402519bbb422845497a","^4C",["^ ","^4D",null,"^4E",["^I",[]],"^4F",["^16","^@","^Y"]]],["^1V","metabase/util/malli.cljc"],["0f9ba23be6bb9fa629617001e985b988d2322b17","^4C",["^ ","^4D",null,"^4E",["^I",[]],"^4F",["^16","^@","^@","^5U","~$malli.destructure","~$malli.error","~$malli.generator","^6Y","^X","^Y"]]],["^1V","goog/labs/useragent/engine.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4C",["^ ","^4D",null,"^4E",["^I",[]],"^4F",["^16","^56","^4J","^4K"]]],["^1V","metabase/lib/query.cljc"],["67977f5ae965e05008d2cb243d9e4898404cb75b","^4C",["^ ","^4D",null,"^4E",["^I",[]],"^4F",["^16","^@","~$metabase.lib.convert","^5X","^1;","^U","^T","^11","^Q","^1<","^15","^X","^6H","^S"]]],["^1V","goog/fs/blob.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4C",["^ ","^4D",null,"^4E",["^I",[]],"^4F",["^16"]]],["^1V","cljs/reader.cljs"],["bc14df6666853ed869d7b88aaa864111c65d0c7f","^4C",["^ ","^4D",null,"^4E",["^I",[]],"^4F",["^16","^@","^57","^61","~$cljs.tools.reader.edn","^62"]]],["^1V","metabase/shared/formatting/internal/numbers_core.cljc"],["f66b4b98917cee5113ea423b71b7f98ae53d8f00","^4C",["^ ","^4D",null,"^4E",["^I",[]],"^4F",["^16","^@","^6D"]]],["^1V","metabase/mbql/schema/helpers.cljc"],["b1f6002b97b59423b504abb666e13c9b0228b768","^4C",["^ ","^4D",null,"^4E",["^I",[]],"^4F",["^16","^@","^1G","^4U","~$schema.core"]]],["^1V","goog/dom/dom.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4C",["^ ","^4D",null,"^4E",["^I",[]],"^4F",["^16","^56","^4W","^6L","~$goog.dom.BrowserFeature","^5?","^5@","^5A","^6O","^6Q","^5E","^5G","^57","^50","^5<","~$goog.string.Unicode","^5I"]]],["^1V","borkdude/dynaload.cljc"],["accd696ba364b850b4d92e38f5a34d0e828a0ad1","^4C",["^ ","^4D",null,"^4E",["^I",[]],"^4F",["^16","^@"]]],["^1V","metabase/util/log.cljs"],["7d8a3bf01eb27c2ba7269dc90dc218e46bcc1d3a","^4C",["^ ","^4D",null,"^4E",["^I",[]],"^4F",["^16","^@","^54","^50","^52","^6S","~$lambdaisland.glogi.console"]]],["^1V","goog/asserts/asserts.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4C",["^ ","^4D",null,"^4E",["^I",[]],"^4F",["^16","~$goog.debug.Error","^5?"]]],["^1V","goog/debug/relativetimeprovider.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4C",["^ ","^4D",null,"^4E",["^I",[]],"^4F",["^16"]]],["^1V","malli/sci.cljc"],["514c6f7d69d7e40b56fa75bfd1a49a683ca15982","^4C",["^ ","^4D",null,"^4E",["^I",[]],"^4F",["^16","^@","~$borkdude.dynaload"]]],["^1V","metabase/lib/schema/expression.cljc"],["f5c5c3ff3dc0f9a8b407cd7d06a68c6787061991","^4C",["^ ","^4D",null,"^4E",["^I",[]],"^4F",["^16","^@","^5X","^1;","^4R","^X","^4U","^S","^4V"]]],["^1V","goog/math/rect.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4C",["^ ","^4D",null,"^4E",["^I",[]],"^4F",["^16","^4W","^5D","^5E","~$goog.math.IRect","^5G"]]],["^1V","flatland/ordered/map.cljs"],["3a9cb9d79e47d77ecd4f4d550371ecf01464c461","^4C",["^ ","^4D",null,"^4E",["^I",[]],"^4F",["^16","^@"]]],["^1V","goog/uri/uri.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4C",["^ ","^4D",null,"^4E",["^I",[]],"^4F",["^16","^56","^4W","~$goog.collections.maps","^50","~$goog.structs","~$goog.uri.utils","~$goog.uri.utils.ComponentIndex","~$goog.uri.utils.StandardQueryParam"]]],["^1V","metabase/util/malli/registry.cljc"],["921d4f259bbe54cbeb6b88ae56937df492bdfb5e","^4C",["^ ","^4D",null,"^4E",["^I",[]],"^4F",["^16","^@","^5U","^5V","^6Y"]]],["^1V","goog/labs/useragent/highentropy/highentropydata.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4C",["^ ","^4D",null,"^4E",["^I",[]],"^4F",["^16","^4L"]]],["^1V","metabase/types/coercion_hierarchies.cljc"],["c3d70ef6080e044d61f13ff6bfd76490e2dcd0ac","^4C",["^ ","^4D",null,"^4E",["^I",[]],"^4F",["^16","^@","^4Y"]]],["^1V","goog/collections/maps.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4C",["^ ","^4D",null,"^4E",["^I",[]],"^4F",["^16"]]],["^1V","metabase/lib/metadata/calculation.cljc"],["bbd3cc646a10312da5b543d7d353519f4c61f931","^4C",["^ ","^4D",null,"^4E",["^I",[]],"^4F",["^16","^@","^1G","^5X","^1;","^U","^4P","^Q","^4R","^4S","^4T","^15","^X","^Y","^6H","^S","^4V"]]],["^1V","goog/debug/divconsole.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4C",["^ ","^4D",null,"^4E",["^I",[]],"^4F",["^16","~$goog.debug.HtmlFormatter","~$goog.dom.DomHelper","^5@","^5A","^6O","^5C","^54","^5<","~$goog.style"]]],["^1V","schema/spec/collection.cljc"],["0dacc3066a87f33088c9a332b6c21e8b0560011c","^4C",["^ ","^4D",null,"^4E",["^I",[]],"^4F",["^16","^@","^66","^67"]]],["^1V","malli/impl/util.cljc"],["514c6f7d69d7e40b56fa75bfd1a49a683ca15982","^4C",["^ ","^4D",null,"^4E",["^I",[]],"^4F",["^16","^@"]]],["^1V","metabase/lib/schema/order_by.cljc"],["3f577f71e4ecba1aa1061f2228f6026ab45312ff","^4C",["^ ","^4D",null,"^4E",["^I",[]],"^4F",["^16","^@","^4S","^6<","^4V"]]],["^1V","schema/utils.cljc"],["0dacc3066a87f33088c9a332b6c21e8b0560011c","^4C",["^ ","^4D",null,"^4E",["^I",[]],"^4F",["^16","^@","^52","^57","^50","^1G"]]],["^1V","metabase/lib/schema/aggregation.cljc"],["ea4a70903cfc3ffeaa60ebdedb5ea00892da4dbe","^4C",["^ ","^4D",null,"^4E",["^I",[]],"^4F",["^16","^@","^1;","^4S","^6<","^X","^4V"]]],["^1V","cljs/core/match.cljs"],["f419c02deee501e9f4b29f81215ba81ffcefe9b6","^4C",["^ ","^4D",null,"^4E",["^I",[]],"^4F",["^16","^@"]]],["^1V","goog/debug/fancywindow.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4C",["^ ","^4D",null,"^4E",["^I",[]],"^4F",["^16","^56","^4W","~$goog.debug.DebugWindow","^7@","^5@","^5A","^6O","^5C","^54","^57","^50","^5<","^5I"]]],["^1V","metabase/util/humanization.cljc"],["ad72f0b43eef83db2dbcd9061adf044b3e8a6ba6","^4C",["^ ","^4D",null,"^4E",["^I",[]],"^4F",["^16","^@","^1G","^Y"]]],["^1V","goog/debug/formatter.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4C",["^ ","^4D",null,"^4E",["^I",[]],"^4F",["^16","~$goog.debug","~$goog.debug.RelativeTimeProvider","^6O","^6K","^6Q","^54","^5<"]]],["^1V","metabase/shared/util/namespaces.cljs"],["00687008abd6eb291bc9d5ff1fff73210e0bbe6e","^4C",["^ ","^4D",null,"^4E",["^I",[]],"^4F",["^16","^@"]]],["^1V","metabase/mbql/util/match/impl.cljc"],["4150e01975339d308f5cfedda77875eda19c030d","^4C",["^ ","^4D",null,"^4E",["^I",[]],"^4F",["^16","^@"]]],["^1V","goog/fs/url.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4C",["^ ","^4D",null,"^4E",["^I",[]],"^4F",["^16"]]],["^1V","goog/base.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4C",["^ ","^4D",null,"^4E",["^I",[]],"^4F",[]]],["^1V","goog/structs/structs.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4C",["^ ","^4D",null,"^4E",["^I",[]],"^4F",["^16","^56","^57"]]],["^1V","cljs/tools/reader/impl/errors.cljs"],["927809dcb44fa726e4969d993e3e733636d95ebb","^4C",["^ ","^4D",null,"^4E",["^I",[]],"^4F",["^16","^@","^5Z","^1G","~$cljs.tools.reader.impl.inspect"]]],["^1V","clojure/string.cljs"],["bc14df6666853ed869d7b88aaa864111c65d0c7f","^4C",["^ ","^4D",null,"^4E",["^I",[]],"^4F",["^16","^@","^50","^62"]]],["^1V","metabase/lib/schema/temporal_bucketing.cljc"],["9cb7bba3e46e1de2fbb37d61df332336da6d9f66","^4C",["^ ","^4D",null,"^4E",["^I",[]],"^4F",["^16","^@","^4Y","^4V"]]],["^1V","metabase/lib/normalize.cljc"],["a044c97fb2dfb3e38178783d6a5d41777a3a9224","^4C",["^ ","^4D",null,"^4E",["^I",[]],"^4F",["^16","^@","^5X","^1;"]]],["^1V","metabase/util.cljc"],["2eb945a6741f1450ecac08a9087b862ce52b9e3a","^4C",["^ ","^4D",null,"^4E",["^I",[]],"^4F",["^16","^@","~$camel-snake-kebab.internals.macros","~$clojure.data","^D","^4Y","^1G","^64","~$flatland.ordered.map","^1@","^X","~$metabase.shared.util.namespaces","~$metabase.util.format","^6H","~$net.cgrand.macrovich","~$weavejester.dependency"]]],["^1V","clojure/test/check/random/longs/bit_count_impl.cljs"],["f33d988fd57bc9c11af1952db81c10f319c91416","^4C",["^ ","^4D",null,"^4E",["^I",[]],"^4F",["^16","^@"]]],["^1V","no/en/core.cljc"],["46f67eeb6381165553708d8db01fec220d5f7054","^4C",["^ ","^4D",null,"^4E",["^I",[]],"^4F",["^16","^@","^1G","~$cljs.reader","~$goog.crypt.base64"]]],["^1V","malli/impl/regex.cljc"],["514c6f7d69d7e40b56fa75bfd1a49a683ca15982","^4C",["^ ","^4D",null,"^4E",["^I",[]],"^4F",["^16","^@","^65"]]],["^1V","camel_snake_kebab/internals/macros.cljc"],["5ae08f83ceb8959971e6334596bff0214bf6fdf2","^4C",["^ ","^4D",null,"^4E",["^I",[]],"^4F",["^16","^@","~$camel-snake-kebab.internals.alter-name","~$camel-snake-kebab.internals.misc"]]],["^1V","metabase/lib/schema/expression/temporal.cljc"],["f1f22c1655e7d335b884a22b010f2b8b08ad1e94","^4C",["^ ","^4D",null,"^4E",["^I",[]],"^4F",["^16","^@","^4Y","^5U","^1;","^4R","^4S","~$metabase.lib.schema.literal","^6<","^4T","^4V","^5K","^5L"]]],["^1V","goog/string/string.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4C",["^ ","^4D",null,"^4E",["^I",[]],"^4F",["^16","^5A","^6Q","^5<","^4J"]]],["^1V","schema/core.cljc"],["0dacc3066a87f33088c9a332b6c21e8b0560011c","^4C",["^ ","^4D",null,"^4E",["^I",[]],"^4F",["^16","^@","^1G","^66","^67","~$schema.spec.leaf","~$schema.spec.variant","~$schema.spec.collection"]]],["^1V","metabase/mbql/schema.cljc"],["c51bf2a180ecbc12d6a1cd42a4049323f46a0085","^4C",["^ ","^4D",null,"^4E",["^I",[]],"^4F",["^16","^@","^5K","^5L","^@","^4Y","~$metabase.mbql.schema.helpers","~$metabase.mbql.schema.macros","^73"]]],["^1V","metabase/mbql/util/match.cljs"],["d65aaa9fbcb7960b90ba7ca97258b1dc8a40be2b","^4C",["^ ","^4D",null,"^4E",["^I",[]],"^4F",["^16","^@","^F","~$metabase.mbql.util.match.impl"]]],["^1V","malli/core.cljc"],["514c6f7d69d7e40b56fa75bfd1a49a683ca15982","^4C",["^ ","^4D",null,"^4E",["^I",[]],"^4F",["^16","^@","^@","~$malli.impl.regex","^65","^5V","~$malli.sci"]]],["^1V","metabase/lib/schema.cljc"],["122fe4013d55087fc7287141eb7dc6f630436424","^4C",["^ ","^4D",null,"^4E",["^I",[]],"^4F",["^16","^@","~$metabase.lib.schema.aggregation","^4R","^4S","~$metabase.lib.schema.expression.arithmetic","~$metabase.lib.schema.expression.conditional","~$metabase.lib.schema.expression.string","~$metabase.lib.schema.expression.temporal","^6W","^1<","~$metabase.lib.schema.join","^7Q","~$metabase.lib.schema.order-by","^6?","~$metabase.lib.schema.template-tag","~$metabase.lib.schema.util","~$metabase.mbql.util.match","^4V"]]],["^1V","clojure/data.cljs"],["bc14df6666853ed869d7b88aaa864111c65d0c7f","^4C",["^ ","^4D",null,"^4E",["^I",[]],"^4F",["^16","^@","^4Y"]]],["^1V","goog/reflect/reflect.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4C",["^ ","^4D",null,"^4E",["^I",[]],"^4F",["^16"]]],["^1V","goog/labs/useragent/util.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4C",["^ ","^4D",null,"^4E",["^I",[]],"^4F",["^16","^4J","^4N"]]],["^1V","metabase/lib/card.cljc"],["f3d7e32c01668fba6d10a6d5ef7f6a94623126e9","^4C",["^ ","^4D",null,"^4E",["^I",[]],"^4F",["^16","^@","^71","^U","^T","~$metabase.lib.query","^1<","^15","^X","^Y","^6G","^S"]]],["^1V","goog/debug/debug.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4C",["^ ","^4D",null,"^4E",["^I",[]],"^4F",["^16","^56","~$goog.debug.errorcontext"]]],["^1V","goog/string/stringbuffer.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4C",["^ ","^4D",null,"^4E",["^I",[]],"^4F",["^16"]]],["^1V","schema/spec/core.cljc"],["0dacc3066a87f33088c9a332b6c21e8b0560011c","^4C",["^ ","^4D",null,"^4E",["^I",[]],"^4F",["^16","^@","^66"]]],["^5J","ttag"],["^4I","shadow.js.shim.module$ttag.js","require","^4C",["^ ","^4D",null,"^4E",["^I",[]],"^4F",["^16"]]],["^1V","goog/math/coordinate.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4C",["^ ","^4D",null,"^4E",["^I",[]],"^4F",["^16","~$goog.math"]]],["^1V","goog/debug/errorcontext.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4C",["^ ","^4D",null,"^4E",["^I",[]],"^4F",["^16"]]],["^1V","cljs/tools/reader/reader_types.cljs"],["927809dcb44fa726e4969d993e3e733636d95ebb","^4C",["^ ","^4D",null,"^4E",["^I",[]],"^4F",["^16","^@","^5[","^50","^62"]]],["^1V","inflections/core.cljc"],["e6e3e2ec7855d2e49589935dde6e494c75e7673f","^4C",["^ ","^4D",null,"^4E",["^I",[]],"^4F",["^16","^@","^1G","^64","~$no.en.core"]]],["^1V","metabase/lib/convert.cljc"],["02b5f0cb2d10c8707d14831510e21c7d65dc15b4","^4C",["^ ","^4D",null,"^4E",["^I",[]],"^4F",["^16","^@","^7G","^4Y","^1G","^5U","^6[","^1@","^5X","^1;","^4P","^Q","^4S","^15","^Y","^6H"]]],["^1V","goog/labs/useragent/useragent.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4C",["^ ","^4D",null,"^4E",["^I",[]],"^4F",["^16","~$goog.flags"]]],["^1V","goog/dom/element.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4C",["^ ","^4D",null,"^4E",["^I",[]],"^4F",["^16","^5?","^5@"]]],["^1V","metabase/lib/join.cljc"],["239ae05e663e7e3d4aaba19cf702d125ffda0dc8","^4C",["^ ","^4D",null,"^4E",["^I",[]],"^4F",["^16","^@","^1G","~$inflections.core","^1@","^4O","^5X","^6:","~$metabase.lib.filter","~$metabase.lib.filter.operator","^1;","^U","^T","^4P","^88","^4Q","^Q","^4R","^4S","^6W","^83","^6X","^15","^87","^X","^Y","^S"]]],["^1V","goog/html/uncheckedconversions.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4C",["^ ","^4D",null,"^4E",["^I",[]],"^4F",["^16","^4W","^6O","^6A","^6P","^5C","^6K","^5;","^5<","^4J"]]],["^1V","metabase/lib/aggregation.cljc"],["69e5afb14bf9268c61c5028c24d98c80e02109fa","^4C",["^ ","^4D",null,"^4E",["^I",[]],"^4F",["^16","^@","^1@","^4O","^5X","^6:","^1;","^U","^T","^4P","^4Q","^Q","^7Z","^4R","^1?","^6X","^15","^X","^Y","^S"]]],["^1V","goog/debug/debugwindow.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4C",["^ ","^4D",null,"^4E",["^I",[]],"^4F",["^16","^7?","^5A","^6O","^5C","^54","^5<","~$goog.structs.CircularBuffer","^5I"]]],["^1V","metabase/mbql/util.cljc"],["2532d5faa94d2a89dd06e529c641d594e298e2aa","^4C",["^ ","^4D",null,"^4E",["^I",[]],"^4F",["^16","^@","^1G","~$metabase.mbql.predicates","^6;","^7U","^87","^X","^73"]]],["^1V","cljs/tools/reader/impl/commons.cljs"],["927809dcb44fa726e4969d993e3e733636d95ebb","^4C",["^ ","^4D",null,"^4E",["^I",[]],"^4F",["^16","^@","^5Y","^5Z","^5["]]],["^1V","metabase/lib/types/isa.cljc"],["e18ef4b76ca36474693ff48f933bf55296452722","^4C",["^ ","^4D",null,"^4E",["^I",[]],"^4F",["^16","^@","^1@","~$metabase.lib.types.constants","^15","^4U"]]],["^1V","goog/dom/htmlelement.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4C",["^ ","^4D",null,"^4E",["^I",[]],"^4F",["^16"]]],["^1V","cljs/core.cljs"],["bc14df6666853ed869d7b88aaa864111c65d0c7f","^4C",["^ ","^4D",null,"^4E",["^I",[]],"^4F",["^16","~$goog.math.Long","~$goog.math.Integer","^50","^57","^56","^4[","^62"]]],["^1V","goog/html/safescript.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4C",["^ ","^4D",null,"^4E",["^I",[]],"^4F",["^16","^5<","^5=","^6B","^4W"]]],["^1V","clojure/test/check/random/longs.cljs"],["f33d988fd57bc9c11af1952db81c10f319c91416","^4C",["^ ","^4D",null,"^4E",["^I",[]],"^4F",["^16","^@","~$clojure.test.check.random.longs.bit-count-impl","^8C","^@"]]],["^1V","goog/log/log.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4C",["^ ","^4D",null,"^4E",["^I",[]],"^4F",["^16","^4W","^7C"]]],["^1V","goog/async/throwexception.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4C",["^ ","^4D",null,"^4E",["^I",[]],"^4F",["^16"]]],["^1V","camel_snake_kebab/internals/alter_name.cljc"],["5ae08f83ceb8959971e6334596bff0214bf6fdf2","^4C",["^ ","^4D",null,"^4E",["^I",[]],"^4F",["^16","^@"]]],["^1V","goog/html/safestylesheet.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4C",["^ ","^4D",null,"^4E",["^I",[]],"^4F",["^16","^5<","^6P","^5=","^57","^4W","^4J"]]],["^1V","goog/math/integer.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4C",["^ ","^4D",null,"^4E",["^I",[]],"^4F",["^16","^5H"]]],["^1V","goog/debug/console.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4C",["^ ","^4D",null,"^4E",["^I",[]],"^4F",["^16","~$goog.debug.TextFormatter","^54"]]],["^1V","lambdaisland/glogi/print.cljs"],["76286836d4172602aa08006b2a754dda736ffe09","^4C",["^ ","^4D",null,"^4E",["^I",[]],"^4F",["^16","^@","^6S","^57"]]],["^1V","goog/dom/browserfeature.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4C",["^ ","^4D",null,"^4E",["^I",[]],"^4F",["^16","^5I"]]],["^1V","metabase/shared/util/internal/time.cljs"],["f92eec2c1c2703a1da00865534752f78d04a0561","^4C",["^ ","^4D",null,"^4E",["^I",[]],"^4F",["^16","^@","^5K","~$metabase.shared.util.internal.time-common"]]],["^1V","clojure/set.cljs"],["bc14df6666853ed869d7b88aaa864111c65d0c7f","^4C",["^ ","^4D",null,"^4E",["^I",[]],"^4F",["^16","^@"]]],["^1V","goog/uri/utils.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4C",["^ ","^4D",null,"^4E",["^I",[]],"^4F",["^16","^4W","^50"]]],["^1V","goog/string/const.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4C",["^ ","^4D",null,"^4E",["^I",[]],"^4F",["^16","^4W","^5="]]],["^1V","metabase/lib/schema/id.cljc"],["7cdfc70702a9a9e04b75ca7c9dc898ddf546f99d","^4C",["^ ","^4D",null,"^4E",["^I",[]],"^4F",["^16","^@","^4R","^6;","^4V"]]],["^1V","metabase/lib/equality.cljc"],["09e4ca6749d64c174c277a2b16f7ad15b5cf6870","^4C",["^ ","^4D",null,"^4E",["^I",[]],"^4F",["^16","^@","^1@","^5X","^1;","^U","^4P","^15","^87"]]],["^1V","goog/dom/vendor.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4C",["^ ","^4D",null,"^4E",["^I",[]],"^4F",["^16","^50","^5I"]]],["^1V","metabase/lib/filter.cljc"],["9834af342c05e488751df884eca79c07eb56f0d2","^4C",["^ ","^4D",null,"^4E",["^I",[]],"^4F",["^16","^@","^1G","^1@","^4O","^6:","^8?","^1;","^U","^T","^4P","^4Q","^Q","^4S","^6W","^1?","^15","^X","^S"]]],["^1V","metabase/lib/schema/literal.cljc"],["f8f31bfaef820ab25b896b49fd404b937d0df64e","^4C",["^ ","^4D",null,"^4E",["^I",[]],"^4F",["^16","^@","^5U","^4R","^4S","^6<","^4V"]]],["^1V","metabase/lib/hierarchy.cljc"],["c9d228603522de5c85546fb645c59736d4eb94d2","^4C",["^ ","^4D",null,"^4E",["^I",[]],"^4F",["^16","^@"]]],["^1V","metabase/mbql/predicates.cljc"],["20ab1a5ccd943c35c646c5f7396ea40f9bfa7ac4","^4C",["^ ","^4D",null,"^4E",["^I",[]],"^4F",["^16","^@","^6;","^73"]]],["^1V","clojure/test/check/results.cljc"],["f33d988fd57bc9c11af1952db81c10f319c91416","^4C",["^ ","^4D",null,"^4E",["^I",[]],"^4F",["^16","^@"]]],["^5J","crc-32"],["^51","shadow.js.shim.module$crc_32.js","require","^4C",["^ ","^4D",null,"^4E",["^I",[]],"^4F",["^16"]]],["^1V","metabase/lib/schema/join.cljc"],["924e0ca4abbab776fa05357d6d22bafb8a596648","^4C",["^ ","^4D",null,"^4E",["^I",[]],"^4F",["^16","^@","^4R","^4S","^X","^4V"]]],["^1V","metabase/shared/util/time.cljc"],["09f2b7188b5a59daedb8b53670f692c598e5d2a4","^4C",["^ ","^4D",null,"^4E",["^I",[]],"^4F",["^16","^@","~$metabase.shared.util.internal.time","^8G","^7I","^Y"]]],["^1V","goog/crypt/base64.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4C",["^ ","^4D",null,"^4E",["^I",[]],"^4F",["^16","^4W","~$goog.crypt","^4J","^5I","~$goog.userAgent.product"]]]]],"~:clj-info",["^ ","jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/analyzer/impl.cljc",1689947050000,"jar:file:/root/.m2/repository/instaparse/instaparse/1.4.12/instaparse-1.4.12.jar!/instaparse/line_col.clj",1689946146000,"jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/source_map/base64_vlq.clj",1689947050000,"jar:file:/root/.m2/repository/instaparse/instaparse/1.4.12/instaparse-1.4.12.jar!/instaparse/viz.clj",1689946146000,"jar:file:/root/.m2/repository/org/clojure/tools.namespace/1.4.4/tools.namespace-1.4.4.jar!/clojure/tools/namespace/parse.cljc",1689946139000,"jar:file:/root/.m2/repository/weavejester/dependency/0.2.1/dependency-0.2.1.jar!/weavejester/dependency.cljc",1689946093000,"jar:file:/root/.m2/repository/instaparse/instaparse/1.4.12/instaparse-1.4.12.jar!/instaparse/transform.clj",1689946146000,"file:/home/gmrworkspace/dashboard/src/metabase/lib/schema/order_by.cljc",1690286812000,"jar:file:/root/.m2/repository/ring/ring-codec/1.2.0/ring-codec-1.2.0.jar!/ring/util/codec.clj",1689946172000,"file:/home/gmrworkspace/dashboard/src/metabase/lib/hierarchy.cljc",1690286812000,"jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/instant.clj",1689947050000,"jar:file:/root/.m2/repository/org/clojure/tools.reader/1.3.6/tools.reader-1.3.6.jar!/clojure/tools/reader/default_data_readers.clj",1689946174000,"file:/home/gmrworkspace/dashboard/src/metabase/models/dispatch.clj",1690286812000,"jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/pprint.cljc",1689947050000,"file:/home/gmrworkspace/dashboard/src/metabase/lib/schema/filter.cljc",1690286812000,"file:/home/gmrworkspace/dashboard/shared/src/metabase/mbql/util.cljc",1692013156305,"jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/externs.clj",1689947050000,"file:/home/gmrworkspace/dashboard/shared/src/metabase/mbql/util/match.clj",1690286812000,"jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/vendor/clojure/tools/reader/default_data_readers.clj",1689947050000,"file:/home/gmrworkspace/dashboard/shared/src/metabase/mbql/schema/helpers.cljc",1692013156305,"jar:file:/root/.m2/repository/prismatic/schema/1.4.1/schema-1.4.1.jar!/schema/core.cljc",1689946172000,"file:/home/gmrworkspace/dashboard/shared/src/metabase/shared/util/i18n.clj",1690286812000,"jar:file:/root/.m2/repository/org/clojure/tools.reader/1.3.6/tools.reader-1.3.6.jar!/clojure/tools/reader/edn.clj",1689946174000,"jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/compiler.cljc",1689947050000,"jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/reader.clj",1689947050000,"jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/env.cljc",1689947050000,"jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/analyzer/impl/namespaces.cljc",1689947050000,"file:/home/gmrworkspace/dashboard/src/metabase/lib/metadata.cljc",1690286812000,"jar:file:/root/.m2/repository/prismatic/schema/1.4.1/schema-1.4.1.jar!/schema/macros.clj",1689946172000,"file:/home/gmrworkspace/dashboard/src/metabase/util/i18n/plural.clj",1690286813000,"jar:file:/root/.m2/repository/metosin/malli/0.10.2/malli-0.10.2.jar!/malli/core.cljc",1689946170000,"jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/source_map.clj",1689947050000,"jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/util.cljc",1689947050000,"file:/home/gmrworkspace/dashboard/src/metabase/util.cljc",1690286813000,"jar:file:/root/.m2/repository/nano-id/nano-id/1.0.0/nano-id-1.0.0.jar!/nano_id/core.cljc",1689946171000,"file:/home/gmrworkspace/dashboard/src/metabase/lib/dispatch.cljc",1690286812000,"jar:file:/root/.m2/repository/io/github/camsaul/toucan2/1.0.520/toucan2-1.0.520.jar!/toucan2/core.clj",1689946166000,"file:/home/gmrworkspace/dashboard/src/metabase/lib/schema/common.cljc",1690286812000,"file:/home/gmrworkspace/dashboard/src/metabase/plugins/classloader.clj",1692013156125,"jar:file:/root/.m2/repository/medley/medley/1.4.0/medley-1.4.0.jar!/medley/core.cljc",1689946185000,"jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/analyzer.cljc",1689947050000,"file:/home/gmrworkspace/dashboard/src/metabase/lib/schema/util.cljc",1690286812000,"jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/analyzer/passes.cljc",1689947050000,"jar:file:/root/.m2/repository/org/clojure/test.check/1.1.1/test.check-1.1.1.jar!/clojure/test/check/random.clj",1689946177000,"jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/vendor/clojure/data/json.clj",1689947050000,"file:/home/gmrworkspace/dashboard/src/metabase/util/format.cljc",1690286813000,"file:/home/gmrworkspace/dashboard/src/metabase/lib/temporal_bucket.cljc",1690286812000,"jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/source_map/base64.clj",1689947050000,"jar:file:/root/.m2/repository/riddley/riddley/0.2.0/riddley-0.2.0.jar!/riddley/walk.clj",1689946160000,"file:/home/gmrworkspace/dashboard/src/metabase/lib/schema/ref.cljc",1690286812000,"jar:file:/root/.m2/repository/instaparse/instaparse/1.4.12/instaparse-1.4.12.jar!/instaparse/reduction.clj",1689946146000,"jar:file:/root/.m2/repository/org/tcrawley/dynapath/1.1.0/dynapath-1.1.0.jar!/dynapath/util.clj",1689946174000,"jar:file:/root/.m2/repository/camel-snake-kebab/camel-snake-kebab/0.4.3/camel-snake-kebab-0.4.3.jar!/camel_snake_kebab/internals/macros.cljc",1689946178000,"file:/home/gmrworkspace/dashboard/shared/src/metabase/mbql/util/match/impl.cljc",1690286812000,"jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/vendor/clojure/tools/reader/reader_types.clj",1689947050000,"jar:file:/root/.m2/repository/instaparse/instaparse/1.4.12/instaparse-1.4.12.jar!/instaparse/auto_flatten_seq.clj",1689946146000,"jar:file:/root/.m2/repository/instaparse/instaparse/1.4.12/instaparse-1.4.12.jar!/instaparse/core.clj",1689946146000,"jar:file:/root/.m2/repository/metosin/malli/0.10.2/malli-0.10.2.jar!/malli/generator.cljc",1689946170000,"file:/home/gmrworkspace/dashboard/src/metabase/lib/schema/id.cljc",1690286812000,"jar:file:/root/.m2/repository/org/clojure/core.cache/1.0.225/core.cache-1.0.225.jar!/clojure/core/cache.clj",1689946183000,"file:/home/gmrworkspace/dashboard/src/metabase/lib/schema/expression.cljc",1690286812000,"jar:file:/root/.m2/repository/metosin/malli/0.10.2/malli-0.10.2.jar!/malli/sci.cljc",1689946170000,"jar:file:/root/.m2/repository/potemkin/potemkin/0.4.6/potemkin-0.4.6.jar!/potemkin/types.clj",1689946176000,"file:/home/gmrworkspace/dashboard/src/metabase/lib/schema/template_tag.cljc",1690286812000,"jar:file:/root/.m2/repository/org/clojure/test.check/1.1.1/test.check-1.1.1.jar!/clojure/test/check/properties.cljc",1689946177000,"jar:file:/root/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/set.clj",1689946092000,"jar:file:/root/.m2/repository/org/clojure/math.numeric-tower/0.0.5/math.numeric-tower-0.0.5.jar!/clojure/math/numeric_tower.clj",1689946148000,"jar:file:/root/.m2/repository/net/cgrand/macrovich/0.2.1/macrovich-0.2.1.jar!/net/cgrand/macrovich.cljc",1689946165000,"jar:file:/root/.m2/repository/colorize/colorize/0.1.1/colorize-0.1.1.jar!/colorize/core.clj",1689946104000,"jar:file:/root/.m2/repository/borkdude/dynaload/0.3.5/dynaload-0.3.5.jar!/borkdude/dynaload.cljc",1689946165000,"jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/vendor/clojure/tools/reader/impl/inspect.clj",1689947050000,"file:/home/gmrworkspace/dashboard/src/metabase/lib/options.cljc",1692013156125,"jar:file:/root/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/string.clj",1689946092000,"jar:file:/root/.m2/repository/potemkin/potemkin/0.4.6/potemkin-0.4.6.jar!/potemkin.clj",1689946176000,"jar:file:/root/.m2/repository/instaparse/instaparse/1.4.12/instaparse-1.4.12.jar!/instaparse/failure.clj",1689946146000,"jar:file:/root/.m2/repository/prismatic/schema/1.4.1/schema-1.4.1.jar!/schema/spec/variant.cljc",1689946172000,"jar:file:/root/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/core.clj",1689946092000,"file:/home/gmrworkspace/dashboard/src/metabase/lib/metadata/protocols.cljc",1690286812000,"file:/home/gmrworkspace/dashboard/src/metabase/util/i18n/impl.clj",1692013156125,"file:/home/gmrworkspace/dashboard/src/metabase/lib/metadata/calculation.cljc",1690286812000,"jar:file:/root/.m2/repository/org/clojure/tools.namespace/1.4.4/tools.namespace-1.4.4.jar!/clojure/tools/namespace/dependency.cljc",1689946139000,"jar:file:/root/.m2/repository/prismatic/schema/1.4.1/schema-1.4.1.jar!/schema/spec/leaf.cljc",1689946172000,"jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/analyzer/passes/and_or.cljc",1689947050000,"jar:file:/root/.m2/repository/org/clojure/test.check/1.1.1/test.check-1.1.1.jar!/clojure/test/check.cljc",1689946177000,"file:/home/gmrworkspace/dashboard/src/metabase/lib/util.cljc",1690286812000,"jar:file:/root/.m2/repository/riddley/riddley/0.2.0/riddley-0.2.0.jar!/riddley/compiler.clj",1689946160000,"file:/home/gmrworkspace/dashboard/shared/src/metabase/mbql/predicates.cljc",1690286812000,"file:/home/gmrworkspace/dashboard/src/metabase/lib/types/constants.cljc",1690286812000,"jar:file:/root/.m2/repository/org/clojure/core.memoize/1.0.257/core.memoize-1.0.257.jar!/clojure/core/memoize.clj",1689946178000,"jar:file:/root/.m2/repository/metosin/malli/0.10.2/malli-0.10.2.jar!/malli/destructure.cljc",1689946170000,"jar:file:/root/.m2/repository/instaparse/instaparse/1.4.12/instaparse-1.4.12.jar!/instaparse/print.clj",1689946146000,"jar:file:/root/.m2/repository/org/clojure/tools.namespace/1.4.4/tools.namespace-1.4.4.jar!/clojure/tools/namespace/track.cljc",1689946139000,"file:/home/gmrworkspace/dashboard/src/metabase/lib/schema/aggregation.cljc",1690286812000,"jar:file:/root/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/pprint.clj",1689946092000,"jar:file:/root/.m2/repository/org/clojure/java.classpath/1.0.0/java.classpath-1.0.0.jar!/clojure/java/classpath.clj",1689946162000,"file:/home/gmrworkspace/dashboard/src/metabase/lib/equality.cljc",1690286812000,"jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/js_deps.cljc",1689947050000,"jar:file:/root/.m2/repository/metosin/malli/0.10.2/malli-0.10.2.jar!/malli/impl/regex.cljc",1689946170000,"jar:file:/root/.m2/repository/cheshire/cheshire/5.11.0/cheshire-5.11.0.jar!/cheshire/factory.clj",1689946173000,"jar:file:/root/.m2/repository/org/clojure/tools.reader/1.3.6/tools.reader-1.3.6.jar!/clojure/tools/reader/impl/errors.clj",1689946174000,"jar:file:/root/.m2/repository/metosin/malli/0.10.2/malli-0.10.2.jar!/malli/experimental.cljc",1689946170000,"jar:file:/root/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/walk.clj",1689946092000,"jar:file:/root/.m2/repository/org/clojure/tools.reader/1.3.6/tools.reader-1.3.6.jar!/clojure/tools/reader.clj",1689946174000,"file:/home/gmrworkspace/dashboard/src/metabase/lib/common.cljc",1690286812000,"jar:file:/root/.m2/repository/prismatic/schema/1.4.1/schema-1.4.1.jar!/schema/spec/core.cljc",1689946172000,"jar:file:/root/.m2/repository/org/clojure/test.check/1.1.1/test.check-1.1.1.jar!/clojure/test/check/generators.cljc",1689946177000,"jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/core.cljc",1689947050000,"jar:file:/root/.m2/repository/cheshire/cheshire/5.11.0/cheshire-5.11.0.jar!/cheshire/generate.clj",1689946173000,"jar:file:/root/.m2/repository/metosin/malli/0.10.2/malli-0.10.2.jar!/malli/experimental/time.cljc",1689946170000,"jar:file:/root/.m2/repository/org/clojure/tools.reader/1.3.6/tools.reader-1.3.6.jar!/clojure/tools/reader/reader_types.clj",1689946174000,"file:/home/gmrworkspace/dashboard/shared/src/metabase/mbql/schema.cljc",1692013156305,"jar:file:/root/.m2/repository/cheshire/cheshire/5.11.0/cheshire-5.11.0.jar!/cheshire/parse.clj",1689946173000,"file:/home/gmrworkspace/dashboard/src/metabase/util/i18n.clj",1692013156125,"jar:file:/root/.m2/repository/instaparse/instaparse/1.4.12/instaparse-1.4.12.jar!/instaparse/cfg.clj",1689946146000,"file:/home/gmrworkspace/dashboard/src/metabase/lib/filter/operator.cljc",1690286812000,"jar:file:/root/.m2/repository/cheshire/cheshire/5.11.0/cheshire-5.11.0.jar!/cheshire/core.clj",1689946173000,"jar:file:/root/.m2/repository/metosin/malli/0.10.2/malli-0.10.2.jar!/malli/impl/util.cljc",1689946170000,"jar:file:/root/.m2/repository/metosin/malli/0.10.2/malli-0.10.2.jar!/malli/registry.cljc",1689946170000,"jar:file:/root/.m2/repository/instaparse/instaparse/1.4.12/instaparse-1.4.12.jar!/instaparse/gll.clj",1689946146000,"jar:file:/root/.m2/repository/metosin/malli/0.10.2/malli-0.10.2.jar!/malli/instrument.clj",1689946170000,"jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/vendor/clojure/tools/reader.clj",1689947050000,"jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/spec/gen/alpha.cljc",1689947050000,"file:/home/gmrworkspace/dashboard/src/metabase/lib/ref.cljc",1690286812000,"file:/home/gmrworkspace/dashboard/src/metabase/lib/types/isa.cljc",1690286812000,"jar:file:/root/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/edn.clj",1689946092000,"jar:file:/root/.m2/repository/nano-id/nano-id/1.0.0/nano-id-1.0.0.jar!/nano_id/random.cljc",1689946171000,"file:/home/gmrworkspace/dashboard/src/metabase/lib/filter.cljc",1690286812000,"jar:file:/root/.m2/repository/environ/environ/1.2.0/environ-1.2.0.jar!/environ/core.cljc",1689946163000,"jar:file:/root/.m2/repository/prismatic/schema/1.4.1/schema-1.4.1.jar!/schema/spec/collection.cljc",1689946172000,"jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/vendor/clojure/tools/reader/impl/errors.clj",1689947050000,"jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/tagged_literals.cljc",1689947050000,"file:/home/gmrworkspace/dashboard/src/metabase/lib/schema.cljc",1692013156125,"jar:file:/root/.m2/repository/instaparse/instaparse/1.4.12/instaparse-1.4.12.jar!/instaparse/repeat.clj",1689946146000,"jar:file:/root/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/java/io.clj",1689946092000,"jar:file:/root/.m2/repository/org/clojure/test.check/1.1.1/test.check-1.1.1.jar!/clojure/test/check/results.cljc",1689946177000,"jar:file:/root/.m2/repository/com/lambdaisland/glogi/1.2.164/glogi-1.2.164.jar!/lambdaisland/glogi.clj",1689947043000,"jar:file:/root/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/instant.clj",1689946092000,"file:/home/gmrworkspace/dashboard/shared/src/metabase/shared/util/namespaces.clj",1690286812000,"jar:file:/root/.m2/repository/org/clojure/tools.namespace/1.4.4/tools.namespace-1.4.4.jar!/clojure/tools/namespace/file.clj",1689946139000,"jar:file:/root/.m2/repository/org/clojure/core.match/1.0.1/core.match-1.0.1.jar!/cljs/core/match.clj",1689946174000,"jar:file:/root/.m2/repository/org/clojure/spec.alpha/0.3.218/spec.alpha-0.3.218.jar!/clojure/spec/gen/alpha.clj",1689946117000,"file:/home/gmrworkspace/dashboard/src/metabase/lib/schema/join.cljc",1690286812000,"jar:file:/root/.m2/repository/metosin/malli/0.10.2/malli-0.10.2.jar!/malli/error.cljc",1689946170000,"file:/home/gmrworkspace/dashboard/shared/src/metabase/mbql/schema/macros.clj",1690286812000,"jar:file:/root/.m2/repository/prismatic/schema/1.4.1/schema-1.4.1.jar!/schema/utils.cljc",1689946172000,"file:/home/gmrworkspace/dashboard/src/metabase/util/malli/registry.cljc",1690286813000,"file:/home/gmrworkspace/dashboard/src/metabase/config.clj",1692013154929,"file:/home/gmrworkspace/dashboard/src/metabase/util/log.clj",1690286813000,"file:/home/gmrworkspace/dashboard/src/metabase/util/malli.cljc",1690286813000,"jar:file:/root/.m2/repository/org/clojure/test.check/1.1.1/test.check-1.1.1.jar!/clojure/test/check/rose_tree.cljc",1689946177000,"jar:file:/root/.m2/repository/org/clojure/tools.reader/1.3.6/tools.reader-1.3.6.jar!/clojure/tools/reader/impl/inspect.clj",1689946174000,"jar:file:/root/.m2/repository/instaparse/instaparse/1.4.12/instaparse-1.4.12.jar!/instaparse/combinators_source.clj",1689946146000,"jar:file:/root/.m2/repository/instaparse/instaparse/1.4.12/instaparse-1.4.12.jar!/instaparse/abnf.clj",1689946146000,"jar:file:/root/.m2/repository/org/clojure/tools.namespace/1.4.4/tools.namespace-1.4.4.jar!/clojure/tools/namespace/find.clj",1689946139000,"jar:file:/root/.m2/repository/org/tcrawley/dynapath/1.1.0/dynapath-1.1.0.jar!/dynapath/dynamic_classpath.clj",1689946174000,"file:/home/gmrworkspace/dashboard/src/metabase/lib/schema/temporal_bucketing.cljc",1690286812000,"jar:file:/root/.m2/repository/org/clojure/tools.reader/1.3.6/tools.reader-1.3.6.jar!/cljs/tools/reader/reader_types.clj",1689946174000,"jar:file:/root/.m2/repository/cheshire/cheshire/5.11.0/cheshire-5.11.0.jar!/cheshire/generate_seq.clj",1689946173000,"file:/home/gmrworkspace/dashboard/src/metabase/lib/schema/mbql_clause.cljc",1690286812000,"jar:file:/root/.m2/repository/metosin/malli/0.10.2/malli-0.10.2.jar!/malli/util.cljc",1689946170000,"file:/home/gmrworkspace/dashboard/src/metabase/util/jvm.clj",1692013156125],"~:analyzer",["^ ","^3",null,"^4",["^ "],"^5",["^ ","^6","Method implementations for a stage of a query.","^7","metabase/lib/stage.cljc","^8",1,"^9",5,"^:",1,"^;",23],"^<",["^ ","^=","^>","^?","^@","^A","^B","^C","^D","^E","^F"],"^G",null,"^H",["^I",[]],"^J","^K","^L",["^ "],"^O",null,"^P",["^ ","^Q","^Q","^R","^S","^T","^T","^U","^U","^V","^V","^W","^X","~$u","^Y","^Z","^Z","^[","^V","^10","^U","^11","^11","^@","^@","^12","^13","^14","^14","^15","^15","^16","^16","^17","^18","^19","^Q","^1:","^1;","^1<","^1<","^1=","^1>","^1?","^1?","~$m","^1@","^Y","^Y","^X","^X","^1A","^15","^1B","^Z","^1C","^11","^S","^S","^1>","^1>","^1D","^T","^1E","^1?","^1F","^1G","^1;","^1;","^1H","^1<","^1G","^1G","^18","^18","^1I","^14","^13","^13","^1@","^1@"],"^1J",["^I",["^1K"]],"~:shadow/js-access-global",["^I",["Error"]],"^1L",null,"~:defs",["^ ","~$implicitly-joinable-columns",["^ ","~:protocol-inline",null,"^5",["^ ","^7","metabase/lib/stage.cljc","^8",190,"^9",8,"^:",190,"^;",35,"~:private",true,"~:arglists",["^1O",["~$quote",["^1O",[["~$query","~$stage-number","~$column-metadatas","~$unique-name-fn"]]]]],"^6","Columns that are implicitly joinable from some other columns in `column-metadatas`. To be joinable, the column has to\n  have appropriate FK metadata, i.e. have an `:fk-target-field-id` pointing to another Field. (I think we only include\n  this information for Databases that support FKs and joins, so I don't think we need to do an additional DB feature\n  check here.)\n\n  This does not include columns from any Tables that are already explicitly joined, and does not include multiple\n  versions of a column when there are multiple pathways to it (i.e. if there is more than one FK to a Table). This\n  behavior matches how things currently work in MLv1, at least for order by; we can adjust as needed in the future if\n  it turns out we do need that stuff.\n\n  Does not include columns that would be implicitly joinable via multiple hops."],"^<B",true,"^J","^2D","^7","metabase/lib/stage.cljc","^;",35,"~:method-params",["^1O",[["^<E","^<F","^<G","^<H"]]],"~:protocol-impl",null,"~:arglists-meta",["^1O",[null,null]],"^9",1,"~:variadic?",false,"^8",190,"~:ret-tag","~$any","^:",190,"~:max-fixed-arity",4,"~:fn-var",true,"^<C",["^1O",["^<D",["^1O",[["^<E","^<F","^<G","^<H"]]]]],"^6","Columns that are implicitly joinable from some other columns in `column-metadatas`. To be joinable, the column has to\n  have appropriate FK metadata, i.e. have an `:fk-target-field-id` pointing to another Field. (I think we only include\n  this information for Databases that support FKs and joins, so I don't think we need to do an additional DB feature\n  check here.)\n\n  This does not include columns from any Tables that are already explicitly joined, and does not include multiple\n  versions of a column when there are multiple pathways to it (i.e. if there is more than one FK to a Table). This\n  behavior matches how things currently work in MLv1, at least for order by; we can adjust as needed in the future if\n  it turns out we do need that stuff.\n\n  Does not include columns that would be implicitly joinable via multiple hops."],"~$ensure-previous-stages-have-metadata",["^ ","~:schema",["~:=>",["~:cat","~:metabase.lib.schema/query","~:int"],"^<U"],"~:validate!","id64472","^<A",null,"^5",["^ ","^<R",["^<S",["^<T","^<U","^<V"],"^<U"],"^<W","id64472","^7","metabase/lib/stage.cljc","^;",46,"^9",10,"~:raw-arglists",["^1O",["^<D",["^1O",[["^<E","~:-","^<U","^<F","~:-","^<V"]]]]],"^8",41,"^:",41,"^<C",["^1O",["^<D",["^1O",[["^<E","^<F"]]]]],"^6","Inputs: [query :- :metabase.lib.schema/query stage-number :- :int]\n  Return: :metabase.lib.schema/query\n          \n\n  Recursively calculate the metadata for the previous stages and add it to them, we'll need it for metadata\n  calculations for [[lib.metadata.calculation/returned-columns]] and [[lib.metadata.calculation/visible-columns]], and\n  we don't want to have to calculate it more than once..."],"^J","^2Q","^7","metabase/lib/stage.cljc","^;",46,"^<I",["^1O",[["^<E","^<F"]]],"^<J",null,"^<K",["^1O",[null,null]],"^9",1,"^<L",false,"^<X",["^1O",["^<D",["^1O",[["^<E","~:-","^<U","^<F","~:-","^<V"]]]]],"^8",41,"^<M",["^I",[null,"^<N"]],"^:",41,"^<O",2,"^<P",true,"^<C",["^1O",["^<D",["^1O",[["^<E","^<F"]]]]],"^6","Inputs: [query :- :metabase.lib.schema/query stage-number :- :int]\n  Return: :metabase.lib.schema/query\n          \n\n  Recursively calculate the metadata for the previous stages and add it to them, we'll need it for metadata\n  calculations for [[lib.metadata.calculation/returned-columns]] and [[lib.metadata.calculation/visible-columns]], and\n  we don't want to have to calculate it more than once..."],"~$summary-columns",["^ ","^<R",["^<S",["^<T","^<U","^<V","~$fn?"],["~:maybe","~$lib.metadata.calculation/ColumnsWithUniqueAliases"]],"^<W","id64597","^<A",null,"^5",["^ ","^<R",["^<S",["^<T","^<U","^<V","^<Z"],["^<[","^=0"]],"^<W","id64597","^<B",true,"^7","metabase/lib/stage.cljc","^;",35,"^9",20,"^<X",["^1O",["^<D",["^1O",[["^<E","~:-","^<U","^<F","~:-","^<V","^<H","~:-","^<Z"]]]]],"^8",123,"^:",123,"^<C",["^1O",["^<D",["^1O",[["^<E","^<F","^<H"]]]]],"^6","Inputs: [query :- :metabase.lib.schema/query stage-number :- :int unique-name-fn :- fn?]\n  Return: [:maybe lib.metadata.calculation/ColumnsWithUniqueAliases]"],"^<B",true,"^J","^2N","^7","metabase/lib/stage.cljc","^;",35,"^<I",["^1O",[["^<E","^<F","^<H"]]],"^<J",null,"^<K",["^1O",[null,null]],"^9",1,"^<L",false,"^<X",["^1O",["^<D",["^1O",[["^<E","~:-","^<U","^<F","~:-","^<V","^<H","~:-","^<Z"]]]]],"^8",123,"^<M",["^I",[null,"~$clj-nil"]],"^:",123,"^<O",3,"^<P",true,"^<C",["^1O",["^<D",["^1O",[["^<E","^<F","^<H"]]]]],"^6","Inputs: [query :- :metabase.lib.schema/query stage-number :- :int unique-name-fn :- fn?]\n  Return: [:maybe lib.metadata.calculation/ColumnsWithUniqueAliases]"],"~$drop-stage",["^ ","^<R",["^<S",["^<T","~:any"],"^<U"],"^<W","id64914","^<A",null,"^5",["^ ","^<R",["^<S",["^<T","^=3"],"^<U"],"^<W","id64914","^7","metabase/lib/stage.cljc","^;",20,"^9",10,"^<X",["^1O",["^<D",["^1O",[["^<E"]]]]],"^8",390,"^:",390,"^<C",["^1O",["^<D",["^1O",[["^<E"]]]]],"^6","Inputs: [query]\n  Return: :metabase.lib.schema/query\n          \n\n  Drops the final stage in the pipeline"],"^J","^2;","^7","metabase/lib/stage.cljc","^;",20,"^<I",["^1O",[["^<E"]]],"^<J",null,"^<K",["^1O",[null,null]],"^9",1,"^<L",false,"^<X",["^1O",["^<D",["^1O",[["^<E"]]]]],"^8",390,"^<M",["^I",["~$clj","^<N"]],"^:",390,"^<O",1,"^<P",true,"^<C",["^1O",["^<D",["^1O",[["^<E"]]]]],"^6","Inputs: [query]\n  Return: :metabase.lib.schema/query\n          \n\n  Drops the final stage in the pipeline"],"~$append-stage",["^ ","^<R",["^<S",["^<T","^=3"],"^<U"],"^<W","id64908","^<A",null,"^5",["^ ","^<R",["^<S",["^<T","^=3"],"^<U"],"^<W","id64908","^7","metabase/lib/stage.cljc","^;",22,"^9",10,"^<X",["^1O",["^<D",["^1O",[["^<E"]]]]],"^8",385,"^:",385,"^<C",["^1O",["^<D",["^1O",[["^<E"]]]]],"^6","Inputs: [query]\n  Return: :metabase.lib.schema/query\n          \n\n  Adds a new blank stage to the end of the pipeline"],"^J","^3Y","^7","metabase/lib/stage.cljc","^;",22,"^<I",["^1O",[["^<E"]]],"^<J",null,"^<K",["^1O",[null,null]],"^9",1,"^<L",false,"^<X",["^1O",["^<D",["^1O",[["^<E"]]]]],"^8",385,"^<M",["^I",["^=4","^<N"]],"^:",385,"^<O",1,"^<P",true,"^<C",["^1O",["^<D",["^1O",[["^<E"]]]]],"^6","Inputs: [query]\n  Return: :metabase.lib.schema/query\n          \n\n  Adds a new blank stage to the end of the pipeline"],"~$display-name-parts",["^ ","^5",["^ ","^7","metabase/lib/stage.cljc","^8",362,"^9",16,"^:",362,"^;",34,"^<B",true],"^<B",true,"^J","^2P","^7","metabase/lib/stage.cljc","^;",34,"^9",1,"^8",362,"^:",362,"~:tag","~$cljs.core/IVector"],"~$expressions-metadata",["^ ","^<R",["^<S",["^<T","^<U","^<V","^<Z"],["^<[","^=0"]],"^<W","id64641","^<A",null,"^5",["^ ","^<R",["^<S",["^<T","^<U","^<V","^<Z"],["^<[","^=0"]],"^<W","id64641","^<B",true,"^7","metabase/lib/stage.cljc","^;",40,"^9",20,"^<X",["^1O",["^<D",["^1O",[["^<E","~:-","^<U","^<F","~:-","^<V","^<H","~:-","^<Z"]]]]],"^8",177,"^:",177,"^<C",["^1O",["^<D",["^1O",[["^<E","^<F","^<H"]]]]],"^6","Inputs: [query :- :metabase.lib.schema/query stage-number :- :int unique-name-fn :- fn?]\n  Return: [:maybe lib.metadata.calculation/ColumnsWithUniqueAliases]"],"^<B",true,"^J","^3>","^7","metabase/lib/stage.cljc","^;",40,"^<I",["^1O",[["^<E","^<F","^<H"]]],"^<J",null,"^<K",["^1O",[null,null]],"^9",1,"^<L",false,"^<X",["^1O",["^<D",["^1O",[["^<E","~:-","^<U","^<F","~:-","^<V","^<H","~:-","^<Z"]]]]],"^8",177,"^<M",["^I",[null,"^=1"]],"^:",177,"^<O",3,"^<P",true,"^<C",["^1O",["^<D",["^1O",[["^<E","^<F","^<H"]]]]],"^6","Inputs: [query :- :metabase.lib.schema/query stage-number :- :int unique-name-fn :- fn?]\n  Return: [:maybe lib.metadata.calculation/ColumnsWithUniqueAliases]"],"~$mark-selected-breakouts",["^ ","^<A",null,"^5",["^ ","^7","metabase/lib/stage.cljc","^8",302,"^9",8,"^:",302,"^;",31,"^<B",true,"^<C",["^1O",["^<D",["^1O",[["^<E","^<F","~$columns"]]]]]],"^<B",true,"^J","^3Q","^7","metabase/lib/stage.cljc","^;",31,"^<I",["^1O",[["^<E","^<F","^=;"]]],"^<J",null,"^<K",["^1O",[null,null]],"^9",1,"^<L",false,"^8",302,"^<M",["^I",[null,"^32"]],"^:",302,"^<O",3,"^<P",true,"^<C",["^1O",["^<D",["^1O",[["^<E","^<F","^=;"]]]]]],"~$aggregations-columns",["^ ","^<R",["^<S",["^<T","^<U","^<V","^<Z"],["^<[","^=0"]],"^<W","id64518","^<A",null,"^5",["^ ","^<R",["^<S",["^<T","^<U","^<V","^<Z"],["^<[","^=0"]],"^<W","id64518","^<B",true,"^7","metabase/lib/stage.cljc","^;",40,"^9",20,"^<X",["^1O",["^<D",["^1O",[["^<E","~:-","^<U","^<F","~:-","^<V","^<H","~:-","^<Z"]]]]],"^8",91,"^:",91,"^<C",["^1O",["^<D",["^1O",[["^<E","^<F","^<H"]]]]],"^6","Inputs: [query :- :metabase.lib.schema/query stage-number :- :int unique-name-fn :- fn?]\n  Return: [:maybe lib.metadata.calculation/ColumnsWithUniqueAliases]"],"^<B",true,"^J","^37","^7","metabase/lib/stage.cljc","^;",40,"^<I",["^1O",[["^<E","^<F","^<H"]]],"^<J",null,"^<K",["^1O",[null,null]],"^9",1,"^<L",false,"^<X",["^1O",["^<D",["^1O",[["^<E","~:-","^<U","^<F","~:-","^<V","^<H","~:-","^<Z"]]]]],"^8",91,"^<M",["^I",[null,"^=1"]],"^:",91,"^<O",3,"^<P",true,"^<C",["^1O",["^<D",["^1O",[["^<E","^<F","^<H"]]]]],"^6","Inputs: [query :- :metabase.lib.schema/query stage-number :- :int unique-name-fn :- fn?]\n  Return: [:maybe lib.metadata.calculation/ColumnsWithUniqueAliases]"],"~$ref-to?",["^ ","^<A",null,"^5",["^ ","^7","metabase/lib/stage.cljc","^8",290,"^9",8,"^:",290,"^;",15,"^<B",true,"^<C",["^1O",["^<D",["^1O",[[["~$tag","~$_opts","~$pointer","^1Q","~$clause"],"~$column"]]]]]],"^<B",true,"^J","^4;","^7","metabase/lib/stage.cljc","^;",15,"^<I",["^1O",[["~$p__64836","^=B"]]],"^<J",null,"^<K",["^1O",[null,null]],"^9",1,"^<L",false,"^8",290,"^:",290,"^<O",2,"^<P",true,"^<C",["^1O",["^<D",["^1O",[[["^=>","^=?","^=@","^1Q","^=A"],"^=B"]]]]]],"~$fields-columns",["^ ","^<R",["^<S",["^<T","^<U","^<V","^<Z"],["^<[","^=0"]],"^<W","id64542","^<A",null,"^5",["^ ","^<R",["^<S",["^<T","^<U","^<V","^<Z"],["^<[","^=0"]],"^<W","id64542","^<B",true,"^7","metabase/lib/stage.cljc","^;",34,"^9",20,"^<X",["^1O",["^<D",["^1O",[["^<E","~:-","^<U","^<F","~:-","^<V","^<H","~:-","^<Z"]]]]],"^8",104,"^:",104,"^<C",["^1O",["^<D",["^1O",[["^<E","^<F","^<H"]]]]],"^6","Inputs: [query :- :metabase.lib.schema/query stage-number :- :int unique-name-fn :- fn?]\n  Return: [:maybe lib.metadata.calculation/ColumnsWithUniqueAliases]"],"^<B",true,"^J","^3X","^7","metabase/lib/stage.cljc","^;",34,"^<I",["^1O",[["^<E","^<F","^<H"]]],"^<J",null,"^<K",["^1O",[null,null]],"^9",1,"^<L",false,"^<X",["^1O",["^<D",["^1O",[["^<E","~:-","^<U","^<F","~:-","^<V","^<H","~:-","^<Z"]]]]],"^8",104,"^<M",["^I",[null,"^=1"]],"^:",104,"^<O",3,"^<P",true,"^<C",["^1O",["^<D",["^1O",[["^<E","^<F","^<H"]]]]],"^6","Inputs: [query :- :metabase.lib.schema/query stage-number :- :int unique-name-fn :- fn?]\n  Return: [:maybe lib.metadata.calculation/ColumnsWithUniqueAliases]"],"~$previous-stage-or-source-visible-columns",["^ ","^<R",["^<S",["^<T","^<U","^<V","~$lib.metadata.calculation/VisibleColumnsOptions"],"^=0"],"^<W","id64682","^<A",null,"^5",["^ ","^<R",["^<S",["^<T","^<U","^<V","^=F"],"^=0"],"^<W","id64682","^<B",true,"^7","metabase/lib/stage.cljc","^;",60,"^9",20,"^<X",["^1O",["^<D",["^1O",[["^<E","~:-","^<U","^<F","~:-","^<V",["^ ","~:keys",["^<H"],"^1Q","~$options"],"~:-","^=F"]]]]],"^8",245,"^:",245,"^<C",["^1O",["^<D",["^1O",[["^<E","^<F",["^ ","^=G",["^<H"],"^1Q","^=H"]]]]]],"^6","Inputs: [query :- :metabase.lib.schema/query stage-number :- :int {:keys [unique-name-fn], :as options} :- lib.metadata.calculation/VisibleColumnsOptions]\n  Return: lib.metadata.calculation/ColumnsWithUniqueAliases\n          \n\n  Return columns from the previous query stage or source Table/Card."],"^<B",true,"^J","^47","^7","metabase/lib/stage.cljc","^;",60,"^<I",["^1O",[["^<E","^<F","~$p__64687"]]],"^<J",null,"^<K",["^1O",[null,null]],"^9",1,"^<L",false,"^<X",["^1O",["^<D",["^1O",[["^<E","~:-","^<U","^<F","~:-","^<V",["^ ","^=G",["^<H"],"^1Q","^=H"],"~:-","^=F"]]]]],"^8",245,"^<M","^=4","^:",245,"^<O",3,"^<P",true,"^<C",["^1O",["^<D",["^1O",[["^<E","^<F",["^ ","^=G",["^<H"],"^1Q","^=H"]]]]]],"^6","Inputs: [query :- :metabase.lib.schema/query stage-number :- :int {:keys [unique-name-fn], :as options} :- lib.metadata.calculation/VisibleColumnsOptions]\n  Return: lib.metadata.calculation/ColumnsWithUniqueAliases\n          \n\n  Return columns from the previous query stage or source Table/Card."],"~$breakouts-columns",["^ ","^<R",["^<S",["^<T","^<U","^<V","^<Z"],["^<[","^=0"]],"^<W","id64499","^<A",null,"^5",["^ ","^<R",["^<S",["^<T","^<U","^<V","^<Z"],["^<[","^=0"]],"^<W","id64499","^<B",true,"^7","metabase/lib/stage.cljc","^;",37,"^9",20,"^<X",["^1O",["^<D",["^1O",[["^<E","~:-","^<U","^<F","~:-","^<V","^<H","~:-","^<Z"]]]]],"^8",80,"^:",80,"^<C",["^1O",["^<D",["^1O",[["^<E","^<F","^<H"]]]]],"^6","Inputs: [query :- :metabase.lib.schema/query stage-number :- :int unique-name-fn :- fn?]\n  Return: [:maybe lib.metadata.calculation/ColumnsWithUniqueAliases]"],"^<B",true,"^J","^3V","^7","metabase/lib/stage.cljc","^;",37,"^<I",["^1O",[["^<E","^<F","^<H"]]],"^<J",null,"^<K",["^1O",[null,null]],"^9",1,"^<L",false,"^<X",["^1O",["^<D",["^1O",[["^<E","~:-","^<U","^<F","~:-","^<V","^<H","~:-","^<Z"]]]]],"^8",80,"^<M",["^I",[null,"^=1"]],"^:",80,"^<O",3,"^<P",true,"^<C",["^1O",["^<D",["^1O",[["^<E","^<F","^<H"]]]]],"^6","Inputs: [query :- :metabase.lib.schema/query stage-number :- :int unique-name-fn :- fn?]\n  Return: [:maybe lib.metadata.calculation/ColumnsWithUniqueAliases]"],"~$existing-visible-columns",["^ ","^<R",["^<S",["^<T","^<U","^<V","^=F"],"^=0"],"^<W","id64744","^<A",null,"^5",["^ ","^<R",["^<S",["^<T","^<U","^<V","^=F"],"^=0"],"^<W","id64744","^<B",true,"^7","metabase/lib/stage.cljc","^;",44,"^9",20,"^<X",["^1O",["^<D",["^1O",[["^<E","~:-","^<U","^<F","~:-","^<V",["^ ","^=G",["^<H","~$include-joined?","~$include-expressions?"],"^1Q","^=H"],"~:-","^=F"]]]]],"^8",276,"^:",276,"^<C",["^1O",["^<D",["^1O",[["^<E","^<F",["^ ","^=G",["^<H","^=L","^=M"],"^1Q","^=H"]]]]]],"^6","Inputs: [query :- :metabase.lib.schema/query stage-number :- :int {:keys [unique-name-fn include-joined? include-expressions?], :as options} :- lib.metadata.calculation/VisibleColumnsOptions]\n  Return: lib.metadata.calculation/ColumnsWithUniqueAliases"],"^<B",true,"^J","^4?","^7","metabase/lib/stage.cljc","^;",44,"^<I",["^1O",[["^<E","^<F","~$p__64763"]]],"^<J",null,"^<K",["^1O",[null,null]],"^9",1,"^<L",false,"^<X",["^1O",["^<D",["^1O",[["^<E","~:-","^<U","^<F","~:-","^<V",["^ ","^=G",["^<H","^=L","^=M"],"^1Q","^=H"],"~:-","^=F"]]]]],"^8",276,"^<M","^32","^:",276,"^<O",3,"^<P",true,"^<C",["^1O",["^<D",["^1O",[["^<E","^<F",["^ ","^=G",["^<H","^=L","^=M"],"^1Q","^=H"]]]]]],"^6","Inputs: [query :- :metabase.lib.schema/query stage-number :- :int {:keys [unique-name-fn include-joined? include-expressions?], :as options} :- lib.metadata.calculation/VisibleColumnsOptions]\n  Return: lib.metadata.calculation/ColumnsWithUniqueAliases"],"~$previous-stage-metadata",["^ ","^<R",["^<S",["^<T","^<U","^<V","^<Z"],["^<[","^=0"]],"^<W","id64606","^<A",null,"^5",["^ ","^<R",["^<S",["^<T","^<U","^<V","^<Z"],["^<[","^=0"]],"^<W","id64606","^<B",true,"^7","metabase/lib/stage.cljc","^;",43,"^9",20,"^<X",["^1O",["^<D",["^1O",[["^<E","~:-","^<U","^<F","~:-","^<V","^<H","~:-","^<Z"]]]]],"^8",134,"^:",134,"^<C",["^1O",["^<D",["^1O",[["^<E","^<F","^<H"]]]]],"^6","Inputs: [query :- :metabase.lib.schema/query stage-number :- :int unique-name-fn :- fn?]\n  Return: [:maybe lib.metadata.calculation/ColumnsWithUniqueAliases]\n          \n\n  Metadata for the previous stage, if there is one."],"^<B",true,"^J","^2?","^7","metabase/lib/stage.cljc","^;",43,"^<I",["^1O",[["^<E","^<F","^<H"]]],"^<J",null,"^<K",["^1O",[null,null]],"^9",1,"^<L",false,"^<X",["^1O",["^<D",["^1O",[["^<E","~:-","^<U","^<F","~:-","^<V","^<H","~:-","^<Z"]]]]],"^8",134,"^<M",["^I",[null,"^=1"]],"^:",134,"^<O",3,"^<P",true,"^<C",["^1O",["^<D",["^1O",[["^<E","^<F","^<H"]]]]],"^6","Inputs: [query :- :metabase.lib.schema/query stage-number :- :int unique-name-fn :- fn?]\n  Return: [:maybe lib.metadata.calculation/ColumnsWithUniqueAliases]\n          \n\n  Metadata for the previous stage, if there is one."],"~$saved-question-metadata",["^ ","^<R",["^<S",["^<T","^<U","^<V",["^<[","~:metabase.lib.schema.id/card"],"^<Z"],["^<[","^=0"]],"^<W","id64639","^<A",null,"^5",["^ ","^<R",["^<S",["^<T","^<U","^<V",["^<[","^=Q"],"^<Z"],["^<[","^=0"]],"^<W","id64639","^<B",true,"^7","metabase/lib/stage.cljc","^;",43,"^9",20,"^<X",["^1O",["^<D",["^1O",[["^<E","~:-","^<U","^<F","~:-","^<V","~$card-id","~:-",["^<[","^=Q"],"^<H","~:-","^<Z"]]]]],"^8",156,"^:",156,"^<C",["^1O",["^<D",["^1O",[["^<E","^<F","^=R","^<H"]]]]],"^6","Inputs: [query :- :metabase.lib.schema/query stage-number :- :int card-id :- [:maybe :metabase.lib.schema.id/card] unique-name-fn :- fn?]\n  Return: [:maybe lib.metadata.calculation/ColumnsWithUniqueAliases]\n          \n\n  Metadata associated with a Saved Question, e.g. if we have a `:source-card`"],"^<B",true,"^J","^3C","^7","metabase/lib/stage.cljc","^;",43,"^<I",["^1O",[["^<E","^<F","^=R","^<H"]]],"^<J",null,"^<K",["^1O",[null,null]],"^9",1,"^<L",false,"^<X",["^1O",["^<D",["^1O",[["^<E","~:-","^<U","^<F","~:-","^<V","^=R","~:-",["^<[","^=Q"],"^<H","~:-","^<Z"]]]]],"^8",156,"^<M",["^I",[null,"^=1"]],"^:",156,"^<O",4,"^<P",true,"^<C",["^1O",["^<D",["^1O",[["^<E","^<F","^=R","^<H"]]]]],"^6","Inputs: [query :- :metabase.lib.schema/query stage-number :- :int card-id :- [:maybe :metabase.lib.schema.id/card] unique-name-fn :- fn?]\n  Return: [:maybe lib.metadata.calculation/ColumnsWithUniqueAliases]\n          \n\n  Metadata associated with a Saved Question, e.g. if we have a `:source-card`"],"~$existing-stage-metadata",["^ ","^<R",["^<S",["^<T","^<U","^<V"],["^<[","^=0"]],"^<W","id64478","^<A",null,"^5",["^ ","^<R",["^<S",["^<T","^<U","^<V"],["^<[","^=0"]],"^<W","id64478","^<B",true,"^7","metabase/lib/stage.cljc","^;",43,"^9",20,"^<X",["^1O",["^<D",["^1O",[["^<E","~:-","^<U","^<F","~:-","^<V"]]]]],"^8",58,"^:",58,"^<C",["^1O",["^<D",["^1O",[["^<E","^<F"]]]]],"^6","Inputs: [query :- :metabase.lib.schema/query stage-number :- :int]\n  Return: [:maybe lib.metadata.calculation/ColumnsWithUniqueAliases]\n          \n\n  Return existing stage metadata attached to a stage if is already present: return it as-is, but only if this is a\n  native stage or a source-Card stage. if it's any other sort of stage then ignore the metadata, it's probably wrong;\n  we can recalculate the correct metadata anyway."],"^<B",true,"^J","^41","^7","metabase/lib/stage.cljc","^;",43,"^<I",["^1O",[["^<E","^<F"]]],"^<J",null,"^<K",["^1O",[null,null]],"^9",1,"^<L",false,"^<X",["^1O",["^<D",["^1O",[["^<E","~:-","^<U","^<F","~:-","^<V"]]]]],"^8",58,"^<M",["^I",[null,"^<N","^=1"]],"^:",58,"^<O",2,"^<P",true,"^<C",["^1O",["^<D",["^1O",[["^<E","^<F"]]]]],"^6","Inputs: [query :- :metabase.lib.schema/query stage-number :- :int]\n  Return: [:maybe lib.metadata.calculation/ColumnsWithUniqueAliases]\n          \n\n  Return existing stage metadata attached to a stage if is already present: return it as-is, but only if this is a\n  native stage or a source-Card stage. if it's any other sort of stage then ignore the metadata, it's probably wrong;\n  we can recalculate the correct metadata anyway."]],"^1M",["^ ","^@","^@","^R","^S","^W","^X","~$u","^Y","^Y","^Y","^X","^X","^S","^S"],"~:cljs.analyzer/constants",["^ ","^1J",["^I",["~:source/expressions","~:metabase.lib.stage/stage","~:lib/type","~:base-type","~:stages","~:limit","~:else","~:table-id","~:unit","~:source/aggregations","~:metabase.lib.stage/source-field-id","~:filters","~:include-joined?","~:include-expressions?","~:columns","^J","~:lib/source","~:lib/source-column-alias","~:fields","~:unique-name-fn","~:lib/stage-metadata","~:source/card","~:source/native","~:lib/source-uuid","~:effective-type","~:fk-target-field-id","^9","~:type/*","~:metabase.lib.stage/cached-metadata","~:metabase.lib.field/binning","~:mbql.stage/native","~:source/breakouts","~:source/implicitly-joinable","~:source/fields","~:id","~:source-alias","~:source-table","~:breakout","~:include-implicitly-joinable?","~:lib/desired-column-alias","~:order-by","~:mbql.stage/mbql","~:metabase.lib.field/temporal-unit","~:aggregation","~:source-card","~:clause","~:fk-field-id","~:source/previous-stage","~:metabase.lib.join/join-alias"]],"~:order",["^>P","^=V","^>E","^>R","^>4","^>C","^=W","^>S","^><","^>>","^>=","^>9","^>N","^J","^>8","^>7","^>F","^>2","^>:","^>H","^=U","^>V","^>Q","^>A","^>;","^>M","^=X","^>@","^>B","^>0","^>I","^>3","^>U","^>G","^>W","^>D","^>K","^>5","^>6","^>T","^9","^>L","^>1","^>J","^>?","^=[","^>O","^=Z","^=Y"]],"^1R",["^ ","^1K",["^I",[]]],"^1S",["^ "],"^1T",["^16","^@","^1G","^1@","^18","^13","^V","^14","^Z","^1;","^1>","^U","^T","^11","^Q","^1<","^1?","^15","^X","^Y","^S"]],"^N","^K","~:ns-specs",["^ "],"~:ns-spec-vars",["^I",[]],"~:compiler-options",["^4B",[["^>[","~:static-fns"],true,["^>[","~:shadow-tweaks"],null,["^>[","~:source-map-inline"],null,["^>[","~:elide-asserts"],true,["^>[","~:optimize-constants"],null,["^>[","^1Y"],null,["^>[","~:external-config"],null,["^>[","~:tooling-config"],null,["^>[","~:emit-constants"],null,["^>[","~:load-tests"],false,["^>[","~:form-size-threshold"],null,["^>[","~:global-goog-object&array"],null,["^>[","~:data-readers"],null,["^>[","~:infer-externs"],"~:auto",["^>[","^1["],["^I",["^20"]],["~:js-options","~:js-provider"],"^1K",["~:mode"],"~:release",["^>[","~:fn-invoke-direct"],null,["^>[","~:source-map"],null]]]