["^ ","~:output",["^ ","~:js","goog.provide('metabase.lib.aggregation');\n/**\n * Inputs: [metadata :- lib.metadata/ColumnMetadata]\n *   Return: :mbql.clause/aggregation\n *        \n * \n *   Given `:metadata/column` column metadata for an aggregation, construct an `:aggregation` reference.\n */\nmetabase.lib.aggregation.column_metadata__GT_aggregation_ref = (function metabase$lib$aggregation$column_metadata__GT_aggregation_ref(metadata){\n\nvar options = new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(\"lib\",\"uuid\",\"lib/uuid\",-2145250720),cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.random_uuid()),new cljs.core.Keyword(null,\"effective-type\",\"effective-type\",-355725458),cljs.core.some_fn.cljs$core$IFn$_invoke$arity$2(new cljs.core.Keyword(null,\"effective-type\",\"effective-type\",-355725458),new cljs.core.Keyword(null,\"base-type\",\"base-type\",1167971299))(metadata)], null);\nvar ag_uuid = new cljs.core.Keyword(\"lib\",\"source-uuid\",\"lib/source-uuid\",1828897581).cljs$core$IFn$_invoke$arity$1(metadata);\n\nreturn new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"aggregation\",\"aggregation\",1597476696),options,ag_uuid], null);\n});\n/**\n * Inputs: [query :- :metabase.lib.schema/query stage-number :- :int ag-uuid :- :string]\n *   Return: :metabase.lib.schema.aggregation/aggregation\n *        \n * \n *   Resolve an aggregation with a specific `index`.\n */\nmetabase.lib.aggregation.resolve_aggregation = (function metabase$lib$aggregation$resolve_aggregation(query,stage_number,ag_uuid){\n\nvar map__62913 = metabase.lib.util.query_stage(query,stage_number);\nvar map__62913__$1 = cljs.core.__destructure_map(map__62913);\nvar aggregations = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__62913__$1,new cljs.core.Keyword(null,\"aggregation\",\"aggregation\",1597476696));\nvar found = medley.core.find_first.cljs$core$IFn$_invoke$arity$2(cljs.core.comp.cljs$core$IFn$_invoke$arity$3(cljs.core.PersistentHashSet.createAsIfByAssoc([ag_uuid]),new cljs.core.Keyword(\"lib\",\"uuid\",\"lib/uuid\",-2145250720),cljs.core.second),aggregations);\nif(cljs.core.truth_(found)){\n} else {\nthrow cljs.core.ex_info.cljs$core$IFn$_invoke$arity$2(metabase.shared.util.i18n.js_i18n.cljs$core$IFn$_invoke$arity$variadic(\"No aggregation with uuid {0}\",cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([ag_uuid], 0)),new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null,\"uuid\",\"uuid\",-2145095719),ag_uuid,new cljs.core.Keyword(null,\"query\",\"query\",-1288509510),query,new cljs.core.Keyword(null,\"stage-number\",\"stage-number\",-1752729638),stage_number], null));\n}\n\nreturn found;\n});\nmetabase.lib.metadata.calculation.describe_top_level_key_method.cljs$core$IMultiFn$_add_method$arity$3(null,new cljs.core.Keyword(null,\"aggregation\",\"aggregation\",1597476696),(function (query,stage_number,_k){\nvar temp__5804__auto__ = cljs.core.not_empty(new cljs.core.Keyword(null,\"aggregation\",\"aggregation\",1597476696).cljs$core$IFn$_invoke$arity$1(metabase.lib.util.query_stage(query,stage_number)));\nif(cljs.core.truth_(temp__5804__auto__)){\nvar aggregations = temp__5804__auto__;\nreturn metabase.lib.util.join_strings_with_conjunction(metabase.shared.util.i18n.js_i18n(\"and\"),(function (){var iter__5523__auto__ = (function metabase$lib$aggregation$iter__62926(s__62927){\nreturn (new cljs.core.LazySeq(null,(function (){\nvar s__62927__$1 = s__62927;\nwhile(true){\nvar temp__5804__auto____$1 = cljs.core.seq(s__62927__$1);\nif(temp__5804__auto____$1){\nvar s__62927__$2 = temp__5804__auto____$1;\nif(cljs.core.chunked_seq_QMARK_(s__62927__$2)){\nvar c__5521__auto__ = cljs.core.chunk_first(s__62927__$2);\nvar size__5522__auto__ = cljs.core.count(c__5521__auto__);\nvar b__62929 = cljs.core.chunk_buffer(size__5522__auto__);\nif((function (){var i__62928 = (0);\nwhile(true){\nif((i__62928 < size__5522__auto__)){\nvar aggregation = cljs.core._nth(c__5521__auto__,i__62928);\ncljs.core.chunk_append(b__62929,metabase.lib.metadata.calculation.display_name.cljs$core$IFn$_invoke$arity$4(query,stage_number,aggregation,new cljs.core.Keyword(null,\"long\",\"long\",-171452093)));\n\nvar G__63431 = (i__62928 + (1));\ni__62928 = G__63431;\ncontinue;\n} else {\nreturn true;\n}\nbreak;\n}\n})()){\nreturn cljs.core.chunk_cons(cljs.core.chunk(b__62929),metabase$lib$aggregation$iter__62926(cljs.core.chunk_rest(s__62927__$2)));\n} else {\nreturn cljs.core.chunk_cons(cljs.core.chunk(b__62929),null);\n}\n} else {\nvar aggregation = cljs.core.first(s__62927__$2);\nreturn cljs.core.cons(metabase.lib.metadata.calculation.display_name.cljs$core$IFn$_invoke$arity$4(query,stage_number,aggregation,new cljs.core.Keyword(null,\"long\",\"long\",-171452093)),metabase$lib$aggregation$iter__62926(cljs.core.rest(s__62927__$2)));\n}\n} else {\nreturn null;\n}\nbreak;\n}\n}),null,null));\n});\nreturn iter__5523__auto__(aggregations);\n})());\n} else {\nreturn null;\n}\n}));\nmetabase.lib.metadata.calculation.metadata_method.cljs$core$IMultiFn$_add_method$arity$3(null,new cljs.core.Keyword(null,\"aggregation\",\"aggregation\",1597476696),(function (query,stage_number,p__62937){\nvar vec__62942 = p__62937;\nvar _ag = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__62942,(0),null);\nvar map__62945 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__62942,(1),null);\nvar map__62945__$1 = cljs.core.__destructure_map(map__62945);\nvar _opts = map__62945__$1;\nvar base_type = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__62945__$1,new cljs.core.Keyword(null,\"base-type\",\"base-type\",1167971299));\nvar effective_type = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__62945__$1,new cljs.core.Keyword(null,\"effective-type\",\"effective-type\",-355725458));\nvar index = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__62942,(2),null);\nvar _aggregation_ref = vec__62942;\nvar aggregation = metabase.lib.aggregation.resolve_aggregation(query,stage_number,index);\nreturn cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([metabase.lib.metadata.calculation.metadata.cljs$core$IFn$_invoke$arity$3(query,stage_number,aggregation),new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(\"lib\",\"source\",\"lib/source\",-434086550),new cljs.core.Keyword(\"source\",\"aggregations\",\"source/aggregations\",-1828710137),new cljs.core.Keyword(\"lib\",\"source-uuid\",\"lib/source-uuid\",1828897581),new cljs.core.Keyword(\"lib\",\"uuid\",\"lib/uuid\",-2145250720).cljs$core$IFn$_invoke$arity$1(cljs.core.second(aggregation))], null),(cljs.core.truth_(base_type)?new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"base-type\",\"base-type\",1167971299),base_type], null):null),(cljs.core.truth_(effective_type)?new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"effective-type\",\"effective-type\",-355725458),effective_type], null):null)], 0));\n}));\nmetabase.lib.metadata.calculation.display_name_method.cljs$core$IMultiFn$_add_method$arity$3(null,new cljs.core.Keyword(null,\"aggregation\",\"aggregation\",1597476696),(function (query,stage_number,p__62948,style){\nvar vec__62950 = p__62948;\nvar _tag = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__62950,(0),null);\nvar _opts = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__62950,(1),null);\nvar index = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__62950,(2),null);\nreturn metabase.lib.metadata.calculation.display_name.cljs$core$IFn$_invoke$arity$4(query,stage_number,metabase.lib.aggregation.resolve_aggregation(query,stage_number,index),style);\n}));\nmetabase.lib.hierarchy.derive(new cljs.core.Keyword(\"metabase.lib.aggregation\",\"count-aggregation\",\"metabase.lib.aggregation/count-aggregation\",-21314018),new cljs.core.Keyword(\"metabase.lib.aggregation\",\"aggregation\",\"metabase.lib.aggregation/aggregation\",1701573815));\nvar seq__62956_63432 = cljs.core.seq(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"count\",\"count\",2139924085),new cljs.core.Keyword(null,\"cum-count\",\"cum-count\",-1964431543)], null));\nvar chunk__62957_63433 = null;\nvar count__62958_63434 = (0);\nvar i__62959_63435 = (0);\nwhile(true){\nif((i__62959_63435 < count__62958_63434)){\nvar tag_63436 = chunk__62957_63433.cljs$core$IIndexed$_nth$arity$2(null,i__62959_63435);\nmetabase.lib.hierarchy.derive(tag_63436,new cljs.core.Keyword(\"metabase.lib.aggregation\",\"count-aggregation\",\"metabase.lib.aggregation/count-aggregation\",-21314018));\n\n\nvar G__63444 = seq__62956_63432;\nvar G__63445 = chunk__62957_63433;\nvar G__63446 = count__62958_63434;\nvar G__63447 = (i__62959_63435 + (1));\nseq__62956_63432 = G__63444;\nchunk__62957_63433 = G__63445;\ncount__62958_63434 = G__63446;\ni__62959_63435 = G__63447;\ncontinue;\n} else {\nvar temp__5804__auto___63448 = cljs.core.seq(seq__62956_63432);\nif(temp__5804__auto___63448){\nvar seq__62956_63449__$1 = temp__5804__auto___63448;\nif(cljs.core.chunked_seq_QMARK_(seq__62956_63449__$1)){\nvar c__5568__auto___63450 = cljs.core.chunk_first(seq__62956_63449__$1);\nvar G__63451 = cljs.core.chunk_rest(seq__62956_63449__$1);\nvar G__63452 = c__5568__auto___63450;\nvar G__63453 = cljs.core.count(c__5568__auto___63450);\nvar G__63454 = (0);\nseq__62956_63432 = G__63451;\nchunk__62957_63433 = G__63452;\ncount__62958_63434 = G__63453;\ni__62959_63435 = G__63454;\ncontinue;\n} else {\nvar tag_63455 = cljs.core.first(seq__62956_63449__$1);\nmetabase.lib.hierarchy.derive(tag_63455,new cljs.core.Keyword(\"metabase.lib.aggregation\",\"count-aggregation\",\"metabase.lib.aggregation/count-aggregation\",-21314018));\n\n\nvar G__63456 = cljs.core.next(seq__62956_63449__$1);\nvar G__63457 = null;\nvar G__63458 = (0);\nvar G__63459 = (0);\nseq__62956_63432 = G__63456;\nchunk__62957_63433 = G__63457;\ncount__62958_63434 = G__63458;\ni__62959_63435 = G__63459;\ncontinue;\n}\n} else {\n}\n}\nbreak;\n}\nmetabase.lib.metadata.calculation.display_name_method.cljs$core$IMultiFn$_add_method$arity$3(null,new cljs.core.Keyword(\"metabase.lib.aggregation\",\"count-aggregation\",\"metabase.lib.aggregation/count-aggregation\",-21314018),(function (query,stage_number,p__62981,style){\nvar vec__62982 = p__62981;\nvar tag = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__62982,(0),null);\nvar _opts = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__62982,(1),null);\nvar x = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__62982,(2),null);\nif(cljs.core.truth_(x)){\nvar x_display_name = metabase.lib.metadata.calculation.display_name.cljs$core$IFn$_invoke$arity$4(query,stage_number,x,style);\nvar G__62985 = tag;\nvar G__62985__$1 = (((G__62985 instanceof cljs.core.Keyword))?G__62985.fqn:null);\nswitch (G__62985__$1) {\ncase \"count\":\nreturn metabase.shared.util.i18n.js_i18n.cljs$core$IFn$_invoke$arity$variadic(\"Count of {0}\",cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([x_display_name], 0));\n\nbreak;\ncase \"cum-count\":\nreturn metabase.shared.util.i18n.js_i18n.cljs$core$IFn$_invoke$arity$variadic(\"Cumulative count of {0}\",cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([x_display_name], 0));\n\nbreak;\ndefault:\nthrow (new Error([\"No matching clause: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(G__62985__$1)].join('')));\n\n}\n} else {\nvar G__62990 = tag;\nvar G__62990__$1 = (((G__62990 instanceof cljs.core.Keyword))?G__62990.fqn:null);\nswitch (G__62990__$1) {\ncase \"count\":\nreturn metabase.shared.util.i18n.js_i18n(\"Count\");\n\nbreak;\ncase \"cum-count\":\nreturn metabase.shared.util.i18n.js_i18n(\"Cumulative count\");\n\nbreak;\ndefault:\nthrow (new Error([\"No matching clause: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(G__62990__$1)].join('')));\n\n}\n}\n}));\nmetabase.lib.metadata.calculation.column_name_method.cljs$core$IMultiFn$_add_method$arity$3(null,new cljs.core.Keyword(\"metabase.lib.aggregation\",\"count-aggregation\",\"metabase.lib.aggregation/count-aggregation\",-21314018),(function (_query,_stage_number,p__62993){\nvar vec__62994 = p__62993;\nvar tag = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__62994,(0),null);\nvar _clause = vec__62994;\nvar G__62997 = tag;\nvar G__62997__$1 = (((G__62997 instanceof cljs.core.Keyword))?G__62997.fqn:null);\nswitch (G__62997__$1) {\ncase \"count\":\nreturn \"count\";\n\nbreak;\ncase \"cum-count\":\nreturn \"cum_count\";\n\nbreak;\ndefault:\nthrow (new Error([\"No matching clause: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(G__62997__$1)].join('')));\n\n}\n}));\nmetabase.lib.metadata.calculation.metadata_method.cljs$core$IMultiFn$_add_method$arity$3(null,new cljs.core.Keyword(\"metabase.lib.aggregation\",\"count-aggregation\",\"metabase.lib.aggregation/count-aggregation\",-21314018),(function (query,stage_number,clause){\nreturn cljs.core.assoc.cljs$core$IFn$_invoke$arity$3((function (){var fexpr__63004 = cljs.core.get_method(metabase.lib.metadata.calculation.metadata_method,new cljs.core.Keyword(\"metabase.lib.aggregation\",\"aggregation\",\"metabase.lib.aggregation/aggregation\",1701573815));\nreturn (fexpr__63004.cljs$core$IFn$_invoke$arity$3 ? fexpr__63004.cljs$core$IFn$_invoke$arity$3(query,stage_number,clause) : fexpr__63004.call(null,query,stage_number,clause));\n})(),new cljs.core.Keyword(null,\"semantic-type\",\"semantic-type\",-310722107),new cljs.core.Keyword(\"type\",\"Quantity\",\"type/Quantity\",-1936151227));\n}));\nmetabase.lib.metadata.calculation.display_name_method.cljs$core$IMultiFn$_add_method$arity$3(null,new cljs.core.Keyword(null,\"case\",\"case\",1143702196),(function (_query,_stage_number,_case,_style){\nreturn metabase.shared.util.i18n.js_i18n(\"Case\");\n}));\nmetabase.lib.metadata.calculation.column_name_method.cljs$core$IMultiFn$_add_method$arity$3(null,new cljs.core.Keyword(null,\"case\",\"case\",1143702196),(function (_query,_stage_number,_case){\nreturn \"case\";\n}));\nmetabase.lib.hierarchy.derive(new cljs.core.Keyword(\"metabase.lib.aggregation\",\"unary-aggregation\",\"metabase.lib.aggregation/unary-aggregation\",1064133592),new cljs.core.Keyword(\"metabase.lib.aggregation\",\"aggregation\",\"metabase.lib.aggregation/aggregation\",1701573815));\nvar seq__63014_63464 = cljs.core.seq(new cljs.core.PersistentVector(null, 9, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"avg\",\"avg\",197406200),new cljs.core.Keyword(null,\"cum-sum\",\"cum-sum\",2064902349),new cljs.core.Keyword(null,\"distinct\",\"distinct\",-1788879121),new cljs.core.Keyword(null,\"max\",\"max\",61366548),new cljs.core.Keyword(null,\"median\",\"median\",569566131),new cljs.core.Keyword(null,\"min\",\"min\",444991522),new cljs.core.Keyword(null,\"stddev\",\"stddev\",-865474939),new cljs.core.Keyword(null,\"sum\",\"sum\",136986814),new cljs.core.Keyword(null,\"var\",\"var\",-769682797)], null));\nvar chunk__63015_63465 = null;\nvar count__63016_63466 = (0);\nvar i__63017_63467 = (0);\nwhile(true){\nif((i__63017_63467 < count__63016_63466)){\nvar tag_63476 = chunk__63015_63465.cljs$core$IIndexed$_nth$arity$2(null,i__63017_63467);\nmetabase.lib.hierarchy.derive(tag_63476,new cljs.core.Keyword(\"metabase.lib.aggregation\",\"unary-aggregation\",\"metabase.lib.aggregation/unary-aggregation\",1064133592));\n\n\nvar G__63477 = seq__63014_63464;\nvar G__63478 = chunk__63015_63465;\nvar G__63479 = count__63016_63466;\nvar G__63480 = (i__63017_63467 + (1));\nseq__63014_63464 = G__63477;\nchunk__63015_63465 = G__63478;\ncount__63016_63466 = G__63479;\ni__63017_63467 = G__63480;\ncontinue;\n} else {\nvar temp__5804__auto___63481 = cljs.core.seq(seq__63014_63464);\nif(temp__5804__auto___63481){\nvar seq__63014_63482__$1 = temp__5804__auto___63481;\nif(cljs.core.chunked_seq_QMARK_(seq__63014_63482__$1)){\nvar c__5568__auto___63483 = cljs.core.chunk_first(seq__63014_63482__$1);\nvar G__63484 = cljs.core.chunk_rest(seq__63014_63482__$1);\nvar G__63485 = c__5568__auto___63483;\nvar G__63486 = cljs.core.count(c__5568__auto___63483);\nvar G__63487 = (0);\nseq__63014_63464 = G__63484;\nchunk__63015_63465 = G__63485;\ncount__63016_63466 = G__63486;\ni__63017_63467 = G__63487;\ncontinue;\n} else {\nvar tag_63488 = cljs.core.first(seq__63014_63482__$1);\nmetabase.lib.hierarchy.derive(tag_63488,new cljs.core.Keyword(\"metabase.lib.aggregation\",\"unary-aggregation\",\"metabase.lib.aggregation/unary-aggregation\",1064133592));\n\n\nvar G__63489 = cljs.core.next(seq__63014_63482__$1);\nvar G__63490 = null;\nvar G__63491 = (0);\nvar G__63492 = (0);\nseq__63014_63464 = G__63489;\nchunk__63015_63465 = G__63490;\ncount__63016_63466 = G__63491;\ni__63017_63467 = G__63492;\ncontinue;\n}\n} else {\n}\n}\nbreak;\n}\nmetabase.lib.metadata.calculation.column_name_method.cljs$core$IMultiFn$_add_method$arity$3(null,new cljs.core.Keyword(\"metabase.lib.aggregation\",\"unary-aggregation\",\"metabase.lib.aggregation/unary-aggregation\",1064133592),(function (_query,_stage_number,p__63025){\nvar vec__63026 = p__63025;\nvar tag = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__63026,(0),null);\nvar _opts = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__63026,(1),null);\nvar _arg = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__63026,(2),null);\nvar G__63029 = tag;\nvar G__63029__$1 = (((G__63029 instanceof cljs.core.Keyword))?G__63029.fqn:null);\nswitch (G__63029__$1) {\ncase \"avg\":\nreturn \"avg\";\n\nbreak;\ncase \"cum-sum\":\nreturn \"sum\";\n\nbreak;\ncase \"distinct\":\nreturn \"count\";\n\nbreak;\ncase \"max\":\nreturn \"max\";\n\nbreak;\ncase \"median\":\nreturn \"median\";\n\nbreak;\ncase \"min\":\nreturn \"min\";\n\nbreak;\ncase \"stddev\":\nreturn \"stddev\";\n\nbreak;\ncase \"sum\":\nreturn \"sum\";\n\nbreak;\ncase \"var\":\nreturn \"var\";\n\nbreak;\ndefault:\nthrow (new Error([\"No matching clause: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(G__63029__$1)].join('')));\n\n}\n}));\nmetabase.lib.metadata.calculation.display_name_method.cljs$core$IMultiFn$_add_method$arity$3(null,new cljs.core.Keyword(\"metabase.lib.aggregation\",\"unary-aggregation\",\"metabase.lib.aggregation/unary-aggregation\",1064133592),(function (query,stage_number,p__63038,style){\nvar vec__63039 = p__63038;\nvar tag = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__63039,(0),null);\nvar _opts = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__63039,(1),null);\nvar arg = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__63039,(2),null);\nvar arg__$1 = metabase.lib.metadata.calculation.display_name.cljs$core$IFn$_invoke$arity$4(query,stage_number,arg,style);\nvar G__63042 = tag;\nvar G__63042__$1 = (((G__63042 instanceof cljs.core.Keyword))?G__63042.fqn:null);\nswitch (G__63042__$1) {\ncase \"avg\":\nreturn metabase.shared.util.i18n.js_i18n.cljs$core$IFn$_invoke$arity$variadic(\"Average of {0}\",cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([arg__$1], 0));\n\nbreak;\ncase \"cum-sum\":\nreturn metabase.shared.util.i18n.js_i18n.cljs$core$IFn$_invoke$arity$variadic(\"Cumulative sum of {0}\",cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([arg__$1], 0));\n\nbreak;\ncase \"distinct\":\nreturn metabase.shared.util.i18n.js_i18n.cljs$core$IFn$_invoke$arity$variadic(\"Distinct values of {0}\",cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([arg__$1], 0));\n\nbreak;\ncase \"max\":\nreturn metabase.shared.util.i18n.js_i18n.cljs$core$IFn$_invoke$arity$variadic(\"Max of {0}\",cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([arg__$1], 0));\n\nbreak;\ncase \"median\":\nreturn metabase.shared.util.i18n.js_i18n.cljs$core$IFn$_invoke$arity$variadic(\"Median of {0}\",cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([arg__$1], 0));\n\nbreak;\ncase \"min\":\nreturn metabase.shared.util.i18n.js_i18n.cljs$core$IFn$_invoke$arity$variadic(\"Min of {0}\",cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([arg__$1], 0));\n\nbreak;\ncase \"stddev\":\nreturn metabase.shared.util.i18n.js_i18n.cljs$core$IFn$_invoke$arity$variadic(\"Standard deviation of {0}\",cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([arg__$1], 0));\n\nbreak;\ncase \"sum\":\nreturn metabase.shared.util.i18n.js_i18n.cljs$core$IFn$_invoke$arity$variadic(\"Sum of {0}\",cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([arg__$1], 0));\n\nbreak;\ncase \"var\":\nreturn metabase.shared.util.i18n.js_i18n.cljs$core$IFn$_invoke$arity$variadic(\"Variance of {0}\",cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([arg__$1], 0));\n\nbreak;\ndefault:\nthrow (new Error([\"No matching clause: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(G__63042__$1)].join('')));\n\n}\n}));\nmetabase.lib.metadata.calculation.display_name_method.cljs$core$IMultiFn$_add_method$arity$3(null,new cljs.core.Keyword(null,\"percentile\",\"percentile\",-601188752),(function (query,stage_number,p__63048,style){\nvar vec__63049 = p__63048;\nvar _percentile = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__63049,(0),null);\nvar _opts = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__63049,(1),null);\nvar x = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__63049,(2),null);\nvar p = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__63049,(3),null);\nreturn metabase.shared.util.i18n.js_i18n.cljs$core$IFn$_invoke$arity$variadic(\"{0}th percentile of {1}\",cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([p,metabase.lib.metadata.calculation.display_name.cljs$core$IFn$_invoke$arity$4(query,stage_number,x,style)], 0));\n}));\nmetabase.lib.metadata.calculation.column_name_method.cljs$core$IMultiFn$_add_method$arity$3(null,new cljs.core.Keyword(null,\"percentile\",\"percentile\",-601188752),(function (_query,_stage_number,_clause){\nreturn \"percentile\";\n}));\nmetabase.lib.hierarchy.derive(new cljs.core.Keyword(null,\"percentile\",\"percentile\",-601188752),new cljs.core.Keyword(\"metabase.lib.aggregation\",\"aggregation\",\"metabase.lib.aggregation/aggregation\",1701573815));\nmetabase.lib.metadata.calculation.display_name_method.cljs$core$IMultiFn$_add_method$arity$3(null,new cljs.core.Keyword(null,\"sum-where\",\"sum-where\",2135348428),(function (query,stage_number,p__63053,style){\nvar vec__63054 = p__63053;\nvar _sum_where = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__63054,(0),null);\nvar _opts = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__63054,(1),null);\nvar x = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__63054,(2),null);\nvar _pred = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__63054,(3),null);\nreturn metabase.shared.util.i18n.js_i18n.cljs$core$IFn$_invoke$arity$variadic(\"Sum of {0} matching condition\",cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([metabase.lib.metadata.calculation.display_name.cljs$core$IFn$_invoke$arity$4(query,stage_number,x,style)], 0));\n}));\nmetabase.lib.metadata.calculation.column_name_method.cljs$core$IMultiFn$_add_method$arity$3(null,new cljs.core.Keyword(null,\"sum-where\",\"sum-where\",2135348428),(function (query,stage_number,p__63060){\nvar vec__63061 = p__63060;\nvar _sum_where = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__63061,(0),null);\nvar _opts = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__63061,(1),null);\nvar x = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__63061,(2),null);\nvar _pred = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__63061,(3),null);\nreturn [\"sum_where_\",cljs.core.str.cljs$core$IFn$_invoke$arity$1(metabase.lib.metadata.calculation.column_name.cljs$core$IFn$_invoke$arity$3(query,stage_number,x))].join('');\n}));\nmetabase.lib.hierarchy.derive(new cljs.core.Keyword(null,\"sum-where\",\"sum-where\",2135348428),new cljs.core.Keyword(\"metabase.lib.aggregation\",\"aggregation\",\"metabase.lib.aggregation/aggregation\",1701573815));\nmetabase.lib.metadata.calculation.display_name_method.cljs$core$IMultiFn$_add_method$arity$3(null,new cljs.core.Keyword(null,\"share\",\"share\",-589433933),(function (_query,_stage_number,_share,_style){\nreturn metabase.shared.util.i18n.js_i18n(\"Share of rows matching condition\");\n}));\nmetabase.lib.metadata.calculation.column_name_method.cljs$core$IMultiFn$_add_method$arity$3(null,new cljs.core.Keyword(null,\"share\",\"share\",-589433933),(function (_query,_stage_number,_share){\nreturn \"share\";\n}));\nmetabase.lib.hierarchy.derive(new cljs.core.Keyword(null,\"share\",\"share\",-589433933),new cljs.core.Keyword(\"metabase.lib.aggregation\",\"aggregation\",\"metabase.lib.aggregation/aggregation\",1701573815));\nmetabase.lib.metadata.calculation.display_name_method.cljs$core$IMultiFn$_add_method$arity$3(null,new cljs.core.Keyword(null,\"count-where\",\"count-where\",385407720),(function (_query,_stage_number,_count_where,_style){\nreturn metabase.shared.util.i18n.js_i18n(\"Count of rows matching condition\");\n}));\nmetabase.lib.metadata.calculation.column_name_method.cljs$core$IMultiFn$_add_method$arity$3(null,new cljs.core.Keyword(null,\"count-where\",\"count-where\",385407720),(function (_query,_stage_number,_count_where){\nreturn \"count-where\";\n}));\nmetabase.lib.hierarchy.derive(new cljs.core.Keyword(null,\"count-where\",\"count-where\",385407720),new cljs.core.Keyword(\"metabase.lib.aggregation\",\"aggregation\",\"metabase.lib.aggregation/aggregation\",1701573815));\nmetabase.lib.metadata.calculation.metadata_method.cljs$core$IMultiFn$_add_method$arity$3(null,new cljs.core.Keyword(\"metabase.lib.aggregation\",\"aggregation\",\"metabase.lib.aggregation/aggregation\",1701573815),(function (query,stage_number,p__63086){\nvar vec__63087 = p__63086;\nvar _tag = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__63087,(0),null);\nvar _opts = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__63087,(1),null);\nvar first_arg = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__63087,(2),null);\nvar clause = vec__63087;\nreturn cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([(cljs.core.truth_(first_arg)?cljs.core.select_keys(metabase.lib.metadata.calculation.metadata.cljs$core$IFn$_invoke$arity$3(query,stage_number,first_arg),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"settings\",\"settings\",1556144875)], null)):null),(function (){var fexpr__63090 = cljs.core.get_method(metabase.lib.metadata.calculation.metadata_method,new cljs.core.Keyword(null,\"default\",\"default\",-1987822328));\nreturn (fexpr__63090.cljs$core$IFn$_invoke$arity$3 ? fexpr__63090.cljs$core$IFn$_invoke$arity$3(query,stage_number,clause) : fexpr__63090.call(null,query,stage_number,clause));\n})()], 0));\n}));\n/**\n * Inputs: ([]\n *         [x])\n *   Return: :mbql.clause/count\n *        \n * \n *   Create a standalone clause of type `count`.\n */\nmetabase.lib.aggregation.count = (function metabase$lib$aggregation$count(var_args){\nvar G__63093 = arguments.length;\nswitch (G__63093) {\ncase 0:\nreturn metabase.lib.aggregation.count.cljs$core$IFn$_invoke$arity$0();\n\nbreak;\ncase 1:\nreturn metabase.lib.aggregation.count.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\n(metabase.lib.aggregation.count.cljs$core$IFn$_invoke$arity$0 = (function (){\n\nreturn metabase.lib.common.defop_create(new cljs.core.Keyword(null,\"count\",\"count\",2139924085),cljs.core.PersistentVector.EMPTY);\n}));\n\n(metabase.lib.aggregation.count.cljs$core$IFn$_invoke$arity$1 = (function (x){\n\nreturn metabase.lib.common.defop_create(new cljs.core.Keyword(null,\"count\",\"count\",2139924085),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [x], null));\n}));\n\n(metabase.lib.aggregation.count.cljs$lang$maxFixedArity = 1);\n\n/**\n * Inputs: ([]\n *         [x])\n *   Return: :mbql.clause/cum-count\n *        \n * \n *   Create a standalone clause of type `cum-count`.\n */\nmetabase.lib.aggregation.cum_count = (function metabase$lib$aggregation$cum_count(var_args){\nvar G__63108 = arguments.length;\nswitch (G__63108) {\ncase 0:\nreturn metabase.lib.aggregation.cum_count.cljs$core$IFn$_invoke$arity$0();\n\nbreak;\ncase 1:\nreturn metabase.lib.aggregation.cum_count.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\n(metabase.lib.aggregation.cum_count.cljs$core$IFn$_invoke$arity$0 = (function (){\n\nreturn metabase.lib.common.defop_create(new cljs.core.Keyword(null,\"cum-count\",\"cum-count\",-1964431543),cljs.core.PersistentVector.EMPTY);\n}));\n\n(metabase.lib.aggregation.cum_count.cljs$core$IFn$_invoke$arity$1 = (function (x){\n\nreturn metabase.lib.common.defop_create(new cljs.core.Keyword(null,\"cum-count\",\"cum-count\",-1964431543),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [x], null));\n}));\n\n(metabase.lib.aggregation.cum_count.cljs$lang$maxFixedArity = 1);\n\n/**\n * Inputs: ([x y])\n *   Return: :mbql.clause/count-where\n *        \n * \n *   Create a standalone clause of type `count-where`.\n */\nmetabase.lib.aggregation.count_where = (function metabase$lib$aggregation$count_where(x,y){\n\nreturn metabase.lib.common.defop_create(new cljs.core.Keyword(null,\"count-where\",\"count-where\",385407720),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [x,y], null));\n});\n/**\n * Inputs: ([x])\n *   Return: :mbql.clause/avg\n *        \n * \n *   Create a standalone clause of type `avg`.\n */\nmetabase.lib.aggregation.avg = (function metabase$lib$aggregation$avg(x){\n\nreturn metabase.lib.common.defop_create(new cljs.core.Keyword(null,\"avg\",\"avg\",197406200),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [x], null));\n});\n/**\n * Inputs: ([x])\n *   Return: :mbql.clause/distinct\n *        \n * \n *   Create a standalone clause of type `distinct`.\n */\nmetabase.lib.aggregation.distinct = (function metabase$lib$aggregation$distinct(x){\n\nreturn metabase.lib.common.defop_create(new cljs.core.Keyword(null,\"distinct\",\"distinct\",-1788879121),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [x], null));\n});\n/**\n * Inputs: ([x])\n *   Return: :mbql.clause/max\n *        \n * \n *   Create a standalone clause of type `max`.\n */\nmetabase.lib.aggregation.max = (function metabase$lib$aggregation$max(x){\n\nreturn metabase.lib.common.defop_create(new cljs.core.Keyword(null,\"max\",\"max\",61366548),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [x], null));\n});\n/**\n * Inputs: ([x])\n *   Return: :mbql.clause/median\n *        \n * \n *   Create a standalone clause of type `median`.\n */\nmetabase.lib.aggregation.median = (function metabase$lib$aggregation$median(x){\n\nreturn metabase.lib.common.defop_create(new cljs.core.Keyword(null,\"median\",\"median\",569566131),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [x], null));\n});\n/**\n * Inputs: ([x])\n *   Return: :mbql.clause/min\n *        \n * \n *   Create a standalone clause of type `min`.\n */\nmetabase.lib.aggregation.min = (function metabase$lib$aggregation$min(x){\n\nreturn metabase.lib.common.defop_create(new cljs.core.Keyword(null,\"min\",\"min\",444991522),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [x], null));\n});\n/**\n * Inputs: ([x y])\n *   Return: :mbql.clause/percentile\n *        \n * \n *   Create a standalone clause of type `percentile`.\n */\nmetabase.lib.aggregation.percentile = (function metabase$lib$aggregation$percentile(x,y){\n\nreturn metabase.lib.common.defop_create(new cljs.core.Keyword(null,\"percentile\",\"percentile\",-601188752),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [x,y], null));\n});\n/**\n * Inputs: ([x])\n *   Return: :mbql.clause/share\n *        \n * \n *   Create a standalone clause of type `share`.\n */\nmetabase.lib.aggregation.share = (function metabase$lib$aggregation$share(x){\n\nreturn metabase.lib.common.defop_create(new cljs.core.Keyword(null,\"share\",\"share\",-589433933),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [x], null));\n});\n/**\n * Inputs: ([x])\n *   Return: :mbql.clause/stddev\n *        \n * \n *   Create a standalone clause of type `stddev`.\n */\nmetabase.lib.aggregation.stddev = (function metabase$lib$aggregation$stddev(x){\n\nreturn metabase.lib.common.defop_create(new cljs.core.Keyword(null,\"stddev\",\"stddev\",-865474939),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [x], null));\n});\n/**\n * Inputs: ([x])\n *   Return: :mbql.clause/sum\n *        \n * \n *   Create a standalone clause of type `sum`.\n */\nmetabase.lib.aggregation.sum = (function metabase$lib$aggregation$sum(x){\n\nreturn metabase.lib.common.defop_create(new cljs.core.Keyword(null,\"sum\",\"sum\",136986814),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [x], null));\n});\n/**\n * Inputs: ([x])\n *   Return: :mbql.clause/cum-sum\n *        \n * \n *   Create a standalone clause of type `cum-sum`.\n */\nmetabase.lib.aggregation.cum_sum = (function metabase$lib$aggregation$cum_sum(x){\n\nreturn metabase.lib.common.defop_create(new cljs.core.Keyword(null,\"cum-sum\",\"cum-sum\",2064902349),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [x], null));\n});\n/**\n * Inputs: ([x y])\n *   Return: :mbql.clause/sum-where\n *        \n * \n *   Create a standalone clause of type `sum-where`.\n */\nmetabase.lib.aggregation.sum_where = (function metabase$lib$aggregation$sum_where(x,y){\n\nreturn metabase.lib.common.defop_create(new cljs.core.Keyword(null,\"sum-where\",\"sum-where\",2135348428),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [x,y], null));\n});\n/**\n * Inputs: ([x])\n *   Return: :mbql.clause/var\n *        \n * \n *   Create a standalone clause of type `var`.\n */\nmetabase.lib.aggregation.var$ = (function metabase$lib$aggregation$var(x){\n\nreturn metabase.lib.common.defop_create(new cljs.core.Keyword(null,\"var\",\"var\",-769682797),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [x], null));\n});\nmetabase.lib.ref.ref_method.cljs$core$IMultiFn$_add_method$arity$3(null,new cljs.core.Keyword(null,\"aggregation\",\"aggregation\",1597476696),(function (aggregation_clause){\nreturn aggregation_clause;\n}));\n/**\n * Schema for something you can pass to [[aggregate]] to add to a query as an aggregation.\n */\nmetabase.lib.aggregation.Aggregatable = new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"or\",\"or\",235744169),new cljs.core.Keyword(\"metabase.lib.schema.aggregation\",\"aggregation\",\"metabase.lib.schema.aggregation/aggregation\",-736862750),new cljs.core.Keyword(\"metabase.lib.schema.common\",\"external-op\",\"metabase.lib.schema.common/external-op\",1918684841),metabase.lib.metadata.MetricMetadata], null);\n/**\n * Inputs: ([query aggregatable]\n *         [query :- :metabase.lib.schema/query stage-number :- :int aggregatable :- Aggregatable])\n *   Return: :metabase.lib.schema/query\n *        \n * \n *   Adds an aggregation to query.\n */\nmetabase.lib.aggregation.aggregate = (function metabase$lib$aggregation$aggregate(var_args){\nvar G__63175 = arguments.length;\nswitch (G__63175) {\ncase 2:\nreturn metabase.lib.aggregation.aggregate.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ncase 3:\nreturn metabase.lib.aggregation.aggregate.cljs$core$IFn$_invoke$arity$3((arguments[(0)]),(arguments[(1)]),(arguments[(2)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\n(metabase.lib.aggregation.aggregate.cljs$core$IFn$_invoke$arity$2 = (function (query,aggregatable){\n\nreturn metabase.lib.aggregation.aggregate.cljs$core$IFn$_invoke$arity$3(query,(-1),aggregatable);\n}));\n\n(metabase.lib.aggregation.aggregate.cljs$core$IFn$_invoke$arity$3 = (function (query,stage_number,aggregatable){\nwhile(true){\n\nif(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(metabase.lib.dispatch.dispatch_value(aggregatable),new cljs.core.Keyword(\"metadata\",\"metric\",\"metadata/metric\",538003406))){\nvar G__63503 = query;\nvar G__63504 = stage_number;\nvar G__63505 = metabase.lib.ref.ref(aggregatable);\nquery = G__63503;\nstage_number = G__63504;\naggregatable = G__63505;\ncontinue;\n} else {\nreturn metabase.lib.util.add_summary_clause(query,stage_number,new cljs.core.Keyword(null,\"aggregation\",\"aggregation\",1597476696),aggregatable);\n}\nbreak;\n}\n}));\n\n(metabase.lib.aggregation.aggregate.cljs$lang$maxFixedArity = 3);\n\n/**\n * Inputs: ([query]\n *         [query :- :metabase.lib.schema/query stage-number :- :int])\n *   Return: [:maybe [:sequential :metabase.lib.schema.aggregation/aggregation]]\n *        \n * \n *   Get the aggregations in a given stage of a query.\n */\nmetabase.lib.aggregation.aggregations = (function metabase$lib$aggregation$aggregations(var_args){\nvar G__63268 = arguments.length;\nswitch (G__63268) {\ncase 1:\nreturn metabase.lib.aggregation.aggregations.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\n\nbreak;\ncase 2:\nreturn metabase.lib.aggregation.aggregations.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\n(metabase.lib.aggregation.aggregations.cljs$core$IFn$_invoke$arity$1 = (function (query){\n\nreturn metabase.lib.aggregation.aggregations.cljs$core$IFn$_invoke$arity$2(query,(-1));\n}));\n\n(metabase.lib.aggregation.aggregations.cljs$core$IFn$_invoke$arity$2 = (function (query,stage_number){\n\nreturn cljs.core.not_empty(new cljs.core.Keyword(null,\"aggregation\",\"aggregation\",1597476696).cljs$core$IFn$_invoke$arity$1(metabase.lib.util.query_stage(query,stage_number)));\n}));\n\n(metabase.lib.aggregation.aggregations.cljs$lang$maxFixedArity = 2);\n\n/**\n * Inputs: ([query]\n *         [query :- :metabase.lib.schema/query stage-number :- :int])\n *   Return: [:maybe [:sequential lib.metadata/ColumnMetadata]]\n *        \n * \n *   Get metadata about the aggregations in a given stage of a query.\n */\nmetabase.lib.aggregation.aggregations_metadata = (function metabase$lib$aggregation$aggregations_metadata(var_args){\nvar G__63301 = arguments.length;\nswitch (G__63301) {\ncase 1:\nreturn metabase.lib.aggregation.aggregations_metadata.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\n\nbreak;\ncase 2:\nreturn metabase.lib.aggregation.aggregations_metadata.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\n(metabase.lib.aggregation.aggregations_metadata.cljs$core$IFn$_invoke$arity$1 = (function (query){\n\nreturn metabase.lib.aggregation.aggregations_metadata.cljs$core$IFn$_invoke$arity$2(query,(-1));\n}));\n\n(metabase.lib.aggregation.aggregations_metadata.cljs$core$IFn$_invoke$arity$2 = (function (query,stage_number){\n\nvar G__63302 = cljs.core.not_empty(new cljs.core.Keyword(null,\"aggregation\",\"aggregation\",1597476696).cljs$core$IFn$_invoke$arity$1(metabase.lib.util.query_stage(query,stage_number)));\nif((G__63302 == null)){\nreturn null;\n} else {\nreturn cljs.core.into.cljs$core$IFn$_invoke$arity$3(cljs.core.PersistentVector.EMPTY,cljs.core.map.cljs$core$IFn$_invoke$arity$1((function (aggregation){\nvar metadata = metabase.lib.metadata.calculation.metadata.cljs$core$IFn$_invoke$arity$3(query,stage_number,aggregation);\nreturn cljs.core.assoc.cljs$core$IFn$_invoke$arity$variadic(metabase.util.assoc_default.cljs$core$IFn$_invoke$arity$3(metadata,new cljs.core.Keyword(null,\"effective-type\",\"effective-type\",-355725458),(function (){var or__5045__auto__ = new cljs.core.Keyword(null,\"base-type\",\"base-type\",1167971299).cljs$core$IFn$_invoke$arity$1(metadata);\nif(cljs.core.truth_(or__5045__auto__)){\nreturn or__5045__auto__;\n} else {\nreturn new cljs.core.Keyword(\"type\",\"*\",\"type/*\",-1283496752);\n}\n})()),new cljs.core.Keyword(\"lib\",\"source\",\"lib/source\",-434086550),new cljs.core.Keyword(\"source\",\"aggregations\",\"source/aggregations\",-1828710137),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(\"lib\",\"source-uuid\",\"lib/source-uuid\",1828897581),new cljs.core.Keyword(\"lib\",\"uuid\",\"lib/uuid\",-2145250720).cljs$core$IFn$_invoke$arity$1(cljs.core.second(aggregation))], 0));\n})),G__63302);\n}\n}));\n\n(metabase.lib.aggregation.aggregations_metadata.cljs$lang$maxFixedArity = 2);\n\nmetabase.lib.aggregation.OperatorWithColumns = new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"merge\",\"merge\",-1804319409),new cljs.core.Keyword(\"metabase.lib.schema.aggregation\",\"operator\",\"metabase.lib.schema.aggregation/operator\",2070038764),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"map\",\"map\",1371690461),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"columns\",\"columns\",1998437288),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"optional\",\"optional\",2053951509),true], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"sequential\",\"sequential\",-1082983960),metabase.lib.metadata.ColumnMetadata], null)], null)], null)], null);\nmetabase.lib.metadata.calculation.display_name_method.cljs$core$IMultiFn$_add_method$arity$3(null,new cljs.core.Keyword(\"operator\",\"aggregation\",\"operator/aggregation\",-1961510924),(function (_query,_stage_number,p__63303,_display_name_style){\nvar map__63304 = p__63303;\nvar map__63304__$1 = cljs.core.__destructure_map(map__63304);\nvar display_info = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__63304__$1,new cljs.core.Keyword(null,\"display-info\",\"display-info\",-816930907));\nreturn new cljs.core.Keyword(null,\"display-name\",\"display-name\",694513143).cljs$core$IFn$_invoke$arity$1((display_info.cljs$core$IFn$_invoke$arity$0 ? display_info.cljs$core$IFn$_invoke$arity$0() : display_info.call(null)));\n}));\nmetabase.lib.metadata.calculation.display_info_method.cljs$core$IMultiFn$_add_method$arity$3(null,new cljs.core.Keyword(\"operator\",\"aggregation\",\"operator/aggregation\",-1961510924),(function (_query,_stage_number,p__63305){\nvar map__63306 = p__63305;\nvar map__63306__$1 = cljs.core.__destructure_map(map__63306);\nvar short_name = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__63306__$1,new cljs.core.Keyword(null,\"short\",\"short\",1928760516));\nvar display_info = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__63306__$1,new cljs.core.Keyword(null,\"display-info\",\"display-info\",-816930907));\nvar requires_column_QMARK_ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__63306__$1,new cljs.core.Keyword(null,\"requires-column?\",\"requires-column?\",1623131448));\nvar selected_QMARK_ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__63306__$1,new cljs.core.Keyword(null,\"selected?\",\"selected?\",-742502788));\nvar G__63319 = cljs.core.assoc.cljs$core$IFn$_invoke$arity$variadic((display_info.cljs$core$IFn$_invoke$arity$0 ? display_info.cljs$core$IFn$_invoke$arity$0() : display_info.call(null)),new cljs.core.Keyword(null,\"short-name\",\"short-name\",-1767085022),metabase.util.qualified_name(short_name),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"requires-column\",\"requires-column\",934105295),requires_column_QMARK_], 0));\nif((!((selected_QMARK_ == null)))){\nreturn cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__63319,new cljs.core.Keyword(null,\"selected\",\"selected\",574897764),selected_QMARK_);\n} else {\nreturn G__63319;\n}\n}));\n/**\n * Inputs: [aggregation-operator :- OperatorWithColumns]\n *   Return: [:maybe [:sequential lib.metadata/ColumnMetadata]]\n *        \n * \n *   Returns the columns for which `aggregation-operator` is applicable.\n */\nmetabase.lib.aggregation.aggregation_operator_columns = (function metabase$lib$aggregation$aggregation_operator_columns(aggregation_operator){\n\nreturn new cljs.core.Keyword(null,\"columns\",\"columns\",1998437288).cljs$core$IFn$_invoke$arity$1(aggregation_operator);\n});\n/**\n * Inputs: ([query]\n *         [query :- :metabase.lib.schema/query stage-number :- :int])\n *   Return: [:maybe [:sequential OperatorWithColumns]]\n *        \n * \n *   Returns the available aggegation operators for the stage with `stage-number` of `query`.\n *   If `stage-number` is omitted, uses the last stage.\n */\nmetabase.lib.aggregation.available_aggregation_operators = (function metabase$lib$aggregation$available_aggregation_operators(var_args){\nvar G__63336 = arguments.length;\nswitch (G__63336) {\ncase 1:\nreturn metabase.lib.aggregation.available_aggregation_operators.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\n\nbreak;\ncase 2:\nreturn metabase.lib.aggregation.available_aggregation_operators.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\n(metabase.lib.aggregation.available_aggregation_operators.cljs$core$IFn$_invoke$arity$1 = (function (query){\n\nreturn metabase.lib.aggregation.available_aggregation_operators.cljs$core$IFn$_invoke$arity$2(query,(-1));\n}));\n\n(metabase.lib.aggregation.available_aggregation_operators.cljs$core$IFn$_invoke$arity$2 = (function (query,stage_number){\n\nvar db_features = (function (){var or__5045__auto__ = new cljs.core.Keyword(null,\"features\",\"features\",-1146962336).cljs$core$IFn$_invoke$arity$1(metabase.lib.metadata.database(query));\nif(cljs.core.truth_(or__5045__auto__)){\nreturn or__5045__auto__;\n} else {\nreturn cljs.core.PersistentHashSet.EMPTY;\n}\n})();\nvar stage = metabase.lib.util.query_stage(query,stage_number);\nvar columns = metabase.lib.metadata.calculation.visible_columns.cljs$core$IFn$_invoke$arity$3(query,stage_number,stage);\nvar with_columns = (function (p__63354){\nvar map__63355 = p__63354;\nvar map__63355__$1 = cljs.core.__destructure_map(map__63355);\nvar operator = map__63355__$1;\nvar requires_column_QMARK_ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__63355__$1,new cljs.core.Keyword(null,\"requires-column?\",\"requires-column?\",1623131448));\nvar supported_field = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__63355__$1,new cljs.core.Keyword(null,\"supported-field\",\"supported-field\",-2061545519));\nif(cljs.core.not(requires_column_QMARK_)){\nreturn operator;\n} else {\nif(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(supported_field,new cljs.core.Keyword(null,\"any\",\"any\",1705907423))){\nreturn cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(operator,new cljs.core.Keyword(null,\"columns\",\"columns\",1998437288),columns);\n} else {\nvar temp__5804__auto__ = cljs.core.not_empty(cljs.core.filterv((function (p1__63323_SHARP_){\nreturn metabase.lib.types.isa.field_type_QMARK_(supported_field,p1__63323_SHARP_);\n}),columns));\nif(cljs.core.truth_(temp__5804__auto__)){\nvar cols = temp__5804__auto__;\nreturn cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(operator,new cljs.core.Keyword(null,\"columns\",\"columns\",1998437288),cols);\n} else {\nreturn null;\n}\n\n}\n}\n});\nreturn cljs.core.not_empty(cljs.core.into.cljs$core$IFn$_invoke$arity$3(cljs.core.PersistentVector.EMPTY,cljs.core.comp.cljs$core$IFn$_invoke$arity$3(cljs.core.filter.cljs$core$IFn$_invoke$arity$1((function (op){\nvar feature = new cljs.core.Keyword(null,\"driver-feature\",\"driver-feature\",1905324248).cljs$core$IFn$_invoke$arity$1(op);\nvar or__5045__auto__ = (feature == null);\nif(or__5045__auto__){\nreturn or__5045__auto__;\n} else {\nreturn (db_features.cljs$core$IFn$_invoke$arity$1 ? db_features.cljs$core$IFn$_invoke$arity$1(feature) : db_features.call(null,feature));\n}\n})),cljs.core.keep.cljs$core$IFn$_invoke$arity$1(with_columns),cljs.core.map.cljs$core$IFn$_invoke$arity$1((function (p1__63324_SHARP_){\nreturn cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(p1__63324_SHARP_,new cljs.core.Keyword(\"lib\",\"type\",\"lib/type\",1175424801),new cljs.core.Keyword(\"operator\",\"aggregation\",\"operator/aggregation\",-1961510924));\n}))),metabase.lib.schema.aggregation.aggregation_operators));\n}));\n\n(metabase.lib.aggregation.available_aggregation_operators.cljs$lang$maxFixedArity = 2);\n\n/**\n * Inputs: ([aggregation-operator :- :metabase.lib.schema.aggregation/operator]\n *         [aggregation-operator :- :metabase.lib.schema.aggregation/operator column])\n *   Return: :metabase.lib.schema.aggregation/aggregation\n *        \n * \n *   Returns a standalone aggregation clause for an `aggregation-operator` and\n *   a `column`.\n *   For aggregations requiring an argument `column` is mandatory, otherwise\n *   it is optional.\n */\nmetabase.lib.aggregation.aggregation_clause = (function metabase$lib$aggregation$aggregation_clause(var_args){\nvar G__63383 = arguments.length;\nswitch (G__63383) {\ncase 1:\nreturn metabase.lib.aggregation.aggregation_clause.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\n\nbreak;\ncase 2:\nreturn metabase.lib.aggregation.aggregation_clause.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\n(metabase.lib.aggregation.aggregation_clause.cljs$core$IFn$_invoke$arity$1 = (function (aggregation_operator){\n\nif(cljs.core.not(new cljs.core.Keyword(null,\"requires-column?\",\"requires-column?\",1623131448).cljs$core$IFn$_invoke$arity$1(aggregation_operator))){\nreturn metabase.lib.options.ensure_uuid(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"short\",\"short\",1928760516).cljs$core$IFn$_invoke$arity$1(aggregation_operator),cljs.core.PersistentArrayMap.EMPTY], null));\n} else {\nthrow cljs.core.ex_info.cljs$core$IFn$_invoke$arity$2((function (){var G__63384 = \"aggregation operator %s requires an argument\";\nvar G__63385 = new cljs.core.Keyword(null,\"short\",\"short\",1928760516).cljs$core$IFn$_invoke$arity$1(aggregation_operator);\nreturn (metabase.lib.util.format.cljs$core$IFn$_invoke$arity$2 ? metabase.lib.util.format.cljs$core$IFn$_invoke$arity$2(G__63384,G__63385) : metabase.lib.util.format.call(null,G__63384,G__63385));\n})(),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"aggregation-operator\",\"aggregation-operator\",-1978700834),aggregation_operator], null));\n}\n}));\n\n(metabase.lib.aggregation.aggregation_clause.cljs$core$IFn$_invoke$arity$2 = (function (aggregation_operator,column){\n\nreturn metabase.lib.options.ensure_uuid(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"short\",\"short\",1928760516).cljs$core$IFn$_invoke$arity$1(aggregation_operator),cljs.core.PersistentArrayMap.EMPTY,metabase.lib.common.__GT_op_arg.cljs$core$IFn$_invoke$arity$1(column)], null));\n}));\n\n(metabase.lib.aggregation.aggregation_clause.cljs$lang$maxFixedArity = 2);\n\nmetabase.lib.aggregation.SelectedOperatorWithColumns = new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"merge\",\"merge\",-1804319409),new cljs.core.Keyword(\"metabase.lib.schema.aggregation\",\"operator\",\"metabase.lib.schema.aggregation/operator\",2070038764),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"map\",\"map\",1371690461),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"columns\",\"columns\",1998437288),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"optional\",\"optional\",2053951509),true], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"sequential\",\"sequential\",-1082983960),metabase.lib.metadata.ColumnMetadata], null)], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"selected?\",\"selected?\",-742502788),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"optional\",\"optional\",2053951509),true], null),new cljs.core.Keyword(null,\"boolean\",\"boolean\",-1919418404)], null)], null)], null);\n/**\n * Inputs: [agg-operators :- [:maybe [:sequential OperatorWithColumns]] agg-clause]\n *   Return: [:maybe [:sequential SelectedOperatorWithColumns]]\n *        \n * \n *   Mark the operator and the column (if any) in `agg-operators` selected by `agg-clause`.\n */\nmetabase.lib.aggregation.selected_aggregation_operators = (function metabase$lib$aggregation$selected_aggregation_operators(agg_operators,agg_clause){\n\nif(cljs.core.seq(agg_operators)){\nvar vec__63399 = agg_clause;\nvar op = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__63399,(0),null);\nvar _ = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__63399,(1),null);\nvar agg_col = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__63399,(2),null);\nvar agg_temporal_unit = new cljs.core.Keyword(null,\"temporal-unit\",\"temporal-unit\",-1892306358).cljs$core$IFn$_invoke$arity$1(metabase.lib.options.options(agg_col));\nreturn cljs.core.mapv.cljs$core$IFn$_invoke$arity$2((function (agg_op){\nvar G__63402 = agg_op;\nif(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(new cljs.core.Keyword(null,\"short\",\"short\",1928760516).cljs$core$IFn$_invoke$arity$1(agg_op),op)){\nreturn medley.core.update_existing.cljs$core$IFn$_invoke$arity$3(cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__63402,new cljs.core.Keyword(null,\"selected?\",\"selected?\",-742502788),true),new cljs.core.Keyword(null,\"columns\",\"columns\",1998437288),(function (cols){\nvar refs = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(metabase.lib.ref.ref,cols);\nvar match = metabase.lib.equality.find_closest_matching_ref.cljs$core$IFn$_invoke$arity$2(metabase.lib.options.update_options.cljs$core$IFn$_invoke$arity$variadic(agg_col,cljs.core.dissoc,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"temporal-unit\",\"temporal-unit\",-1892306358)], 0)),refs);\nif(cljs.core.truth_(match)){\nreturn cljs.core.mapv.cljs$core$IFn$_invoke$arity$3((function (r,c){\nvar G__63407 = c;\nvar G__63407__$1 = ((cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(r,match))?cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__63407,new cljs.core.Keyword(null,\"selected?\",\"selected?\",-742502788),true):G__63407);\nif((!((agg_temporal_unit == null)))){\nreturn metabase.lib.temporal_bucket.with_temporal_bucket(G__63407__$1,agg_temporal_unit);\n} else {\nreturn G__63407__$1;\n}\n}),refs,cols);\n} else {\nreturn cols;\n}\n}));\n} else {\nreturn G__63402;\n}\n}),agg_operators);\n} else {\nreturn null;\n}\n});\n/**\n * Inputs: ([query ag-index]\n *         [query :- :metabase.lib.schema/query stage-number :- :int ag-index :- :metabase.lib.schema.common/int-greater-than-or-equal-to-zero])\n *   Return: :mbql.clause/aggregation\n *        \n * \n *   Find the aggregation at `ag-index` and create an `:aggregation` ref for it. Intended for use\n *   when creating queries using threading macros e.g.\n * \n *  (-> (lib/query ...)\n *      (lib/aggregate (lib/avg ...))\n *      (as-> <> (lib/order-by <> (lib/aggregation-ref <> 0))))\n */\nmetabase.lib.aggregation.aggregation_ref = (function metabase$lib$aggregation$aggregation_ref(var_args){\nvar G__63413 = arguments.length;\nswitch (G__63413) {\ncase 2:\nreturn metabase.lib.aggregation.aggregation_ref.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ncase 3:\nreturn metabase.lib.aggregation.aggregation_ref.cljs$core$IFn$_invoke$arity$3((arguments[(0)]),(arguments[(1)]),(arguments[(2)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\n(metabase.lib.aggregation.aggregation_ref.cljs$core$IFn$_invoke$arity$2 = (function (query,ag_index){\n\nreturn metabase.lib.aggregation.aggregation_ref.cljs$core$IFn$_invoke$arity$3(query,(-1),ag_index);\n}));\n\n(metabase.lib.aggregation.aggregation_ref.cljs$core$IFn$_invoke$arity$3 = (function (query,stage_number,ag_index){\n\nvar temp__5802__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(new cljs.core.Keyword(null,\"aggregation\",\"aggregation\",1597476696).cljs$core$IFn$_invoke$arity$1(metabase.lib.util.query_stage(query,stage_number)),ag_index);\nif(cljs.core.truth_(temp__5802__auto__)){\nvar vec__63417 = temp__5802__auto__;\nvar _ = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__63417,(0),null);\nvar map__63420 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__63417,(1),null);\nvar map__63420__$1 = cljs.core.__destructure_map(map__63420);\nvar ag_uuid = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__63420__$1,new cljs.core.Keyword(\"lib\",\"uuid\",\"lib/uuid\",-2145250720));\nreturn metabase.lib.options.ensure_uuid(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"aggregation\",\"aggregation\",1597476696),cljs.core.PersistentArrayMap.EMPTY,ag_uuid], null));\n} else {\nthrow cljs.core.ex_info.cljs$core$IFn$_invoke$arity$2([\"Undefined aggregation \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(ag_index)].join(''),new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null,\"aggregation-index\",\"aggregation-index\",-1057045587),ag_index,new cljs.core.Keyword(null,\"query\",\"query\",-1288509510),query,new cljs.core.Keyword(null,\"stage-number\",\"stage-number\",-1752729638),stage_number], null));\n}\n}));\n\n(metabase.lib.aggregation.aggregation_ref.cljs$lang$maxFixedArity = 3);\n\n","~:ns-info",["^ ","~:rename-macros",null,"~:renames",["^ "],"~:meta",["^ ","~:file","metabase/lib/aggregation.cljc","~:line",1,"~:column",5,"~:end-line",1,"~:end-column",29],"~:ns-aliases",["^ ","~$cljs.loader","~$shadow.loader","~$clojure.core","~$cljs.core","~$clojure.spec.gen.alpha","~$cljs.spec.gen.alpha","~$clojure.pprint","~$cljs.pprint","~$clojure.core.match","~$cljs.core.match"],"~:use-macros",null,"~:excludes",["~#set",["~$min","~$distinct","~$var","~$max","~$count"]],"~:name","~$metabase.lib.aggregation","~:reader-aliases",["^ "],"~:op","~:ns","~:imports",null,"~:requires",["^ ","~$metabase.lib.schema","^U","~$mu","~$metabase.util.malli","~$metabase.lib.metadata.calculation","^X","~$metabase.lib.equality","^Y","~$metabase.lib.metadata","^Z","~$lib.equality","^Y","~$i18n","~$metabase.shared.util.i18n","~$lib.schema.common","~$metabase.lib.schema.common","~$u","~$metabase.util","~$lib.schema.aggregation","~$metabase.lib.schema.aggregation","~$lib.metadata","^Z","~$lib.common","~$metabase.lib.common","^?","^?","~$metabase.lib.ref","^1:","~$metabase.lib.util","^1;","~$goog","^1<","~$lib.schema","^U","^13","^13","~$lib.options","~$metabase.lib.options","~$lib.hierarchy","~$metabase.lib.hierarchy","~$metabase.lib.temporal-bucket","^1B","~$m","~$medley.core","^14","^14","~$lib.ref","^1:","^19","^19","^11","^11","~$lib.util","^1;","~$lib.dispatch","~$metabase.lib.dispatch","~$metabase.lib.types.isa","^1H","^W","^W","~$lib.metadata.calculation","^X","~$lib.types.isa","^1H","~$lib.temporal-bucket","^1B","^1A","^1A","^1?","^1?","^16","^16","^1G","^1G","^1C","^1C"],"~:seen",["^H",["~:require"]],"~:uses",null,"~:require-macros",["^ ","^V","^W","^10","^11","~$u","^14","^18","^19","^?","^?","^14","^14","^19","^19","^11","^11","^W","^W"],"~:form",["~#list",["~$ns","^O",["^1Q",["~:refer-clojure","~:exclude",["^M","^J","^L","^I","^K"]]],["^1Q",["^1M",["^1C","~:as","~$m"],["^19","^1U","^18"],["^1G","^1U","^1F"],["^Y","^1U","^["],["^1A","^1U","^1@"],["^Z","^1U","^17"],["^X","^1U","^1I"],["^1?","^1U","^1>"],["^1:","^1U","^1D"],["^U","^1U","^1="],["^16","^1U","^15"],["^13","^1U","^12"],["^1B","^1U","^1K"],["^1H","^1U","^1J"],["^1;","^1U","^1E"],["^11","^1U","^10"],["^14","^1U","~$u"],["^W","^1U","^V"]]]]],"~:flags",["^ ","^1M",["^H",[]]],"~:js-deps",["^ "],"~:deps",["^1<","^?","^1C","^19","^1G","^Y","^1A","^Z","^X","^1?","^1:","^U","^16","^13","^1B","^1H","^1;","^11","^14","^W"]],"^R","^O","~:resource-id",["~:shadow.build.classpath/resource","metabase/lib/aggregation.cljc"],"~:compiled-at",1692612545800,"^P",["^ ","^U","^U","^V","^W","^X","^X","^Y","^Y","^Z","^Z","^[","^Y","^10","^11","^12","^13","~$u","^14","^15","^16","^17","^Z","^18","^19","^?","^?","^1:","^1:","^1;","^1;","^1<","^1<","^1=","^U","^13","^13","^1>","^1?","^1@","^1A","^1B","^1B","~$m","^1C","^14","^14","^1D","^1:","^19","^19","^11","^11","^1E","^1;","^1F","^1G","^1H","^1H","^W","^W","^1I","^X","^1J","^1H","^1K","^1B","^1A","^1A","^1?","^1?","^16","^16","^1G","^1G","^1C","^1C"],"~:resource-name","metabase/lib/aggregation.cljc","~:warnings",[],"~:source","(ns metabase.lib.aggregation\n  (:refer-clojure :exclude [count distinct max min var])\n  (:require\n   [medley.core :as m]\n   [metabase.lib.common :as lib.common]\n   [metabase.lib.dispatch :as lib.dispatch]\n   [metabase.lib.equality :as lib.equality]\n   [metabase.lib.hierarchy :as lib.hierarchy]\n   [metabase.lib.metadata :as lib.metadata]\n   [metabase.lib.metadata.calculation :as lib.metadata.calculation]\n   [metabase.lib.options :as lib.options]\n   [metabase.lib.ref :as lib.ref]\n   [metabase.lib.schema :as lib.schema]\n   [metabase.lib.schema.aggregation :as lib.schema.aggregation]\n   [metabase.lib.schema.common :as lib.schema.common]\n   [metabase.lib.temporal-bucket :as lib.temporal-bucket]\n   [metabase.lib.types.isa :as lib.types.isa]\n   [metabase.lib.util :as lib.util]\n   [metabase.shared.util.i18n :as i18n]\n   [metabase.util :as u]\n   [metabase.util.malli :as mu]))\n\n(mu/defn column-metadata->aggregation-ref :- :mbql.clause/aggregation\n  \"Given `:metadata/column` column metadata for an aggregation, construct an `:aggregation` reference.\"\n  [metadata :- lib.metadata/ColumnMetadata]\n  (let [options {:lib/uuid       (str (random-uuid))\n                 :effective-type ((some-fn :effective-type :base-type) metadata)}\n        ag-uuid (:lib/source-uuid metadata)]\n    (assert ag-uuid \"Metadata for an aggregation reference should include :lib/source-uuid\")\n    [:aggregation options ag-uuid]))\n\n(mu/defn resolve-aggregation :- ::lib.schema.aggregation/aggregation\n  \"Resolve an aggregation with a specific `index`.\"\n  [query        :- ::lib.schema/query\n   stage-number :- :int\n   ag-uuid      :- :string]\n  (let [{aggregations :aggregation} (lib.util/query-stage query stage-number)\n        found (m/find-first (comp #{ag-uuid} :lib/uuid second) aggregations)]\n    (when-not found\n      (throw (ex-info (i18n/tru \"No aggregation with uuid {0}\" ag-uuid)\n                      {:uuid         ag-uuid\n                       :query        query\n                       :stage-number stage-number})))\n    found))\n\n(defmethod lib.metadata.calculation/describe-top-level-key-method :aggregation\n  [query stage-number _k]\n  (when-let [aggregations (not-empty (:aggregation (lib.util/query-stage query stage-number)))]\n    (lib.util/join-strings-with-conjunction\n     (i18n/tru \"and\")\n     (for [aggregation aggregations]\n       (lib.metadata.calculation/display-name query stage-number aggregation :long)))))\n\n(defmethod lib.metadata.calculation/metadata-method :aggregation\n  [query stage-number [_ag {:keys [base-type effective-type], :as _opts} index, :as _aggregation-ref]]\n  (let [aggregation (resolve-aggregation query stage-number index)]\n    (merge\n     (lib.metadata.calculation/metadata query stage-number aggregation)\n     {:lib/source :source/aggregations\n      :lib/source-uuid (:lib/uuid (second aggregation))}\n     (when base-type\n       {:base-type base-type})\n     (when effective-type\n       {:effective-type effective-type}))))\n\n;;; TODO -- merge this stuff into `defop` somehow.\n\n(defmethod lib.metadata.calculation/display-name-method :aggregation\n  [query stage-number [_tag _opts index] style]\n  (lib.metadata.calculation/display-name query stage-number (resolve-aggregation query stage-number index) style))\n\n(lib.hierarchy/derive ::count-aggregation ::aggregation)\n\n;;; count and cumulative count can both be used either with no args (count of rows) or with one arg (count of X, which\n;;; I think means count where X is not NULL or something like that. Basically `count(x)` in SQL)\n(doseq [tag [:count\n             :cum-count]]\n  (lib.hierarchy/derive tag ::count-aggregation))\n\n(defmethod lib.metadata.calculation/display-name-method ::count-aggregation\n  [query stage-number [tag _opts x] style]\n  ;; x is optional.\n  (if x\n    (let [x-display-name (lib.metadata.calculation/display-name query stage-number x style)]\n      (case tag\n        :count     (i18n/tru \"Count of {0}\" x-display-name)\n        :cum-count (i18n/tru \"Cumulative count of {0}\" x-display-name)))\n    (case tag\n      :count     (i18n/tru \"Count\")\n      :cum-count (i18n/tru \"Cumulative count\"))))\n\n(defmethod lib.metadata.calculation/column-name-method ::count-aggregation\n  [_query _stage-number [tag :as _clause]]\n  (case tag\n    :count     \"count\"\n    :cum-count \"cum_count\"))\n\n(defmethod lib.metadata.calculation/metadata-method ::count-aggregation\n  [query stage-number clause]\n  (assoc ((get-method lib.metadata.calculation/metadata-method ::aggregation) query stage-number clause)\n         :semantic-type :type/Quantity))\n\n(defmethod lib.metadata.calculation/display-name-method :case\n  [_query _stage-number _case _style]\n  (i18n/tru \"Case\"))\n\n(defmethod lib.metadata.calculation/column-name-method :case\n  [_query _stage-number _case]\n  \"case\")\n\n;;; TODO - Should `:case` derive from `::aggregation` as well???\n\n(lib.hierarchy/derive ::unary-aggregation ::aggregation)\n\n(doseq [tag [:avg\n             :cum-sum\n             :distinct\n             :max\n             :median\n             :min\n             :stddev\n             :sum\n             :var]]\n  (lib.hierarchy/derive tag ::unary-aggregation))\n\n(defmethod lib.metadata.calculation/column-name-method ::unary-aggregation\n  [_query _stage-number [tag _opts _arg]]\n  (case tag\n    :avg       \"avg\"\n    :cum-sum   \"sum\"\n    :distinct  \"count\"\n    :max       \"max\"\n    :median    \"median\"\n    :min       \"min\"\n    :stddev    \"stddev\"\n    :sum       \"sum\"\n    :var       \"var\"))\n\n\n(defmethod lib.metadata.calculation/display-name-method ::unary-aggregation\n  [query stage-number [tag _opts arg] style]\n  (let [arg (lib.metadata.calculation/display-name query stage-number arg style)]\n    (case tag\n      :avg       (i18n/tru \"Average of {0}\"            arg)\n      :cum-sum   (i18n/tru \"Cumulative sum of {0}\"     arg)\n      :distinct  (i18n/tru \"Distinct values of {0}\"    arg)\n      :max       (i18n/tru \"Max of {0}\"                arg)\n      :median    (i18n/tru \"Median of {0}\"             arg)\n      :min       (i18n/tru \"Min of {0}\"                arg)\n      :stddev    (i18n/tru \"Standard deviation of {0}\" arg)\n      :sum       (i18n/tru \"Sum of {0}\"                arg)\n      :var       (i18n/tru \"Variance of {0}\"           arg))))\n\n(defmethod lib.metadata.calculation/display-name-method :percentile\n  [query stage-number [_percentile _opts x p] style]\n  (i18n/tru \"{0}th percentile of {1}\" p (lib.metadata.calculation/display-name query stage-number x style)))\n\n(defmethod lib.metadata.calculation/column-name-method :percentile\n  [_query _stage-number _clause]\n  \"percentile\")\n\n(lib.hierarchy/derive :percentile ::aggregation)\n\n;;; we don't currently have sophisticated logic for generating nice display names for filter clauses.\n;;;\n;;; TODO : wait a minute, we do have that stuff now!\n\n(defmethod lib.metadata.calculation/display-name-method :sum-where\n  [query stage-number [_sum-where _opts x _pred] style]\n  (i18n/tru \"Sum of {0} matching condition\" (lib.metadata.calculation/display-name query stage-number x style)))\n\n(defmethod lib.metadata.calculation/column-name-method :sum-where\n  [query stage-number [_sum-where _opts x _pred]]\n  (str \"sum_where_\" (lib.metadata.calculation/column-name query stage-number x)))\n\n(lib.hierarchy/derive :sum-where ::aggregation)\n\n(defmethod lib.metadata.calculation/display-name-method :share\n  [_query _stage-number _share _style]\n  (i18n/tru \"Share of rows matching condition\"))\n\n(defmethod lib.metadata.calculation/column-name-method :share\n  [_query _stage-number _share]\n  \"share\")\n\n(lib.hierarchy/derive :share ::aggregation)\n\n(defmethod lib.metadata.calculation/display-name-method :count-where\n  [_query _stage-number _count-where _style]\n  (i18n/tru \"Count of rows matching condition\"))\n\n(defmethod lib.metadata.calculation/column-name-method :count-where\n  [_query _stage-number _count-where]\n  \"count-where\")\n\n(lib.hierarchy/derive :count-where ::aggregation)\n\n(defmethod lib.metadata.calculation/metadata-method ::aggregation\n  [query stage-number [_tag _opts first-arg :as clause]]\n  (merge\n   ;; flow the `:options` from the field we're aggregating. This is important, for some reason.\n   ;; See [[metabase.query-processor-test.aggregation-test/field-settings-for-aggregate-fields-test]]\n   (when first-arg\n     (select-keys (lib.metadata.calculation/metadata query stage-number first-arg) [:settings]))\n   ((get-method lib.metadata.calculation/metadata-method :default) query stage-number clause)))\n\n(lib.common/defop count       [] [x])\n(lib.common/defop cum-count   [] [x])\n(lib.common/defop count-where [x y])\n(lib.common/defop avg         [x])\n(lib.common/defop distinct    [x])\n(lib.common/defop max         [x])\n(lib.common/defop median      [x])\n(lib.common/defop min         [x])\n(lib.common/defop percentile  [x y])\n(lib.common/defop share       [x])\n(lib.common/defop stddev      [x])\n(lib.common/defop sum         [x])\n(lib.common/defop cum-sum     [x])\n(lib.common/defop sum-where   [x y])\n(lib.common/defop var         [x])\n\n(defmethod lib.ref/ref-method :aggregation\n  [aggregation-clause]\n  aggregation-clause)\n\n(def ^:private Aggregatable\n  \"Schema for something you can pass to [[aggregate]] to add to a query as an aggregation.\"\n  [:or\n   ::lib.schema.aggregation/aggregation\n   ::lib.schema.common/external-op\n   lib.metadata/MetricMetadata])\n\n(mu/defn aggregate :- ::lib.schema/query\n  \"Adds an aggregation to query.\"\n  ([query aggregatable]\n   (aggregate query -1 aggregatable))\n\n  ([query        :- ::lib.schema/query\n    stage-number :- :int\n    aggregatable :- Aggregatable]\n   ;; if this is a Metric metadata, convert it to `:metric` MBQL clause before adding.\n   (if (= (lib.dispatch/dispatch-value aggregatable) :metadata/metric)\n     (recur query stage-number (lib.ref/ref aggregatable))\n     (lib.util/add-summary-clause query stage-number :aggregation aggregatable))))\n\n(mu/defn aggregations :- [:maybe [:sequential ::lib.schema.aggregation/aggregation]]\n  \"Get the aggregations in a given stage of a query.\"\n  ([query]\n   (aggregations query -1))\n\n  ([query        :- ::lib.schema/query\n    stage-number :- :int]\n   (not-empty (:aggregation (lib.util/query-stage query stage-number)))))\n\n(mu/defn aggregations-metadata :- [:maybe [:sequential lib.metadata/ColumnMetadata]]\n  \"Get metadata about the aggregations in a given stage of a query.\"\n  ([query]\n   (aggregations-metadata query -1))\n\n  ([query        :- ::lib.schema/query\n    stage-number :- :int]\n   (some->> (not-empty (:aggregation (lib.util/query-stage query stage-number)))\n            (into [] (map (fn [aggregation]\n                            (let [metadata (lib.metadata.calculation/metadata query stage-number aggregation)]\n                              (-> metadata\n                                  (u/assoc-default :effective-type (or (:base-type metadata) :type/*))\n                                  (assoc :lib/source :source/aggregations\n                                         :lib/source-uuid (:lib/uuid (second aggregation)))))))))))\n\n(def ^:private OperatorWithColumns\n  [:merge\n   ::lib.schema.aggregation/operator\n   [:map\n    [:columns {:optional true} [:sequential lib.metadata/ColumnMetadata]]]])\n\n(defmethod lib.metadata.calculation/display-name-method :operator/aggregation\n  [_query _stage-number {:keys [display-info]} _display-name-style]\n  (:display-name (display-info)))\n\n(defmethod lib.metadata.calculation/display-info-method :operator/aggregation\n  [_query _stage-number {:keys [display-info requires-column? selected?] short-name :short}]\n  (cond-> (assoc (display-info)\n                 :short-name (u/qualified-name short-name)\n                 :requires-column requires-column?)\n    (some? selected?) (assoc :selected selected?)))\n\n(mu/defn aggregation-operator-columns :- [:maybe [:sequential lib.metadata/ColumnMetadata]]\n  \"Returns the columns for which `aggregation-operator` is applicable.\"\n  [aggregation-operator :- OperatorWithColumns]\n  (:columns aggregation-operator))\n\n(mu/defn available-aggregation-operators :- [:maybe [:sequential OperatorWithColumns]]\n  \"Returns the available aggegation operators for the stage with `stage-number` of `query`.\n  If `stage-number` is omitted, uses the last stage.\"\n  ([query]\n   (available-aggregation-operators query -1))\n\n  ([query :- ::lib.schema/query\n    stage-number :- :int]\n   (let [db-features (or (:features (lib.metadata/database query)) #{})\n         stage (lib.util/query-stage query stage-number)\n         columns (lib.metadata.calculation/visible-columns query stage-number stage)\n         with-columns (fn [{:keys [requires-column? supported-field] :as operator}]\n                        (cond\n                          (not requires-column?)\n                          operator\n\n                          (= supported-field :any)\n                          (assoc operator :columns columns)\n\n                          :else\n                          (when-let [cols (->> columns\n                                               (filterv #(lib.types.isa/field-type? supported-field %))\n                                               not-empty)]\n                            (assoc operator :columns cols))))]\n     (not-empty\n      (into []\n            (comp (filter (fn [op]\n                            (let [feature (:driver-feature op)]\n                              (or (nil? feature) (db-features feature)))))\n                  (keep with-columns)\n                  (map #(assoc % :lib/type :operator/aggregation)))\n            lib.schema.aggregation/aggregation-operators)))))\n\n(mu/defn aggregation-clause :- ::lib.schema.aggregation/aggregation\n  \"Returns a standalone aggregation clause for an `aggregation-operator` and\n  a `column`.\n  For aggregations requiring an argument `column` is mandatory, otherwise\n  it is optional.\"\n  ([aggregation-operator :- ::lib.schema.aggregation/operator]\n   (if-not (:requires-column? aggregation-operator)\n     (lib.options/ensure-uuid [(:short aggregation-operator) {}])\n     (throw (ex-info (lib.util/format \"aggregation operator %s requires an argument\"\n                                      (:short aggregation-operator))\n                     {:aggregation-operator aggregation-operator}))))\n\n  ([aggregation-operator :- ::lib.schema.aggregation/operator\n    column]\n   (lib.options/ensure-uuid [(:short aggregation-operator) {} (lib.common/->op-arg column)])))\n\n(def ^:private SelectedOperatorWithColumns\n  [:merge\n   ::lib.schema.aggregation/operator\n   [:map\n    [:columns {:optional true} [:sequential lib.metadata/ColumnMetadata]]\n    [:selected? {:optional true} :boolean]]])\n\n(mu/defn selected-aggregation-operators :- [:maybe [:sequential SelectedOperatorWithColumns]]\n  \"Mark the operator and the column (if any) in `agg-operators` selected by `agg-clause`.\"\n  [agg-operators :- [:maybe [:sequential OperatorWithColumns]]\n   agg-clause]\n  (when (seq agg-operators)\n    (let [[op _ agg-col] agg-clause\n          agg-temporal-unit (-> agg-col lib.options/options :temporal-unit)]\n      (mapv (fn [agg-op]\n              (cond-> agg-op\n                (= (:short agg-op) op)\n                (-> (assoc :selected? true)\n                    (m/update-existing\n                     :columns\n                     (fn [cols]\n                       (let [refs (mapv lib.ref/ref cols)\n                             match (lib.equality/find-closest-matching-ref\n                                    (lib.options/update-options agg-col dissoc :temporal-unit)\n                                    refs)]\n                         (if match\n                           (mapv (fn [r c]\n                                   (cond-> c\n                                     (= r match) (assoc :selected? true)\n\n                                     (some? agg-temporal-unit)\n                                     (lib.temporal-bucket/with-temporal-bucket agg-temporal-unit)))\n                                 refs cols)\n                           cols)))))))\n            agg-operators))))\n\n(mu/defn aggregation-ref :- :mbql.clause/aggregation\n  \"Find the aggregation at `ag-index` and create an `:aggregation` ref for it. Intended for use\n  when creating queries using threading macros e.g.\n\n    (-> (lib/query ...)\n        (lib/aggregate (lib/avg ...))\n        (as-> <> (lib/order-by <> (lib/aggregation-ref <> 0))))\"\n  ([query ag-index]\n   (aggregation-ref query -1 ag-index))\n\n  ([query        :- ::lib.schema/query\n    stage-number :- :int\n    ag-index     :- ::lib.schema.common/int-greater-than-or-equal-to-zero]\n   (if-let [[_ {ag-uuid :lib/uuid}] (get (:aggregation (lib.util/query-stage query stage-number)) ag-index)]\n     (lib.options/ensure-uuid [:aggregation {} ag-uuid])\n     (throw (ex-info (str \"Undefined aggregation \" ag-index)\n                     {:aggregation-index ag-index\n                      :query             query\n                      :stage-number      stage-number})))))\n","~:reader-features",["^H",["~:cljs-release","~:cljs"]],"~:cljc",true,"~:source-map-compact",["^ ","mappings",";AAsBA;;;;;;;+DAAA,/DAASA,sIAENC;AAFH,AAAA;AAGE,cAAA,2CAAA,gIAAA,rLAAMC,gHAAyB,4CAAK,AAACC,kGACN,AAAC,gDAAA,yEAAA,zHAACC,yLAAoCH;IAC/DI,UAAQ,AAAA,sGAAkBJ;AAFhC,AAGE;AAHF,0FAAA,mEAIgBC,QAAQG;;AAE1B;;;;;;;+CAAA,/CAASC,sGAENC,MACAC,aACAH;AAJH,AAAA;AAKE,IAAAI,aAAkC,AAACI,8BAAqBN,MAAMC;IAA9DC,iBAAA,AAAAC,4BAAAD;mBAAA,AAAAE,4CAAAF,eAAA,1EAAOG;IACDE,QAAM,AAACC,qDAAa,6CAAA,yDAAA,tGAACC,4FAAOX,qEAAmBY,kBAAQL;AAD7D,AAEE,oBAAUE;AAAV;AAAA,AACE,MAAO,sNAAA,2CAAA,8DAAA,8DAAA,7XAACI,gDAAQ,AAAAC,uEAAA,iFAAyCd,+GAC1BA,gEACAE,4EACAC;;;AACjCM;;AAEJ,AAAAM,4GAAA,mEAAA,WACGb,MAAMC,aAAaa;AADtB,AAEE,IAAAC,qBAAwB,AAACC,oBAAU,AAAA,iGAAc,AAACV,8BAAqBN,MAAMC;AAA7E,AAAA,oBAAAc;AAAA,AAAA,mBAAAA,fAAWV;AAAX,AACE,OAACY,gDACA,AAAAC,kCAAA,OACA,iBAAAC,qBAAA,+CAAAC;AAAA,AAAA,YAAAC,kBAAA,KAAA;AAAA,AAAA,IAAAD,eAAAA;;AAAA,AAAA,IAAAL,yBAAA,AAAAO,cAAAF;AAAA,AAAA,GAAAL;AAAA,AAAA,IAAAK,eAAAL;AAAA,AAAA,GAAA,AAAAQ,6BAAAH;AAAA,IAAAI,kBA05E8C,AAAAyC,sBAAA7C;IA15E9CK,qBAAA,AAAAC,gBAAAF;IAAAG,WAAA,AAAAC,uBAAAH;AAAA,AAAA,GAAA,AAAA,iBAAAI,WAAA;;AAAA,AAAA,GAAA,CAAAA,WAAAJ;AAAA,kBAAA,AAAAK,eAAAN,gBAAAK,7CAAMU;AAAN,AAAA,AAAA,AAAAR,uBAAAJ,SACE,4GAAA,5GAACa,6EAAsCxC,MAAMC,aAAasC;;AAD5D,eAAA,CAAAV,WAAA;;;;AAAA;;;;;AAAA,OAAAG,qBAAA,AAAAC,gBAAAN,UAAA,AAAAO,qCAAA,AAAAC,qBAAAf;;AAAA,OAAAY,qBAAA,AAAAC,gBAAAN,UAAA;;;AAAA,kBAAA,AAAAS,gBAAAhB,9BAAMmB;AAAN,AAAA,OAAAF,iLAAA,AAAAH,qCAAA,AAAAI,eAAAlB,tNACE,4GAAA,5GAACoB,6EAAsCxC,MAAMC,aAAasC;;;AAD5D;;;;GAAA,KAAA;;AAAA,AAAA,OAAApB,mBAAkBd;;;AAHrB;;;AAMF,AAAAoC,8FAAA,mEAAA,8BAAAC,nBACG1C,MAAMC;AADT,AAAA,IAAA0C,aAAAD;UAAA,AAAAE,4CAAAD,WAAA,IAAA,jEACuBG;IADvBD,aAAA,AAAAD,4CAAAD,WAAA,IAAA;IAAAE,iBAAA,AAAA1C,4BAAA0C;YAAAA,RACkEI;gBADlE,AAAA7C,4CAAAyC,eAAA,vEACmCE;qBADnC,AAAA3C,4CAAAyC,eAAA,5EAC6CG;YAD7C,AAAAJ,4CAAAD,WAAA,IAAA,nEACyEO;uBADzEP,nBACoFQ;AADpF,AAEE,IAAMZ,cAAY,AAACxC,6CAAoBC,MAAMC,aAAaiD;AAA1D,AACE,uNAAA,2CAAA,8DAAA,iFAAA,1YAACE,uGACA,AAACC,yEAAkCrD,MAAMC,aAAasC,+QAEpC,AAAA,yFAAW,AAAC7B,iBAAO6B,sBACrC,6BAAA,AAAA,2CAAA,iFAAA,vIAAMQ,qHACQA,wBACd,kCAAA,AAAA,2CAAA,gGAAA,3JAAMC,oIACaA;;AAIxB,AAAAM,kGAAA,mEAAA,8BAAAC,nBACGvD,MAAMC,sBAAgCyD;AADzC,AAAA,IAAAF,aAAAD;WAAA,AAAAX,4CAAAY,WAAA,IAAA,lEACuBC;YADvB,AAAAb,4CAAAY,WAAA,IAAA,nEAC4BP;YAD5B,AAAAL,4CAAAY,WAAA,IAAA,nEACkCN;AADlC,AAEE,OAACV,6EAAsCxC,MAAMC,aAAa,AAACF,6CAAoBC,MAAMC,aAAaiD,OAAOQ;;AAE3G,8BAAA,6HAAA,3JAACC;AAID,IAAAC,mBAAA,AAAAtC,cAAA,mFAAA,uDAAA;IAAAuC,qBAAA;IAAAC,qBAAA;IAAAC,iBAAA;;AAAA,AAAA,GAAA,AAAA,CAAAA,iBAAAD;AAAA,gBAAA,AAAAD,wDAAAE,pEAAQI;AAAR,AAAA,AAEE,wCAAA,xCAACR,8BAAqBQ;;AAFxB;AAAA,eAAAP;eAAAC;eAAAC;eAAA,CAAAC,iBAAA;;;;;;;AAAA,IAAAhD,2BAAA,AAAAO,cAAAsC;AAAA,AAAA,GAAA7C;AAAA,AAAA,IAAA6C,uBAAA7C;AAAA,AAAA,GAAA,AAAAQ,6BAAAqC;AAAA,IAAAI,wBAAA,AAAAC,sBAAAL;AAAA,AAAA,eAAA,AAAAzB,qBAAAyB;eAAAI;eAAA,AAAAtC,gBAAAsC;eAAA;;;;;;;AAAA,gBAAA,AAAA5B,gBAAAwB,5BAAQO;AAAR,AAAA,AAEE,wCAAA,xCAACR,8BAAqBQ;;AAFxB;AAAA,eAAA,AAAAD,eAAAN;eAAA;eAAA;eAAA;;;;;;;;AAAA;;;;AAIA,AAAAN,kGAAA,6HAAA,8BAAAc,nBACGpE,MAAMC,sBAA2ByD;AADpC,AAAA,IAAAW,aAAAD;UAAA,AAAAxB,4CAAAyB,WAAA,IAAA,jEACuBF;YADvB,AAAAvB,4CAAAyB,WAAA,IAAA,nEAC2BpB;QAD3B,AAAAL,4CAAAyB,WAAA,IAAA,/DACiCC;AADjC,AAGE,oBAAIA;AACF,IAAMC,iBAAe,AAAC/B,6EAAsCxC,MAAMC,aAAaqE,EAAEZ;AAAjF,AACE,IAAAc,WAAML;IAANK,eAAA,EAAA,CAAAA,oBAAAC,oBAAA,AAAAD,aAAA;AAAA,AAAA,QAAAA;KAAA;AACa,OAAA5D,uEAAA,iEAAyB2D;;;KADtC;AAEa,OAAA3D,uEAAA,4EAAoC2D;;;;AAFjD,MAAA,KAAAG,MAAA,CAAA,mEAAAF;;;;AAGF,IAAAG,WAAMR;IAANQ,eAAA,EAAA,CAAAA,oBAAAF,oBAAA,AAAAE,aAAA;AAAA,AAAA,QAAAA;KAAA;AACa,OAAAzD,kCAAA;;;KADb;AAEa,OAAAA,kCAAA;;;;AAFb,MAAA,KAAAwD,MAAA,CAAA,mEAAAC;;;;;AAIJ,AAAAC,iGAAA,6HAAA,gCAAAC,rBACGE,OAAOC;AADV,AAAA,IAAAF,aAAAD;UAAA,AAAAjC,4CAAAkC,WAAA,IAAA,jEACyBX;cADzBW,VACiCG;AADjC,AAEE,IAAAC,WAAMf;IAANe,eAAA,EAAA,CAAAA,oBAAAT,oBAAA,AAAAS,aAAA;AAAA,AAAA,QAAAA;KAAA;AAAA;;;KAAA;AAAA;;;;AAAA,MAAA,KAAAR,MAAA,CAAA,mEAAAQ;;;;AAIF,AAAAzC,8FAAA,6HAAA,WACGzC,MAAMC,aAAakF;AADtB,AAEE,OAACC,8CAAM,iBAAAC,eAAC,uEAAA,vEAACC,qBAAW7C;AAAb,AAAA,QAAA4C,6CAAAA,wEAAAA,7BAAqErF,oDAAAA,9CAAMC,oDAAAA,vCAAakF,oDAAAA;KAA/F,uEAAA;;AAGF,AAAA7B,kGAAA,qDAAA,WACGyB,OAAOC,cAAcO,MAAMC;AAD9B,AAEE,OAAAtE,kCAAA;;AAEF,AAAA0D,iGAAA,qDAAA,WACGG,OAAOC,cAAcO;AADxB,AAAA;;AAMA,8BAAA,8HAAA,5JAAC5B;AAED,IAAA8B,mBAAA,AAAAnE,cAAA,mFAAA,kDAAA,2DAAA,8DAAA,iDAAA,wDAAA,kDAAA,yDAAA,kDAAA;IAAAoE,qBAAA;IAAAC,qBAAA;IAAAC,iBAAA;;AAAA,AAAA,GAAA,AAAA,CAAAA,iBAAAD;AAAA,gBAAA,AAAAD,wDAAAE,pEAAQzB;AAAR,AAAA,AASE,wCAAA,xCAACR,8BAAqBQ;;AATxB;AAAA,eAAAsB;eAAAC;eAAAC;eAAA,CAAAC,iBAAA;;;;;;;AAAA,IAAA7E,2BAAA,AAAAO,cAAAmE;AAAA,AAAA,GAAA1E;AAAA,AAAA,IAAA0E,uBAAA1E;AAAA,AAAA,GAAA,AAAAQ,6BAAAkE;AAAA,IAAAzB,wBAAA,AAAAC,sBAAAwB;AAAA,AAAA,eAAA,AAAAtD,qBAAAsD;eAAAzB;eAAA,AAAAtC,gBAAAsC;eAAA;;;;;;;AAAA,gBAAA,AAAA5B,gBAAAqD,5BAAQtB;AAAR,AAAA,AASE,wCAAA,xCAACR,8BAAqBQ;;AATxB;AAAA,eAAA,AAAAD,eAAAuB;eAAA;eAAA;eAAA;;;;;;;;AAAA;;;;AAWA,AAAAb,iGAAA,8HAAA,gCAAAiB,rBACGd,OAAOC;AADV,AAAA,IAAAc,aAAAD;UAAA,AAAAjD,4CAAAkD,WAAA,IAAA,jEACyB3B;YADzB,AAAAvB,4CAAAkD,WAAA,IAAA,nEAC6B7C;WAD7B,AAAAL,4CAAAkD,WAAA,IAAA,lEACmCC;AADnC,AAEE,IAAAC,WAAM7B;IAAN6B,eAAA,EAAA,CAAAA,oBAAAvB,oBAAA,AAAAuB,aAAA;AAAA,AAAA,QAAAA;KAAA;AAAA;;;KAAA;AAAA;;;KAAA;AAAA;;;KAAA;AAAA;;;KAAA;AAAA;;;KAAA;AAAA;;;KAAA;AAAA;;;KAAA;AAAA;;;KAAA;AAAA;;;;AAAA,MAAA,KAAAtB,MAAA,CAAA,mEAAAsB;;;;AAYF,AAAA1C,kGAAA,8HAAA,8BAAA2C,nBACGjG,MAAMC,sBAA6ByD;AADtC,AAAA,IAAAwC,aAAAD;UAAA,AAAArD,4CAAAsD,WAAA,IAAA,jEACuB/B;YADvB,AAAAvB,4CAAAsD,WAAA,IAAA,nEAC2BjD;UAD3B,AAAAL,4CAAAsD,WAAA,IAAA,jEACiCC;AADjC,AAEE,IAAMA,UAAI,AAAC3D,6EAAsCxC,MAAMC,aAAakG,IAAIzC;AAAxE,AACE,IAAA0C,WAAMjC;IAANiC,eAAA,EAAA,CAAAA,oBAAA3B,oBAAA,AAAA2B,aAAA;AAAA,AAAA,QAAAA;KAAA;AACa,OAAAxF,uEAAA,mEAAsCuF;;;KADnD;AAEa,OAAAvF,uEAAA,0EAAsCuF;;;KAFnD;AAGa,OAAAvF,uEAAA,2EAAsCuF;;;KAHnD;AAIa,OAAAvF,uEAAA,+DAAsCuF;;;KAJnD;AAKa,OAAAvF,uEAAA,kEAAsCuF;;;KALnD;AAMa,OAAAvF,uEAAA,+DAAsCuF;;;KANnD;AAOa,OAAAvF,uEAAA,8EAAsCuF;;;KAPnD;AAQa,OAAAvF,uEAAA,+DAAsCuF;;;KARnD;AASa,OAAAvF,uEAAA,oEAAsCuF;;;;AATnD,MAAA,KAAAzB,MAAA,CAAA,mEAAA0B;;;;AAWJ,AAAA9C,kGAAA,iEAAA,8BAAA+C,nBACGrG,MAAMC,sBAAqCyD;AAD9C,AAAA,IAAA4C,aAAAD;kBAAA,AAAAzD,4CAAA0D,WAAA,IAAA,zEACuBC;YADvB,AAAA3D,4CAAA0D,WAAA,IAAA,nEACmCrD;QADnC,AAAAL,4CAAA0D,WAAA,IAAA,/DACyChC;QADzC,AAAA1B,4CAAA0D,WAAA,IAAA,/DAC2CE;AAD3C,AAEE,OAAA5F,uEAAA,4EAAoC4F,EAAE,AAAChE,6EAAsCxC,MAAMC,aAAaqE,EAAEZ;;AAEpG,AAAAkB,iGAAA,iEAAA,WACGG,OAAOC,cAAcC;AADxB,AAAA;;AAIA,8BAAA,iEAAA,/FAACtB;AAMD,AAAAL,kGAAA,+DAAA,8BAAAmD,nBACGzG,MAAMC,sBAAwCyD;AADjD,AAAA,IAAAgD,aAAAD;iBAAA,AAAA7D,4CAAA8D,WAAA,IAAA,xEACuBC;YADvB,AAAA/D,4CAAA8D,WAAA,IAAA,nEACkCzD;QADlC,AAAAL,4CAAA8D,WAAA,IAAA,/DACwCpC;YADxC,AAAA1B,4CAAA8D,WAAA,IAAA,nEAC0CE;AAD1C,AAEE,OAAAhG,uEAAA,kFAA0C,AAAC4B,6EAAsCxC,MAAMC,aAAaqE,EAAEZ;;AAExG,AAAAkB,iGAAA,+DAAA,8BAAAiC,nBACG7G,MAAMC;AADT,AAAA,IAAA6G,aAAAD;iBAAA,AAAAjE,4CAAAkE,WAAA,IAAA,xEACuBH;YADvB,AAAA/D,4CAAAkE,WAAA,IAAA,nEACkC7D;QADlC,AAAAL,4CAAAkE,WAAA,IAAA,/DACwCxC;YADxC,AAAA1B,4CAAAkE,WAAA,IAAA,nEAC0CF;AAD1C,AAEE,QAAA,yDAAkB,AAACG,4EAAqC/G,MAAMC,aAAaqE;;AAE7E,8BAAA,+DAAA,7FAACX;AAED,AAAAL,kGAAA,uDAAA,WACGyB,OAAOC,cAAcgC,OAAOxB;AAD/B,AAEE,OAAAtE,kCAAA;;AAEF,AAAA0D,iGAAA,uDAAA,WACGG,OAAOC,cAAcgC;AADxB,AAAA;;AAIA,8BAAA,uDAAA,rFAACrD;AAED,AAAAL,kGAAA,kEAAA,WACGyB,OAAOC,cAAciC,aAAazB;AADrC,AAEE,OAAAtE,kCAAA;;AAEF,AAAA0D,iGAAA,kEAAA,WACGG,OAAOC,cAAciC;AADxB,AAAA;;AAIA,8BAAA,kEAAA,hGAACtD;AAED,AAAAlB,8FAAA,kHAAA,8BAAAyE,nBACGlH,MAAMC;AADT,AAAA,IAAAkH,aAAAD;WAAA,AAAAtE,4CAAAuE,WAAA,IAAA,lEACuB1D;YADvB,AAAAb,4CAAAuE,WAAA,IAAA,nEAC4BlE;gBAD5B,AAAAL,4CAAAuE,WAAA,IAAA,vEACkCC;aADlCD,TACgDhC;AADhD,AAEE,OAAC/B,uGAGA,6BAAA,sRAAA,jSAAMgE,WACJ,6HAAA,mFAAA,hNAACC,sBAAY,AAAChE,yEAAkCrD,MAAMC,aAAamH,0KACrE,iBAAAE,eAAC,uEAAA,vEAAChC,qBAAW7C;AAAb,AAAA,QAAA6E,6CAAAA,wEAAAA,7BAAgEtH,oDAAAA,9CAAMC,oDAAAA,vCAAakF,oDAAAA;;;AAEtF,AAAA;;;;;;;;iCAAA,yCAAAoC,1EAAkBE;AAAlB,AAAA,IAAAD,WAAA,AAAA;AAAA,AAAA,QAAAA;KAAA;AAAA,OAAAC;;;KAAA;AAAA,OAAAA,6DAAA,CAAA,UAAA;;;;AAAA,MAAA,KAAA/C,MAAA,CAAA,8DAAA,AAAA;;;;;AAAA,CAAA,+DAAA,/DAAkB+C;AAAlB,AAAA;AAAA,OAAAC,iCAAA,uDAAA;;;AAAA,CAAA,+DAAA,/DAAkBD,0EAAgBnD;AAAlC,AAAA;AAAA,OAAAoD,iCAAA,uDAAA,mFAAkCpD;;;AAAlC,CAAA,yDAAA,zDAAkBmD;;AAAlB,AACA,AAAA;;;;;;;;qCAAA,6CAAAF,lFAAkBK;AAAlB,AAAA,IAAAD,WAAA,AAAA;AAAA,AAAA,QAAAA;KAAA;AAAA,OAAAC;;;KAAA;AAAA,OAAAA,iEAAA,CAAA,UAAA;;;;AAAA,MAAA,KAAAlD,MAAA,CAAA,8DAAA,AAAA;;;;;AAAA,CAAA,mEAAA,nEAAkBkD;AAAlB,AAAA;AAAA,OAAAF,iCAAA,gEAAA;;;AAAA,CAAA,mEAAA,nEAAkBE,8EAAgBtD;AAAlC,AAAA;AAAA,OAAAoD,iCAAA,gEAAA,mFAAkCpD;;;AAAlC,CAAA,6DAAA,7DAAkBsD;;AAAlB,AACA;;;;;;;uCAAA,vCAAkBC,sFAAavD,EAAEwD;AAAjC,AAAA;AAAA,OAAAJ,iCAAA,kEAAA,mFAA+BpD,EAAEwD;;AACjC;;;;;;;+BAAA,/BAAkBC,sEAAazD;AAA/B,AAAA;AAAA,OAAAoD,iCAAA,kDAAA,mFAA+BpD;;AAC/B;;;;;;;oCAAA,pCAAkB0D,gFAAa1D;AAA/B,AAAA;AAAA,OAAAoD,iCAAA,8DAAA,mFAA+BpD;;AAC/B;;;;;;;+BAAA,/BAAkB2D,sEAAa3D;AAA/B,AAAA;AAAA,OAAAoD,iCAAA,iDAAA,mFAA+BpD;;AAC/B;;;;;;;kCAAA,lCAAkB4D,4EAAa5D;AAA/B,AAAA;AAAA,OAAAoD,iCAAA,wDAAA,mFAA+BpD;;AAC/B;;;;;;;+BAAA,/BAAkB6D,sEAAa7D;AAA/B,AAAA;AAAA,OAAAoD,iCAAA,kDAAA,mFAA+BpD;;AAC/B;;;;;;;sCAAA,tCAAkB8D,oFAAa9D,EAAEwD;AAAjC,AAAA;AAAA,OAAAJ,iCAAA,iEAAA,mFAA+BpD,EAAEwD;;AACjC;;;;;;;iCAAA,jCAAkBO,0EAAa/D;AAA/B,AAAA;AAAA,OAAAoD,iCAAA,uDAAA,mFAA+BpD;;AAC/B;;;;;;;kCAAA,lCAAkBgE,4EAAahE;AAA/B,AAAA;AAAA,OAAAoD,iCAAA,yDAAA,mFAA+BpD;;AAC/B;;;;;;;+BAAA,/BAAkBiE,sEAAajE;AAA/B,AAAA;AAAA,OAAAoD,iCAAA,kDAAA,mFAA+BpD;;AAC/B;;;;;;;mCAAA,nCAAkBkE,8EAAalE;AAA/B,AAAA;AAAA,OAAAoD,iCAAA,2DAAA,mFAA+BpD;;AAC/B;;;;;;;qCAAA,rCAAkBmE,kFAAanE,EAAEwD;AAAjC,AAAA;AAAA,OAAAJ,iCAAA,+DAAA,mFAA+BpD,EAAEwD;;AACjC;;;;;;;gCAAA,hCAAkBY,uEAAapE;AAA/B,AAAA;AAAA,OAAAoD,iCAAA,mDAAA,mFAA+BpD;;AAE/B,AAAAqE,wEAAA,mEAAA,WACGC;AADH,AAEEA;;AAEF;;;wCAAA,mFAAA,gDAAA,gIAAA,3SAAeC,iaAKZC;AAEH,AAAA;;;;;;;;qCAAA,6CAAAvB,lFAASyB;AAAT,AAAA,IAAAD,WAAA,AAAA;AAAA,AAAA,QAAAA;KAAA;AAAA,OAAAC,iEAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;KAAA;AAAA,OAAAA,iEAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;;AAAA,MAAA,KAAAtE,MAAA,CAAA,8DAAA,AAAA;;;;;AAAA,CAAA,mEAAA,nEAASsE,8EAELhJ,MAAMiJ;AAFV,AAAA;AAGG,8EAAA,vEAACC,iEAAUlJ,WAASiJ;;;AAHvB,CAAA,mEAAA,nEAASD,8EAKLhJ,MACAC,aACAgJ;;AAPJ,AAAA;AASG,GAAI,gGAAA,hGAACE,6CAAE,AAACC,qCAA4BH;AAClC,eAAOjJ;eAAMC;eAAa,AAACoJ,qBAAYJ;;;;;;AACvC,+DAAA,xDAACK,qCAA4BtJ,MAAMC,gFAA0BgJ;;;;;;AAXlE,CAAA,6DAAA,7DAASD;;AAAT,AAaA,AAAA;;;;;;;;wCAAA,gDAAAzB,xFAASiC;AAAT,AAAA,IAAAD,WAAA,AAAA;AAAA,AAAA,QAAAA;KAAA;AAAA,OAAAC,oEAAA,CAAA,UAAA;;;KAAA;AAAA,OAAAA,oEAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;;AAAA,MAAA,KAAA9E,MAAA,CAAA,8DAAA,AAAA;;;;;AAAA,CAAA,sEAAA,tEAAS8E,iFAELxJ;AAFJ,AAAA;AAGG,iFAAA,1EAACyJ,oEAAazJ;;;AAHjB,CAAA,sEAAA,tEAASwJ,iFAKLxJ,MACAC;AANJ,AAAA;AAOG,OAACe,oBAAU,AAAA,iGAAc,AAACV,8BAAqBN,MAAMC;;;AAPxD,CAAA,gEAAA,hEAASuJ;;AAAT,AASA,AAAA;;;;;;;;iDAAA,yDAAAjC,1GAASoC;AAAT,AAAA,IAAAD,WAAA,AAAA;AAAA,AAAA,QAAAA;KAAA;AAAA,OAAAC,6EAAA,CAAA,UAAA;;;KAAA;AAAA,OAAAA,6EAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;;AAAA,MAAA,KAAAjF,MAAA,CAAA,8DAAA,AAAA;;;;;AAAA,CAAA,+EAAA,/EAASiF,0FAEL3J;AAFJ,AAAA;AAGG,0FAAA,nFAAC4J,6EAAsB5J;;;AAH1B,CAAA,+EAAA,/EAAS2J,0FAKL3J,MACAC;AANJ,AAAA;AAOG,IAAA4J,WAAS,AAAC7I,oBAAU,AAAA,iGAAc,AAACV,8BAAqBN,MAAMC;AAA9D,AAAA,GAAA,CAAA4J,YAAA;AAAA;;AACS,oDAAA,7CAACC,8EAAQ,AAACC,4CAAI,WAAKxH;AAAL,AACE,IAAM7C,WAAS,AAAC2D,yEAAkCrD,MAAMC,aAAasC;AAArE,sHACM7C,1DACA,mEAAA,nEAACsK,4IAAgC,iBAAAC,mBAAI,AAAA,6FAAYvK,zUACjD,OAAC0F;AADgC,AAAA,oBAAA6E;AAAAA;;AAAA;;MACjC,8DAAA,mIAAA,wEACwB,AAAA,yFAAW,AAACvJ,iBAAO6B;IALjEsH;;;;AARZ,CAAA,yEAAA,zEAASF;;AAAT,AAeA,+CAAA,mFAAA,wDAAA,0HAAA,mFAAA,mDAAA,mFAAA,2DAAA,2CAAA,6DAAA,aAAA,mFAAA,hxBAAeO,k1BAI6BC;AAE5C,AAAA7G,kGAAA,mFAAA,gCAAA8G,rBACGrF,OAAOC,uBAAqCuF;AAD/C,AAAA,IAAAF,aAAAD;IAAAC,iBAAA,AAAAlK,4BAAAkK;mBAAA,AAAAjK,4CAAAiK,eAAA,1EACgCC;AADhC,AAEE,OAAA,kGAAe,CAACA,6CAAAA,+CAAAA;;AAElB,AAAAE,kGAAA,mFAAA,gCAAAC,rBACG1F,OAAOC;AADV,AAAA,IAAA0F,aAAAD;IAAAC,iBAAA,AAAAvK,4BAAAuK;iBAAA,AAAAtK,4CAAAsK,eAAA,xEACyEG;mBADzE,AAAAzK,4CAAAsK,eAAA,1EACgCJ;6BADhC,AAAAlK,4CAAAsK,eAAA,pFAC6CC;sBAD7C,AAAAvK,4CAAAsK,eAAA,7EAC8DE;AAD9D,AAEE,IAAAE,WAAQ,2KAAA,6JAAA,xUAAC1F,qDAAM,CAACkF,6CAAAA,+CAAAA,2FACW,AAACS,6BAAiBF,wIACbF;AAFhC,AAAA,GAGE,GAAA,oBAAA,nBAAOC;AAAW,qDAAAE,SAAA,vDAAC1F,mHAAgBwF;;AAHrCE;;;AAKF;;;;;;;wDAAA,xDAASE,wHAENC;AAFH,AAAA;AAGE,OAAA,yFAAUA;;AAEZ,AAAA;;;;;;;;;2DAAA,mEAAA1D,9HAAS4D;AAAT,AAAA,IAAAD,WAAA,AAAA;AAAA,AAAA,QAAAA;KAAA;AAAA,OAAAC,uFAAA,CAAA,UAAA;;;KAAA;AAAA,OAAAA,uFAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;;AAAA,MAAA,KAAAzG,MAAA,CAAA,8DAAA,AAAA;;;;;AAAA,CAAA,yFAAA,zFAASyG,oGAGLnL;AAHJ,AAAA;AAIG,oGAAA,7FAACoL,uFAAgCpL;;;AAJpC,CAAA,yFAAA,zFAASmL,oGAMLnL,MACAC;AAPJ,AAAA;AAQG,IAAMoL,cAAY,iBAAApB,mBAAI,AAAA,4FAAW,AAACqB,+BAAsBtL;AAAtC,AAAA,oBAAAiK;AAAAA;;AAAA;;;IACZsB,QAAM,AAACjL,8BAAqBN,MAAMC;IAClCuL,UAAQ,AAACC,gFAAyCzL,MAAMC,aAAasL;IACrEG,eAAa,WAAAC;AAAA,AAAA,IAAAC,aAAAD;IAAAC,iBAAA,AAAAzL,4BAAAyL;eAAAA,XAAmDE;6BAAnD,AAAA1L,4CAAAwL,eAAA,pFAAajB;sBAAb,AAAAvK,4CAAAwL,eAAA,7EAA8BC;AAA9B,AACE,GACE,AAACE,cAAIpB;AACLmB;;AAFF,GAIE,6DAAA,7DAAC3C,6CAAE0C;AACH,8DAAA,vDAACzG,8CAAM0G,oEAAkBN;;AAL3B,AAQE,IAAAzK,qBAAgB,oBACK,kBAAA,WAAAkL,7BAACC,pBACDlL;AADA,AAAU,gEAAAiL,zDAACE,yCAA0BN;GADrCL;AAArB,AAAA,oBAAAzK;AAAA,AAAA,WAAAA,PAAWiL;AAAX,AAGE,8DAAA,vDAAC5G,8CAAM0G,oEAAkBE;;AAH3B;;;;;;AAZvB,AAgBE,OAAChL,oBACA,6CAAA,7CAAC8I,8EACK,AAACrJ,6CAAK,AAAC2L,+CAAO,WAAKC;AAAL,AACE,IAAMC,UAAQ,AAAA,uGAAiBD;AAA/B,AACE,IAAApC,mBAAI,YAAA,XAAMqC;AAAV,AAAA,GAAArC;AAAAA;;AAAmB,QAACoB,4CAAAA,qDAAAA,XAAYiB,iCAAAA;;IAC5C,AAACC,6CAAKb,cACN,4CAAA,WAAAc,vDAACzC;AAAD,AAAM,qDAAAyC,iBAAA,0DAAA,zHAACpH;KACbqH;;;AA/BZ,CAAA,mFAAA,nFAAStB;;AAAT,AAiCA,AAAA;;;;;;;;;;;8CAAA,sDAAA5D,pGAASoF;AAAT,AAAA,IAAAD,WAAA,AAAA;AAAA,AAAA,QAAAA;KAAA;AAAA,OAAAC,0EAAA,CAAA,UAAA;;;KAAA;AAAA,OAAAA,0EAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;;AAAA,MAAA,KAAAjI,MAAA,CAAA,8DAAA,AAAA;;;;;AAAA,CAAA,4EAAA,5EAASiI,uFAKL1B;AALJ,AAAA;AAMG,GAAA,AAAAc,cAAQ,AAAA,2GAAmBd;AACzB,wCAAA,8LAAA,/NAAC2B,oHAAyB,AAAA,qFAAQ3B;;AAClC,MAAO,AAACtK,gDAAQ,iBAAAkM,WAAA;IAAAC,WACiB,AAAA,qFAAQ7B;AADzB,AAAA,wHAAA4B,SAAAC,+CAAAD,SAAAC,jLAACC,yDAAAA,4EAAAA;KAAV,2CAAA,sFAEgC9B;;;;AAV5C,CAAA,4EAAA,5EAAS0B,uFAYL1B,qBACA+B;AAbJ,AAAA;AAcG,wCAAA,8LAAA,/NAACJ,oHAAyB,AAAA,qFAAQ3B,yDAAyB,AAACgC,8DAAoBD;;;AAdnF,CAAA,sEAAA,tEAASL;;AAAT,AAgBA,uDAAA,mFAAA,wDAAA,0HAAA,mFAAA,mDAAA,mFAAA,2DAAA,2CAAA,6DAAA,aAAA,mFAAA,uHAAA,mFAAA,+DAAA,2CAAA,6DAAA,aAAA,tpCAAeO,01BAI6B/C;AAG5C;;;;;;;0DAAA,1DAASgD,4HAENC,cACAC;AAHH,AAAA;AAIE,GAAM,AAAC/L,cAAI8L;AAAX,AACE,IAAAE,aAAqBD;SAArB,AAAAzK,4CAAA0K,WAAA,IAAA,hEAAOjB;QAAP,AAAAzJ,4CAAA0K,WAAA,IAAA,/DAAUC;cAAV,AAAA3K,4CAAA0K,WAAA,IAAA,rEAAYE;IACNC,oBAAkB,AAAA,sGAAA,6BAAID,7BAAQE;AADpC,AAEE,OAACC,6CAAK,WAAKC;AAAL,AACE,IAAAC,WAAQD;AAAR,AAAA,GACE,AAACzE,6CAAE,AAAA,qFAAQyE,QAAQvB;iEACf,8CAAAwB,SAAA,+DAAA,tHAACzI,jEACD,6LAAA,tLAAC0I,iPAEA,WAAK9B;AAAL,AACE,IAAM+B,OAAK,AAACJ,6CAAKtE,qBAAY2C;IACvBgC,QAAM,AAACC,8EACA,oJAAA,pJAACC,yEAA2BV,QAAQW,iJACpCJ;AAHb,AAIE,oBAAIC;AACF,OAACL,6CAAK,WAAKS,EAAEC;AAAP,AACE,IAAAC,WAAQD;IAARC,eAAA,qLAAAA,nLACE,AAACnF,6CAAEiF,EAAEJ,QAAO,8CAAAM,SAAA,+DAAA,tHAAClJ;AADf,AAAA,GAGE,GAAA,sBAAA,rBAAOqI;AACP,yDAAAa,lDAACC,+DAAyCd;;AAJ5Ca;;GAKFP,KAAK/B;;AACXA;;;;AAlBb6B;;GAmBFT;;AAvBV;;;AAyBF,AAAA;;;;;;;;;;;;;2CAAA,mDAAA7F,9FAASkH;AAAT,AAAA,IAAAD,WAAA,AAAA;AAAA,AAAA,QAAAA;KAAA;AAAA,OAAAC,uEAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;KAAA;AAAA,OAAAA,uEAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;;AAAA,MAAA,KAAA/J,MAAA,CAAA,8DAAA,AAAA;;;;;AAAA,CAAA,yEAAA,zEAAS+J,oFAOLzO,MAAM0O;AAPV,AAAA;AAQG,oFAAA,7EAACC,uEAAgB3O,WAAS0O;;;AAR7B,CAAA,yEAAA,zEAASD,oFAULzO,MACAC,aACAyO;AAZJ,AAAA;AAaG,IAAAE,qBAAiC,AAACxO,4CAAI,AAAA,iGAAc,AAACE,8BAAqBN,MAAMC,eAAeyO;AAA/F,AAAA,oBAAAE;AAAA,IAAAC,aAAAD;QAAA,AAAAhM,4CAAAiM,WAAA,IAAA,/DAAUtB;IAAVuB,aAAA,AAAAlM,4CAAAiM,WAAA,IAAA;IAAAC,iBAAA,AAAA3O,4BAAA2O;cAAA,AAAA1O,4CAAA0O,eAAA,rEAAahP;AAAb,AACE,wCAAA,mFAAA,mEAAA,vLAAC8M,0NAAyC9M;;AAC1C,MAAO,0IAAA,2CAAA,yFAAA,8DAAA,5UAACa,gDAAQ,CAAA,qEAA8B+N,+IACVA,iEACA1O,4EACAC;;;;AAlBzC,CAAA,mEAAA,nEAASwO;;AAAT","names",["metabase.lib.aggregation/column-metadata->aggregation-ref","metadata","options","cljs.core/random-uuid","cljs.core.some_fn","ag-uuid","metabase.lib.aggregation/resolve-aggregation","query","stage-number","map__62913","cljs.core/--destructure-map","cljs.core.get","aggregations","metabase.lib.util/query-stage","found","medley.core.find_first","cljs.core.comp","cljs.core/second","cljs.core.ex_info","metabase.shared.util.i18n.js_i18n","metabase.lib.metadata.calculation/describe-top-level-key-method","_k","temp__5804__auto__","cljs.core/not-empty","metabase.lib.util/join-strings-with-conjunction","metabase.shared.util.i18n/js-i18n","iter__5523__auto__","s__62927","cljs.core/LazySeq","cljs.core/seq","cljs.core/chunked-seq?","c__5521__auto__","size__5522__auto__","cljs.core/count","b__62929","cljs.core/chunk-buffer","i__62928","cljs.core/-nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__62926","cljs.core/chunk-rest","cljs.core/first","cljs.core/cons","cljs.core/rest","aggregation","metabase.lib.metadata.calculation.display_name","metabase.lib.metadata.calculation/metadata-method","p__62937","vec__62942","cljs.core.nth","map__62945","_ag","base-type","effective-type","_opts","index","_aggregation-ref","cljs.core.merge","metabase.lib.metadata.calculation.metadata","metabase.lib.metadata.calculation/display-name-method","p__62948","vec__62950","_tag","style","metabase.lib.hierarchy/derive","seq__62956","chunk__62957","count__62958","i__62959","c__5568__auto__","cljs.core/chunk-first","cljs.core/next","tag","p__62981","vec__62982","x","x-display-name","G__62985","cljs.core/Keyword","js/Error","G__62990","metabase.lib.metadata.calculation/column-name-method","p__62993","vec__62994","_query","_stage-number","_clause","G__62997","clause","cljs.core.assoc","fexpr__63004","cljs.core/get-method","_case","_style","seq__63014","chunk__63015","count__63016","i__63017","p__63025","vec__63026","_arg","G__63029","p__63038","vec__63039","arg","G__63042","p__63048","vec__63049","_percentile","p","p__63053","vec__63054","_sum-where","_pred","p__63060","vec__63061","metabase.lib.metadata.calculation.column_name","_share","_count-where","p__63086","vec__63087","first-arg","cljs.core/select-keys","fexpr__63090","var_args","G__63093","metabase.lib.aggregation/count","metabase.lib.common/defop-create","G__63108","metabase.lib.aggregation/cum-count","metabase.lib.aggregation/count-where","y","metabase.lib.aggregation/avg","metabase.lib.aggregation/distinct","metabase.lib.aggregation/max","metabase.lib.aggregation/median","metabase.lib.aggregation/min","metabase.lib.aggregation/percentile","metabase.lib.aggregation/share","metabase.lib.aggregation/stddev","metabase.lib.aggregation/sum","metabase.lib.aggregation/cum-sum","metabase.lib.aggregation/sum-where","metabase.lib.aggregation/var","metabase.lib.ref/ref-method","aggregation-clause","metabase.lib.aggregation/Aggregatable","metabase.lib.metadata/MetricMetadata","G__63175","metabase.lib.aggregation/aggregate","aggregatable","metabase.lib.aggregation.aggregate","cljs.core._EQ_","metabase.lib.dispatch/dispatch-value","metabase.lib.ref/ref","metabase.lib.util/add-summary-clause","G__63268","metabase.lib.aggregation/aggregations","metabase.lib.aggregation.aggregations","G__63301","metabase.lib.aggregation/aggregations-metadata","metabase.lib.aggregation.aggregations_metadata","G__63302","cljs.core.into","cljs.core.map","metabase.util.assoc_default","or__5045__auto__","metabase.lib.aggregation/OperatorWithColumns","metabase.lib.metadata/ColumnMetadata","p__63303","map__63304","display-info","_display-name-style","metabase.lib.metadata.calculation/display-info-method","p__63305","map__63306","requires-column?","selected?","short-name","G__63319","metabase.util/qualified-name","metabase.lib.aggregation/aggregation-operator-columns","aggregation-operator","G__63336","metabase.lib.aggregation/available-aggregation-operators","metabase.lib.aggregation.available_aggregation_operators","db-features","metabase.lib.metadata/database","stage","columns","metabase.lib.metadata.calculation.visible_columns","with-columns","p__63354","map__63355","supported-field","operator","cljs.core/not","cols","p1__63323#","cljs.core/filterv","metabase.lib.types.isa/field-type?","cljs.core.filter","op","feature","cljs.core.keep","p1__63324#","metabase.lib.schema.aggregation/aggregation-operators","G__63383","metabase.lib.aggregation/aggregation-clause","metabase.lib.options/ensure-uuid","G__63384","G__63385","metabase.lib.util/format","column","metabase.lib.common/->op-arg","metabase.lib.aggregation/SelectedOperatorWithColumns","metabase.lib.aggregation/selected-aggregation-operators","agg-operators","agg-clause","vec__63399","_","agg-col","agg-temporal-unit","metabase.lib.options/options","cljs.core.mapv","agg-op","G__63402","medley.core.update_existing","refs","match","metabase.lib.equality.find_closest_matching_ref","metabase.lib.options.update_options","cljs.core/dissoc","r","c","G__63407","metabase.lib.temporal-bucket/with-temporal-bucket","G__63413","metabase.lib.aggregation/aggregation-ref","ag-index","metabase.lib.aggregation.aggregation_ref","temp__5802__auto__","vec__63417","map__63420"]],"~:used-vars",["^H",["~$metabase.lib.metadata.calculation/visible-columns","~$metabase.lib.aggregation/aggregate","~$cljs.core/--destructure-map","~$cljs.core/keep","~$cljs.core/comp","~$cljs.core/rest","~$metabase.lib.util/join-strings-with-conjunction","~$cljs.core/get-method","~$metabase.util/assoc-default","~$metabase.lib.aggregation/selected-aggregation-operators","~$metabase.lib.aggregation/aggregation-ref","~$metabase.lib.options/options","~$metabase.lib.aggregation/Aggregatable","~$metabase.lib.aggregation/aggregations","~$cljs.core/filter","~$cljs.core/=","~$metabase.lib.util/query-stage","~$metabase.lib.schema.aggregation/aggregation-operators","~$metabase.lib.aggregation/sum","~$cljs.core/count","~$metabase.lib.options/ensure-uuid","~$cljs.core/seq","~$cljs.core/chunk-first","~$metabase.lib.common/->op-arg","~$metabase.lib.options/update-options","~$metabase.util/qualified-name","~$metabase.lib.metadata/ColumnMetadata","~$cljs.core/Keyword","~$metabase.lib.metadata.calculation/column-name-method","~$cljs.core/chunk","~$cljs.core/mapv","~$cljs.core/dissoc","~$cljs.core/LazySeq","~$cljs.core/chunk-rest","~$metabase.lib.metadata.calculation/describe-top-level-key-method","~$metabase.lib.metadata.calculation/display-info-method","~$metabase.lib.ref/ref-method","~$metabase.lib.aggregation/aggregation-clause","~$metabase.lib.hierarchy/derive","~$metabase.lib.util/format","~$metabase.lib.aggregation/count-where","~$cljs.core/into","~$metabase.lib.metadata/database","~$metabase.lib.aggregation/min","~$cljs.core/map","~$metabase.lib.aggregation/stddev","~$cljs.core/filterv","~$medley.core/update-existing","~$metabase.lib.aggregation/available-aggregation-operators","~$medley.core/find-first","~$metabase.lib.aggregation/avg","~$cljs.core/-add-method","~$metabase.lib.aggregation/cum-count","~$metabase.lib.metadata.calculation/metadata","~$metabase.lib.metadata.calculation/metadata-method","~$cljs.core/get","~$metabase.lib.aggregation/sum-where","~$metabase.lib.temporal-bucket/with-temporal-bucket","~$metabase.lib.aggregation/OperatorWithColumns","~$cljs.core/chunk-append","~$cljs.core/-nth","~$metabase.lib.aggregation/aggregations-metadata","~$cljs.core/not-empty","~$metabase.lib.metadata/MetricMetadata","~$metabase.lib.common/defop-create","~$metabase.lib.metadata.calculation/display-name","~$metabase.lib.aggregation/cum-sum","~$metabase.shared.util.i18n/js-i18n","~$cljs.core/nth","~$cljs.core/ex-info","~$metabase.lib.aggregation/aggregation-operator-columns","~$cljs.core/second","~$metabase.lib.aggregation/percentile","~$metabase.lib.dispatch/dispatch-value","~$metabase.lib.aggregation/resolve-aggregation","~$cljs.core/next","~$metabase.lib.aggregation/distinct","~$metabase.lib.ref/ref","~$cljs.core/select-keys","~$metabase.lib.aggregation/SelectedOperatorWithColumns","~$metabase.lib.aggregation/max","~$metabase.lib.metadata.calculation/column-name","~$cljs.core/chunk-cons","~$cljs.core/not","~$metabase.lib.types.isa/field-type?","~$cljs.core/cons","~$cljs.core/assoc","~$metabase.lib.aggregation/median","~$metabase.lib.aggregation/column-metadata->aggregation-ref","~$cljs.core/chunk-buffer","~$metabase.lib.aggregation/share","~$metabase.lib.equality/find-closest-matching-ref","~$metabase.lib.aggregation/var","~$cljs.core/some-fn","~$cljs.core/first","~$metabase.lib.util/add-summary-clause","~$metabase.lib.aggregation/count","~$cljs.core/merge","~$metabase.lib.metadata.calculation/display-name-method","~$js/Error","~$cljs.core/random-uuid","~$cljs.core/chunked-seq?"]]],"~:cache-keys",["~#cmap",[["^1Z","camel_snake_kebab/internals/misc.cljc"],["5ae08f83ceb8959971e6334596bff0214bf6fdf2","~:shadow.build.compiler/resolve",["^ ","~:require-id",null,"~:deps-ids",["^H",[]],"~:deps-syms",["^1<","^?","~$camel-snake-kebab.internals.string-separator","~$clojure.string"]]],["^1Z","goog/dom/tagname.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4K",["^ ","^4L",null,"^4M",["^H",[]],"^4N",["^1<","~$goog.dom.HtmlElement"]]],["^1Z","metabase/shared/util/i18n.cljs"],["6c3c8615004b349dae9851ed547d516d45e04bd0","^4K",["^ ","^4L",null,"^4M",["^H",[]],"^4N",["^1<","^?","~$shadow.js.shim.module$ttag","^4P"]]],["^1Z","goog/labs/useragent/platform.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4K",["^ ","^4L",null,"^4M",["^H",[]],"^4N",["^1<","~$goog.string.internal","~$goog.labs.userAgent.util","~$goog.labs.userAgent.highEntropy.highEntropyValue","~$goog.labs.userAgent.highEntropy.highEntropyData","~$goog.labs.userAgent"]]],["^1Z","metabase/types.cljc"],["00232bf78b259e26a21c218c8f2d746ba7003a15","^4K",["^ ","^4L",null,"^4M",["^H",[]],"^4N",["^1<","^?","~$clojure.set","~$metabase.types.coercion-hierarchies","^14"]]],["^1Z","cljs/spec/gen/alpha.cljs"],["bc14df6666853ed869d7b88aaa864111c65d0c7f","^4K",["^ ","^4L",null,"^4M",["^H",[]],"^4N",["^1<","^?","~$goog.Uri"]]],["^1Z","metabase/lib/util.cljc"],["11c3262368d876979e323f3e646aab21fbf9b86e","^4K",["^ ","^4L",null,"^4M",["^H",[]],"^4N",["^1<","^?","~$shadow.js.shim.module$crc_32","~$goog.string","~$goog.string.format","^4X","^4P","^1C","^19","^1?","^U","^13","~$metabase.lib.schema.expression","~$metabase.lib.schema.id","~$metabase.mbql.util","^11","^14","^W"]]],["^1Z","lambdaisland/glogi.cljs"],["76286836d4172602aa08006b2a754dda736ffe09","^4K",["^ ","^4L",null,"^4M",["^H",[]],"^4N",["^1<","^?","~$goog.log","~$goog.debug.Console","~$goog.array","^4P","~$goog.object","~$goog.debug.FancyWindow","~$goog.debug.DivConsole"]]],["^1Z","goog/math/math.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4K",["^ ","^4L",null,"^4M",["^H",[]],"^4N",["^1<","~$goog.asserts"]]],["^1Z","goog/html/trustedtypes.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4K",["^ ","^4L",null,"^4M",["^H",[]],"^4N",["^1<"]]],["^1Z","goog/string/stringformat.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4K",["^ ","^4L",null,"^4M",["^H",[]],"^4N",["^1<","^50"]]],["^1Z","malli/registry.cljc"],["514c6f7d69d7e40b56fa75bfd1a49a683ca15982","^4K",["^ ","^4L",null,"^4M",["^H",[]],"^4N",["^1<","^?"]]],["^1Z","goog/labs/useragent/browser.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4K",["^ ","^4L",null,"^4M",["^H",[]],"^4N",["^1<","^4T","^4U","^5;","^4S","^4V","^4W"]]],["^1Z","goog/html/safeurl.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4K",["^ ","^4L",null,"^4M",["^H",[]],"^4N",["^1<","^5;","~$goog.fs.url","~$goog.html.TrustedResourceUrl","~$goog.string.Const","~$goog.string.TypedString","^4S"]]],["^1Z","goog/style/style.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4K",["^ ","^4L",null,"^4M",["^H",[]],"^4N",["^1<","^5;","~$goog.dom","~$goog.dom.NodeType","~$goog.dom.TagName","~$goog.dom.safe","~$goog.dom.vendor","~$goog.html.SafeStyleSheet","~$goog.math.Box","~$goog.math.Coordinate","~$goog.math.Rect","~$goog.math.Size","^58","~$goog.reflect","^50","~$goog.userAgent"]]],["^1Z","goog/array/array.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4K",["^ ","^4L",null,"^4M",["^H",[]],"^4N",["^1<","^5;"]]],["~:shadow.build.js-support/require","moment"],["~$shadow.js.shim.module$moment","shadow.js.shim.module$moment.js","require","^4K",["^ ","^4L",null,"^4M",["^H",[]],"^4N",["^1<"]]],["^5L","moment-timezone"],["~$shadow.js.shim.module$moment_timezone","shadow.js.shim.module$moment_timezone.js","require","^4K",["^ ","^4L",null,"^4M",["^H",[]],"^4N",["^1<"]]],["^1Z","metabase/mbql/schema/macros.cljs"],["2af09bd42ffb1e15b66723cf7ba15db7dc75d10b","^4K",["^ ","^4L",null,"^4M",["^H",[]],"^4N",["^1<","^?"]]],["^1Z","metabase/lib/schema/mbql_clause.cljc"],["e5bdd00c58db706b1219843528fd3cd9dd8ab728","^4K",["^ ","^4L",null,"^4M",["^H",[]],"^4N",["^1<","^?","^13","^52","~$metabase.types","^W","~$metabase.util.malli.registry"]]],["^1Z","goog/useragent/useragent.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4K",["^ ","^4L",null,"^4M",["^H",[]],"^4N",["^1<","~$goog.labs.userAgent.browser","~$goog.labs.userAgent.engine","~$goog.labs.userAgent.platform","^4T","^5J","^4S"]]],["^1Z","malli/generator.cljc"],["514c6f7d69d7e40b56fa75bfd1a49a683ca15982","^4K",["^ ","^4L",null,"^4M",["^H",[]],"^4N",["^1<","^?","^A","^4P","~$clojure.test.check","~$clojure.test.check.generators","~$clojure.test.check.properties","~$clojure.test.check.random","~$clojure.test.check.rose-tree","~$malli.core","~$malli.registry"]]],["^1Z","clojure/test/check/properties.cljc"],["f33d988fd57bc9c11af1952db81c10f319c91416","^4K",["^ ","^4L",null,"^4M",["^H",[]],"^4N",["^1<","^?","^5U","~$clojure.test.check.results"]]],["^1Z","clojure/test/check/generators.cljc"],["f33d988fd57bc9c11af1952db81c10f319c91416","^4K",["^ ","^4L",null,"^4M",["^H",[]],"^4N",["^1<","^?","^4P","^5W","^5X","^50"]]],["^1Z","goog/debug/error.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4K",["^ ","^4L",null,"^4M",["^H",[]],"^4N",["^1<"]]],["^1Z","metabase/lib/common.cljc"],["a3bc6343077ef13a3da77612b68f23f9b2a3d890","^4K",["^ ","^4L",null,"^4M",["^H",[]],"^4N",["^1<","^?","^1G","^1A","^1?","^1:","^13","^W"]]],["^1Z","metabase/lib/schema/util.cljc"],["14a9e8a90c56f5e44b4ecd361e962722fd97aecf","^4K",["^ ","^4L",null,"^4M",["^H",[]],"^4N",["^1<","^?","^1?"]]],["^1Z","goog/flags/flags.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4K",["^ ","^4L",null,"^4M",["^H",[]],"^4N",["^1<"]]],["^1Z","malli/util.cljc"],["514c6f7d69d7e40b56fa75bfd1a49a683ca15982","^4K",["^ ","^4L",null,"^4M",["^H",[]],"^4N",["^1<","^?","^?","^5Y"]]],["^1Z","clojure/test/check/random/doubles.cljs"],["f33d988fd57bc9c11af1952db81c10f319c91416","^4K",["^ ","^4L",null,"^4M",["^H",[]],"^4N",["^1<","^?","~$clojure.test.check.random.longs"]]],["^1Z","net/cgrand/macrovich.cljc"],["abcb26cbfe0f8eef363b25525210c0fe1eb1f693","^4K",["^ ","^4L",null,"^4M",["^H",[]],"^4N",["^1<","^?"]]],["^1Z","malli/destructure.cljc"],["514c6f7d69d7e40b56fa75bfd1a49a683ca15982","^4K",["^ ","^4L",null,"^4M",["^H",[]],"^4N",["^1<","^?","~$clojure.walk","^5Y","~$malli.impl.util"]]],["^1Z","schema/spec/variant.cljc"],["0dacc3066a87f33088c9a332b6c21e8b0560011c","^4K",["^ ","^4L",null,"^4M",["^H",[]],"^4N",["^1<","^?","~$schema.utils","~$schema.spec.core"]]],["^1Z","goog/structs/circularbuffer.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4K",["^ ","^4L",null,"^4M",["^H",[]],"^4N",["^1<"]]],["^1Z","weavejester/dependency.cljc"],["7fd7f8879313f6a7e295f7447e668bdf492c42c1","^4K",["^ ","^4L",null,"^4M",["^H",[]],"^4N",["^1<","^?","^4X"]]],["^1Z","metabase/lib/schema/common.cljc"],["3f51a06335a7cb84c835d859c422919499874414","^4K",["^ ","^4L",null,"^4M",["^H",[]],"^4N",["^1<","^?","^4P","^5O","^5P"]]],["^1Z","goog/dom/nodetype.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4K",["^ ","^4L",null,"^4M",["^H",[]],"^4N",["^1<"]]],["^1Z","goog/labs/useragent/highentropy/highentropyvalue.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4K",["^ ","^4L",null,"^4M",["^H",[]],"^4N",["^1<","^4T","^4S"]]],["^1Z","cljs/pprint.cljs"],["bc14df6666853ed869d7b88aaa864111c65d0c7f","^4K",["^ ","^4L",null,"^4M",["^H",[]],"^4N",["^1<","^?","^4P","^50","~$goog.string.StringBuffer"]]],["^1Z","metabase/lib/schema/template_tag.cljc"],["f1b6289b8e576857fe667aed3da134e4ad1ea26a","^4K",["^ ","^4L",null,"^4M",["^H",[]],"^4N",["^1<","^?","^5Y","^13","^53","~$metabase.mbql.schema","^5P"]]],["^1Z","metabase/lib/schema/ref.cljc"],["5037a60b3d2f427702cf5cedf23f02bcc394d051","^4K",["^ ","^4L",null,"^4M",["^H",[]],"^4N",["^1<","^?","^4P","^1G","^1A","^13","^52","^53","~$metabase.lib.schema.mbql-clause","~$metabase.lib.schema.temporal-bucketing","^5O","^5P"]]],["^1Z","clojure/test/check/rose_tree.cljc"],["f33d988fd57bc9c11af1952db81c10f319c91416","^4K",["^ ","^4L",null,"^4M",["^H",[]],"^4N",["^1<","^?"]]],["^1Z","clojure/test/check/impl.cljc"],["f33d988fd57bc9c11af1952db81c10f319c91416","^4K",["^ ","^4L",null,"^4M",["^H",[]],"^4N",["^1<","^?"]]],["^1Z","camel_snake_kebab/internals/string_separator.cljc"],["5ae08f83ceb8959971e6334596bff0214bf6fdf2","^4K",["^ ","^4L",null,"^4M",["^H",[]],"^4N",["^1<","^?","^4P"]]],["^1Z","clojure/test/check/random.cljs"],["f33d988fd57bc9c11af1952db81c10f319c91416","^4K",["^ ","^4L",null,"^4M",["^H",[]],"^4N",["^1<","^?","~$clojure.test.check.random.doubles","^60"]]],["^1Z","metabase/lib/schema/expression/arithmetic.cljc"],["e6936a3e0b11bc3cd40d4e396c708af4622c21cb","^4K",["^ ","^4L",null,"^4M",["^H",[]],"^4N",["^1<","^?","^5Y","^1C","^1A","^13","^52","^67","^68","^5O","^5P"]]],["^1Z","goog/string/typedstring.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4K",["^ ","^4L",null,"^4M",["^H",[]],"^4N",["^1<"]]],["^1Z","metabase/lib/schema/expression/string.cljc"],["b2d7de575aaaa880fdc88dfc31642c8e002c3669","^4K",["^ ","^4L",null,"^4M",["^H",[]],"^4N",["^1<","^?","^52","^67"]]],["^1Z","metabase/lib/types/constants.cljc"],["efb91045e39c9ec06192309589f82a778219a002","^4K",["^ ","^4L",null,"^4M",["^H",[]],"^4N",["^1<","^?","^58"]]],["^1Z","goog/object/object.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4K",["^ ","^4L",null,"^4M",["^H",[]],"^4N",["^1<"]]],["^1Z","metabase/lib/schema/filter.cljc"],["0147dea423ebfd097bf1edb97f0325c9e2908a85","^4K",["^ ","^4L",null,"^4M",["^H",[]],"^4N",["^1<","^?","^13","^52","^67","^68","^5P"]]],["^1Z","goog/dom/asserts.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4K",["^ ","^4L",null,"^4M",["^H",[]],"^4N",["^1<","^5;"]]],"~:SHADOW-TIMESTAMP",[1689947046000,1689947046000,1689947050000],["^1Z","metabase/lib/ref.cljc"],["86a9fbeddec3e58f7bb54e61f5342658b370fb3b","^4K",["^ ","^4L",null,"^4M",["^H",[]],"^4N",["^1<","^?","^1G","~$metabase.lib.schema.ref","^W"]]],["^1Z","goog/math/long.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4K",["^ ","^4L",null,"^4M",["^H",[]],"^4N",["^1<","^5;","^5J"]]],["^1Z","goog/html/trustedresourceurl.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4K",["^ ","^4L",null,"^4M",["^H",[]],"^4N",["^1<","^5;","~$goog.fs.blob","^5<","~$goog.html.SafeScript","~$goog.html.trustedtypes","^5>","^5?"]]],["^1Z","schema/spec/leaf.cljc"],["0dacc3066a87f33088c9a332b6c21e8b0560011c","^4K",["^ ","^4L",null,"^4M",["^H",[]],"^4N",["^1<","^?","^64"]]],["^1Z","metabase/util/format.cljc"],["875f86a08288cb3ad5a6f15df988897eaf8613af","^4K",["^ ","^4L",null,"^4M",["^H",[]],"^4N",["^1<","^?","^50"]]],["^1Z","goog/math/irect.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4K",["^ ","^4L",null,"^4M",["^H",[]],"^4N",["^1<"]]],["^1Z","goog/math/box.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4K",["^ ","^4L",null,"^4M",["^H",[]],"^4N",["^1<","^5;","^5G"]]],["^1Z","metabase/lib/options.cljc"],["1870276153adf026e09a3e9ed1ba8beaad80e1c8","^4K",["^ ","^4L",null,"^4M",["^H",[]],"^4N",["^1<","^?","^13","^11","^14","^W"]]],["^1Z","goog/string/internal.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4K",["^ ","^4L",null,"^4M",["^H",[]],"^4N",["^1<"]]],["^1Z","clojure/test/check.cljc"],["f33d988fd57bc9c11af1952db81c10f319c91416","^4K",["^ ","^4L",null,"^4M",["^H",[]],"^4N",["^1<","^?","^5U","^5W","^5[","^5X","~$clojure.test.check.impl"]]],["^1Z","goog/functions/functions.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4K",["^ ","^4L",null,"^4M",["^H",[]],"^4N",["^1<"]]],["^1Z","metabase/lib/metadata.cljc"],["a8652a185953ef0e0b1c77d5540a4aa7271c0c63","^4K",["^ ","^4L",null,"^4M",["^H",[]],"^4N",["^1<","^?","~$metabase.lib.metadata.protocols","^13","^53","^1;","^W","^5P"]]],["^1Z","goog/html/safestyle.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4K",["^ ","^4L",null,"^4M",["^H",[]],"^4N",["^1<","^5>","~$goog.html.SafeUrl","^5?","^5;","^4S"]]],["^1Z","goog/dom/safe.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4K",["^ ","^4L",null,"^4M",["^H",[]],"^4N",["^1<","^5;","~$goog.asserts.dom","~$goog.dom.asserts","~$goog.functions","~$goog.html.SafeHtml","^6=","~$goog.html.SafeStyle","^6A","^5=","~$goog.html.uncheckedconversions","^5>","^4S"]]],["^1Z","goog/asserts/dom.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4K",["^ ","^4L",null,"^4M",["^H",[]],"^4N",["^1<","^5B","^5;","~$goog.dom.element"]]],["^1Z","medley/core.cljc"],["f5117fa4c15ff14c4a0ab7db414b0f102afb0b8a","^4K",["^ ","^4L",null,"^4M",["^H",[]],"^4N",["^1<","^?"]]],["^1Z","clojure/walk.cljs"],["bc14df6666853ed869d7b88aaa864111c65d0c7f","^4K",["^ ","^4L",null,"^4M",["^H",[]],"^4N",["^1<","^?"]]],["^1Z","metabase/lib/metadata/protocols.cljc"],["f5c81e2cab09f5dabb3cab711f7db1c5df1b398d","^4K",["^ ","^4L",null,"^4M",["^H",[]],"^4N",["^1<","^?"]]],["^1Z","metabase/lib/schema/expression/conditional.cljc"],["226c4623394b90853fcb014e9a95e84ffc8bd6db","^4K",["^ ","^4L",null,"^4M",["^H",[]],"^4N",["^1<","^?","^4X","^52","^67","^5O","^5P"]]],["^1Z","lambdaisland/glogi/console.cljs"],["76286836d4172602aa08006b2a754dda736ffe09","^4K",["^ ","^4L",null,"^4M",["^H",[]],"^4N",["^1<","^?","~$lambdaisland.glogi","~$lambdaisland.glogi.print","^58","^56"]]],["^1Z","goog/html/safehtml.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4K",["^ ","^4L",null,"^4M",["^H",[]],"^4N",["^1<","^5>","^6=","^6F","^5E","^6A","^5B","^5=","^5?","^5;","^5Q","^57","^58","^4S","~$goog.dom.tags","^6>"]]],["^1Z","goog/dom/tags.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4K",["^ ","^4L",null,"^4M",["^H",[]],"^4N",["^1<","^58"]]],["^1Z","goog/math/size.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4K",["^ ","^4L",null,"^4M",["^H",[]],"^4N",["^1<"]]],["^1Z","metabase/lib/temporal_bucket.cljc"],["22c08818f6579bd329ece9f6a337c75bf33381e2","^4K",["^ ","^4L",null,"^4M",["^H",[]],"^4N",["^1<","^?","^4P","^1G","^1A","^X","^U","^13","^68","^11","^W"]]],["^1Z","malli/error.cljc"],["514c6f7d69d7e40b56fa75bfd1a49a683ca15982","^4K",["^ ","^4L",null,"^4M",["^H",[]],"^4N",["^1<","^?","^4P","^5Y","~$malli.util"]]],["^1Z","metabase/lib/dispatch.cljc"],["914208cd51b78412eff1b402519bbb422845497a","^4K",["^ ","^4L",null,"^4M",["^H",[]],"^4N",["^1<","^?","^14"]]],["^1Z","metabase/util/malli.cljc"],["0f9ba23be6bb9fa629617001e985b988d2322b17","^4K",["^ ","^4L",null,"^4M",["^H",[]],"^4N",["^1<","^?","^?","^5Y","~$malli.destructure","~$malli.error","~$malli.generator","^6L","^11","^14"]]],["^1Z","goog/labs/useragent/engine.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4K",["^ ","^4L",null,"^4M",["^H",[]],"^4N",["^1<","^57","^4S","^4T"]]],["^1Z","goog/fs/blob.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4K",["^ ","^4L",null,"^4M",["^H",[]],"^4N",["^1<"]]],["^1Z","metabase/mbql/schema/helpers.cljc"],["b1f6002b97b59423b504abb666e13c9b0228b768","^4K",["^ ","^4L",null,"^4M",["^H",[]],"^4N",["^1<","^?","^4P","^5O","~$schema.core"]]],["^1Z","goog/dom/dom.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4K",["^ ","^4L",null,"^4M",["^H",[]],"^4N",["^1<","^57","^5;","^6B","~$goog.dom.BrowserFeature","^5A","^5B","^5C","^6E","^6G","^5G","^5I","^58","^50","^5>","~$goog.string.Unicode","^5K"]]],["^1Z","borkdude/dynaload.cljc"],["accd696ba364b850b4d92e38f5a34d0e828a0ad1","^4K",["^ ","^4L",null,"^4M",["^H",[]],"^4N",["^1<","^?"]]],["^1Z","metabase/util/log.cljs"],["7d8a3bf01eb27c2ba7269dc90dc218e46bcc1d3a","^4K",["^ ","^4L",null,"^4M",["^H",[]],"^4N",["^1<","^?","^55","^50","^51","^6I","~$lambdaisland.glogi.console"]]],["^1Z","goog/asserts/asserts.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4K",["^ ","^4L",null,"^4M",["^H",[]],"^4N",["^1<","~$goog.debug.Error","^5A"]]],["^1Z","goog/debug/relativetimeprovider.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4K",["^ ","^4L",null,"^4M",["^H",[]],"^4N",["^1<"]]],["^1Z","malli/sci.cljc"],["514c6f7d69d7e40b56fa75bfd1a49a683ca15982","^4K",["^ ","^4L",null,"^4M",["^H",[]],"^4N",["^1<","^?","~$borkdude.dynaload"]]],["^1Z","metabase/lib/schema/expression.cljc"],["f5c5c3ff3dc0f9a8b407cd7d06a68c6787061991","^4K",["^ ","^4L",null,"^4M",["^H",[]],"^4N",["^1<","^?","^1G","^1A","^13","^11","^5O","^W","^5P"]]],["^1Z","goog/math/rect.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4K",["^ ","^4L",null,"^4M",["^H",[]],"^4N",["^1<","^5;","^5F","^5G","~$goog.math.IRect","^5I"]]],["^1Z","flatland/ordered/map.cljs"],["3a9cb9d79e47d77ecd4f4d550371ecf01464c461","^4K",["^ ","^4L",null,"^4M",["^H",[]],"^4N",["^1<","^?"]]],["^1Z","goog/uri/uri.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4K",["^ ","^4L",null,"^4M",["^H",[]],"^4N",["^1<","^57","^5;","~$goog.collections.maps","^50","~$goog.structs","~$goog.uri.utils","~$goog.uri.utils.ComponentIndex","~$goog.uri.utils.StandardQueryParam"]]],["^1Z","metabase/util/malli/registry.cljc"],["921d4f259bbe54cbeb6b88ae56937df492bdfb5e","^4K",["^ ","^4L",null,"^4M",["^H",[]],"^4N",["^1<","^?","^5Y","^5Z","^6L"]]],["^1Z","goog/labs/useragent/highentropy/highentropydata.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4K",["^ ","^4L",null,"^4M",["^H",[]],"^4N",["^1<","^4U"]]],["^1Z","metabase/types/coercion_hierarchies.cljc"],["c3d70ef6080e044d61f13ff6bfd76490e2dcd0ac","^4K",["^ ","^4L",null,"^4M",["^H",[]],"^4N",["^1<","^?","^4X"]]],["^1Z","goog/collections/maps.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4K",["^ ","^4L",null,"^4M",["^H",[]],"^4N",["^1<"]]],["^1Z","metabase/lib/metadata/calculation.cljc"],["bbd3cc646a10312da5b543d7d353519f4c61f931","^4K",["^ ","^4L",null,"^4M",["^H",[]],"^4N",["^1<","^?","^4P","^1G","^1A","^Z","^1?","^U","^13","^52","^68","^1;","^11","^14","~$metabase.util.log","^W","^5P"]]],["^1Z","goog/debug/divconsole.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4K",["^ ","^4L",null,"^4M",["^H",[]],"^4N",["^1<","~$goog.debug.HtmlFormatter","~$goog.dom.DomHelper","^5B","^5C","^6E","^5E","^55","^5>","~$goog.style"]]],["^1Z","schema/spec/collection.cljc"],["0dacc3066a87f33088c9a332b6c21e8b0560011c","^4K",["^ ","^4L",null,"^4M",["^H",[]],"^4N",["^1<","^?","^63","^64"]]],["^1Z","malli/impl/util.cljc"],["514c6f7d69d7e40b56fa75bfd1a49a683ca15982","^4K",["^ ","^4L",null,"^4M",["^H",[]],"^4N",["^1<","^?"]]],["^1Z","metabase/lib/schema/order_by.cljc"],["3f577f71e4ecba1aa1061f2228f6026ab45312ff","^4K",["^ ","^4L",null,"^4M",["^H",[]],"^4N",["^1<","^?","^52","^67","^5P"]]],["^1Z","schema/utils.cljc"],["0dacc3066a87f33088c9a332b6c21e8b0560011c","^4K",["^ ","^4L",null,"^4M",["^H",[]],"^4N",["^1<","^?","^51","^58","^50","^4P"]]],["^1Z","metabase/lib/schema/aggregation.cljc"],["ea4a70903cfc3ffeaa60ebdedb5ea00892da4dbe","^4K",["^ ","^4L",null,"^4M",["^H",[]],"^4N",["^1<","^?","^1A","^52","^67","^11","^5P"]]],["^1Z","cljs/core/match.cljs"],["f419c02deee501e9f4b29f81215ba81ffcefe9b6","^4K",["^ ","^4L",null,"^4M",["^H",[]],"^4N",["^1<","^?"]]],["^1Z","goog/debug/fancywindow.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4K",["^ ","^4L",null,"^4M",["^H",[]],"^4N",["^1<","^57","^5;","~$goog.debug.DebugWindow","^72","^5B","^5C","^6E","^5E","^55","^58","^50","^5>","^5K"]]],["^1Z","goog/debug/formatter.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4K",["^ ","^4L",null,"^4M",["^H",[]],"^4N",["^1<","~$goog.debug","~$goog.debug.RelativeTimeProvider","^6E","^6A","^6G","^55","^5>"]]],["^1Z","metabase/shared/util/namespaces.cljs"],["00687008abd6eb291bc9d5ff1fff73210e0bbe6e","^4K",["^ ","^4L",null,"^4M",["^H",[]],"^4N",["^1<","^?"]]],["^1Z","metabase/mbql/util/match/impl.cljc"],["4150e01975339d308f5cfedda77875eda19c030d","^4K",["^ ","^4L",null,"^4M",["^H",[]],"^4N",["^1<","^?"]]],["^1Z","goog/fs/url.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4K",["^ ","^4L",null,"^4M",["^H",[]],"^4N",["^1<"]]],["^1Z","goog/base.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4K",["^ ","^4L",null,"^4M",["^H",[]],"^4N",[]]],["^1Z","goog/structs/structs.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4K",["^ ","^4L",null,"^4M",["^H",[]],"^4N",["^1<","^57","^58"]]],["^1Z","clojure/string.cljs"],["bc14df6666853ed869d7b88aaa864111c65d0c7f","^4K",["^ ","^4L",null,"^4M",["^H",[]],"^4N",["^1<","^?","^50","^65"]]],["^1Z","metabase/lib/schema/temporal_bucketing.cljc"],["9cb7bba3e46e1de2fbb37d61df332336da6d9f66","^4K",["^ ","^4L",null,"^4M",["^H",[]],"^4N",["^1<","^?","^4X","^5P"]]],["^1Z","metabase/util.cljc"],["2eb945a6741f1450ecac08a9087b862ce52b9e3a","^4K",["^ ","^4L",null,"^4M",["^H",[]],"^4N",["^1<","^?","~$camel-snake-kebab.internals.macros","~$clojure.data","^C","^4X","^4P","^61","~$flatland.ordered.map","^1C","^11","~$metabase.shared.util.namespaces","~$metabase.util.format","^70","~$net.cgrand.macrovich","~$weavejester.dependency"]]],["^1Z","clojure/test/check/random/longs/bit_count_impl.cljs"],["f33d988fd57bc9c11af1952db81c10f319c91416","^4K",["^ ","^4L",null,"^4M",["^H",[]],"^4N",["^1<","^?"]]],["^1Z","malli/impl/regex.cljc"],["514c6f7d69d7e40b56fa75bfd1a49a683ca15982","^4K",["^ ","^4L",null,"^4M",["^H",[]],"^4N",["^1<","^?","^62"]]],["^1Z","camel_snake_kebab/internals/macros.cljc"],["5ae08f83ceb8959971e6334596bff0214bf6fdf2","^4K",["^ ","^4L",null,"^4M",["^H",[]],"^4N",["^1<","^?","~$camel-snake-kebab.internals.alter-name","~$camel-snake-kebab.internals.misc"]]],["^1Z","metabase/lib/schema/expression/temporal.cljc"],["f1f22c1655e7d335b884a22b010f2b8b08ad1e94","^4K",["^ ","^4L",null,"^4M",["^H",[]],"^4N",["^1<","^?","^4X","^5Y","^1A","^13","^52","~$metabase.lib.schema.literal","^67","^68","^5P","^5M","^5N"]]],["^1Z","goog/string/string.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4K",["^ ","^4L",null,"^4M",["^H",[]],"^4N",["^1<","^5C","^6G","^5>","^4S"]]],["^1Z","schema/core.cljc"],["0dacc3066a87f33088c9a332b6c21e8b0560011c","^4K",["^ ","^4L",null,"^4M",["^H",[]],"^4N",["^1<","^?","^4P","^63","^64","~$schema.spec.leaf","~$schema.spec.variant","~$schema.spec.collection"]]],["^1Z","metabase/mbql/schema.cljc"],["c51bf2a180ecbc12d6a1cd42a4049323f46a0085","^4K",["^ ","^4L",null,"^4M",["^H",[]],"^4N",["^1<","^?","^5M","^5N","^?","^4X","~$metabase.mbql.schema.helpers","~$metabase.mbql.schema.macros","^6P"]]],["^1Z","metabase/mbql/util/match.cljs"],["d65aaa9fbcb7960b90ba7ca97258b1dc8a40be2b","^4K",["^ ","^4L",null,"^4M",["^H",[]],"^4N",["^1<","^?","^E","~$metabase.mbql.util.match.impl"]]],["^1Z","malli/core.cljc"],["514c6f7d69d7e40b56fa75bfd1a49a683ca15982","^4K",["^ ","^4L",null,"^4M",["^H",[]],"^4N",["^1<","^?","^?","~$malli.impl.regex","^62","^5Z","~$malli.sci"]]],["^1Z","metabase/lib/schema.cljc"],["122fe4013d55087fc7287141eb7dc6f630436424","^4K",["^ ","^4L",null,"^4M",["^H",[]],"^4N",["^1<","^?","^16","^13","^52","~$metabase.lib.schema.expression.arithmetic","~$metabase.lib.schema.expression.conditional","~$metabase.lib.schema.expression.string","~$metabase.lib.schema.expression.temporal","~$metabase.lib.schema.filter","^53","~$metabase.lib.schema.join","^7@","~$metabase.lib.schema.order-by","^6;","~$metabase.lib.schema.template-tag","~$metabase.lib.schema.util","~$metabase.mbql.util.match","^5P"]]],["^1Z","clojure/data.cljs"],["bc14df6666853ed869d7b88aaa864111c65d0c7f","^4K",["^ ","^4L",null,"^4M",["^H",[]],"^4N",["^1<","^?","^4X"]]],["^1Z","goog/reflect/reflect.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4K",["^ ","^4L",null,"^4M",["^H",[]],"^4N",["^1<"]]],["^1Z","goog/labs/useragent/util.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4K",["^ ","^4L",null,"^4M",["^H",[]],"^4N",["^1<","^4S","^4W"]]],["^1Z","goog/debug/debug.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4K",["^ ","^4L",null,"^4M",["^H",[]],"^4N",["^1<","^57","~$goog.debug.errorcontext"]]],["^1Z","goog/string/stringbuffer.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4K",["^ ","^4L",null,"^4M",["^H",[]],"^4N",["^1<"]]],["^1Z","schema/spec/core.cljc"],["0dacc3066a87f33088c9a332b6c21e8b0560011c","^4K",["^ ","^4L",null,"^4M",["^H",[]],"^4N",["^1<","^?","^63"]]],["^5L","ttag"],["^4R","shadow.js.shim.module$ttag.js","require","^4K",["^ ","^4L",null,"^4M",["^H",[]],"^4N",["^1<"]]],["^1Z","goog/math/coordinate.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4K",["^ ","^4L",null,"^4M",["^H",[]],"^4N",["^1<","~$goog.math"]]],["^1Z","goog/debug/errorcontext.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4K",["^ ","^4L",null,"^4M",["^H",[]],"^4N",["^1<"]]],["^1Z","goog/labs/useragent/useragent.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4K",["^ ","^4L",null,"^4M",["^H",[]],"^4N",["^1<","~$goog.flags"]]],["^1Z","goog/dom/element.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4K",["^ ","^4L",null,"^4M",["^H",[]],"^4N",["^1<","^5A","^5B"]]],["^1Z","goog/html/uncheckedconversions.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4K",["^ ","^4L",null,"^4M",["^H",[]],"^4N",["^1<","^5;","^6E","^6=","^6F","^5E","^6A","^5=","^5>","^4S"]]],["^1Z","metabase/lib/aggregation.cljc"],["69e5afb14bf9268c61c5028c24d98c80e02109fa","^4K",["^ ","^4L",null,"^4M",["^H",[]],"^4N",["^1<","^?","^1C","^19","^1G","^Y","^1A","^Z","^X","^1?","^1:","^U","^16","^13","^1B","^1H","^1;","^11","^14","^W"]]],["^1Z","goog/debug/debugwindow.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4K",["^ ","^4L",null,"^4M",["^H",[]],"^4N",["^1<","^71","^5C","^6E","^5E","^55","^5>","~$goog.structs.CircularBuffer","^5K"]]],["^1Z","metabase/mbql/util.cljc"],["2532d5faa94d2a89dd06e529c641d594e298e2aa","^4K",["^ ","^4L",null,"^4M",["^H",[]],"^4N",["^1<","^?","^4P","~$metabase.mbql.predicates","^66","^7D","^7R","^11","^6P"]]],["^1Z","metabase/lib/types/isa.cljc"],["e18ef4b76ca36474693ff48f933bf55296452722","^4K",["^ ","^4L",null,"^4M",["^H",[]],"^4N",["^1<","^?","^1C","~$metabase.lib.types.constants","^1;","^5O"]]],["^1Z","goog/dom/htmlelement.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4K",["^ ","^4L",null,"^4M",["^H",[]],"^4N",["^1<"]]],["^1Z","cljs/core.cljs"],["bc14df6666853ed869d7b88aaa864111c65d0c7f","^4K",["^ ","^4L",null,"^4M",["^H",[]],"^4N",["^1<","~$goog.math.Long","~$goog.math.Integer","^50","^58","^57","^4Z","^65"]]],["^1Z","goog/html/safescript.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4K",["^ ","^4L",null,"^4M",["^H",[]],"^4N",["^1<","^5>","^5?","^6>","^5;"]]],["^1Z","clojure/test/check/random/longs.cljs"],["f33d988fd57bc9c11af1952db81c10f319c91416","^4K",["^ ","^4L",null,"^4M",["^H",[]],"^4N",["^1<","^?","~$clojure.test.check.random.longs.bit-count-impl","^7Y","^?"]]],["^1Z","goog/log/log.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4K",["^ ","^4L",null,"^4M",["^H",[]],"^4N",["^1<","^5;","^75"]]],["^1Z","camel_snake_kebab/internals/alter_name.cljc"],["5ae08f83ceb8959971e6334596bff0214bf6fdf2","^4K",["^ ","^4L",null,"^4M",["^H",[]],"^4N",["^1<","^?"]]],["^1Z","goog/html/safestylesheet.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4K",["^ ","^4L",null,"^4M",["^H",[]],"^4N",["^1<","^5>","^6F","^5?","^58","^5;","^4S"]]],["^1Z","goog/math/integer.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4K",["^ ","^4L",null,"^4M",["^H",[]],"^4N",["^1<","^5J"]]],["^1Z","goog/debug/console.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4K",["^ ","^4L",null,"^4M",["^H",[]],"^4N",["^1<","~$goog.debug.TextFormatter","^55"]]],["^1Z","lambdaisland/glogi/print.cljs"],["76286836d4172602aa08006b2a754dda736ffe09","^4K",["^ ","^4L",null,"^4M",["^H",[]],"^4N",["^1<","^?","^6I","^58"]]],["^1Z","goog/dom/browserfeature.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4K",["^ ","^4L",null,"^4M",["^H",[]],"^4N",["^1<","^5K"]]],["^1Z","clojure/set.cljs"],["bc14df6666853ed869d7b88aaa864111c65d0c7f","^4K",["^ ","^4L",null,"^4M",["^H",[]],"^4N",["^1<","^?"]]],["^1Z","goog/uri/utils.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4K",["^ ","^4L",null,"^4M",["^H",[]],"^4N",["^1<","^5;","^50"]]],["^1Z","goog/string/const.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4K",["^ ","^4L",null,"^4M",["^H",[]],"^4N",["^1<","^5;","^5?"]]],["^1Z","metabase/lib/schema/id.cljc"],["7cdfc70702a9a9e04b75ca7c9dc898ddf546f99d","^4K",["^ ","^4L",null,"^4M",["^H",[]],"^4N",["^1<","^?","^13","^66","^5P"]]],["^1Z","metabase/lib/equality.cljc"],["09e4ca6749d64c174c277a2b16f7ad15b5cf6870","^4K",["^ ","^4L",null,"^4M",["^H",[]],"^4N",["^1<","^?","^1C","^1G","^1A","^Z","^1?","^1;","^7R"]]],["^1Z","goog/dom/vendor.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4K",["^ ","^4L",null,"^4M",["^H",[]],"^4N",["^1<","^50","^5K"]]],["^1Z","metabase/lib/schema/literal.cljc"],["f8f31bfaef820ab25b896b49fd404b937d0df64e","^4K",["^ ","^4L",null,"^4M",["^H",[]],"^4N",["^1<","^?","^5Y","^13","^52","^67","^5P"]]],["^1Z","metabase/lib/hierarchy.cljc"],["c9d228603522de5c85546fb645c59736d4eb94d2","^4K",["^ ","^4L",null,"^4M",["^H",[]],"^4N",["^1<","^?"]]],["^1Z","metabase/mbql/predicates.cljc"],["20ab1a5ccd943c35c646c5f7396ea40f9bfa7ac4","^4K",["^ ","^4L",null,"^4M",["^H",[]],"^4N",["^1<","^?","^66","^6P"]]],["^1Z","clojure/test/check/results.cljc"],["f33d988fd57bc9c11af1952db81c10f319c91416","^4K",["^ ","^4L",null,"^4M",["^H",[]],"^4N",["^1<","^?"]]],["^5L","crc-32"],["^4[","shadow.js.shim.module$crc_32.js","require","^4K",["^ ","^4L",null,"^4M",["^H",[]],"^4N",["^1<"]]],["^1Z","metabase/lib/schema/join.cljc"],["924e0ca4abbab776fa05357d6d22bafb8a596648","^4K",["^ ","^4L",null,"^4M",["^H",[]],"^4N",["^1<","^?","^13","^52","^11","^5P"]]]]],"~:clj-info",["^ ","jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/analyzer/impl.cljc",1689947050000,"jar:file:/root/.m2/repository/instaparse/instaparse/1.4.12/instaparse-1.4.12.jar!/instaparse/line_col.clj",1689946146000,"jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/source_map/base64_vlq.clj",1689947050000,"jar:file:/root/.m2/repository/instaparse/instaparse/1.4.12/instaparse-1.4.12.jar!/instaparse/viz.clj",1689946146000,"jar:file:/root/.m2/repository/org/clojure/tools.namespace/1.4.4/tools.namespace-1.4.4.jar!/clojure/tools/namespace/parse.cljc",1689946139000,"jar:file:/root/.m2/repository/weavejester/dependency/0.2.1/dependency-0.2.1.jar!/weavejester/dependency.cljc",1689946093000,"jar:file:/root/.m2/repository/instaparse/instaparse/1.4.12/instaparse-1.4.12.jar!/instaparse/transform.clj",1689946146000,"jar:file:/root/.m2/repository/ring/ring-codec/1.2.0/ring-codec-1.2.0.jar!/ring/util/codec.clj",1689946172000,"file:/home/gmrworkspace/dashboard/src/metabase/lib/hierarchy.cljc",1690286812000,"jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/instant.clj",1689947050000,"jar:file:/root/.m2/repository/org/clojure/tools.reader/1.3.6/tools.reader-1.3.6.jar!/clojure/tools/reader/default_data_readers.clj",1689946174000,"jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/pprint.cljc",1689947050000,"jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/externs.clj",1689947050000,"file:/home/gmrworkspace/dashboard/shared/src/metabase/mbql/util/match.clj",1690286812000,"jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/vendor/clojure/tools/reader/default_data_readers.clj",1689947050000,"file:/home/gmrworkspace/dashboard/shared/src/metabase/mbql/schema/helpers.cljc",1692013156305,"jar:file:/root/.m2/repository/prismatic/schema/1.4.1/schema-1.4.1.jar!/schema/core.cljc",1689946172000,"file:/home/gmrworkspace/dashboard/shared/src/metabase/shared/util/i18n.clj",1690286812000,"jar:file:/root/.m2/repository/org/clojure/tools.reader/1.3.6/tools.reader-1.3.6.jar!/clojure/tools/reader/edn.clj",1689946174000,"jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/compiler.cljc",1689947050000,"jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/env.cljc",1689947050000,"jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/analyzer/impl/namespaces.cljc",1689947050000,"jar:file:/root/.m2/repository/prismatic/schema/1.4.1/schema-1.4.1.jar!/schema/macros.clj",1689946172000,"file:/home/gmrworkspace/dashboard/src/metabase/util/i18n/plural.clj",1690286813000,"jar:file:/root/.m2/repository/metosin/malli/0.10.2/malli-0.10.2.jar!/malli/core.cljc",1689946170000,"jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/source_map.clj",1689947050000,"jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/util.cljc",1689947050000,"file:/home/gmrworkspace/dashboard/src/metabase/util.cljc",1690286813000,"jar:file:/root/.m2/repository/nano-id/nano-id/1.0.0/nano-id-1.0.0.jar!/nano_id/core.cljc",1689946171000,"file:/home/gmrworkspace/dashboard/src/metabase/lib/dispatch.cljc",1690286812000,"file:/home/gmrworkspace/dashboard/src/metabase/lib/schema/common.cljc",1690286812000,"file:/home/gmrworkspace/dashboard/src/metabase/plugins/classloader.clj",1692013156125,"jar:file:/root/.m2/repository/medley/medley/1.4.0/medley-1.4.0.jar!/medley/core.cljc",1689946185000,"jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/analyzer.cljc",1689947050000,"jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/analyzer/passes.cljc",1689947050000,"jar:file:/root/.m2/repository/org/clojure/test.check/1.1.1/test.check-1.1.1.jar!/clojure/test/check/random.clj",1689946177000,"jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/vendor/clojure/data/json.clj",1689947050000,"file:/home/gmrworkspace/dashboard/src/metabase/util/format.cljc",1690286813000,"jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/source_map/base64.clj",1689947050000,"jar:file:/root/.m2/repository/riddley/riddley/0.2.0/riddley-0.2.0.jar!/riddley/walk.clj",1689946160000,"file:/home/gmrworkspace/dashboard/src/metabase/lib/schema/ref.cljc",1690286812000,"jar:file:/root/.m2/repository/instaparse/instaparse/1.4.12/instaparse-1.4.12.jar!/instaparse/reduction.clj",1689946146000,"jar:file:/root/.m2/repository/org/tcrawley/dynapath/1.1.0/dynapath-1.1.0.jar!/dynapath/util.clj",1689946174000,"jar:file:/root/.m2/repository/camel-snake-kebab/camel-snake-kebab/0.4.3/camel-snake-kebab-0.4.3.jar!/camel_snake_kebab/internals/macros.cljc",1689946178000,"file:/home/gmrworkspace/dashboard/shared/src/metabase/mbql/util/match/impl.cljc",1690286812000,"jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/vendor/clojure/tools/reader/reader_types.clj",1689947050000,"jar:file:/root/.m2/repository/instaparse/instaparse/1.4.12/instaparse-1.4.12.jar!/instaparse/auto_flatten_seq.clj",1689946146000,"jar:file:/root/.m2/repository/instaparse/instaparse/1.4.12/instaparse-1.4.12.jar!/instaparse/core.clj",1689946146000,"jar:file:/root/.m2/repository/metosin/malli/0.10.2/malli-0.10.2.jar!/malli/generator.cljc",1689946170000,"file:/home/gmrworkspace/dashboard/src/metabase/lib/schema/id.cljc",1690286812000,"jar:file:/root/.m2/repository/org/clojure/core.cache/1.0.225/core.cache-1.0.225.jar!/clojure/core/cache.clj",1689946183000,"file:/home/gmrworkspace/dashboard/src/metabase/lib/schema/expression.cljc",1690286812000,"jar:file:/root/.m2/repository/metosin/malli/0.10.2/malli-0.10.2.jar!/malli/sci.cljc",1689946170000,"jar:file:/root/.m2/repository/potemkin/potemkin/0.4.6/potemkin-0.4.6.jar!/potemkin/types.clj",1689946176000,"jar:file:/root/.m2/repository/org/clojure/test.check/1.1.1/test.check-1.1.1.jar!/clojure/test/check/properties.cljc",1689946177000,"jar:file:/root/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/set.clj",1689946092000,"jar:file:/root/.m2/repository/org/clojure/math.numeric-tower/0.0.5/math.numeric-tower-0.0.5.jar!/clojure/math/numeric_tower.clj",1689946148000,"jar:file:/root/.m2/repository/net/cgrand/macrovich/0.2.1/macrovich-0.2.1.jar!/net/cgrand/macrovich.cljc",1689946165000,"jar:file:/root/.m2/repository/colorize/colorize/0.1.1/colorize-0.1.1.jar!/colorize/core.clj",1689946104000,"jar:file:/root/.m2/repository/borkdude/dynaload/0.3.5/dynaload-0.3.5.jar!/borkdude/dynaload.cljc",1689946165000,"jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/vendor/clojure/tools/reader/impl/inspect.clj",1689947050000,"file:/home/gmrworkspace/dashboard/src/metabase/lib/options.cljc",1692013156125,"jar:file:/root/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/string.clj",1689946092000,"jar:file:/root/.m2/repository/potemkin/potemkin/0.4.6/potemkin-0.4.6.jar!/potemkin.clj",1689946176000,"jar:file:/root/.m2/repository/instaparse/instaparse/1.4.12/instaparse-1.4.12.jar!/instaparse/failure.clj",1689946146000,"jar:file:/root/.m2/repository/prismatic/schema/1.4.1/schema-1.4.1.jar!/schema/spec/variant.cljc",1689946172000,"jar:file:/root/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/core.clj",1689946092000,"file:/home/gmrworkspace/dashboard/src/metabase/util/i18n/impl.clj",1692013156125,"jar:file:/root/.m2/repository/org/clojure/tools.namespace/1.4.4/tools.namespace-1.4.4.jar!/clojure/tools/namespace/dependency.cljc",1689946139000,"jar:file:/root/.m2/repository/prismatic/schema/1.4.1/schema-1.4.1.jar!/schema/spec/leaf.cljc",1689946172000,"jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/analyzer/passes/and_or.cljc",1689947050000,"jar:file:/root/.m2/repository/org/clojure/test.check/1.1.1/test.check-1.1.1.jar!/clojure/test/check.cljc",1689946177000,"jar:file:/root/.m2/repository/riddley/riddley/0.2.0/riddley-0.2.0.jar!/riddley/compiler.clj",1689946160000,"jar:file:/root/.m2/repository/org/clojure/core.memoize/1.0.257/core.memoize-1.0.257.jar!/clojure/core/memoize.clj",1689946178000,"jar:file:/root/.m2/repository/metosin/malli/0.10.2/malli-0.10.2.jar!/malli/destructure.cljc",1689946170000,"jar:file:/root/.m2/repository/instaparse/instaparse/1.4.12/instaparse-1.4.12.jar!/instaparse/print.clj",1689946146000,"jar:file:/root/.m2/repository/org/clojure/tools.namespace/1.4.4/tools.namespace-1.4.4.jar!/clojure/tools/namespace/track.cljc",1689946139000,"jar:file:/root/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/pprint.clj",1689946092000,"jar:file:/root/.m2/repository/org/clojure/java.classpath/1.0.0/java.classpath-1.0.0.jar!/clojure/java/classpath.clj",1689946162000,"jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/js_deps.cljc",1689947050000,"jar:file:/root/.m2/repository/metosin/malli/0.10.2/malli-0.10.2.jar!/malli/impl/regex.cljc",1689946170000,"jar:file:/root/.m2/repository/cheshire/cheshire/5.11.0/cheshire-5.11.0.jar!/cheshire/factory.clj",1689946173000,"jar:file:/root/.m2/repository/org/clojure/tools.reader/1.3.6/tools.reader-1.3.6.jar!/clojure/tools/reader/impl/errors.clj",1689946174000,"jar:file:/root/.m2/repository/metosin/malli/0.10.2/malli-0.10.2.jar!/malli/experimental.cljc",1689946170000,"jar:file:/root/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/walk.clj",1689946092000,"jar:file:/root/.m2/repository/org/clojure/tools.reader/1.3.6/tools.reader-1.3.6.jar!/clojure/tools/reader.clj",1689946174000,"file:/home/gmrworkspace/dashboard/src/metabase/lib/common.cljc",1690286812000,"jar:file:/root/.m2/repository/prismatic/schema/1.4.1/schema-1.4.1.jar!/schema/spec/core.cljc",1689946172000,"jar:file:/root/.m2/repository/org/clojure/test.check/1.1.1/test.check-1.1.1.jar!/clojure/test/check/generators.cljc",1689946177000,"jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/core.cljc",1689947050000,"jar:file:/root/.m2/repository/cheshire/cheshire/5.11.0/cheshire-5.11.0.jar!/cheshire/generate.clj",1689946173000,"jar:file:/root/.m2/repository/metosin/malli/0.10.2/malli-0.10.2.jar!/malli/experimental/time.cljc",1689946170000,"jar:file:/root/.m2/repository/org/clojure/tools.reader/1.3.6/tools.reader-1.3.6.jar!/clojure/tools/reader/reader_types.clj",1689946174000,"file:/home/gmrworkspace/dashboard/shared/src/metabase/mbql/schema.cljc",1692013156305,"jar:file:/root/.m2/repository/cheshire/cheshire/5.11.0/cheshire-5.11.0.jar!/cheshire/parse.clj",1689946173000,"file:/home/gmrworkspace/dashboard/src/metabase/util/i18n.clj",1692013156125,"jar:file:/root/.m2/repository/instaparse/instaparse/1.4.12/instaparse-1.4.12.jar!/instaparse/cfg.clj",1689946146000,"jar:file:/root/.m2/repository/cheshire/cheshire/5.11.0/cheshire-5.11.0.jar!/cheshire/core.clj",1689946173000,"jar:file:/root/.m2/repository/metosin/malli/0.10.2/malli-0.10.2.jar!/malli/impl/util.cljc",1689946170000,"jar:file:/root/.m2/repository/metosin/malli/0.10.2/malli-0.10.2.jar!/malli/registry.cljc",1689946170000,"jar:file:/root/.m2/repository/instaparse/instaparse/1.4.12/instaparse-1.4.12.jar!/instaparse/gll.clj",1689946146000,"jar:file:/root/.m2/repository/metosin/malli/0.10.2/malli-0.10.2.jar!/malli/instrument.clj",1689946170000,"jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/vendor/clojure/tools/reader.clj",1689947050000,"jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/spec/gen/alpha.cljc",1689947050000,"file:/home/gmrworkspace/dashboard/src/metabase/lib/ref.cljc",1690286812000,"jar:file:/root/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/edn.clj",1689946092000,"jar:file:/root/.m2/repository/nano-id/nano-id/1.0.0/nano-id-1.0.0.jar!/nano_id/random.cljc",1689946171000,"jar:file:/root/.m2/repository/environ/environ/1.2.0/environ-1.2.0.jar!/environ/core.cljc",1689946163000,"jar:file:/root/.m2/repository/prismatic/schema/1.4.1/schema-1.4.1.jar!/schema/spec/collection.cljc",1689946172000,"jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/vendor/clojure/tools/reader/impl/errors.clj",1689947050000,"jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/tagged_literals.cljc",1689947050000,"jar:file:/root/.m2/repository/instaparse/instaparse/1.4.12/instaparse-1.4.12.jar!/instaparse/repeat.clj",1689946146000,"jar:file:/root/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/java/io.clj",1689946092000,"jar:file:/root/.m2/repository/org/clojure/test.check/1.1.1/test.check-1.1.1.jar!/clojure/test/check/results.cljc",1689946177000,"jar:file:/root/.m2/repository/com/lambdaisland/glogi/1.2.164/glogi-1.2.164.jar!/lambdaisland/glogi.clj",1689947043000,"jar:file:/root/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/instant.clj",1689946092000,"file:/home/gmrworkspace/dashboard/shared/src/metabase/shared/util/namespaces.clj",1690286812000,"jar:file:/root/.m2/repository/org/clojure/tools.namespace/1.4.4/tools.namespace-1.4.4.jar!/clojure/tools/namespace/file.clj",1689946139000,"jar:file:/root/.m2/repository/org/clojure/core.match/1.0.1/core.match-1.0.1.jar!/cljs/core/match.clj",1689946174000,"jar:file:/root/.m2/repository/org/clojure/spec.alpha/0.3.218/spec.alpha-0.3.218.jar!/clojure/spec/gen/alpha.clj",1689946117000,"jar:file:/root/.m2/repository/metosin/malli/0.10.2/malli-0.10.2.jar!/malli/error.cljc",1689946170000,"file:/home/gmrworkspace/dashboard/shared/src/metabase/mbql/schema/macros.clj",1690286812000,"jar:file:/root/.m2/repository/prismatic/schema/1.4.1/schema-1.4.1.jar!/schema/utils.cljc",1689946172000,"file:/home/gmrworkspace/dashboard/src/metabase/util/malli/registry.cljc",1690286813000,"file:/home/gmrworkspace/dashboard/src/metabase/config.clj",1692013154929,"file:/home/gmrworkspace/dashboard/src/metabase/util/log.clj",1690286813000,"file:/home/gmrworkspace/dashboard/src/metabase/util/malli.cljc",1690286813000,"jar:file:/root/.m2/repository/org/clojure/test.check/1.1.1/test.check-1.1.1.jar!/clojure/test/check/rose_tree.cljc",1689946177000,"jar:file:/root/.m2/repository/org/clojure/tools.reader/1.3.6/tools.reader-1.3.6.jar!/clojure/tools/reader/impl/inspect.clj",1689946174000,"jar:file:/root/.m2/repository/instaparse/instaparse/1.4.12/instaparse-1.4.12.jar!/instaparse/combinators_source.clj",1689946146000,"jar:file:/root/.m2/repository/instaparse/instaparse/1.4.12/instaparse-1.4.12.jar!/instaparse/abnf.clj",1689946146000,"jar:file:/root/.m2/repository/org/clojure/tools.namespace/1.4.4/tools.namespace-1.4.4.jar!/clojure/tools/namespace/find.clj",1689946139000,"jar:file:/root/.m2/repository/org/tcrawley/dynapath/1.1.0/dynapath-1.1.0.jar!/dynapath/dynamic_classpath.clj",1689946174000,"file:/home/gmrworkspace/dashboard/src/metabase/lib/schema/temporal_bucketing.cljc",1690286812000,"jar:file:/root/.m2/repository/cheshire/cheshire/5.11.0/cheshire-5.11.0.jar!/cheshire/generate_seq.clj",1689946173000,"file:/home/gmrworkspace/dashboard/src/metabase/lib/schema/mbql_clause.cljc",1690286812000,"jar:file:/root/.m2/repository/metosin/malli/0.10.2/malli-0.10.2.jar!/malli/util.cljc",1689946170000,"file:/home/gmrworkspace/dashboard/src/metabase/util/jvm.clj",1692013156125],"~:analyzer",["^ ","^3",null,"^4",["^ "],"^5",["^ ","^6","metabase/lib/aggregation.cljc","^7",1,"^8",5,"^9",1,"^:",29],"^;",["^ ","^<","^=","^>","^?","^@","^A","^B","^C","^D","^E"],"^F",null,"^G",["^H",["^I","^J","^K","^L","^M"]],"^N","^O","^P",["^ "],"^S",null,"^T",["^ ","^U","^U","^V","^W","^X","^X","^Y","^Y","^Z","^Z","^[","^Y","^10","^11","^12","^13","~$u","^14","^15","^16","^17","^Z","^18","^19","^?","^?","^1:","^1:","^1;","^1;","^1<","^1<","^1=","^U","^13","^13","^1>","^1?","^1@","^1A","^1B","^1B","~$m","^1C","^14","^14","^1D","^1:","^19","^19","^11","^11","^1E","^1;","^1F","^1G","^1H","^1H","^W","^W","^1I","^X","^1J","^1H","^1K","^1B","^1A","^1A","^1?","^1?","^16","^16","^1G","^1G","^1C","^1C"],"^1L",["^H",["^1M"]],"~:shadow/js-access-global",["^H",["Error"]],"^1N",null,"~:defs",["^ ","~$aggregate",["^ ","~:schema",["~:function",["~:=>",["~:cat","~:any","^;@"],"~:metabase.lib.schema/query"],["^;>",["^;?","^;A","~:int","~$Aggregatable"],"^;A"]],"~:validate!","id63173","~:protocol-inline",null,"^5",["^ ","^;<",["^;=",["^;>",["^;?","^;@","^;@"],"^;A"],["^;>",["^;?","^;A","^;B","^;C"],"^;A"]],"^;D","id63173","^6","metabase/lib/aggregation.cljc","^:",19,"~:top-fn",["^ ","~:variadic?",false,"~:fixed-arity",3,"~:max-fixed-arity",3,"~:method-params",[["~$query","~$aggregatable"],["^;K","~$stage-number","^;L"]],"~:arglists",["^1Q",[["^;K","^;L"],["^;K","^;M","^;L"]]],"~:arglists-meta",["^1Q",[null,null]]],"^8",10,"~:raw-arglists",["^1Q",["~$quote",["^1Q",[["^;K","^;L"],["^;K","~:-","^;A","^;M","~:-","^;B","^;L","~:-","^;C"]]]]],"^7",234,"^9",234,"^;N",["^1Q",["^;Q",["^1Q",[["^;K","^;L"],["^;K","^;M","^;L"]]]]],"~:doc","Inputs: ([query aggregatable]\n           [query :- :metabase.lib.schema/query stage-number :- :int aggregatable :- Aggregatable])\n  Return: :metabase.lib.schema/query\n          \n\n  Adds an aggregation to query."],"^N","^2<","^6","metabase/lib/aggregation.cljc","^:",19,"^;F",["^ ","^;G",false,"^;H",3,"^;I",3,"^;J",[["^;K","^;L"],["^;K","^;M","^;L"]],"^;N",["^1Q",[["^;K","^;L"],["^;K","^;M","^;L"]]],"^;O",["^1Q",[null,null]]],"^;J",[["^;K","^;L"],["^;K","^;M","^;L"]],"~:protocol-impl",null,"^;H",3,"^;O",["^1Q",[null,null]],"^8",1,"^;G",false,"~:methods",[["^ ","^;H",2,"^;G",false,"~:tag","~$any"],["^ ","^;H",3,"^;G",false,"^;U",["^H",["~$clj","^;V"]]]],"^;P",["^1Q",["^;Q",["^1Q",[["^;K","^;L"],["^;K","~:-","^;A","^;M","~:-","^;B","^;L","~:-","^;C"]]]]],"^7",234,"^9",234,"^;I",3,"~:fn-var",true,"^;N",["^1Q",[["^;K","^;L"],["^;K","^;M","^;L"]]],"^;R","Inputs: ([query aggregatable]\n           [query :- :metabase.lib.schema/query stage-number :- :int aggregatable :- Aggregatable])\n  Return: :metabase.lib.schema/query\n          \n\n  Adds an aggregation to query."],"^;C",["^ ","^5",["^ ","^6","metabase/lib/aggregation.cljc","^7",227,"^8",16,"^9",227,"^:",28,"~:private",true],"^;Y",true,"^N","^2G","^6","metabase/lib/aggregation.cljc","^:",28,"^8",1,"^7",227,"^9",227,"^;U","~$cljs.core/IVector","^;R","Schema for something you can pass to [[aggregate]] to add to a query as an aggregation."],"~$sum",["^ ","^;<",["^;=",["^;>",["^;?","^;@"],"~:mbql.clause/sum"]],"^;D","id63139","^;E",null,"^5",["^ ","^;<",["^;=",["^;>",["^;?","^;@"],"^<0"]],"^;D","id63139","^6","metabase/lib/aggregation.cljc","^:",22,"^8",19,"^;P",["^1Q",["^;Q",["^1Q",[["~$x"]]]]],"^7",218,"^9",218,"^;N",["^1Q",["^;Q",["^1Q",[["~$x"]]]]],"^;R","Inputs: ([x])\n  Return: :mbql.clause/sum\n          \n\n  Create a standalone clause of type `sum`."],"^N","^2M","^6","metabase/lib/aggregation.cljc","^:",22,"^;J",["^1Q",[["~$x"]]],"^;S",null,"^;O",["^1Q",[null,null]],"^8",1,"^;G",false,"^;P",["^1Q",["^;Q",["^1Q",[["~$x"]]]]],"^7",218,"~:ret-tag","^;V","^9",218,"^;I",1,"^;X",true,"^;N",["^1Q",["^;Q",["^1Q",[["~$x"]]]]],"^;R","Inputs: ([x])\n  Return: :mbql.clause/sum\n          \n\n  Create a standalone clause of type `sum`."],"~$aggregations",["^ ","^;<",["^;=",["^;>",["^;?","^;@"],["~:maybe",["~:sequential","~:metabase.lib.schema.aggregation/aggregation"]]],["^;>",["^;?","^;A","^;B"],["^<3",["^<4","^<5"]]]],"^;D","id63265","^;E",null,"^5",["^ ","^;<",["^;=",["^;>",["^;?","^;@"],["^<3",["^<4","^<5"]]],["^;>",["^;?","^;A","^;B"],["^<3",["^<4","^<5"]]]],"^;D","id63265","^6","metabase/lib/aggregation.cljc","^:",22,"^;F",["^ ","^;G",false,"^;H",2,"^;I",2,"^;J",[["^;K"],["^;K","^;M"]],"^;N",["^1Q",[["^;K"],["^;K","^;M"]]],"^;O",["^1Q",[null,null]]],"^8",10,"^;P",["^1Q",["^;Q",["^1Q",[["^;K"],["^;K","~:-","^;A","^;M","~:-","^;B"]]]]],"^7",247,"^9",247,"^;N",["^1Q",["^;Q",["^1Q",[["^;K"],["^;K","^;M"]]]]],"^;R","Inputs: ([query]\n           [query :- :metabase.lib.schema/query stage-number :- :int])\n  Return: [:maybe [:sequential :metabase.lib.schema.aggregation/aggregation]]\n          \n\n  Get the aggregations in a given stage of a query."],"^N","^2H","^6","metabase/lib/aggregation.cljc","^:",22,"^;F",["^ ","^;G",false,"^;H",2,"^;I",2,"^;J",[["^;K"],["^;K","^;M"]],"^;N",["^1Q",[["^;K"],["^;K","^;M"]]],"^;O",["^1Q",[null,null]]],"^;J",[["^;K"],["^;K","^;M"]],"^;S",null,"^;H",2,"^;O",["^1Q",[null,null]],"^8",1,"^;G",false,"^;T",[["^ ","^;H",1,"^;G",false,"^;U","^;V"],["^ ","^;H",2,"^;G",false,"^;U",["^H",[null,"~$clj-nil"]]]],"^;P",["^1Q",["^;Q",["^1Q",[["^;K"],["^;K","~:-","^;A","^;M","~:-","^;B"]]]]],"^7",247,"^9",247,"^;I",2,"^;X",true,"^;N",["^1Q",[["^;K"],["^;K","^;M"]]],"^;R","Inputs: ([query]\n           [query :- :metabase.lib.schema/query stage-number :- :int])\n  Return: [:maybe [:sequential :metabase.lib.schema.aggregation/aggregation]]\n          \n\n  Get the aggregations in a given stage of a query."],"~$aggregation-clause",["^ ","^;<",["^;=",["^;>",["^;?","~:metabase.lib.schema.aggregation/operator"],"^<5"],["^;>",["^;?","^<8","^;@"],"^<5"]],"^;D","id63380","^;E",null,"^5",["^ ","^;<",["^;=",["^;>",["^;?","^<8"],"^<5"],["^;>",["^;?","^<8","^;@"],"^<5"]],"^;D","id63380","^6","metabase/lib/aggregation.cljc","^:",28,"^;F",["^ ","^;G",false,"^;H",2,"^;I",2,"^;J",[["~$aggregation-operator"],["^<9","~$column"]],"^;N",["^1Q",[["^<9"],["^<9","^<:"]]],"^;O",["^1Q",[null,null]]],"^8",10,"^;P",["^1Q",["^;Q",["^1Q",[["^<9","~:-","^<8"],["^<9","~:-","^<8","^<:"]]]]],"^7",326,"^9",326,"^;N",["^1Q",["^;Q",["^1Q",[["^<9"],["^<9","^<:"]]]]],"^;R","Inputs: ([aggregation-operator :- :metabase.lib.schema.aggregation/operator]\n           [aggregation-operator :- :metabase.lib.schema.aggregation/operator column])\n  Return: :metabase.lib.schema.aggregation/aggregation\n          \n\n  Returns a standalone aggregation clause for an `aggregation-operator` and\n  a `column`.\n  For aggregations requiring an argument `column` is mandatory, otherwise\n  it is optional."],"^N","^34","^6","metabase/lib/aggregation.cljc","^:",28,"^;F",["^ ","^;G",false,"^;H",2,"^;I",2,"^;J",[["^<9"],["^<9","^<:"]],"^;N",["^1Q",[["^<9"],["^<9","^<:"]]],"^;O",["^1Q",[null,null]]],"^;J",[["^<9"],["^<9","^<:"]],"^;S",null,"^;H",2,"^;O",["^1Q",[null,null]],"^8",1,"^;G",false,"^;T",[["^ ","^;H",1,"^;G",false,"^;U",["^H",[null,"^;W","^;V","^<6"]]],["^ ","^;H",2,"^;G",false,"^;U",["^H",[null,"^;W","^;V","^<6"]]]],"^;P",["^1Q",["^;Q",["^1Q",[["^<9","~:-","^<8"],["^<9","~:-","^<8","^<:"]]]]],"^7",326,"^9",326,"^;I",2,"^;X",true,"^;N",["^1Q",[["^<9"],["^<9","^<:"]]],"^;R","Inputs: ([aggregation-operator :- :metabase.lib.schema.aggregation/operator]\n           [aggregation-operator :- :metabase.lib.schema.aggregation/operator column])\n  Return: :metabase.lib.schema.aggregation/aggregation\n          \n\n  Returns a standalone aggregation clause for an `aggregation-operator` and\n  a `column`.\n  For aggregations requiring an argument `column` is mandatory, otherwise\n  it is optional."],"^I",["^ ","^;<",["^;=",["^;>",["^;?","^;@"],"~:mbql.clause/min"]],"^;D","id63128","^;E",null,"^5",["^ ","^;<",["^;=",["^;>",["^;?","^;@"],"^<;"]],"^;D","id63128","^6","metabase/lib/aggregation.cljc","^:",22,"^8",19,"^;P",["^1Q",["^;Q",["^1Q",[["~$x"]]]]],"^7",214,"^9",214,"^;N",["^1Q",["^;Q",["^1Q",[["~$x"]]]]],"^;R","Inputs: ([x])\n  Return: :mbql.clause/min\n          \n\n  Create a standalone clause of type `min`."],"^N","^3:","^6","metabase/lib/aggregation.cljc","^:",22,"^;J",["^1Q",[["~$x"]]],"^;S",null,"^;O",["^1Q",[null,null]],"^8",1,"^;G",false,"^;P",["^1Q",["^;Q",["^1Q",[["~$x"]]]]],"^7",214,"^<1","^;V","^9",214,"^;I",1,"^;X",true,"^;N",["^1Q",["^;Q",["^1Q",[["~$x"]]]]],"^;R","Inputs: ([x])\n  Return: :mbql.clause/min\n          \n\n  Create a standalone clause of type `min`."],"~$stddev",["^ ","^;<",["^;=",["^;>",["^;?","^;@"],"~:mbql.clause/stddev"]],"^;D","id63133","^;E",null,"^5",["^ ","^;<",["^;=",["^;>",["^;?","^;@"],"^<="]],"^;D","id63133","^6","metabase/lib/aggregation.cljc","^:",25,"^8",19,"^;P",["^1Q",["^;Q",["^1Q",[["~$x"]]]]],"^7",217,"^9",217,"^;N",["^1Q",["^;Q",["^1Q",[["~$x"]]]]],"^;R","Inputs: ([x])\n  Return: :mbql.clause/stddev\n          \n\n  Create a standalone clause of type `stddev`."],"^N","^3<","^6","metabase/lib/aggregation.cljc","^:",25,"^;J",["^1Q",[["~$x"]]],"^;S",null,"^;O",["^1Q",[null,null]],"^8",1,"^;G",false,"^;P",["^1Q",["^;Q",["^1Q",[["~$x"]]]]],"^7",217,"^<1","^;V","^9",217,"^;I",1,"^;X",true,"^;N",["^1Q",["^;Q",["^1Q",[["~$x"]]]]],"^;R","Inputs: ([x])\n  Return: :mbql.clause/stddev\n          \n\n  Create a standalone clause of type `stddev`."],"~$aggregation-ref",["^ ","^;<",["^;=",["^;>",["^;?","^;@","^;@"],"~:mbql.clause/aggregation"],["^;>",["^;?","^;A","^;B","~:metabase.lib.schema.common/int-greater-than-or-equal-to-zero"],"^<?"]],"^;D","id63411","^;E",null,"^5",["^ ","^;<",["^;=",["^;>",["^;?","^;@","^;@"],"^<?"],["^;>",["^;?","^;A","^;B","^<@"],"^<?"]],"^;D","id63411","^6","metabase/lib/aggregation.cljc","^:",25,"^;F",["^ ","^;G",false,"^;H",3,"^;I",3,"^;J",[["^;K","~$ag-index"],["^;K","^;M","^<A"]],"^;N",["^1Q",[["^;K","^<A"],["^;K","^;M","^<A"]]],"^;O",["^1Q",[null,null]]],"^8",10,"^;P",["^1Q",["^;Q",["^1Q",[["^;K","^<A"],["^;K","~:-","^;A","^;M","~:-","^;B","^<A","~:-","^<@"]]]]],"^7",378,"^9",378,"^;N",["^1Q",["^;Q",["^1Q",[["^;K","^<A"],["^;K","^;M","^<A"]]]]],"^;R","Inputs: ([query ag-index]\n           [query :- :metabase.lib.schema/query stage-number :- :int ag-index :- :metabase.lib.schema.common/int-greater-than-or-equal-to-zero])\n  Return: :mbql.clause/aggregation\n          \n\n  Find the aggregation at `ag-index` and create an `:aggregation` ref for it. Intended for use\n  when creating queries using threading macros e.g.\n\n    (-> (lib/query ...)\n        (lib/aggregate (lib/avg ...))\n        (as-> <> (lib/order-by <> (lib/aggregation-ref <> 0))))"],"^N","^2E","^6","metabase/lib/aggregation.cljc","^:",25,"^;F",["^ ","^;G",false,"^;H",3,"^;I",3,"^;J",[["^;K","^<A"],["^;K","^;M","^<A"]],"^;N",["^1Q",[["^;K","^<A"],["^;K","^;M","^<A"]]],"^;O",["^1Q",[null,null]]],"^;J",[["^;K","^<A"],["^;K","^;M","^<A"]],"^;S",null,"^;H",3,"^;O",["^1Q",[null,null]],"^8",1,"^;G",false,"^;T",[["^ ","^;H",2,"^;G",false,"^;U","^;V"],["^ ","^;H",3,"^;G",false,"^;U",["^H",[null,"^;W","^;V","^<6"]]]],"^;P",["^1Q",["^;Q",["^1Q",[["^;K","^<A"],["^;K","~:-","^;A","^;M","~:-","^;B","^<A","~:-","^<@"]]]]],"^7",378,"^9",378,"^;I",3,"^;X",true,"^;N",["^1Q",[["^;K","^<A"],["^;K","^;M","^<A"]]],"^;R","Inputs: ([query ag-index]\n           [query :- :metabase.lib.schema/query stage-number :- :int ag-index :- :metabase.lib.schema.common/int-greater-than-or-equal-to-zero])\n  Return: :mbql.clause/aggregation\n          \n\n  Find the aggregation at `ag-index` and create an `:aggregation` ref for it. Intended for use\n  when creating queries using threading macros e.g.\n\n    (-> (lib/query ...)\n        (lib/aggregate (lib/avg ...))\n        (as-> <> (lib/order-by <> (lib/aggregation-ref <> 0))))"],"~$selected-aggregation-operators",["^ ","^;<",["^;>",["^;?",["^<3",["^<4","~$OperatorWithColumns"]],"^;@"],["^<3",["^<4","~$SelectedOperatorWithColumns"]]],"^;D","id63398","^;E",null,"^5",["^ ","^;<",["^;>",["^;?",["^<3",["^<4","^<C"]],"^;@"],["^<3",["^<4","^<D"]]],"^;D","id63398","^6","metabase/lib/aggregation.cljc","^:",40,"^8",10,"^;P",["^1Q",["^;Q",["^1Q",[["~$agg-operators","~:-",["^<3",["^<4","^<C"]],"~$agg-clause"]]]]],"^7",349,"^9",349,"^;N",["^1Q",["^;Q",["^1Q",[["^<E","^<F"]]]]],"^;R","Inputs: [agg-operators :- [:maybe [:sequential OperatorWithColumns]] agg-clause]\n  Return: [:maybe [:sequential SelectedOperatorWithColumns]]\n          \n\n  Mark the operator and the column (if any) in `agg-operators` selected by `agg-clause`."],"^N","^2D","^6","metabase/lib/aggregation.cljc","^:",40,"^;J",["^1Q",[["^<E","^<F"]]],"^;S",null,"^;O",["^1Q",[null,null]],"^8",1,"^;G",false,"^;P",["^1Q",["^;Q",["^1Q",[["^<E","~:-",["^<3",["^<4","^<C"]],"^<F"]]]]],"^7",349,"^<1",["^H",["^;W","^<6"]],"^9",349,"^;I",2,"^;X",true,"^;N",["^1Q",["^;Q",["^1Q",[["^<E","^<F"]]]]],"^;R","Inputs: [agg-operators :- [:maybe [:sequential OperatorWithColumns]] agg-clause]\n  Return: [:maybe [:sequential SelectedOperatorWithColumns]]\n          \n\n  Mark the operator and the column (if any) in `agg-operators` selected by `agg-clause`."],"~$count-where",["^ ","^;<",["^;=",["^;>",["^;?","^;@","^;@"],"~:mbql.clause/count-where"]],"^;D","id63109","^;E",null,"^5",["^ ","^;<",["^;=",["^;>",["^;?","^;@","^;@"],"^<H"]],"^;D","id63109","^6","metabase/lib/aggregation.cljc","^:",30,"^8",19,"^;P",["^1Q",["^;Q",["^1Q",[["~$x","~$y"]]]]],"^7",209,"^9",209,"^;N",["^1Q",["^;Q",["^1Q",[["~$x","~$y"]]]]],"^;R","Inputs: ([x y])\n  Return: :mbql.clause/count-where\n          \n\n  Create a standalone clause of type `count-where`."],"^N","^37","^6","metabase/lib/aggregation.cljc","^:",30,"^;J",["^1Q",[["~$x","~$y"]]],"^;S",null,"^;O",["^1Q",[null,null]],"^8",1,"^;G",false,"^;P",["^1Q",["^;Q",["^1Q",[["~$x","~$y"]]]]],"^7",209,"^<1","^;V","^9",209,"^;I",2,"^;X",true,"^;N",["^1Q",["^;Q",["^1Q",[["~$x","~$y"]]]]],"^;R","Inputs: ([x y])\n  Return: :mbql.clause/count-where\n          \n\n  Create a standalone clause of type `count-where`."],"~$cum-count",["^ ","^;<",["^;=",["^;>","^;?","~:mbql.clause/cum-count"],["^;>",["^;?","^;@"],"^<J"]],"^;D","id63106","^;E",null,"^5",["^ ","^;<",["^;=",["^;>","^;?","^<J"],["^;>",["^;?","^;@"],"^<J"]],"^;D","id63106","^6","metabase/lib/aggregation.cljc","^:",28,"^;F",["^ ","^;G",false,"^;H",1,"^;I",1,"^;J",[[],["~$x"]],"^;N",["^1Q",[[],["~$x"]]],"^;O",["^1Q",[null,null]]],"^8",19,"^;P",["^1Q",["^;Q",["^1Q",[[],["~$x"]]]]],"^7",208,"^9",208,"^;N",["^1Q",["^;Q",["^1Q",[[],["~$x"]]]]],"^;R","Inputs: ([]\n           [x])\n  Return: :mbql.clause/cum-count\n          \n\n  Create a standalone clause of type `cum-count`."],"^N","^3C","^6","metabase/lib/aggregation.cljc","^:",28,"^;F",["^ ","^;G",false,"^;H",1,"^;I",1,"^;J",[[],["~$x"]],"^;N",["^1Q",[[],["~$x"]]],"^;O",["^1Q",[null,null]]],"^;J",[[],["~$x"]],"^;S",null,"^;H",1,"^;O",["^1Q",[null,null]],"^8",1,"^;G",false,"^;T",[["^ ","^;H",0,"^;G",false,"^;U","^;V"],["^ ","^;H",1,"^;G",false,"^;U","^;V"]],"^;P",["^1Q",["^;Q",["^1Q",[[],["~$x"]]]]],"^7",208,"^9",208,"^;I",1,"^;X",true,"^;N",["^1Q",[[],["~$x"]]],"^;R","Inputs: ([]\n           [x])\n  Return: :mbql.clause/cum-count\n          \n\n  Create a standalone clause of type `cum-count`."],"~$resolve-aggregation",["^ ","^;<",["^;>",["^;?","^;A","^;B","~:string"],"^<5"],"^;D","id62912","^;E",null,"^5",["^ ","^;<",["^;>",["^;?","^;A","^;B","^<L"],"^<5"],"^;D","id62912","^6","metabase/lib/aggregation.cljc","^:",29,"^8",10,"^;P",["^1Q",["^;Q",["^1Q",[["^;K","~:-","^;A","^;M","~:-","^;B","~$ag-uuid","~:-","^<L"]]]]],"^7",32,"^9",32,"^;N",["^1Q",["^;Q",["^1Q",[["^;K","^;M","^<M"]]]]],"^;R","Inputs: [query :- :metabase.lib.schema/query stage-number :- :int ag-uuid :- :string]\n  Return: :metabase.lib.schema.aggregation/aggregation\n          \n\n  Resolve an aggregation with a specific `index`."],"^N","^3Y","^6","metabase/lib/aggregation.cljc","^:",29,"^;J",["^1Q",[["^;K","^;M","^<M"]]],"^;S",null,"^;O",["^1Q",[null,null]],"^8",1,"^;G",false,"^;P",["^1Q",["^;Q",["^1Q",[["^;K","~:-","^;A","^;M","~:-","^;B","^<M","~:-","^<L"]]]]],"^7",32,"^<1",["^H",[null,"^;V"]],"^9",32,"^;I",3,"^;X",true,"^;N",["^1Q",["^;Q",["^1Q",[["^;K","^;M","^<M"]]]]],"^;R","Inputs: [query :- :metabase.lib.schema/query stage-number :- :int ag-uuid :- :string]\n  Return: :metabase.lib.schema.aggregation/aggregation\n          \n\n  Resolve an aggregation with a specific `index`."],"~$available-aggregation-operators",["^ ","^;<",["^;=",["^;>",["^;?","^;@"],["^<3",["^<4","^<C"]]],["^;>",["^;?","^;A","^;B"],["^<3",["^<4","^<C"]]]],"^;D","id63330","^;E",null,"^5",["^ ","^;<",["^;=",["^;>",["^;?","^;@"],["^<3",["^<4","^<C"]]],["^;>",["^;?","^;A","^;B"],["^<3",["^<4","^<C"]]]],"^;D","id63330","^6","metabase/lib/aggregation.cljc","^:",41,"^;F",["^ ","^;G",false,"^;H",2,"^;I",2,"^;J",[["^;K"],["^;K","^;M"]],"^;N",["^1Q",[["^;K"],["^;K","^;M"]]],"^;O",["^1Q",[null,null]]],"^8",10,"^;P",["^1Q",["^;Q",["^1Q",[["^;K"],["^;K","~:-","^;A","^;M","~:-","^;B"]]]]],"^7",293,"^9",293,"^;N",["^1Q",["^;Q",["^1Q",[["^;K"],["^;K","^;M"]]]]],"^;R","Inputs: ([query]\n           [query :- :metabase.lib.schema/query stage-number :- :int])\n  Return: [:maybe [:sequential OperatorWithColumns]]\n          \n\n  Returns the available aggegation operators for the stage with `stage-number` of `query`.\n  If `stage-number` is omitted, uses the last stage."],"^N","^3?","^6","metabase/lib/aggregation.cljc","^:",41,"^;F",["^ ","^;G",false,"^;H",2,"^;I",2,"^;J",[["^;K"],["^;K","^;M"]],"^;N",["^1Q",[["^;K"],["^;K","^;M"]]],"^;O",["^1Q",[null,null]]],"^;J",[["^;K"],["^;K","^;M"]],"^;S",null,"^;H",2,"^;O",["^1Q",[null,null]],"^8",1,"^;G",false,"^;T",[["^ ","^;H",1,"^;G",false,"^;U","^;V"],["^ ","^;H",2,"^;G",false,"^;U",["^H",[null,"^<6"]]]],"^;P",["^1Q",["^;Q",["^1Q",[["^;K"],["^;K","~:-","^;A","^;M","~:-","^;B"]]]]],"^7",293,"^9",293,"^;I",2,"^;X",true,"^;N",["^1Q",[["^;K"],["^;K","^;M"]]],"^;R","Inputs: ([query]\n           [query :- :metabase.lib.schema/query stage-number :- :int])\n  Return: [:maybe [:sequential OperatorWithColumns]]\n          \n\n  Returns the available aggegation operators for the stage with `stage-number` of `query`.\n  If `stage-number` is omitted, uses the last stage."],"~$aggregations-metadata",["^ ","^;<",["^;=",["^;>",["^;?","^;@"],["^<3",["^<4","~$lib.metadata/ColumnMetadata"]]],["^;>",["^;?","^;A","^;B"],["^<3",["^<4","^<P"]]]],"^;D","id63273","^;E",null,"^5",["^ ","^;<",["^;=",["^;>",["^;?","^;@"],["^<3",["^<4","^<P"]]],["^;>",["^;?","^;A","^;B"],["^<3",["^<4","^<P"]]]],"^;D","id63273","^6","metabase/lib/aggregation.cljc","^:",31,"^;F",["^ ","^;G",false,"^;H",2,"^;I",2,"^;J",[["^;K"],["^;K","^;M"]],"^;N",["^1Q",[["^;K"],["^;K","^;M"]]],"^;O",["^1Q",[null,null]]],"^8",10,"^;P",["^1Q",["^;Q",["^1Q",[["^;K"],["^;K","~:-","^;A","^;M","~:-","^;B"]]]]],"^7",256,"^9",256,"^;N",["^1Q",["^;Q",["^1Q",[["^;K"],["^;K","^;M"]]]]],"^;R","Inputs: ([query]\n           [query :- :metabase.lib.schema/query stage-number :- :int])\n  Return: [:maybe [:sequential lib.metadata/ColumnMetadata]]\n          \n\n  Get metadata about the aggregations in a given stage of a query."],"^N","^3L","^6","metabase/lib/aggregation.cljc","^:",31,"^;F",["^ ","^;G",false,"^;H",2,"^;I",2,"^;J",[["^;K"],["^;K","^;M"]],"^;N",["^1Q",[["^;K"],["^;K","^;M"]]],"^;O",["^1Q",[null,null]]],"^;J",[["^;K"],["^;K","^;M"]],"^;S",null,"^;H",2,"^;O",["^1Q",[null,null]],"^8",1,"^;G",false,"^;T",[["^ ","^;H",1,"^;G",false,"^;U","^;V"],["^ ","^;H",2,"^;G",false,"^;U",["^H",["^;V","^<6"]]]],"^;P",["^1Q",["^;Q",["^1Q",[["^;K"],["^;K","~:-","^;A","^;M","~:-","^;B"]]]]],"^7",256,"^9",256,"^;I",2,"^;X",true,"^;N",["^1Q",[["^;K"],["^;K","^;M"]]],"^;R","Inputs: ([query]\n           [query :- :metabase.lib.schema/query stage-number :- :int])\n  Return: [:maybe [:sequential lib.metadata/ColumnMetadata]]\n          \n\n  Get metadata about the aggregations in a given stage of a query."],"~$sum-where",["^ ","^;<",["^;=",["^;>",["^;?","^;@","^;@"],"~:mbql.clause/sum-where"]],"^;D","id63144","^;E",null,"^5",["^ ","^;<",["^;=",["^;>",["^;?","^;@","^;@"],"^<R"]],"^;D","id63144","^6","metabase/lib/aggregation.cljc","^:",28,"^8",19,"^;P",["^1Q",["^;Q",["^1Q",[["~$x","~$y"]]]]],"^7",220,"^9",220,"^;N",["^1Q",["^;Q",["^1Q",[["~$x","~$y"]]]]],"^;R","Inputs: ([x y])\n  Return: :mbql.clause/sum-where\n          \n\n  Create a standalone clause of type `sum-where`."],"^N","^3G","^6","metabase/lib/aggregation.cljc","^:",28,"^;J",["^1Q",[["~$x","~$y"]]],"^;S",null,"^;O",["^1Q",[null,null]],"^8",1,"^;G",false,"^;P",["^1Q",["^;Q",["^1Q",[["~$x","~$y"]]]]],"^7",220,"^<1","^;V","^9",220,"^;I",2,"^;X",true,"^;N",["^1Q",["^;Q",["^1Q",[["~$x","~$y"]]]]],"^;R","Inputs: ([x y])\n  Return: :mbql.clause/sum-where\n          \n\n  Create a standalone clause of type `sum-where`."],"~$cum-sum",["^ ","^;<",["^;=",["^;>",["^;?","^;@"],"~:mbql.clause/cum-sum"]],"^;D","id63140","^;E",null,"^5",["^ ","^;<",["^;=",["^;>",["^;?","^;@"],"^<T"]],"^;D","id63140","^6","metabase/lib/aggregation.cljc","^:",26,"^8",19,"^;P",["^1Q",["^;Q",["^1Q",[["~$x"]]]]],"^7",219,"^9",219,"^;N",["^1Q",["^;Q",["^1Q",[["~$x"]]]]],"^;R","Inputs: ([x])\n  Return: :mbql.clause/cum-sum\n          \n\n  Create a standalone clause of type `cum-sum`."],"^N","^3Q","^6","metabase/lib/aggregation.cljc","^:",26,"^;J",["^1Q",[["~$x"]]],"^;S",null,"^;O",["^1Q",[null,null]],"^8",1,"^;G",false,"^;P",["^1Q",["^;Q",["^1Q",[["~$x"]]]]],"^7",219,"^<1","^;V","^9",219,"^;I",1,"^;X",true,"^;N",["^1Q",["^;Q",["^1Q",[["~$x"]]]]],"^;R","Inputs: ([x])\n  Return: :mbql.clause/cum-sum\n          \n\n  Create a standalone clause of type `cum-sum`."],"^J",["^ ","^;<",["^;=",["^;>",["^;?","^;@"],"~:mbql.clause/distinct"]],"^;D","id63112","^;E",null,"^5",["^ ","^;<",["^;=",["^;>",["^;?","^;@"],"^<U"]],"^;D","id63112","^6","metabase/lib/aggregation.cljc","^:",27,"^8",19,"^;P",["^1Q",["^;Q",["^1Q",[["~$x"]]]]],"^7",211,"^9",211,"^;N",["^1Q",["^;Q",["^1Q",[["~$x"]]]]],"^;R","Inputs: ([x])\n  Return: :mbql.clause/distinct\n          \n\n  Create a standalone clause of type `distinct`."],"^N","^3[","^6","metabase/lib/aggregation.cljc","^:",27,"^;J",["^1Q",[["~$x"]]],"^;S",null,"^;O",["^1Q",[null,null]],"^8",1,"^;G",false,"^;P",["^1Q",["^;Q",["^1Q",[["~$x"]]]]],"^7",211,"^<1","^;V","^9",211,"^;I",1,"^;X",true,"^;N",["^1Q",["^;Q",["^1Q",[["~$x"]]]]],"^;R","Inputs: ([x])\n  Return: :mbql.clause/distinct\n          \n\n  Create a standalone clause of type `distinct`."],"~$percentile",["^ ","^;<",["^;=",["^;>",["^;?","^;@","^;@"],"~:mbql.clause/percentile"]],"^;D","id63129","^;E",null,"^5",["^ ","^;<",["^;=",["^;>",["^;?","^;@","^;@"],"^<W"]],"^;D","id63129","^6","metabase/lib/aggregation.cljc","^:",29,"^8",19,"^;P",["^1Q",["^;Q",["^1Q",[["~$x","~$y"]]]]],"^7",215,"^9",215,"^;N",["^1Q",["^;Q",["^1Q",[["~$x","~$y"]]]]],"^;R","Inputs: ([x y])\n  Return: :mbql.clause/percentile\n          \n\n  Create a standalone clause of type `percentile`."],"^N","^3W","^6","metabase/lib/aggregation.cljc","^:",29,"^;J",["^1Q",[["~$x","~$y"]]],"^;S",null,"^;O",["^1Q",[null,null]],"^8",1,"^;G",false,"^;P",["^1Q",["^;Q",["^1Q",[["~$x","~$y"]]]]],"^7",215,"^<1","^;V","^9",215,"^;I",2,"^;X",true,"^;N",["^1Q",["^;Q",["^1Q",[["~$x","~$y"]]]]],"^;R","Inputs: ([x y])\n  Return: :mbql.clause/percentile\n          \n\n  Create a standalone clause of type `percentile`."],"~$aggregation-operator-columns",["^ ","^;<",["^;>",["^;?","^<C"],["^<3",["^<4","^<P"]]],"^;D","id63321","^;E",null,"^5",["^ ","^;<",["^;>",["^;?","^<C"],["^<3",["^<4","^<P"]]],"^;D","id63321","^6","metabase/lib/aggregation.cljc","^:",38,"^8",10,"^;P",["^1Q",["^;Q",["^1Q",[["^<9","~:-","^<C"]]]]],"^7",288,"^9",288,"^;N",["^1Q",["^;Q",["^1Q",[["^<9"]]]]],"^;R","Inputs: [aggregation-operator :- OperatorWithColumns]\n  Return: [:maybe [:sequential lib.metadata/ColumnMetadata]]\n          \n\n  Returns the columns for which `aggregation-operator` is applicable."],"^N","^3U","^6","metabase/lib/aggregation.cljc","^:",38,"^;J",["^1Q",[["^<9"]]],"^;S",null,"^;O",["^1Q",[null,null]],"^8",1,"^;G",false,"^;P",["^1Q",["^;Q",["^1Q",[["^<9","~:-","^<C"]]]]],"^7",288,"^<1","^;V","^9",288,"^;I",1,"^;X",true,"^;N",["^1Q",["^;Q",["^1Q",[["^<9"]]]]],"^;R","Inputs: [aggregation-operator :- OperatorWithColumns]\n  Return: [:maybe [:sequential lib.metadata/ColumnMetadata]]\n          \n\n  Returns the columns for which `aggregation-operator` is applicable."],"^<D",["^ ","^5",["^ ","^6","metabase/lib/aggregation.cljc","^7",342,"^8",16,"^9",342,"^:",43,"^;Y",true],"^;Y",true,"^N","^42","^6","metabase/lib/aggregation.cljc","^:",43,"^8",1,"^7",342,"^9",342,"^;U","^;Z"],"~$column-metadata->aggregation-ref",["^ ","^;<",["^;>",["^;?","^<P"],"^<?"],"^;D","id62907","^;E",null,"^5",["^ ","^;<",["^;>",["^;?","^<P"],"^<?"],"^;D","id62907","^6","metabase/lib/aggregation.cljc","^:",42,"^8",10,"^;P",["^1Q",["^;Q",["^1Q",[["~$metadata","~:-","^<P"]]]]],"^7",23,"^9",23,"^;N",["^1Q",["^;Q",["^1Q",[["^<Z"]]]]],"^;R","Inputs: [metadata :- lib.metadata/ColumnMetadata]\n  Return: :mbql.clause/aggregation\n          \n\n  Given `:metadata/column` column metadata for an aggregation, construct an `:aggregation` reference."],"^N","^4;","^6","metabase/lib/aggregation.cljc","^:",42,"^;J",["^1Q",[["^<Z"]]],"^;S",null,"^;O",["^1Q",[null,null]],"^8",1,"^;G",false,"^;P",["^1Q",["^;Q",["^1Q",[["^<Z","~:-","^<P"]]]]],"^7",23,"^<1","^;Z","^9",23,"^;I",1,"^;X",true,"^;N",["^1Q",["^;Q",["^1Q",[["^<Z"]]]]],"^;R","Inputs: [metadata :- lib.metadata/ColumnMetadata]\n  Return: :mbql.clause/aggregation\n          \n\n  Given `:metadata/column` column metadata for an aggregation, construct an `:aggregation` reference."],"^K",["^ ","^;<",["^;=",["^;>",["^;?","^;@"],"~:mbql.clause/var"]],"^;D","id63146","^;E",null,"^5",["^ ","^;<",["^;=",["^;>",["^;?","^;@"],"^<["]],"^;D","id63146","^6","metabase/lib/aggregation.cljc","^:",22,"^8",19,"^;P",["^1Q",["^;Q",["^1Q",[["~$x"]]]]],"^7",221,"^9",221,"^;N",["^1Q",["^;Q",["^1Q",[["~$x"]]]]],"^;R","Inputs: ([x])\n  Return: :mbql.clause/var\n          \n\n  Create a standalone clause of type `var`."],"^N","^4?","^6","metabase/lib/aggregation.cljc","^:",22,"^;J",["^1Q",[["~$x"]]],"^;S",null,"^;O",["^1Q",[null,null]],"^8",1,"^;G",false,"^;P",["^1Q",["^;Q",["^1Q",[["~$x"]]]]],"^7",221,"^<1","^;V","^9",221,"^;I",1,"^;X",true,"^;N",["^1Q",["^;Q",["^1Q",[["~$x"]]]]],"^;R","Inputs: ([x])\n  Return: :mbql.clause/var\n          \n\n  Create a standalone clause of type `var`."],"~$median",["^ ","^;<",["^;=",["^;>",["^;?","^;@"],"~:mbql.clause/median"]],"^;D","id63126","^;E",null,"^5",["^ ","^;<",["^;=",["^;>",["^;?","^;@"],"^=1"]],"^;D","id63126","^6","metabase/lib/aggregation.cljc","^:",25,"^8",19,"^;P",["^1Q",["^;Q",["^1Q",[["~$x"]]]]],"^7",213,"^9",213,"^;N",["^1Q",["^;Q",["^1Q",[["~$x"]]]]],"^;R","Inputs: ([x])\n  Return: :mbql.clause/median\n          \n\n  Create a standalone clause of type `median`."],"^N","^4:","^6","metabase/lib/aggregation.cljc","^:",25,"^;J",["^1Q",[["~$x"]]],"^;S",null,"^;O",["^1Q",[null,null]],"^8",1,"^;G",false,"^;P",["^1Q",["^;Q",["^1Q",[["~$x"]]]]],"^7",213,"^<1","^;V","^9",213,"^;I",1,"^;X",true,"^;N",["^1Q",["^;Q",["^1Q",[["~$x"]]]]],"^;R","Inputs: ([x])\n  Return: :mbql.clause/median\n          \n\n  Create a standalone clause of type `median`."],"~$share",["^ ","^;<",["^;=",["^;>",["^;?","^;@"],"~:mbql.clause/share"]],"^;D","id63131","^;E",null,"^5",["^ ","^;<",["^;=",["^;>",["^;?","^;@"],"^=3"]],"^;D","id63131","^6","metabase/lib/aggregation.cljc","^:",24,"^8",19,"^;P",["^1Q",["^;Q",["^1Q",[["~$x"]]]]],"^7",216,"^9",216,"^;N",["^1Q",["^;Q",["^1Q",[["~$x"]]]]],"^;R","Inputs: ([x])\n  Return: :mbql.clause/share\n          \n\n  Create a standalone clause of type `share`."],"^N","^4=","^6","metabase/lib/aggregation.cljc","^:",24,"^;J",["^1Q",[["~$x"]]],"^;S",null,"^;O",["^1Q",[null,null]],"^8",1,"^;G",false,"^;P",["^1Q",["^;Q",["^1Q",[["~$x"]]]]],"^7",216,"^<1","^;V","^9",216,"^;I",1,"^;X",true,"^;N",["^1Q",["^;Q",["^1Q",[["~$x"]]]]],"^;R","Inputs: ([x])\n  Return: :mbql.clause/share\n          \n\n  Create a standalone clause of type `share`."],"^L",["^ ","^;<",["^;=",["^;>",["^;?","^;@"],"~:mbql.clause/max"]],"^;D","id63113","^;E",null,"^5",["^ ","^;<",["^;=",["^;>",["^;?","^;@"],"^=4"]],"^;D","id63113","^6","metabase/lib/aggregation.cljc","^:",22,"^8",19,"^;P",["^1Q",["^;Q",["^1Q",[["~$x"]]]]],"^7",212,"^9",212,"^;N",["^1Q",["^;Q",["^1Q",[["~$x"]]]]],"^;R","Inputs: ([x])\n  Return: :mbql.clause/max\n          \n\n  Create a standalone clause of type `max`."],"^N","^43","^6","metabase/lib/aggregation.cljc","^:",22,"^;J",["^1Q",[["~$x"]]],"^;S",null,"^;O",["^1Q",[null,null]],"^8",1,"^;G",false,"^;P",["^1Q",["^;Q",["^1Q",[["~$x"]]]]],"^7",212,"^<1","^;V","^9",212,"^;I",1,"^;X",true,"^;N",["^1Q",["^;Q",["^1Q",[["~$x"]]]]],"^;R","Inputs: ([x])\n  Return: :mbql.clause/max\n          \n\n  Create a standalone clause of type `max`."],"^M",["^ ","^;<",["^;=",["^;>","^;?","~:mbql.clause/count"],["^;>",["^;?","^;@"],"^=5"]],"^;D","id63091","^;E",null,"^5",["^ ","^;<",["^;=",["^;>","^;?","^=5"],["^;>",["^;?","^;@"],"^=5"]],"^;D","id63091","^6","metabase/lib/aggregation.cljc","^:",24,"^;F",["^ ","^;G",false,"^;H",1,"^;I",1,"^;J",[[],["~$x"]],"^;N",["^1Q",[[],["~$x"]]],"^;O",["^1Q",[null,null]]],"^8",19,"^;P",["^1Q",["^;Q",["^1Q",[[],["~$x"]]]]],"^7",207,"^9",207,"^;N",["^1Q",["^;Q",["^1Q",[[],["~$x"]]]]],"^;R","Inputs: ([]\n           [x])\n  Return: :mbql.clause/count\n          \n\n  Create a standalone clause of type `count`."],"^N","^4C","^6","metabase/lib/aggregation.cljc","^:",24,"^;F",["^ ","^;G",false,"^;H",1,"^;I",1,"^;J",[[],["~$x"]],"^;N",["^1Q",[[],["~$x"]]],"^;O",["^1Q",[null,null]]],"^;J",[[],["~$x"]],"^;S",null,"^;H",1,"^;O",["^1Q",[null,null]],"^8",1,"^;G",false,"^;T",[["^ ","^;H",0,"^;G",false,"^;U","^;V"],["^ ","^;H",1,"^;G",false,"^;U","^;V"]],"^;P",["^1Q",["^;Q",["^1Q",[[],["~$x"]]]]],"^7",207,"^9",207,"^;I",1,"^;X",true,"^;N",["^1Q",[[],["~$x"]]],"^;R","Inputs: ([]\n           [x])\n  Return: :mbql.clause/count\n          \n\n  Create a standalone clause of type `count`."],"^<C",["^ ","^5",["^ ","^6","metabase/lib/aggregation.cljc","^7",271,"^8",16,"^9",271,"^:",35,"^;Y",true],"^;Y",true,"^N","^3I","^6","metabase/lib/aggregation.cljc","^:",35,"^8",1,"^7",271,"^9",271,"^;U","^;Z"],"~$avg",["^ ","^;<",["^;=",["^;>",["^;?","^;@"],"~:mbql.clause/avg"]],"^;D","id63110","^;E",null,"^5",["^ ","^;<",["^;=",["^;>",["^;?","^;@"],"^=7"]],"^;D","id63110","^6","metabase/lib/aggregation.cljc","^:",22,"^8",19,"^;P",["^1Q",["^;Q",["^1Q",[["~$x"]]]]],"^7",210,"^9",210,"^;N",["^1Q",["^;Q",["^1Q",[["~$x"]]]]],"^;R","Inputs: ([x])\n  Return: :mbql.clause/avg\n          \n\n  Create a standalone clause of type `avg`."],"^N","^3A","^6","metabase/lib/aggregation.cljc","^:",22,"^;J",["^1Q",[["~$x"]]],"^;S",null,"^;O",["^1Q",[null,null]],"^8",1,"^;G",false,"^;P",["^1Q",["^;Q",["^1Q",[["~$x"]]]]],"^7",210,"^<1","^;V","^9",210,"^;I",1,"^;X",true,"^;N",["^1Q",["^;Q",["^1Q",[["~$x"]]]]],"^;R","Inputs: ([x])\n  Return: :mbql.clause/avg\n          \n\n  Create a standalone clause of type `avg`."]],"^1O",["^ ","^V","^W","^10","^11","~$u","^14","^18","^19","^?","^?","^14","^14","^19","^19","^11","^11","^W","^W"],"~:cljs.analyzer/constants",["^ ","^1L",["^H",["~:lib/uuid","~:features","~:lib/type","~:min","~:short-name","^<5","~:long","~:base-type","~:short","~:selected","~:type/Quantity","~:semantic-type","~:stddev","~:display-info","~:else","~:source/aggregations","~:default","^<4","~:count-where","~:columns","~:metabase.lib.schema.common/external-op","~:cum-count","~:or","~:lib/source","~:temporal-unit","~:settings","~:sum-where","^<8","~:cum-sum","~:lib/source-uuid","~:aggregation-index","~:effective-type","~:metadata/metric","~:requires-column","~:merge","~:distinct","~:type/*","~:percentile","~:supported-field","~:var","~:median","~:share","~:max","~:case","~:operator/aggregation","~:optional","~:count","~:metabase.lib.aggregation/aggregation","~:display-name","~:driver-feature","~:requires-column?","~:avg","~:aggregation","~:metabase.lib.aggregation/unary-aggregation","~:uuid","~:query","~:stage-number","~:selected?","~:boolean","~:map","~:sum","~:metabase.lib.aggregation/count-aggregation","~:aggregation-operator","^;@"]],"~:order~:ns-specs",["^ "],"~:ns-spec-vars",["^H",[]],"~:compiler-options",["^4J",[["^>L","~:static-fns"],true,["^>L","~:shadow-tweaks"],null,["^>L","~:source-map-inline"],null,["^>L","~:elide-asserts"],true,["^>L","~:optimize-constants"],null,["^>L","^21"],null,["^>L","~:external-config"],null,["^>L","~:tooling-config"],null,["^>L","~:emit-constants"],null,["^>L","~:load-tests"],false,["^>L","~:form-size-threshold"],null,["^>L","~:global-goog-object&array"],null,["^>L","~:data-readers"],null,["^>L","~:infer-externs"],"~:auto",["^>L","^23"],["^H",["^24"]],["~:js-options","~:js-provider"],"^1M",["~:mode"],"~:release",["^>L","~:fn-invoke-direct"],null,["^>L","~:source-map"],null]]]