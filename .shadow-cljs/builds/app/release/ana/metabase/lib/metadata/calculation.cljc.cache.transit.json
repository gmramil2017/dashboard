["^ ","~:output",["^ ","~:js","goog.provide('metabase.lib.metadata.calculation');\n/**\n * Schema for valid values of `display-name-style` as passed to [[display-name-method]].\n * \n *   * `:default`: normal style used for 99% of FE stuff. For example a column that comes from a joined table might return\n *  \"Price\".\n * \n *   * `:long`: Slightly longer style that includes a little bit of extra context, used for stuff like query suggested\n *  name generation. For a joined column, this might look like \"Venues â†’ Price\".\n */\nmetabase.lib.metadata.calculation.DisplayNameStyle = new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"enum\",\"enum\",1679018432),new cljs.core.Keyword(null,\"default\",\"default\",-1987822328),new cljs.core.Keyword(null,\"long\",\"long\",-171452093)], null);\n/**\n * Display name style to use when not explicitly passed in to [[display-name]].\n */\nmetabase.lib.metadata.calculation._STAR_display_name_style_STAR_ = new cljs.core.Keyword(null,\"default\",\"default\",-1987822328);\n/**\n * Calculate a nice human-friendly display name for something.\n */\nmetabase.lib.metadata.calculation.display_name_method = (function (){var method_table__5642__auto__ = cljs.core.atom.cljs$core$IFn$_invoke$arity$1(cljs.core.PersistentArrayMap.EMPTY);\nvar prefer_table__5643__auto__ = cljs.core.atom.cljs$core$IFn$_invoke$arity$1(cljs.core.PersistentArrayMap.EMPTY);\nvar method_cache__5644__auto__ = cljs.core.atom.cljs$core$IFn$_invoke$arity$1(cljs.core.PersistentArrayMap.EMPTY);\nvar cached_hierarchy__5645__auto__ = cljs.core.atom.cljs$core$IFn$_invoke$arity$1(cljs.core.PersistentArrayMap.EMPTY);\nvar hierarchy__5646__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$3(new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"hierarchy\",\"hierarchy\",-1053470341),metabase.lib.hierarchy.hierarchy], null),new cljs.core.Keyword(null,\"hierarchy\",\"hierarchy\",-1053470341),(function (){var fexpr__48560 = cljs.core.get_global_hierarchy;\nreturn (fexpr__48560.cljs$core$IFn$_invoke$arity$0 ? fexpr__48560.cljs$core$IFn$_invoke$arity$0() : fexpr__48560.call(null));\n})());\nreturn (new cljs.core.MultiFn(cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(\"metabase.lib.metadata.calculation\",\"display-name-method\"),(function (_query,_stage_number,x,_display_name_style){\nreturn metabase.lib.dispatch.dispatch_value(x);\n}),new cljs.core.Keyword(null,\"default\",\"default\",-1987822328),hierarchy__5646__auto__,method_table__5642__auto__,prefer_table__5643__auto__,method_cache__5644__auto__,cached_hierarchy__5645__auto__));\n})();\n/**\n * Calculate a database-friendly name to use for something.\n */\nmetabase.lib.metadata.calculation.column_name_method = (function (){var method_table__5642__auto__ = cljs.core.atom.cljs$core$IFn$_invoke$arity$1(cljs.core.PersistentArrayMap.EMPTY);\nvar prefer_table__5643__auto__ = cljs.core.atom.cljs$core$IFn$_invoke$arity$1(cljs.core.PersistentArrayMap.EMPTY);\nvar method_cache__5644__auto__ = cljs.core.atom.cljs$core$IFn$_invoke$arity$1(cljs.core.PersistentArrayMap.EMPTY);\nvar cached_hierarchy__5645__auto__ = cljs.core.atom.cljs$core$IFn$_invoke$arity$1(cljs.core.PersistentArrayMap.EMPTY);\nvar hierarchy__5646__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$3(new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"hierarchy\",\"hierarchy\",-1053470341),metabase.lib.hierarchy.hierarchy], null),new cljs.core.Keyword(null,\"hierarchy\",\"hierarchy\",-1053470341),(function (){var fexpr__48561 = cljs.core.get_global_hierarchy;\nreturn (fexpr__48561.cljs$core$IFn$_invoke$arity$0 ? fexpr__48561.cljs$core$IFn$_invoke$arity$0() : fexpr__48561.call(null));\n})());\nreturn (new cljs.core.MultiFn(cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(\"metabase.lib.metadata.calculation\",\"column-name-method\"),(function (_query,_stage_number,x){\nreturn metabase.lib.dispatch.dispatch_value(x);\n}),new cljs.core.Keyword(null,\"default\",\"default\",-1987822328),hierarchy__5646__auto__,method_table__5642__auto__,prefer_table__5643__auto__,method_cache__5644__auto__,cached_hierarchy__5645__auto__));\n})();\n/**\n * Inputs: ([query]\n *         [query x]\n *         [query stage-number x]\n *         [query :- :metabase.lib.schema/query stage-number :- :int x style :- DisplayNameStyle])\n *   Return: :string\n *        \n * \n *   Calculate a nice human-friendly display name for something. See [[DisplayNameStyle]] for a the difference between\n *   different `style`s.\n */\nmetabase.lib.metadata.calculation.display_name = (function metabase$lib$metadata$calculation$display_name(var_args){\nvar G__48578 = arguments.length;\nswitch (G__48578) {\ncase 1:\nreturn metabase.lib.metadata.calculation.display_name.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\n\nbreak;\ncase 2:\nreturn metabase.lib.metadata.calculation.display_name.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ncase 3:\nreturn metabase.lib.metadata.calculation.display_name.cljs$core$IFn$_invoke$arity$3((arguments[(0)]),(arguments[(1)]),(arguments[(2)]));\n\nbreak;\ncase 4:\nreturn metabase.lib.metadata.calculation.display_name.cljs$core$IFn$_invoke$arity$4((arguments[(0)]),(arguments[(1)]),(arguments[(2)]),(arguments[(3)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\ngoog.exportSymbol('metabase.lib.metadata.calculation.display_name', metabase.lib.metadata.calculation.display_name);\n\n(metabase.lib.metadata.calculation.display_name.cljs$core$IFn$_invoke$arity$1 = (function (query){\n\nreturn metabase.lib.metadata.calculation.display_name.cljs$core$IFn$_invoke$arity$2(query,query);\n}));\n\n(metabase.lib.metadata.calculation.display_name.cljs$core$IFn$_invoke$arity$2 = (function (query,x){\n\nreturn metabase.lib.metadata.calculation.display_name.cljs$core$IFn$_invoke$arity$3(query,(-1),x);\n}));\n\n(metabase.lib.metadata.calculation.display_name.cljs$core$IFn$_invoke$arity$3 = (function (query,stage_number,x){\n\nreturn metabase.lib.metadata.calculation.display_name.cljs$core$IFn$_invoke$arity$4(query,stage_number,x,metabase.lib.metadata.calculation._STAR_display_name_style_STAR_);\n}));\n\n(metabase.lib.metadata.calculation.display_name.cljs$core$IFn$_invoke$arity$4 = (function (query,stage_number,x,style){\n\nvar or__5045__auto__ = new cljs.core.Keyword(null,\"display-name\",\"display-name\",694513143).cljs$core$IFn$_invoke$arity$1(metabase.lib.options.options(x));\nif(cljs.core.truth_(or__5045__auto__)){\nreturn or__5045__auto__;\n} else {\ntry{return metabase.lib.metadata.calculation.display_name_method.cljs$core$IFn$_invoke$arity$4(query,stage_number,x,style);\n}catch (e48604){if((e48604 instanceof Error)){\nvar e = e48604;\nthrow cljs.core.ex_info.cljs$core$IFn$_invoke$arity$3(metabase.shared.util.i18n.js_i18n.cljs$core$IFn$_invoke$arity$variadic(\"Error calculating display name for {0}: {1}\",cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([x], 0)),cljs.core.ex_message(e)], 0)),new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"query\",\"query\",-1288509510),query,new cljs.core.Keyword(null,\"x\",\"x\",2099068185),x], null),e);\n} else {\nthrow e48604;\n\n}\n}}\n}));\n\n(metabase.lib.metadata.calculation.display_name.cljs$lang$maxFixedArity = 4);\n\n/**\n * Inputs: ([query x]\n *         [query :- :metabase.lib.schema/query stage-number :- :int x])\n *   Return: :metabase.lib.schema.common/non-blank-string\n *        \n * \n *   Calculate a database-friendly name to use for an expression.\n */\nmetabase.lib.metadata.calculation.column_name = (function metabase$lib$metadata$calculation$column_name(var_args){\nvar G__48607 = arguments.length;\nswitch (G__48607) {\ncase 2:\nreturn metabase.lib.metadata.calculation.column_name.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ncase 3:\nreturn metabase.lib.metadata.calculation.column_name.cljs$core$IFn$_invoke$arity$3((arguments[(0)]),(arguments[(1)]),(arguments[(2)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\n(metabase.lib.metadata.calculation.column_name.cljs$core$IFn$_invoke$arity$2 = (function (query,x){\n\nreturn metabase.lib.metadata.calculation.column_name.cljs$core$IFn$_invoke$arity$3(query,(-1),x);\n}));\n\n(metabase.lib.metadata.calculation.column_name.cljs$core$IFn$_invoke$arity$3 = (function (query,stage_number,x){\n\nvar or__5045__auto__ = new cljs.core.Keyword(null,\"name\",\"name\",1843675177).cljs$core$IFn$_invoke$arity$1(metabase.lib.options.options(x));\nif(cljs.core.truth_(or__5045__auto__)){\nreturn or__5045__auto__;\n} else {\ntry{return metabase.lib.metadata.calculation.column_name_method.cljs$core$IFn$_invoke$arity$3(query,stage_number,x);\n}catch (e48609){if((e48609 instanceof Error)){\nvar e = e48609;\nthrow cljs.core.ex_info.cljs$core$IFn$_invoke$arity$3(metabase.shared.util.i18n.js_i18n.cljs$core$IFn$_invoke$arity$variadic(\"Error calculating column name for {0}: {1}\",cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([x], 0)),cljs.core.ex_message(e)], 0)),new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null,\"x\",\"x\",2099068185),x,new cljs.core.Keyword(null,\"query\",\"query\",-1288509510),query,new cljs.core.Keyword(null,\"stage-number\",\"stage-number\",-1752729638),stage_number], null),e);\n} else {\nthrow e48609;\n\n}\n}}\n}));\n\n(metabase.lib.metadata.calculation.column_name.cljs$lang$maxFixedArity = 3);\n\nmetabase.lib.metadata.calculation.display_name_method.cljs$core$IMultiFn$_add_method$arity$3(null,new cljs.core.Keyword(null,\"default\",\"default\",-1987822328),(function (_query,_stage_number,x,_stage){\nvar level__30248__auto___48690 = metabase.util.log.glogi_level(new cljs.core.Keyword(null,\"warn\",\"warn\",-436710552));\nvar logger__30249__auto___48691 = \"metabase.lib.metadata.calculation\";\nif(cljs.core.truth_(metabase.util.log.is_loggable_QMARK_(logger__30249__auto___48691,level__30248__auto___48690))){\nvar x__30250__auto___48692 = \"Don't know how to calculate display name for %s. Add an impl for %s for %s\";\nif((x__30250__auto___48692 instanceof Error)){\nlambdaisland.glogi.log.cljs$core$IFn$_invoke$arity$4(logger__30249__auto___48691,level__30248__auto___48690,metabase.util.log.format_msg.cljs$core$IFn$_invoke$arity$variadic(cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([x], 0)),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Symbol(\"metabase.lib.metadata.calculation\",\"display-name-method\",\"metabase.lib.metadata.calculation/display-name-method\",37675198,null),metabase.lib.dispatch.dispatch_value(x)], 0)),x__30250__auto___48692);\n} else {\nlambdaisland.glogi.log.cljs$core$IFn$_invoke$arity$4(logger__30249__auto___48691,level__30248__auto___48690,metabase.util.log.format_msg.cljs$core$IFn$_invoke$arity$variadic(x__30250__auto___48692,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([x], 0)),new cljs.core.Symbol(\"metabase.lib.metadata.calculation\",\"display-name-method\",\"metabase.lib.metadata.calculation/display-name-method\",37675198,null),metabase.lib.dispatch.dispatch_value(x)], 0)),null);\n}\n} else {\n}\n\nif(((cljs.core.vector_QMARK_(x)) && ((cljs.core.first(x) instanceof cljs.core.Keyword)))){\nreturn cljs.core.name(cljs.core.first(x));\n} else {\nreturn cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([x], 0));\n}\n}));\nmetabase.lib.metadata.calculation.slugify = (function metabase$lib$metadata$calculation$slugify(s){\nreturn metabase.util.slugify.cljs$core$IFn$_invoke$arity$2(clojure.string.replace(s,/[\\(\\)]/,\"\"),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"unicode?\",\"unicode?\",-1511958714),true], null));\n});\nmetabase.lib.metadata.calculation.column_name_method.cljs$core$IMultiFn$_add_method$arity$3(null,new cljs.core.Keyword(null,\"default\",\"default\",-1987822328),(function (query,stage_number,x){\nreturn metabase.lib.metadata.calculation.slugify(metabase.lib.metadata.calculation.display_name.cljs$core$IFn$_invoke$arity$3(query,stage_number,x));\n}));\n/**\n * Implementation for [[describe-top-level-key]]. Describe part of a stage of a query, e.g. the `:filters` part or the\n *   `:aggregation` part. Return `nil` if there is nothing to describe.\n * \n *   Implementations that call [[display-name]] should specify the `:long` display name style.\n */\nmetabase.lib.metadata.calculation.describe_top_level_key_method = (function (){var method_table__5642__auto__ = cljs.core.atom.cljs$core$IFn$_invoke$arity$1(cljs.core.PersistentArrayMap.EMPTY);\nvar prefer_table__5643__auto__ = cljs.core.atom.cljs$core$IFn$_invoke$arity$1(cljs.core.PersistentArrayMap.EMPTY);\nvar method_cache__5644__auto__ = cljs.core.atom.cljs$core$IFn$_invoke$arity$1(cljs.core.PersistentArrayMap.EMPTY);\nvar cached_hierarchy__5645__auto__ = cljs.core.atom.cljs$core$IFn$_invoke$arity$1(cljs.core.PersistentArrayMap.EMPTY);\nvar hierarchy__5646__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$3(new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"hierarchy\",\"hierarchy\",-1053470341),metabase.lib.hierarchy.hierarchy], null),new cljs.core.Keyword(null,\"hierarchy\",\"hierarchy\",-1053470341),(function (){var fexpr__48617 = cljs.core.get_global_hierarchy;\nreturn (fexpr__48617.cljs$core$IFn$_invoke$arity$0 ? fexpr__48617.cljs$core$IFn$_invoke$arity$0() : fexpr__48617.call(null));\n})());\nreturn (new cljs.core.MultiFn(cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(\"metabase.lib.metadata.calculation\",\"describe-top-level-key-method\"),(function (_query,_stage_number,top_level_key){\nreturn top_level_key;\n}),new cljs.core.Keyword(null,\"default\",\"default\",-1987822328),hierarchy__5646__auto__,method_table__5642__auto__,prefer_table__5643__auto__,method_cache__5644__auto__,cached_hierarchy__5645__auto__));\n})();\n/**\n * In the interest of making this easy to use in JS-land we'll accept either strings or keywords.\n */\nmetabase.lib.metadata.calculation.TopLevelKey = new cljs.core.PersistentVector(null, 8, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"enum\",\"enum\",1679018432),new cljs.core.Keyword(null,\"aggregation\",\"aggregation\",1597476696),new cljs.core.Keyword(null,\"breakout\",\"breakout\",-732419050),new cljs.core.Keyword(null,\"filters\",\"filters\",974726919),new cljs.core.Keyword(null,\"limit\",\"limit\",-1355822363),new cljs.core.Keyword(null,\"order-by\",\"order-by\",1527318070),new cljs.core.Keyword(null,\"source-table\",\"source-table\",-225307692),new cljs.core.Keyword(null,\"source-card\",\"source-card\",-1580820390)], null);\n/**\n * Inputs: ([query top-level-key]\n *         [query :- :metabase.lib.schema/query stage-number :- :int top-level-key :- TopLevelKey])\n *   Return: [:maybe :metabase.lib.schema.common/non-blank-string]\n *        \n * \n *   'top-level' here means the top level of an individual stage. Generate a human-friendly string describing a specific\n *   part of an MBQL stage, or `nil` if that part doesn't exist.\n */\nmetabase.lib.metadata.calculation.describe_top_level_key = (function metabase$lib$metadata$calculation$describe_top_level_key(var_args){\nvar G__48622 = arguments.length;\nswitch (G__48622) {\ncase 2:\nreturn metabase.lib.metadata.calculation.describe_top_level_key.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ncase 3:\nreturn metabase.lib.metadata.calculation.describe_top_level_key.cljs$core$IFn$_invoke$arity$3((arguments[(0)]),(arguments[(1)]),(arguments[(2)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\n(metabase.lib.metadata.calculation.describe_top_level_key.cljs$core$IFn$_invoke$arity$2 = (function (query,top_level_key){\n\nreturn metabase.lib.metadata.calculation.describe_top_level_key.cljs$core$IFn$_invoke$arity$3(query,(-1),top_level_key);\n}));\n\n(metabase.lib.metadata.calculation.describe_top_level_key.cljs$core$IFn$_invoke$arity$3 = (function (query,stage_number,top_level_key){\n\nreturn metabase.lib.metadata.calculation.describe_top_level_key_method.cljs$core$IFn$_invoke$arity$3(query,stage_number,cljs.core.keyword.cljs$core$IFn$_invoke$arity$1(top_level_key));\n}));\n\n(metabase.lib.metadata.calculation.describe_top_level_key.cljs$lang$maxFixedArity = 3);\n\n/**\n * Calculate the effective type of something. This differs from [[metabase.lib.schema.expression/type-of]] in that it is\n *   called with a query/MetadataProvider and a stage number, allowing us to fully resolve information and return\n *   complete, unambigous type information. Default implementation calls [[metabase.lib.schema.expression/type-of]].\n */\nmetabase.lib.metadata.calculation.type_of_method = (function (){var method_table__5642__auto__ = cljs.core.atom.cljs$core$IFn$_invoke$arity$1(cljs.core.PersistentArrayMap.EMPTY);\nvar prefer_table__5643__auto__ = cljs.core.atom.cljs$core$IFn$_invoke$arity$1(cljs.core.PersistentArrayMap.EMPTY);\nvar method_cache__5644__auto__ = cljs.core.atom.cljs$core$IFn$_invoke$arity$1(cljs.core.PersistentArrayMap.EMPTY);\nvar cached_hierarchy__5645__auto__ = cljs.core.atom.cljs$core$IFn$_invoke$arity$1(cljs.core.PersistentArrayMap.EMPTY);\nvar hierarchy__5646__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$3(new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"hierarchy\",\"hierarchy\",-1053470341),metabase.lib.hierarchy.hierarchy], null),new cljs.core.Keyword(null,\"hierarchy\",\"hierarchy\",-1053470341),(function (){var fexpr__48623 = cljs.core.get_global_hierarchy;\nreturn (fexpr__48623.cljs$core$IFn$_invoke$arity$0 ? fexpr__48623.cljs$core$IFn$_invoke$arity$0() : fexpr__48623.call(null));\n})());\nreturn (new cljs.core.MultiFn(cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(\"metabase.lib.metadata.calculation\",\"type-of-method\"),(function (_query,_stage_number,expr){\nreturn metabase.lib.dispatch.dispatch_value(expr);\n}),new cljs.core.Keyword(null,\"default\",\"default\",-1987822328),hierarchy__5646__auto__,method_table__5642__auto__,prefer_table__5643__auto__,method_cache__5644__auto__,cached_hierarchy__5645__auto__));\n})();\n/**\n * Inputs: ([query x]\n *         [query :- :metabase.lib.schema/query stage-number :- :int x])\n *   Return: :metabase.lib.schema.common/base-type\n *        \n * \n *   Get the effective type of an MBQL expression.\n */\nmetabase.lib.metadata.calculation.type_of = (function metabase$lib$metadata$calculation$type_of(var_args){\nvar G__48626 = arguments.length;\nswitch (G__48626) {\ncase 2:\nreturn metabase.lib.metadata.calculation.type_of.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ncase 3:\nreturn metabase.lib.metadata.calculation.type_of.cljs$core$IFn$_invoke$arity$3((arguments[(0)]),(arguments[(1)]),(arguments[(2)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\n(metabase.lib.metadata.calculation.type_of.cljs$core$IFn$_invoke$arity$2 = (function (query,x){\n\nreturn metabase.lib.metadata.calculation.type_of.cljs$core$IFn$_invoke$arity$3(query,(-1),x);\n}));\n\n(metabase.lib.metadata.calculation.type_of.cljs$core$IFn$_invoke$arity$3 = (function (query,stage_number,x){\n\nvar map__48627 = metabase.lib.options.options(x);\nvar map__48627__$1 = cljs.core.__destructure_map(map__48627);\nvar options = map__48627__$1;\nvar temporal_unit = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__48627__$1,new cljs.core.Keyword(null,\"temporal-unit\",\"temporal-unit\",-1892306358));\nvar or__5045__auto__ = new cljs.core.Keyword(null,\"effective-type\",\"effective-type\",-355725458).cljs$core$IFn$_invoke$arity$1(options);\nif(cljs.core.truth_(or__5045__auto__)){\nreturn or__5045__auto__;\n} else {\nvar or__5045__auto____$1 = (cljs.core.truth_((function (){var and__5043__auto__ = temporal_unit;\nif(cljs.core.truth_(and__5043__auto__)){\nreturn cljs.core.contains_QMARK_(metabase.lib.schema.temporal_bucketing.datetime_extraction_units,temporal_unit);\n} else {\nreturn and__5043__auto__;\n}\n})())?new cljs.core.Keyword(\"type\",\"Integer\",\"type/Integer\",-638928316):null);\nif(cljs.core.truth_(or__5045__auto____$1)){\nreturn or__5045__auto____$1;\n} else {\nvar or__5045__auto____$2 = new cljs.core.Keyword(null,\"base-type\",\"base-type\",1167971299).cljs$core$IFn$_invoke$arity$1(options);\nif(cljs.core.truth_(or__5045__auto____$2)){\nreturn or__5045__auto____$2;\n} else {\nvar calculated_type = metabase.lib.metadata.calculation.type_of_method.cljs$core$IFn$_invoke$arity$3(query,stage_number,x);\nif(cljs.core.isa_QMARK_.cljs$core$IFn$_invoke$arity$2(calculated_type,new cljs.core.Keyword(\"type\",\"*\",\"type/*\",-1283496752))){\nreturn calculated_type;\n} else {\nreturn new cljs.core.Keyword(\"type\",\"*\",\"type/*\",-1283496752);\n}\n}\n}\n}\n}));\n\n(metabase.lib.metadata.calculation.type_of.cljs$lang$maxFixedArity = 3);\n\nmetabase.lib.metadata.calculation.type_of_method.cljs$core$IMultiFn$_add_method$arity$3(null,new cljs.core.Keyword(null,\"default\",\"default\",-1987822328),(function (_query,_stage_number,expr){\nreturn metabase.lib.schema.expression.type_of(expr);\n}));\nmetabase.lib.metadata.calculation.type_of_method.cljs$core$IMultiFn$_add_method$arity$3(null,new cljs.core.Keyword(\"lib.type-of\",\"type-is-type-of-first-arg\",\"lib.type-of/type-is-type-of-first-arg\",-317600808),(function (query,stage_number,p__48628){\nvar vec__48629 = p__48628;\nvar _tag = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__48629,(0),null);\nvar _opts = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__48629,(1),null);\nvar expr = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__48629,(2),null);\nreturn metabase.lib.metadata.calculation.type_of.cljs$core$IFn$_invoke$arity$3(query,stage_number,expr);\n}));\nmetabase.lib.metadata.calculation.type_of_method.cljs$core$IMultiFn$_add_method$arity$3(null,new cljs.core.Keyword(\"lib.type-of\",\"type-is-temporal-type-of-first-arg\",\"lib.type-of/type-is-temporal-type-of-first-arg\",76272405),(function (query,stage_number,p__48632){\nvar vec__48633 = p__48632;\nvar _tag = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__48633,(0),null);\nvar _opts = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__48633,(1),null);\nvar expr = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__48633,(2),null);\nvar clause = vec__48633;\nif(typeof expr === 'string'){\nreturn metabase.lib.schema.expression.type_of(clause);\n} else {\nreturn metabase.lib.metadata.calculation.type_of.cljs$core$IFn$_invoke$arity$3(query,stage_number,expr);\n}\n}));\n/**\n * Impl for [[metadata]]. Implementations that call [[display-name]] should use the `:default` display name style.\n */\nmetabase.lib.metadata.calculation.metadata_method = (function (){var method_table__5642__auto__ = cljs.core.atom.cljs$core$IFn$_invoke$arity$1(cljs.core.PersistentArrayMap.EMPTY);\nvar prefer_table__5643__auto__ = cljs.core.atom.cljs$core$IFn$_invoke$arity$1(cljs.core.PersistentArrayMap.EMPTY);\nvar method_cache__5644__auto__ = cljs.core.atom.cljs$core$IFn$_invoke$arity$1(cljs.core.PersistentArrayMap.EMPTY);\nvar cached_hierarchy__5645__auto__ = cljs.core.atom.cljs$core$IFn$_invoke$arity$1(cljs.core.PersistentArrayMap.EMPTY);\nvar hierarchy__5646__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$3(new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"hierarchy\",\"hierarchy\",-1053470341),metabase.lib.hierarchy.hierarchy], null),new cljs.core.Keyword(null,\"hierarchy\",\"hierarchy\",-1053470341),(function (){var fexpr__48636 = cljs.core.get_global_hierarchy;\nreturn (fexpr__48636.cljs$core$IFn$_invoke$arity$0 ? fexpr__48636.cljs$core$IFn$_invoke$arity$0() : fexpr__48636.call(null));\n})());\nreturn (new cljs.core.MultiFn(cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(\"metabase.lib.metadata.calculation\",\"metadata-method\"),(function (_query,_stage_number,x){\nreturn metabase.lib.dispatch.dispatch_value(x);\n}),new cljs.core.Keyword(null,\"default\",\"default\",-1987822328),hierarchy__5646__auto__,method_table__5642__auto__,prefer_table__5643__auto__,method_cache__5644__auto__,cached_hierarchy__5645__auto__));\n})();\nmetabase.lib.metadata.calculation.metadata_method.cljs$core$IMultiFn$_add_method$arity$3(null,new cljs.core.Keyword(null,\"default\",\"default\",-1987822328),(function (query,stage_number,x){\ntry{return new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(\"lib\",\"type\",\"lib/type\",1175424801),new cljs.core.Keyword(\"metadata\",\"column\",\"metadata/column\",-1799249054),new cljs.core.Keyword(null,\"base-type\",\"base-type\",1167971299),metabase.lib.metadata.calculation.type_of.cljs$core$IFn$_invoke$arity$3(query,stage_number,x),new cljs.core.Keyword(null,\"name\",\"name\",1843675177),metabase.lib.metadata.calculation.column_name.cljs$core$IFn$_invoke$arity$3(query,stage_number,x),new cljs.core.Keyword(null,\"display-name\",\"display-name\",694513143),metabase.lib.metadata.calculation.display_name.cljs$core$IFn$_invoke$arity$3(query,stage_number,x)], null);\n}catch (e48637){if((e48637 instanceof Error)){\nvar e = e48637;\nthrow cljs.core.ex_info.cljs$core$IFn$_invoke$arity$3(metabase.shared.util.i18n.js_i18n.cljs$core$IFn$_invoke$arity$variadic(\"Error calculating metadata for {0}: {1}\",cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([metabase.lib.dispatch.dispatch_value(x)], 0)),cljs.core.ex_message(e)], 0)),new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null,\"query\",\"query\",-1288509510),query,new cljs.core.Keyword(null,\"stage-number\",\"stage-number\",-1752729638),stage_number,new cljs.core.Keyword(null,\"x\",\"x\",2099068185),x], null),e);\n} else {\nthrow e48637;\n\n}\n}}));\n/**\n * Inputs: ([query]\n *         [query x]\n *         [query :- :metabase.lib.schema/query stage-number :- :int x])\n *   Return: [:map\n *         [:lib/type\n *          [:and\n *           :keyword\n *           [:fn\n *            #:error{:message \":lib/type should be a :metadata/ keyword\"}\n *            (fn* [p1__48638#] (= (namespace p1__48638#) \"metadata\"))]]]]\n *        \n * \n *   Calculate an appropriate `:metadata/*` object for something. What this looks like depends on what we're calculating\n *   metadata for. If it's a reference or expression of some sort, this should return a single `:metadata/column`\n *   map (i.e., something satisfying the [[metabase.lib.metadata/ColumnMetadata]] schema.\n */\nmetabase.lib.metadata.calculation.metadata = (function metabase$lib$metadata$calculation$metadata(var_args){\nvar G__48649 = arguments.length;\nswitch (G__48649) {\ncase 1:\nreturn metabase.lib.metadata.calculation.metadata.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\n\nbreak;\ncase 2:\nreturn metabase.lib.metadata.calculation.metadata.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ncase 3:\nreturn metabase.lib.metadata.calculation.metadata.cljs$core$IFn$_invoke$arity$3((arguments[(0)]),(arguments[(1)]),(arguments[(2)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\n(metabase.lib.metadata.calculation.metadata.cljs$core$IFn$_invoke$arity$1 = (function (query){\n\nreturn metabase.lib.metadata.calculation.metadata.cljs$core$IFn$_invoke$arity$3(query,(-1),query);\n}));\n\n(metabase.lib.metadata.calculation.metadata.cljs$core$IFn$_invoke$arity$2 = (function (query,x){\n\nreturn metabase.lib.metadata.calculation.metadata.cljs$core$IFn$_invoke$arity$3(query,(-1),x);\n}));\n\n(metabase.lib.metadata.calculation.metadata.cljs$core$IFn$_invoke$arity$3 = (function (query,stage_number,x){\n\nreturn metabase.lib.metadata.calculation.metadata_method.cljs$core$IFn$_invoke$arity$3(query,stage_number,x);\n}));\n\n(metabase.lib.metadata.calculation.metadata.cljs$lang$maxFixedArity = 3);\n\n/**\n * Inputs: [query]\n *   Return: :metabase.lib.schema.common/non-blank-string\n *        \n * \n *   Convenience for calling [[display-name]] on a query to describe the results of its final stage.\n */\nmetabase.lib.metadata.calculation.describe_query = (function metabase$lib$metadata$calculation$describe_query(query){\n\nreturn metabase.lib.metadata.calculation.display_name.cljs$core$IFn$_invoke$arity$2(query,query);\n});\n/**\n * Inputs: [query]\n *   Return: [:maybe :metabase.lib.schema.common/non-blank-string]\n *        \n * \n *   Name you might want to use for a query when saving an previously-unsaved query. This is the same\n *   as [[describe-query]] except for native queries, where we don't describe anything.\n */\nmetabase.lib.metadata.calculation.suggested_name = (function metabase$lib$metadata$calculation$suggested_name(query){\n\nif(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(new cljs.core.Keyword(\"lib\",\"type\",\"lib/type\",1175424801).cljs$core$IFn$_invoke$arity$1(metabase.lib.util.query_stage(query,(-1))),new cljs.core.Keyword(\"mbql.stage\",\"native\",\"mbql.stage/native\",359422194))){\nreturn null;\n} else {\ntry{return metabase.lib.metadata.calculation.describe_query(query);\n}catch (e48652){if((e48652 instanceof Error)){\nvar e = e48652;\nvar level__30238__auto___48707 = metabase.util.log.glogi_level(new cljs.core.Keyword(null,\"error\",\"error\",-978969032));\nvar logger__30239__auto___48708 = \"metabase.lib.metadata.calculation\";\nif(cljs.core.truth_(metabase.util.log.is_loggable_QMARK_(logger__30239__auto___48708,level__30238__auto___48707))){\nvar x__30240__auto___48710 = e;\nif((x__30240__auto___48710 instanceof Error)){\nlambdaisland.glogi.log.cljs$core$IFn$_invoke$arity$4(logger__30239__auto___48708,level__30238__auto___48707,cljs.core.print_str.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([metabase.shared.util.i18n.js_i18n.cljs$core$IFn$_invoke$arity$variadic(\"Error calculating display name for query: {0}\",cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([cljs.core.ex_message(e)], 0))], 0)),x__30240__auto___48710);\n} else {\nlambdaisland.glogi.log.cljs$core$IFn$_invoke$arity$4(logger__30239__auto___48708,level__30238__auto___48707,cljs.core.print_str.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([x__30240__auto___48710,metabase.shared.util.i18n.js_i18n.cljs$core$IFn$_invoke$arity$variadic(\"Error calculating display name for query: {0}\",cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([cljs.core.ex_message(e)], 0))], 0)),null);\n}\n} else {\n}\n\nreturn null;\n} else {\nthrow e48652;\n\n}\n}}\n});\n/**\n * Implementation for [[display-info]]. Implementations that call [[display-name]] should use the `:default` display\n *   name style.\n */\nmetabase.lib.metadata.calculation.display_info_method = (function (){var method_table__5642__auto__ = cljs.core.atom.cljs$core$IFn$_invoke$arity$1(cljs.core.PersistentArrayMap.EMPTY);\nvar prefer_table__5643__auto__ = cljs.core.atom.cljs$core$IFn$_invoke$arity$1(cljs.core.PersistentArrayMap.EMPTY);\nvar method_cache__5644__auto__ = cljs.core.atom.cljs$core$IFn$_invoke$arity$1(cljs.core.PersistentArrayMap.EMPTY);\nvar cached_hierarchy__5645__auto__ = cljs.core.atom.cljs$core$IFn$_invoke$arity$1(cljs.core.PersistentArrayMap.EMPTY);\nvar hierarchy__5646__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$3(new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"hierarchy\",\"hierarchy\",-1053470341),metabase.lib.hierarchy.hierarchy], null),new cljs.core.Keyword(null,\"hierarchy\",\"hierarchy\",-1053470341),(function (){var fexpr__48655 = cljs.core.get_global_hierarchy;\nreturn (fexpr__48655.cljs$core$IFn$_invoke$arity$0 ? fexpr__48655.cljs$core$IFn$_invoke$arity$0() : fexpr__48655.call(null));\n})());\nreturn (new cljs.core.MultiFn(cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(\"metabase.lib.metadata.calculation\",\"display-info-method\"),(function (_query,_stage_number,x){\nreturn metabase.lib.dispatch.dispatch_value(x);\n}),new cljs.core.Keyword(null,\"default\",\"default\",-1987822328),hierarchy__5646__auto__,method_table__5642__auto__,prefer_table__5643__auto__,method_cache__5644__auto__,cached_hierarchy__5645__auto__));\n})();\nmetabase.util.malli.registry.register_BANG_(new cljs.core.Keyword(\"metabase.lib.metadata.calculation\",\"display-info\",\"metabase.lib.metadata.calculation/display-info\",-2072755534),new cljs.core.PersistentVector(null, 19, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"map\",\"map\",1371690461),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"display-name\",\"display-name\",694513143),new cljs.core.Keyword(null,\"string\",\"string\",-1989541586)], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"long-display-name\",\"long-display-name\",1550784464),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"optional\",\"optional\",2053951509),true], null),new cljs.core.Keyword(null,\"string\",\"string\",-1989541586)], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"table\",\"table\",-564943036),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"optional\",\"optional\",2053951509),true], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"maybe\",\"maybe\",-314397560),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"ref\",\"ref\",1289896967),new cljs.core.Keyword(\"metabase.lib.metadata.calculation\",\"display-info\",\"metabase.lib.metadata.calculation/display-info\",-2072755534)], null)], null)], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"is-from-previous-stage\",\"is-from-previous-stage\",956780376),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"optional\",\"optional\",2053951509),true], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"maybe\",\"maybe\",-314397560),new cljs.core.Keyword(null,\"boolean\",\"boolean\",-1919418404)], null)], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"is-from-join\",\"is-from-join\",-1107917905),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"optional\",\"optional\",2053951509),true], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"maybe\",\"maybe\",-314397560),new cljs.core.Keyword(null,\"boolean\",\"boolean\",-1919418404)], null)], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"is-calculated\",\"is-calculated\",-86687269),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"optional\",\"optional\",2053951509),true], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"maybe\",\"maybe\",-314397560),new cljs.core.Keyword(null,\"boolean\",\"boolean\",-1919418404)], null)], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"is-implicitly-joinable\",\"is-implicitly-joinable\",2054926844),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"optional\",\"optional\",2053951509),true], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"maybe\",\"maybe\",-314397560),new cljs.core.Keyword(null,\"boolean\",\"boolean\",-1919418404)], null)], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"is-source-table\",\"is-source-table\",1559075056),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"optional\",\"optional\",2053951509),true], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"maybe\",\"maybe\",-314397560),new cljs.core.Keyword(null,\"boolean\",\"boolean\",-1919418404)], null)], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"is-breakout-column\",\"is-breakout-column\",46784229),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"optional\",\"optional\",2053951509),true], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"maybe\",\"maybe\",-314397560),new cljs.core.Keyword(null,\"boolean\",\"boolean\",-1919418404)], null)], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"is-order-by-column\",\"is-order-by-column\",1320802549),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"optional\",\"optional\",2053951509),true], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"maybe\",\"maybe\",-314397560),new cljs.core.Keyword(null,\"boolean\",\"boolean\",-1919418404)], null)], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"name\",\"name\",1843675177),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"optional\",\"optional\",2053951509),true], null),new cljs.core.Keyword(null,\"string\",\"string\",-1989541586)], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"column-name\",\"column-name\",551523580),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"optional\",\"optional\",2053951509),true], null),new cljs.core.Keyword(null,\"string\",\"string\",-1989541586)], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"description\",\"description\",-1428560544),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"optional\",\"optional\",2053951509),true], null),new cljs.core.Keyword(null,\"string\",\"string\",-1989541586)], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"short-name\",\"short-name\",-1767085022),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"optional\",\"optional\",2053951509),true], null),new cljs.core.Keyword(null,\"string\",\"string\",-1989541586)], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"requires-column\",\"requires-column\",934105295),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"optional\",\"optional\",2053951509),true], null),new cljs.core.Keyword(null,\"boolean\",\"boolean\",-1919418404)], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"selected\",\"selected\",574897764),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"optional\",\"optional\",2053951509),true], null),new cljs.core.Keyword(null,\"boolean\",\"boolean\",-1919418404)], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"default\",\"default\",-1987822328),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"optional\",\"optional\",2053951509),true], null),new cljs.core.Keyword(null,\"boolean\",\"boolean\",-1919418404)], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"direction\",\"direction\",-633359395),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"optional\",\"optional\",2053951509),true], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"enum\",\"enum\",1679018432),new cljs.core.Keyword(null,\"asc\",\"asc\",356854569),new cljs.core.Keyword(null,\"desc\",\"desc\",2093485764)], null)], null)], null));\n/**\n * Inputs: ([query x]\n *         [query :- :metabase.lib.schema/query stage-number :- :int x])\n *   Return: :metabase.lib.metadata.calculation/display-info\n *        \n * \n *   Given some sort of Cljs object, return a map with the info you'd need to implement UI for it. This is mostly meant to\n *   power the Frontend JavaScript UI; in JS, results will be converted to plain JavaScript objects, so avoid returning\n *   things that should remain opaque.\n */\nmetabase.lib.metadata.calculation.display_info = (function metabase$lib$metadata$calculation$display_info(var_args){\nvar G__48658 = arguments.length;\nswitch (G__48658) {\ncase 2:\nreturn metabase.lib.metadata.calculation.display_info.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ncase 3:\nreturn metabase.lib.metadata.calculation.display_info.cljs$core$IFn$_invoke$arity$3((arguments[(0)]),(arguments[(1)]),(arguments[(2)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\n(metabase.lib.metadata.calculation.display_info.cljs$core$IFn$_invoke$arity$2 = (function (query,x){\n\nreturn metabase.lib.metadata.calculation.display_info.cljs$core$IFn$_invoke$arity$3(query,(-1),x);\n}));\n\n(metabase.lib.metadata.calculation.display_info.cljs$core$IFn$_invoke$arity$3 = (function (query,stage_number,x){\n\ntry{return metabase.lib.metadata.calculation.display_info_method.cljs$core$IFn$_invoke$arity$3(query,stage_number,x);\n}catch (e48660){if((e48660 instanceof Error)){\nvar e = e48660;\nthrow cljs.core.ex_info.cljs$core$IFn$_invoke$arity$3(metabase.shared.util.i18n.js_i18n.cljs$core$IFn$_invoke$arity$variadic(\"Error calculating display info for {0}: {1}\",cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([metabase.lib.dispatch.dispatch_value(x),cljs.core.ex_message(e)], 0)),new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null,\"query\",\"query\",-1288509510),query,new cljs.core.Keyword(null,\"stage-number\",\"stage-number\",-1752729638),stage_number,new cljs.core.Keyword(null,\"x\",\"x\",2099068185),x], null),e);\n} else {\nthrow e48660;\n\n}\n}}));\n\n(metabase.lib.metadata.calculation.display_info.cljs$lang$maxFixedArity = 3);\n\n/**\n * Default implementation of [[display-info-method]], available in case you want to use this in a different\n *   implementation and add additional information to it.\n */\nmetabase.lib.metadata.calculation.default_display_info = (function metabase$lib$metadata$calculation$default_display_info(query,stage_number,x){\nvar x_metadata = metabase.lib.metadata.calculation.metadata.cljs$core$IFn$_invoke$arity$3(query,stage_number,x);\nreturn cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([cljs.core.select_keys(x_metadata,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"name\",\"name\",1843675177),new cljs.core.Keyword(null,\"display-name\",\"display-name\",694513143),new cljs.core.Keyword(null,\"semantic-type\",\"semantic-type\",-310722107)], null)),(function (){var temp__5804__auto__ = metabase.lib.metadata.calculation.display_name.cljs$core$IFn$_invoke$arity$4(query,stage_number,x,new cljs.core.Keyword(null,\"long\",\"long\",-171452093));\nif(cljs.core.truth_(temp__5804__auto__)){\nvar long_display_name = temp__5804__auto__;\nreturn new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"long-display-name\",\"long-display-name\",1550784464),long_display_name], null);\n} else {\nreturn null;\n}\n})(),(function (){var temp__5804__auto__ = cljs.core.some_fn.cljs$core$IFn$_invoke$arity$2(new cljs.core.Keyword(null,\"effective-type\",\"effective-type\",-355725458),new cljs.core.Keyword(null,\"base-type\",\"base-type\",1167971299))(x_metadata);\nif(cljs.core.truth_(temp__5804__auto__)){\nvar effective_type = temp__5804__auto__;\nreturn new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"effective-type\",\"effective-type\",-355725458),effective_type], null);\n} else {\nreturn null;\n}\n})(),(function (){var temp__5804__auto__ = new cljs.core.Keyword(null,\"table-id\",\"table-id\",-766649466).cljs$core$IFn$_invoke$arity$1(x_metadata);\nif(cljs.core.truth_(temp__5804__auto__)){\nvar table_id = temp__5804__auto__;\nreturn new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"table\",\"table\",-564943036),metabase.lib.metadata.calculation.display_info.cljs$core$IFn$_invoke$arity$3(query,stage_number,((cljs.core.integer_QMARK_(table_id))?metabase.lib.metadata.table(query,table_id):((typeof table_id === 'string')?metabase.lib.metadata.card(query,metabase.lib.util.legacy_string_table_id__GT_card_id(table_id)):null)))], null);\n} else {\nreturn null;\n}\n})(),(function (){var temp__5804__auto__ = new cljs.core.Keyword(\"lib\",\"source\",\"lib/source\",-434086550).cljs$core$IFn$_invoke$arity$1(x_metadata);\nif(cljs.core.truth_(temp__5804__auto__)){\nvar source = temp__5804__auto__;\nreturn new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null,\"is-from-previous-stage\",\"is-from-previous-stage\",956780376),cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(source,new cljs.core.Keyword(\"source\",\"previous-stage\",\"source/previous-stage\",1962610878)),new cljs.core.Keyword(null,\"is-from-join\",\"is-from-join\",-1107917905),cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(source,new cljs.core.Keyword(\"source\",\"joins\",\"source/joins\",1225821486)),new cljs.core.Keyword(null,\"is-calculated\",\"is-calculated\",-86687269),cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(source,new cljs.core.Keyword(\"source\",\"expressions\",\"source/expressions\",-458367840)),new cljs.core.Keyword(null,\"is-implicitly-joinable\",\"is-implicitly-joinable\",2054926844),cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(source,new cljs.core.Keyword(\"source\",\"implicitly-joinable\",\"source/implicitly-joinable\",-729101197))], null);\n} else {\nreturn null;\n}\n})(),(function (){var temp__5808__auto__ = new cljs.core.Keyword(null,\"selected?\",\"selected?\",-742502788).cljs$core$IFn$_invoke$arity$1(x_metadata);\nif((temp__5808__auto__ == null)){\nreturn null;\n} else {\nvar selected = temp__5808__auto__;\nreturn new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"selected\",\"selected\",574897764),selected], null);\n}\n})(),cljs.core.select_keys(x_metadata,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"breakout-position\",\"breakout-position\",-760153191),new cljs.core.Keyword(null,\"order-by-position\",\"order-by-position\",-1307229997)], null))], 0));\n});\nmetabase.lib.metadata.calculation.display_info_method.cljs$core$IMultiFn$_add_method$arity$3(null,new cljs.core.Keyword(null,\"default\",\"default\",-1987822328),(function (query,stage_number,x){\nreturn metabase.lib.metadata.calculation.default_display_info(query,stage_number,x);\n}));\nmetabase.lib.metadata.calculation.display_info_method.cljs$core$IMultiFn$_add_method$arity$3(null,new cljs.core.Keyword(\"metadata\",\"table\",\"metadata/table\",-882499405),(function (query,stage_number,table){\nreturn cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([metabase.lib.metadata.calculation.default_display_info(query,stage_number,table),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"is-source-table\",\"is-source-table\",1559075056),cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(metabase.lib.util.source_table_id(query),new cljs.core.Keyword(null,\"id\",\"id\",-1388402092).cljs$core$IFn$_invoke$arity$1(table))], null)], 0));\n}));\n/**\n * Schema for the column metadata that should be returned by [[metadata]].\n */\nmetabase.lib.metadata.calculation.ColumnMetadataWithSource = new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"merge\",\"merge\",-1804319409),metabase.lib.metadata.ColumnMetadata,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"map\",\"map\",1371690461),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"lib\",\"source\",\"lib/source\",-434086550),new cljs.core.Keyword(\"metabase.lib.metadata\",\"column-source\",\"metabase.lib.metadata/column-source\",-458963769)], null)], null)], null);\n/**\n * Schema for column metadata that should be returned by [[visible-columns]]. This is mostly used\n *   to power metadata calculation for stages (see [[metabase.lib.stage]].\n */\nmetabase.lib.metadata.calculation.ColumnsWithUniqueAliases = new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"and\",\"and\",-971899817),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"sequential\",\"sequential\",-1082983960),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"merge\",\"merge\",-1804319409),metabase.lib.metadata.calculation.ColumnMetadataWithSource,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"map\",\"map\",1371690461),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"lib\",\"source-column-alias\",\"lib/source-column-alias\",1494821386),new cljs.core.Keyword(\"metabase.lib.schema.common\",\"non-blank-string\",\"metabase.lib.schema.common/non-blank-string\",-2032366619)], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"lib\",\"desired-column-alias\",\"lib/desired-column-alias\",-1998967402),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"string\",\"string\",-1989541586),new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"min\",\"min\",444991522),(1),new cljs.core.Keyword(null,\"max\",\"max\",61366548),(60)], null)], null)], null)], null)], null)], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"fn\",\"fn\",-1175266204),new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(\"error\",\"message\",\"error/message\",-502809098),\"Column :lib/desired-column-alias values must be distinct, regardless of case, for each stage!\",new cljs.core.Keyword(\"error\",\"fn\",\"error/fn\",-1263293860),(function (p__48663,_){\nvar map__48664 = p__48663;\nvar map__48664__$1 = cljs.core.__destructure_map(map__48664);\nvar value = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__48664__$1,new cljs.core.Keyword(null,\"value\",\"value\",305978217));\nreturn [\"Column :lib/desired-column-alias values must be distinct, got: \",cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(new cljs.core.Keyword(\"lib\",\"desired-column-alias\",\"lib/desired-column-alias\",-1998967402),value)], 0))].join('');\n})], null),(function (columns){\nvar or__5045__auto__ = cljs.core.empty_QMARK_(columns);\nif(or__5045__auto__){\nreturn or__5045__auto__;\n} else {\nreturn cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.distinct_QMARK_,cljs.core.map.cljs$core$IFn$_invoke$arity$2(cljs.core.comp.cljs$core$IFn$_invoke$arity$2(metabase.util.lower_case_en,new cljs.core.Keyword(\"lib\",\"desired-column-alias\",\"lib/desired-column-alias\",-1998967402)),columns));\n}\n})], null)], null);\nmetabase.lib.metadata.calculation.UniqueNameFn = new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"=>\",\"=>\",1841166128),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"cat\",\"cat\",-1457810207),new cljs.core.Keyword(\"metabase.lib.schema.common\",\"non-blank-string\",\"metabase.lib.schema.common/non-blank-string\",-2032366619)], null),new cljs.core.Keyword(\"metabase.lib.schema.common\",\"non-blank-string\",\"metabase.lib.schema.common/non-blank-string\",-2032366619)], null);\n/**\n * Schema for options passed to [[returned-columns]] and [[returned-columns-method]].\n */\nmetabase.lib.metadata.calculation.ReturnedColumnsOptions = new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"map\",\"map\",1371690461),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"unique-name-fn\",\"unique-name-fn\",-755402870),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"optional\",\"optional\",2053951509),true], null),metabase.lib.metadata.calculation.UniqueNameFn], null)], null);\n/**\n * Inputs: []\n *   Return: ReturnedColumnsOptions\n */\nmetabase.lib.metadata.calculation.default_returned_columns_options = (function metabase$lib$metadata$calculation$default_returned_columns_options(){\nreturn new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"unique-name-fn\",\"unique-name-fn\",-755402870),metabase.lib.util.unique_name_generator()], null);\n});\n/**\n * Impl for [[returned-columns]].\n */\nmetabase.lib.metadata.calculation.returned_columns_method = (function (){var method_table__5642__auto__ = cljs.core.atom.cljs$core$IFn$_invoke$arity$1(cljs.core.PersistentArrayMap.EMPTY);\nvar prefer_table__5643__auto__ = cljs.core.atom.cljs$core$IFn$_invoke$arity$1(cljs.core.PersistentArrayMap.EMPTY);\nvar method_cache__5644__auto__ = cljs.core.atom.cljs$core$IFn$_invoke$arity$1(cljs.core.PersistentArrayMap.EMPTY);\nvar cached_hierarchy__5645__auto__ = cljs.core.atom.cljs$core$IFn$_invoke$arity$1(cljs.core.PersistentArrayMap.EMPTY);\nvar hierarchy__5646__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$3(new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"hierarchy\",\"hierarchy\",-1053470341),metabase.lib.hierarchy.hierarchy], null),new cljs.core.Keyword(null,\"hierarchy\",\"hierarchy\",-1053470341),(function (){var fexpr__48666 = cljs.core.get_global_hierarchy;\nreturn (fexpr__48666.cljs$core$IFn$_invoke$arity$0 ? fexpr__48666.cljs$core$IFn$_invoke$arity$0() : fexpr__48666.call(null));\n})());\nreturn (new cljs.core.MultiFn(cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(\"metabase.lib.metadata.calculation\",\"returned-columns-method\"),(function (_query,_stage_number,x,_options){\nreturn metabase.lib.dispatch.dispatch_value(x);\n}),new cljs.core.Keyword(null,\"default\",\"default\",-1987822328),hierarchy__5646__auto__,method_table__5642__auto__,prefer_table__5643__auto__,method_cache__5644__auto__,cached_hierarchy__5645__auto__));\n})();\nmetabase.lib.metadata.calculation.returned_columns_method.cljs$core$IMultiFn$_add_method$arity$3(null,new cljs.core.Keyword(\"dispatch-type\",\"nil\",\"dispatch-type/nil\",-2067723388),(function (_query,_stage_number,_x,_options){\nreturn cljs.core.PersistentVector.EMPTY;\n}));\n/**\n * Inputs: ([query]\n *         [query x]\n *         [query stage-number x]\n *         [query :- :metabase.lib.schema/query stage-number :- :int x options :- [:maybe ReturnedColumnsOptions]])\n *   Return: [:maybe ColumnsWithUniqueAliases]\n *        \n * \n *   Return a sequence of metadata maps for all the columns expected to be 'returned' at a query, stage of the query, or\n *   join, and include the `:lib/source` of where they came from. This should only include columns that will be present\n *   in the results; DOES NOT include 'expected' columns that are not 'exported' to subsequent stages.\n * \n *   See [[ReturnedColumnsOptions]] for allowed options and [[default-returned-columns-options]] for default values.\n */\nmetabase.lib.metadata.calculation.returned_columns = (function metabase$lib$metadata$calculation$returned_columns(var_args){\nvar G__48669 = arguments.length;\nswitch (G__48669) {\ncase 1:\nreturn metabase.lib.metadata.calculation.returned_columns.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\n\nbreak;\ncase 2:\nreturn metabase.lib.metadata.calculation.returned_columns.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ncase 3:\nreturn metabase.lib.metadata.calculation.returned_columns.cljs$core$IFn$_invoke$arity$3((arguments[(0)]),(arguments[(1)]),(arguments[(2)]));\n\nbreak;\ncase 4:\nreturn metabase.lib.metadata.calculation.returned_columns.cljs$core$IFn$_invoke$arity$4((arguments[(0)]),(arguments[(1)]),(arguments[(2)]),(arguments[(3)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\n(metabase.lib.metadata.calculation.returned_columns.cljs$core$IFn$_invoke$arity$1 = (function (query){\n\nreturn metabase.lib.metadata.calculation.returned_columns.cljs$core$IFn$_invoke$arity$2(query,metabase.lib.util.query_stage(query,(-1)));\n}));\n\n(metabase.lib.metadata.calculation.returned_columns.cljs$core$IFn$_invoke$arity$2 = (function (query,x){\n\nreturn metabase.lib.metadata.calculation.returned_columns.cljs$core$IFn$_invoke$arity$3(query,(-1),x);\n}));\n\n(metabase.lib.metadata.calculation.returned_columns.cljs$core$IFn$_invoke$arity$3 = (function (query,stage_number,x){\n\nreturn metabase.lib.metadata.calculation.returned_columns.cljs$core$IFn$_invoke$arity$4(query,stage_number,x,null);\n}));\n\n(metabase.lib.metadata.calculation.returned_columns.cljs$core$IFn$_invoke$arity$4 = (function (query,stage_number,x,options){\n\nvar options__$1 = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([metabase.lib.metadata.calculation.default_returned_columns_options(),options], 0));\nreturn metabase.lib.metadata.calculation.returned_columns_method.cljs$core$IFn$_invoke$arity$4(query,stage_number,x,options__$1);\n}));\n\n(metabase.lib.metadata.calculation.returned_columns.cljs$lang$maxFixedArity = 4);\n\n/**\n * Schema for options passed to [[visible-columns]] and [[visible-columns-method]].\n */\nmetabase.lib.metadata.calculation.VisibleColumnsOptions = new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"merge\",\"merge\",-1804319409),metabase.lib.metadata.calculation.ReturnedColumnsOptions,new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"map\",\"map\",1371690461),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"include-joined?\",\"include-joined?\",-410632824),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"optional\",\"optional\",2053951509),true], null),new cljs.core.Keyword(null,\"boolean\",\"boolean\",-1919418404)], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"include-expressions?\",\"include-expressions?\",-1817639288),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"optional\",\"optional\",2053951509),true], null),new cljs.core.Keyword(null,\"boolean\",\"boolean\",-1919418404)], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"include-implicitly-joinable?\",\"include-implicitly-joinable?\",-772701866),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"optional\",\"optional\",2053951509),true], null),new cljs.core.Keyword(null,\"boolean\",\"boolean\",-1919418404)], null)], null)], null);\n/**\n * Inputs: []\n *   Return: VisibleColumnsOptions\n */\nmetabase.lib.metadata.calculation.default_visible_columns_options = (function metabase$lib$metadata$calculation$default_visible_columns_options(){\n\nreturn cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([metabase.lib.metadata.calculation.default_returned_columns_options(),new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null,\"include-joined?\",\"include-joined?\",-410632824),true,new cljs.core.Keyword(null,\"include-expressions?\",\"include-expressions?\",-1817639288),true,new cljs.core.Keyword(null,\"include-implicitly-joinable?\",\"include-implicitly-joinable?\",-772701866),true], null)], 0));\n});\n/**\n * Impl for [[visible-columns]].\n * \n *   This should mostly be similar to the implementation for [[metadata-method]], but needs to include\n *   `:lib/source-column-alias` and `:lib/desired-column-alias`. `:lib/source-column-alias` should probably be the same\n *   as `:name`; use the supplied `:unique-name-fn` from `options` with the signature `(f str) => str` to ensure\n *   `:lib/desired-column-alias` is unique.\n * \n *   Also, columns that aren't 'projected' should be returned as well -- in other words, ignore `:fields`,\n *   `:aggregations`, and `:breakouts`.\n */\nmetabase.lib.metadata.calculation.visible_columns_method = (function (){var method_table__5642__auto__ = cljs.core.atom.cljs$core$IFn$_invoke$arity$1(cljs.core.PersistentArrayMap.EMPTY);\nvar prefer_table__5643__auto__ = cljs.core.atom.cljs$core$IFn$_invoke$arity$1(cljs.core.PersistentArrayMap.EMPTY);\nvar method_cache__5644__auto__ = cljs.core.atom.cljs$core$IFn$_invoke$arity$1(cljs.core.PersistentArrayMap.EMPTY);\nvar cached_hierarchy__5645__auto__ = cljs.core.atom.cljs$core$IFn$_invoke$arity$1(cljs.core.PersistentArrayMap.EMPTY);\nvar hierarchy__5646__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$3(new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"hierarchy\",\"hierarchy\",-1053470341),metabase.lib.hierarchy.hierarchy], null),new cljs.core.Keyword(null,\"hierarchy\",\"hierarchy\",-1053470341),(function (){var fexpr__48671 = cljs.core.get_global_hierarchy;\nreturn (fexpr__48671.cljs$core$IFn$_invoke$arity$0 ? fexpr__48671.cljs$core$IFn$_invoke$arity$0() : fexpr__48671.call(null));\n})());\nreturn (new cljs.core.MultiFn(cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(\"metabase.lib.metadata.calculation\",\"visible-columns-method\"),(function (_query,_stage_number,x,_options){\nreturn metabase.lib.dispatch.dispatch_value(x);\n}),new cljs.core.Keyword(null,\"default\",\"default\",-1987822328),hierarchy__5646__auto__,method_table__5642__auto__,prefer_table__5643__auto__,method_cache__5644__auto__,cached_hierarchy__5645__auto__));\n})();\nmetabase.lib.metadata.calculation.visible_columns_method.cljs$core$IMultiFn$_add_method$arity$3(null,new cljs.core.Keyword(\"dispatch-type\",\"nil\",\"dispatch-type/nil\",-2067723388),(function (_query,_stage_number,_x,_options){\nreturn cljs.core.PersistentVector.EMPTY;\n}));\nmetabase.lib.metadata.calculation.visible_columns_method.cljs$core$IMultiFn$_add_method$arity$3(null,new cljs.core.Keyword(null,\"default\",\"default\",-1987822328),(function (query,stage_number,x,options){\nreturn metabase.lib.metadata.calculation.returned_columns_method.cljs$core$IFn$_invoke$arity$4(query,stage_number,x,options);\n}));\n/**\n * Inputs: ([query]\n *         [query x]\n *         [query stage-number x]\n *         [query :- :metabase.lib.schema/query stage-number :- :int x options :- [:maybe VisibleColumnsOptions]])\n *   Return: ColumnsWithUniqueAliases\n *        \n * \n *   Return a sequence of columns that should be visible *within* a given stage of something, e.g. a query stage or a\n *   join query. This includes not just the columns that get returned (ones present in [[metadata]], but other columns\n *   that are 'reachable' in this stage of the query. E.g. in a query like\n * \n *  SELECT id, name\n *  FROM table\n *  ORDER BY position\n * \n *   only `id` and `name` are 'returned' columns, but other columns such as `position` are visible in this stage as well\n *   and would thus be returned by this function.\n * \n *   Columns from joins, expressions, and implicitly joinable columns are included automatically by default;\n *   see [[VisibleColumnsOptions]] for the options for disabling these columns.\n */\nmetabase.lib.metadata.calculation.visible_columns = (function metabase$lib$metadata$calculation$visible_columns(var_args){\nvar G__48674 = arguments.length;\nswitch (G__48674) {\ncase 1:\nreturn metabase.lib.metadata.calculation.visible_columns.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\n\nbreak;\ncase 2:\nreturn metabase.lib.metadata.calculation.visible_columns.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ncase 3:\nreturn metabase.lib.metadata.calculation.visible_columns.cljs$core$IFn$_invoke$arity$3((arguments[(0)]),(arguments[(1)]),(arguments[(2)]));\n\nbreak;\ncase 4:\nreturn metabase.lib.metadata.calculation.visible_columns.cljs$core$IFn$_invoke$arity$4((arguments[(0)]),(arguments[(1)]),(arguments[(2)]),(arguments[(3)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\n(metabase.lib.metadata.calculation.visible_columns.cljs$core$IFn$_invoke$arity$1 = (function (query){\n\nreturn metabase.lib.metadata.calculation.visible_columns.cljs$core$IFn$_invoke$arity$2(query,metabase.lib.util.query_stage(query,(-1)));\n}));\n\n(metabase.lib.metadata.calculation.visible_columns.cljs$core$IFn$_invoke$arity$2 = (function (query,x){\n\nreturn metabase.lib.metadata.calculation.visible_columns.cljs$core$IFn$_invoke$arity$3(query,(-1),x);\n}));\n\n(metabase.lib.metadata.calculation.visible_columns.cljs$core$IFn$_invoke$arity$3 = (function (query,stage_number,x){\n\nreturn metabase.lib.metadata.calculation.visible_columns.cljs$core$IFn$_invoke$arity$4(query,stage_number,x,null);\n}));\n\n(metabase.lib.metadata.calculation.visible_columns.cljs$core$IFn$_invoke$arity$4 = (function (query,stage_number,x,options){\n\nvar options__$1 = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([metabase.lib.metadata.calculation.default_visible_columns_options(),options], 0));\nreturn metabase.lib.metadata.calculation.visible_columns_method.cljs$core$IFn$_invoke$arity$4(query,stage_number,x,options__$1);\n}));\n\n(metabase.lib.metadata.calculation.visible_columns.cljs$lang$maxFixedArity = 4);\n\n","~:ns-info",["^ ","~:rename-macros",null,"~:renames",["^ "],"~:meta",["^ ","~:file","metabase/lib/metadata/calculation.cljc","~:line",1,"~:column",5,"~:end-line",1,"~:end-column",38],"~:ns-aliases",["^ ","~$cljs.loader","~$shadow.loader","~$clojure.core","~$cljs.core","~$clojure.spec.gen.alpha","~$cljs.spec.gen.alpha","~$clojure.pprint","~$cljs.pprint","~$clojure.core.match","~$cljs.core.match"],"~:use-macros",null,"~:excludes",["~#set",[]],"~:name","~$metabase.lib.metadata.calculation","~:reader-aliases",["^ "],"~:op","~:ns","~:imports",null,"~:requires",["^ ","~$metabase.lib.schema","^P","~$mu","~$metabase.util.malli","~$metabase.lib.metadata","^S","~$log","~$metabase.util.log","~$i18n","~$metabase.shared.util.i18n","~$lib.schema.common","~$metabase.lib.schema.common","~$u","~$metabase.util","~$lib.metadata","^S","^?","^?","~$metabase.lib.util","^10","~$goog","^11","~$metabase.util.malli.registry","^12","~$lib.schema","^P","^Y","^Y","~$lib.options","~$metabase.lib.options","~$lib.schema.temporal-bucketing","~$metabase.lib.schema.temporal-bucketing","~$metabase.lib.schema.expression","^18","~$lib.hierarchy","~$metabase.lib.hierarchy","~$lib.schema.expresssion","^18","^Z","^Z","~$mr","^12","^W","^W","~$lib.util","^10","~$lib.dispatch","~$metabase.lib.dispatch","^R","^R","^U","^U","~$str","~$clojure.string","^1:","^1:","^15","^15","^1A","^1A","^1?","^1?","^17","^17"],"~:seen",["^H",["~:require"]],"~:uses",null,"~:require-macros",["^ ","^Q","^R","^T","^U","^V","^W","~$u","^Z","^?","^?","^12","^12","^18","^18","^1;","^18","^Z","^Z","^1<","^12","^W","^W","^R","^R","^U","^U"],"~:form",["~#list",["~$ns","^J",["^1G",["^1C",["^1A","~:as","^1@"],["^1?","^1I","^1>"],["^1:","^1I","^19"],["^S","^1I","^["],["^15","^1I","^14"],["^P","^1I","^13"],["^Y","^1I","^X"],["^18","^1I","^1;"],["^17","^1I","^16"],["^10","^1I","^1="],["^W","^1I","^V"],["^Z","^1I","~$u"],["^U","^1I","^T"],["^R","^1I","^Q"],["^12","^1I","^1<"]]]]],"~:flags",["^ ","^1C",["^H",[]]],"~:js-deps",["^ "],"~:deps",["^11","^?","^1A","^1?","^1:","^S","^15","^P","^Y","^18","^17","^10","^W","^Z","^U","^R","^12"]],"^M","^J","~:resource-id",["~:shadow.build.classpath/resource","metabase/lib/metadata/calculation.cljc"],"~:compiled-at",1692612528436,"^K",["^ ","^P","^P","^Q","^R","^S","^S","^T","^U","^V","^W","^X","^Y","~$u","^Z","^[","^S","^?","^?","^10","^10","^11","^11","^12","^12","^13","^P","^Y","^Y","^14","^15","^16","^17","^18","^18","^19","^1:","^1;","^18","^Z","^Z","^1<","^12","^W","^W","^1=","^10","^1>","^1?","^R","^R","^U","^U","^1@","^1A","^1:","^1:","^15","^15","^1A","^1A","^1?","^1?","^17","^17"],"~:resource-name","metabase/lib/metadata/calculation.cljc","~:warnings",[],"~:source","(ns metabase.lib.metadata.calculation\n  (:require\n   [clojure.string :as str]\n   [metabase.lib.dispatch :as lib.dispatch]\n   [metabase.lib.hierarchy :as lib.hierarchy]\n   [metabase.lib.metadata :as lib.metadata]\n   [metabase.lib.options :as lib.options]\n   [metabase.lib.schema :as lib.schema]\n   [metabase.lib.schema.common :as lib.schema.common]\n   [metabase.lib.schema.expression :as lib.schema.expresssion]\n   [metabase.lib.schema.temporal-bucketing\n    :as lib.schema.temporal-bucketing]\n   [metabase.lib.util :as lib.util]\n   [metabase.shared.util.i18n :as i18n]\n   [metabase.util :as u]\n   [metabase.util.log :as log]\n   [metabase.util.malli :as mu]\n   [metabase.util.malli.registry :as mr]))\n\n(def DisplayNameStyle\n  \"Schema for valid values of `display-name-style` as passed to [[display-name-method]].\n\n  * `:default`: normal style used for 99% of FE stuff. For example a column that comes from a joined table might return\n    \\\"Price\\\".\n\n  * `:long`: Slightly longer style that includes a little bit of extra context, used for stuff like query suggested\n    name generation. For a joined column, this might look like \\\"Venues â†’ Price\\\".\"\n  [:enum :default :long])\n\n(def ^:dynamic *display-name-style*\n  \"Display name style to use when not explicitly passed in to [[display-name]].\"\n  :default)\n\n(defmulti display-name-method\n  \"Calculate a nice human-friendly display name for something.\"\n  {:arglists '([query stage-number x display-name-style])}\n  (fn [_query _stage-number x _display-name-style]\n    (lib.dispatch/dispatch-value x))\n  :hierarchy lib.hierarchy/hierarchy)\n\n(defmulti column-name-method\n  \"Calculate a database-friendly name to use for something.\"\n  {:arglists '([query stage-number x])}\n  (fn [_query _stage-number x]\n    (lib.dispatch/dispatch-value x))\n  :hierarchy lib.hierarchy/hierarchy)\n\n(mu/defn ^:export display-name :- :string\n  \"Calculate a nice human-friendly display name for something. See [[DisplayNameStyle]] for a the difference between\n  different `style`s.\"\n  ([query]\n   (display-name query query))\n\n  ([query x]\n   (display-name query -1 x))\n\n  ([query stage-number x]\n   (display-name query stage-number x *display-name-style*))\n\n  ([query        :- ::lib.schema/query\n    stage-number :- :int\n    x\n    style        :- DisplayNameStyle]\n   (or\n    ;; if this is an MBQL clause with `:display-name` in the options map, then use that rather than calculating a name.\n    (:display-name (lib.options/options x))\n    (try\n      (display-name-method query stage-number x style)\n      (catch #?(:clj Throwable :cljs js/Error) e\n        (throw (ex-info (i18n/tru \"Error calculating display name for {0}: {1}\" (pr-str x) (ex-message e))\n                        {:query query, :x x}\n                        e)))))))\n\n(mu/defn column-name :- ::lib.schema.common/non-blank-string\n  \"Calculate a database-friendly name to use for an expression.\"\n  ([query x]\n   (column-name query -1 x))\n\n  ([query        :- ::lib.schema/query\n    stage-number :- :int\n    x]\n   (or\n    ;; if this is an MBQL clause with `:name` in the options map, then use that rather than calculating a name.\n    (:name (lib.options/options x))\n    (try\n      (column-name-method query stage-number x)\n      (catch #?(:clj Throwable :cljs js/Error) e\n        (throw (ex-info (i18n/tru \"Error calculating column name for {0}: {1}\" (pr-str x) (ex-message e))\n                        {:x            x\n                         :query        query\n                         :stage-number stage-number}\n                        e)))))))\n\n(defmethod display-name-method :default\n  [_query _stage-number x _stage]\n  ;; hopefully this is dev-facing only, so not i18n'ed.\n  (log/warnf \"Don't know how to calculate display name for %s. Add an impl for %s for %s\"\n             (pr-str x)\n             `display-name-method\n             (lib.dispatch/dispatch-value x))\n  (if (and (vector? x)\n           (keyword? (first x)))\n    ;; MBQL clause: just use the name of the clause.\n    (name (first x))\n    ;; anything else: use `pr-str` representation.\n    (pr-str x)))\n\n;;; TODO -- this logic is wack, we should probably be snake casing stuff and display names like\n;;;\n;;; \"Sum of Products â†’ Price\"\n;;;\n;;; result in totally wacko column names like \"sum_products_%E2%86%92_price\", let's try to generate things that are\n;;; actually going to be allowed here.\n(defn- slugify [s]\n  (-> s\n      (str/replace #\"[\\(\\)]\" \"\")\n      (u/slugify {:unicode? true})))\n\n;;; default impl just takes the display name and slugifies it.\n(defmethod column-name-method :default\n  [query stage-number x]\n  (slugify (display-name query stage-number x)))\n\n(defmulti describe-top-level-key-method\n  \"Implementation for [[describe-top-level-key]]. Describe part of a stage of a query, e.g. the `:filters` part or the\n  `:aggregation` part. Return `nil` if there is nothing to describe.\n\n  Implementations that call [[display-name]] should specify the `:long` display name style.\"\n  {:arglists '([query stage-number top-level-key])}\n  (fn [_query _stage-number top-level-key]\n    top-level-key)\n  :hierarchy lib.hierarchy/hierarchy)\n\n(def ^:private TopLevelKey\n  \"In the interest of making this easy to use in JS-land we'll accept either strings or keywords.\"\n  [:enum :aggregation :breakout :filters :limit :order-by :source-table :source-card])\n\n(mu/defn describe-top-level-key :- [:maybe ::lib.schema.common/non-blank-string]\n  \"'top-level' here means the top level of an individual stage. Generate a human-friendly string describing a specific\n  part of an MBQL stage, or `nil` if that part doesn't exist.\"\n  ([query top-level-key]\n   (describe-top-level-key query -1 top-level-key))\n  ([query         :- ::lib.schema/query\n    stage-number  :- :int\n    top-level-key :- TopLevelKey]\n   (describe-top-level-key-method query stage-number (keyword top-level-key))))\n\n(defmulti type-of-method\n  \"Calculate the effective type of something. This differs from [[metabase.lib.schema.expression/type-of]] in that it is\n  called with a query/MetadataProvider and a stage number, allowing us to fully resolve information and return\n  complete, unambigous type information. Default implementation calls [[metabase.lib.schema.expression/type-of]].\"\n  {:arglists '([query stage-number expr])}\n  (fn [_query _stage-number expr]\n    (lib.dispatch/dispatch-value expr))\n  :hierarchy lib.hierarchy/hierarchy)\n\n(mu/defn type-of :- ::lib.schema.common/base-type\n  \"Get the effective type of an MBQL expression.\"\n  ([query x]\n   (type-of query -1 x))\n  ([query        :- ::lib.schema/query\n    stage-number :- :int\n    x]\n   ;; this logic happens here so we don't need to code up every single individual method to handle these special\n   ;; cases.\n   (let [{:keys [temporal-unit], :as options} (lib.options/options x)]\n     (or\n      ;; If the options map includes `:effective-type` we can assume you know what you are doing and that it is\n      ;; correct and just return it directly.\n      (:effective-type options)\n      ;; If `:temporal-unit` is specified (currently only supported by `:field` clauses), we should return\n      ;; `:type/Integer` if its an extraction operation, e.g. `:month-of-year` always returns an integer; otherwise we\n      ;; can return `:base-type`.\n      (when (and temporal-unit\n                 (contains? lib.schema.temporal-bucketing/datetime-extraction-units temporal-unit))\n        :type/Integer)\n      ;; otherwise if `:base-type` is specified, we can return that.\n      (:base-type options)\n      ;; if none of the special cases are true, fall back to [[type-of-method]].\n      (let [calculated-type (type-of-method query stage-number x)]\n        ;; if calculated type is not a true type but a placeholder like `:metabase.lib.schema.expression/type.unknown`\n        ;; or a union of types then fall back to `:type/*`, an actual type.\n        (if (isa? calculated-type :type/*)\n          calculated-type\n          :type/*))))))\n\n(defmethod type-of-method :default\n  [_query _stage-number expr]\n  (lib.schema.expresssion/type-of expr))\n\n;;; for MBQL clauses whose type is the same as the type of the first arg. Also used\n;;; for [[metabase.lib.schema.expression/type-of]].\n(defmethod type-of-method :lib.type-of/type-is-type-of-first-arg\n  [query stage-number [_tag _opts expr]]\n  (type-of query stage-number expr))\n\n(defmethod type-of-method :lib.type-of/type-is-temporal-type-of-first-arg\n  [query stage-number [_tag _opts expr :as clause]]\n  (if (string? expr)\n    ;; If a string, get the type filtered by this expression (eg. `:datetime-add`).\n    (lib.schema.expresssion/type-of clause)\n    ;; Otherwise, just get the type of this first arg.\n    (type-of query stage-number expr)))\n\n(defmulti metadata-method\n  \"Impl for [[metadata]]. Implementations that call [[display-name]] should use the `:default` display name style.\"\n  {:arglists '([query stage-number x])}\n  (fn [_query _stage-number x]\n    (lib.dispatch/dispatch-value x))\n  :hierarchy lib.hierarchy/hierarchy)\n\n(defmethod metadata-method :default\n  [query stage-number x]\n  (try\n    {:lib/type     :metadata/column\n     ;; TODO -- effective-type\n     :base-type    (type-of query stage-number x)\n     :name         (column-name query stage-number x)\n     :display-name (display-name query stage-number x)}\n    ;; if you see this error it's usually because you're calling [[metadata]] on something that you shouldn't be, for\n    ;; example a query\n    (catch #?(:clj Throwable :cljs js/Error) e\n      (throw (ex-info (i18n/tru \"Error calculating metadata for {0}: {1}\"\n                                (pr-str (lib.dispatch/dispatch-value x))\n                                (ex-message e))\n                      {:query query, :stage-number stage-number, :x x}\n                      e)))))\n\n(mu/defn metadata :- [:map [:lib/type [:and\n                                       :keyword\n                                       [:fn\n                                        {:error/message \":lib/type should be a :metadata/ keyword\"}\n                                        #(= (namespace %) \"metadata\")]]]]\n  \"Calculate an appropriate `:metadata/*` object for something. What this looks like depends on what we're calculating\n  metadata for. If it's a reference or expression of some sort, this should return a single `:metadata/column`\n  map (i.e., something satisfying the [[metabase.lib.metadata/ColumnMetadata]] schema.\"\n  ([query]\n   (metadata query -1 query))\n  ([query x]\n   (metadata query -1 x))\n  ([query        :- ::lib.schema/query\n    stage-number :- :int\n    x]\n   (metadata-method query stage-number x)))\n\n(mu/defn describe-query :- ::lib.schema.common/non-blank-string\n  \"Convenience for calling [[display-name]] on a query to describe the results of its final stage.\"\n  [query]\n  (display-name query query))\n\n(mu/defn suggested-name :- [:maybe ::lib.schema.common/non-blank-string]\n  \"Name you might want to use for a query when saving an previously-unsaved query. This is the same\n  as [[describe-query]] except for native queries, where we don't describe anything.\"\n  [query]\n  (when-not (= (:lib/type (lib.util/query-stage query -1)) :mbql.stage/native)\n    (try\n      (describe-query query)\n      (catch #?(:clj Throwable :cljs js/Error) e\n        (log/error e (i18n/tru \"Error calculating display name for query: {0}\" (ex-message e)))\n        nil))))\n\n(defmulti display-info-method\n  \"Implementation for [[display-info]]. Implementations that call [[display-name]] should use the `:default` display\n  name style.\"\n  {:arglists '([query stage-number x])}\n  (fn [_query _stage-number x]\n    (lib.dispatch/dispatch-value x))\n  :hierarchy lib.hierarchy/hierarchy)\n\n(mr/register! ::display-info\n  [:map\n   [:display-name :string]\n   [:long-display-name {:optional true} :string]\n   ;; for things that have a Table, e.g. a Field\n   [:table {:optional true} [:maybe [:ref ::display-info]]]\n   ;; these are derived from the `:lib/source`/`:metabase.lib.metadata/column-source`, but instead of using that value\n   ;; directly we're returning a different property so the FE doesn't break if we change those keys in the future,\n   ;; e.g. if we consolidate or split some of those keys. This is all the FE really needs to know.\n   ;;\n   ;; if this is a Column, does it come from a previous stage?\n   [:is-from-previous-stage {:optional true} [:maybe :boolean]]\n   ;; if this is a Column, does it come from a join in this stage?\n   [:is-from-join {:optional true} [:maybe :boolean]]\n   ;; if this is a Column, is it 'calculated', i.e. does it come from an expression in this stage?\n   [:is-calculated {:optional true} [:maybe :boolean]]\n   ;; if this is a Column, is it an implicitly joinable one? I.e. is it from a different table that we have not\n   ;; already joined, but could implicitly join against?\n   [:is-implicitly-joinable {:optional true} [:maybe :boolean]]\n   ;; For the `:table` field of a Column, is this the source table, or a joined table?\n   [:is-source-table {:optional true} [:maybe :boolean]]\n   ;; does this column occur in the breakout clause?\n   [:is-breakout-column {:optional true} [:maybe :boolean]]\n   ;; does this column occur in the order-by clause?\n   [:is-order-by-column {:optional true} [:maybe :boolean]]\n   ;; for joins\n   [:name {:optional true} :string]\n   ;; for aggregation operators\n   [:column-name {:optional true} :string]\n   [:description {:optional true} :string]\n   [:short-name {:optional true} :string]\n   [:requires-column {:optional true} :boolean]\n   [:selected {:optional true} :boolean]\n   ;; for binning and bucketing\n   [:default {:optional true} :boolean]\n   ;; for order by\n   [:direction {:optional true} [:enum :asc :desc]]])\n\n(mu/defn display-info :- ::display-info\n  \"Given some sort of Cljs object, return a map with the info you'd need to implement UI for it. This is mostly meant to\n  power the Frontend JavaScript UI; in JS, results will be converted to plain JavaScript objects, so avoid returning\n  things that should remain opaque.\"\n  ([query x]\n   (display-info query -1 x))\n\n  ([query        :- ::lib.schema/query\n    stage-number :- :int\n    x]\n   (try\n     (display-info-method query stage-number x)\n     (catch #?(:clj Throwable :cljs js/Error) e\n       (throw (ex-info (i18n/tru \"Error calculating display info for {0}: {1}\"\n                                 (lib.dispatch/dispatch-value x)\n                                 (ex-message e))\n                       {:query query, :stage-number stage-number, :x x}\n                       e))))))\n\n(defn default-display-info\n  \"Default implementation of [[display-info-method]], available in case you want to use this in a different\n  implementation and add additional information to it.\"\n  [query stage-number x]\n  (let [x-metadata (metadata query stage-number x)]\n    (merge\n     ;; TODO -- not 100% convinced the FE should actually have access to `:name`, can't it use `:display-name`\n     ;; everywhere? Determine whether or not this is the case.\n     (select-keys x-metadata [:name :display-name :semantic-type])\n     (when-let [long-display-name (display-name query stage-number x :long)]\n       {:long-display-name long-display-name})\n     ;; don't return `:base-type`, FE should just use `:effective-type` everywhere and not even need to know\n     ;; `:base-type` exists.\n     (when-let [effective-type ((some-fn :effective-type :base-type) x-metadata)]\n       {:effective-type effective-type})\n     (when-let [table-id (:table-id x-metadata)]\n       {:table (display-info\n                query\n                stage-number\n                ;; TODO: only ColumnMetadatas should possibly have legacy `card__<id>` `:table-id`s... we should\n                ;; probably move this special casing into [[metabase.lib.field]] instead of having it be part of the\n                ;; `:default` method.\n                (cond\n                  (integer? table-id) (lib.metadata/table query table-id)\n                  (string? table-id)  (lib.metadata/card query (lib.util/legacy-string-table-id->card-id table-id))))})\n     (when-let [source (:lib/source x-metadata)]\n       {:is-from-previous-stage (= source :source/previous-stage)\n        :is-from-join           (= source :source/joins)\n        :is-calculated          (= source :source/expressions)\n        :is-implicitly-joinable (= source :source/implicitly-joinable)})\n     (when-some [selected (:selected? x-metadata)]\n       {:selected selected})\n     (select-keys x-metadata [:breakout-position :order-by-position]))))\n\n(defmethod display-info-method :default\n  [query stage-number x]\n  (default-display-info query stage-number x))\n\n(defmethod display-info-method :metadata/table\n  [query stage-number table]\n  (merge (default-display-info query stage-number table)\n         {:is-source-table (= (lib.util/source-table-id query) (:id table))}))\n\n(def ColumnMetadataWithSource\n  \"Schema for the column metadata that should be returned by [[metadata]].\"\n  [:merge\n   lib.metadata/ColumnMetadata\n   [:map\n    [:lib/source ::lib.metadata/column-source]]])\n\n(def ColumnsWithUniqueAliases\n  \"Schema for column metadata that should be returned by [[visible-columns]]. This is mostly used\n  to power metadata calculation for stages (see [[metabase.lib.stage]].\"\n  [:and\n   [:sequential\n    [:merge\n     ColumnMetadataWithSource\n     [:map\n      [:lib/source-column-alias  ::lib.schema.common/non-blank-string]\n      [:lib/desired-column-alias [:string {:min 1, :max 60}]]]]]\n   [:fn\n    ;; should be dev-facing only, so don't need to i18n\n    {:error/message \"Column :lib/desired-column-alias values must be distinct, regardless of case, for each stage!\"\n     :error/fn      (fn [{:keys [value]} _]\n                      (str \"Column :lib/desired-column-alias values must be distinct, got: \"\n                           (pr-str (mapv :lib/desired-column-alias value))))}\n    (fn [columns]\n      (or\n       (empty? columns)\n       (apply distinct? (map (comp u/lower-case-en :lib/desired-column-alias) columns))))]])\n\n(def ^:private UniqueNameFn\n  [:=>\n   [:cat ::lib.schema.common/non-blank-string]\n   ::lib.schema.common/non-blank-string])\n\n(def ReturnedColumnsOptions\n  \"Schema for options passed to [[returned-columns]] and [[returned-columns-method]].\"\n  [:map\n   ;; has the signature (f str) => str\n   [:unique-name-fn {:optional true} UniqueNameFn]])\n\n(mu/defn ^:private default-returned-columns-options :- ReturnedColumnsOptions\n  []\n  {:unique-name-fn (lib.util/unique-name-generator)})\n\n(defmulti returned-columns-method\n  \"Impl for [[returned-columns]].\"\n  {:arglists '([query stage-number x options])}\n  (fn [_query _stage-number x _options]\n    (lib.dispatch/dispatch-value x))\n  :hierarchy lib.hierarchy/hierarchy)\n\n(defmethod returned-columns-method :dispatch-type/nil\n  [_query _stage-number _x _options]\n  [])\n\n(mu/defn returned-columns :- [:maybe ColumnsWithUniqueAliases]\n  \"Return a sequence of metadata maps for all the columns expected to be 'returned' at a query, stage of the query, or\n  join, and include the `:lib/source` of where they came from. This should only include columns that will be present\n  in the results; DOES NOT include 'expected' columns that are not 'exported' to subsequent stages.\n\n  See [[ReturnedColumnsOptions]] for allowed options and [[default-returned-columns-options]] for default values.\"\n  ([query]\n   (returned-columns query (lib.util/query-stage query -1)))\n\n  ([query x]\n   (returned-columns query -1 x))\n\n  ([query stage-number x]\n   (returned-columns query stage-number x nil))\n\n  ([query          :- ::lib.schema/query\n    stage-number   :- :int\n    x\n    options        :- [:maybe ReturnedColumnsOptions]]\n   (let [options (merge (default-returned-columns-options) options)]\n     (returned-columns-method query stage-number x options))))\n\n(def VisibleColumnsOptions\n  \"Schema for options passed to [[visible-columns]] and [[visible-columns-method]].\"\n  [:merge\n   ReturnedColumnsOptions\n   [:map\n    ;; these all default to true\n    [:include-joined?              {:optional true} :boolean]\n    [:include-expressions?         {:optional true} :boolean]\n    [:include-implicitly-joinable? {:optional true} :boolean]]])\n\n(mu/defn ^:private default-visible-columns-options :- VisibleColumnsOptions\n  []\n  (merge\n   (default-returned-columns-options)\n   {:include-joined?              true\n    :include-expressions?         true\n    :include-implicitly-joinable? true}))\n\n(defmulti visible-columns-method\n  \"Impl for [[visible-columns]].\n\n  This should mostly be similar to the implementation for [[metadata-method]], but needs to include\n  `:lib/source-column-alias` and `:lib/desired-column-alias`. `:lib/source-column-alias` should probably be the same\n  as `:name`; use the supplied `:unique-name-fn` from `options` with the signature `(f str) => str` to ensure\n  `:lib/desired-column-alias` is unique.\n\n  Also, columns that aren't 'projected' should be returned as well -- in other words, ignore `:fields`,\n  `:aggregations`, and `:breakouts`.\"\n  {:arglists '([query stage-number x options])}\n  (fn [_query _stage-number x _options]\n    (lib.dispatch/dispatch-value x))\n  :hierarchy lib.hierarchy/hierarchy)\n\n(defmethod visible-columns-method :dispatch-type/nil\n  [_query _stage-number _x _options]\n  [])\n\n;;; default impl is just the impl for [[returned-columns-method]]\n(defmethod visible-columns-method :default\n  [query stage-number x options]\n  (returned-columns-method query stage-number x options))\n\n(mu/defn visible-columns :- ColumnsWithUniqueAliases\n  \"Return a sequence of columns that should be visible *within* a given stage of something, e.g. a query stage or a\n  join query. This includes not just the columns that get returned (ones present in [[metadata]], but other columns\n  that are 'reachable' in this stage of the query. E.g. in a query like\n\n    SELECT id, name\n    FROM table\n    ORDER BY position\n\n  only `id` and `name` are 'returned' columns, but other columns such as `position` are visible in this stage as well\n  and would thus be returned by this function.\n\n  Columns from joins, expressions, and implicitly joinable columns are included automatically by default;\n  see [[VisibleColumnsOptions]] for the options for disabling these columns.\"\n  ([query]\n   (visible-columns query (lib.util/query-stage query -1)))\n\n  ([query x]\n   (visible-columns query -1 x))\n\n  ([query stage-number x]\n   (visible-columns query stage-number x nil))\n\n  ([query          :- ::lib.schema/query\n    stage-number   :- :int\n    x\n    options        :- [:maybe VisibleColumnsOptions]]\n   (let [options (merge (default-visible-columns-options) options)]\n     (visible-columns-method query stage-number x options))))\n","~:reader-features",["^H",["~:cljs-release","~:cljs"]],"~:cljc",true,"~:source-map-compact",["^ ","mappings",";AAmBA;;;;;;;;;qDAAA,mFAAA,qDAAA,4DAAA,zPAAKA;AAUL;;;mEAAA,nEAAeC;AAIf;;;wDAAA,iBAAAC,6BAAA,AAAAC,6CAAA,nJAAUS;IAAVR,6BAAA,AAAAD,6CAAA;IAAAE,6BAAA,AAAAF,6CAAA;IAAAG,iCAAA,AAAAH,6CAAA;IAAAI,0BAAA,AAAAC,4CAAA,2CAAA,yGAAA,gEAAA,iBAAAC,eAAA,zIAKaS;AALb,AAAA,QAAAT,6CAAAA,+CAAAA;;AAAA,AAAA,YAAAC,kBAAA,AAAAC,+CAAA,oCAAA,uBAGE,WAAKE,OAAOC,cAAcC,EAAEC;AAA5B,AACE,OAACC,qCAA4BF;GAJjC,4DAAAR,wBAAAL,2BAAAE,2BAAAC,2BAAAC;;AAOA;;;uDAAA,iBAAAJ,6BAAA,AAAAC,6CAAA,lJAAUiB;IAAVhB,6BAAA,AAAAD,6CAAA;IAAAE,6BAAA,AAAAF,6CAAA;IAAAG,iCAAA,AAAAH,6CAAA;IAAAI,0BAAA,AAAAC,4CAAA,2CAAA,yGAAA,gEAAA,iBAAAW,eAAA,zIAKaD;AALb,AAAA,QAAAC,6CAAAA,+CAAAA;;AAAA,AAAA,YAAAT,kBAAA,AAAAC,+CAAA,oCAAA,sBAGE,WAAKE,OAAOC,cAAcC;AAA1B,AACE,OAACE,qCAA4BF;GAJjC,4DAAAR,wBAAAL,2BAAAE,2BAAAC,2BAAAC;;AAOA,AAAA;;;;;;;;;;;iDAAA,yDAAAe,1GAAkBE;AAAlB,AAAA,IAAAD,WAAA,AAAA;AAAA,AAAA,QAAAA;KAAA;AAAA,OAAAC,6EAAA,CAAA,UAAA;;;KAAA;AAAA,OAAAA,6EAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;KAAA;AAAA,OAAAA,6EAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;KAAA;AAAA,OAAAA,6EAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;;AAAA,MAAA,KAAAC,MAAA,CAAA,8DAAA,AAAA;;;;;;AAAA,CAAA,+EAAA,/EAAkBD,0FAGdE;AAHJ,AAAA;AAIG,OAACC,6EAAaD,MAAMA;;;AAJvB,CAAA,+EAAA,/EAAkBF,0FAMdE,MAAMV;AANV,AAAA;AAOG,0FAAA,nFAACW,6EAAaD,WAASV;;;AAP1B,CAAA,+EAAA,/EAAkBQ,0FASdE,MAAME,aAAaZ;AATvB,AAAA;AAUG,OAACW,6EAAaD,MAAME,aAAaZ,EAAEd;;;AAVtC,CAAA,+EAAA,/EAAkBsB,0FAYdE,MACAE,aACAZ,EACAa;AAfJ,AAAA;AAgBG,IAAAC,mBAEC,AAAA,kGAAe,AAACC,6BAAoBf;AAFrC,AAAA,oBAAAc;AAAAA;;AAGC,IAAA,AACE,OAACjB,oFAAoBa,MAAME,aAAaZ,EAAEa;gBAD5C,GAAA,CAAAG,kBAEiCP;AAFjC,QAAAO,JAE2CC;AAF3C,AAGI,MAAO,qWAAA,2CAAA,8DAAA,9cAACC,gDAAQ,AAAAC,uEAAA,gGAAwD,AAACC,wGAAOpB,QAAG,AAACqB,qBAAWJ,4GACvEP,qDAAUV,UAClBiB;;AALpB,AAAA,MAAAD;;;;;;AAnBJ,CAAA,yEAAA,zEAAkBR;;AAAlB,AA0BA,AAAA;;;;;;;;gDAAA,wDAAAF,xGAASiB;AAAT,AAAA,IAAAD,WAAA,AAAA;AAAA,AAAA,QAAAA;KAAA;AAAA,OAAAC,4EAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;KAAA;AAAA,OAAAA,4EAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;;AAAA,MAAA,KAAAd,MAAA,CAAA,8DAAA,AAAA;;;;;AAAA,CAAA,8EAAA,9EAASc,yFAELb,MAAMV;AAFV,AAAA;AAGG,yFAAA,lFAACwB,4EAAYd,WAASV;;;AAHzB,CAAA,8EAAA,9EAASuB,yFAKLb,MACAE,aACAZ;AAPJ,AAAA;AAQG,IAAAc,mBAEC,AAAA,mFAAO,AAACC,6BAAoBf;AAF7B,AAAA,oBAAAc;AAAAA;;AAGC,IAAA,AACE,OAACT,mFAAmBK,MAAME,aAAaZ;gBADzC,GAAA,CAAAyB,kBAEiChB;AAFjC,QAAAgB,JAE2CR;AAF3C,AAGI,MAAO,oWAAA,2CAAA,iDAAA,8DAAA,9fAACC,gDAAQ,AAAAC,uEAAA,+FAAuD,AAACC,wGAAOpB,QAAG,AAACqB,qBAAWJ,mGAC/DjB,0DACAU,4EACAE,qBACfK;;AAPpB,AAAA,MAAAQ;;;;;;AAXJ,CAAA,wEAAA,xEAASF;;AAAT,AAoBA,AAAA1B,kGAAA,4DAAA,WACGC,OAAOC,cAAcC,EAAE0B;AAD1B,AAGE,IAAAC,6BAAA,AAAAC,8BAAA;IAAAC,8BAAA;AAAA,AAAA,oBAAA,AAAAC,qCAAAD,4BAAAF;AAAA,AAAA,IAAAI,yBAAA;AAAA,AAAA,GAAA,CAAAA,kCAAAtB;AAAA,AAAAuB,qDAAAH,4BAAAF,2BAAA,AAAAM,oOAAA,AAAA,oMAAAF,tWACW,AAACX,wGAAOpB,gNAER,AAACE,qCAA4BF;;AAHxC,AAAAgC,qDAAAH,4BAAAF,2BAAA,AAAAM,kEAAAF,yLAAA,AAAA,oMAAA,pTACW,AAACX,wGAAOpB,8JAER,AAACE,qCAA4BF;;;AAHxC;;AAIA,GAAI,EAAK,AAACkC,wBAAQlC,QACT,+BAAAmC,9BAAU,AAACC,gBAAMpC;AAExB,OAACqC,eAAK,AAACD,gBAAMpC;;AAEb,OAACoB,wGAAOpB;;;AAQZ,4CAAA,5CAAOsC,gGAASC;AAAhB,kFACMA,vBACA,yBAAA,SAAA,lCAACC,3DACD,iGAAA,2CAAA,8DAAA,nMAACC;;AAGP,AAAApC,iGAAA,4DAAA,WACGK,MAAME,aAAaZ;AADtB,AAEE,OAACsC,0CAAQ,AAAC3B,6EAAaD,MAAME,aAAaZ;;AAE5C;;;;;;kEAAA,iBAAAb,6BAAA,AAAAC,6CAAA,7JAAUuD;IAAVtD,6BAAA,AAAAD,6CAAA;IAAAE,6BAAA,AAAAF,6CAAA;IAAAG,iCAAA,AAAAH,6CAAA;IAAAI,0BAAA,AAAAC,4CAAA,2CAAA,yGAAA,gEAAA,iBAAAiD,eAAA,zIAQavC;AARb,AAAA,QAAAuC,6CAAAA,+CAAAA;;AAAA,AAAA,YAAA/C,kBAAA,AAAAC,+CAAA,oCAAA,iCAME,WAAKE,OAAOC,cAAc6C;AAA1B,AACEA;GAPJ,4DAAApD,wBAAAL,2BAAAE,2BAAAC,2BAAAC;;AAUA;;;gDAAA,mFAAA,qDAAA,mEAAA,6DAAA,0DAAA,wDAAA,6DAAA,qEAAA,5iBAAesD;AAIf,AAAA;;;;;;;;;2DAAA,mEAAAvC,9HAASyC;AAAT,AAAA,IAAAD,WAAA,AAAA;AAAA,AAAA,QAAAA;KAAA;AAAA,OAAAC,uFAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;KAAA;AAAA,OAAAA,uFAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;;AAAA,MAAA,KAAAtC,MAAA,CAAA,8DAAA,AAAA;;;;;AAAA,CAAA,yFAAA,zFAASsC,oGAGLrC,MAAMkC;AAHV,AAAA;AAIG,oGAAA,7FAACI,uFAAuBtC,WAASkC;;;AAJpC,CAAA,yFAAA,zFAASG,oGAKLrC,MACAE,aACAgC;AAPJ,AAAA;AAQG,OAACD,8FAA8BjC,MAAME,aAAa,AAACqC,gDAAQL;;;AAR9D,CAAA,mFAAA,nFAASG;;AAAT,AAUA;;;;;mDAAA,iBAAA5D,6BAAA,AAAAC,6CAAA,9IAAU+D;IAAV9D,6BAAA,AAAAD,6CAAA;IAAAE,6BAAA,AAAAF,6CAAA;IAAAG,iCAAA,AAAAH,6CAAA;IAAAI,0BAAA,AAAAC,4CAAA,2CAAA,yGAAA,gEAAA,iBAAAyD,eAAA,zIAOa/C;AAPb,AAAA,QAAA+C,6CAAAA,+CAAAA;;AAAA,AAAA,YAAAvD,kBAAA,AAAAC,+CAAA,oCAAA,kBAKE,WAAKE,OAAOC,cAAcqD;AAA1B,AACE,OAAClD,qCAA4BkD;GANjC,4DAAA5D,wBAAAL,2BAAAE,2BAAAC,2BAAAC;;AASA,AAAA;;;;;;;;4CAAA,oDAAAe,hGAASgD;AAAT,AAAA,IAAAD,WAAA,AAAA;AAAA,AAAA,QAAAA;KAAA;AAAA,OAAAC,wEAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;KAAA;AAAA,OAAAA,wEAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;;AAAA,MAAA,KAAA7C,MAAA,CAAA,8DAAA,AAAA;;;;;AAAA,CAAA,0EAAA,1EAAS6C,qFAEL5C,MAAMV;AAFV,AAAA;AAGG,qFAAA,9EAACuD,wEAAQ7C,WAASV;;;AAHrB,CAAA,0EAAA,1EAASsD,qFAIL5C,MACAE,aACAZ;AANJ,AAAA;AASG,IAAAwD,aAA2C,AAACzC,6BAAoBf;IAAhEwD,iBAAA,AAAAC,4BAAAD;cAAAA,VAAkCG;oBAAlC,AAAAlE,4CAAA+D,eAAA,3EAAcE;AAAd,AACE,IAAA5C,mBAGC,AAAA,uGAAiB6C;AAHlB,AAAA,oBAAA7C;AAAAA;;AAAA,IAAAA,uBAOC,kBAAM,iBAAA8C,oBAAKF;AAAL,AAAA,oBAAAE;AACK,OAACC,0BAAUC,iEAAwDJ;;AADxEE;;MAAN,AAAA,kEAAA;AAPD,AAAA,oBAAA9C;AAAAA;;AAAA,IAAAA,uBAWC,AAAA,6FAAY6C;AAXb,AAAA,oBAAA7C;AAAAA;;AAaC,IAAMiD,kBAAgB,AAACZ,+EAAezC,MAAME,aAAaZ;AAAzD,AAGE,GAAI,mEAAA,nEAACgE,mDAAKD;AACRA;;AADF;;;;;;;AA1BR,CAAA,oEAAA,pEAAST;;AAAT,AA8BA,AAAAH,6FAAA,4DAAA,WACGrD,OAAOC,cAAcqD;AADxB,AAEE,OAACa,uCAA+Bb;;AAIlC,AAAAD,6FAAA,oHAAA,8BAAAe,nBACGxD,MAAME;AADT,AAAA,IAAAuD,aAAAD;WAAA,AAAAE,4CAAAD,WAAA,IAAA,lEACuBE;YADvB,AAAAD,4CAAAD,WAAA,IAAA,nEAC4BG;WAD5B,AAAAF,4CAAAD,WAAA,IAAA,lEACkCf;AADlC,AAEE,OAACG,wEAAQ7C,MAAME,aAAawC;;AAE9B,AAAAD,6FAAA,oIAAA,8BAAAoB,nBACG7D,MAAME;AADT,AAAA,IAAA4D,aAAAD;WAAA,AAAAH,4CAAAI,WAAA,IAAA,lEACuBH;YADvB,AAAAD,4CAAAI,WAAA,IAAA,nEAC4BF;WAD5B,AAAAF,4CAAAI,WAAA,IAAA,lEACkCpB;aADlCoB,TAC2CC;AAD3C,AAEE,GAAI,OAASrB;AAEX,OAACa,uCAA+BQ;;AAEhC,OAAClB,wEAAQ7C,MAAME,aAAawC;;;AAEhC;;;oDAAA,iBAAAjE,6BAAA,AAAAC,6CAAA,/IAAUuF;IAAVtF,6BAAA,AAAAD,6CAAA;IAAAE,6BAAA,AAAAF,6CAAA;IAAAG,iCAAA,AAAAH,6CAAA;IAAAI,0BAAA,AAAAC,4CAAA,2CAAA,yGAAA,gEAAA,iBAAAiF,eAAA,zIAKavE;AALb,AAAA,QAAAuE,6CAAAA,+CAAAA;;AAAA,AAAA,YAAA/E,kBAAA,AAAAC,+CAAA,oCAAA,mBAGE,WAAKE,OAAOC,cAAcC;AAA1B,AACE,OAACE,qCAA4BF;GAJjC,4DAAAR,wBAAAL,2BAAAE,2BAAAC,2BAAAC;;AAOA,AAAAoF,8FAAA,4DAAA,WACGjE,MAAME,aAAaZ;AADtB,AAEE,IAAA,AAAA,kDAAA,0DAAA,yEAAA,6JAAA,uJAAA,rPAGiB,AAACuD,wEAAQ7C,MAAME,aAAaZ,wDAC5B,AAACwB,4EAAYd,MAAME,aAAaZ,uEAChC,AAACW,6EAAaD,MAAME,aAAaZ;gBALlD,GAAA,CAAA4E,kBAQiCnE;AARjC,QAAAmE,JAQ2C3D;AAR3C,AASI,MAAO,uYAAA,2CAAA,8DAAA,mFAAA,nkBAACC,gDAAQ,AAAAC,uEAAA,4FACU,AAACC,wGAAO,AAAClB,qCAA4BF,SACrC,AAACqB,qBAAWJ,4GACdP,4EAAqBE,4DAAiBZ,UAC9CiB;;AAbpB,AAAA,MAAA2D;;;;AAeF,AAAA;;;;;;;;;;;;;;;;;6CAAA,qDAAAtE,lGAASwE;AAAT,AAAA,IAAAD,WAAA,AAAA;AAAA,AAAA,QAAAA;KAAA;AAAA,OAAAC,yEAAA,CAAA,UAAA;;;KAAA;AAAA,OAAAA,yEAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;KAAA;AAAA,OAAAA,yEAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;;AAAA,MAAA,KAAArE,MAAA,CAAA,8DAAA,AAAA;;;;;AAAA,CAAA,2EAAA,3EAASqE,sFAQLpE;AARJ,AAAA;AASG,sFAAA,/EAACqE,yEAASrE,WAASA;;;AATtB,CAAA,2EAAA,3EAASoE,sFAULpE,MAAMV;AAVV,AAAA;AAWG,sFAAA,/EAAC+E,yEAASrE,WAASV;;;AAXtB,CAAA,2EAAA,3EAAS8E,sFAYLpE,MACAE,aACAZ;AAdJ,AAAA;AAeG,OAAC2E,gFAAgBjE,MAAME,aAAaZ;;;AAfvC,CAAA,qEAAA,rEAAS8E;;AAAT,AAiBA;;;;;;;mDAAA,nDAASE,8GAENtE;AAFH,AAAA;AAGE,OAACC,6EAAaD,MAAMA;;AAEtB;;;;;;;;mDAAA,nDAASuE,8GAGNvE;AAHH,AAAA;AAIE,GAAU,gLAAA,hLAACwE,6CAAE,AAAA,wFAAW,oCAAA,pCAACC,8BAAqBzE;AAA9C;;AAAA,AACE,IAAA,AACE,OAACsE,iDAAetE;gBADlB,GAAA,CAAA0E,kBAEiC3E;AAFjC,QAAA2E,JAE2CnE;AAF3C,AAGI,IAAAoE,6BAAA,AAAAzD,8BAAA;IAAA0D,8BAAA;AAAA,AAAA,oBAAA,AAAAxD,qCAAAwD,4BAAAD;AAAA,AAAA,IAAAE,yBAAWtE;AAAX,AAAA,GAAA,CAAAsE,kCAAA9E;AAAA,AAAAuB,qDAAAsD,4BAAAD,2BAAA,AAAAG,wTAAAD,7MAAa,AAAApE,uEAAA,kGAA0D,AAACE,qBAAWJ;;AAAnF,AAAAe,qDAAAsD,4BAAAD,2BAAA,AAAAG,2GAAAD,oOAAA,7MAAa,AAAApE,uEAAA,kGAA0D,AAACE,qBAAWJ;;;AAAnF;;AAHJ;;AAAA,AAAA,MAAAmE;;;;;AAMJ;;;;wDAAA,iBAAAjG,6BAAA,AAAAC,6CAAA,nJAAUsG;IAAVrG,6BAAA,AAAAD,6CAAA;IAAAE,6BAAA,AAAAF,6CAAA;IAAAG,iCAAA,AAAAH,6CAAA;IAAAI,0BAAA,AAAAC,4CAAA,2CAAA,yGAAA,gEAAA,iBAAAgG,eAAA,zIAMatF;AANb,AAAA,QAAAsF,6CAAAA,+CAAAA;;AAAA,AAAA,YAAA9F,kBAAA,AAAAC,+CAAA,oCAAA,uBAIE,WAAKE,OAAOC,cAAcC;AAA1B,AACE,OAACE,qCAA4BF;GALjC,4DAAAR,wBAAAL,2BAAAE,2BAAAC,2BAAAC;;AAQA,4CAAA,uIAAA,oFAAA,mDAAA,mFAAA,oEAAA,kEAAA,mFAAA,+EAAA,2CAAA,6DAAA,aAAA,kEAAA,mFAAA,uDAAA,2CAAA,6DAAA,aAAA,mFAAA,uDAAA,mFAAA,mDAAA,+JAAA,mFAAA,wFAAA,2CAAA,6DAAA,aAAA,mFAAA,uDAAA,4EAAA,mFAAA,sEAAA,2CAAA,6DAAA,aAAA,mFAAA,uDAAA,4EAAA,mFAAA,sEAAA,2CAAA,6DAAA,aAAA,mFAAA,uDAAA,4EAAA,mFAAA,yFAAA,2CAAA,6DAAA,aAAA,mFAAA,uDAAA,4EAAA,mFAAA,2EAAA,2CAAA,6DAAA,aAAA,mFAAA,uDAAA,4EAAA,mFAAA,+EAAA,2CAAA,6DAAA,aAAA,mFAAA,uDAAA,4EAAA,mFAAA,iFAAA,2CAAA,6DAAA,aAAA,mFAAA,uDAAA,4EAAA,mFAAA,qDAAA,2CAAA,6DAAA,aAAA,kEAAA,mFAAA,kEAAA,2CAAA,6DAAA,aAAA,kEAAA,mFAAA,oEAAA,2CAAA,6DAAA,aAAA,kEAAA,mFAAA,kEAAA,2CAAA,6DAAA,aAAA,kEAAA,mFAAA,0EAAA,2CAAA,6DAAA,aAAA,oEAAA,mFAAA,4DAAA,2CAAA,6DAAA,aAAA,oEAAA,mFAAA,4DAAA,2CAAA,6DAAA,aAAA,oEAAA,mFAAA,+DAAA,2CAAA,6DAAA,aAAA,mFAAA,qDAAA,kDAAA,hmPAACoG;AAsCD,AAAA;;;;;;;;;;iDAAA,yDAAArF,1GAASuF;AAAT,AAAA,IAAAD,WAAA,AAAA;AAAA,AAAA,QAAAA;KAAA;AAAA,OAAAC,6EAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;KAAA;AAAA,OAAAA,6EAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;;AAAA,MAAA,KAAApF,MAAA,CAAA,8DAAA,AAAA;;;;;AAAA,CAAA,+EAAA,/EAASoF,0FAILnF,MAAMV;AAJV,AAAA;AAKG,0FAAA,nFAAC8F,6EAAapF,WAASV;;;AAL1B,CAAA,+EAAA,/EAAS6F,0FAOLnF,MACAE,aACAZ;AATJ,AAAA;AAUG,IAAA,AACE,OAAC0F,oFAAoBhF,MAAME,aAAaZ;gBAD1C,GAAA,CAAA+F,kBAEiCtF;AAFjC,QAAAsF,JAE2C9E;AAF3C,AAGI,MAAO,6RAAA,2CAAA,8DAAA,mFAAA,zdAACC,gDAAQ,AAAAC,uEAAA,gGACU,AAACjB,qCAA4BF,GAC7B,AAACqB,qBAAWJ,4GACdP,4EAAqBE,4DAAiBZ,UAC9CiB;;AAPpB,AAAA,MAAA8E;;;;;AAVH,CAAA,yEAAA,zEAASF;;AAAT,AAmBA;;;;yDAAA,zDAAMG,0HAGHtF,MAAME,aAAaZ;AAHtB,AAIE,IAAMiG,aAAW,AAAClB,yEAASrE,MAAME,aAAaZ;AAA9C,AACE,OAACkG,uGAGA,iCAAA,mFAAA,qDAAA,oEAAA,7OAACC,sBAAYF,uSACb,iBAAAG,qBAA6B,kGAAA,lGAACzF,6EAAaD,MAAME,aAAaZ;AAA9D,AAAA,oBAAAoG;AAAA,AAAA,wBAAAA,pBAAWC;AAAX,AAAA,kDAAA,+EACsBA;;AADtB;;KAIA,iBAAAD,qBAA0B,AAAC,gDAAA,yEAAA,zHAACG,yLAAoCN;AAAhE,AAAA,oBAAAG;AAAA,AAAA,qBAAAA,jBAAWE;AAAX,AAAA,kDAAA,yEACmBA;;AADnB;;KAEA,iBAAAF,qBAAoB,AAAA,2FAAWH;AAA/B,AAAA,oBAAAG;AAAA,AAAA,eAAAA,XAAWI;AAAX,AAAA,kDAAA,uDACU,AAACV,6EACApF,MACAE,aAIA,kFAAA,iIAAA,jNACE,AAAC6F,yBAASD,WAAU,AAACE,4BAAmBhG,MAAM8F,YAC9C,OAASA,uBAAW,AAACG,2BAAkBjG,MAAM,AAACkG,qDAAyCJ;;AATpG;;KAUA,iBAAAJ,qBAAkB,AAAA,4FAAaH;AAA/B,AAAA,oBAAAG;AAAA,AAAA,aAAAA,TAAWS;AAAX,AAAA,kDAAA,iOAAA,6LAAA,yMAAA,/gBAC2B,oDAAA,pDAAC3B,6CAAE2B,kKACH,oDAAA,pDAAC3B,6CAAE2B,gJACH,oDAAA,pDAAC3B,6CAAE2B,+KACH,oDAAA,pDAAC3B,6CAAE2B;;AAJ9B;;KAKA,iBAAAC,qBAAqB,AAAA,6FAAYb;AAAjC,AAAA,GAAA,CAAAa,sBAAA;AAAA;;AAAA,eAAAA,XAAYC;AAAZ,AAAA,kDAAA,4DACaA;;KACb,iCAAA,mFAAA,+EAAA,nMAACZ,sBAAYF;;AAElB,AAAAP,kGAAA,4DAAA,WACGhF,MAAME,aAAaZ;AADtB,AAEE,OAACgG,uDAAqBtF,MAAME,aAAaZ;;AAE3C,AAAA0F,kGAAA,sEAAA,WACGhF,MAAME,aAAaoG;AADtB,AAEE,+LAAA,2CAAA,nOAACd,uGAAM,AAACF,uDAAqBtF,MAAME,aAAaoG,6HACvB,AAAC9B,6CAAE,AAAC+B,kCAAyBvG,OAAO,AAAA,gFAAKsG;;AAEpE;;;6DAAA,mFAAA,6FAAA,mFAAA,mDAAA,mFAAA,8DAAA,pgBAAKE,wMAGFC;AAIH;;;;6DAAA,mFAAA,mDAAA,mFAAA,kEAAA,mFAAA,mHAAA,mFAAA,mDAAA,mFAAA,wFAAA,yIAAA,mFAAA,2FAAA,mFAAA,0DAAA,2CAAA,kDAAA,IAAA,iDAAA,qDAAA,mFAAA,kDAAA,2CAAA,oEAAA,gGAAA,9yDAAKC,meAMAF,s4CAOe,WAAAG,SAAqBG;AAArB,AAAA,IAAAF,aAAAD;IAAAC,iBAAA,AAAA7D,4BAAA6D;YAAA,AAAA7H,4CAAA6H,eAAA,nEAAaC;AAAb,AACE,QAAA,kEACK,AAACnG,wGAAO,6CAAA,7CAACqG,wIAA+BF;WAC/D,WAAKG;AAAL,AACE,IAAA5G,mBACC,AAAC6G,uBAAOD;AADT,AAAA,GAAA5G;AAAAA;;AAEC,OAAC8G,8CAAMC,0BAAU,AAACC,4CAAI,yEAAA,zEAACC,6CAAKC,wHAA2CN;;;AAE9E,iDAAA,mFAAA,iDAAA,mFAAA,oDAAA,yIAAA,rcAAeO;AAKf;;;2DAAA,mFAAA,mDAAA,mFAAA,yEAAA,2CAAA,6DAAA,rcAAKC,kdAIgCD;AAErC;;;;qEAAA,rEAAmBE;AAAnB,AAAA,kDAAA,yEAEmB,AAACC;;AAEpB;;;4DAAA,iBAAAjJ,6BAAA,AAAAC,6CAAA,vJAAUkJ;IAAVjJ,6BAAA,AAAAD,6CAAA;IAAAE,6BAAA,AAAAF,6CAAA;IAAAG,iCAAA,AAAAH,6CAAA;IAAAI,0BAAA,AAAAC,4CAAA,2CAAA,yGAAA,gEAAA,iBAAA4I,eAAA,zIAKalI;AALb,AAAA,QAAAkI,6CAAAA,+CAAAA;;AAAA,AAAA,YAAA1I,kBAAA,AAAAC,+CAAA,oCAAA,2BAGE,WAAKE,OAAOC,cAAcC,EAAEuI;AAA5B,AACE,OAACrI,qCAA4BF;GAJjC,4DAAAR,wBAAAL,2BAAAE,2BAAAC,2BAAAC;;AAOA,AAAA+I,sGAAA,6EAAA,WACGxI,OAAOC,cAAcyI,GAAGD;AAD3B,AAAA;;AAIA,AAAA;;;;;;;;;;;;;;qDAAA,6DAAAjI,lHAASoI;AAAT,AAAA,IAAAD,WAAA,AAAA;AAAA,AAAA,QAAAA;KAAA;AAAA,OAAAC,iFAAA,CAAA,UAAA;;;KAAA;AAAA,OAAAA,iFAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;KAAA;AAAA,OAAAA,iFAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;KAAA;AAAA,OAAAA,iFAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;;AAAA,MAAA,KAAAjI,MAAA,CAAA,8DAAA,AAAA;;;;;AAAA,CAAA,mFAAA,nFAASiI,8FAMLhI;AANJ,AAAA;AAOG,OAACiI,iFAAiBjI,MAAM,oCAAA,pCAACyE,8BAAqBzE;;;AAPjD,CAAA,mFAAA,nFAASgI,8FASLhI,MAAMV;AATV,AAAA;AAUG,8FAAA,vFAAC2I,iFAAiBjI,WAASV;;;AAV9B,CAAA,mFAAA,nFAAS0I,8FAYLhI,MAAME,aAAaZ;AAZvB,AAAA;AAaG,6GAAA,tGAAC2I,iFAAiBjI,MAAME,aAAaZ;;;AAbxC,CAAA,mFAAA,nFAAS0I,8FAeLhI,MACAE,aACAZ,EACA2D;AAlBJ,AAAA;AAmBG,IAAMA,cAAQ,AAACuC,uGAAM,AAACiC,qEAAkCxE;AAAxD,AACE,OAAC2E,wFAAwB5H,MAAME,aAAaZ,EAAE2D;;;AApBnD,CAAA,6EAAA,7EAAS+E;;AAAT,AAsBA;;;0DAAA,mFAAA,iHAAA,mFAAA,mDAAA,mFAAA,2EAAA,2CAAA,6DAAA,aAAA,oEAAA,mFAAA,sFAAA,2CAAA,6DAAA,aAAA,oEAAA,mFAAA,qGAAA,2CAAA,6DAAA,aAAA,12CAAKE,qMAGFV;AAOH;;;;oEAAA,pEAAmBW;AAAnB,AAAA;AAEE,mLAAA,2CAAA,2EAAA,KAAA,sFAAA,KAAA,qGAAA,veAAC3C,uGACA,AAACiC;;AAKJ;;;;;;;;;;;2DAAA,iBAAAhJ,6BAAA,AAAAC,6CAAA,tJAAU2J;IAAV1J,6BAAA,AAAAD,6CAAA;IAAAE,6BAAA,AAAAF,6CAAA;IAAAG,iCAAA,AAAAH,6CAAA;IAAAI,0BAAA,AAAAC,4CAAA,2CAAA,yGAAA,gEAAA,iBAAAqJ,eAAA,zIAaa3I;AAbb,AAAA,QAAA2I,6CAAAA,+CAAAA;;AAAA,AAAA,YAAAnJ,kBAAA,AAAAC,+CAAA,oCAAA,0BAWE,WAAKE,OAAOC,cAAcC,EAAEuI;AAA5B,AACE,OAACrI,qCAA4BF;GAZjC,4DAAAR,wBAAAL,2BAAAE,2BAAAC,2BAAAC;;AAeA,AAAAwJ,qGAAA,6EAAA,WACGjJ,OAAOC,cAAcyI,GAAGD;AAD3B,AAAA;;AAKA,AAAAQ,qGAAA,4DAAA,WACGrI,MAAME,aAAaZ,EAAE2D;AADxB,AAEE,OAAC2E,wFAAwB5H,MAAME,aAAaZ,EAAE2D;;AAEhD,AAAA;;;;;;;;;;;;;;;;;;;;;;oDAAA,4DAAArD,hHAAS2I;AAAT,AAAA,IAAAD,WAAA,AAAA;AAAA,AAAA,QAAAA;KAAA;AAAA,OAAAC,gFAAA,CAAA,UAAA;;;KAAA;AAAA,OAAAA,gFAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;KAAA;AAAA,OAAAA,gFAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;KAAA;AAAA,OAAAA,gFAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;;AAAA,MAAA,KAAAxI,MAAA,CAAA,8DAAA,AAAA;;;;;AAAA,CAAA,kFAAA,lFAASwI,6FAcLvI;AAdJ,AAAA;AAeG,OAACwI,gFAAgBxI,MAAM,oCAAA,pCAACyE,8BAAqBzE;;;AAfhD,CAAA,kFAAA,lFAASuI,6FAiBLvI,MAAMV;AAjBV,AAAA;AAkBG,6FAAA,tFAACkJ,gFAAgBxI,WAASV;;;AAlB7B,CAAA,kFAAA,lFAASiJ,6FAoBLvI,MAAME,aAAaZ;AApBvB,AAAA;AAqBG,4GAAA,rGAACkJ,gFAAgBxI,MAAME,aAAaZ;;;AArBvC,CAAA,kFAAA,lFAASiJ,6FAuBLvI,MACAE,aACAZ,EACA2D;AA1BJ,AAAA;AA2BG,IAAMA,cAAQ,AAACuC,uGAAM,AAAC2C,oEAAiClF;AAAvD,AACE,OAACoF,uFAAuBrI,MAAME,aAAaZ,EAAE2D;;;AA5BlD,CAAA,4EAAA,5EAASsF;;AAAT","names",["metabase.lib.metadata.calculation/DisplayNameStyle","metabase.lib.metadata.calculation/*display-name-style*","method-table__5642__auto__","cljs.core.atom","prefer-table__5643__auto__","method-cache__5644__auto__","cached-hierarchy__5645__auto__","hierarchy__5646__auto__","cljs.core.get","fexpr__48560","cljs.core/MultiFn","cljs.core.symbol","metabase.lib.metadata.calculation/display-name-method","_query","_stage-number","x","_display-name-style","metabase.lib.dispatch/dispatch-value","metabase.lib.hierarchy/hierarchy","fexpr__48561","metabase.lib.metadata.calculation/column-name-method","var_args","G__48578","metabase.lib.metadata.calculation/display-name","js/Error","query","metabase.lib.metadata.calculation.display_name","stage-number","style","or__5045__auto__","metabase.lib.options/options","e48604","e","cljs.core.ex_info","metabase.shared.util.i18n.js_i18n","cljs.core.pr_str","cljs.core/ex-message","G__48607","metabase.lib.metadata.calculation/column-name","metabase.lib.metadata.calculation.column_name","e48609","_stage","level__30248__auto__","metabase.util.log/glogi-level","logger__30249__auto__","metabase.util.log/is-loggable?","x__30250__auto__","lambdaisland.glogi.log","metabase.util.log.format_msg","cljs.core/vector?","cljs.core/Keyword","cljs.core/first","cljs.core/name","metabase.lib.metadata.calculation/slugify","s","clojure.string/replace","metabase.util.slugify","fexpr__48617","metabase.lib.metadata.calculation/describe-top-level-key-method","top-level-key","metabase.lib.metadata.calculation/TopLevelKey","G__48622","metabase.lib.metadata.calculation/describe-top-level-key","metabase.lib.metadata.calculation.describe_top_level_key","cljs.core.keyword","fexpr__48623","metabase.lib.metadata.calculation/type-of-method","expr","G__48626","metabase.lib.metadata.calculation/type-of","metabase.lib.metadata.calculation.type_of","map__48627","cljs.core/--destructure-map","temporal-unit","options","and__5043__auto__","cljs.core/contains?","metabase.lib.schema.temporal-bucketing/datetime-extraction-units","calculated-type","cljs.core.isa_QMARK_","metabase.lib.schema.expression/type-of","p__48628","vec__48629","cljs.core.nth","_tag","_opts","p__48632","vec__48633","clause","fexpr__48636","metabase.lib.metadata.calculation/metadata-method","e48637","G__48649","metabase.lib.metadata.calculation/metadata","metabase.lib.metadata.calculation.metadata","metabase.lib.metadata.calculation/describe-query","metabase.lib.metadata.calculation/suggested-name","cljs.core._EQ_","metabase.lib.util/query-stage","e48652","level__30238__auto__","logger__30239__auto__","x__30240__auto__","cljs.core.print_str","fexpr__48655","metabase.lib.metadata.calculation/display-info-method","metabase.util.malli.registry/register!","G__48658","metabase.lib.metadata.calculation/display-info","metabase.lib.metadata.calculation.display_info","e48660","metabase.lib.metadata.calculation/default-display-info","x-metadata","cljs.core.merge","cljs.core/select-keys","temp__5804__auto__","long-display-name","effective-type","cljs.core.some_fn","table-id","cljs.core/integer?","metabase.lib.metadata/table","metabase.lib.metadata/card","metabase.lib.util/legacy-string-table-id->card-id","source","temp__5808__auto__","selected","table","metabase.lib.util/source-table-id","metabase.lib.metadata.calculation/ColumnMetadataWithSource","metabase.lib.metadata/ColumnMetadata","metabase.lib.metadata.calculation/ColumnsWithUniqueAliases","p__48663","map__48664","value","_","cljs.core.mapv","columns","cljs.core/empty?","cljs.core.apply","cljs.core/distinct?","cljs.core.map","cljs.core.comp","metabase.util/lower-case-en","metabase.lib.metadata.calculation/UniqueNameFn","metabase.lib.metadata.calculation/ReturnedColumnsOptions","metabase.lib.metadata.calculation/default-returned-columns-options","metabase.lib.util/unique-name-generator","fexpr__48666","metabase.lib.metadata.calculation/returned-columns-method","_options","_x","G__48669","metabase.lib.metadata.calculation/returned-columns","metabase.lib.metadata.calculation.returned_columns","metabase.lib.metadata.calculation/VisibleColumnsOptions","metabase.lib.metadata.calculation/default-visible-columns-options","fexpr__48671","metabase.lib.metadata.calculation/visible-columns-method","G__48674","metabase.lib.metadata.calculation/visible-columns","metabase.lib.metadata.calculation.visible_columns"]],"~:used-vars",["^H",["~$metabase.lib.metadata.calculation/visible-columns","~$metabase.lib.util/legacy-string-table-id->card-id","~$cljs.core/--destructure-map","~$metabase.lib.metadata.calculation/ColumnMetadataWithSource","~$cljs.core/comp","~$metabase.lib.util/source-table-id","~$cljs.core/keyword","~$metabase.lib.metadata.calculation/returned-columns-method","~$cljs.core/ex-message","~$metabase.lib.metadata.calculation/visible-columns-method","~$cljs.core/MultiFn","~$metabase.lib.metadata.calculation/UniqueNameFn","~$metabase.lib.metadata.calculation/default-visible-columns-options","~$metabase.lib.metadata.calculation/type-of","~$metabase.lib.options/options","~$metabase.lib.util/unique-name-generator","~$cljs.core/vector?","~$cljs.core/=","~$metabase.util/lower-case-en","~$metabase.lib.metadata.calculation/ReturnedColumnsOptions","~$metabase.lib.metadata.calculation/slugify","~$metabase.lib.util/query-stage","~$metabase.lib.metadata.calculation/type-of-method","~$metabase.lib.metadata/card","~$cljs.core/apply","~$metabase.lib.metadata/ColumnMetadata","~$cljs.core/Keyword","~$metabase.lib.metadata.calculation/column-name-method","~$metabase.lib.metadata.calculation/VisibleColumnsOptions","~$cljs.core/mapv","~$metabase.util.malli.registry/register!","~$metabase.lib.metadata.calculation/default-display-info","~$lambdaisland.glogi/log","~$cljs.core/atom","~$metabase.lib.metadata.calculation/describe-top-level-key-method","~$metabase.lib.metadata.calculation/display-info-method","~$metabase.util.log/is-loggable?","~$cljs.core/pr-str","~$metabase.lib.schema.expression/type-of","~$metabase.lib.metadata.calculation/describe-top-level-key","~$cljs.core/empty?","~$metabase.lib.metadata.calculation/DisplayNameStyle","~$cljs.core/contains?","~$metabase.lib.metadata.calculation/returned-columns","~$metabase.lib.metadata.calculation/suggested-name","~$metabase.util.log/format-msg","~$cljs.core/map","~$cljs.core/-add-method","~$metabase.lib.metadata.calculation/metadata","~$metabase.lib.metadata.calculation/metadata-method","~$cljs.core/get","~$cljs.core/integer?","~$metabase.lib.schema.temporal-bucketing/datetime-extraction-units","~$metabase.util.log/glogi-level","~$cljs.core/symbol","~$metabase.util/slugify","~$cljs.core/distinct?","~$metabase.lib.metadata.calculation/display-name","~$metabase.shared.util.i18n/js-i18n","~$cljs.core/nth","~$cljs.core/ex-info","~$metabase.lib.metadata.calculation/default-returned-columns-options","~$metabase.lib.dispatch/dispatch-value","~$metabase.lib.hierarchy/hierarchy","~$clojure.string/replace","~$metabase.lib.metadata.calculation/*display-name-style*","~$cljs.core/select-keys","~$metabase.lib.metadata.calculation/column-name","~$metabase.lib.metadata.calculation/display-info","~$metabase.lib.metadata.calculation/ColumnsWithUniqueAliases","~$cljs.core/print-str","~$metabase.lib.metadata/table","~$cljs.core/isa?","~$metabase.lib.metadata.calculation/TopLevelKey","~$cljs.core/some-fn","~$cljs.core/first","~$metabase.lib.metadata.calculation/describe-query","~$cljs.core/name","~$cljs.core/merge","~$metabase.lib.metadata.calculation/display-name-method","~$js/Error"]]],"~:cache-keys",["~#cmap",[["^1N","camel_snake_kebab/internals/misc.cljc"],["5ae08f83ceb8959971e6334596bff0214bf6fdf2","~:shadow.build.compiler/resolve",["^ ","~:require-id",null,"~:deps-ids",["^H",[]],"~:deps-syms",["^11","^?","~$camel-snake-kebab.internals.string-separator","^1A"]]],["^1N","goog/dom/tagname.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3V",["^ ","^3W",null,"^3X",["^H",[]],"^3Y",["^11","~$goog.dom.HtmlElement"]]],["^1N","metabase/shared/util/i18n.cljs"],["6c3c8615004b349dae9851ed547d516d45e04bd0","^3V",["^ ","^3W",null,"^3X",["^H",[]],"^3Y",["^11","^?","~$shadow.js.shim.module$ttag","^1A"]]],["^1N","goog/labs/useragent/platform.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3V",["^ ","^3W",null,"^3X",["^H",[]],"^3Y",["^11","~$goog.string.internal","~$goog.labs.userAgent.util","~$goog.labs.userAgent.highEntropy.highEntropyValue","~$goog.labs.userAgent.highEntropy.highEntropyData","~$goog.labs.userAgent"]]],["^1N","metabase/types.cljc"],["00232bf78b259e26a21c218c8f2d746ba7003a15","^3V",["^ ","^3W",null,"^3X",["^H",[]],"^3Y",["^11","^?","~$clojure.set","~$metabase.types.coercion-hierarchies","^Z"]]],["^1N","cljs/spec/gen/alpha.cljs"],["bc14df6666853ed869d7b88aaa864111c65d0c7f","^3V",["^ ","^3W",null,"^3X",["^H",[]],"^3Y",["^11","^?","~$goog.Uri"]]],["^1N","metabase/lib/util.cljc"],["11c3262368d876979e323f3e646aab21fbf9b86e","^3V",["^ ","^3W",null,"^3X",["^H",[]],"^3Y",["^11","^?","~$shadow.js.shim.module$crc_32","~$goog.string","~$goog.string.format","^46","^1A","~$medley.core","~$metabase.lib.common","^15","^P","^Y","^18","~$metabase.lib.schema.id","~$metabase.mbql.util","^W","^Z","^R"]]],["^1N","lambdaisland/glogi.cljs"],["76286836d4172602aa08006b2a754dda736ffe09","^3V",["^ ","^3W",null,"^3X",["^H",[]],"^3Y",["^11","^?","~$goog.log","~$goog.debug.Console","~$goog.array","^1A","~$goog.object","~$goog.debug.FancyWindow","~$goog.debug.DivConsole"]]],["^1N","goog/math/math.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3V",["^ ","^3W",null,"^3X",["^H",[]],"^3Y",["^11","~$goog.asserts"]]],["^1N","goog/html/trustedtypes.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3V",["^ ","^3W",null,"^3X",["^H",[]],"^3Y",["^11"]]],["^1N","goog/string/stringformat.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3V",["^ ","^3W",null,"^3X",["^H",[]],"^3Y",["^11","^4:"]]],["^1N","malli/registry.cljc"],["514c6f7d69d7e40b56fa75bfd1a49a683ca15982","^3V",["^ ","^3W",null,"^3X",["^H",[]],"^3Y",["^11","^?"]]],["^1N","goog/labs/useragent/browser.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3V",["^ ","^3W",null,"^3X",["^H",[]],"^3Y",["^11","^42","^43","^4F","^41","^44","^45"]]],["^1N","goog/html/safeurl.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3V",["^ ","^3W",null,"^3X",["^H",[]],"^3Y",["^11","^4F","~$goog.fs.url","~$goog.html.TrustedResourceUrl","~$goog.string.Const","~$goog.string.TypedString","^41"]]],["^1N","goog/style/style.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3V",["^ ","^3W",null,"^3X",["^H",[]],"^3Y",["^11","^4F","~$goog.dom","~$goog.dom.NodeType","~$goog.dom.TagName","~$goog.dom.safe","~$goog.dom.vendor","~$goog.html.SafeStyleSheet","~$goog.math.Box","~$goog.math.Coordinate","~$goog.math.Rect","~$goog.math.Size","^4C","~$goog.reflect","^4:","~$goog.userAgent"]]],["^1N","goog/array/array.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3V",["^ ","^3W",null,"^3X",["^H",[]],"^3Y",["^11","^4F"]]],["~:shadow.build.js-support/require","moment"],["~$shadow.js.shim.module$moment","shadow.js.shim.module$moment.js","require","^3V",["^ ","^3W",null,"^3X",["^H",[]],"^3Y",["^11"]]],["^4W","moment-timezone"],["~$shadow.js.shim.module$moment_timezone","shadow.js.shim.module$moment_timezone.js","require","^3V",["^ ","^3W",null,"^3X",["^H",[]],"^3Y",["^11"]]],["^1N","metabase/mbql/schema/macros.cljs"],["2af09bd42ffb1e15b66723cf7ba15db7dc75d10b","^3V",["^ ","^3W",null,"^3X",["^H",[]],"^3Y",["^11","^?"]]],["^1N","metabase/lib/schema/mbql_clause.cljc"],["e5bdd00c58db706b1219843528fd3cd9dd8ab728","^3V",["^ ","^3W",null,"^3X",["^H",[]],"^3Y",["^11","^?","^Y","^18","~$metabase.types","^R","^12"]]],["^1N","goog/useragent/useragent.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3V",["^ ","^3W",null,"^3X",["^H",[]],"^3Y",["^11","~$goog.labs.userAgent.browser","~$goog.labs.userAgent.engine","~$goog.labs.userAgent.platform","^42","^4U","^41"]]],["^1N","malli/generator.cljc"],["514c6f7d69d7e40b56fa75bfd1a49a683ca15982","^3V",["^ ","^3W",null,"^3X",["^H",[]],"^3Y",["^11","^?","^A","^1A","~$clojure.test.check","~$clojure.test.check.generators","~$clojure.test.check.properties","~$clojure.test.check.random","~$clojure.test.check.rose-tree","~$malli.core","~$malli.registry"]]],["^1N","clojure/test/check/properties.cljc"],["f33d988fd57bc9c11af1952db81c10f319c91416","^3V",["^ ","^3W",null,"^3X",["^H",[]],"^3Y",["^11","^?","^53","~$clojure.test.check.results"]]],["^1N","clojure/test/check/generators.cljc"],["f33d988fd57bc9c11af1952db81c10f319c91416","^3V",["^ ","^3W",null,"^3X",["^H",[]],"^3Y",["^11","^?","^1A","^55","^56","^4:"]]],["^1N","goog/debug/error.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3V",["^ ","^3W",null,"^3X",["^H",[]],"^3Y",["^11"]]],["^1N","metabase/lib/common.cljc"],["a3bc6343077ef13a3da77612b68f23f9b2a3d890","^3V",["^ ","^3W",null,"^3X",["^H",[]],"^3Y",["^11","^?","^1?","^1:","^15","~$metabase.lib.ref","^Y","^R"]]],["^1N","metabase/lib/schema/util.cljc"],["14a9e8a90c56f5e44b4ecd361e962722fd97aecf","^3V",["^ ","^3W",null,"^3X",["^H",[]],"^3Y",["^11","^?","^15"]]],["^1N","goog/flags/flags.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3V",["^ ","^3W",null,"^3X",["^H",[]],"^3Y",["^11"]]],["^1N","malli/util.cljc"],["514c6f7d69d7e40b56fa75bfd1a49a683ca15982","^3V",["^ ","^3W",null,"^3X",["^H",[]],"^3Y",["^11","^?","^?","^57"]]],["^1N","clojure/test/check/random/doubles.cljs"],["f33d988fd57bc9c11af1952db81c10f319c91416","^3V",["^ ","^3W",null,"^3X",["^H",[]],"^3Y",["^11","^?","~$clojure.test.check.random.longs"]]],["^1N","net/cgrand/macrovich.cljc"],["abcb26cbfe0f8eef363b25525210c0fe1eb1f693","^3V",["^ ","^3W",null,"^3X",["^H",[]],"^3Y",["^11","^?"]]],["^1N","malli/destructure.cljc"],["514c6f7d69d7e40b56fa75bfd1a49a683ca15982","^3V",["^ ","^3W",null,"^3X",["^H",[]],"^3Y",["^11","^?","~$clojure.walk","^57","~$malli.impl.util"]]],["^1N","schema/spec/variant.cljc"],["0dacc3066a87f33088c9a332b6c21e8b0560011c","^3V",["^ ","^3W",null,"^3X",["^H",[]],"^3Y",["^11","^?","~$schema.utils","~$schema.spec.core"]]],["^1N","goog/structs/circularbuffer.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3V",["^ ","^3W",null,"^3X",["^H",[]],"^3Y",["^11"]]],["^1N","weavejester/dependency.cljc"],["7fd7f8879313f6a7e295f7447e668bdf492c42c1","^3V",["^ ","^3W",null,"^3X",["^H",[]],"^3Y",["^11","^?","^46"]]],["^1N","metabase/lib/schema/common.cljc"],["3f51a06335a7cb84c835d859c422919499874414","^3V",["^ ","^3W",null,"^3X",["^H",[]],"^3Y",["^11","^?","^1A","^4Z","^12"]]],["^1N","goog/dom/nodetype.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3V",["^ ","^3W",null,"^3X",["^H",[]],"^3Y",["^11"]]],["^1N","goog/labs/useragent/highentropy/highentropyvalue.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3V",["^ ","^3W",null,"^3X",["^H",[]],"^3Y",["^11","^42","^41"]]],["^1N","cljs/pprint.cljs"],["bc14df6666853ed869d7b88aaa864111c65d0c7f","^3V",["^ ","^3W",null,"^3X",["^H",[]],"^3Y",["^11","^?","^1A","^4:","~$goog.string.StringBuffer"]]],["^1N","metabase/lib/schema/template_tag.cljc"],["f1b6289b8e576857fe667aed3da134e4ad1ea26a","^3V",["^ ","^3W",null,"^3X",["^H",[]],"^3Y",["^11","^?","^57","^Y","^4>","~$metabase.mbql.schema","^12"]]],["^1N","metabase/lib/schema/ref.cljc"],["5037a60b3d2f427702cf5cedf23f02bcc394d051","^3V",["^ ","^3W",null,"^3X",["^H",[]],"^3Y",["^11","^?","^1A","^1?","^1:","^Y","^18","^4>","~$metabase.lib.schema.mbql-clause","^17","^4Z","^12"]]],["^1N","clojure/test/check/rose_tree.cljc"],["f33d988fd57bc9c11af1952db81c10f319c91416","^3V",["^ ","^3W",null,"^3X",["^H",[]],"^3Y",["^11","^?"]]],["^1N","clojure/test/check/impl.cljc"],["f33d988fd57bc9c11af1952db81c10f319c91416","^3V",["^ ","^3W",null,"^3X",["^H",[]],"^3Y",["^11","^?"]]],["^1N","camel_snake_kebab/internals/string_separator.cljc"],["5ae08f83ceb8959971e6334596bff0214bf6fdf2","^3V",["^ ","^3W",null,"^3X",["^H",[]],"^3Y",["^11","^?","^1A"]]],["^1N","clojure/test/check/random.cljs"],["f33d988fd57bc9c11af1952db81c10f319c91416","^3V",["^ ","^3W",null,"^3X",["^H",[]],"^3Y",["^11","^?","~$clojure.test.check.random.doubles","^5;"]]],["^1N","metabase/lib/schema/expression/arithmetic.cljc"],["e6936a3e0b11bc3cd40d4e396c708af4622c21cb","^3V",["^ ","^3W",null,"^3X",["^H",[]],"^3Y",["^11","^?","^57","^4<","^1:","^Y","^18","^5B","^17","^4Z","^12"]]],["^1N","goog/string/typedstring.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3V",["^ ","^3W",null,"^3X",["^H",[]],"^3Y",["^11"]]],["^1N","metabase/lib/schema/expression/string.cljc"],["b2d7de575aaaa880fdc88dfc31642c8e002c3669","^3V",["^ ","^3W",null,"^3X",["^H",[]],"^3Y",["^11","^?","^18","^5B"]]],["^1N","goog/object/object.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3V",["^ ","^3W",null,"^3X",["^H",[]],"^3Y",["^11"]]],["^1N","metabase/lib/schema/filter.cljc"],["0147dea423ebfd097bf1edb97f0325c9e2908a85","^3V",["^ ","^3W",null,"^3X",["^H",[]],"^3Y",["^11","^?","^Y","^18","^5B","^17","^12"]]],["^1N","goog/dom/asserts.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3V",["^ ","^3W",null,"^3X",["^H",[]],"^3Y",["^11","^4F"]]],"~:SHADOW-TIMESTAMP",[1689947046000,1689947046000,1689947050000],["^1N","metabase/lib/ref.cljc"],["86a9fbeddec3e58f7bb54e61f5342658b370fb3b","^3V",["^ ","^3W",null,"^3X",["^H",[]],"^3Y",["^11","^?","^1?","~$metabase.lib.schema.ref","^R"]]],["^1N","goog/math/long.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3V",["^ ","^3W",null,"^3X",["^H",[]],"^3Y",["^11","^4F","^4U"]]],["^1N","goog/html/trustedresourceurl.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3V",["^ ","^3W",null,"^3X",["^H",[]],"^3Y",["^11","^4F","~$goog.fs.blob","^4G","~$goog.html.SafeScript","~$goog.html.trustedtypes","^4I","^4J"]]],["^1N","schema/spec/leaf.cljc"],["0dacc3066a87f33088c9a332b6c21e8b0560011c","^3V",["^ ","^3W",null,"^3X",["^H",[]],"^3Y",["^11","^?","^5?"]]],["^1N","metabase/util/format.cljc"],["875f86a08288cb3ad5a6f15df988897eaf8613af","^3V",["^ ","^3W",null,"^3X",["^H",[]],"^3Y",["^11","^?","^4:"]]],["^1N","goog/math/irect.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3V",["^ ","^3W",null,"^3X",["^H",[]],"^3Y",["^11"]]],["^1N","goog/math/box.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3V",["^ ","^3W",null,"^3X",["^H",[]],"^3Y",["^11","^4F","^4R"]]],["^1N","metabase/lib/options.cljc"],["1870276153adf026e09a3e9ed1ba8beaad80e1c8","^3V",["^ ","^3W",null,"^3X",["^H",[]],"^3Y",["^11","^?","^Y","^W","^Z","^R"]]],["^1N","goog/string/internal.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3V",["^ ","^3W",null,"^3X",["^H",[]],"^3Y",["^11"]]],["^1N","clojure/test/check.cljc"],["f33d988fd57bc9c11af1952db81c10f319c91416","^3V",["^ ","^3W",null,"^3X",["^H",[]],"^3Y",["^11","^?","^53","^55","^59","^56","~$clojure.test.check.impl"]]],["^1N","goog/functions/functions.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3V",["^ ","^3W",null,"^3X",["^H",[]],"^3Y",["^11"]]],["^1N","metabase/lib/metadata.cljc"],["a8652a185953ef0e0b1c77d5540a4aa7271c0c63","^3V",["^ ","^3W",null,"^3X",["^H",[]],"^3Y",["^11","^?","~$metabase.lib.metadata.protocols","^Y","^4>","^10","^R","^12"]]],["^1N","goog/html/safestyle.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3V",["^ ","^3W",null,"^3X",["^H",[]],"^3Y",["^11","^4I","~$goog.html.SafeUrl","^4J","^4F","^41"]]],["^1N","goog/dom/safe.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3V",["^ ","^3W",null,"^3X",["^H",[]],"^3Y",["^11","^4F","~$goog.asserts.dom","~$goog.dom.asserts","~$goog.functions","~$goog.html.SafeHtml","^5G","~$goog.html.SafeStyle","^5K","^4H","~$goog.html.uncheckedconversions","^4I","^41"]]],["^1N","goog/asserts/dom.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3V",["^ ","^3W",null,"^3X",["^H",[]],"^3Y",["^11","^4M","^4F","~$goog.dom.element"]]],["^1N","medley/core.cljc"],["f5117fa4c15ff14c4a0ab7db414b0f102afb0b8a","^3V",["^ ","^3W",null,"^3X",["^H",[]],"^3Y",["^11","^?"]]],["^1N","clojure/walk.cljs"],["bc14df6666853ed869d7b88aaa864111c65d0c7f","^3V",["^ ","^3W",null,"^3X",["^H",[]],"^3Y",["^11","^?"]]],["^1N","metabase/lib/metadata/protocols.cljc"],["f5c81e2cab09f5dabb3cab711f7db1c5df1b398d","^3V",["^ ","^3W",null,"^3X",["^H",[]],"^3Y",["^11","^?"]]],["^1N","metabase/lib/schema/expression/conditional.cljc"],["226c4623394b90853fcb014e9a95e84ffc8bd6db","^3V",["^ ","^3W",null,"^3X",["^H",[]],"^3Y",["^11","^?","^46","^18","^5B","^4Z","^12"]]],["^1N","lambdaisland/glogi/console.cljs"],["76286836d4172602aa08006b2a754dda736ffe09","^3V",["^ ","^3W",null,"^3X",["^H",[]],"^3Y",["^11","^?","~$lambdaisland.glogi","~$lambdaisland.glogi.print","^4C","^4A"]]],["^1N","goog/html/safehtml.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3V",["^ ","^3W",null,"^3X",["^H",[]],"^3Y",["^11","^4I","^5G","^5P","^4P","^5K","^4M","^4H","^4J","^4F","^4[","^4B","^4C","^41","~$goog.dom.tags","^5H"]]],["^1N","goog/dom/tags.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3V",["^ ","^3W",null,"^3X",["^H",[]],"^3Y",["^11","^4C"]]],["^1N","goog/math/size.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3V",["^ ","^3W",null,"^3X",["^H",[]],"^3Y",["^11"]]],["^1N","malli/error.cljc"],["514c6f7d69d7e40b56fa75bfd1a49a683ca15982","^3V",["^ ","^3W",null,"^3X",["^H",[]],"^3Y",["^11","^?","^1A","^57","~$malli.util"]]],["^1N","metabase/lib/dispatch.cljc"],["914208cd51b78412eff1b402519bbb422845497a","^3V",["^ ","^3W",null,"^3X",["^H",[]],"^3Y",["^11","^?","^Z"]]],["^1N","metabase/util/malli.cljc"],["0f9ba23be6bb9fa629617001e985b988d2322b17","^3V",["^ ","^3W",null,"^3X",["^H",[]],"^3Y",["^11","^?","^?","^57","~$malli.destructure","~$malli.error","~$malli.generator","^5V","^W","^Z"]]],["^1N","goog/labs/useragent/engine.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3V",["^ ","^3W",null,"^3X",["^H",[]],"^3Y",["^11","^4B","^41","^42"]]],["^1N","goog/fs/blob.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3V",["^ ","^3W",null,"^3X",["^H",[]],"^3Y",["^11"]]],["^1N","metabase/mbql/schema/helpers.cljc"],["b1f6002b97b59423b504abb666e13c9b0228b768","^3V",["^ ","^3W",null,"^3X",["^H",[]],"^3Y",["^11","^?","^1A","^4Z","~$schema.core"]]],["^1N","goog/dom/dom.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3V",["^ ","^3W",null,"^3X",["^H",[]],"^3Y",["^11","^4B","^4F","^5L","~$goog.dom.BrowserFeature","^4L","^4M","^4N","^5O","^5Q","^4R","^4T","^4C","^4:","^4I","~$goog.string.Unicode","^4V"]]],["^1N","borkdude/dynaload.cljc"],["accd696ba364b850b4d92e38f5a34d0e828a0ad1","^3V",["^ ","^3W",null,"^3X",["^H",[]],"^3Y",["^11","^?"]]],["^1N","metabase/util/log.cljs"],["7d8a3bf01eb27c2ba7269dc90dc218e46bcc1d3a","^3V",["^ ","^3W",null,"^3X",["^H",[]],"^3Y",["^11","^?","^4@","^4:","^4;","^5S","~$lambdaisland.glogi.console"]]],["^1N","goog/asserts/asserts.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3V",["^ ","^3W",null,"^3X",["^H",[]],"^3Y",["^11","~$goog.debug.Error","^4L"]]],["^1N","goog/debug/relativetimeprovider.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3V",["^ ","^3W",null,"^3X",["^H",[]],"^3Y",["^11"]]],["^1N","malli/sci.cljc"],["514c6f7d69d7e40b56fa75bfd1a49a683ca15982","^3V",["^ ","^3W",null,"^3X",["^H",[]],"^3Y",["^11","^?","~$borkdude.dynaload"]]],["^1N","metabase/lib/schema/expression.cljc"],["f5c5c3ff3dc0f9a8b407cd7d06a68c6787061991","^3V",["^ ","^3W",null,"^3X",["^H",[]],"^3Y",["^11","^?","^1?","^1:","^Y","^W","^4Z","^R","^12"]]],["^1N","goog/math/rect.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3V",["^ ","^3W",null,"^3X",["^H",[]],"^3Y",["^11","^4F","^4Q","^4R","~$goog.math.IRect","^4T"]]],["^1N","flatland/ordered/map.cljs"],["3a9cb9d79e47d77ecd4f4d550371ecf01464c461","^3V",["^ ","^3W",null,"^3X",["^H",[]],"^3Y",["^11","^?"]]],["^1N","goog/uri/uri.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3V",["^ ","^3W",null,"^3X",["^H",[]],"^3Y",["^11","^4B","^4F","~$goog.collections.maps","^4:","~$goog.structs","~$goog.uri.utils","~$goog.uri.utils.ComponentIndex","~$goog.uri.utils.StandardQueryParam"]]],["^1N","metabase/util/malli/registry.cljc"],["921d4f259bbe54cbeb6b88ae56937df492bdfb5e","^3V",["^ ","^3W",null,"^3X",["^H",[]],"^3Y",["^11","^?","^57","^58","^5V"]]],["^1N","goog/labs/useragent/highentropy/highentropydata.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3V",["^ ","^3W",null,"^3X",["^H",[]],"^3Y",["^11","^43"]]],["^1N","metabase/types/coercion_hierarchies.cljc"],["c3d70ef6080e044d61f13ff6bfd76490e2dcd0ac","^3V",["^ ","^3W",null,"^3X",["^H",[]],"^3Y",["^11","^?","^46"]]],["^1N","goog/collections/maps.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3V",["^ ","^3W",null,"^3X",["^H",[]],"^3Y",["^11"]]],["^1N","metabase/lib/metadata/calculation.cljc"],["bbd3cc646a10312da5b543d7d353519f4c61f931","^3V",["^ ","^3W",null,"^3X",["^H",[]],"^3Y",["^11","^?","^1A","^1?","^1:","^S","^15","^P","^Y","^18","^17","^10","^W","^Z","^U","^R","^12"]]],["^1N","goog/debug/divconsole.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3V",["^ ","^3W",null,"^3X",["^H",[]],"^3Y",["^11","~$goog.debug.HtmlFormatter","~$goog.dom.DomHelper","^4M","^4N","^5O","^4P","^4@","^4I","~$goog.style"]]],["^1N","schema/spec/collection.cljc"],["0dacc3066a87f33088c9a332b6c21e8b0560011c","^3V",["^ ","^3W",null,"^3X",["^H",[]],"^3Y",["^11","^?","^5>","^5?"]]],["^1N","malli/impl/util.cljc"],["514c6f7d69d7e40b56fa75bfd1a49a683ca15982","^3V",["^ ","^3W",null,"^3X",["^H",[]],"^3Y",["^11","^?"]]],["^1N","metabase/lib/schema/order_by.cljc"],["3f577f71e4ecba1aa1061f2228f6026ab45312ff","^3V",["^ ","^3W",null,"^3X",["^H",[]],"^3Y",["^11","^?","^18","^5B","^12"]]],["^1N","schema/utils.cljc"],["0dacc3066a87f33088c9a332b6c21e8b0560011c","^3V",["^ ","^3W",null,"^3X",["^H",[]],"^3Y",["^11","^?","^4;","^4C","^4:","^1A"]]],["^1N","metabase/lib/schema/aggregation.cljc"],["ea4a70903cfc3ffeaa60ebdedb5ea00892da4dbe","^3V",["^ ","^3W",null,"^3X",["^H",[]],"^3Y",["^11","^?","^1:","^18","^5B","^W","^12"]]],["^1N","cljs/core/match.cljs"],["f419c02deee501e9f4b29f81215ba81ffcefe9b6","^3V",["^ ","^3W",null,"^3X",["^H",[]],"^3Y",["^11","^?"]]],["^1N","goog/debug/fancywindow.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3V",["^ ","^3W",null,"^3X",["^H",[]],"^3Y",["^11","^4B","^4F","~$goog.debug.DebugWindow","^6;","^4M","^4N","^5O","^4P","^4@","^4C","^4:","^4I","^4V"]]],["^1N","goog/debug/formatter.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3V",["^ ","^3W",null,"^3X",["^H",[]],"^3Y",["^11","~$goog.debug","~$goog.debug.RelativeTimeProvider","^5O","^5K","^5Q","^4@","^4I"]]],["^1N","metabase/shared/util/namespaces.cljs"],["00687008abd6eb291bc9d5ff1fff73210e0bbe6e","^3V",["^ ","^3W",null,"^3X",["^H",[]],"^3Y",["^11","^?"]]],["^1N","metabase/mbql/util/match/impl.cljc"],["4150e01975339d308f5cfedda77875eda19c030d","^3V",["^ ","^3W",null,"^3X",["^H",[]],"^3Y",["^11","^?"]]],["^1N","goog/fs/url.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3V",["^ ","^3W",null,"^3X",["^H",[]],"^3Y",["^11"]]],["^1N","goog/base.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3V",["^ ","^3W",null,"^3X",["^H",[]],"^3Y",[]]],["^1N","goog/structs/structs.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3V",["^ ","^3W",null,"^3X",["^H",[]],"^3Y",["^11","^4B","^4C"]]],["^1N","clojure/string.cljs"],["bc14df6666853ed869d7b88aaa864111c65d0c7f","^3V",["^ ","^3W",null,"^3X",["^H",[]],"^3Y",["^11","^?","^4:","^5@"]]],["^1N","metabase/lib/schema/temporal_bucketing.cljc"],["9cb7bba3e46e1de2fbb37d61df332336da6d9f66","^3V",["^ ","^3W",null,"^3X",["^H",[]],"^3Y",["^11","^?","^46","^12"]]],["^1N","metabase/util.cljc"],["2eb945a6741f1450ecac08a9087b862ce52b9e3a","^3V",["^ ","^3W",null,"^3X",["^H",[]],"^3Y",["^11","^?","~$camel-snake-kebab.internals.macros","~$clojure.data","^C","^46","^1A","^5<","~$flatland.ordered.map","^4<","^W","~$metabase.shared.util.namespaces","~$metabase.util.format","^U","~$net.cgrand.macrovich","~$weavejester.dependency"]]],["^1N","clojure/test/check/random/longs/bit_count_impl.cljs"],["f33d988fd57bc9c11af1952db81c10f319c91416","^3V",["^ ","^3W",null,"^3X",["^H",[]],"^3Y",["^11","^?"]]],["^1N","malli/impl/regex.cljc"],["514c6f7d69d7e40b56fa75bfd1a49a683ca15982","^3V",["^ ","^3W",null,"^3X",["^H",[]],"^3Y",["^11","^?","^5="]]],["^1N","camel_snake_kebab/internals/macros.cljc"],["5ae08f83ceb8959971e6334596bff0214bf6fdf2","^3V",["^ ","^3W",null,"^3X",["^H",[]],"^3Y",["^11","^?","~$camel-snake-kebab.internals.alter-name","~$camel-snake-kebab.internals.misc"]]],["^1N","metabase/lib/schema/expression/temporal.cljc"],["f1f22c1655e7d335b884a22b010f2b8b08ad1e94","^3V",["^ ","^3W",null,"^3X",["^H",[]],"^3Y",["^11","^?","^46","^57","^1:","^Y","^18","~$metabase.lib.schema.literal","^5B","^17","^12","^4X","^4Y"]]],["^1N","goog/string/string.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3V",["^ ","^3W",null,"^3X",["^H",[]],"^3Y",["^11","^4N","^5Q","^4I","^41"]]],["^1N","schema/core.cljc"],["0dacc3066a87f33088c9a332b6c21e8b0560011c","^3V",["^ ","^3W",null,"^3X",["^H",[]],"^3Y",["^11","^?","^1A","^5>","^5?","~$schema.spec.leaf","~$schema.spec.variant","~$schema.spec.collection"]]],["^1N","metabase/mbql/schema.cljc"],["c51bf2a180ecbc12d6a1cd42a4049323f46a0085","^3V",["^ ","^3W",null,"^3X",["^H",[]],"^3Y",["^11","^?","^4X","^4Y","^?","^46","~$metabase.mbql.schema.helpers","~$metabase.mbql.schema.macros","^5Z"]]],["^1N","metabase/mbql/util/match.cljs"],["d65aaa9fbcb7960b90ba7ca97258b1dc8a40be2b","^3V",["^ ","^3W",null,"^3X",["^H",[]],"^3Y",["^11","^?","^E","~$metabase.mbql.util.match.impl"]]],["^1N","malli/core.cljc"],["514c6f7d69d7e40b56fa75bfd1a49a683ca15982","^3V",["^ ","^3W",null,"^3X",["^H",[]],"^3Y",["^11","^?","^?","~$malli.impl.regex","^5=","^58","~$malli.sci"]]],["^1N","metabase/lib/schema.cljc"],["122fe4013d55087fc7287141eb7dc6f630436424","^3V",["^ ","^3W",null,"^3X",["^H",[]],"^3Y",["^11","^?","~$metabase.lib.schema.aggregation","^Y","^18","~$metabase.lib.schema.expression.arithmetic","~$metabase.lib.schema.expression.conditional","~$metabase.lib.schema.expression.string","~$metabase.lib.schema.expression.temporal","~$metabase.lib.schema.filter","^4>","~$metabase.lib.schema.join","^6I","~$metabase.lib.schema.order-by","^5E","~$metabase.lib.schema.template-tag","~$metabase.lib.schema.util","~$metabase.mbql.util.match","^12"]]],["^1N","clojure/data.cljs"],["bc14df6666853ed869d7b88aaa864111c65d0c7f","^3V",["^ ","^3W",null,"^3X",["^H",[]],"^3Y",["^11","^?","^46"]]],["^1N","goog/reflect/reflect.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3V",["^ ","^3W",null,"^3X",["^H",[]],"^3Y",["^11"]]],["^1N","goog/labs/useragent/util.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3V",["^ ","^3W",null,"^3X",["^H",[]],"^3Y",["^11","^41","^45"]]],["^1N","goog/debug/debug.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3V",["^ ","^3W",null,"^3X",["^H",[]],"^3Y",["^11","^4B","~$goog.debug.errorcontext"]]],["^1N","goog/string/stringbuffer.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3V",["^ ","^3W",null,"^3X",["^H",[]],"^3Y",["^11"]]],["^1N","schema/spec/core.cljc"],["0dacc3066a87f33088c9a332b6c21e8b0560011c","^3V",["^ ","^3W",null,"^3X",["^H",[]],"^3Y",["^11","^?","^5>"]]],["^4W","ttag"],["^40","shadow.js.shim.module$ttag.js","require","^3V",["^ ","^3W",null,"^3X",["^H",[]],"^3Y",["^11"]]],["^1N","goog/math/coordinate.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3V",["^ ","^3W",null,"^3X",["^H",[]],"^3Y",["^11","~$goog.math"]]],["^1N","goog/debug/errorcontext.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3V",["^ ","^3W",null,"^3X",["^H",[]],"^3Y",["^11"]]],["^1N","goog/labs/useragent/useragent.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3V",["^ ","^3W",null,"^3X",["^H",[]],"^3Y",["^11","~$goog.flags"]]],["^1N","goog/dom/element.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3V",["^ ","^3W",null,"^3X",["^H",[]],"^3Y",["^11","^4L","^4M"]]],["^1N","goog/html/uncheckedconversions.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3V",["^ ","^3W",null,"^3X",["^H",[]],"^3Y",["^11","^4F","^5O","^5G","^5P","^4P","^5K","^4H","^4I","^41"]]],["^1N","goog/debug/debugwindow.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3V",["^ ","^3W",null,"^3X",["^H",[]],"^3Y",["^11","^6:","^4N","^5O","^4P","^4@","^4I","~$goog.structs.CircularBuffer","^4V"]]],["^1N","metabase/mbql/util.cljc"],["2532d5faa94d2a89dd06e529c641d594e298e2aa","^3V",["^ ","^3W",null,"^3X",["^H",[]],"^3Y",["^11","^?","^1A","~$metabase.mbql.predicates","^5A","^6M","^70","^W","^5Z"]]],["^1N","goog/dom/htmlelement.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3V",["^ ","^3W",null,"^3X",["^H",[]],"^3Y",["^11"]]],["^1N","cljs/core.cljs"],["bc14df6666853ed869d7b88aaa864111c65d0c7f","^3V",["^ ","^3W",null,"^3X",["^H",[]],"^3Y",["^11","~$goog.math.Long","~$goog.math.Integer","^4:","^4C","^4B","^48","^5@"]]],["^1N","goog/html/safescript.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3V",["^ ","^3W",null,"^3X",["^H",[]],"^3Y",["^11","^4I","^4J","^5H","^4F"]]],["^1N","clojure/test/check/random/longs.cljs"],["f33d988fd57bc9c11af1952db81c10f319c91416","^3V",["^ ","^3W",null,"^3X",["^H",[]],"^3Y",["^11","^?","~$clojure.test.check.random.longs.bit-count-impl","^76","^?"]]],["^1N","goog/log/log.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3V",["^ ","^3W",null,"^3X",["^H",[]],"^3Y",["^11","^4F","^6>"]]],["^1N","camel_snake_kebab/internals/alter_name.cljc"],["5ae08f83ceb8959971e6334596bff0214bf6fdf2","^3V",["^ ","^3W",null,"^3X",["^H",[]],"^3Y",["^11","^?"]]],["^1N","goog/html/safestylesheet.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3V",["^ ","^3W",null,"^3X",["^H",[]],"^3Y",["^11","^4I","^5P","^4J","^4C","^4F","^41"]]],["^1N","goog/math/integer.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3V",["^ ","^3W",null,"^3X",["^H",[]],"^3Y",["^11","^4U"]]],["^1N","goog/debug/console.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3V",["^ ","^3W",null,"^3X",["^H",[]],"^3Y",["^11","~$goog.debug.TextFormatter","^4@"]]],["^1N","lambdaisland/glogi/print.cljs"],["76286836d4172602aa08006b2a754dda736ffe09","^3V",["^ ","^3W",null,"^3X",["^H",[]],"^3Y",["^11","^?","^5S","^4C"]]],["^1N","goog/dom/browserfeature.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3V",["^ ","^3W",null,"^3X",["^H",[]],"^3Y",["^11","^4V"]]],["^1N","clojure/set.cljs"],["bc14df6666853ed869d7b88aaa864111c65d0c7f","^3V",["^ ","^3W",null,"^3X",["^H",[]],"^3Y",["^11","^?"]]],["^1N","goog/uri/utils.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3V",["^ ","^3W",null,"^3X",["^H",[]],"^3Y",["^11","^4F","^4:"]]],["^1N","goog/string/const.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3V",["^ ","^3W",null,"^3X",["^H",[]],"^3Y",["^11","^4F","^4J"]]],["^1N","metabase/lib/schema/id.cljc"],["7cdfc70702a9a9e04b75ca7c9dc898ddf546f99d","^3V",["^ ","^3W",null,"^3X",["^H",[]],"^3Y",["^11","^?","^Y","^5A","^12"]]],["^1N","goog/dom/vendor.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3V",["^ ","^3W",null,"^3X",["^H",[]],"^3Y",["^11","^4:","^4V"]]],["^1N","metabase/lib/schema/literal.cljc"],["f8f31bfaef820ab25b896b49fd404b937d0df64e","^3V",["^ ","^3W",null,"^3X",["^H",[]],"^3Y",["^11","^?","^57","^Y","^18","^5B","^12"]]],["^1N","metabase/lib/hierarchy.cljc"],["c9d228603522de5c85546fb645c59736d4eb94d2","^3V",["^ ","^3W",null,"^3X",["^H",[]],"^3Y",["^11","^?"]]],["^1N","metabase/mbql/predicates.cljc"],["20ab1a5ccd943c35c646c5f7396ea40f9bfa7ac4","^3V",["^ ","^3W",null,"^3X",["^H",[]],"^3Y",["^11","^?","^5A","^5Z"]]],["^1N","clojure/test/check/results.cljc"],["f33d988fd57bc9c11af1952db81c10f319c91416","^3V",["^ ","^3W",null,"^3X",["^H",[]],"^3Y",["^11","^?"]]],["^4W","crc-32"],["^49","shadow.js.shim.module$crc_32.js","require","^3V",["^ ","^3W",null,"^3X",["^H",[]],"^3Y",["^11"]]],["^1N","metabase/lib/schema/join.cljc"],["924e0ca4abbab776fa05357d6d22bafb8a596648","^3V",["^ ","^3W",null,"^3X",["^H",[]],"^3Y",["^11","^?","^Y","^18","^W","^12"]]]]],"~:clj-info",["^ ","jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/analyzer/impl.cljc",1689947050000,"jar:file:/root/.m2/repository/instaparse/instaparse/1.4.12/instaparse-1.4.12.jar!/instaparse/line_col.clj",1689946146000,"jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/source_map/base64_vlq.clj",1689947050000,"jar:file:/root/.m2/repository/instaparse/instaparse/1.4.12/instaparse-1.4.12.jar!/instaparse/viz.clj",1689946146000,"jar:file:/root/.m2/repository/org/clojure/tools.namespace/1.4.4/tools.namespace-1.4.4.jar!/clojure/tools/namespace/parse.cljc",1689946139000,"jar:file:/root/.m2/repository/weavejester/dependency/0.2.1/dependency-0.2.1.jar!/weavejester/dependency.cljc",1689946093000,"jar:file:/root/.m2/repository/instaparse/instaparse/1.4.12/instaparse-1.4.12.jar!/instaparse/transform.clj",1689946146000,"jar:file:/root/.m2/repository/ring/ring-codec/1.2.0/ring-codec-1.2.0.jar!/ring/util/codec.clj",1689946172000,"file:/home/gmrworkspace/dashboard/src/metabase/lib/hierarchy.cljc",1690286812000,"jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/instant.clj",1689947050000,"jar:file:/root/.m2/repository/org/clojure/tools.reader/1.3.6/tools.reader-1.3.6.jar!/clojure/tools/reader/default_data_readers.clj",1689946174000,"jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/pprint.cljc",1689947050000,"jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/externs.clj",1689947050000,"file:/home/gmrworkspace/dashboard/shared/src/metabase/mbql/util/match.clj",1690286812000,"jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/vendor/clojure/tools/reader/default_data_readers.clj",1689947050000,"file:/home/gmrworkspace/dashboard/shared/src/metabase/mbql/schema/helpers.cljc",1692013156305,"jar:file:/root/.m2/repository/prismatic/schema/1.4.1/schema-1.4.1.jar!/schema/core.cljc",1689946172000,"file:/home/gmrworkspace/dashboard/shared/src/metabase/shared/util/i18n.clj",1690286812000,"jar:file:/root/.m2/repository/org/clojure/tools.reader/1.3.6/tools.reader-1.3.6.jar!/clojure/tools/reader/edn.clj",1689946174000,"jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/compiler.cljc",1689947050000,"jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/env.cljc",1689947050000,"jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/analyzer/impl/namespaces.cljc",1689947050000,"jar:file:/root/.m2/repository/prismatic/schema/1.4.1/schema-1.4.1.jar!/schema/macros.clj",1689946172000,"file:/home/gmrworkspace/dashboard/src/metabase/util/i18n/plural.clj",1690286813000,"jar:file:/root/.m2/repository/metosin/malli/0.10.2/malli-0.10.2.jar!/malli/core.cljc",1689946170000,"jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/source_map.clj",1689947050000,"jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/util.cljc",1689947050000,"file:/home/gmrworkspace/dashboard/src/metabase/util.cljc",1690286813000,"jar:file:/root/.m2/repository/nano-id/nano-id/1.0.0/nano-id-1.0.0.jar!/nano_id/core.cljc",1689946171000,"file:/home/gmrworkspace/dashboard/src/metabase/lib/dispatch.cljc",1690286812000,"file:/home/gmrworkspace/dashboard/src/metabase/lib/schema/common.cljc",1690286812000,"file:/home/gmrworkspace/dashboard/src/metabase/plugins/classloader.clj",1692013156125,"jar:file:/root/.m2/repository/medley/medley/1.4.0/medley-1.4.0.jar!/medley/core.cljc",1689946185000,"jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/analyzer.cljc",1689947050000,"jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/analyzer/passes.cljc",1689947050000,"jar:file:/root/.m2/repository/org/clojure/test.check/1.1.1/test.check-1.1.1.jar!/clojure/test/check/random.clj",1689946177000,"jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/vendor/clojure/data/json.clj",1689947050000,"file:/home/gmrworkspace/dashboard/src/metabase/util/format.cljc",1690286813000,"jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/source_map/base64.clj",1689947050000,"jar:file:/root/.m2/repository/riddley/riddley/0.2.0/riddley-0.2.0.jar!/riddley/walk.clj",1689946160000,"file:/home/gmrworkspace/dashboard/src/metabase/lib/schema/ref.cljc",1690286812000,"jar:file:/root/.m2/repository/instaparse/instaparse/1.4.12/instaparse-1.4.12.jar!/instaparse/reduction.clj",1689946146000,"jar:file:/root/.m2/repository/org/tcrawley/dynapath/1.1.0/dynapath-1.1.0.jar!/dynapath/util.clj",1689946174000,"jar:file:/root/.m2/repository/camel-snake-kebab/camel-snake-kebab/0.4.3/camel-snake-kebab-0.4.3.jar!/camel_snake_kebab/internals/macros.cljc",1689946178000,"file:/home/gmrworkspace/dashboard/shared/src/metabase/mbql/util/match/impl.cljc",1690286812000,"jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/vendor/clojure/tools/reader/reader_types.clj",1689947050000,"jar:file:/root/.m2/repository/instaparse/instaparse/1.4.12/instaparse-1.4.12.jar!/instaparse/auto_flatten_seq.clj",1689946146000,"jar:file:/root/.m2/repository/instaparse/instaparse/1.4.12/instaparse-1.4.12.jar!/instaparse/core.clj",1689946146000,"jar:file:/root/.m2/repository/metosin/malli/0.10.2/malli-0.10.2.jar!/malli/generator.cljc",1689946170000,"file:/home/gmrworkspace/dashboard/src/metabase/lib/schema/id.cljc",1690286812000,"jar:file:/root/.m2/repository/org/clojure/core.cache/1.0.225/core.cache-1.0.225.jar!/clojure/core/cache.clj",1689946183000,"file:/home/gmrworkspace/dashboard/src/metabase/lib/schema/expression.cljc",1690286812000,"jar:file:/root/.m2/repository/metosin/malli/0.10.2/malli-0.10.2.jar!/malli/sci.cljc",1689946170000,"jar:file:/root/.m2/repository/potemkin/potemkin/0.4.6/potemkin-0.4.6.jar!/potemkin/types.clj",1689946176000,"jar:file:/root/.m2/repository/org/clojure/test.check/1.1.1/test.check-1.1.1.jar!/clojure/test/check/properties.cljc",1689946177000,"jar:file:/root/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/set.clj",1689946092000,"jar:file:/root/.m2/repository/org/clojure/math.numeric-tower/0.0.5/math.numeric-tower-0.0.5.jar!/clojure/math/numeric_tower.clj",1689946148000,"jar:file:/root/.m2/repository/net/cgrand/macrovich/0.2.1/macrovich-0.2.1.jar!/net/cgrand/macrovich.cljc",1689946165000,"jar:file:/root/.m2/repository/colorize/colorize/0.1.1/colorize-0.1.1.jar!/colorize/core.clj",1689946104000,"jar:file:/root/.m2/repository/borkdude/dynaload/0.3.5/dynaload-0.3.5.jar!/borkdude/dynaload.cljc",1689946165000,"jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/vendor/clojure/tools/reader/impl/inspect.clj",1689947050000,"file:/home/gmrworkspace/dashboard/src/metabase/lib/options.cljc",1692013156125,"jar:file:/root/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/string.clj",1689946092000,"jar:file:/root/.m2/repository/potemkin/potemkin/0.4.6/potemkin-0.4.6.jar!/potemkin.clj",1689946176000,"jar:file:/root/.m2/repository/instaparse/instaparse/1.4.12/instaparse-1.4.12.jar!/instaparse/failure.clj",1689946146000,"jar:file:/root/.m2/repository/prismatic/schema/1.4.1/schema-1.4.1.jar!/schema/spec/variant.cljc",1689946172000,"jar:file:/root/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/core.clj",1689946092000,"file:/home/gmrworkspace/dashboard/src/metabase/util/i18n/impl.clj",1692013156125,"jar:file:/root/.m2/repository/org/clojure/tools.namespace/1.4.4/tools.namespace-1.4.4.jar!/clojure/tools/namespace/dependency.cljc",1689946139000,"jar:file:/root/.m2/repository/prismatic/schema/1.4.1/schema-1.4.1.jar!/schema/spec/leaf.cljc",1689946172000,"jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/analyzer/passes/and_or.cljc",1689947050000,"jar:file:/root/.m2/repository/org/clojure/test.check/1.1.1/test.check-1.1.1.jar!/clojure/test/check.cljc",1689946177000,"jar:file:/root/.m2/repository/riddley/riddley/0.2.0/riddley-0.2.0.jar!/riddley/compiler.clj",1689946160000,"jar:file:/root/.m2/repository/org/clojure/core.memoize/1.0.257/core.memoize-1.0.257.jar!/clojure/core/memoize.clj",1689946178000,"jar:file:/root/.m2/repository/metosin/malli/0.10.2/malli-0.10.2.jar!/malli/destructure.cljc",1689946170000,"jar:file:/root/.m2/repository/instaparse/instaparse/1.4.12/instaparse-1.4.12.jar!/instaparse/print.clj",1689946146000,"jar:file:/root/.m2/repository/org/clojure/tools.namespace/1.4.4/tools.namespace-1.4.4.jar!/clojure/tools/namespace/track.cljc",1689946139000,"jar:file:/root/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/pprint.clj",1689946092000,"jar:file:/root/.m2/repository/org/clojure/java.classpath/1.0.0/java.classpath-1.0.0.jar!/clojure/java/classpath.clj",1689946162000,"jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/js_deps.cljc",1689947050000,"jar:file:/root/.m2/repository/metosin/malli/0.10.2/malli-0.10.2.jar!/malli/impl/regex.cljc",1689946170000,"jar:file:/root/.m2/repository/cheshire/cheshire/5.11.0/cheshire-5.11.0.jar!/cheshire/factory.clj",1689946173000,"jar:file:/root/.m2/repository/org/clojure/tools.reader/1.3.6/tools.reader-1.3.6.jar!/clojure/tools/reader/impl/errors.clj",1689946174000,"jar:file:/root/.m2/repository/metosin/malli/0.10.2/malli-0.10.2.jar!/malli/experimental.cljc",1689946170000,"jar:file:/root/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/walk.clj",1689946092000,"jar:file:/root/.m2/repository/org/clojure/tools.reader/1.3.6/tools.reader-1.3.6.jar!/clojure/tools/reader.clj",1689946174000,"file:/home/gmrworkspace/dashboard/src/metabase/lib/common.cljc",1690286812000,"jar:file:/root/.m2/repository/prismatic/schema/1.4.1/schema-1.4.1.jar!/schema/spec/core.cljc",1689946172000,"jar:file:/root/.m2/repository/org/clojure/test.check/1.1.1/test.check-1.1.1.jar!/clojure/test/check/generators.cljc",1689946177000,"jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/core.cljc",1689947050000,"jar:file:/root/.m2/repository/cheshire/cheshire/5.11.0/cheshire-5.11.0.jar!/cheshire/generate.clj",1689946173000,"jar:file:/root/.m2/repository/metosin/malli/0.10.2/malli-0.10.2.jar!/malli/experimental/time.cljc",1689946170000,"jar:file:/root/.m2/repository/org/clojure/tools.reader/1.3.6/tools.reader-1.3.6.jar!/clojure/tools/reader/reader_types.clj",1689946174000,"file:/home/gmrworkspace/dashboard/shared/src/metabase/mbql/schema.cljc",1692013156305,"jar:file:/root/.m2/repository/cheshire/cheshire/5.11.0/cheshire-5.11.0.jar!/cheshire/parse.clj",1689946173000,"file:/home/gmrworkspace/dashboard/src/metabase/util/i18n.clj",1692013156125,"jar:file:/root/.m2/repository/instaparse/instaparse/1.4.12/instaparse-1.4.12.jar!/instaparse/cfg.clj",1689946146000,"jar:file:/root/.m2/repository/cheshire/cheshire/5.11.0/cheshire-5.11.0.jar!/cheshire/core.clj",1689946173000,"jar:file:/root/.m2/repository/metosin/malli/0.10.2/malli-0.10.2.jar!/malli/impl/util.cljc",1689946170000,"jar:file:/root/.m2/repository/metosin/malli/0.10.2/malli-0.10.2.jar!/malli/registry.cljc",1689946170000,"jar:file:/root/.m2/repository/instaparse/instaparse/1.4.12/instaparse-1.4.12.jar!/instaparse/gll.clj",1689946146000,"jar:file:/root/.m2/repository/metosin/malli/0.10.2/malli-0.10.2.jar!/malli/instrument.clj",1689946170000,"jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/vendor/clojure/tools/reader.clj",1689947050000,"jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/spec/gen/alpha.cljc",1689947050000,"file:/home/gmrworkspace/dashboard/src/metabase/lib/ref.cljc",1690286812000,"jar:file:/root/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/edn.clj",1689946092000,"jar:file:/root/.m2/repository/nano-id/nano-id/1.0.0/nano-id-1.0.0.jar!/nano_id/random.cljc",1689946171000,"jar:file:/root/.m2/repository/environ/environ/1.2.0/environ-1.2.0.jar!/environ/core.cljc",1689946163000,"jar:file:/root/.m2/repository/prismatic/schema/1.4.1/schema-1.4.1.jar!/schema/spec/collection.cljc",1689946172000,"jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/vendor/clojure/tools/reader/impl/errors.clj",1689947050000,"jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/tagged_literals.cljc",1689947050000,"jar:file:/root/.m2/repository/instaparse/instaparse/1.4.12/instaparse-1.4.12.jar!/instaparse/repeat.clj",1689946146000,"jar:file:/root/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/java/io.clj",1689946092000,"jar:file:/root/.m2/repository/org/clojure/test.check/1.1.1/test.check-1.1.1.jar!/clojure/test/check/results.cljc",1689946177000,"jar:file:/root/.m2/repository/com/lambdaisland/glogi/1.2.164/glogi-1.2.164.jar!/lambdaisland/glogi.clj",1689947043000,"jar:file:/root/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/instant.clj",1689946092000,"file:/home/gmrworkspace/dashboard/shared/src/metabase/shared/util/namespaces.clj",1690286812000,"jar:file:/root/.m2/repository/org/clojure/tools.namespace/1.4.4/tools.namespace-1.4.4.jar!/clojure/tools/namespace/file.clj",1689946139000,"jar:file:/root/.m2/repository/org/clojure/core.match/1.0.1/core.match-1.0.1.jar!/cljs/core/match.clj",1689946174000,"jar:file:/root/.m2/repository/org/clojure/spec.alpha/0.3.218/spec.alpha-0.3.218.jar!/clojure/spec/gen/alpha.clj",1689946117000,"jar:file:/root/.m2/repository/metosin/malli/0.10.2/malli-0.10.2.jar!/malli/error.cljc",1689946170000,"file:/home/gmrworkspace/dashboard/shared/src/metabase/mbql/schema/macros.clj",1690286812000,"jar:file:/root/.m2/repository/prismatic/schema/1.4.1/schema-1.4.1.jar!/schema/utils.cljc",1689946172000,"file:/home/gmrworkspace/dashboard/src/metabase/util/malli/registry.cljc",1690286813000,"file:/home/gmrworkspace/dashboard/src/metabase/config.clj",1692013154929,"file:/home/gmrworkspace/dashboard/src/metabase/util/log.clj",1690286813000,"file:/home/gmrworkspace/dashboard/src/metabase/util/malli.cljc",1690286813000,"jar:file:/root/.m2/repository/org/clojure/test.check/1.1.1/test.check-1.1.1.jar!/clojure/test/check/rose_tree.cljc",1689946177000,"jar:file:/root/.m2/repository/org/clojure/tools.reader/1.3.6/tools.reader-1.3.6.jar!/clojure/tools/reader/impl/inspect.clj",1689946174000,"jar:file:/root/.m2/repository/instaparse/instaparse/1.4.12/instaparse-1.4.12.jar!/instaparse/combinators_source.clj",1689946146000,"jar:file:/root/.m2/repository/instaparse/instaparse/1.4.12/instaparse-1.4.12.jar!/instaparse/abnf.clj",1689946146000,"jar:file:/root/.m2/repository/org/clojure/tools.namespace/1.4.4/tools.namespace-1.4.4.jar!/clojure/tools/namespace/find.clj",1689946139000,"jar:file:/root/.m2/repository/org/tcrawley/dynapath/1.1.0/dynapath-1.1.0.jar!/dynapath/dynamic_classpath.clj",1689946174000,"file:/home/gmrworkspace/dashboard/src/metabase/lib/schema/temporal_bucketing.cljc",1690286812000,"jar:file:/root/.m2/repository/cheshire/cheshire/5.11.0/cheshire-5.11.0.jar!/cheshire/generate_seq.clj",1689946173000,"file:/home/gmrworkspace/dashboard/src/metabase/lib/schema/mbql_clause.cljc",1690286812000,"jar:file:/root/.m2/repository/metosin/malli/0.10.2/malli-0.10.2.jar!/malli/util.cljc",1689946170000,"file:/home/gmrworkspace/dashboard/src/metabase/util/jvm.clj",1692013156125],"~:analyzer",["^ ","^3",null,"^4",["^ "],"^5",["^ ","^6","metabase/lib/metadata/calculation.cljc","^7",1,"^8",5,"^9",1,"^:",38],"^;",["^ ","^<","^=","^>","^?","^@","^A","^B","^C","^D","^E"],"^F",null,"^G",["^H",[]],"^I","^J","^K",["^ "],"^N",null,"^O",["^ ","^P","^P","^Q","^R","^S","^S","^T","^U","^V","^W","^X","^Y","~$u","^Z","^[","^S","^?","^?","^10","^10","^11","^11","^12","^12","^13","^P","^Y","^Y","^14","^15","^16","^17","^18","^18","^19","^1:","^1;","^18","^Z","^Z","^1<","^12","^W","^W","^1=","^10","^1>","^1?","^R","^R","^U","^U","^1@","^1A","^1:","^1:","^15","^15","^1A","^1A","^1?","^1?","^17","^17"],"^1B",["^H",["^1C"]],"~:shadow/js-access-global",["^H",["Error"]],"^1D",null,"~:defs",["^ ","~$returned-columns",["^ ","~:schema",["~:function",["~:=>",["~:cat","~:any"],["~:maybe","~$ColumnsWithUniqueAliases"]],["^:G",["^:H","^:I","^:I"],["^:J","^:K"]],["^:G",["^:H","^:I","^:I","^:I"],["^:J","^:K"]],["^:G",["^:H","~:metabase.lib.schema/query","~:int","^:I",["^:J","~$ReturnedColumnsOptions"]],["^:J","^:K"]]],"~:validate!","id48667","~:protocol-inline",null,"^5",["^ ","^:E",["^:F",["^:G",["^:H","^:I"],["^:J","^:K"]],["^:G",["^:H","^:I","^:I"],["^:J","^:K"]],["^:G",["^:H","^:I","^:I","^:I"],["^:J","^:K"]],["^:G",["^:H","^:L","^:M","^:I",["^:J","^:N"]],["^:J","^:K"]]],"^:O","id48667","^6","metabase/lib/metadata/calculation.cljc","^:",26,"~:top-fn",["^ ","~:variadic?",false,"~:fixed-arity",4,"~:max-fixed-arity",4,"~:method-params",[["~$query"],["^:V","~$x"],["^:V","~$stage-number","~$x"],["^:V","^:W","~$x","~$options"]],"~:arglists",["^1G",[["^:V"],["^:V","~$x"],["^:V","^:W","~$x"],["^:V","^:W","~$x","^:X"]]],"~:arglists-meta",["^1G",[null,null,null,null]]],"^8",10,"~:raw-arglists",["^1G",["~$quote",["^1G",[["^:V"],["^:V","~$x"],["^:V","^:W","~$x"],["^:V","~:-","^:L","^:W","~:-","^:M","~$x","^:X","~:-",["^:J","^:N"]]]]]],"^7",424,"^9",424,"^:Y",["^1G",["^;0",["^1G",[["^:V"],["^:V","~$x"],["^:V","^:W","~$x"],["^:V","^:W","~$x","^:X"]]]]],"~:doc","Inputs: ([query]\n           [query x]\n           [query stage-number x]\n           [query :- :metabase.lib.schema/query stage-number :- :int x options :- [:maybe ReturnedColumnsOptions]])\n  Return: [:maybe ColumnsWithUniqueAliases]\n          \n\n  Return a sequence of metadata maps for all the columns expected to be 'returned' at a query, stage of the query, or\n  join, and include the `:lib/source` of where they came from. This should only include columns that will be present\n  in the results; DOES NOT include 'expected' columns that are not 'exported' to subsequent stages.\n\n  See [[ReturnedColumnsOptions]] for allowed options and [[default-returned-columns-options]] for default values."],"^I","^2Z","^6","metabase/lib/metadata/calculation.cljc","^:",26,"^:Q",["^ ","^:R",false,"^:S",4,"^:T",4,"^:U",[["^:V"],["^:V","~$x"],["^:V","^:W","~$x"],["^:V","^:W","~$x","^:X"]],"^:Y",["^1G",[["^:V"],["^:V","~$x"],["^:V","^:W","~$x"],["^:V","^:W","~$x","^:X"]]],"^:Z",["^1G",[null,null,null,null]]],"^:U",[["^:V"],["^:V","~$x"],["^:V","^:W","~$x"],["^:V","^:W","~$x","^:X"]],"~:protocol-impl",null,"^:S",4,"^:Z",["^1G",[null,null,null,null]],"^8",1,"^:R",false,"~:methods",[["^ ","^:S",1,"^:R",false,"~:tag","~$any"],["^ ","^:S",2,"^:R",false,"^;4","^;5"],["^ ","^:S",3,"^:R",false,"^;4","^;5"],["^ ","^:S",4,"^:R",false,"^;4","^;5"]],"^:[",["^1G",["^;0",["^1G",[["^:V"],["^:V","~$x"],["^:V","^:W","~$x"],["^:V","~:-","^:L","^:W","~:-","^:M","~$x","^:X","~:-",["^:J","^:N"]]]]]],"^7",424,"^9",424,"^:T",4,"~:fn-var",true,"^:Y",["^1G",[["^:V"],["^:V","~$x"],["^:V","^:W","~$x"],["^:V","^:W","~$x","^:X"]]],"^;1","Inputs: ([query]\n           [query x]\n           [query stage-number x]\n           [query :- :metabase.lib.schema/query stage-number :- :int x options :- [:maybe ReturnedColumnsOptions]])\n  Return: [:maybe ColumnsWithUniqueAliases]\n          \n\n  Return a sequence of metadata maps for all the columns expected to be 'returned' at a query, stage of the query, or\n  join, and include the `:lib/source` of where they came from. This should only include columns that will be present\n  in the results; DOES NOT include 'expected' columns that are not 'exported' to subsequent stages.\n\n  See [[ReturnedColumnsOptions]] for allowed options and [[default-returned-columns-options]] for default values."],"~$describe-query",["^ ","^:E",["^:G",["^:H","^:I"],"~:metabase.lib.schema.common/non-blank-string"],"^:O","id48650","^:P",null,"^5",["^ ","^:E",["^:G",["^:H","^:I"],"^;8"],"^:O","id48650","^6","metabase/lib/metadata/calculation.cljc","^:",24,"^8",10,"^:[",["^1G",["^;0",["^1G",[["^:V"]]]]],"^7",246,"^9",246,"^:Y",["^1G",["^;0",["^1G",[["^:V"]]]]],"^;1","Inputs: [query]\n  Return: :metabase.lib.schema.common/non-blank-string\n          \n\n  Convenience for calling [[display-name]] on a query to describe the results of its final stage."],"^I","^3O","^6","metabase/lib/metadata/calculation.cljc","^:",24,"^:U",["^1G",[["^:V"]]],"^;2",null,"^:Z",["^1G",[null,null]],"^8",1,"^:R",false,"^:[",["^1G",["^;0",["^1G",[["^:V"]]]]],"^7",246,"~:ret-tag","^;5","^9",246,"^:T",1,"^;6",true,"^:Y",["^1G",["^;0",["^1G",[["^:V"]]]]],"^;1","Inputs: [query]\n  Return: :metabase.lib.schema.common/non-blank-string\n          \n\n  Convenience for calling [[display-name]] on a query to describe the results of its final stage."],"~$display-name-method",["^ ","^5",["^ ","^6","metabase/lib/metadata/calculation.cljc","^7",34,"^8",11,"^9",34,"^:",30,"^:Y",["^1G",["^;0",["^1G",[["^:V","^:W","~$x","~$display-name-style"]]]]],"^;1","Calculate a nice human-friendly display name for something."],"^I","^3R","^6","metabase/lib/metadata/calculation.cljc","^:",30,"^8",1,"^7",34,"^9",34,"^;4","^29","^:Y",["^1G",["^;0",["^1G",[["^:V","^:W","~$x","^;;"]]]]],"^;1","Calculate a nice human-friendly display name for something."],"~$column-name",["^ ","^:E",["^:F",["^:G",["^:H","^:I","^:I"],"^;8"],["^:G",["^:H","^:L","^:M","^:I"],"^;8"]],"^:O","id48605","^:P",null,"^5",["^ ","^:E",["^:F",["^:G",["^:H","^:I","^:I"],"^;8"],["^:G",["^:H","^:L","^:M","^:I"],"^;8"]],"^:O","id48605","^6","metabase/lib/metadata/calculation.cljc","^:",21,"^:Q",["^ ","^:R",false,"^:S",3,"^:T",3,"^:U",[["^:V","~$x"],["^:V","^:W","~$x"]],"^:Y",["^1G",[["^:V","~$x"],["^:V","^:W","~$x"]]],"^:Z",["^1G",[null,null]]],"^8",10,"^:[",["^1G",["^;0",["^1G",[["^:V","~$x"],["^:V","~:-","^:L","^:W","~:-","^:M","~$x"]]]]],"^7",74,"^9",74,"^:Y",["^1G",["^;0",["^1G",[["^:V","~$x"],["^:V","^:W","~$x"]]]]],"^;1","Inputs: ([query x]\n           [query :- :metabase.lib.schema/query stage-number :- :int x])\n  Return: :metabase.lib.schema.common/non-blank-string\n          \n\n  Calculate a database-friendly name to use for an expression."],"^I","^3F","^6","metabase/lib/metadata/calculation.cljc","^:",21,"^:Q",["^ ","^:R",false,"^:S",3,"^:T",3,"^:U",[["^:V","~$x"],["^:V","^:W","~$x"]],"^:Y",["^1G",[["^:V","~$x"],["^:V","^:W","~$x"]]],"^:Z",["^1G",[null,null]]],"^:U",[["^:V","~$x"],["^:V","^:W","~$x"]],"^;2",null,"^:S",3,"^:Z",["^1G",[null,null]],"^8",1,"^:R",false,"^;3",[["^ ","^:S",2,"^:R",false,"^;4","^;5"],["^ ","^:S",3,"^:R",false,"^;4",["^H",[null,"^;5"]]]],"^:[",["^1G",["^;0",["^1G",[["^:V","~$x"],["^:V","~:-","^:L","^:W","~:-","^:M","~$x"]]]]],"^7",74,"^9",74,"^:T",3,"^;6",true,"^:Y",["^1G",[["^:V","~$x"],["^:V","^:W","~$x"]]],"^;1","Inputs: ([query x]\n           [query :- :metabase.lib.schema/query stage-number :- :int x])\n  Return: :metabase.lib.schema.common/non-blank-string\n          \n\n  Calculate a database-friendly name to use for an expression."],"~$metadata",["^ ","^:E",["^:F",["^:G",["^:H","^:I"],["~:map",["~:lib/type",["~:and","~:keyword",["~:fn",["^ ","~:error/message",":lib/type should be a :metadata/ keyword"],["^1G",["~$fn*",["~$p1__48638#"],["^1G",["~$=",["^1G",["~$namespace","^;E"]],"metadata"]]]]]]]]],["^:G",["^:H","^:I","^:I"],["^;>",["^;?",["^;@","^;A",["^;B",["^ ","^;C",":lib/type should be a :metadata/ keyword"],["^1G",["^;D",["^;E"],["^1G",["~$=",["^1G",["^;F","^;E"]],"metadata"]]]]]]]]],["^:G",["^:H","^:L","^:M","^:I"],["^;>",["^;?",["^;@","^;A",["^;B",["^ ","^;C",":lib/type should be a :metadata/ keyword"],["^1G",["^;D",["^;E"],["^1G",["~$=",["^1G",["^;F","^;E"]],"metadata"]]]]]]]]]],"^:O","id48647","^:P",null,"^5",["^ ","^:E",["^:F",["^:G",["^:H","^:I"],["^;>",["^;?",["^;@","^;A",["^;B",["^ ","^;C",":lib/type should be a :metadata/ keyword"],["^1G",["^;D",["^;E"],["^1G",["~$=",["^1G",["^;F","^;E"]],"metadata"]]]]]]]]],["^:G",["^:H","^:I","^:I"],["^;>",["^;?",["^;@","^;A",["^;B",["^ ","^;C",":lib/type should be a :metadata/ keyword"],["^1G",["^;D",["^;E"],["^1G",["~$=",["^1G",["^;F","^;E"]],"metadata"]]]]]]]]],["^:G",["^:H","^:L","^:M","^:I"],["^;>",["^;?",["^;@","^;A",["^;B",["^ ","^;C",":lib/type should be a :metadata/ keyword"],["^1G",["^;D",["^;E"],["^1G",["~$=",["^1G",["^;F","^;E"]],"metadata"]]]]]]]]]],"^:O","id48647","^6","metabase/lib/metadata/calculation.cljc","^:",18,"^:Q",["^ ","^:R",false,"^:S",3,"^:T",3,"^:U",[["^:V"],["^:V","~$x"],["^:V","^:W","~$x"]],"^:Y",["^1G",[["^:V"],["^:V","~$x"],["^:V","^:W","~$x"]]],"^:Z",["^1G",[null,null,null]]],"^8",10,"^:[",["^1G",["^;0",["^1G",[["^:V"],["^:V","~$x"],["^:V","~:-","^:L","^:W","~:-","^:M","~$x"]]]]],"^7",229,"^9",229,"^:Y",["^1G",["^;0",["^1G",[["^:V"],["^:V","~$x"],["^:V","^:W","~$x"]]]]],"^;1","Inputs: ([query]\n           [query x]\n           [query :- :metabase.lib.schema/query stage-number :- :int x])\n  Return: [:map\n           [:lib/type\n            [:and\n             :keyword\n             [:fn\n              #:error{:message \":lib/type should be a :metadata/ keyword\"}\n              (fn* [p1__48638#] (= (namespace p1__48638#) \"metadata\"))]]]]\n          \n\n  Calculate an appropriate `:metadata/*` object for something. What this looks like depends on what we're calculating\n  metadata for. If it's a reference or expression of some sort, this should return a single `:metadata/column`\n  map (i.e., something satisfying the [[metabase.lib.metadata/ColumnMetadata]] schema."],"^I","^33","^6","metabase/lib/metadata/calculation.cljc","^:",18,"^:Q",["^ ","^:R",false,"^:S",3,"^:T",3,"^:U",[["^:V"],["^:V","~$x"],["^:V","^:W","~$x"]],"^:Y",["^1G",[["^:V"],["^:V","~$x"],["^:V","^:W","~$x"]]],"^:Z",["^1G",[null,null,null]]],"^:U",[["^:V"],["^:V","~$x"],["^:V","^:W","~$x"]],"^;2",null,"^:S",3,"^:Z",["^1G",[null,null,null]],"^8",1,"^:R",false,"^;3",[["^ ","^:S",1,"^:R",false,"^;4","^;5"],["^ ","^:S",2,"^:R",false,"^;4","^;5"],["^ ","^:S",3,"^:R",false,"^;4","^;5"]],"^:[",["^1G",["^;0",["^1G",[["^:V"],["^:V","~$x"],["^:V","~:-","^:L","^:W","~:-","^:M","~$x"]]]]],"^7",229,"^9",229,"^:T",3,"^;6",true,"^:Y",["^1G",[["^:V"],["^:V","~$x"],["^:V","^:W","~$x"]]],"^;1","Inputs: ([query]\n           [query x]\n           [query :- :metabase.lib.schema/query stage-number :- :int x])\n  Return: [:map\n           [:lib/type\n            [:and\n             :keyword\n             [:fn\n              #:error{:message \":lib/type should be a :metadata/ keyword\"}\n              (fn* [p1__48638#] (= (namespace p1__48638#) \"metadata\"))]]]]\n          \n\n  Calculate an appropriate `:metadata/*` object for something. What this looks like depends on what we're calculating\n  metadata for. If it's a reference or expression of some sort, this should return a single `:metadata/column`\n  map (i.e., something satisfying the [[metabase.lib.metadata/ColumnMetadata]] schema."],"~$describe-top-level-key-method",["^ ","^5",["^ ","^6","metabase/lib/metadata/calculation.cljc","^7",124,"^8",11,"^9",124,"^:",40,"^:Y",["^1G",["^;0",["^1G",[["^:V","^:W","~$top-level-key"]]]]],"^;1","Implementation for [[describe-top-level-key]]. Describe part of a stage of a query, e.g. the `:filters` part or the\n  `:aggregation` part. Return `nil` if there is nothing to describe.\n\n  Implementations that call [[display-name]] should specify the `:long` display name style."],"^I","^2Q","^6","metabase/lib/metadata/calculation.cljc","^:",40,"^8",1,"^7",124,"^9",124,"^;4","^29","^:Y",["^1G",["^;0",["^1G",[["^:V","^:W","^;H"]]]]],"^;1","Implementation for [[describe-top-level-key]]. Describe part of a stage of a query, e.g. the `:filters` part or the\n  `:aggregation` part. Return `nil` if there is nothing to describe.\n\n  Implementations that call [[display-name]] should specify the `:long` display name style."],"~$default-display-info",["^ ","^:P",null,"^5",["^ ","^6","metabase/lib/metadata/calculation.cljc","^7",327,"^8",7,"^9",327,"^:",27,"^:Y",["^1G",["^;0",["^1G",[["^:V","^:W","~$x"]]]]],"^;1","Default implementation of [[display-info-method]], available in case you want to use this in a different\n  implementation and add additional information to it."],"^I","^2N","^6","metabase/lib/metadata/calculation.cljc","^:",27,"^:U",["^1G",[["^:V","^:W","~$x"]]],"^;2",null,"^:Z",["^1G",[null,null]],"^8",1,"^:R",false,"^7",327,"^;9",["^H",["^;5","~$clj-nil"]],"^9",327,"^:T",3,"^;6",true,"^:Y",["^1G",["^;0",["^1G",[["^:V","^:W","~$x"]]]]],"^;1","Default implementation of [[display-info-method]], available in case you want to use this in a different\n  implementation and add additional information to it."],"~$column-name-method",["^ ","^5",["^ ","^6","metabase/lib/metadata/calculation.cljc","^7",41,"^8",11,"^9",41,"^:",29,"^:Y",["^1G",["^;0",["^1G",[["^:V","^:W","~$x"]]]]],"^;1","Calculate a database-friendly name to use for something."],"^I","^2J","^6","metabase/lib/metadata/calculation.cljc","^:",29,"^8",1,"^7",41,"^9",41,"^;4","^29","^:Y",["^1G",["^;0",["^1G",[["^:V","^:W","~$x"]]]]],"^;1","Calculate a database-friendly name to use for something."],"~$VisibleColumnsOptions",["^ ","^5",["^ ","^6","metabase/lib/metadata/calculation.cljc","^7",446,"^8",6,"^9",446,"^:",27],"^I","^2K","^6","metabase/lib/metadata/calculation.cljc","^:",27,"^8",1,"^7",446,"^9",446,"^;4","~$cljs.core/IVector","^;1","Schema for options passed to [[visible-columns]] and [[visible-columns-method]]."],"~$*display-name-style*",["^ ","^5",["^ ","^6","metabase/lib/metadata/calculation.cljc","^7",30,"^8",16,"^9",30,"^:",36,"~:dynamic",true],"^I","^3D","^6","metabase/lib/metadata/calculation.cljc","^:",36,"^8",1,"^;O",true,"^7",30,"^9",30,"^;4","^;5","^;1","Display name style to use when not explicitly passed in to [[display-name]]."],"~$ColumnMetadataWithSource",["^ ","^5",["^ ","^6","metabase/lib/metadata/calculation.cljc","^7",370,"^8",6,"^9",370,"^:",30],"^I","^22","^6","metabase/lib/metadata/calculation.cljc","^:",30,"^8",1,"^7",370,"^9",370,"^;4","^;M","^;1","Schema for the column metadata that should be returned by [[metadata]]."],"~$visible-columns",["^ ","^:E",["^:F",["^:G",["^:H","^:I"],"^:K"],["^:G",["^:H","^:I","^:I"],"^:K"],["^:G",["^:H","^:I","^:I","^:I"],"^:K"],["^:G",["^:H","^:L","^:M","^:I",["^:J","^;L"]],"^:K"]],"^:O","id48672","^:P",null,"^5",["^ ","^:E",["^:F",["^:G",["^:H","^:I"],"^:K"],["^:G",["^:H","^:I","^:I"],"^:K"],["^:G",["^:H","^:I","^:I","^:I"],"^:K"],["^:G",["^:H","^:L","^:M","^:I",["^:J","^;L"]],"^:K"]],"^:O","id48672","^6","metabase/lib/metadata/calculation.cljc","^:",25,"^:Q",["^ ","^:R",false,"^:S",4,"^:T",4,"^:U",[["^:V"],["^:V","~$x"],["^:V","^:W","~$x"],["^:V","^:W","~$x","^:X"]],"^:Y",["^1G",[["^:V"],["^:V","~$x"],["^:V","^:W","~$x"],["^:V","^:W","~$x","^:X"]]],"^:Z",["^1G",[null,null,null,null]]],"^8",10,"^:[",["^1G",["^;0",["^1G",[["^:V"],["^:V","~$x"],["^:V","^:W","~$x"],["^:V","~:-","^:L","^:W","~:-","^:M","~$x","^:X","~:-",["^:J","^;L"]]]]]],"^7",488,"^9",488,"^:Y",["^1G",["^;0",["^1G",[["^:V"],["^:V","~$x"],["^:V","^:W","~$x"],["^:V","^:W","~$x","^:X"]]]]],"^;1","Inputs: ([query]\n           [query x]\n           [query stage-number x]\n           [query :- :metabase.lib.schema/query stage-number :- :int x options :- [:maybe VisibleColumnsOptions]])\n  Return: ColumnsWithUniqueAliases\n          \n\n  Return a sequence of columns that should be visible *within* a given stage of something, e.g. a query stage or a\n  join query. This includes not just the columns that get returned (ones present in [[metadata]], but other columns\n  that are 'reachable' in this stage of the query. E.g. in a query like\n\n    SELECT id, name\n    FROM table\n    ORDER BY position\n\n  only `id` and `name` are 'returned' columns, but other columns such as `position` are visible in this stage as well\n  and would thus be returned by this function.\n\n  Columns from joins, expressions, and implicitly joinable columns are included automatically by default;\n  see [[VisibleColumnsOptions]] for the options for disabling these columns."],"^I","^1[","^6","metabase/lib/metadata/calculation.cljc","^:",25,"^:Q",["^ ","^:R",false,"^:S",4,"^:T",4,"^:U",[["^:V"],["^:V","~$x"],["^:V","^:W","~$x"],["^:V","^:W","~$x","^:X"]],"^:Y",["^1G",[["^:V"],["^:V","~$x"],["^:V","^:W","~$x"],["^:V","^:W","~$x","^:X"]]],"^:Z",["^1G",[null,null,null,null]]],"^:U",[["^:V"],["^:V","~$x"],["^:V","^:W","~$x"],["^:V","^:W","~$x","^:X"]],"^;2",null,"^:S",4,"^:Z",["^1G",[null,null,null,null]],"^8",1,"^:R",false,"^;3",[["^ ","^:S",1,"^:R",false,"^;4","^;5"],["^ ","^:S",2,"^:R",false,"^;4","^;5"],["^ ","^:S",3,"^:R",false,"^;4","^;5"],["^ ","^:S",4,"^:R",false,"^;4","^;5"]],"^:[",["^1G",["^;0",["^1G",[["^:V"],["^:V","~$x"],["^:V","^:W","~$x"],["^:V","~:-","^:L","^:W","~:-","^:M","~$x","^:X","~:-",["^:J","^;L"]]]]]],"^7",488,"^9",488,"^:T",4,"^;6",true,"^:Y",["^1G",[["^:V"],["^:V","~$x"],["^:V","^:W","~$x"],["^:V","^:W","~$x","^:X"]]],"^;1","Inputs: ([query]\n           [query x]\n           [query stage-number x]\n           [query :- :metabase.lib.schema/query stage-number :- :int x options :- [:maybe VisibleColumnsOptions]])\n  Return: ColumnsWithUniqueAliases\n          \n\n  Return a sequence of columns that should be visible *within* a given stage of something, e.g. a query stage or a\n  join query. This includes not just the columns that get returned (ones present in [[metadata]], but other columns\n  that are 'reachable' in this stage of the query. E.g. in a query like\n\n    SELECT id, name\n    FROM table\n    ORDER BY position\n\n  only `id` and `name` are 'returned' columns, but other columns such as `position` are visible in this stage as well\n  and would thus be returned by this function.\n\n  Columns from joins, expressions, and implicitly joinable columns are included automatically by default;\n  see [[VisibleColumnsOptions]] for the options for disabling these columns."],"~$type-of-method",["^ ","^5",["^ ","^6","metabase/lib/metadata/calculation.cljc","^7",148,"^8",11,"^9",148,"^:",25,"^:Y",["^1G",["^;0",["^1G",[["^:V","^:W","~$expr"]]]]],"^;1","Calculate the effective type of something. This differs from [[metabase.lib.schema.expression/type-of]] in that it is\n  called with a query/MetadataProvider and a stage number, allowing us to fully resolve information and return\n  complete, unambigous type information. Default implementation calls [[metabase.lib.schema.expression/type-of]]."],"^I","^2E","^6","metabase/lib/metadata/calculation.cljc","^:",25,"^8",1,"^7",148,"^9",148,"^;4","^29","^:Y",["^1G",["^;0",["^1G",[["^:V","^:W","^;S"]]]]],"^;1","Calculate the effective type of something. This differs from [[metabase.lib.schema.expression/type-of]] in that it is\n  called with a query/MetadataProvider and a stage number, allowing us to fully resolve information and return\n  complete, unambigous type information. Default implementation calls [[metabase.lib.schema.expression/type-of]]."],"~$default-returned-columns-options",["^ ","^:E",["^:G","^:H","^:N"],"^:O","id48665","^:P",null,"^5",["^ ","^:E",["^:G","^:H","^:N"],"^:O","id48665","~:private",true,"^6","metabase/lib/metadata/calculation.cljc","^:",52,"^8",20,"^:[",["^1G",["^;0",["^1G",[[]]]]],"^7",409,"^9",409,"^:Y",["^1G",["^;0",["^1G",[[]]]]],"^;1","Inputs: []\n  Return: ReturnedColumnsOptions"],"^;U",true,"^I","^3@","^6","metabase/lib/metadata/calculation.cljc","^:",52,"^:U",["^1G",[[]]],"^;2",null,"^:Z",["^1G",[null,null]],"^8",1,"^:R",false,"^:[",["^1G",["^;0",["^1G",[[]]]]],"^7",409,"^;9","~$cljs.core/IMap","^9",409,"^:T",0,"^;6",true,"^:Y",["^1G",["^;0",["^1G",[[]]]]],"^;1","Inputs: []\n  Return: ReturnedColumnsOptions"],"~$display-info",["^ ","^:E",["^:F",["^:G",["^:H","^:I","^:I"],"~:metabase.lib.metadata.calculation/display-info"],["^:G",["^:H","^:L","^:M","^:I"],"^;X"]],"^:O","id48656","^:P",null,"^5",["^ ","^:E",["^:F",["^:G",["^:H","^:I","^:I"],"^;X"],["^:G",["^:H","^:L","^:M","^:I"],"^;X"]],"^:O","id48656","^6","metabase/lib/metadata/calculation.cljc","^:",22,"^:Q",["^ ","^:R",false,"^:S",3,"^:T",3,"^:U",[["^:V","~$x"],["^:V","^:W","~$x"]],"^:Y",["^1G",[["^:V","~$x"],["^:V","^:W","~$x"]]],"^:Z",["^1G",[null,null]]],"^8",10,"^:[",["^1G",["^;0",["^1G",[["^:V","~$x"],["^:V","~:-","^:L","^:W","~:-","^:M","~$x"]]]]],"^7",308,"^9",308,"^:Y",["^1G",["^;0",["^1G",[["^:V","~$x"],["^:V","^:W","~$x"]]]]],"^;1","Inputs: ([query x]\n           [query :- :metabase.lib.schema/query stage-number :- :int x])\n  Return: :metabase.lib.metadata.calculation/display-info\n          \n\n  Given some sort of Cljs object, return a map with the info you'd need to implement UI for it. This is mostly meant to\n  power the Frontend JavaScript UI; in JS, results will be converted to plain JavaScript objects, so avoid returning\n  things that should remain opaque."],"^I","^3G","^6","metabase/lib/metadata/calculation.cljc","^:",22,"^:Q",["^ ","^:R",false,"^:S",3,"^:T",3,"^:U",[["^:V","~$x"],["^:V","^:W","~$x"]],"^:Y",["^1G",[["^:V","~$x"],["^:V","^:W","~$x"]]],"^:Z",["^1G",[null,null]]],"^:U",[["^:V","~$x"],["^:V","^:W","~$x"]],"^;2",null,"^:S",3,"^:Z",["^1G",[null,null]],"^8",1,"^:R",false,"^;3",[["^ ","^:S",2,"^:R",false,"^;4","^;5"],["^ ","^:S",3,"^:R",false]],"^:[",["^1G",["^;0",["^1G",[["^:V","~$x"],["^:V","~:-","^:L","^:W","~:-","^:M","~$x"]]]]],"^7",308,"^9",308,"^:T",3,"^;6",true,"^:Y",["^1G",[["^:V","~$x"],["^:V","^:W","~$x"]]],"^;1","Inputs: ([query x]\n           [query :- :metabase.lib.schema/query stage-number :- :int x])\n  Return: :metabase.lib.metadata.calculation/display-info\n          \n\n  Given some sort of Cljs object, return a map with the info you'd need to implement UI for it. This is mostly meant to\n  power the Frontend JavaScript UI; in JS, results will be converted to plain JavaScript objects, so avoid returning\n  things that should remain opaque."],"~$slugify",["^ ","^:P",null,"^5",["^ ","^6","metabase/lib/metadata/calculation.cljc","^7",114,"^8",8,"^9",114,"^:",15,"^;U",true,"^:Y",["^1G",["^;0",["^1G",[["~$s"]]]]]],"^;U",true,"^I","^2C","^6","metabase/lib/metadata/calculation.cljc","^:",15,"^:U",["^1G",[["~$s"]]],"^;2",null,"^:Z",["^1G",[null,null]],"^8",1,"^:R",false,"^7",114,"^;9",["^H",["~$string","^;J"]],"^9",114,"^:T",1,"^;6",true,"^:Y",["^1G",["^;0",["^1G",[["~$s"]]]]]],"~$TopLevelKey",["^ ","^5",["^ ","^6","metabase/lib/metadata/calculation.cljc","^7",134,"^8",16,"^9",134,"^:",27,"^;U",true],"^;U",true,"^I","^3L","^6","metabase/lib/metadata/calculation.cljc","^:",27,"^8",1,"^7",134,"^9",134,"^;4","^;M","^;1","In the interest of making this easy to use in JS-land we'll accept either strings or keywords."],"~$metadata-method",["^ ","^5",["^ ","^6","metabase/lib/metadata/calculation.cljc","^7",205,"^8",11,"^9",205,"^:",26,"^:Y",["^1G",["^;0",["^1G",[["^:V","^:W","~$x"]]]]],"^;1","Impl for [[metadata]]. Implementations that call [[display-name]] should use the `:default` display name style."],"^I","^34","^6","metabase/lib/metadata/calculation.cljc","^:",26,"^8",1,"^7",205,"^9",205,"^;4","^29","^:Y",["^1G",["^;0",["^1G",[["^:V","^:W","~$x"]]]]],"^;1","Impl for [[metadata]]. Implementations that call [[display-name]] should use the `:default` display name style."],"^:K",["^ ","^5",["^ ","^6","metabase/lib/metadata/calculation.cljc","^7",377,"^8",6,"^9",377,"^:",30],"^I","^3H","^6","metabase/lib/metadata/calculation.cljc","^:",30,"^8",1,"^7",377,"^9",377,"^;4","^;M","^;1","Schema for column metadata that should be returned by [[visible-columns]]. This is mostly used\n  to power metadata calculation for stages (see [[metabase.lib.stage]]."],"~$DisplayNameStyle",["^ ","^5",["^ ","^6","metabase/lib/metadata/calculation.cljc","^7",20,"^8",6,"^9",20,"^:",22],"^I","^2X","^6","metabase/lib/metadata/calculation.cljc","^:",22,"^8",1,"^7",20,"^9",20,"^;4","^;M","^;1","Schema for valid values of `display-name-style` as passed to [[display-name-method]].\n\n  * `:default`: normal style used for 99% of FE stuff. For example a column that comes from a joined table might return\n    \"Price\".\n\n  * `:long`: Slightly longer style that includes a little bit of extra context, used for stuff like query suggested\n    name generation. For a joined column, this might look like \"Venues â†’ Price\"."],"~$describe-top-level-key",["^ ","^:E",["^:F",["^:G",["^:H","^:I","^:I"],["^:J","^;8"]],["^:G",["^:H","^:L","^:M","^;["],["^:J","^;8"]]],"^:O","id48620","^:P",null,"^5",["^ ","^:E",["^:F",["^:G",["^:H","^:I","^:I"],["^:J","^;8"]],["^:G",["^:H","^:L","^:M","^;["],["^:J","^;8"]]],"^:O","id48620","^6","metabase/lib/metadata/calculation.cljc","^:",32,"^:Q",["^ ","^:R",false,"^:S",3,"^:T",3,"^:U",[["^:V","^;H"],["^:V","^:W","^;H"]],"^:Y",["^1G",[["^:V","^;H"],["^:V","^:W","^;H"]]],"^:Z",["^1G",[null,null]]],"^8",10,"^:[",["^1G",["^;0",["^1G",[["^:V","^;H"],["^:V","~:-","^:L","^:W","~:-","^:M","^;H","~:-","^;["]]]]],"^7",138,"^9",138,"^:Y",["^1G",["^;0",["^1G",[["^:V","^;H"],["^:V","^:W","^;H"]]]]],"^;1","Inputs: ([query top-level-key]\n           [query :- :metabase.lib.schema/query stage-number :- :int top-level-key :- TopLevelKey])\n  Return: [:maybe :metabase.lib.schema.common/non-blank-string]\n          \n\n  'top-level' here means the top level of an individual stage. Generate a human-friendly string describing a specific\n  part of an MBQL stage, or `nil` if that part doesn't exist."],"^I","^2V","^6","metabase/lib/metadata/calculation.cljc","^:",32,"^:Q",["^ ","^:R",false,"^:S",3,"^:T",3,"^:U",[["^:V","^;H"],["^:V","^:W","^;H"]],"^:Y",["^1G",[["^:V","^;H"],["^:V","^:W","^;H"]]],"^:Z",["^1G",[null,null]]],"^:U",[["^:V","^;H"],["^:V","^:W","^;H"]],"^;2",null,"^:S",3,"^:Z",["^1G",[null,null]],"^8",1,"^:R",false,"^;3",[["^ ","^:S",2,"^:R",false,"^;4","^;5"],["^ ","^:S",3,"^:R",false,"^;4","^;5"]],"^:[",["^1G",["^;0",["^1G",[["^:V","^;H"],["^:V","~:-","^:L","^:W","~:-","^:M","^;H","~:-","^;["]]]]],"^7",138,"^9",138,"^:T",3,"^;6",true,"^:Y",["^1G",[["^:V","^;H"],["^:V","^:W","^;H"]]],"^;1","Inputs: ([query top-level-key]\n           [query :- :metabase.lib.schema/query stage-number :- :int top-level-key :- TopLevelKey])\n  Return: [:maybe :metabase.lib.schema.common/non-blank-string]\n          \n\n  'top-level' here means the top level of an individual stage. Generate a human-friendly string describing a specific\n  part of an MBQL stage, or `nil` if that part doesn't exist."],"~$returned-columns-method",["^ ","^5",["^ ","^6","metabase/lib/metadata/calculation.cljc","^7",413,"^8",11,"^9",413,"^:",34,"^:Y",["^1G",["^;0",["^1G",[["^:V","^:W","~$x","^:X"]]]]],"^;1","Impl for [[returned-columns]]."],"^I","^26","^6","metabase/lib/metadata/calculation.cljc","^:",34,"^8",1,"^7",413,"^9",413,"^;4","^29","^:Y",["^1G",["^;0",["^1G",[["^:V","^:W","~$x","^:X"]]]]],"^;1","Impl for [[returned-columns]]."],"~$suggested-name",["^ ","^:E",["^:G",["^:H","^:I"],["^:J","^;8"]],"^:O","id48651","^:P",null,"^5",["^ ","^:E",["^:G",["^:H","^:I"],["^:J","^;8"]],"^:O","id48651","^6","metabase/lib/metadata/calculation.cljc","^:",24,"^8",10,"^:[",["^1G",["^;0",["^1G",[["^:V"]]]]],"^7",251,"^9",251,"^:Y",["^1G",["^;0",["^1G",[["^:V"]]]]],"^;1","Inputs: [query]\n  Return: [:maybe :metabase.lib.schema.common/non-blank-string]\n          \n\n  Name you might want to use for a query when saving an previously-unsaved query. This is the same\n  as [[describe-query]] except for native queries, where we don't describe anything."],"^I","^2[","^6","metabase/lib/metadata/calculation.cljc","^:",24,"^:U",["^1G",[["^:V"]]],"^;2",null,"^:Z",["^1G",[null,null]],"^8",1,"^:R",false,"^:[",["^1G",["^;0",["^1G",[["^:V"]]]]],"^7",251,"^;9",["^H",[null,"^;J"]],"^9",251,"^:T",1,"^;6",true,"^:Y",["^1G",["^;0",["^1G",[["^:V"]]]]],"^;1","Inputs: [query]\n  Return: [:maybe :metabase.lib.schema.common/non-blank-string]\n          \n\n  Name you might want to use for a query when saving an previously-unsaved query. This is the same\n  as [[describe-query]] except for native queries, where we don't describe anything."],"~$type-of",["^ ","^:E",["^:F",["^:G",["^:H","^:I","^:I"],"~:metabase.lib.schema.common/base-type"],["^:G",["^:H","^:L","^:M","^:I"],"^<6"]],"^:O","id48624","^:P",null,"^5",["^ ","^:E",["^:F",["^:G",["^:H","^:I","^:I"],"^<6"],["^:G",["^:H","^:L","^:M","^:I"],"^<6"]],"^:O","id48624","^6","metabase/lib/metadata/calculation.cljc","^:",17,"^:Q",["^ ","^:R",false,"^:S",3,"^:T",3,"^:U",[["^:V","~$x"],["^:V","^:W","~$x"]],"^:Y",["^1G",[["^:V","~$x"],["^:V","^:W","~$x"]]],"^:Z",["^1G",[null,null]]],"^8",10,"^:[",["^1G",["^;0",["^1G",[["^:V","~$x"],["^:V","~:-","^:L","^:W","~:-","^:M","~$x"]]]]],"^7",157,"^9",157,"^:Y",["^1G",["^;0",["^1G",[["^:V","~$x"],["^:V","^:W","~$x"]]]]],"^;1","Inputs: ([query x]\n           [query :- :metabase.lib.schema/query stage-number :- :int x])\n  Return: :metabase.lib.schema.common/base-type\n          \n\n  Get the effective type of an MBQL expression."],"^I","^2<","^6","metabase/lib/metadata/calculation.cljc","^:",17,"^:Q",["^ ","^:R",false,"^:S",3,"^:T",3,"^:U",[["^:V","~$x"],["^:V","^:W","~$x"]],"^:Y",["^1G",[["^:V","~$x"],["^:V","^:W","~$x"]]],"^:Z",["^1G",[null,null]]],"^:U",[["^:V","~$x"],["^:V","^:W","~$x"]],"^;2",null,"^:S",3,"^:Z",["^1G",[null,null]],"^8",1,"^:R",false,"^;3",[["^ ","^:S",2,"^:R",false,"^;4","^;5"],["^ ","^:S",3,"^:R",false,"^;4",["^H",["^;5","^2I"]]]],"^:[",["^1G",["^;0",["^1G",[["^:V","~$x"],["^:V","~:-","^:L","^:W","~:-","^:M","~$x"]]]]],"^7",157,"^9",157,"^:T",3,"^;6",true,"^:Y",["^1G",[["^:V","~$x"],["^:V","^:W","~$x"]]],"^;1","Inputs: ([query x]\n           [query :- :metabase.lib.schema/query stage-number :- :int x])\n  Return: :metabase.lib.schema.common/base-type\n          \n\n  Get the effective type of an MBQL expression."],"~$UniqueNameFn",["^ ","^5",["^ ","^6","metabase/lib/metadata/calculation.cljc","^7",398,"^8",16,"^9",398,"^:",28,"^;U",true],"^;U",true,"^I","^2:","^6","metabase/lib/metadata/calculation.cljc","^:",28,"^8",1,"^7",398,"^9",398,"^;4","^;M"],"^:N",["^ ","^5",["^ ","^6","metabase/lib/metadata/calculation.cljc","^7",403,"^8",6,"^9",403,"^:",28],"^I","^2B","^6","metabase/lib/metadata/calculation.cljc","^:",28,"^8",1,"^7",403,"^9",403,"^;4","^;M","^;1","Schema for options passed to [[returned-columns]] and [[returned-columns-method]]."],"~$default-visible-columns-options",["^ ","^:E",["^:G","^:H","^;L"],"^:O","id48670","^:P",null,"^5",["^ ","^:E",["^:G","^:H","^;L"],"^:O","id48670","^;U",true,"^6","metabase/lib/metadata/calculation.cljc","^:",51,"^8",20,"^:[",["^1G",["^;0",["^1G",[[]]]]],"^7",456,"^9",456,"^:Y",["^1G",["^;0",["^1G",[[]]]]],"^;1","Inputs: []\n  Return: VisibleColumnsOptions"],"^;U",true,"^I","^2;","^6","metabase/lib/metadata/calculation.cljc","^:",51,"^:U",["^1G",[[]]],"^;2",null,"^:Z",["^1G",[null,null]],"^8",1,"^:R",false,"^:[",["^1G",["^;0",["^1G",[[]]]]],"^7",456,"^;9",["^H",["^;5","^;J"]],"^9",456,"^:T",0,"^;6",true,"^:Y",["^1G",["^;0",["^1G",[[]]]]],"^;1","Inputs: []\n  Return: VisibleColumnsOptions"],"~$display-name",["^ ","^:E",["^:F",["^:G",["^:H","^:I"],"~:string"],["^:G",["^:H","^:I","^:I"],"^<:"],["^:G",["^:H","^:I","^:I","^:I"],"^<:"],["^:G",["^:H","^:L","^:M","^:I","^<1"],"^<:"]],"^:O","id48576","^:P",null,"^5",["^ ","^:E",["^:F",["^:G",["^:H","^:I"],"^<:"],["^:G",["^:H","^:I","^:I"],"^<:"],["^:G",["^:H","^:I","^:I","^:I"],"^<:"],["^:G",["^:H","^:L","^:M","^:I","^<1"],"^<:"]],"^:O","id48576","^6","metabase/lib/metadata/calculation.cljc","^:",31,"^:Q",["^ ","^:R",false,"^:S",4,"^:T",4,"^:U",[["^:V"],["^:V","~$x"],["^:V","^:W","~$x"],["^:V","^:W","~$x","~$style"]],"^:Y",["^1G",[["^:V"],["^:V","~$x"],["^:V","^:W","~$x"],["^:V","^:W","~$x","^<;"]]],"^:Z",["^1G",[null,null,null,null]]],"~:export",true,"^8",19,"^:[",["^1G",["^;0",["^1G",[["^:V"],["^:V","~$x"],["^:V","^:W","~$x"],["^:V","~:-","^:L","^:W","~:-","^:M","~$x","^<;","~:-","^<1"]]]]],"^7",48,"^9",48,"^:Y",["^1G",["^;0",["^1G",[["^:V"],["^:V","~$x"],["^:V","^:W","~$x"],["^:V","^:W","~$x","^<;"]]]]],"^;1","Inputs: ([query]\n           [query x]\n           [query stage-number x]\n           [query :- :metabase.lib.schema/query stage-number :- :int x style :- DisplayNameStyle])\n  Return: :string\n          \n\n  Calculate a nice human-friendly display name for something. See [[DisplayNameStyle]] for a the difference between\n  different `style`s."],"^I","^3<","^6","metabase/lib/metadata/calculation.cljc","^:",31,"^:Q",["^ ","^:R",false,"^:S",4,"^:T",4,"^:U",[["^:V"],["^:V","~$x"],["^:V","^:W","~$x"],["^:V","^:W","~$x","^<;"]],"^:Y",["^1G",[["^:V"],["^:V","~$x"],["^:V","^:W","~$x"],["^:V","^:W","~$x","^<;"]]],"^:Z",["^1G",[null,null,null,null]]],"^:U",[["^:V"],["^:V","~$x"],["^:V","^:W","~$x"],["^:V","^:W","~$x","^<;"]],"^;2",null,"^:S",4,"^<<",true,"^:Z",["^1G",[null,null,null,null]],"^8",1,"^:R",false,"^;3",[["^ ","^:S",1,"^:R",false,"^;4","^;5"],["^ ","^:S",2,"^:R",false,"^;4","^;5"],["^ ","^:S",3,"^:R",false,"^;4","^;5"],["^ ","^:S",4,"^:R",false,"^;4",["^H",[null,"^;5"]]]],"^:[",["^1G",["^;0",["^1G",[["^:V"],["^:V","~$x"],["^:V","^:W","~$x"],["^:V","~:-","^:L","^:W","~:-","^:M","~$x","^<;","~:-","^<1"]]]]],"^7",48,"^9",48,"^:T",4,"^;6",true,"^:Y",["^1G",[["^:V"],["^:V","~$x"],["^:V","^:W","~$x"],["^:V","^:W","~$x","^<;"]]],"^;1","Inputs: ([query]\n           [query x]\n           [query stage-number x]\n           [query :- :metabase.lib.schema/query stage-number :- :int x style :- DisplayNameStyle])\n  Return: :string\n          \n\n  Calculate a nice human-friendly display name for something. See [[DisplayNameStyle]] for a the difference between\n  different `style`s."],"~$visible-columns-method",["^ ","^5",["^ ","^6","metabase/lib/metadata/calculation.cljc","^7",464,"^8",11,"^9",464,"^:",33,"^:Y",["^1G",["^;0",["^1G",[["^:V","^:W","~$x","^:X"]]]]],"^;1","Impl for [[visible-columns]].\n\n  This should mostly be similar to the implementation for [[metadata-method]], but needs to include\n  `:lib/source-column-alias` and `:lib/desired-column-alias`. `:lib/source-column-alias` should probably be the same\n  as `:name`; use the supplied `:unique-name-fn` from `options` with the signature `(f str) => str` to ensure\n  `:lib/desired-column-alias` is unique.\n\n  Also, columns that aren't 'projected' should be returned as well -- in other words, ignore `:fields`,\n  `:aggregations`, and `:breakouts`."],"^I","^28","^6","metabase/lib/metadata/calculation.cljc","^:",33,"^8",1,"^7",464,"^9",464,"^;4","^29","^:Y",["^1G",["^;0",["^1G",[["^:V","^:W","~$x","^:X"]]]]],"^;1","Impl for [[visible-columns]].\n\n  This should mostly be similar to the implementation for [[metadata-method]], but needs to include\n  `:lib/source-column-alias` and `:lib/desired-column-alias`. `:lib/source-column-alias` should probably be the same\n  as `:name`; use the supplied `:unique-name-fn` from `options` with the signature `(f str) => str` to ensure\n  `:lib/desired-column-alias` is unique.\n\n  Also, columns that aren't 'projected' should be returned as well -- in other words, ignore `:fields`,\n  `:aggregations`, and `:breakouts`."],"~$display-info-method",["^ ","^5",["^ ","^6","metabase/lib/metadata/calculation.cljc","^7",262,"^8",11,"^9",262,"^:",30,"^:Y",["^1G",["^;0",["^1G",[["^:V","^:W","~$x"]]]]],"^;1","Implementation for [[display-info]]. Implementations that call [[display-name]] should use the `:default` display\n  name style."],"^I","^2R","^6","metabase/lib/metadata/calculation.cljc","^:",30,"^8",1,"^7",262,"^9",262,"^;4","^29","^:Y",["^1G",["^;0",["^1G",[["^:V","^:W","~$x"]]]]],"^;1","Implementation for [[display-info]]. Implementations that call [[display-name]] should use the `:default` display\n  name style."]],"^1E",["^ ","^Q","^R","^T","^U","^V","^W","~$u","^Z","^?","^?","^12","^12","^18","^18","^1;","^18","^Z","^Z","^1<","^12","^W","^W","^R","^R","^U","^U"],"~:cljs.analyzer/constants",["^ ","^1B",["^H",["~:source/expressions","~:description","~:enum","^:H","^;?","~:min","~:short-name","~:metadata/column","~:long","~:base-type","^;B","~:type/Integer","~:selected","~:desc","~:table","~:dispatch-type/nil","~:semantic-type","~:limit","~:is-breakout-column","^;8","~:else","~:unicode?","~:table-id","~:ref","~:metabase.lib.metadata/column-source","~:filters","^:J","~:default","~:include-joined?","~:sequential","~:include-expressions?","~:warn","^I","~:asc","~:value","~:lib/source","~:lib/source-column-alias","~:temporal-unit","~:unique-name-fn","^<:","~:source/joins","~:effective-type","~:requires-column","~:merge","~:is-from-join","~:type/*","~:is-source-table","^:G","~:long-display-name","~:mbql.stage/native","^;X","~:source/implicitly-joinable","~:metadata/table","~:order-by-position","~:max","~:id","~:source-table","~:optional","~:is-order-by-column","~:lib.type-of/type-is-temporal-type-of-first-arg","~:breakout","~:include-implicitly-joinable?","~:lib/desired-column-alias","^;C","~:order-by","^;@","~:display-name","~:error","~:aggregation","~:is-from-previous-stage","~:lib.type-of/type-is-type-of-first-arg","~:x","~:breakout-position","~:source-card","~:query","~:stage-number","~:hierarchy","~:is-calculated","~:column-name","~:is-implicitly-joinable","~:error/fn","~:selected?","~:boolean","^;>","~:direction","~:source/previous-stage","^3R"]],"~:order",["^<B","^<V","^<F","^=T","^=K","^=R","~:x~:ns-specs",["^ "],"~:ns-spec-vars",["^H",[]],"~:compiler-options",["^3U",[["^>4","~:static-fns"],true,["^>4","~:shadow-tweaks"],null,["^>4","~:source-map-inline"],null,["^>4","~:elide-asserts"],true,["^>4","~:optimize-constants"],null,["^>4","^1Q"],null,["^>4","~:external-config"],null,["^>4","~:tooling-config"],null,["^>4","~:emit-constants"],null,["^>4","~:load-tests"],false,["^>4","~:form-size-threshold"],null,["^>4","~:global-goog-object&array"],null,["^>4","~:data-readers"],null,["^>4","~:infer-externs"],"~:auto",["^>4","^1S"],["^H",["^1T"]],["~:js-options","~:js-provider"],"^1C",["~:mode"],"~:release",["^>4","~:fn-invoke-direct"],null,["^>4","~:source-map"],null]]]