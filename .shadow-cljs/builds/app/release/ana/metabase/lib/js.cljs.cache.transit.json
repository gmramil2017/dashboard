["^ ","~:output",["^ ","~:js","goog.provide('metabase.lib.js');\n/**\n * Extract the template tags from a native query's text.\n * \n *   If the optional map of existing tags previously parsed is given, this will reuse the existing tags where\n *   they match up with the new one (in particular, it will preserve the UUIDs).\n * \n *   Given the text of a native query, extract a possibly-empty set of template tag strings from it.\n * \n *   These look like mustache templates. For variables, we only allow alphanumeric characters, eg. `{{foo}}`.\n *   For snippets they start with `snippet:`, eg. `{{ snippet: arbitrary text here }}`.\n *   And for card references either `{{ #123 }}` or with the optional human label `{{ #123-card-title-slug }}`.\n * \n *   Invalid patterns are simply ignored, so something like `{{&foo!}}` is just disregarded.\n */\nmetabase.lib.js.extract_template_tags = (function metabase$lib$js$extract_template_tags(var_args){\nvar G__65154 = arguments.length;\nswitch (G__65154) {\ncase 1:\nreturn metabase.lib.js.extract_template_tags.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\n\nbreak;\ncase 2:\nreturn metabase.lib.js.extract_template_tags.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\ngoog.exportSymbol('metabase.lib.js.extract_template_tags', metabase.lib.js.extract_template_tags);\n\n(metabase.lib.js.extract_template_tags.cljs$core$IFn$_invoke$arity$1 = (function (query_text){\nreturn metabase.lib.js.extract_template_tags.cljs$core$IFn$_invoke$arity$2(query_text,cljs.core.PersistentArrayMap.EMPTY);\n}));\n\n(metabase.lib.js.extract_template_tags.cljs$core$IFn$_invoke$arity$2 = (function (query_text,existing_tags){\nreturn metabase.lib.core.TemplateTags__GT_.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([metabase.lib.core.extract_template_tags.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([query_text,metabase.lib.core.__GT_TemplateTags.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([existing_tags], 0))], 0))], 0));\n}));\n\n(metabase.lib.js.extract_template_tags.cljs$lang$maxFixedArity = 2);\n\n/**\n * Return a nice description of a query.\n */\nmetabase.lib.js.suggestedName = (function metabase$lib$js$suggestedName(query){\nreturn metabase.lib.core.suggested_name.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([query], 0));\n});\nmetabase.lib.js.pMBQL = (function metabase$lib$js$pMBQL(query_map){\nvar _LT__GT_ = query_map;\nvar _LT__GT___$1 = cljs.core.js__GT_clj.cljs$core$IFn$_invoke$arity$variadic(_LT__GT_,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"keywordize-keys\",\"keywordize-keys\",1310784252),true], 0));\nvar _LT__GT___$2 = (cljs.core.truth_(new cljs.core.Keyword(null,\"type\",\"type\",1174270348).cljs$core$IFn$_invoke$arity$1(_LT__GT___$1))?_LT__GT___$1:cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(_LT__GT___$1,new cljs.core.Keyword(null,\"type\",\"type\",1174270348),new cljs.core.Keyword(null,\"query\",\"query\",-1288509510)));\nvar _LT__GT___$3 = metabase.mbql.normalize.normalize(_LT__GT___$2);\nreturn metabase.lib.convert.__GT_pMBQL.cljs$core$IFn$_invoke$arity$1(_LT__GT___$3);\n});\n/**\n * Convert metadata to a metadata provider if it is not one already.\n */\nmetabase.lib.js.metadataProvider = (function metabase$lib$js$metadataProvider(database_id,metadata){\nif(metabase.lib.metadata.protocols.metadata_provider_QMARK_(metadata)){\nreturn metadata;\n} else {\nreturn metabase.lib.js.metadata.metadata_provider(database_id,metadata);\n}\n});\n/**\n * Coerce a plain map `query` to an actual query object that you can use with MLv2.\n */\nmetabase.lib.js.query = (function metabase$lib$js$query(database_id,metadata,query_map){\nvar query_map__$1 = metabase.lib.js.pMBQL(query_map);\nvar level__30248__auto___65480 = metabase.util.log.glogi_level(new cljs.core.Keyword(null,\"debug\",\"debug\",-1608172596));\nvar logger__30249__auto___65481 = \"metabase.lib.js\";\nif(cljs.core.truth_(metabase.util.log.is_loggable_QMARK_(logger__30249__auto___65481,level__30248__auto___65480))){\nvar x__30250__auto___65482 = \"query map: %s\";\nif((x__30250__auto___65482 instanceof Error)){\nlambdaisland.glogi.log.cljs$core$IFn$_invoke$arity$4(logger__30249__auto___65481,level__30248__auto___65480,metabase.util.log.format_msg(cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([query_map__$1], 0))),x__30250__auto___65482);\n} else {\nlambdaisland.glogi.log.cljs$core$IFn$_invoke$arity$4(logger__30249__auto___65481,level__30248__auto___65480,metabase.util.log.format_msg.cljs$core$IFn$_invoke$arity$variadic(x__30250__auto___65482,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([query_map__$1], 0))], 0)),null);\n}\n} else {\n}\n\nreturn metabase.lib.core.query.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([metabase.lib.js.metadataProvider(database_id,metadata),query_map__$1], 0));\n});\n/**\n * This converts namespaced keywords to strings as `\"foo/bar\"`.\n * \n *   `clj->js` supports overriding how keyword map keys get transformed, but it doesn't let you override how values are\n *   handled. So this function runs first and turns them into strings.\n * \n *   As an example of such a value, `(get-in card [:template-tags \"some-tag\" :widget-type])` can be `:date/all-options`.\n */\nmetabase.lib.js.fix_namespaced_values = (function metabase$lib$js$fix_namespaced_values(x){\nif(cljs.core.qualified_keyword_QMARK_(x)){\nreturn [cljs.core.namespace(x),\"/\",cljs.core.name(x)].join('');\n} else {\nif(cljs.core.map_QMARK_(x)){\nreturn cljs.core.update_vals(x,metabase.lib.js.fix_namespaced_values);\n} else {\nif(cljs.core.sequential_QMARK_(x)){\nreturn cljs.core.map.cljs$core$IFn$_invoke$arity$2(metabase.lib.js.fix_namespaced_values,x);\n} else {\nreturn x;\n\n}\n}\n}\n});\n/**\n * Coerce a CLJS pMBQL query back to (1) a legacy query (2) in vanilla JS.\n */\nmetabase.lib.js.legacy_query = (function metabase$lib$js$legacy_query(query_map){\nreturn cljs.core.clj__GT_js.cljs$core$IFn$_invoke$arity$variadic(metabase.lib.js.fix_namespaced_values(metabase.lib.convert.__GT_legacy_MBQL.cljs$core$IFn$_invoke$arity$1(query_map)),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"keyword-fn\",\"keyword-fn\",-64566675),metabase.util.qualified_name], 0));\n});\n/**\n * Adds a new blank stage to the end of the pipeline\n */\nmetabase.lib.js.append_stage = (function metabase$lib$js$append_stage(a_query){\nreturn metabase.lib.core.append_stage.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([a_query], 0));\n});\n/**\n * Drops the final stage in the pipeline\n */\nmetabase.lib.js.drop_stage = (function metabase$lib$js$drop_stage(a_query){\nreturn metabase.lib.core.drop_stage.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([a_query], 0));\n});\n/**\n * Return a sequence of Column metadatas about the columns you can add order bys for in a given stage of `a-query.` To\n *   add an order by, pass the result to [[order-by]].\n */\nmetabase.lib.js.orderable_columns = (function metabase$lib$js$orderable_columns(a_query,stage_number){\nreturn cljs.core.to_array(metabase.lib.core.orderable_columns.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([a_query,stage_number], 0)));\n});\n/**\n * Given an opaque Cljs object, return a plain JS object with info you'd need to implement UI for it.\n *   See `:metabase.lib.metadata.calculation/display-info` for the keys this might contain. Note that the JS versions of\n *   the keys are converted to the equivalent `camelCase` strings from the original `:kebab-case`.\n */\nmetabase.lib.js.display_info = (function metabase$lib$js$display_info(a_query,stage_number,x){\nreturn cljs.core.clj__GT_js.cljs$core$IFn$_invoke$arity$variadic(cljs.core.update.cljs$core$IFn$_invoke$arity$4(cljs.core.update_keys(metabase.lib.core.display_info.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([metabase.lib.stage.ensure_previous_stages_have_metadata(a_query,stage_number),stage_number,x], 0)),metabase.util.__GT_camelCaseEn),new cljs.core.Keyword(null,\"table\",\"table\",-564943036),cljs.core.update_keys,metabase.util.__GT_camelCaseEn),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"keyword-fn\",\"keyword-fn\",-64566675),metabase.util.qualified_name], 0));\n});\n/**\n * Create an order-by clause independently of a query, e.g. for `replace` or whatever.\n */\nmetabase.lib.js.order_by_clause = (function metabase$lib$js$order_by_clause(var_args){\nvar G__65387 = arguments.length;\nswitch (G__65387) {\ncase 1:\nreturn metabase.lib.js.order_by_clause.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\n\nbreak;\ncase 2:\nreturn metabase.lib.js.order_by_clause.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\ngoog.exportSymbol('metabase.lib.js.order_by_clause', metabase.lib.js.order_by_clause);\n\n(metabase.lib.js.order_by_clause.cljs$core$IFn$_invoke$arity$1 = (function (orderable){\nreturn metabase.lib.js.order_by_clause.cljs$core$IFn$_invoke$arity$2(orderable,new cljs.core.Keyword(null,\"asc\",\"asc\",356854569));\n}));\n\n(metabase.lib.js.order_by_clause.cljs$core$IFn$_invoke$arity$2 = (function (orderable,direction){\nreturn metabase.lib.core.order_by_clause.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([metabase.lib.core.normalize.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([cljs.core.js__GT_clj.cljs$core$IFn$_invoke$arity$variadic(orderable,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"keywordize-keys\",\"keywordize-keys\",1310784252),true], 0))], 0)),cljs.core.keyword.cljs$core$IFn$_invoke$arity$1(direction)], 0));\n}));\n\n(metabase.lib.js.order_by_clause.cljs$lang$maxFixedArity = 2);\n\n/**\n * Add an `order-by` clause to `a-query`. Returns updated query.\n */\nmetabase.lib.js.order_by = (function metabase$lib$js$order_by(a_query,stage_number,orderable,direction){\nreturn metabase.lib.core.order_by.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([a_query,stage_number,orderable,cljs.core.keyword.cljs$core$IFn$_invoke$arity$1(direction)], 0));\n});\n/**\n * Get the order-by clauses (as an array of opaque objects) in `a-query` at a given `stage-number`.\n *   Returns an empty array if there are no order bys in the query.\n */\nmetabase.lib.js.order_bys = (function metabase$lib$js$order_bys(a_query,stage_number){\nreturn cljs.core.to_array(metabase.lib.core.order_bys.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([a_query,stage_number], 0)));\n});\n/**\n * Flip the direction of `current-order-by` in `a-query`.\n */\nmetabase.lib.js.change_direction = (function metabase$lib$js$change_direction(a_query,current_order_by){\nreturn metabase.lib.core.change_direction.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([a_query,current_order_by], 0));\n});\n/**\n * Return an array of Column metadatas about the columns that can be broken out by in a given stage of `a-query.`\n *   To break out by a given column, the corresponding element of the result has to be added to the query using\n *   [[breakout]].\n */\nmetabase.lib.js.breakoutable_columns = (function metabase$lib$js$breakoutable_columns(a_query,stage_number){\nreturn cljs.core.to_array(metabase.lib.core.breakoutable_columns.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([a_query,stage_number], 0)));\n});\n/**\n * Get the breakout clauses (as an array of opaque objects) in `a-query` at a given `stage-number`.\n *   Returns an empty array if there are no order bys in the query.\n */\nmetabase.lib.js.breakouts = (function metabase$lib$js$breakouts(a_query,stage_number){\nreturn cljs.core.to_array(metabase.lib.core.breakouts.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([a_query,stage_number], 0)));\n});\n/**\n * Add an `order-by` clause to `a-query`. Returns updated query.\n */\nmetabase.lib.js.breakout = (function metabase$lib$js$breakout(a_query,stage_number,x){\nreturn metabase.lib.core.breakout.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([a_query,stage_number,metabase.lib.core.ref.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([x], 0))], 0));\n});\n/**\n * Retrieve the current binning state of a `:field` clause, field metadata, etc. as an opaque object, or `nil` if it\n *   does not have binning options set.\n */\nmetabase.lib.js.binning = (function metabase$lib$js$binning(x){\nreturn metabase.lib.core.binning.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([x], 0));\n});\n/**\n * Given `x` (a field reference) and a `binning` value, return a new `:field` clause with its `:binning` options set.\n * \n *   If `binning` is `nil`, removes any `:binning` options currently present.\n * \n *   `binning` can be one of the opaque values returned by [[available-binning-strategies]], or a literal\n *   [[metabase.lib.schema.binning/binning]] value.\n */\nmetabase.lib.js.with_binning = (function metabase$lib$js$with_binning(x,binning_option){\nreturn metabase.lib.core.with_binning.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([x,binning_option], 0));\n});\n/**\n * Get a list of available binning strategies for `x` (a field reference, generally) in the context of `a-query` and\n *   optionally `stage-number`. The returned list contains opaque objects which should be passed to [[display-info]].\n */\nmetabase.lib.js.available_binning_strategies = (function metabase$lib$js$available_binning_strategies(var_args){\nvar G__65448 = arguments.length;\nswitch (G__65448) {\ncase 2:\nreturn metabase.lib.js.available_binning_strategies.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ncase 3:\nreturn metabase.lib.js.available_binning_strategies.cljs$core$IFn$_invoke$arity$3((arguments[(0)]),(arguments[(1)]),(arguments[(2)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\ngoog.exportSymbol('metabase.lib.js.available_binning_strategies', metabase.lib.js.available_binning_strategies);\n\n(metabase.lib.js.available_binning_strategies.cljs$core$IFn$_invoke$arity$2 = (function (a_query,x){\nreturn cljs.core.to_array(metabase.lib.core.available_binning_strategies.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([a_query,x], 0)));\n}));\n\n(metabase.lib.js.available_binning_strategies.cljs$core$IFn$_invoke$arity$3 = (function (a_query,stage_number,x){\nreturn cljs.core.to_array(metabase.lib.core.available_binning_strategies.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([a_query,stage_number,x], 0)));\n}));\n\n(metabase.lib.js.available_binning_strategies.cljs$lang$maxFixedArity = 3);\n\n/**\n * Get the current temporal bucketing options associated with something, if any.\n */\nmetabase.lib.js.temporal_bucket = (function metabase$lib$js$temporal_bucket(x){\nreturn metabase.lib.core.temporal_bucket.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([x], 0));\n});\n/**\n * Add a temporal bucketing option to an MBQL clause (or something that can be converted to an MBQL clause).\n */\nmetabase.lib.js.with_temporal_bucket = (function metabase$lib$js$with_temporal_bucket(x,bucketing_option){\nreturn metabase.lib.core.with_temporal_bucket.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([x,bucketing_option], 0));\n});\n/**\n * Get a list of available temporal bucketing options for `x` (a field reference, generally) in the context of `a-query`\n *   and optionally `stage-number`. The returned list contains opaque objects which should be passed to [[display-info]].\n */\nmetabase.lib.js.available_temporal_buckets = (function metabase$lib$js$available_temporal_buckets(var_args){\nvar G__65459 = arguments.length;\nswitch (G__65459) {\ncase 2:\nreturn metabase.lib.js.available_temporal_buckets.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ncase 3:\nreturn metabase.lib.js.available_temporal_buckets.cljs$core$IFn$_invoke$arity$3((arguments[(0)]),(arguments[(1)]),(arguments[(2)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\ngoog.exportSymbol('metabase.lib.js.available_temporal_buckets', metabase.lib.js.available_temporal_buckets);\n\n(metabase.lib.js.available_temporal_buckets.cljs$core$IFn$_invoke$arity$2 = (function (a_query,x){\nreturn cljs.core.to_array(metabase.lib.core.available_temporal_buckets.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([a_query,x], 0)));\n}));\n\n(metabase.lib.js.available_temporal_buckets.cljs$core$IFn$_invoke$arity$3 = (function (a_query,stage_number,x){\nreturn cljs.core.to_array(metabase.lib.core.available_temporal_buckets.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([a_query,stage_number,x], 0)));\n}));\n\n(metabase.lib.js.available_temporal_buckets.cljs$lang$maxFixedArity = 3);\n\n/**\n * Removes the `target-clause` in the filter of the `query`.\n */\nmetabase.lib.js.remove_clause = (function metabase$lib$js$remove_clause(a_query,stage_number,clause){\nreturn metabase.lib.core.remove_clause.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([a_query,stage_number,metabase.lib.core.normalize.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([cljs.core.js__GT_clj.cljs$core$IFn$_invoke$arity$variadic(clause,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"keywordize-keys\",\"keywordize-keys\",1310784252),true], 0))], 0))], 0));\n});\n/**\n * Replaces the `target-clause` with `new-clause` in the `query` stage.\n */\nmetabase.lib.js.replace_clause = (function metabase$lib$js$replace_clause(a_query,stage_number,target_clause,new_clause){\nreturn metabase.lib.core.replace_clause.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([a_query,stage_number,metabase.lib.core.normalize.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([cljs.core.js__GT_clj.cljs$core$IFn$_invoke$arity$variadic(target_clause,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"keywordize-keys\",\"keywordize-keys\",1310784252),true], 0))], 0)),metabase.lib.core.normalize.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([cljs.core.js__GT_clj.cljs$core$IFn$_invoke$arity$variadic(new_clause,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"keywordize-keys\",\"keywordize-keys\",1310784252),true], 0))], 0))], 0));\n});\nmetabase.lib.js.prep_query_for_equals = (function metabase$lib$js$prep_query_for_equals(a_query,field_ids){\nreturn medley.core.update_existing.cljs$core$IFn$_invoke$arity$3(medley.core.update_existing.cljs$core$IFn$_invoke$arity$3(metabase.mbql.js.normalize_cljs(a_query),new cljs.core.Keyword(null,\"native\",\"native\",-613060878),(function (p1__65460_SHARP_){\nreturn cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"template-tags\",\"template-tags\",1853115685),cljs.core.PersistentArrayMap.EMPTY], null),p1__65460_SHARP_], 0));\n})),new cljs.core.Keyword(null,\"query\",\"query\",-1288509510),(function (inner_query){\nvar fields = (function (){var or__5045__auto__ = new cljs.core.Keyword(null,\"fields\",\"fields\",-1932066230).cljs$core$IFn$_invoke$arity$1(inner_query);\nif(cljs.core.truth_(or__5045__auto__)){\nreturn or__5045__auto__;\n} else {\nvar iter__5523__auto__ = (function metabase$lib$js$prep_query_for_equals_$_iter__65461(s__65462){\nreturn (new cljs.core.LazySeq(null,(function (){\nvar s__65462__$1 = s__65462;\nwhile(true){\nvar temp__5804__auto__ = cljs.core.seq(s__65462__$1);\nif(temp__5804__auto__){\nvar s__65462__$2 = temp__5804__auto__;\nif(cljs.core.chunked_seq_QMARK_(s__65462__$2)){\nvar c__5521__auto__ = cljs.core.chunk_first(s__65462__$2);\nvar size__5522__auto__ = cljs.core.count(c__5521__auto__);\nvar b__65464 = cljs.core.chunk_buffer(size__5522__auto__);\nif((function (){var i__65463 = (0);\nwhile(true){\nif((i__65463 < size__5522__auto__)){\nvar id = cljs.core._nth(c__5521__auto__,i__65463);\ncljs.core.chunk_append(b__65464,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"field\",\"field\",-1302436500),id,null], null));\n\nvar G__65486 = (i__65463 + (1));\ni__65463 = G__65486;\ncontinue;\n} else {\nreturn true;\n}\nbreak;\n}\n})()){\nreturn cljs.core.chunk_cons(cljs.core.chunk(b__65464),metabase$lib$js$prep_query_for_equals_$_iter__65461(cljs.core.chunk_rest(s__65462__$2)));\n} else {\nreturn cljs.core.chunk_cons(cljs.core.chunk(b__65464),null);\n}\n} else {\nvar id = cljs.core.first(s__65462__$2);\nreturn cljs.core.cons(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"field\",\"field\",-1302436500),id,null], null),metabase$lib$js$prep_query_for_equals_$_iter__65461(cljs.core.rest(s__65462__$2)));\n}\n} else {\nreturn null;\n}\nbreak;\n}\n}),null,null));\n});\nreturn iter__5523__auto__(field_ids);\n}\n})();\nreturn cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(inner_query,new cljs.core.Keyword(null,\"fields\",\"fields\",-1932066230),cljs.core.frequencies(fields));\n}));\n});\n/**\n * Returns whether the provided queries should be considered equal.\n * \n *   If `field-ids` is specified, an input MBQL query without `:fields` set defaults to the `field-ids`.\n * \n *   Currently this works only for legacy queries in JS form!\n *   It duplicates the logic formerly found in `query_builder/selectors.js`.\n * \n *   TODO: This should evolve into a more robust, pMBQL-based sense of equality over time.\n *   For now it pulls logic that touches query internals into `metabase.lib`.\n */\nmetabase.lib.js.query_EQ_ = (function metabase$lib$js$query_EQ_(var_args){\nvar G__65466 = arguments.length;\nswitch (G__65466) {\ncase 2:\nreturn metabase.lib.js.query_EQ_.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ncase 3:\nreturn metabase.lib.js.query_EQ_.cljs$core$IFn$_invoke$arity$3((arguments[(0)]),(arguments[(1)]),(arguments[(2)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\ngoog.exportSymbol('metabase.lib.js.query_EQ_', metabase.lib.js.query_EQ_);\n\n(metabase.lib.js.query_EQ_.cljs$core$IFn$_invoke$arity$2 = (function (query1,query2){\nreturn metabase.lib.js.query_EQ_.cljs$core$IFn$_invoke$arity$3(query1,query2,null);\n}));\n\n(metabase.lib.js.query_EQ_.cljs$core$IFn$_invoke$arity$3 = (function (query1,query2,field_ids){\nvar n1 = metabase.lib.js.prep_query_for_equals(query1,field_ids);\nvar n2 = metabase.lib.js.prep_query_for_equals(query2,field_ids);\nreturn cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(n1,n2);\n}));\n\n(metabase.lib.js.query_EQ_.cljs$lang$maxFixedArity = 3);\n\n/**\n * Given a group of columns returned by a function like [[metabase.lib.js/orderable-columns]], group the columns\n *   by Table or equivalent (e.g. Saved Question) so that they're in an appropriate shape for showing in the Query\n *   Builder. e.g a sequence of columns like\n * \n *  [venues.id\n *   venues.name\n *   venues.category-id\n *   ;; implicitly joinable\n *   categories.id\n *   categories.name]\n * \n *   would get grouped into groups like\n * \n *  [{::columns [venues.id\n *               venues.name\n *               venues.category-id]}\n *   {::columns [categories.id\n *               categories.name]}]\n * \n *   Groups have the type `:metadata/column-group` and can be passed directly\n *   to [[metabase.lib.js/display-info]].\n *   Use [[metabase.lib.js/columns-group-columns]] to extract the columns from a group.\n */\nmetabase.lib.js.group_columns = (function metabase$lib$js$group_columns(column_metadatas){\nreturn cljs.core.to_array(metabase.lib.core.group_columns.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([column_metadatas], 0)));\n});\n/**\n * Get the columns associated with a column group\n */\nmetabase.lib.js.columns_group_columns = (function metabase$lib$js$columns_group_columns(column_group){\nreturn cljs.core.to_array(metabase.lib.core.columns_group_columns.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([column_group], 0)));\n});\n/**\n * Get a translated description of a temporal bucketing unit.\n */\nmetabase.lib.js.describe_temporal_unit = (function metabase$lib$js$describe_temporal_unit(n,unit){\nvar unit__$1 = ((typeof unit === 'string')?cljs.core.keyword.cljs$core$IFn$_invoke$arity$1(unit):unit);\nreturn metabase.lib.core.describe_temporal_unit.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([n,unit__$1], 0));\n});\n/**\n * Get a translated description of a temporal bucketing interval.\n */\nmetabase.lib.js.describe_temporal_interval = (function metabase$lib$js$describe_temporal_interval(n,unit){\nvar n__$1 = ((typeof n === 'string')?cljs.core.keyword.cljs$core$IFn$_invoke$arity$1(n):n);\nvar unit__$1 = ((typeof unit === 'string')?cljs.core.keyword.cljs$core$IFn$_invoke$arity$1(unit):unit);\nreturn metabase.lib.core.describe_temporal_interval.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([n__$1,unit__$1], 0));\n});\n/**\n * Get a translated description of a relative datetime interval.\n */\nmetabase.lib.js.describe_relative_datetime = (function metabase$lib$js$describe_relative_datetime(n,unit){\nvar n__$1 = ((typeof n === 'string')?cljs.core.keyword.cljs$core$IFn$_invoke$arity$1(n):n);\nvar unit__$1 = ((typeof unit === 'string')?cljs.core.keyword.cljs$core$IFn$_invoke$arity$1(unit):unit);\nreturn metabase.lib.core.describe_relative_datetime.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([n__$1,unit__$1], 0));\n});\n/**\n * Adds an aggregation to query.\n */\nmetabase.lib.js.aggregate = (function metabase$lib$js$aggregate(a_query,stage_number,an_aggregate_clause){\nreturn metabase.lib.core.aggregate.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([a_query,stage_number,cljs.core.js__GT_clj.cljs$core$IFn$_invoke$arity$variadic(an_aggregate_clause,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"keywordize-keys\",\"keywordize-keys\",1310784252),true], 0))], 0));\n});\n/**\n * Get the aggregations in a given stage of a query.\n */\nmetabase.lib.js.aggregations = (function metabase$lib$js$aggregations(a_query,stage_number){\nreturn cljs.core.to_array(metabase.lib.core.aggregations.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([a_query,stage_number], 0)));\n});\n/**\n * Returns a standalone aggregation clause for an `aggregation-operator` and\n * a `column`.\n * For aggregations requiring an argument `column` is mandatory, otherwise\n * it is optional.\n */\nmetabase.lib.js.aggregation_clause = (function metabase$lib$js$aggregation_clause(var_args){\nvar G__65468 = arguments.length;\nswitch (G__65468) {\ncase 1:\nreturn metabase.lib.js.aggregation_clause.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\n\nbreak;\ncase 2:\nreturn metabase.lib.js.aggregation_clause.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\ngoog.exportSymbol('metabase.lib.js.aggregation_clause', metabase.lib.js.aggregation_clause);\n\n(metabase.lib.js.aggregation_clause.cljs$core$IFn$_invoke$arity$1 = (function (aggregation_operator){\nreturn metabase.lib.core.aggregation_clause.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([aggregation_operator], 0));\n}));\n\n(metabase.lib.js.aggregation_clause.cljs$core$IFn$_invoke$arity$2 = (function (aggregation_operator,column){\nreturn metabase.lib.core.aggregation_clause.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([aggregation_operator,column], 0));\n}));\n\n(metabase.lib.js.aggregation_clause.cljs$lang$maxFixedArity = 2);\n\n/**\n * Get the available aggregation operators for the stage with `stage-number` of\n *   the query `a-query`.\n *   If `stage-number` is omitted, the last stage is used.\n */\nmetabase.lib.js.available_aggregation_operators = (function metabase$lib$js$available_aggregation_operators(a_query,stage_number){\nreturn cljs.core.to_array(metabase.lib.core.available_aggregation_operators.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([a_query,stage_number], 0)));\n});\n/**\n * Get the columns `aggregation-operator` can be applied to.\n *   The columns are valid for the stage of the query that was used in\n *   [[available-binning-strategies]] to get `available-aggregation`.\n */\nmetabase.lib.js.aggregation_operator_columns = (function metabase$lib$js$aggregation_operator_columns(aggregation_operator){\nreturn cljs.core.to_array(metabase.lib.core.aggregation_operator_columns.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([aggregation_operator], 0)));\n});\n/**\n * Mark the operator and the column (if any) in `agg-operators` selected by `agg-clause`.\n */\nmetabase.lib.js.selected_aggregation_operators = (function metabase$lib$js$selected_aggregation_operators(agg_operators,agg_clause){\nreturn cljs.core.to_array(metabase.lib.core.selected_aggregation_operators.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([cljs.core.seq(agg_operators),agg_clause], 0)));\n});\n/**\n * Get the available filterable columns for the stage with `stage-number` of the query `a-query`.\n */\nmetabase.lib.js.filterable_columns = (function metabase$lib$js$filterable_columns(a_query,stage_number){\nreturn cljs.core.to_array(metabase.lib.core.filterable_columns.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([a_query,stage_number], 0)));\n});\n/**\n * Returns the operators for which `filterable-column` is applicable.\n */\nmetabase.lib.js.filterable_column_operators = (function metabase$lib$js$filterable_column_operators(filterable_column){\nreturn cljs.core.to_array(metabase.lib.core.filterable_column_operators.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([filterable_column], 0)));\n});\n/**\n * Returns a standalone filter clause for a `filter-operator`,\n *   a `column`, and arguments.\n */\nmetabase.lib.js.filter_clause = (function metabase$lib$js$filter_clause(var_args){\nvar args__5775__auto__ = [];\nvar len__5769__auto___65489 = arguments.length;\nvar i__5770__auto___65490 = (0);\nwhile(true){\nif((i__5770__auto___65490 < len__5769__auto___65489)){\nargs__5775__auto__.push((arguments[i__5770__auto___65490]));\n\nvar G__65491 = (i__5770__auto___65490 + (1));\ni__5770__auto___65490 = G__65491;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__5776__auto__ = ((((2) < args__5775__auto__.length))?(new cljs.core.IndexedSeq(args__5775__auto__.slice((2)),(0),null)):null);\nreturn metabase.lib.js.filter_clause.cljs$core$IFn$_invoke$arity$variadic((arguments[(0)]),(arguments[(1)]),argseq__5776__auto__);\n});\ngoog.exportSymbol('metabase.lib.js.filter_clause', metabase.lib.js.filter_clause);\n\n(metabase.lib.js.filter_clause.cljs$core$IFn$_invoke$arity$variadic = (function (filter_operator,column,args){\nreturn cljs.core.apply.cljs$core$IFn$_invoke$arity$4(metabase.lib.core.filter_clause,filter_operator,column,args);\n}));\n\n(metabase.lib.js.filter_clause.cljs$lang$maxFixedArity = (2));\n\n/** @this {Function} */\n(metabase.lib.js.filter_clause.cljs$lang$applyTo = (function (seq65469){\nvar G__65470 = cljs.core.first(seq65469);\nvar seq65469__$1 = cljs.core.next(seq65469);\nvar G__65471 = cljs.core.first(seq65469__$1);\nvar seq65469__$2 = cljs.core.next(seq65469__$1);\nvar self__5754__auto__ = this;\nreturn self__5754__auto__.cljs$core$IFn$_invoke$arity$variadic(G__65470,G__65471,seq65469__$2);\n}));\n\n/**\n * Returns the filter operator of `filter-clause`.\n */\nmetabase.lib.js.filter_operator = (function metabase$lib$js$filter_operator(a_query,stage_number,a_filter_clause){\nreturn metabase.lib.core.filter_operator.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([a_query,stage_number,a_filter_clause], 0));\n});\n/**\n * Sets `boolean-expression` as a filter on `query`.\n */\nmetabase.lib.js.filter = (function metabase$lib$js$filter(a_query,stage_number,boolean_expression){\nreturn metabase.lib.core.filter.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([a_query,stage_number,cljs.core.js__GT_clj.cljs$core$IFn$_invoke$arity$variadic(boolean_expression,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"keywordize-keys\",\"keywordize-keys\",1310784252),true], 0))], 0));\n});\n/**\n * Returns the current filters in stage with `stage-number` of `query`.\n *   Logicaly, the filter attached to the query is the conjunction of the expressions\n *   in the returned list. If the returned list is empty, then there is no filter\n *   attached to the query.\n */\nmetabase.lib.js.filters = (function metabase$lib$js$filters(a_query,stage_number){\nreturn cljs.core.to_array(metabase.lib.core.filters.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([a_query,stage_number], 0)));\n});\n/**\n * Get the current `:fields` in a query. Unlike the lib core version, this will return an empty sequence if `:fields` is\n *   not specified rather than `nil` for JS-friendliness.\n */\nmetabase.lib.js.fields = (function metabase$lib$js$fields(a_query,stage_number){\nreturn cljs.core.to_array(metabase.lib.core.fields.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([a_query,stage_number], 0)));\n});\n/**\n * Specify the `:fields` for a query. Pass an empty sequence or `nil` to remove `:fields`.\n */\nmetabase.lib.js.with_fields = (function metabase$lib$js$with_fields(a_query,stage_number,new_fields){\nreturn metabase.lib.core.with_fields.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([a_query,stage_number,new_fields], 0));\n});\n/**\n * Return a sequence of column metadatas for columns that you can specify in the `:fields` of a query.\n */\nmetabase.lib.js.fieldable_columns = (function metabase$lib$js$fieldable_columns(a_query,stage_number){\nreturn cljs.core.to_array(metabase.lib.core.fieldable_columns.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([a_query,stage_number], 0)));\n});\n/**\n * Get the strategy (type) of a given join as an opaque JoinStrategy object.\n */\nmetabase.lib.js.join_strategy = (function metabase$lib$js$join_strategy(a_join){\nreturn metabase.lib.core.join_strategy.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([a_join], 0));\n});\n/**\n * Return a copy of `a-join` with its `:strategy` set to an opaque JoinStrategy.\n */\nmetabase.lib.js.with_join_strategy = (function metabase$lib$js$with_join_strategy(a_join,strategy){\nreturn metabase.lib.core.with_join_strategy.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([a_join,strategy], 0));\n});\n/**\n * Get available join strategies for the current Database (based on the Database's\n *   supported [[metabase.driver/driver-features]]) as opaque JoinStrategy objects.\n */\nmetabase.lib.js.available_join_strategies = (function metabase$lib$js$available_join_strategies(a_query,stage_number){\nreturn cljs.core.to_array(metabase.lib.core.available_join_strategies.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([a_query,stage_number], 0)));\n});\n/**\n * Get a sequence of columns that can be used as the left-hand-side (source column) in a join condition. This column\n *   is the one that comes from the source Table/Card/previous stage of the query or a previous join.\n * \n *   If you are changing the LHS of a condition for an existing join, pass in that existing join as\n *   `existing-join-or-nil` so we can filter out the columns added by it (it doesn't make sense to present the columns\n *   added by a join as options for its own LHS). Otherwise pass `nil` when building a new join. See #32005 for more\n *   info.\n * \n *   If the right-hand-side column has already been chosen (they can be chosen in any order in the Query Builder UI),\n *   pass in the chosen RHS column. In the future, this may be used to restrict results to compatible columns. (See #31174)\n * \n *   Results will be returned in a 'somewhat smart' order with PKs and FKs returned before other columns.\n * \n *   Unlike most other things that return columns, implicitly-joinable columns ARE NOT returned here.\n */\nmetabase.lib.js.join_condition_lhs_columns = (function metabase$lib$js$join_condition_lhs_columns(a_query,stage_number,existing_join_or_nil,rhs_column_or_nil){\nreturn cljs.core.to_array(metabase.lib.core.join_condition_lhs_columns.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([a_query,stage_number,existing_join_or_nil,rhs_column_or_nil], 0)));\n});\n/**\n * Get a sequence of columns that can be used as the right-hand-side (target column) in a join condition. This column\n *   is the one that belongs to the thing being joined, `joinable`, which can be something like a\n *   Table ([[metabase.lib.metadata/TableMetadata]]), Saved Question/Model ([[metabase.lib.metadata/CardMetadata]]),\n *   another query, etc. -- anything you can pass to [[join-clause]].\n * \n *   If the lhs-hand-side column has already been chosen (they can be chosen in any order in the Query Builder UI),\n *   pass in the chosen LHS column. In the future, this may be used to restrict results to compatible columns. (See #31174)\n * \n *   Results will be returned in a 'somewhat smart' order with PKs and FKs returned before other columns.\n */\nmetabase.lib.js.join_condition_rhs_columns = (function metabase$lib$js$join_condition_rhs_columns(a_query,stage_number,joinable,lhs_column_or_nil){\nreturn cljs.core.to_array(metabase.lib.core.join_condition_rhs_columns.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([a_query,stage_number,joinable,lhs_column_or_nil], 0)));\n});\n/**\n * Return a sequence of valid filter clause operators that can be used to build a join condition. In the Query Builder\n *   UI, this can be chosen at any point before or after choosing the LHS and RHS. Invalid options are not currently\n *   filtered out based on values of the LHS or RHS, but in the future we can add this -- see #31174.\n */\nmetabase.lib.js.join_condition_operators = (function metabase$lib$js$join_condition_operators(a_query,stage_number,lhs_column_or_nil,rhs_column_or_nil){\nreturn cljs.core.to_array(metabase.lib.core.join_condition_operators.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([a_query,stage_number,lhs_column_or_nil,rhs_column_or_nil], 0)));\n});\n/**\n * Adds an expression to query.\n */\nmetabase.lib.js.expression = (function metabase$lib$js$expression(a_query,stage_number,expression_name,an_expression_clause){\nreturn metabase.lib.core.expression.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([a_query,stage_number,expression_name,an_expression_clause], 0));\n});\n/**\n * Get the expressions map from a given stage of a `query`.\n */\nmetabase.lib.js.expressions = (function metabase$lib$js$expressions(a_query,stage_number){\nreturn cljs.core.to_array(metabase.lib.core.expressions.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([a_query,stage_number], 0)));\n});\n/**\n * Return an array of Column metadatas about the columns that can be used in an expression in a given stage of `a-query`.\n * Pass the current `expression-position` or `null` for new expressions.\n */\nmetabase.lib.js.expressionable_columns = (function metabase$lib$js$expressionable_columns(var_args){\nvar G__65473 = arguments.length;\nswitch (G__65473) {\ncase 2:\nreturn metabase.lib.js.expressionable_columns.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ncase 3:\nreturn metabase.lib.js.expressionable_columns.cljs$core$IFn$_invoke$arity$3((arguments[(0)]),(arguments[(1)]),(arguments[(2)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\ngoog.exportSymbol('metabase.lib.js.expressionable_columns', metabase.lib.js.expressionable_columns);\n\n(metabase.lib.js.expressionable_columns.cljs$core$IFn$_invoke$arity$2 = (function (a_query,expression_position){\nreturn metabase.lib.js.expressionable_columns.cljs$core$IFn$_invoke$arity$2(a_query,expression_position);\n}));\n\n(metabase.lib.js.expressionable_columns.cljs$core$IFn$_invoke$arity$3 = (function (a_query,stage_number,expression_position){\nreturn cljs.core.to_array(metabase.lib.core.expressionable_columns.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([a_query,stage_number,expression_position], 0)));\n}));\n\n(metabase.lib.js.expressionable_columns.cljs$lang$maxFixedArity = 3);\n\n/**\n * Return a suggested default join condition when constructing a join against `joinable`, e.g. a Table, Saved\n *   Question, or another query. A suggested condition will be returned if the source Table has a foreign key to the\n *   primary key of the thing we're joining (see #31175 for more info); otherwise this will return `nil` if no default\n *   condition is suggested.\n */\nmetabase.lib.js.suggested_join_condition = (function metabase$lib$js$suggested_join_condition(a_query,stage_number,joinable){\nreturn metabase.lib.core.suggested_join_condition.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([a_query,stage_number,joinable], 0));\n});\n/**\n * Get the `:fields` associated with a join.\n */\nmetabase.lib.js.join_fields = (function metabase$lib$js$join_fields(a_join){\nvar joined_fields = metabase.lib.core.join_fields.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([a_join], 0));\nif((joined_fields instanceof cljs.core.Keyword)){\nreturn metabase.util.qualified_name(joined_fields);\n} else {\nreturn cljs.core.to_array(joined_fields);\n}\n});\n/**\n * Set the `:fields` for `a-join`.\n */\nmetabase.lib.js.with_join_fields = (function metabase$lib$js$with_join_fields(a_join,new_fields){\nreturn metabase.lib.core.with_join_fields.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([a_join,(function (){var G__65474 = new_fields;\nif(typeof new_fields === 'string'){\nreturn cljs.core.keyword.cljs$core$IFn$_invoke$arity$1(G__65474);\n} else {\nreturn G__65474;\n}\n})()], 0));\n});\n/**\n * Create a join clause (an `:mbql/join` map) against something `joinable` (Table metadata, a Saved Question, another\n *   query, etc.) with `conditions`, which should be an array of filter clauses. You can then manipulate this join clause\n *   with stuff like [[with-join-fields]], or add it to a query with [[join]].\n */\nmetabase.lib.js.join_clause = (function metabase$lib$js$join_clause(joinable,conditions){\nreturn metabase.lib.core.join_clause.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([joinable,conditions], 0));\n});\n/**\n * Add a join clause (as created by [[join-clause]]) to a stage of a query.\n */\nmetabase.lib.js.join = (function metabase$lib$js$join(a_query,stage_number,a_join){\nreturn metabase.lib.core.join.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([a_query,stage_number,a_join], 0));\n});\n/**\n * Get the conditions (filter clauses) associated with a join.\n */\nmetabase.lib.js.join_conditions = (function metabase$lib$js$join_conditions(a_join){\nreturn cljs.core.to_array(metabase.lib.core.join_conditions.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([a_join], 0)));\n});\n/**\n * Set the `:conditions` (filter clauses) for a join.\n */\nmetabase.lib.js.with_join_conditions = (function metabase$lib$js$with_join_conditions(a_join,conditions){\nreturn metabase.lib.core.with_join_conditions.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([a_join,cljs.core.js__GT_clj.cljs$core$IFn$_invoke$arity$variadic(conditions,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"keywordize-keys\",\"keywordize-keys\",1310784252),true], 0))], 0));\n});\n/**\n * Get the joins associated with a particular query stage.\n */\nmetabase.lib.js.joins = (function metabase$lib$js$joins(a_query,stage_number){\nreturn cljs.core.to_array(metabase.lib.core.joins.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([a_query,stage_number], 0)));\n});\n/**\n * Rename the join specified by `join-spec` in `a-query` at `stage-number` to `new-name`.\n *   The join can be specified either by itself (as returned by [[joins]]), by its alias\n *   or by its index in the list of joins as returned by [[joins]].\n *   If the specified join cannot be found, then `query` is returned as is.\n *   If renaming the join to `new-name` would clash with an existing join, a\n *   suffix is appended to `new-name` to make it unique.\n */\nmetabase.lib.js.rename_join = (function metabase$lib$js$rename_join(a_query,stage_number,join_spec,new_name){\nreturn metabase.lib.core.rename_join.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([a_query,stage_number,join_spec,new_name], 0));\n});\n/**\n * Remove the join specified by `join-spec` in `a-query` at `stage-number`.\n *   The join can be specified either by itself (as returned by [[joins]]), by its alias\n *   or by its index in the list of joins as returned by [[joins]].\n *   If the specified join cannot be found, then `a-query` is returned as is.\n *   Top level clauses containing references to the removed join are removed too.\n */\nmetabase.lib.js.remove_join = (function metabase$lib$js$remove_join(a_query,stage_number,join_spec){\nreturn metabase.lib.core.remove_join.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([a_query,stage_number,join_spec], 0));\n});\n/**\n * Return metadata about the origin of `join` using `metadata-providerable` as the source of information.\n */\nmetabase.lib.js.joined_thing = (function metabase$lib$js$joined_thing(a_query,a_join){\nreturn metabase.lib.join.joined_thing(a_query,a_join);\n});\n/**\n * Temporary solution providing access to internal IDs for the FE to pass on to MLv1 functions.\n */\nmetabase.lib.js.picker_info = (function metabase$lib$js$picker_info(a_query,metadata){\nvar G__65475 = new cljs.core.Keyword(\"lib\",\"type\",\"lib/type\",1175424801).cljs$core$IFn$_invoke$arity$1(metadata);\nvar G__65475__$1 = (((G__65475 instanceof cljs.core.Keyword))?G__65475.fqn:null);\nswitch (G__65475__$1) {\ncase \"metadata/table\":\nreturn ({\"databaseId\": new cljs.core.Keyword(null,\"database\",\"database\",1849087575).cljs$core$IFn$_invoke$arity$1(a_query), \"tableId\": new cljs.core.Keyword(null,\"id\",\"id\",-1388402092).cljs$core$IFn$_invoke$arity$1(metadata)});\n\nbreak;\ncase \"metadata/card\":\nreturn ({\"databaseId\": new cljs.core.Keyword(null,\"database\",\"database\",1849087575).cljs$core$IFn$_invoke$arity$1(a_query), \"tableId\": [\"card__\",cljs.core.str.cljs$core$IFn$_invoke$arity$1(new cljs.core.Keyword(null,\"id\",\"id\",-1388402092).cljs$core$IFn$_invoke$arity$1(metadata))].join(''), \"cardId\": new cljs.core.Keyword(null,\"id\",\"id\",-1388402092).cljs$core$IFn$_invoke$arity$1(metadata), \"isModel\": new cljs.core.Keyword(null,\"dataset\",\"dataset\",1159262238).cljs$core$IFn$_invoke$arity$1(metadata)});\n\nbreak;\ndefault:\nvar level__30238__auto___65494 = metabase.util.log.glogi_level(new cljs.core.Keyword(null,\"warn\",\"warn\",-436710552));\nvar logger__30239__auto___65495 = \"metabase.lib.js\";\nif(cljs.core.truth_(metabase.util.log.is_loggable_QMARK_(logger__30239__auto___65495,level__30238__auto___65494))){\nvar x__30240__auto___65496 = \"Cannot provide picker-info for\";\nif((x__30240__auto___65496 instanceof Error)){\nlambdaisland.glogi.log.cljs$core$IFn$_invoke$arity$4(logger__30239__auto___65495,level__30238__auto___65494,cljs.core.print_str.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(\"lib\",\"type\",\"lib/type\",1175424801).cljs$core$IFn$_invoke$arity$1(metadata)], 0)),x__30240__auto___65496);\n} else {\nlambdaisland.glogi.log.cljs$core$IFn$_invoke$arity$4(logger__30239__auto___65495,level__30238__auto___65494,cljs.core.print_str.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([x__30240__auto___65496,new cljs.core.Keyword(\"lib\",\"type\",\"lib/type\",1175424801).cljs$core$IFn$_invoke$arity$1(metadata)], 0)),null);\n}\n} else {\n}\n\nreturn null;\n\n}\n});\n/**\n * Convert the internal operator `clause` to the external format.\n */\nmetabase.lib.js.external_op = (function metabase$lib$js$external_op(clause){\nvar map__65476 = metabase.lib.core.external_op.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([clause], 0));\nvar map__65476__$1 = cljs.core.__destructure_map(map__65476);\nvar operator = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65476__$1,new cljs.core.Keyword(null,\"operator\",\"operator\",-1860875338));\nvar options = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65476__$1,new cljs.core.Keyword(null,\"options\",\"options\",99638489));\nvar args = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__65476__$1,new cljs.core.Keyword(null,\"args\",\"args\",1315556576));\nreturn ({\"operator\": operator, \"options\": cljs.core.clj__GT_js(options), \"args\": cljs.core.to_array(args)});\n});\n/**\n * Create a new native query.\n * \n *   Native in this sense means a pMBQL query with a first stage that is a native query.\n */\nmetabase.lib.js.native_query = (function metabase$lib$js$native_query(database_id,metadata,inner_query){\nreturn metabase.lib.core.native_query.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([metabase.lib.js.metadataProvider(database_id,metadata),inner_query], 0));\n});\n/**\n * Update the raw native query, the first stage must already be a native type.\n * Replaces templates tags\n */\nmetabase.lib.js.with_native_query = (function metabase$lib$js$with_native_query(a_query,inner_query){\nreturn metabase.lib.core.with_native_query.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([a_query,inner_query], 0));\n});\n/**\n * Updates the native query's template tags.\n */\nmetabase.lib.js.with_template_tags = (function metabase$lib$js$with_template_tags(a_query,tags){\nreturn metabase.lib.core.with_template_tags.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([a_query,metabase.lib.core.__GT_TemplateTags.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([tags], 0))], 0));\n});\n/**\n * Returns the native query string\n */\nmetabase.lib.js.raw_native_query = (function metabase$lib$js$raw_native_query(a_query){\nreturn metabase.lib.core.raw_native_query.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([a_query], 0));\n});\n/**\n * Returns the native query's template tags\n */\nmetabase.lib.js.template_tags = (function metabase$lib$js$template_tags(a_query){\nreturn metabase.lib.core.TemplateTags__GT_.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([metabase.lib.core.template_tags.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([a_query], 0))], 0));\n});\n/**\n * Returns whether the extra keys required by the database.\n */\nmetabase.lib.js.required_native_extras = (function metabase$lib$js$required_native_extras(database_id,metadata){\nreturn cljs.core.to_array(metabase.lib.core.required_native_extras.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([metabase.lib.js.metadataProvider(database_id,metadata)], 0)));\n});\n/**\n * Changes the database for this query. The first stage must be a native type.\n * Native extras must be provided if the new database requires it.\n */\nmetabase.lib.js.with_different_database = (function metabase$lib$js$with_different_database(var_args){\nvar G__65478 = arguments.length;\nswitch (G__65478) {\ncase 3:\nreturn metabase.lib.js.with_different_database.cljs$core$IFn$_invoke$arity$3((arguments[(0)]),(arguments[(1)]),(arguments[(2)]));\n\nbreak;\ncase 4:\nreturn metabase.lib.js.with_different_database.cljs$core$IFn$_invoke$arity$4((arguments[(0)]),(arguments[(1)]),(arguments[(2)]),(arguments[(3)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\ngoog.exportSymbol('metabase.lib.js.with_different_database', metabase.lib.js.with_different_database);\n\n(metabase.lib.js.with_different_database.cljs$core$IFn$_invoke$arity$3 = (function (a_query,database_id,metadata){\nreturn metabase.lib.js.with_different_database.cljs$core$IFn$_invoke$arity$4(a_query,database_id,metadata,null);\n}));\n\n(metabase.lib.js.with_different_database.cljs$core$IFn$_invoke$arity$4 = (function (a_query,database_id,metadata,native_extras){\nreturn metabase.lib.core.with_different_database.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([a_query,metabase.lib.js.metadataProvider(database_id,metadata),cljs.core.js__GT_clj.cljs$core$IFn$_invoke$arity$variadic(native_extras,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"keywordize-keys\",\"keywordize-keys\",1310784252),true], 0))], 0));\n}));\n\n(metabase.lib.js.with_different_database.cljs$lang$maxFixedArity = 4);\n\n/**\n * Updates the extras required for the db to run this query.\n * The first stage must be a native type. Will ignore extras not in `required-native-extras`\n */\nmetabase.lib.js.with_native_extras = (function metabase$lib$js$with_native_extras(a_query,native_extras){\nreturn metabase.lib.core.with_native_extras.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([a_query,cljs.core.js__GT_clj.cljs$core$IFn$_invoke$arity$variadic(native_extras,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"keywordize-keys\",\"keywordize-keys\",1310784252),true], 0))], 0));\n});\n/**\n * Returns the extra keys for native queries associated with this query.\n */\nmetabase.lib.js.native_extras = (function metabase$lib$js$native_extras(a_query){\nreturn cljs.core.clj__GT_js(metabase.lib.core.native_extras.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([a_query], 0)));\n});\n/**\n * Get a list of Metrics that you may consider using as aggregations for a query. Returns JS array of opaque Metric\n *   metadata objects.\n */\nmetabase.lib.js.available_metrics = (function metabase$lib$js$available_metrics(a_query){\nreturn cljs.core.to_array(metabase.lib.core.available_metrics.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([a_query], 0)));\n});\n/**\n * Return information about the fields that you can pass to [[with-join-fields]] when constructing a join against\n *   something [[Joinable]] (i.e., a Table or Card) or manipulating an existing join. When passing in a join, currently\n *   selected columns (those in the join's `:fields`) will include `:selected true` information.\n */\nmetabase.lib.js.joinable_columns = (function metabase$lib$js$joinable_columns(a_query,stage_number,join_or_joinable){\nreturn cljs.core.to_array(metabase.lib.core.joinable_columns.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([a_query,stage_number,join_or_joinable], 0)));\n});\n/**\n * Get TableMetadata if passed an integer `table-id`, or CardMetadata if passed a legacy-style `card__<id>` string.\n *   Returns `nil` if no matching metadata is found.\n */\nmetabase.lib.js.table_or_card_metadata = (function metabase$lib$js$table_or_card_metadata(query_or_metadata_provider,table_id){\nreturn metabase.lib.metadata.table_or_card(query_or_metadata_provider,table_id);\n});\n/**\n * Get the display name for whatever we are joining. For an existing join, pass in the join clause. When constructing a\n *   join, pass in the thing we are joining against, e.g. a TableMetadata or CardMetadata.\n */\nmetabase.lib.js.join_lhs_display_name = (function metabase$lib$js$join_lhs_display_name(a_query,stage_number,join_or_joinable){\nreturn metabase.lib.core.join_lhs_display_name.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([a_query,stage_number,join_or_joinable], 0));\n});\n/**\n * Get the Database ID (`:database`) associated with a query. If the query is using\n *   the [[metabase.mbql.schema/saved-questions-virtual-database-id]] (used in some situations for queries with a\n *   `:source-card`)\n * \n *  {:database -1337}\n * \n *   we will attempt to resolve the correct Database ID by getting metadata for the source Card and returning its\n *   `:database-id`; if this is not available for one reason or another this will return `nil`.\n */\nmetabase.lib.js.database_id = (function metabase$lib$js$database_id(a_query){\nreturn metabase.lib.core.database_id.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([a_query], 0));\n});\n","~:ns-info",["^ ","~:rename-macros",null,"~:renames",["^ "],"~:meta",["^ ","~:doc","JavaScript-friendly interface to the entire Dashboard lib? This stuff will probably change a bit as MLv2 evolves.\n\n  Note that in JS we've made the decision to make the stage number always be required as an explicit parameter, so we\n  DO NOT need to expose the `stage-index = -1` arities of functions below. Generally we probably only need to export\n  one arity... see TypeScript wrappers for actual usage.","~:file","metabase/lib/js.cljs","~:line",1,"~:column",5,"~:end-line",1,"~:end-column",20],"~:ns-aliases",["^ ","~$cljs.loader","~$shadow.loader","~$clojure.core","~$cljs.core","~$clojure.spec.gen.alpha","~$cljs.spec.gen.alpha","~$clojure.pprint","~$cljs.pprint","~$clojure.core.match","~$cljs.core.match"],"~:use-macros",null,"~:excludes",["~#set",["~$filter"]],"~:name","~$metabase.lib.js","~:reader-aliases",["^ "],"~:op","~:ns","~:imports",null,"~:requires",["^ ","~$metabase.lib.metadata","^R","~$lib.stage","~$metabase.lib.stage","~$log","~$metabase.util.log","~$u","~$metabase.util","^T","^T","~$metabase.lib.convert","^X","~$lib.metadata","^R","~$metabase.lib.metadata.protocols","^Z","~$convert","^X","^@","^@","~$goog","^10","~$lib.join","~$metabase.lib.join","~$m","~$medley.core","~$js.metadata","~$metabase.lib.js.metadata","^W","^W","~$metabase.mbql.normalize","^16","~$metabase.mbql.js","^17","~$mbql.js","^17","^12","^12","^V","^V","~$lib.metadata.protocols","^Z","~$lib.core","~$metabase.lib.core","^1;","^1;","^15","^15","~$mbql.normalize","^16","^13","^13"],"~:seen",["^I",["~:require"]],"~:uses",null,"~:require-macros",["^ ","^@","^@","^U","^V","~$u","^W","^W","^W","^V","^V"],"~:form",["~#list",["~$ns","^L","JavaScript-friendly interface to the entire Dashboard lib? This stuff will probably change a bit as MLv2 evolves.\n\n  Note that in JS we've made the decision to make the stage number always be required as an explicit parameter, so we\n  DO NOT need to expose the `stage-index = -1` arities of functions below. Generally we probably only need to export\n  one arity... see TypeScript wrappers for actual usage.",["^1B",["~:refer-clojure","~:exclude",["^J"]]],["^1B",["^1>",["^13","~:as","~$m"],["^X","^1F","^["],["^1;","^1F","^1:"],["^12","^1F","^11"],["^15","^1F","^14"],["^R","^1F","^Y"],["^Z","^1F","^19"],["^T","^1F","^S"],["^17","^1F","^18"],["^16","^1F","^1<"],["^W","^1F","~$u"],["^V","^1F","^U"]]]]],"~:flags",["^ ","^1>",["^I",[]]],"~:js-deps",["^ "],"~:deps",["^10","^@","^13","^X","^1;","^12","^15","^R","^Z","^T","^17","^16","^W","^V"]],"^O","^L","~:resource-id",["~:shadow.build.classpath/resource","metabase/lib/js.cljs"],"~:compiled-at",1692612549062,"^M",["^ ","^R","^R","^S","^T","^U","^V","~$u","^W","^T","^T","^X","^X","^Y","^R","^Z","^Z","^[","^X","^@","^@","^10","^10","^11","^12","~$m","^13","^14","^15","^W","^W","^16","^16","^17","^17","^18","^17","^12","^12","^V","^V","^19","^Z","^1:","^1;","^1;","^1;","^15","^15","^1<","^16","^13","^13"],"~:resource-name","metabase/lib/js.cljs","~:warnings",[],"~:source","(ns metabase.lib.js\n  \"JavaScript-friendly interface to the entire Dashboard lib? This stuff will probably change a bit as MLv2 evolves.\n\n  Note that in JS we've made the decision to make the stage number always be required as an explicit parameter, so we\n  DO NOT need to expose the `stage-index = -1` arities of functions below. Generally we probably only need to export\n  one arity... see TypeScript wrappers for actual usage.\"\n  (:refer-clojure\n   :exclude\n   [filter])\n  (:require\n   [medley.core :as m]\n   [metabase.lib.convert :as convert]\n   [metabase.lib.core :as lib.core]\n   [metabase.lib.join :as lib.join]\n   [metabase.lib.js.metadata :as js.metadata]\n   [metabase.lib.metadata :as lib.metadata]\n   [metabase.lib.metadata.protocols :as lib.metadata.protocols]\n   [metabase.lib.stage :as lib.stage]\n   [metabase.mbql.js :as mbql.js]\n   [metabase.mbql.normalize :as mbql.normalize]\n   [metabase.util :as u]\n   [metabase.util.log :as log]))\n\n;;; this is mostly to ensure all the relevant namespaces with multimethods impls get loaded.\n(comment lib.core/keep-me)\n\n;; TODO: This pattern of \"re-export some function and slap a `clj->js` at the end\" is going to keep appearing.\n;; Generalize the machinery in `metabase.domain-entities.malli` to handle this case, so we get schema-powered automatic\n;; conversion for incoming args and outgoing return values. I'm imagining something like\n;; `(mu/js-export lib.core/recognize-template-tags)` where that function has a Malli schema and it works like\n;; `metabase.shared.util.namespaces/import-fn` plus wrapping it with conversion for all args and the return value.\n(defn ^:export extract-template-tags\n  \"Extract the template tags from a native query's text.\n\n  If the optional map of existing tags previously parsed is given, this will reuse the existing tags where\n  they match up with the new one (in particular, it will preserve the UUIDs).\n\n  Given the text of a native query, extract a possibly-empty set of template tag strings from it.\n\n  These look like mustache templates. For variables, we only allow alphanumeric characters, eg. `{{foo}}`.\n  For snippets they start with `snippet:`, eg. `{{ snippet: arbitrary text here }}`.\n  And for card references either `{{ #123 }}` or with the optional human label `{{ #123-card-title-slug }}`.\n\n  Invalid patterns are simply ignored, so something like `{{&foo!}}` is just disregarded.\"\n  ([query-text] (extract-template-tags query-text {}))\n  ([query-text existing-tags]\n   (->> existing-tags\n        lib.core/->TemplateTags\n        (lib.core/extract-template-tags query-text)\n        lib.core/TemplateTags->)))\n\n(defn ^:export suggestedName\n  \"Return a nice description of a query.\"\n  [query]\n  (lib.core/suggested-name query))\n\n(defn- pMBQL [query-map]\n  (as-> query-map <>\n    (js->clj <> :keywordize-keys true)\n    (if (:type <>)\n      <>\n      (assoc <> :type :query))\n    (mbql.normalize/normalize <>)\n    (convert/->pMBQL <>)))\n\n(defn ^:export metadataProvider\n  \"Convert metadata to a metadata provider if it is not one already.\"\n  [database-id metadata]\n  (if (lib.metadata.protocols/metadata-provider? metadata)\n    metadata\n    (js.metadata/metadata-provider database-id metadata)))\n\n(defn ^:export query\n  \"Coerce a plain map `query` to an actual query object that you can use with MLv2.\"\n  [database-id metadata query-map]\n  (let [query-map (pMBQL query-map)]\n    (log/debugf \"query map: %s\" (pr-str query-map))\n    (lib.core/query (metadataProvider database-id metadata) query-map)))\n\n(defn- fix-namespaced-values\n  \"This converts namespaced keywords to strings as `\\\"foo/bar\\\"`.\n\n  `clj->js` supports overriding how keyword map keys get transformed, but it doesn't let you override how values are\n  handled. So this function runs first and turns them into strings.\n\n  As an example of such a value, `(get-in card [:template-tags \\\"some-tag\\\" :widget-type])` can be `:date/all-options`.\"\n  [x]\n  (cond\n    (qualified-keyword? x) (str (namespace x) \"/\" (name x))\n    (map? x)               (update-vals x fix-namespaced-values)\n    (sequential? x)        (map fix-namespaced-values x)\n    :else                  x))\n\n(defn ^:export legacy-query\n  \"Coerce a CLJS pMBQL query back to (1) a legacy query (2) in vanilla JS.\"\n  [query-map]\n  (-> query-map convert/->legacy-MBQL fix-namespaced-values (clj->js :keyword-fn u/qualified-name)))\n\n(defn ^:export append-stage\n  \"Adds a new blank stage to the end of the pipeline\"\n  [a-query]\n  (lib.core/append-stage a-query))\n\n(defn ^:export drop-stage\n  \"Drops the final stage in the pipeline\"\n  [a-query]\n  (lib.core/drop-stage a-query))\n\n(defn ^:export orderable-columns\n  \"Return a sequence of Column metadatas about the columns you can add order bys for in a given stage of `a-query.` To\n  add an order by, pass the result to [[order-by]].\"\n  [a-query stage-number]\n  (to-array (lib.core/orderable-columns a-query stage-number)))\n\n(defn ^:export display-info\n  \"Given an opaque Cljs object, return a plain JS object with info you'd need to implement UI for it.\n  See `:metabase.lib.metadata.calculation/display-info` for the keys this might contain. Note that the JS versions of\n  the keys are converted to the equivalent `camelCase` strings from the original `:kebab-case`.\"\n  [a-query stage-number x]\n  (-> a-query\n      (lib.stage/ensure-previous-stages-have-metadata stage-number)\n      (lib.core/display-info stage-number x)\n      (update-keys u/->camelCaseEn)\n      (update :table update-keys u/->camelCaseEn)\n      (clj->js :keyword-fn u/qualified-name)))\n\n(defn ^:export order-by-clause\n  \"Create an order-by clause independently of a query, e.g. for `replace` or whatever.\"\n  ([orderable]\n   (order-by-clause orderable :asc))\n\n  ([orderable direction]\n   (lib.core/order-by-clause (lib.core/normalize (js->clj orderable :keywordize-keys true)) (keyword direction))))\n\n(defn ^:export order-by\n  \"Add an `order-by` clause to `a-query`. Returns updated query.\"\n  [a-query stage-number orderable direction]\n  (lib.core/order-by a-query stage-number orderable (keyword direction)))\n\n(defn ^:export order-bys\n  \"Get the order-by clauses (as an array of opaque objects) in `a-query` at a given `stage-number`.\n  Returns an empty array if there are no order bys in the query.\"\n  [a-query stage-number]\n  (to-array (lib.core/order-bys a-query stage-number)))\n\n(defn ^:export change-direction\n  \"Flip the direction of `current-order-by` in `a-query`.\"\n  [a-query current-order-by]\n  (lib.core/change-direction a-query current-order-by))\n\n(defn ^:export breakoutable-columns\n  \"Return an array of Column metadatas about the columns that can be broken out by in a given stage of `a-query.`\n  To break out by a given column, the corresponding element of the result has to be added to the query using\n  [[breakout]].\"\n  [a-query stage-number]\n  (to-array (lib.core/breakoutable-columns a-query stage-number)))\n\n(defn ^:export breakouts\n  \"Get the breakout clauses (as an array of opaque objects) in `a-query` at a given `stage-number`.\n  Returns an empty array if there are no order bys in the query.\"\n  [a-query stage-number]\n  (to-array (lib.core/breakouts a-query stage-number)))\n\n(defn ^:export breakout\n  \"Add an `order-by` clause to `a-query`. Returns updated query.\"\n  [a-query stage-number x]\n  (lib.core/breakout a-query stage-number (lib.core/ref x)))\n\n(defn ^:export binning\n  \"Retrieve the current binning state of a `:field` clause, field metadata, etc. as an opaque object, or `nil` if it\n  does not have binning options set.\"\n  [x]\n  (lib.core/binning x))\n\n(defn ^:export with-binning\n  \"Given `x` (a field reference) and a `binning` value, return a new `:field` clause with its `:binning` options set.\n\n  If `binning` is `nil`, removes any `:binning` options currently present.\n\n  `binning` can be one of the opaque values returned by [[available-binning-strategies]], or a literal\n  [[metabase.lib.schema.binning/binning]] value.\"\n  [x binning-option]\n  (lib.core/with-binning x binning-option))\n\n(defn ^:export available-binning-strategies\n  \"Get a list of available binning strategies for `x` (a field reference, generally) in the context of `a-query` and\n  optionally `stage-number`. The returned list contains opaque objects which should be passed to [[display-info]].\"\n  ([a-query x]\n   (-> (lib.core/available-binning-strategies a-query x)\n       to-array))\n  ([a-query stage-number x]\n   (-> (lib.core/available-binning-strategies a-query stage-number x)\n       to-array)))\n\n(defn ^:export temporal-bucket\n  \"Get the current temporal bucketing options associated with something, if any.\"\n  [x]\n  (lib.core/temporal-bucket x))\n\n(defn ^:export with-temporal-bucket\n  \"Add a temporal bucketing option to an MBQL clause (or something that can be converted to an MBQL clause).\"\n  [x bucketing-option]\n  (lib.core/with-temporal-bucket x bucketing-option))\n\n(defn ^:export available-temporal-buckets\n  \"Get a list of available temporal bucketing options for `x` (a field reference, generally) in the context of `a-query`\n  and optionally `stage-number`. The returned list contains opaque objects which should be passed to [[display-info]].\"\n  ([a-query x]\n   (-> (lib.core/available-temporal-buckets a-query x)\n       to-array))\n  ([a-query stage-number x]\n   (-> (lib.core/available-temporal-buckets a-query stage-number x)\n       to-array)))\n\n(defn ^:export remove-clause\n  \"Removes the `target-clause` in the filter of the `query`.\"\n  [a-query stage-number clause]\n  (lib.core/remove-clause\n   a-query stage-number\n   (lib.core/normalize (js->clj clause :keywordize-keys true))))\n\n(defn ^:export replace-clause\n  \"Replaces the `target-clause` with `new-clause` in the `query` stage.\"\n  [a-query stage-number target-clause new-clause]\n  (lib.core/replace-clause\n   a-query stage-number\n   (lib.core/normalize (js->clj target-clause :keywordize-keys true))\n   (lib.core/normalize (js->clj new-clause :keywordize-keys true))))\n\n(defn- prep-query-for-equals [a-query field-ids]\n  (-> a-query\n      mbql.js/normalize-cljs\n      ;; If `:native` exists, but it doesn't have `:template-tags`, add it.\n      (m/update-existing :native #(merge {:template-tags {}} %))\n      (m/update-existing :query (fn [inner-query]\n                                  (let [fields (or (:fields inner-query)\n                                                   (for [id field-ids]\n                                                     [:field id nil]))]\n                                    ;; We ignore the order of the fields in the lists, but need to make sure any dupes\n                                    ;; match up. Therefore de-dupe with `frequencies` rather than simply `set`.\n                                    (assoc inner-query :fields (frequencies fields)))))))\n\n(defn ^:export query=\n  \"Returns whether the provided queries should be considered equal.\n\n  If `field-ids` is specified, an input MBQL query without `:fields` set defaults to the `field-ids`.\n\n  Currently this works only for legacy queries in JS form!\n  It duplicates the logic formerly found in `query_builder/selectors.js`.\n\n  TODO: This should evolve into a more robust, pMBQL-based sense of equality over time.\n  For now it pulls logic that touches query internals into `metabase.lib`.\"\n  ([query1 query2] (query= query1 query2 nil))\n  ([query1 query2 field-ids]\n   (let [n1 (prep-query-for-equals query1 field-ids)\n         n2 (prep-query-for-equals query2 field-ids)]\n     (= n1 n2))))\n\n(defn ^:export group-columns\n  \"Given a group of columns returned by a function like [[metabase.lib.js/orderable-columns]], group the columns\n  by Table or equivalent (e.g. Saved Question) so that they're in an appropriate shape for showing in the Query\n  Builder. e.g a sequence of columns like\n\n    [venues.id\n     venues.name\n     venues.category-id\n     ;; implicitly joinable\n     categories.id\n     categories.name]\n\n  would get grouped into groups like\n\n    [{::columns [venues.id\n                 venues.name\n                 venues.category-id]}\n     {::columns [categories.id\n                 categories.name]}]\n\n  Groups have the type `:metadata/column-group` and can be passed directly\n  to [[metabase.lib.js/display-info]].\n  Use [[metabase.lib.js/columns-group-columns]] to extract the columns from a group.\"\n  [column-metadatas]\n  (to-array (lib.core/group-columns column-metadatas)))\n\n(defn ^:export columns-group-columns\n  \"Get the columns associated with a column group\"\n  [column-group]\n  (to-array (lib.core/columns-group-columns column-group)))\n\n(defn ^:export describe-temporal-unit\n  \"Get a translated description of a temporal bucketing unit.\"\n  [n unit]\n  (let [unit (if (string? unit) (keyword unit) unit)]\n    (lib.core/describe-temporal-unit n unit)))\n\n(defn ^:export describe-temporal-interval\n  \"Get a translated description of a temporal bucketing interval.\"\n  [n unit]\n  (let [n    (if (string? n) (keyword n) n)\n        unit (if (string? unit) (keyword unit) unit)]\n    (lib.core/describe-temporal-interval n unit)))\n\n(defn ^:export describe-relative-datetime\n  \"Get a translated description of a relative datetime interval.\"\n  [n unit]\n  (let [n    (if (string? n) (keyword n) n)\n        unit (if (string? unit) (keyword unit) unit)]\n      (lib.core/describe-relative-datetime n unit)))\n\n(defn ^:export aggregate\n  \"Adds an aggregation to query.\"\n  [a-query stage-number an-aggregate-clause]\n  (lib.core/aggregate a-query stage-number (js->clj an-aggregate-clause :keywordize-keys true)))\n\n(defn ^:export aggregations\n  \"Get the aggregations in a given stage of a query.\"\n  [a-query stage-number]\n  (to-array (lib.core/aggregations a-query stage-number)))\n\n(defn ^:export aggregation-clause\n  \"Returns a standalone aggregation clause for an `aggregation-operator` and\n   a `column`.\n   For aggregations requiring an argument `column` is mandatory, otherwise\n   it is optional.\"\n  ([aggregation-operator]\n   (lib.core/aggregation-clause aggregation-operator))\n  ([aggregation-operator column]\n   (lib.core/aggregation-clause aggregation-operator column)))\n\n(defn ^:export available-aggregation-operators\n  \"Get the available aggregation operators for the stage with `stage-number` of\n  the query `a-query`.\n  If `stage-number` is omitted, the last stage is used.\"\n  [a-query stage-number]\n  (to-array (lib.core/available-aggregation-operators a-query stage-number)))\n\n(defn ^:export aggregation-operator-columns\n  \"Get the columns `aggregation-operator` can be applied to.\n  The columns are valid for the stage of the query that was used in\n  [[available-binning-strategies]] to get `available-aggregation`.\"\n  [aggregation-operator]\n  (to-array (lib.core/aggregation-operator-columns aggregation-operator)))\n\n(defn ^:export selected-aggregation-operators\n  \"Mark the operator and the column (if any) in `agg-operators` selected by `agg-clause`.\"\n  [agg-operators agg-clause]\n  (to-array (lib.core/selected-aggregation-operators (seq agg-operators) agg-clause)))\n\n(defn ^:export filterable-columns\n  \"Get the available filterable columns for the stage with `stage-number` of the query `a-query`.\"\n  [a-query stage-number]\n  (to-array (lib.core/filterable-columns a-query stage-number)))\n\n(defn ^:export filterable-column-operators\n  \"Returns the operators for which `filterable-column` is applicable.\"\n  [filterable-column]\n  (to-array (lib.core/filterable-column-operators filterable-column)))\n\n(defn ^:export filter-clause\n  \"Returns a standalone filter clause for a `filter-operator`,\n  a `column`, and arguments.\"\n  [filter-operator column & args]\n  (apply lib.core/filter-clause filter-operator column args))\n\n(defn ^:export filter-operator\n  \"Returns the filter operator of `filter-clause`.\"\n  [a-query stage-number a-filter-clause]\n  (lib.core/filter-operator a-query stage-number a-filter-clause))\n\n(defn ^:export filter\n  \"Sets `boolean-expression` as a filter on `query`.\"\n  [a-query stage-number boolean-expression]\n  (lib.core/filter a-query stage-number (js->clj boolean-expression :keywordize-keys true)))\n\n(defn ^:export filters\n  \"Returns the current filters in stage with `stage-number` of `query`.\n  Logicaly, the filter attached to the query is the conjunction of the expressions\n  in the returned list. If the returned list is empty, then there is no filter\n  attached to the query.\"\n  [a-query stage-number]\n  (to-array (lib.core/filters a-query stage-number)))\n\n(defn ^:export fields\n  \"Get the current `:fields` in a query. Unlike the lib core version, this will return an empty sequence if `:fields` is\n  not specified rather than `nil` for JS-friendliness.\"\n  [a-query stage-number]\n  (to-array (lib.core/fields a-query stage-number)))\n\n(defn ^:export with-fields\n  \"Specify the `:fields` for a query. Pass an empty sequence or `nil` to remove `:fields`.\"\n  [a-query stage-number new-fields]\n  (lib.core/with-fields a-query stage-number new-fields))\n\n(defn ^:export fieldable-columns\n  \"Return a sequence of column metadatas for columns that you can specify in the `:fields` of a query.\"\n  [a-query stage-number]\n  (to-array (lib.core/fieldable-columns a-query stage-number)))\n\n(defn ^:export join-strategy\n  \"Get the strategy (type) of a given join as an opaque JoinStrategy object.\"\n  [a-join]\n  (lib.core/join-strategy a-join))\n\n(defn ^:export with-join-strategy\n  \"Return a copy of `a-join` with its `:strategy` set to an opaque JoinStrategy.\"\n  [a-join strategy]\n  (lib.core/with-join-strategy a-join strategy))\n\n(defn ^:export available-join-strategies\n  \"Get available join strategies for the current Database (based on the Database's\n  supported [[metabase.driver/driver-features]]) as opaque JoinStrategy objects.\"\n  [a-query stage-number]\n  (to-array (lib.core/available-join-strategies a-query stage-number)))\n\n(defn ^:export join-condition-lhs-columns\n  \"Get a sequence of columns that can be used as the left-hand-side (source column) in a join condition. This column\n  is the one that comes from the source Table/Card/previous stage of the query or a previous join.\n\n  If you are changing the LHS of a condition for an existing join, pass in that existing join as\n  `existing-join-or-nil` so we can filter out the columns added by it (it doesn't make sense to present the columns\n  added by a join as options for its own LHS). Otherwise pass `nil` when building a new join. See #32005 for more\n  info.\n\n  If the right-hand-side column has already been chosen (they can be chosen in any order in the Query Builder UI),\n  pass in the chosen RHS column. In the future, this may be used to restrict results to compatible columns. (See #31174)\n\n  Results will be returned in a 'somewhat smart' order with PKs and FKs returned before other columns.\n\n  Unlike most other things that return columns, implicitly-joinable columns ARE NOT returned here.\"\n  [a-query stage-number existing-join-or-nil rhs-column-or-nil]\n  (to-array (lib.core/join-condition-lhs-columns a-query stage-number existing-join-or-nil rhs-column-or-nil)))\n\n(defn ^:export join-condition-rhs-columns\n  \"Get a sequence of columns that can be used as the right-hand-side (target column) in a join condition. This column\n  is the one that belongs to the thing being joined, `joinable`, which can be something like a\n  Table ([[metabase.lib.metadata/TableMetadata]]), Saved Question/Model ([[metabase.lib.metadata/CardMetadata]]),\n  another query, etc. -- anything you can pass to [[join-clause]].\n\n  If the lhs-hand-side column has already been chosen (they can be chosen in any order in the Query Builder UI),\n  pass in the chosen LHS column. In the future, this may be used to restrict results to compatible columns. (See #31174)\n\n  Results will be returned in a 'somewhat smart' order with PKs and FKs returned before other columns.\"\n  [a-query stage-number joinable lhs-column-or-nil]\n  (to-array (lib.core/join-condition-rhs-columns a-query stage-number joinable lhs-column-or-nil)))\n\n(defn ^:export join-condition-operators\n  \"Return a sequence of valid filter clause operators that can be used to build a join condition. In the Query Builder\n  UI, this can be chosen at any point before or after choosing the LHS and RHS. Invalid options are not currently\n  filtered out based on values of the LHS or RHS, but in the future we can add this -- see #31174.\"\n  [a-query stage-number lhs-column-or-nil rhs-column-or-nil]\n  (to-array (lib.core/join-condition-operators a-query stage-number lhs-column-or-nil rhs-column-or-nil)))\n\n(defn ^:export expression\n  \"Adds an expression to query.\"\n  [a-query stage-number expression-name an-expression-clause]\n  (lib.core/expression a-query stage-number expression-name an-expression-clause))\n\n(defn ^:export expressions\n  \"Get the expressions map from a given stage of a `query`.\"\n  [a-query stage-number]\n  (to-array (lib.core/expressions a-query stage-number)))\n\n(defn ^:export expressionable-columns\n  \"Return an array of Column metadatas about the columns that can be used in an expression in a given stage of `a-query`.\n   Pass the current `expression-position` or `null` for new expressions.\"\n  ([a-query expression-position]\n   (expressionable-columns a-query expression-position))\n  ([a-query stage-number expression-position]\n   (to-array (lib.core/expressionable-columns a-query stage-number expression-position))))\n\n(defn ^:export suggested-join-condition\n  \"Return a suggested default join condition when constructing a join against `joinable`, e.g. a Table, Saved\n  Question, or another query. A suggested condition will be returned if the source Table has a foreign key to the\n  primary key of the thing we're joining (see #31175 for more info); otherwise this will return `nil` if no default\n  condition is suggested.\"\n  [a-query stage-number joinable]\n  (lib.core/suggested-join-condition a-query stage-number joinable))\n\n(defn ^:export join-fields\n  \"Get the `:fields` associated with a join.\"\n  [a-join]\n  (let [joined-fields (lib.core/join-fields a-join)]\n    (if (keyword? joined-fields)\n      (u/qualified-name joined-fields)\n      (to-array joined-fields))))\n\n(defn ^:export with-join-fields\n  \"Set the `:fields` for `a-join`.\"\n  [a-join new-fields]\n  (lib.core/with-join-fields a-join (cond-> new-fields\n                                      (string? new-fields) keyword)))\n\n(defn ^:export join-clause\n  \"Create a join clause (an `:mbql/join` map) against something `joinable` (Table metadata, a Saved Question, another\n  query, etc.) with `conditions`, which should be an array of filter clauses. You can then manipulate this join clause\n  with stuff like [[with-join-fields]], or add it to a query with [[join]].\"\n  [joinable conditions]\n  (lib.core/join-clause joinable conditions))\n\n(defn ^:export join\n  \"Add a join clause (as created by [[join-clause]]) to a stage of a query.\"\n  [a-query stage-number a-join]\n  (lib.core/join a-query stage-number a-join))\n\n(defn ^:export join-conditions\n  \"Get the conditions (filter clauses) associated with a join.\"\n  [a-join]\n  (to-array (lib.core/join-conditions a-join)))\n\n(defn ^:export with-join-conditions\n  \"Set the `:conditions` (filter clauses) for a join.\"\n  [a-join conditions]\n  (lib.core/with-join-conditions a-join (js->clj conditions :keywordize-keys true)))\n\n(defn ^:export joins\n  \"Get the joins associated with a particular query stage.\"\n  [a-query stage-number]\n  (to-array (lib.core/joins a-query stage-number)))\n\n(defn ^:export rename-join\n  \"Rename the join specified by `join-spec` in `a-query` at `stage-number` to `new-name`.\n  The join can be specified either by itself (as returned by [[joins]]), by its alias\n  or by its index in the list of joins as returned by [[joins]].\n  If the specified join cannot be found, then `query` is returned as is.\n  If renaming the join to `new-name` would clash with an existing join, a\n  suffix is appended to `new-name` to make it unique.\"\n  [a-query stage-number join-spec new-name]\n  (lib.core/rename-join a-query stage-number join-spec new-name))\n\n(defn ^:export remove-join\n  \"Remove the join specified by `join-spec` in `a-query` at `stage-number`.\n  The join can be specified either by itself (as returned by [[joins]]), by its alias\n  or by its index in the list of joins as returned by [[joins]].\n  If the specified join cannot be found, then `a-query` is returned as is.\n  Top level clauses containing references to the removed join are removed too.\"\n  [a-query stage-number join-spec]\n  (lib.core/remove-join a-query stage-number join-spec))\n\n(defn ^:export joined-thing\n  \"Return metadata about the origin of `join` using `metadata-providerable` as the source of information.\"\n  [a-query a-join]\n  (lib.join/joined-thing a-query a-join))\n\n(defn ^:export picker-info\n  \"Temporary solution providing access to internal IDs for the FE to pass on to MLv1 functions.\"\n  [a-query metadata]\n  (case (:lib/type metadata)\n    :metadata/table #js {:databaseId (:database a-query)\n                         :tableId (:id metadata)}\n    :metadata/card  #js {:databaseId (:database a-query)\n                         :tableId (str \"card__\" (:id metadata))\n                         :cardId (:id metadata)\n                         :isModel (:dataset metadata)}\n    (do\n      (log/warn \"Cannot provide picker-info for\" (:lib/type metadata))\n      nil)))\n\n(defn ^:export external-op\n  \"Convert the internal operator `clause` to the external format.\"\n  [clause]\n  (let [{:keys [operator options args]} (lib.core/external-op clause)]\n    #js {:operator operator\n         :options (clj->js options)\n         :args (to-array args)}))\n\n(defn ^:export native-query\n  \"Create a new native query.\n\n  Native in this sense means a pMBQL query with a first stage that is a native query.\"\n  [database-id metadata inner-query]\n  (lib.core/native-query (metadataProvider database-id metadata) inner-query))\n\n(defn ^:export with-native-query\n  \"Update the raw native query, the first stage must already be a native type.\n   Replaces templates tags\"\n  [a-query inner-query]\n  (lib.core/with-native-query a-query inner-query))\n\n(defn ^:export with-template-tags\n  \"Updates the native query's template tags.\"\n  [a-query tags]\n  (lib.core/with-template-tags a-query (lib.core/->TemplateTags tags)))\n\n(defn ^:export raw-native-query\n  \"Returns the native query string\"\n  [a-query]\n  (lib.core/raw-native-query a-query))\n\n(defn ^:export template-tags\n  \"Returns the native query's template tags\"\n  [a-query]\n  (lib.core/TemplateTags-> (lib.core/template-tags a-query)))\n\n(defn ^:export required-native-extras\n  \"Returns whether the extra keys required by the database.\"\n  [database-id metadata]\n  (to-array (lib.core/required-native-extras (metadataProvider database-id metadata))))\n\n(defn ^:export with-different-database\n  \"Changes the database for this query. The first stage must be a native type.\n   Native extras must be provided if the new database requires it.\"\n  ([a-query database-id metadata]\n   (with-different-database a-query database-id metadata nil))\n  ([a-query database-id metadata native-extras]\n   (lib.core/with-different-database a-query (metadataProvider database-id metadata) (js->clj native-extras :keywordize-keys true))))\n\n(defn ^:export with-native-extras\n  \"Updates the extras required for the db to run this query.\n   The first stage must be a native type. Will ignore extras not in `required-native-extras`\"\n  [a-query native-extras]\n  (lib.core/with-native-extras a-query (js->clj native-extras :keywordize-keys true)))\n\n(defn ^:export native-extras\n  \"Returns the extra keys for native queries associated with this query.\"\n  [a-query]\n  (clj->js (lib.core/native-extras a-query)))\n\n(defn ^:export available-metrics\n  \"Get a list of Metrics that you may consider using as aggregations for a query. Returns JS array of opaque Metric\n  metadata objects.\"\n  [a-query]\n  (to-array (lib.core/available-metrics a-query)))\n\n(defn ^:export joinable-columns\n  \"Return information about the fields that you can pass to [[with-join-fields]] when constructing a join against\n  something [[Joinable]] (i.e., a Table or Card) or manipulating an existing join. When passing in a join, currently\n  selected columns (those in the join's `:fields`) will include `:selected true` information.\"\n  [a-query stage-number join-or-joinable]\n  (to-array (lib.core/joinable-columns a-query stage-number join-or-joinable)))\n\n(defn ^:export table-or-card-metadata\n  \"Get TableMetadata if passed an integer `table-id`, or CardMetadata if passed a legacy-style `card__<id>` string.\n  Returns `nil` if no matching metadata is found.\"\n  [query-or-metadata-provider table-id]\n  (lib.metadata/table-or-card query-or-metadata-provider table-id))\n\n(defn ^:export join-lhs-display-name\n  \"Get the display name for whatever we are joining. For an existing join, pass in the join clause. When constructing a\n  join, pass in the thing we are joining against, e.g. a TableMetadata or CardMetadata.\"\n  [a-query stage-number join-or-joinable]\n  (lib.core/join-lhs-display-name a-query stage-number join-or-joinable))\n\n(defn ^:export database-id\n  \"Get the Database ID (`:database`) associated with a query. If the query is using\n  the [[metabase.mbql.schema/saved-questions-virtual-database-id]] (used in some situations for queries with a\n  `:source-card`)\n\n    {:database -1337}\n\n  we will attempt to resolve the correct Database ID by getting metadata for the source Card and returning its\n  `:database-id`; if this is not available for one reason or another this will return `nil`.\"\n  [a-query]\n  (lib.core/database-id a-query))\n","~:reader-features",["^I",["~:cljs-release","~:cljs"]],"~:cljc",false,"~:source-map-compact",["^ ","mappings",";AAwBA,AAOA,AAAA;;;;;;;;;;;;;;wCAAA,gDAAAA,xFAAeE;AAAf,AAAA,IAAAD,WAAA,AAAA;AAAA,AAAA,QAAAA;KAAA;AAAA,OAAAC,oEAAA,CAAA,UAAA;;;KAAA;AAAA,OAAAA,oEAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;;AAAA,MAAA,KAAAC,MAAA,CAAA,8DAAA,AAAA;;;;;;AAAA,CAAA,sEAAA,tEAAeD,iFAaXE;AAbJ,AAagB,sFAAA,/EAACC,oEAAsBD;;;AAbvC,CAAA,sEAAA,tEAAeF,iFAcXE,WAAWE;AAdf,AAeG,uYAAKA,3HACAC,1IACA,0IAAA,1IAACC,+HAA+BJ,1PAChCK;;;AAlBR,CAAA,gEAAA,hEAAeP;;AAAf,AAoBA;;;gCAAA,hCAAeQ,wEAEZC;AAFH,AAGE,OAACC,wHAAwBD;;AAE3B,wBAAA,xBAAOE,wDAAOC;AAAd,AACE,eAAMA,XAAUC;IAAAA,eACd,qHAAA,2EAAA,hMAACC,0DAAQD;IADKA,eAEd,kBAAI,AAAA,mFAAOA,eACTA,aACA,2DAAA,qDAAA,hHAACE,8CAAMF;IAJKA,eAKd,AAACG,kCAAyBH;AAL5B,AAME,OAACI,8DAAgBJ;;AAErB;;;mCAAA,nCAAeK,8EAEZC,YAAYC;AAFf,AAGE,GAAI,AAACC,yDAA0CD;AAC7CA;;AACA,OAACE,2CAA8BH,YAAYC;;;AAE/C;;;wBAAA,xBAAeG,wDAEZJ,YAAYC,SAASR;AAFxB,AAGE,IAAMA,gBAAU,AAACD,sBAAMC;AAAvB,AACE,IAAAY,6BAAA,AAAAC,8BAAA;IAAAC,8BAAA;AAAA,AAAA,oBAAA,AAAAC,qCAAAD,4BAAAF;AAAA,AAAA,IAAAI,yBAAA;AAAA,AAAA,GAAA,CAAAA,kCAAA3B;AAAA,AAAA4B,qDAAAH,4BAAAF,2BAAA,AAAAM,0JAAAF,7HAA4B,AAACI,wGAAOpB;;AAApC,AAAAiB,qDAAAH,4BAAAF,2BAAA,AAAAO,kEAAAH,2MAAA,lIAA4B,AAACI,wGAAOpB;;;AAApC;;AACA,OAACqB,+GAAe,AAACf,iCAAiBC,YAAYC,UAAUR;;AAE5D;;;;;;;;wCAAA,xCAAOsB,wFAOJC;AAPH,AAQE,GACE,AAACC,mCAAmBD;AAAG,+BAAA,vBAAK,AAACE,oBAAUF,OAAO,AAACG,eAAKH;;AADtD,GAEE,AAACI,qBAAKJ;AAAiB,OAACK,sBAAYL,EAAED;;AAFxC,GAGE,AAACO,4BAAYN;AAAU,OAACO,4CAAIR,sCAAsBC;;AAHpD,AAIyBA;;;;;;AAE3B;;;+BAAA,/BAAeQ,sEAEZ/B;AAFH,2KAGMA,pEAAUgC,tCAAsBV,jEAAsB,iEAAA,sCAAA,kIAAA,lOAACW,kSAAoBC;;AAEjF;;;+BAAA,/BAAeC,sEAEZC;AAFH,AAGE,OAACC,sHAAsBD;;AAEzB;;;6BAAA,7BAAeE,kEAEZF;AAFH,AAGE,OAACG,oHAAoBH;;AAEvB;;;;oCAAA,pCAAeI,gFAGZJ,QAAQK;AAHX,AAIE,OAACC,mBAAS,AAACC,2HAA2BP,QAAQK;;AAEhD;;;;;+BAAA,/BAAeG,sEAIZR,QAAQK,aAAalB;AAJxB,oTAKMa,xDACA,AAACS,gEAA+CJ,tLAChD,AAACK,oMAAsBL,aAAalB,vOACpC,AAACwB,+OAAYC,9RACb,8TAAA,9TAACC,qXAAcF,sBAAYC,5cAC3B,8hBAAA,vhBAACf,ulBAAoBC;;AAE3B,AAAA;;;kCAAA,0CAAAhD,5EAAeiE;AAAf,AAAA,IAAAD,WAAA,AAAA;AAAA,AAAA,QAAAA;KAAA;AAAA,OAAAC,8DAAA,CAAA,UAAA;;;KAAA;AAAA,OAAAA,8DAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;;AAAA,MAAA,KAAA9D,MAAA,CAAA,8DAAA,AAAA;;;;;;AAAA,CAAA,gEAAA,hEAAe8D,2EAEXC;AAFJ,AAGG,+EAAA,xEAACC,8DAAgBD;;;AAHpB,CAAA,gEAAA,hEAAeD,2EAKXC,UAAUE;AALd,AAMG,OAACC,yHAAyB,AAACC,mHAAmB,sHAAA,2EAAA,jMAACtD,0DAAQkD,wJAAkC,AAACK,gDAAQH;;;AANrG,CAAA,0DAAA,1DAAeH;;AAAf,AAQA;;;2BAAA,3BAAeO,8DAEZtB,QAAQK,aAAaW,UAAUE;AAFlC,AAGE,OAACK,kHAAkBvB,QAAQK,aAAaW,UAAU,AAACK,gDAAQH;;AAE7D;;;;4BAAA,5BAAeM,gEAGZxB,QAAQK;AAHX,AAIE,OAACC,mBAAS,AAACmB,mHAAmBzB,QAAQK;;AAExC;;;mCAAA,nCAAeqB,8EAEZ1B,QAAQ2B;AAFX,AAGE,OAACC,0HAA0B5B,QAAQ2B;;AAErC;;;;;uCAAA,vCAAeE,sFAIZ7B,QAAQK;AAJX,AAKE,OAACC,mBAAS,AAACwB,8HAA8B9B,QAAQK;;AAEnD;;;;4BAAA,5BAAe0B,gEAGZ/B,QAAQK;AAHX,AAIE,OAACC,mBAAS,AAAC0B,mHAAmBhC,QAAQK;;AAExC;;;2BAAA,3BAAe4B,8DAEZjC,QAAQK,aAAalB;AAFxB,AAGE,OAAC+C,kHAAkBlC,QAAQK,aAAa,AAAC8B,6GAAahD;;AAExD;;;;0BAAA,1BAAeiD,4DAGZjD;AAHH,AAIE,OAACkD,iHAAiBlD;;AAEpB;;;;;;;;+BAAA,/BAAemD,sEAOZnD,EAAEoD;AAPL,AAQE,OAACC,sHAAsBrD,EAAEoD;;AAE3B,AAAA;;;;+CAAA,uDAAAzF,tGAAe4F;AAAf,AAAA,IAAAD,WAAA,AAAA;AAAA,AAAA,QAAAA;KAAA;AAAA,OAAAC,2EAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;KAAA;AAAA,OAAAA,2EAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;;AAAA,MAAA,KAAAzF,MAAA,CAAA,8DAAA,AAAA;;;;;;AAAA,CAAA,6EAAA,7EAAeyF,wFAGX1C,QAAQb;AAHZ,AAIG,0BAAI,AAACwD,sIAAsC3C,QAAQb,jKAC/CmB;;;AALP,CAAA,6EAAA,7EAAeoC,wFAMX1C,QAAQK,aAAalB;AANzB,AAOG,0BAAI,AAACwD,sIAAsC3C,QAAQK,aAAalB,9KAC5DmB;;;AARP,CAAA,uEAAA,vEAAeoC;;AAAf,AAUA;;;kCAAA,lCAAeE,4EAEZzD;AAFH,AAGE,OAAC0D,yHAAyB1D;;AAE5B;;;uCAAA,vCAAe2D,sFAEZ3D,EAAE4D;AAFL,AAGE,OAACC,8HAA8B7D,EAAE4D;;AAEnC,AAAA;;;;6CAAA,qDAAAjG,lGAAeoG;AAAf,AAAA,IAAAD,WAAA,AAAA;AAAA,AAAA,QAAAA;KAAA;AAAA,OAAAC,yEAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;KAAA;AAAA,OAAAA,yEAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;;AAAA,MAAA,KAAAjG,MAAA,CAAA,8DAAA,AAAA;;;;;;AAAA,CAAA,2EAAA,3EAAeiG,sFAGXlD,QAAQb;AAHZ,AAIG,0BAAI,AAACgE,oIAAoCnD,QAAQb,/JAC7CmB;;;AALP,CAAA,2EAAA,3EAAe4C,sFAMXlD,QAAQK,aAAalB;AANzB,AAOG,0BAAI,AAACgE,oIAAoCnD,QAAQK,aAAalB,5KAC1DmB;;;AARP,CAAA,qEAAA,rEAAe4C;;AAAf,AAUA;;;gCAAA,hCAAeE,wEAEZpD,QAAQK,aAAagD;AAFxB,AAGE,OAACC,uHACAtD,QAAQK,aACR,AAACe,mHAAmB,mHAAA,2EAAA,9LAACtD,0DAAQuF;;AAEhC;;;iCAAA,jCAAeE,0EAEZvD,QAAQK,aAAamD,cAAcC;AAFtC,AAGE,OAACC,wHACA1D,QAAQK,aACR,AAACe,mHAAmB,0HAAA,2EAAA,rMAACtD,0DAAQ0F,4JAC7B,AAACpC,mHAAmB,uHAAA,2EAAA,lMAACtD,0DAAQ2F;;AAEhC,wCAAA,xCAAOE,wFAAuB3D,QAAQ4D;AAAtC,2JACM5D,hCACA6D,1DAEA,0DAAA,yCAAA,yDAAA,WAAAC,vKAACC,jEACD,OAACA;AADD,AAA4B,8GAAA,2CAAA,uEAAA,2CAAAD,pQAACE;IAC7B,wDAA0B,WAAKC;AAAL,AACE,IAAMC,SAAO,iBAAAC,mBAAI,AAAA,wFAASF;AAAb,AAAA,oBAAAE;AAAAA;;AACI,IAAAC,qBAAA,8DAAAC;AAAA,AAAA,YAAAC,kBAAA,KAAA;AAAA,AAAA,IAAAD,eAAAA;;AAAA,AAAA,IAAAE,qBAAA,AAAAC,cAAAH;AAAA,AAAA,GAAAE;AAAA,AAAA,IAAAF,eAAAE;AAAA,AAAA,GAAA,AAAAE,6BAAAJ;AAAA,IAAAK,kBAguEA,AAAAsM,sBAAA3M;IAhuEAM,qBAAA,AAAAC,gBAAAF;IAAAG,WAAA,AAAAC,uBAAAH;AAAA,AAAA,GAAA,AAAA,iBAAAI,WAAA;;AAAA,AAAA,GAAA,CAAAA,WAAAJ;AAAA,SAAA,AAAAK,eAAAN,gBAAAK,pCAAMU;AAAN,AAAA,AAAA,AAAAR,uBAAAJ,SAAA,mFAAA,2DAAA,HACUY;;AADV,eAAA,CAAAV,WAAA;;;;AAAA;;;;;AAAA,OAAAG,qBAAA,AAAAC,gBAAAN,UAAA,AAAAO,oDAAA,AAAAC,qBAAAhB;;AAAA,OAAAa,qBAAA,AAAAC,gBAAAN,UAAA;;;AAAA,SAAA,AAAAS,gBAAAjB,rBAAMoB;AAAN,AAAA,OAAAF,eAAA,mFAAA,2DAAA,aAAA,AAAAH,oDAAA,AAAAI,eAAAnB,nFACUoB;;;AADV;;;;GAAA,KAAA;;AAAA,AAAA,OAAArB,mBAASR;;;AAD1B,AAKE,iEAAA,1DAAC7F,8CAAMkG,sEAAoB,AAACyB,sBAAYxB;;;AAE5E,AAAA;;;;;;;;;;;4BAAA,oCAAApH,hEAAe8I;AAAf,AAAA,IAAAD,WAAA,AAAA;AAAA,AAAA,QAAAA;KAAA;AAAA,OAAAC,wDAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;KAAA;AAAA,OAAAA,wDAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;;AAAA,MAAA,KAAA3I,MAAA,CAAA,8DAAA,AAAA;;;;;;AAAA,CAAA,0DAAA,1DAAe2I,qEAUXC,OAAOC;AAVX,AAUmB,6EAAA,tEAACC,wDAAOF,OAAOC;;;AAVlC,CAAA,0DAAA,1DAAeF,qEAWXC,OAAOC,OAAOlC;AAXlB,AAYG,IAAMoC,KAAG,AAACrC,sCAAsBkC,OAAOjC;IACjCqC,KAAG,AAACtC,sCAAsBmC,OAAOlC;AADvC,AAEE,OAACsC,6CAAEF,GAAGC;;;AAdX,CAAA,oDAAA,pDAAeL;;AAAf,AAgBA;;;;;;;;;;;;;;;;;;;;;;;;gCAAA,hCAAeO,wEAuBZC;AAvBH,AAwBE,OAAC9F,mBAAS,AAAC+F,uHAAuBD;;AAEpC;;;wCAAA,xCAAeE,wFAEZC;AAFH,AAGE,OAACjG,mBAAS,AAACkG,+HAA+BD;;AAE5C;;;yCAAA,zCAAeE,0FAEZC,EAAEC;AAFL,AAGE,IAAMA,WAAK,EAAI,OAASA,mBAAM,AAACtF,gDAAQsF,MAAMA;AAA7C,AACE,OAACC,gIAAgCF,EAAEC;;AAEvC;;;6CAAA,7CAAeE,kGAEZH,EAAEC;AAFL,AAGE,IAAMD,QAAK,EAAI,OAASA,gBAAG,AAACrF,gDAAQqF,GAAGA;IACjCC,WAAK,EAAI,OAASA,mBAAM,AAACtF,gDAAQsF,MAAMA;AAD7C,AAEE,OAACG,oIAAoCJ,MAAEC;;AAE3C;;;6CAAA,7CAAeI,kGAEZL,EAAEC;AAFL,AAGE,IAAMD,QAAK,EAAI,OAASA,gBAAG,AAACrF,gDAAQqF,GAAGA;IACjCC,WAAK,EAAI,OAASA,mBAAM,AAACtF,gDAAQsF,MAAMA;AAD7C,AAEI,OAACK,oIAAoCN,MAAEC;;AAE7C;;;4BAAA,5BAAeM,gEAEZjH,QAAQK,aAAa6G;AAFxB,AAGE,OAACC,mHAAmBnH,QAAQK,aAAa,gIAAA,2EAAA,3MAACvC,0DAAQoJ;;AAEpD;;;+BAAA,/BAAeE,sEAEZpH,QAAQK;AAFX,AAGE,OAACC,mBAAS,AAAC+G,sHAAsBrH,QAAQK;;AAE3C,AAAA;;;;;;qCAAA,6CAAAvD,lFAAeyK;AAAf,AAAA,IAAAD,WAAA,AAAA;AAAA,AAAA,QAAAA;KAAA;AAAA,OAAAC,iEAAA,CAAA,UAAA;;;KAAA;AAAA,OAAAA,iEAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;;AAAA,MAAA,KAAAtK,MAAA,CAAA,8DAAA,AAAA;;;;;;AAAA,CAAA,mEAAA,nEAAesK,8EAKXC;AALJ,AAMG,OAACC,4HAA4BD;;;AANhC,CAAA,mEAAA,nEAAeD,8EAOXC,qBAAqBE;AAPzB,AAQG,OAACD,4HAA4BD,qBAAqBE;;;AARrD,CAAA,6DAAA,7DAAeH;;AAAf,AAUA;;;;;kDAAA,lDAAeI,4GAIZ3H,QAAQK;AAJX,AAKE,OAACC,mBAAS,AAACsH,yIAAyC5H,QAAQK;;AAE9D;;;;;+CAAA,/CAAewH,sGAIZL;AAJH,AAKE,OAAClH,mBAAS,AAACwH,sIAAsCN;;AAEnD;;;iDAAA,jDAAeO,0GAEZC,cAAcC;AAFjB,AAGE,OAAC3H,mBAAS,AAAC4H,wIAAwC,AAAC1D,cAAIwD,eAAeC;;AAEzE;;;qCAAA,rCAAeE,kFAEZnI,QAAQK;AAFX,AAGE,OAACC,mBAAS,AAAC8H,4HAA4BpI,QAAQK;;AAEjD;;;8CAAA,9CAAegI,oGAEZC;AAFH,AAGE,OAAChI,mBAAS,AAACiI,qIAAqCD;;AAElD,AAAA;;;;gCAAA,wCAAAxL,xEAAe+L;AAAf,AAAA,IAAAL,qBAAA;AAAA,AAAA,IAAAC,0BAAA,AAAA;AAAA,AAAA,IAAAC,wBAAA;;AAAA,AAAA,GAAA,CAAAA,wBAAAD;AAAA,AAAA,AAAAD,wBAAA,CAAA,UAAAE;;AAAA,eAAA,CAAAA,wBAAA;;;;AAAA;;;;AAAA,IAAAC,uBAAA,EAAA,CAAA,MAAA,AAAAH,4BAAA,AAAA,KAAAI,qBAAA,AAAAJ,yBAAA,KAAA,IAAA,OAAA;AAAA,AAAA,OAAAK,mEAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAAF;;;;AAAA,AAAA,CAAA,qEAAA,rEAAeE,gFAGZM,gBAAgBzB,OAAS0B;AAH5B,AAIE,OAACC,8CAAMC,gCAAuBH,gBAAgBzB,OAAO0B;;;AAJvD,CAAA,wDAAA,xDAAeP;;AAAf;AAAA,CAAA,kDAAA,WAAAC,7DAAeD;AAAf,AAAA,IAAAE,WAAA,AAAAzD,gBAAAwD;IAAAA,eAAA,AAAAE,eAAAF;IAAAG,WAAA,AAAA3D,gBAAAwD;IAAAA,eAAA,AAAAE,eAAAF;AAAA,AAAA,IAAAI,qBAAA;AAAA,AAAA,OAAAA,wDAAAH,SAAAE,SAAAH;;;AAAA,AAMA;;;kCAAA,lCAAeS,4EAEZvJ,QAAQK,aAAamJ;AAFxB,AAGE,OAACC,yHAAyBzJ,QAAQK,aAAamJ;;AAEjD;;;yBAAA,zBAAeE,0DAEZ1J,QAAQK,aAAasJ;AAFxB,AAGE,OAACC,gHAAgB5J,QAAQK,aAAa,+HAAA,2EAAA,1MAACvC,0DAAQ6L;;AAEjD;;;;;;0BAAA,1BAAeE,4DAKZ7J,QAAQK;AALX,AAME,OAACC,mBAAS,AAACwJ,iHAAiB9J,QAAQK;;AAEtC;;;;yBAAA,zBAAe0J,0DAGZ/J,QAAQK;AAHX,AAIE,OAACC,mBAAS,AAAC0J,gHAAgBhK,QAAQK;;AAErC;;;8BAAA,9BAAe4J,oEAEZjK,QAAQK,aAAa6J;AAFxB,AAGE,OAACC,qHAAqBnK,QAAQK,aAAa6J;;AAE7C;;;oCAAA,pCAAeE,gFAEZpK,QAAQK;AAFX,AAGE,OAACC,mBAAS,AAAC+J,2HAA2BrK,QAAQK;;AAEhD;;;gCAAA,hCAAeiK,wEAEZC;AAFH,AAGE,OAACC,uHAAuBD;;AAE1B;;;qCAAA,rCAAeE,kFAEZF,OAAOG;AAFV,AAGE,OAACC,4HAA4BJ,OAAOG;;AAEtC;;;;4CAAA,5CAAeE,gGAGZ5K,QAAQK;AAHX,AAIE,OAACC,mBAAS,AAACuK,mIAAmC7K,QAAQK;;AAExD;;;;;;;;;;;;;;;;6CAAA,7CAAeyK,kGAeZ9K,QAAQK,aAAa0K,qBAAqBC;AAf7C,AAgBE,OAAC1K,mBAAS,AAAC2K,oIAAoCjL,QAAQK,aAAa0K,qBAAqBC;;AAE3F;;;;;;;;;;;6CAAA,7CAAeE,kGAUZlL,QAAQK,aAAa8K,SAASC;AAVjC,AAWE,OAAC9K,mBAAS,AAAC+K,oIAAoCrL,QAAQK,aAAa8K,SAASC;;AAE/E;;;;;2CAAA,3CAAeE,8FAIZtL,QAAQK,aAAa+K,kBAAkBJ;AAJ1C,AAKE,OAAC1K,mBAAS,AAACiL,kIAAkCvL,QAAQK,aAAa+K,kBAAkBJ;;AAEtF;;;6BAAA,7BAAeQ,kEAEZxL,QAAQK,aAAaoL,gBAAgBC;AAFxC,AAGE,OAACC,oHAAoB3L,QAAQK,aAAaoL,gBAAgBC;;AAE5D;;;8BAAA,9BAAeE,oEAEZ5L,QAAQK;AAFX,AAGE,OAACC,mBAAS,AAACuL,qHAAqB7L,QAAQK;;AAE1C,AAAA;;;;yCAAA,iDAAAvD,1FAAeiP;AAAf,AAAA,IAAAD,WAAA,AAAA;AAAA,AAAA,QAAAA;KAAA;AAAA,OAAAC,qEAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;KAAA;AAAA,OAAAA,qEAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;;AAAA,MAAA,KAAA9O,MAAA,CAAA,8DAAA,AAAA;;;;;;AAAA,CAAA,uEAAA,vEAAe8O,kFAGX/L,QAAQgM;AAHZ,AAIG,OAACC,qEAAuBjM,QAAQgM;;;AAJnC,CAAA,uEAAA,vEAAeD,kFAKX/L,QAAQK,aAAa2L;AALzB,AAMG,OAAC1L,mBAAS,AAAC4L,gIAAgClM,QAAQK,aAAa2L;;;AANnE,CAAA,iEAAA,jEAAeD;;AAAf,AAQA;;;;;;2CAAA,3CAAeI,8FAKZnM,QAAQK,aAAa8K;AALxB,AAME,OAACiB,kIAAkCpM,QAAQK,aAAa8K;;AAE1D;;;8BAAA,9BAAekB,oEAEZ9B;AAFH,AAGE,IAAM+B,gBAAc,AAACC,qHAAqBhC;AAA1C,AACE,GAAI,0BAAAiC,zBAAUF;AACZ,OAACxM,6BAAiBwM;;AAClB,OAAChM,mBAASgM;;;AAEhB;;;mCAAA,nCAAeG,8EAEZlC,OAAOL;AAFV,AAGE,OAACwC,0HAA0BnC,OAAO,iBAAAoC,WAAQzC;AAAR,AAAA,GACE,OAASA;AADX,uDAAAyC,hDACuBtL;;AADvBsL;;;;AAGpC;;;;;8BAAA,9BAAeC,oEAIZzB,SAAS0B;AAJZ,AAKE,OAACC,qHAAqB3B,SAAS0B;;AAEjC;;;uBAAA,vBAAeE,sDAEZ/M,QAAQK,aAAakK;AAFxB,AAGE,OAACyC,8GAAchN,QAAQK,aAAakK;;AAEtC;;;kCAAA,lCAAe0C,4EAEZ1C;AAFH,AAGE,OAACjK,mBAAS,AAAC4M,yHAAyB3C;;AAEtC;;;uCAAA,vCAAe4C,sFAEZ5C,OAAOsC;AAFV,AAGE,OAACO,8HAA8B7C,OAAO,uHAAA,2EAAA,lMAACzM,0DAAQ+O;;AAEjD;;;wBAAA,xBAAeQ,wDAEZrN,QAAQK;AAFX,AAGE,OAACC,mBAAS,AAACgN,+GAAetN,QAAQK;;AAEpC;;;;;;;;8BAAA,9BAAekN,oEAOZvN,QAAQK,aAAamN,UAAUC;AAPlC,AAQE,OAACC,qHAAqB1N,QAAQK,aAAamN,UAAUC;;AAEvD;;;;;;;8BAAA,9BAAeE,oEAMZ3N,QAAQK,aAAamN;AANxB,AAOE,OAACI,qHAAqB5N,QAAQK,aAAamN;;AAE7C;;;+BAAA,/BAAeK,sEAEZ7N,QAAQuK;AAFX,AAGE,OAACuD,+BAAsB9N,QAAQuK;;AAEjC;;;8BAAA,9BAAewD,oEAEZ/N,QAAQ5B;AAFX,AAGE,IAAA4P,WAAM,AAAA,wFAAW5P;IAAjB4P,eAAA,EAAA,CAAAA,oBAAAxB,oBAAA,AAAAwB,aAAA;AAAA,AAAA,QAAAA;KAAA;AAAA,uBACmC,AAAA,2FAAWhO,qBACd,AAAA,gFAAK5B;;;KAFrC;AAAA,uBAGmC,AAAA,2FAAW4B,qBACd,CAAA,qDAAc,AAAA,gFAAK5B,gCACpB,AAAA,gFAAKA,sBACJ,AAAA,yFAAUA;;;;AACxC,AACE,IAAA6P,6BAAA,AAAAxP,8BAAA;IAAAyP,8BAAA;AAAA,AAAA,oBAAA,AAAAvP,qCAAAuP,4BAAAD;AAAA,AAAA,IAAAE,yBAAA;AAAA,AAAA,GAAA,CAAAA,kCAAAlR;AAAA,AAAA4B,qDAAAqP,4BAAAD,2BAAA,AAAAG,mNAAAD,xGAA2C,AAAA,wFAAW/P;;AAAtD,AAAAS,qDAAAqP,4BAAAD,2BAAA,AAAAG,2GAAAD,+HAAA,xGAA2C,AAAA,wFAAW/P;;;AAAtD;;AADF;;;;AAIJ;;;8BAAA,9BAAeiQ,oEAEZhL;AAFH,AAGE,IAAAiL,aAAsC,AAACK,qHAAqBtL;IAA5DiL,iBAAA,AAAAC,4BAAAD;eAAA,AAAAE,4CAAAF,eAAA,tEAAcG;cAAd,AAAAD,4CAAAF,eAAA,rEAAuBI;WAAvB,AAAAF,4CAAAF,eAAA,lEAA+BlF;AAA/B,AAAA,qBACiBqF,qBACD,AAACG,qBAAQF,kBACZ,AAACpO,mBAAS8I;;AAEzB;;;;;+BAAA,/BAAeyF,sEAIZ1Q,YAAYC,SAAS6F;AAJxB,AAKE,OAAC6K,sHAAsB,AAAC5Q,iCAAiBC,YAAYC,UAAU6F;;AAEjE;;;;oCAAA,pCAAe8K,gFAGZ/O,QAAQiE;AAHX,AAIE,OAAC+K,2HAA2BhP,QAAQiE;;AAEtC;;;qCAAA,rCAAegL,kFAEZjP,QAAQkP;AAFX,AAGE,OAACC,4HAA4BnP,QAAQ,AAAC3C,2HAAwB6R;;AAEhE;;;mCAAA,nCAAeE,8EAEZpP;AAFH,AAGE,OAACqP,0HAA0BrP;;AAE7B;;;gCAAA,hCAAesP,wEAEZtP;AAFH,AAGE,OAACzC,2HAAwB,AAACgS,uHAAuBvP;;AAEnD;;;yCAAA,zCAAewP,0FAEZrR,YAAYC;AAFf,AAGE,OAACkC,mBAAS,AAACmP,gIAAgC,AAACvR,iCAAiBC,YAAYC;;AAE3E,AAAA;;;;0CAAA,kDAAAtB,5FAAe6S;AAAf,AAAA,IAAAD,WAAA,AAAA;AAAA,AAAA,QAAAA;KAAA;AAAA,OAAAC,sEAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;KAAA;AAAA,OAAAA,sEAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;;AAAA,MAAA,KAAA1S,MAAA,CAAA,8DAAA,AAAA;;;;;;AAAA,CAAA,wEAAA,xEAAe0S,mFAGX3P,QAAQ7B,YAAYC;AAHxB,AAIG,0GAAA,nGAACwR,sEAAwB5P,QAAQ7B,YAAYC;;;AAJhD,CAAA,wEAAA,xEAAeuR,mFAKX3P,QAAQ7B,YAAYC,SAASyR;AALjC,AAMG,OAACC,iIAAiC9P,QAAQ,AAAC9B,iCAAiBC,YAAYC,UAAU,0HAAA,2EAAA,rMAACN,0DAAQ+R;;;AAN9F,CAAA,kEAAA,lEAAeF;;AAAf,AAQA;;;;qCAAA,rCAAeI,kFAGZ/P,QAAQ6P;AAHX,AAIE,OAACG,4HAA4BhQ,QAAQ,0HAAA,2EAAA,rMAAClC,0DAAQ+R;;AAEhD;;;gCAAA,hCAAeI,wEAEZjQ;AAFH,AAGE,OAAC4O,qBAAQ,AAACsB,uHAAuBlQ;;AAEnC;;;;oCAAA,pCAAemQ,gFAGZnQ;AAHH,AAIE,OAACM,mBAAS,AAAC8P,2HAA2BpQ;;AAExC;;;;;mCAAA,nCAAeqQ,8EAIZrQ,QAAQK,aAAaiQ;AAJxB,AAKE,OAAChQ,mBAAS,AAACiQ,0HAA0BvQ,QAAQK,aAAaiQ;;AAE5D;;;;yCAAA,zCAAeE,0FAGZC,2BAA2BC;AAH9B,AAIE,OAACC,oCAA2BF,2BAA2BC;;AAEzD;;;;wCAAA,xCAAeE,wFAGZ5Q,QAAQK,aAAaiQ;AAHxB,AAIE,OAACO,+HAA+B7Q,QAAQK,aAAaiQ;;AAEvD;;;;;;;;;;8BAAA,9BAAeQ,oEASZ9Q;AATH,AAUE,OAAC+Q,qHAAqB/Q","names",["var_args","G__65154","metabase.lib.js/extract-template-tags","js/Error","query-text","metabase.lib.js.extract_template_tags","existing-tags","metabase.lib.core.__GT_TemplateTags","metabase.lib.core.extract_template_tags","metabase.lib.core.TemplateTags__GT_","metabase.lib.js/suggestedName","query","metabase.lib.core.suggested_name","metabase.lib.js/pMBQL","query-map","<>","cljs.core.js__GT_clj","cljs.core.assoc","metabase.mbql.normalize/normalize","metabase.lib.convert/->pMBQL","metabase.lib.js/metadataProvider","database-id","metadata","metabase.lib.metadata.protocols/metadata-provider?","metabase.lib.js.metadata/metadata-provider","metabase.lib.js/query","level__30248__auto__","metabase.util.log/glogi-level","logger__30249__auto__","metabase.util.log/is-loggable?","x__30250__auto__","lambdaisland.glogi.log","metabase.util.log/format-msg","metabase.util.log.format_msg","cljs.core.pr_str","metabase.lib.core.query","metabase.lib.js/fix-namespaced-values","x","cljs.core/qualified-keyword?","cljs.core/namespace","cljs.core/name","cljs.core/map?","cljs.core/update-vals","cljs.core/sequential?","cljs.core.map","metabase.lib.js/legacy-query","metabase.lib.convert/->legacy-MBQL","cljs.core.clj__GT_js","metabase.util/qualified-name","metabase.lib.js/append-stage","a-query","metabase.lib.core.append_stage","metabase.lib.js/drop-stage","metabase.lib.core.drop_stage","metabase.lib.js/orderable-columns","stage-number","cljs.core/to-array","metabase.lib.core.orderable_columns","metabase.lib.js/display-info","metabase.lib.stage/ensure-previous-stages-have-metadata","metabase.lib.core.display_info","cljs.core/update-keys","metabase.util/->camelCaseEn","cljs.core.update","G__65387","metabase.lib.js/order-by-clause","orderable","metabase.lib.js.order_by_clause","direction","metabase.lib.core.order_by_clause","metabase.lib.core.normalize","cljs.core.keyword","metabase.lib.js/order-by","metabase.lib.core.order_by","metabase.lib.js/order-bys","metabase.lib.core.order_bys","metabase.lib.js/change-direction","current-order-by","metabase.lib.core.change_direction","metabase.lib.js/breakoutable-columns","metabase.lib.core.breakoutable_columns","metabase.lib.js/breakouts","metabase.lib.core.breakouts","metabase.lib.js/breakout","metabase.lib.core.breakout","metabase.lib.core.ref","metabase.lib.js/binning","metabase.lib.core.binning","metabase.lib.js/with-binning","binning-option","metabase.lib.core.with_binning","G__65448","metabase.lib.js/available-binning-strategies","metabase.lib.core.available_binning_strategies","metabase.lib.js/temporal-bucket","metabase.lib.core.temporal_bucket","metabase.lib.js/with-temporal-bucket","bucketing-option","metabase.lib.core.with_temporal_bucket","G__65459","metabase.lib.js/available-temporal-buckets","metabase.lib.core.available_temporal_buckets","metabase.lib.js/remove-clause","clause","metabase.lib.core.remove_clause","metabase.lib.js/replace-clause","target-clause","new-clause","metabase.lib.core.replace_clause","metabase.lib.js/prep-query-for-equals","field-ids","metabase.mbql.js/normalize-cljs","p1__65460#","medley.core.update_existing","cljs.core.merge","inner-query","fields","or__5045__auto__","iter__5523__auto__","s__65462","cljs.core/LazySeq","temp__5804__auto__","cljs.core/seq","cljs.core/chunked-seq?","c__5521__auto__","size__5522__auto__","cljs.core/count","b__65464","cljs.core/chunk-buffer","i__65463","cljs.core/-nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__65461","cljs.core/chunk-rest","cljs.core/first","cljs.core/cons","cljs.core/rest","id","cljs.core/frequencies","G__65466","metabase.lib.js/query=","query1","query2","metabase.lib.js.query_EQ_","n1","n2","cljs.core._EQ_","metabase.lib.js/group-columns","column-metadatas","metabase.lib.core.group_columns","metabase.lib.js/columns-group-columns","column-group","metabase.lib.core.columns_group_columns","metabase.lib.js/describe-temporal-unit","n","unit","metabase.lib.core.describe_temporal_unit","metabase.lib.js/describe-temporal-interval","metabase.lib.core.describe_temporal_interval","metabase.lib.js/describe-relative-datetime","metabase.lib.core.describe_relative_datetime","metabase.lib.js/aggregate","an-aggregate-clause","metabase.lib.core.aggregate","metabase.lib.js/aggregations","metabase.lib.core.aggregations","G__65468","metabase.lib.js/aggregation-clause","aggregation-operator","metabase.lib.core.aggregation_clause","column","metabase.lib.js/available-aggregation-operators","metabase.lib.core.available_aggregation_operators","metabase.lib.js/aggregation-operator-columns","metabase.lib.core.aggregation_operator_columns","metabase.lib.js/selected-aggregation-operators","agg-operators","agg-clause","metabase.lib.core.selected_aggregation_operators","metabase.lib.js/filterable-columns","metabase.lib.core.filterable_columns","metabase.lib.js/filterable-column-operators","filterable-column","metabase.lib.core.filterable_column_operators","args__5775__auto__","len__5769__auto__","i__5770__auto__","argseq__5776__auto__","cljs.core/IndexedSeq","metabase.lib.js/filter-clause","seq65469","G__65470","cljs.core/next","G__65471","self__5754__auto__","filter-operator","args","cljs.core.apply","metabase.lib.core/filter-clause","metabase.lib.js/filter-operator","a-filter-clause","metabase.lib.core.filter_operator","metabase.lib.js/filter","boolean-expression","metabase.lib.core.filter","metabase.lib.js/filters","metabase.lib.core.filters","metabase.lib.js/fields","metabase.lib.core.fields","metabase.lib.js/with-fields","new-fields","metabase.lib.core.with_fields","metabase.lib.js/fieldable-columns","metabase.lib.core.fieldable_columns","metabase.lib.js/join-strategy","a-join","metabase.lib.core.join_strategy","metabase.lib.js/with-join-strategy","strategy","metabase.lib.core.with_join_strategy","metabase.lib.js/available-join-strategies","metabase.lib.core.available_join_strategies","metabase.lib.js/join-condition-lhs-columns","existing-join-or-nil","rhs-column-or-nil","metabase.lib.core.join_condition_lhs_columns","metabase.lib.js/join-condition-rhs-columns","joinable","lhs-column-or-nil","metabase.lib.core.join_condition_rhs_columns","metabase.lib.js/join-condition-operators","metabase.lib.core.join_condition_operators","metabase.lib.js/expression","expression-name","an-expression-clause","metabase.lib.core.expression","metabase.lib.js/expressions","metabase.lib.core.expressions","G__65473","metabase.lib.js/expressionable-columns","expression-position","metabase.lib.js.expressionable_columns","metabase.lib.core.expressionable_columns","metabase.lib.js/suggested-join-condition","metabase.lib.core.suggested_join_condition","metabase.lib.js/join-fields","joined-fields","metabase.lib.core.join_fields","cljs.core/Keyword","metabase.lib.js/with-join-fields","metabase.lib.core.with_join_fields","G__65474","metabase.lib.js/join-clause","conditions","metabase.lib.core.join_clause","metabase.lib.js/join","metabase.lib.core.join","metabase.lib.js/join-conditions","metabase.lib.core.join_conditions","metabase.lib.js/with-join-conditions","metabase.lib.core.with_join_conditions","metabase.lib.js/joins","metabase.lib.core.joins","metabase.lib.js/rename-join","join-spec","new-name","metabase.lib.core.rename_join","metabase.lib.js/remove-join","metabase.lib.core.remove_join","metabase.lib.js/joined-thing","metabase.lib.join/joined-thing","metabase.lib.js/picker-info","G__65475","level__30238__auto__","logger__30239__auto__","x__30240__auto__","cljs.core.print_str","metabase.lib.js/external-op","map__65476","cljs.core/--destructure-map","cljs.core.get","operator","options","metabase.lib.core.external_op","cljs.core/clj->js","metabase.lib.js/native-query","metabase.lib.core.native_query","metabase.lib.js/with-native-query","metabase.lib.core.with_native_query","metabase.lib.js/with-template-tags","tags","metabase.lib.core.with_template_tags","metabase.lib.js/raw-native-query","metabase.lib.core.raw_native_query","metabase.lib.js/template-tags","metabase.lib.core.template_tags","metabase.lib.js/required-native-extras","metabase.lib.core.required_native_extras","G__65478","metabase.lib.js/with-different-database","metabase.lib.js.with_different_database","native-extras","metabase.lib.core.with_different_database","metabase.lib.js/with-native-extras","metabase.lib.core.with_native_extras","metabase.lib.js/native-extras","metabase.lib.core.native_extras","metabase.lib.js/available-metrics","metabase.lib.core.available_metrics","metabase.lib.js/joinable-columns","join-or-joinable","metabase.lib.core.joinable_columns","metabase.lib.js/table-or-card-metadata","query-or-metadata-provider","table-id","metabase.lib.metadata/table-or-card","metabase.lib.js/join-lhs-display-name","metabase.lib.core.join_lhs_display_name","metabase.lib.js/database-id","metabase.lib.core.database_id","cljs.core/chunk-first"]],"~:used-vars",["^I",["~$cljs.core/to-array","~$metabase.lib.js/remove-join","~$cljs.core/--destructure-map","~$metabase.lib.core/extract-template-tags","~$cljs.core/rest","~$metabase.lib.core/query","~$metabase.lib.js/rename-join","~$metabase.lib.core/columns-group-columns","~$metabase.lib.core/join-fields","~$metabase.lib.js/available-binning-strategies","~$cljs.core/keyword","~$metabase.lib.core/aggregate","~$metabase.lib.core/filter-operator","~$metabase.lib.core/binning","~$metabase.lib.js/describe-relative-datetime","~$cljs.core/sequential?","~$metabase.lib.core/join-conditions","~$metabase.lib.core/temporal-bucket","~$metabase.lib.js/with-join-strategy","~$metabase.lib.core/TemplateTags->","~$metabase.lib.core/suggested-join-condition","~$metabase.lib.core/replace-clause","~$metabase.lib.core/drop-stage","~$metabase.lib.core/remove-clause","~$metabase.lib.js/fix-namespaced-values","~$metabase.lib.core/normalize","~$metabase.lib.metadata/table-or-card","~$metabase.lib.core/native-extras","~$metabase.lib.js/with-native-query","~$cljs.core/=","~$metabase.lib.js/breakoutable-columns","~$metabase.lib.js/joins","~$metabase.lib.core/join-lhs-display-name","~$metabase.lib.core/join","~$metabase.lib.js/orderable-columns","~$metabase.lib.core/aggregations","~$metabase.lib.core/available-temporal-buckets","~$metabase.lib.core/with-binning","~$metabase.lib.core/append-stage","~$metabase.lib.js/legacy-query","~$metabase.lib.js/join-clause","~$metabase.lib.core/filterable-column-operators","~$cljs.core/IndexedSeq","~$metabase.lib.core/with-temporal-bucket","~$metabase.lib.js/order-bys","~$metabase.lib.core/with-join-conditions","~$cljs.core/update-keys","~$metabase.lib.core/raw-native-query","~$metabase.lib.js/template-tags","~$metabase.lib.core/available-metrics","~$cljs.core/count","~$metabase.lib.core/with-different-database","~$metabase.lib.stage/ensure-previous-stages-have-metadata","~$metabase.lib.core/with-fields","~$metabase.lib.js/prep-query-for-equals","~$metabase.lib.metadata.protocols/metadata-provider?","~$metabase.lib.js/describe-temporal-interval","~$metabase.lib.convert/->pMBQL","~$cljs.core/seq","~$cljs.core/chunk-first","~$cljs.core/apply","~$metabase.lib.js/external-op","~$metabase.lib.js/required-native-extras","~$metabase.util/qualified-name","~$metabase.lib.js/breakout","~$cljs.core/Keyword","~$metabase.lib.js/breakouts","~$metabase.lib.js/query=","~$metabase.lib.js/group-columns","~$metabase.lib.js/joined-thing","~$metabase.lib.core/aggregation-clause","~$metabase.lib.core/join-clause","~$metabase.lib.js/with-join-conditions","~$cljs.core/chunk","~$metabase.lib.core/external-op","~$metabase.lib.js/available-metrics","~$metabase.lib.js/suggested-join-condition","~$cljs.core/LazySeq","~$cljs.core/chunk-rest","~$lambdaisland.glogi/log","~$metabase.lib.core/with-join-fields","~$cljs.core/qualified-keyword?","~$metabase.lib.js/with-template-tags","~$metabase.util.log/is-loggable?","~$cljs.core/pr-str","~$metabase.lib.js/native-extras","~$metabase.lib.js/order-by","~$metabase.lib.js/filter-clause","~$metabase.lib.js/fields","~$metabase.lib.js/available-temporal-buckets","~$metabase.lib.js/filter-operator","~$metabase.lib.js/append-stage","~$metabase.lib.core/expression","~$metabase.lib.core/describe-relative-datetime","~$metabase.lib.join/joined-thing","~$metabase.lib.js/available-aggregation-operators","~$cljs.core/js->clj","~$metabase.lib.core/available-binning-strategies","~$metabase.lib.js/joinable-columns","~$metabase.lib.core/fieldable-columns","~$metabase.lib.core/template-tags","~$metabase.lib.core/order-bys","~$metabase.lib.core/display-info","~$metabase.lib.core/filterable-columns","~$metabase.lib.core/join-condition-rhs-columns","~$metabase.lib.js/native-query","~$cljs.core/map?","~$metabase.lib.core/selected-aggregation-operators","~$metabase.lib.js/with-different-database","~$metabase.lib.core/order-by-clause","~$metabase.lib.core/ref","~$metabase.lib.js/join-lhs-display-name","~$cljs.core/update","~$metabase.lib.core/filters","~$metabase.lib.core/join-condition-lhs-columns","~$metabase.util.log/format-msg","~$cljs.core/namespace","~$metabase.lib.js/join-condition-operators","~$cljs.core/map","~$metabase.mbql.normalize/normalize","~$metabase.lib.js/join","~$metabase.lib.js/picker-info","~$metabase.lib.core/orderable-columns","~$medley.core/update-existing","~$metabase.lib.js/table-or-card-metadata","~$cljs.core/update-vals","~$metabase.lib.core/available-aggregation-operators","~$metabase.lib.core/filter-clause","~$metabase.lib.core/fields","~$metabase.lib.js/with-fields","~$cljs.core/get","~$metabase.lib.core/describe-temporal-unit","~$metabase.lib.core/joins","~$cljs.core/chunk-append","~$metabase.lib.core/breakouts","~$metabase.lib.core/joinable-columns","~$metabase.lib.core/group-columns","~$cljs.core/-nth","~$metabase.lib.js/aggregation-clause","~$metabase.lib.core/native-query","~$metabase.lib.core/available-join-strategies","~$metabase.lib.js/order-by-clause","~$metabase.lib.js/expressionable-columns","~$metabase.util.log/glogi-level","~$cljs.core/clj->js","~$metabase.lib.js.metadata/metadata-provider","~$metabase.lib.js/join-conditions","~$metabase.lib.core/with-native-extras","~$cljs.core/frequencies","~$metabase.lib.js/change-direction","~$metabase.lib.core/join-strategy","~$metabase.mbql.js/normalize-cljs","~$metabase.lib.js/suggestedName","~$metabase.lib.core/->TemplateTags","~$metabase.lib.js/display-info","~$metabase.lib.core/suggested-name","~$metabase.lib.js/expressions","~$metabase.lib.js/fieldable-columns","~$metabase.lib.js/binning","~$metabase.lib.js/filterable-columns","~$cljs.core/next","~$metabase.lib.js/columns-group-columns","~$metabase.lib.js/database-id","~$metabase.lib.js/join-condition-rhs-columns","~$metabase.lib.core/aggregation-operator-columns","~$metabase.lib.js/filter","~$metabase.lib.js/join-fields","~$metabase.lib.js/temporal-bucket","~$metabase.lib.js/filters","~$metabase.lib.js/join-condition-lhs-columns","~$cljs.core/chunk-cons","~$metabase.util/->camelCaseEn","~$metabase.lib.core/join-condition-operators","~$metabase.lib.js/describe-temporal-unit","~$metabase.lib.js/aggregation-operator-columns","~$metabase.lib.core/filter","~$cljs.core/cons","~$cljs.core/assoc","~$metabase.lib.js/available-join-strategies","~$metabase.lib.js/replace-clause","~$metabase.lib.core/expressionable-columns","~$metabase.lib.js/pMBQL","~$cljs.core/chunk-buffer","~$metabase.lib.js/metadataProvider","~$metabase.lib.js/with-native-extras","~$cljs.core/print-str","~$metabase.lib.js/selected-aggregation-operators","~$metabase.lib.js/query","~$metabase.lib.core/change-direction","~$metabase.lib.js/aggregate","~$metabase.lib.core/with-template-tags","~$metabase.lib.core/expressions","~$metabase.lib.js/raw-native-query","~$metabase.lib.core/with-join-strategy","~$cljs.core/first","~$metabase.lib.js/filterable-column-operators","~$metabase.lib.js/with-temporal-bucket","~$metabase.lib.js/with-join-fields","~$metabase.lib.convert/->legacy-MBQL","~$metabase.lib.js/remove-clause","~$metabase.lib.core/breakout","~$metabase.lib.core/database-id","~$metabase.lib.core/required-native-extras","~$metabase.lib.core/order-by","~$metabase.lib.js/expression","~$cljs.core/name","~$metabase.lib.js/drop-stage","~$metabase.lib.core/describe-temporal-interval","~$cljs.core/merge","~$metabase.lib.core/with-native-query","~$metabase.lib.js/extract-template-tags","~$metabase.lib.core/breakoutable-columns","~$js/Error","~$metabase.lib.core/remove-join","~$metabase.lib.js/join-strategy","~$metabase.lib.js/with-binning","~$metabase.lib.core/rename-join","~$cljs.core/chunked-seq?","~$metabase.lib.js/aggregations"]]],"~:cache-keys",["~#cmap",[["^1K","metabase/lib/limit.cljc"],["507b4cd77086fbeef76c9c20db2557232894b23f","~:shadow.build.compiler/resolve",["^ ","~:require-id",null,"~:deps-ids",["^I",[]],"~:deps-syms",["^10","^@","~$metabase.lib.metadata.calculation","~$metabase.lib.schema","~$metabase.lib.schema.common","~$metabase.lib.util","~$metabase.shared.util.i18n","~$metabase.util.malli"]]],["^1K","camel_snake_kebab/internals/misc.cljc"],["5ae08f83ceb8959971e6334596bff0214bf6fdf2","^6Y",["^ ","^6Z",null,"^6[",["^I",[]],"^70",["^10","^@","~$camel-snake-kebab.internals.string-separator","~$clojure.string"]]],["^1K","goog/dom/tagname.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^6Y",["^ ","^6Z",null,"^6[",["^I",[]],"^70",["^10","~$goog.dom.HtmlElement"]]],["^1K","metabase/shared/util/internal/time_common.cljc"],["163f2e345dbdab8903e43302a6f45950d2b8975d","^6Y",["^ ","^6Z",null,"^6[",["^I",[]],"^70",["^10","^@"]]],["^1K","metabase/mbql/js.cljs"],["1e8ea9f7c1b339a100effade166f7accd51f621a","^6Y",["^ ","^6Z",null,"^6[",["^I",[]],"^70",["^10","^@","^16","^W"]]],["^1K","metabase/shared/util/i18n.cljs"],["6c3c8615004b349dae9851ed547d516d45e04bd0","^6Y",["^ ","^6Z",null,"^6[",["^I",[]],"^70",["^10","^@","~$shadow.js.shim.module$ttag","^78"]]],["^1K","goog/i18n/datetimesymbols.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^6Y",["^ ","^6Z",null,"^6[",["^I",[]],"^70",["^10","~$goog.i18n.cldrversion"]]],["^1K","goog/labs/useragent/platform.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^6Y",["^ ","^6Z",null,"^6[",["^I",[]],"^70",["^10","~$goog.string.internal","~$goog.labs.userAgent.util","~$goog.labs.userAgent.highEntropy.highEntropyValue","~$goog.labs.userAgent.highEntropy.highEntropyData","~$goog.labs.userAgent"]]],["^1K","metabase/lib/expression.cljc"],["10987df1e6eb50a264d740d0e7139634b3bce1f6","^6Y",["^ ","^6Z",null,"^6[",["^I",[]],"^70",["^10","^@","^78","^13","~$metabase.lib.common","~$metabase.lib.hierarchy","^R","^71","~$metabase.lib.options","~$metabase.lib.ref","^72","^73","~$metabase.lib.schema.expression","~$metabase.lib.schema.temporal-bucketing","~$metabase.lib.temporal-bucket","^74","^75","~$metabase.types","^W","^76"]]],["^1K","metabase/lib/schema/binning.cljc"],["d927ad1ec35ab24dde0eb7ea95cd81b19d96ecd4","^6Y",["^ ","^6Z",null,"^6[",["^I",[]],"^70",["^10","^@","^73","~$metabase.util.malli.registry"]]],["^1K","goog/crypt/crypt.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^6Y",["^ ","^6Z",null,"^6[",["^I",[]],"^70",["^10","~$goog.asserts","~$goog.async.throwException"]]],["^1K","metabase/types.cljc"],["00232bf78b259e26a21c218c8f2d746ba7003a15","^6Y",["^ ","^6Z",null,"^6[",["^I",[]],"^70",["^10","^@","~$clojure.set","~$metabase.types.coercion-hierarchies","^W"]]],["^1K","cljs/spec/gen/alpha.cljs"],["bc14df6666853ed869d7b88aaa864111c65d0c7f","^6Y",["^ ","^6Z",null,"^6[",["^I",[]],"^70",["^10","^@","~$goog.Uri"]]],["^1K","cljs/tools/reader/impl/utils.cljs"],["927809dcb44fa726e4969d993e3e733636d95ebb","^6Y",["^ ","^6Z",null,"^6[",["^I",[]],"^70",["^10","^@","^78","~$goog.string"]]],["^1K","metabase/lib/util.cljc"],["11c3262368d876979e323f3e646aab21fbf9b86e","^6Y",["^ ","^6Z",null,"^6[",["^I",[]],"^70",["^10","^@","~$shadow.js.shim.module$crc_32","^7O","~$goog.string.format","^7L","^78","^13","^7A","^7C","^72","^73","^7E","~$metabase.lib.schema.id","~$metabase.mbql.util","^75","^W","^76"]]],["^1K","lambdaisland/glogi.cljs"],["76286836d4172602aa08006b2a754dda736ffe09","^6Y",["^ ","^6Z",null,"^6[",["^I",[]],"^70",["^10","^@","~$goog.log","~$goog.debug.Console","~$goog.array","^78","~$goog.object","~$goog.debug.FancyWindow","~$goog.debug.DivConsole"]]],["^1K","goog/math/math.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^6Y",["^ ","^6Z",null,"^6[",["^I",[]],"^70",["^10","^7J"]]],["^1K","goog/html/trustedtypes.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^6Y",["^ ","^6Z",null,"^6[",["^I",[]],"^70",["^10"]]],["^1K","goog/string/stringformat.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^6Y",["^ ","^6Z",null,"^6[",["^I",[]],"^70",["^10","^7O"]]],["^1K","malli/registry.cljc"],["514c6f7d69d7e40b56fa75bfd1a49a683ca15982","^6Y",["^ ","^6Z",null,"^6[",["^I",[]],"^70",["^10","^@"]]],["^1K","goog/labs/useragent/browser.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^6Y",["^ ","^6Z",null,"^6[",["^I",[]],"^70",["^10","^7=","^7>","^7J","^7<","^7?","^7@"]]],["^1K","metabase/lib/order_by.cljc"],["ba61640f24562d4e76545c3ecaafd0acb9bc5634","^6Y",["^ ","^6Z",null,"^6[",["^I",[]],"^70",["^10","^@","~$metabase.lib.aggregation","~$metabase.lib.breakout","~$metabase.lib.dispatch","~$metabase.lib.equality","^7B","^R","^71","^7C","^7D","^72","^7E","~$metabase.lib.schema.order-by","^74","~$metabase.mbql.util.match","^75","^76"]]],["^1K","goog/html/safeurl.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^6Y",["^ ","^6Z",null,"^6[",["^I",[]],"^70",["^10","^7J","~$goog.fs.url","~$goog.html.TrustedResourceUrl","~$goog.string.Const","~$goog.string.TypedString","^7<"]]],["^1K","metabase/shared/util/currency.cljc"],["eebcc7f82aa7cb7e46caf6a9633d84c6b4396e93","^6Y",["^ ","^6Z",null,"^6[",["^I",[]],"^70",["^10","^@"]]],["^1K","goog/style/style.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^6Y",["^ ","^6Z",null,"^6[",["^I",[]],"^70",["^10","^7J","~$goog.dom","~$goog.dom.NodeType","~$goog.dom.TagName","~$goog.dom.safe","~$goog.dom.vendor","~$goog.html.SafeStyleSheet","~$goog.math.Box","~$goog.math.Coordinate","~$goog.math.Rect","~$goog.math.Size","^7W","~$goog.reflect","^7O","~$goog.userAgent"]]],["^1K","goog/array/array.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^6Y",["^ ","^6Z",null,"^6[",["^I",[]],"^70",["^10","^7J"]]],["~:shadow.build.js-support/require","moment"],["~$shadow.js.shim.module$moment","shadow.js.shim.module$moment.js","require","^6Y",["^ ","^6Z",null,"^6[",["^I",[]],"^70",["^10"]]],["^8D","moment-timezone"],["~$shadow.js.shim.module$moment_timezone","shadow.js.shim.module$moment_timezone.js","require","^6Y",["^ ","^6Z",null,"^6[",["^I",[]],"^70",["^10"]]],["^1K","metabase/mbql/schema/macros.cljs"],["2af09bd42ffb1e15b66723cf7ba15db7dc75d10b","^6Y",["^ ","^6Z",null,"^6[",["^I",[]],"^70",["^10","^@"]]],["^1K","metabase/lib/schema/mbql_clause.cljc"],["e5bdd00c58db706b1219843528fd3cd9dd8ab728","^6Y",["^ ","^6Z",null,"^6[",["^I",[]],"^70",["^10","^@","^73","^7E","^7H","^76","^7I"]]],["^1K","goog/useragent/useragent.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^6Y",["^ ","^6Z",null,"^6[",["^I",[]],"^70",["^10","~$goog.labs.userAgent.browser","~$goog.labs.userAgent.engine","~$goog.labs.userAgent.platform","^7=","^8B","^7<"]]],["^1K","malli/generator.cljc"],["514c6f7d69d7e40b56fa75bfd1a49a683ca15982","^6Y",["^ ","^6Z",null,"^6[",["^I",[]],"^70",["^10","^@","^B","^78","~$clojure.test.check","~$clojure.test.check.generators","~$clojure.test.check.properties","~$clojure.test.check.random","~$clojure.test.check.rose-tree","~$malli.core","~$malli.registry"]]],["^1K","clojure/test/check/properties.cljc"],["f33d988fd57bc9c11af1952db81c10f319c91416","^6Y",["^ ","^6Z",null,"^6[",["^I",[]],"^70",["^10","^@","^8K","~$clojure.test.check.results"]]],["^1K","clojure/test/check/generators.cljc"],["f33d988fd57bc9c11af1952db81c10f319c91416","^6Y",["^ ","^6Z",null,"^6[",["^I",[]],"^70",["^10","^@","^78","^8M","^8N","^7O"]]],["^1K","goog/debug/error.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^6Y",["^ ","^6Z",null,"^6[",["^I",[]],"^70",["^10"]]],["^1K","metabase/lib/common.cljc"],["a3bc6343077ef13a3da77612b68f23f9b2a3d890","^6Y",["^ ","^6Z",null,"^6[",["^I",[]],"^70",["^10","^@","^80","^7B","^7C","^7D","^73","^76"]]],["^1K","metabase/lib/schema/util.cljc"],["14a9e8a90c56f5e44b4ecd361e962722fd97aecf","^6Y",["^ ","^6Z",null,"^6[",["^I",[]],"^70",["^10","^@","^7C"]]],["^1K","metabase/lib/stage.cljc"],["fe4344b80c27764f34c9c3677daf5b78cdcb4a6d","^6Y",["^ ","^6Z",null,"^6[",["^I",[]],"^70",["^10","^@","^78","^13","^7Z","~$metabase.lib.binning","^7[","~$metabase.lib.expression","~$metabase.lib.field","^7B","^12","^R","^71","~$metabase.lib.normalize","^72","^7R","^7G","^74","^75","^W","^76"]]],["^1K","goog/flags/flags.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^6Y",["^ ","^6Z",null,"^6[",["^I",[]],"^70",["^10"]]],["^1K","malli/util.cljc"],["514c6f7d69d7e40b56fa75bfd1a49a683ca15982","^6Y",["^ ","^6Z",null,"^6[",["^I",[]],"^70",["^10","^@","^@","^8O"]]],["^1K","cljs/tools/reader/edn.cljs"],["927809dcb44fa726e4969d993e3e733636d95ebb","^6Y",["^ ","^6Z",null,"^6[",["^I",[]],"^70",["^10","^@","~$cljs.tools.reader.impl.errors","~$cljs.tools.reader.reader-types","~$cljs.tools.reader.impl.utils","~$cljs.tools.reader.impl.commons","~$cljs.tools.reader","^7O","~$goog.string.StringBuffer"]]],["^1K","clojure/test/check/random/doubles.cljs"],["f33d988fd57bc9c11af1952db81c10f319c91416","^6Y",["^ ","^6Z",null,"^6[",["^I",[]],"^70",["^10","^@","~$clojure.test.check.random.longs"]]],["^1K","net/cgrand/macrovich.cljc"],["abcb26cbfe0f8eef363b25525210c0fe1eb1f693","^6Y",["^ ","^6Z",null,"^6[",["^I",[]],"^70",["^10","^@"]]],["^1K","malli/destructure.cljc"],["514c6f7d69d7e40b56fa75bfd1a49a683ca15982","^6Y",["^ ","^6Z",null,"^6[",["^I",[]],"^70",["^10","^@","~$clojure.walk","^8O","~$malli.impl.util"]]],["^1K","schema/spec/variant.cljc"],["0dacc3066a87f33088c9a332b6c21e8b0560011c","^6Y",["^ ","^6Z",null,"^6[",["^I",[]],"^70",["^10","^@","~$schema.utils","~$schema.spec.core"]]],["^1K","goog/structs/circularbuffer.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^6Y",["^ ","^6Z",null,"^6[",["^I",[]],"^70",["^10"]]],["^1K","weavejester/dependency.cljc"],["7fd7f8879313f6a7e295f7447e668bdf492c42c1","^6Y",["^ ","^6Z",null,"^6[",["^I",[]],"^70",["^10","^@","^7L"]]],["^1K","metabase/lib/binning.cljc"],["d0ecf0860e95e263d5509b1f63ed02a449134510","^6Y",["^ ","^6Z",null,"^6[",["^I",[]],"^70",["^10","^@","^80","^7B","^71","^72","~$metabase.lib.schema.binning","~$metabase.shared.formatting.numbers","^75","^76"]]],["^1K","metabase/lib/schema/common.cljc"],["3f51a06335a7cb84c835d859c422919499874414","^6Y",["^ ","^6Z",null,"^6[",["^I",[]],"^70",["^10","^@","^78","^7H","^7I"]]],["^1K","goog/dom/nodetype.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^6Y",["^ ","^6Z",null,"^6[",["^I",[]],"^70",["^10"]]],["^1K","cljs/tools/reader/impl/inspect.cljs"],["927809dcb44fa726e4969d993e3e733636d95ebb","^6Y",["^ ","^6Z",null,"^6[",["^I",[]],"^70",["^10","^@"]]],["^1K","goog/labs/useragent/highentropy/highentropyvalue.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^6Y",["^ ","^6Z",null,"^6[",["^I",[]],"^70",["^10","^7=","^7<"]]],["^1K","cljs/pprint.cljs"],["bc14df6666853ed869d7b88aaa864111c65d0c7f","^6Y",["^ ","^6Z",null,"^6[",["^I",[]],"^70",["^10","^@","^78","^7O","^8["]]],["^1K","metabase/lib/breakout.cljc"],["9be2c53668f30478c70c02a5ae6b17f41e46c995","^6Y",["^ ","^6Z",null,"^6[",["^I",[]],"^70",["^10","^@","^78","^81","^R","^71","^7D","^72","^7E","^74","^75","^76"]]],["^1K","metabase/lib/schema/template_tag.cljc"],["f1b6289b8e576857fe667aed3da134e4ad1ea26a","^6Y",["^ ","^6Z",null,"^6[",["^I",[]],"^70",["^10","^@","^8O","^73","^7R","~$metabase.mbql.schema","^7I"]]],["^1K","metabase/lib/schema/ref.cljc"],["5037a60b3d2f427702cf5cedf23f02bcc394d051","^6Y",["^ ","^6Z",null,"^6[",["^I",[]],"^70",["^10","^@","^78","^80","^7B","^73","^7E","^7R","~$metabase.lib.schema.mbql-clause","^7F","^7H","^7I"]]],["^1K","cljs/tools/reader.cljs"],["927809dcb44fa726e4969d993e3e733636d95ebb","^6Y",["^ ","^6Z",null,"^6[",["^I",[]],"^70",["^10","^@","^8W","^8X","^8Y","^8V","^7V","^7O","^8["]]],["^1K","metabase/lib/segment.cljc"],["dbf962fc769bd7f672497d0be32390d643f131e1","^6Y",["^ ","^6Z",null,"^6[",["^I",[]],"^70",["^10","^@","^R","^71","^75"]]],["^1K","clojure/test/check/rose_tree.cljc"],["f33d988fd57bc9c11af1952db81c10f319c91416","^6Y",["^ ","^6Z",null,"^6[",["^I",[]],"^70",["^10","^@"]]],["^1K","clojure/test/check/impl.cljc"],["f33d988fd57bc9c11af1952db81c10f319c91416","^6Y",["^ ","^6Z",null,"^6[",["^I",[]],"^70",["^10","^@"]]],["^1K","goog/date/utcdatetime.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^6Y",["^ ","^6Z",null,"^6[",["^I",[]],"^70",["^10","~$goog.date","~$goog.date.Date","~$goog.date.DateTime","~$goog.date.Interval"]]],["^1K","camel_snake_kebab/internals/string_separator.cljc"],["5ae08f83ceb8959971e6334596bff0214bf6fdf2","^6Y",["^ ","^6Z",null,"^6[",["^I",[]],"^70",["^10","^@","^78"]]],["^1K","clojure/test/check/random.cljs"],["f33d988fd57bc9c11af1952db81c10f319c91416","^6Y",["^ ","^6Z",null,"^6[",["^I",[]],"^70",["^10","^@","~$clojure.test.check.random.doubles","^90"]]],["^1K","metabase/lib/schema/expression/arithmetic.cljc"],["e6936a3e0b11bc3cd40d4e396c708af4622c21cb","^6Y",["^ ","^6Z",null,"^6[",["^I",[]],"^70",["^10","^@","^8O","^13","^7B","^73","^7E","^98","^7F","^7H","^7I"]]],["^1K","goog/string/typedstring.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^6Y",["^ ","^6Z",null,"^6[",["^I",[]],"^70",["^10"]]],["^1K","metabase/lib/schema/expression/string.cljc"],["b2d7de575aaaa880fdc88dfc31642c8e002c3669","^6Y",["^ ","^6Z",null,"^6[",["^I",[]],"^70",["^10","^@","^7E","^98"]]],["^1K","metabase/lib/types/constants.cljc"],["efb91045e39c9ec06192309589f82a778219a002","^6Y",["^ ","^6Z",null,"^6[",["^I",[]],"^70",["^10","^@","^7W"]]],["^1K","metabase/domain_entities/converters.cljs"],["b8b77c13ff014ee8b2250c91c7109d5d0c8bb159","^6Y",["^ ","^6Z",null,"^6[",["^I",[]],"^70",["^10","^@","^8O","~$malli.transform","^W"]]],["^1K","goog/object/object.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^6Y",["^ ","^6Z",null,"^6[",["^I",[]],"^70",["^10"]]],["^1K","metabase/lib/schema/filter.cljc"],["0147dea423ebfd097bf1edb97f0325c9e2908a85","^6Y",["^ ","^6Z",null,"^6[",["^I",[]],"^70",["^10","^@","^73","^7E","^98","^7F","^7I"]]],["^1K","metabase/lib/native.cljc"],["85530fa16e09c868d29d428b1ee7479031807df9","^6Y",["^ ","^6Z",null,"^6[",["^I",[]],"^70",["^10","^@","~$metabase.domain-entities.converters","^7L","^78","^13","^R","^7C","~$metabase.lib.query","^72","^73","^74","^75","~$metabase.util.humanization","^76","^7I"]]],["^1K","goog/dom/asserts.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^6Y",["^ ","^6Z",null,"^6[",["^I",[]],"^70",["^10","^7J"]]],"~:SHADOW-TIMESTAMP",[1689947046000,1689947046000,1689947050000],["^1K","metabase/lib/ref.cljc"],["86a9fbeddec3e58f7bb54e61f5342658b370fb3b","^6Y",["^ ","^6Z",null,"^6[",["^I",[]],"^70",["^10","^@","^80","~$metabase.lib.schema.ref","^76"]]],["^1K","goog/math/long.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^6Y",["^ ","^6Z",null,"^6[",["^I",[]],"^70",["^10","^7J","^8B"]]],["^1K","goog/html/trustedresourceurl.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^6Y",["^ ","^6Z",null,"^6[",["^I",[]],"^70",["^10","^7J","~$goog.fs.blob","^84","~$goog.html.SafeScript","~$goog.html.trustedtypes","^86","^87"]]],["^1K","schema/spec/leaf.cljc"],["0dacc3066a87f33088c9a332b6c21e8b0560011c","^6Y",["^ ","^6Z",null,"^6[",["^I",[]],"^70",["^10","^@","^94"]]],["^1K","metabase/util/format.cljc"],["875f86a08288cb3ad5a6f15df988897eaf8613af","^6Y",["^ ","^6Z",null,"^6[",["^I",[]],"^70",["^10","^@","^7O"]]],["^1K","goog/math/irect.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^6Y",["^ ","^6Z",null,"^6[",["^I",[]],"^70",["^10"]]],["^1K","goog/math/box.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^6Y",["^ ","^6Z",null,"^6[",["^I",[]],"^70",["^10","^7J","^8?"]]],["^1K","metabase/shared/formatting/internal/numbers.cljs"],["efe49c9ffcc7bb82081aea64e55fd1a6b5038abc","^6Y",["^ ","^6Z",null,"^6[",["^I",[]],"^70",["^10","^@","^78","~$metabase.shared.formatting.internal.numbers-core","~$metabase.shared.util.currency","^W"]]],["^1K","metabase/lib/options.cljc"],["1870276153adf026e09a3e9ed1ba8beaad80e1c8","^6Y",["^ ","^6Z",null,"^6[",["^I",[]],"^70",["^10","^@","^73","^75","^W","^76"]]],["^1K","metabase/lib/field.cljc"],["65ccdbedd0d2c332e8e930fd31eede7c7014685e","^6Y",["^ ","^6Z",null,"^6[",["^I",[]],"^70",["^10","^@","^78","^13","^7Z","^8R","~$metabase.lib.card","^81","^8S","^12","^R","^71","^8U","^7C","^7D","^72","^73","^7R","^9C","^7F","^7G","^74","^75","~$metabase.shared.util.time","^W","^9A","^V","^76"]]],["^1K","metabase/lib/js/metadata.cljs"],["71d324d7775c46e04b45f7d57f9595318d01a629","^6Y",["^ ","^6Z",null,"^6[",["^I",[]],"^70",["^10","^@","~$clojure.core.protocols","^78","^91","^7W","^Z","^74","^W","^V"]]],["^1K","goog/string/internal.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^6Y",["^ ","^6Z",null,"^6[",["^I",[]],"^70",["^10"]]],["^1K","clojure/test/check.cljc"],["f33d988fd57bc9c11af1952db81c10f319c91416","^6Y",["^ ","^6Z",null,"^6[",["^I",[]],"^70",["^10","^@","^8K","^8M","^8Q","^8N","~$clojure.test.check.impl"]]],["^1K","goog/functions/functions.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^6Y",["^ ","^6Z",null,"^6[",["^I",[]],"^70",["^10"]]],["^1K","metabase/lib/metadata.cljc"],["a8652a185953ef0e0b1c77d5540a4aa7271c0c63","^6Y",["^ ","^6Z",null,"^6[",["^I",[]],"^70",["^10","^@","^Z","^73","^7R","^74","^76","^7I"]]],["^1K","goog/html/safestyle.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^6Y",["^ ","^6Z",null,"^6[",["^I",[]],"^70",["^10","^86","~$goog.html.SafeUrl","^87","^7J","^7<"]]],["^1K","goog/dom/safe.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^6Y",["^ ","^6Z",null,"^6[",["^I",[]],"^70",["^10","^7J","~$goog.asserts.dom","~$goog.dom.asserts","~$goog.functions","~$goog.html.SafeHtml","^9E","~$goog.html.SafeStyle","^9M","^85","~$goog.html.uncheckedconversions","^86","^7<"]]],["^1K","goog/asserts/dom.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^6Y",["^ ","^6Z",null,"^6[",["^I",[]],"^70",["^10","^8:","^7J","~$goog.dom.element"]]],["^1K","metabase/lib/core.cljc"],["6ff0e61ef4ba99d36f299edb9297161a41a807b8","^6Y",["^ ","^6Z",null,"^6[",["^I",[]],"^70",["^10","^@","^7Z","^8R","^7[","^9I","~$metabase.lib.column-group","^7A","~$metabase.lib.database","^8S","^8T","~$metabase.lib.filter","^12","~$metabase.lib.limit","^71","~$metabase.lib.metric","~$metabase.lib.native","^8U","~$metabase.lib.order-by","^9@","^7D","~$metabase.lib.remove-replace","~$metabase.lib.segment","^T","~$metabase.lib.table","^7G","~$metabase.shared.util.namespaces"]]],["^1K","medley/core.cljc"],["f5117fa4c15ff14c4a0ab7db414b0f102afb0b8a","^6Y",["^ ","^6Z",null,"^6[",["^I",[]],"^70",["^10","^@"]]],["^1K","clojure/walk.cljs"],["bc14df6666853ed869d7b88aaa864111c65d0c7f","^6Y",["^ ","^6Z",null,"^6[",["^I",[]],"^70",["^10","^@"]]],["^1K","goog/useragent/product.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^6Y",["^ ","^6Z",null,"^6[",["^I",[]],"^70",["^10","^8G","^8I","^8C"]]],["^1K","metabase/lib/metadata/protocols.cljc"],["f5c81e2cab09f5dabb3cab711f7db1c5df1b398d","^6Y",["^ ","^6Z",null,"^6[",["^I",[]],"^70",["^10","^@"]]],["^1K","metabase/lib/schema/expression/conditional.cljc"],["226c4623394b90853fcb014e9a95e84ffc8bd6db","^6Y",["^ ","^6Z",null,"^6[",["^I",[]],"^70",["^10","^@","^7L","^7E","^98","^7H","^7I"]]],["^1K","lambdaisland/glogi/console.cljs"],["76286836d4172602aa08006b2a754dda736ffe09","^6Y",["^ ","^6Z",null,"^6[",["^I",[]],"^70",["^10","^@","~$lambdaisland.glogi","~$lambdaisland.glogi.print","^7W","^7U"]]],["^1K","metabase/shared/formatting/numbers.cljc"],["de8b3f8bd2448079e930afa0a16faf5b2dff1534","^6Y",["^ ","^6Z",null,"^6[",["^I",[]],"^70",["^10","^@","~$metabase.shared.formatting.internal.numbers","^9G","^W"]]],["^1K","goog/date/date.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^6Y",["^ ","^6Z",null,"^6[",["^I",[]],"^70",["^10","^7J","~$goog.i18n.DateTimeSymbols","^7O"]]],["^1K","goog/html/safehtml.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^6Y",["^ ","^6Z",null,"^6[",["^I",[]],"^70",["^10","^86","^9E","^9R","^8=","^9M","^8:","^85","^87","^7J","^8G","^7V","^7W","^7<","~$goog.dom.tags","^9F"]]],["^1K","metabase/lib/column_group.cljc"],["ac334a4f303a185fee25d5666ea7d34f6c857ccf","^6Y",["^ ","^6Z",null,"^6[",["^I",[]],"^70",["^10","^@","^12","^R","^71","^73","^7R","^74","^76"]]],["^1K","metabase/lib/filter/operator.cljc"],["6b85a92dc1ffb19ca21aec66064d18564c2fbbc2","^6Y",["^ ","^6Z",null,"^6[",["^I",[]],"^70",["^10","^@","^R","^71","^73","~$metabase.lib.schema.filter","~$metabase.lib.types.isa","^75","^W","^76"]]],["^1K","goog/dom/tags.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^6Y",["^ ","^6Z",null,"^6[",["^I",[]],"^70",["^10","^7W"]]],["^1K","goog/math/size.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^6Y",["^ ","^6Z",null,"^6[",["^I",[]],"^70",["^10"]]],["^1K","metabase/lib/temporal_bucket.cljc"],["22c08818f6579bd329ece9f6a337c75bf33381e2","^6Y",["^ ","^6Z",null,"^6[",["^I",[]],"^70",["^10","^@","^78","^80","^7B","^71","^72","^73","^7F","^75","^76"]]],["^1K","malli/error.cljc"],["514c6f7d69d7e40b56fa75bfd1a49a683ca15982","^6Y",["^ ","^6Z",null,"^6[",["^I",[]],"^70",["^10","^@","^78","^8O","~$malli.util"]]],["^1K","metabase/lib/dispatch.cljc"],["914208cd51b78412eff1b402519bbb422845497a","^6Y",["^ ","^6Z",null,"^6[",["^I",[]],"^70",["^10","^@","^W"]]],["^1K","metabase/lib/js.cljs"],["97ab3fafa872eebb8be2dbd17b410cfea1d62e83","^6Y",["^ ","^6Z",null,"^6[",["^I",[]],"^70",["^10","^@","^13","^X","^1;","^12","^15","^R","^Z","^T","^17","^16","^W","^V"]]],["^1K","metabase/util/malli.cljc"],["0f9ba23be6bb9fa629617001e985b988d2322b17","^6Y",["^ ","^6Z",null,"^6[",["^I",[]],"^70",["^10","^@","^@","^8O","~$malli.destructure","~$malli.error","~$malli.generator","^:;","^75","^W"]]],["^1K","goog/labs/useragent/engine.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^6Y",["^ ","^6Z",null,"^6[",["^I",[]],"^70",["^10","^7V","^7<","^7="]]],["^1K","metabase/lib/query.cljc"],["67977f5ae965e05008d2cb243d9e4898404cb75b","^6Y",["^ ","^6Z",null,"^6[",["^I",[]],"^70",["^10","^@","^X","^80","^7B","^R","^71","^8U","^72","^7R","^74","^75","^V","^76"]]],["^1K","goog/fs/blob.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^6Y",["^ ","^6Z",null,"^6[",["^I",[]],"^70",["^10"]]],["^1K","cljs/reader.cljs"],["bc14df6666853ed869d7b88aaa864111c65d0c7f","^6Y",["^ ","^6Z",null,"^6[",["^I",[]],"^70",["^10","^@","^7W","^8Z","~$cljs.tools.reader.edn","^8["]]],["^1K","metabase/shared/formatting/internal/numbers_core.cljc"],["f66b4b98917cee5113ea423b71b7f98ae53d8f00","^6Y",["^ ","^6Z",null,"^6[",["^I",[]],"^70",["^10","^@","^9H"]]],["^1K","metabase/mbql/schema/helpers.cljc"],["b1f6002b97b59423b504abb666e13c9b0228b768","^6Y",["^ ","^6Z",null,"^6[",["^I",[]],"^70",["^10","^@","^78","^7H","~$schema.core"]]],["^1K","goog/dom/dom.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^6Y",["^ ","^6Z",null,"^6[",["^I",[]],"^70",["^10","^7V","^7J","^9N","~$goog.dom.BrowserFeature","^89","^8:","^8;","^9Q","^9S","^8?","^8A","^7W","^7O","^86","~$goog.string.Unicode","^8C"]]],["^1K","borkdude/dynaload.cljc"],["accd696ba364b850b4d92e38f5a34d0e828a0ad1","^6Y",["^ ","^6Z",null,"^6[",["^I",[]],"^70",["^10","^@"]]],["^1K","metabase/util/log.cljs"],["7d8a3bf01eb27c2ba7269dc90dc218e46bcc1d3a","^6Y",["^ ","^6Z",null,"^6[",["^I",[]],"^70",["^10","^@","^7T","^7O","^7Q","^:4","~$lambdaisland.glogi.console"]]],["^1K","goog/asserts/asserts.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^6Y",["^ ","^6Z",null,"^6[",["^I",[]],"^70",["^10","~$goog.debug.Error","^89"]]],["^1K","goog/debug/relativetimeprovider.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^6Y",["^ ","^6Z",null,"^6[",["^I",[]],"^70",["^10"]]],["^1K","malli/sci.cljc"],["514c6f7d69d7e40b56fa75bfd1a49a683ca15982","^6Y",["^ ","^6Z",null,"^6[",["^I",[]],"^70",["^10","^@","~$borkdude.dynaload"]]],["^1K","metabase/lib/schema/expression.cljc"],["f5c5c3ff3dc0f9a8b407cd7d06a68c6787061991","^6Y",["^ ","^6Z",null,"^6[",["^I",[]],"^70",["^10","^@","^80","^7B","^73","^75","^7H","^76","^7I"]]],["^1K","goog/math/rect.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^6Y",["^ ","^6Z",null,"^6[",["^I",[]],"^70",["^10","^7J","^8>","^8?","~$goog.math.IRect","^8A"]]],["^1K","flatland/ordered/map.cljs"],["3a9cb9d79e47d77ecd4f4d550371ecf01464c461","^6Y",["^ ","^6Z",null,"^6[",["^I",[]],"^70",["^10","^@"]]],["^1K","goog/uri/uri.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^6Y",["^ ","^6Z",null,"^6[",["^I",[]],"^70",["^10","^7V","^7J","~$goog.collections.maps","^7O","~$goog.structs","~$goog.uri.utils","~$goog.uri.utils.ComponentIndex","~$goog.uri.utils.StandardQueryParam"]]],["^1K","goog/i18n/cldrversion.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^6Y",["^ ","^6Z",null,"^6[",["^I",[]],"^70",["^10"]]],["^1K","metabase/util/malli/registry.cljc"],["921d4f259bbe54cbeb6b88ae56937df492bdfb5e","^6Y",["^ ","^6Z",null,"^6[",["^I",[]],"^70",["^10","^@","^8O","^8P","^:;"]]],["^1K","goog/labs/useragent/highentropy/highentropydata.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^6Y",["^ ","^6Z",null,"^6[",["^I",[]],"^70",["^10","^7>"]]],["^1K","metabase/types/coercion_hierarchies.cljc"],["c3d70ef6080e044d61f13ff6bfd76490e2dcd0ac","^6Y",["^ ","^6Z",null,"^6[",["^I",[]],"^70",["^10","^@","^7L"]]],["^1K","goog/collections/maps.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^6Y",["^ ","^6Z",null,"^6[",["^I",[]],"^70",["^10"]]],["^1K","metabase/lib/metadata/calculation.cljc"],["bbd3cc646a10312da5b543d7d353519f4c61f931","^6Y",["^ ","^6Z",null,"^6[",["^I",[]],"^70",["^10","^@","^78","^80","^7B","^R","^7C","^72","^73","^7E","^7F","^74","^75","^W","^V","^76","^7I"]]],["^1K","goog/debug/divconsole.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^6Y",["^ ","^6Z",null,"^6[",["^I",[]],"^70",["^10","~$goog.debug.HtmlFormatter","~$goog.dom.DomHelper","^8:","^8;","^9Q","^8=","^7T","^86","~$goog.style"]]],["^1K","schema/spec/collection.cljc"],["0dacc3066a87f33088c9a332b6c21e8b0560011c","^6Y",["^ ","^6Z",null,"^6[",["^I",[]],"^70",["^10","^@","^93","^94"]]],["^1K","malli/impl/util.cljc"],["514c6f7d69d7e40b56fa75bfd1a49a683ca15982","^6Y",["^ ","^6Z",null,"^6[",["^I",[]],"^70",["^10","^@"]]],["^1K","metabase/lib/schema/order_by.cljc"],["3f577f71e4ecba1aa1061f2228f6026ab45312ff","^6Y",["^ ","^6Z",null,"^6[",["^I",[]],"^70",["^10","^@","^7E","^98","^7I"]]],["^1K","schema/utils.cljc"],["0dacc3066a87f33088c9a332b6c21e8b0560011c","^6Y",["^ ","^6Z",null,"^6[",["^I",[]],"^70",["^10","^@","^7Q","^7W","^7O","^78"]]],["^1K","metabase/lib/schema/aggregation.cljc"],["ea4a70903cfc3ffeaa60ebdedb5ea00892da4dbe","^6Y",["^ ","^6Z",null,"^6[",["^I",[]],"^70",["^10","^@","^7B","^7E","^98","^75","^7I"]]],["^1K","cljs/core/match.cljs"],["f419c02deee501e9f4b29f81215ba81ffcefe9b6","^6Y",["^ ","^6Z",null,"^6[",["^I",[]],"^70",["^10","^@"]]],["^1K","goog/debug/fancywindow.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^6Y",["^ ","^6Z",null,"^6[",["^I",[]],"^70",["^10","^7V","^7J","~$goog.debug.DebugWindow","^:M","^8:","^8;","^9Q","^8=","^7T","^7W","^7O","^86","^8C"]]],["^1K","clojure/core/protocols.cljs"],["bc14df6666853ed869d7b88aaa864111c65d0c7f","^6Y",["^ ","^6Z",null,"^6[",["^I",[]],"^70",["^10","^@"]]],["^1K","malli/transform.cljc"],["514c6f7d69d7e40b56fa75bfd1a49a683ca15982","^6Y",["^ ","^6Z",null,"^6[",["^I",[]],"^70",["^10","^@","^8O","~$goog.date.UtcDateTime","^9:"]]],["^1K","metabase/util/humanization.cljc"],["ad72f0b43eef83db2dbcd9061adf044b3e8a6ba6","^6Y",["^ ","^6Z",null,"^6[",["^I",[]],"^70",["^10","^@","^78","^W"]]],["^1K","goog/debug/formatter.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^6Y",["^ ","^6Z",null,"^6[",["^I",[]],"^70",["^10","~$goog.debug","~$goog.debug.RelativeTimeProvider","^9Q","^9M","^9S","^7T","^86"]]],["^1K","metabase/shared/util/namespaces.cljs"],["00687008abd6eb291bc9d5ff1fff73210e0bbe6e","^6Y",["^ ","^6Z",null,"^6[",["^I",[]],"^70",["^10","^@"]]],["^1K","metabase/mbql/util/match/impl.cljc"],["4150e01975339d308f5cfedda77875eda19c030d","^6Y",["^ ","^6Z",null,"^6[",["^I",[]],"^70",["^10","^@"]]],["^1K","goog/fs/url.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^6Y",["^ ","^6Z",null,"^6[",["^I",[]],"^70",["^10"]]],["^1K","goog/base.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^6Y",["^ ","^6Z",null,"^6[",["^I",[]],"^70",[]]],["^1K","goog/structs/structs.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^6Y",["^ ","^6Z",null,"^6[",["^I",[]],"^70",["^10","^7V","^7W"]]],["^1K","cljs/tools/reader/impl/errors.cljs"],["927809dcb44fa726e4969d993e3e733636d95ebb","^6Y",["^ ","^6Z",null,"^6[",["^I",[]],"^70",["^10","^@","^8W","^78","~$cljs.tools.reader.impl.inspect"]]],["^1K","clojure/string.cljs"],["bc14df6666853ed869d7b88aaa864111c65d0c7f","^6Y",["^ ","^6Z",null,"^6[",["^I",[]],"^70",["^10","^@","^7O","^8["]]],["^1K","metabase/lib/table.cljc"],["be5e7b7f0d0a9285c6956aae732f593f526fdab2","^6Y",["^ ","^6Z",null,"^6[",["^I",[]],"^70",["^10","^@","^12","^R","^71","^74","^75","^W","^9A"]]],["^1K","metabase/lib/metric.cljc"],["e48b1735ec41d16a77c4937dbcac371339682dcc","^6Y",["^ ","^6Z",null,"^6[",["^I",[]],"^70",["^10","^@","^X","^R","^71","^Z","^7D","^72","^7E","^7R","^74","^16","^75","^76"]]],["^1K","metabase/lib/schema/temporal_bucketing.cljc"],["9cb7bba3e46e1de2fbb37d61df332336da6d9f66","^6Y",["^ ","^6Z",null,"^6[",["^I",[]],"^70",["^10","^@","^7L","^7I"]]],["^1K","metabase/lib/normalize.cljc"],["a044c97fb2dfb3e38178783d6a5d41777a3a9224","^6Y",["^ ","^6Z",null,"^6[",["^I",[]],"^70",["^10","^@","^80","^7B"]]],["^1K","metabase/util.cljc"],["2eb945a6741f1450ecac08a9087b862ce52b9e3a","^6Y",["^ ","^6Z",null,"^6[",["^I",[]],"^70",["^10","^@","~$camel-snake-kebab.internals.macros","~$clojure.data","^D","^7L","^78","^91","~$flatland.ordered.map","^13","^75","^:3","~$metabase.util.format","^V","~$net.cgrand.macrovich","~$weavejester.dependency"]]],["^1K","clojure/test/check/random/longs/bit_count_impl.cljs"],["f33d988fd57bc9c11af1952db81c10f319c91416","^6Y",["^ ","^6Z",null,"^6[",["^I",[]],"^70",["^10","^@"]]],["^1K","no/en/core.cljc"],["46f67eeb6381165553708d8db01fec220d5f7054","^6Y",["^ ","^6Z",null,"^6[",["^I",[]],"^70",["^10","^@","^78","~$cljs.reader","~$goog.crypt.base64"]]],["^1K","malli/impl/regex.cljc"],["514c6f7d69d7e40b56fa75bfd1a49a683ca15982","^6Y",["^ ","^6Z",null,"^6[",["^I",[]],"^70",["^10","^@","^92"]]],["^1K","camel_snake_kebab/internals/macros.cljc"],["5ae08f83ceb8959971e6334596bff0214bf6fdf2","^6Y",["^ ","^6Z",null,"^6[",["^I",[]],"^70",["^10","^@","~$camel-snake-kebab.internals.alter-name","~$camel-snake-kebab.internals.misc"]]],["^1K","metabase/lib/schema/expression/temporal.cljc"],["f1f22c1655e7d335b884a22b010f2b8b08ad1e94","^6Y",["^ ","^6Z",null,"^6[",["^I",[]],"^70",["^10","^@","^7L","^8O","^7B","^73","^7E","~$metabase.lib.schema.literal","^98","^7F","^7I","^8E","^8F"]]],["^1K","goog/string/string.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^6Y",["^ ","^6Z",null,"^6[",["^I",[]],"^70",["^10","^8;","^9S","^86","^7<"]]],["^1K","schema/core.cljc"],["0dacc3066a87f33088c9a332b6c21e8b0560011c","^6Y",["^ ","^6Z",null,"^6[",["^I",[]],"^70",["^10","^@","^78","^93","^94","~$schema.spec.leaf","~$schema.spec.variant","~$schema.spec.collection"]]],["^1K","metabase/mbql/schema.cljc"],["c51bf2a180ecbc12d6a1cd42a4049323f46a0085","^6Y",["^ ","^6Z",null,"^6[",["^I",[]],"^70",["^10","^@","^8E","^8F","^@","^7L","~$metabase.mbql.schema.helpers","~$metabase.mbql.schema.macros","^:@"]]],["^1K","metabase/mbql/util/match.cljs"],["d65aaa9fbcb7960b90ba7ca97258b1dc8a40be2b","^6Y",["^ ","^6Z",null,"^6[",["^I",[]],"^70",["^10","^@","^F","~$metabase.mbql.util.match.impl"]]],["^1K","malli/core.cljc"],["514c6f7d69d7e40b56fa75bfd1a49a683ca15982","^6Y",["^ ","^6Z",null,"^6[",["^I",[]],"^70",["^10","^@","^@","~$malli.impl.regex","^92","^8P","~$malli.sci"]]],["^1K","metabase/lib/remove_replace.cljc"],["813516f13e50f2e20c5c6f88102ed7e7c56cb5b7","^6Y",["^ ","^6Z",null,"^6[",["^I",[]],"^70",["^10","^@","^7L","^13","^7A","^12","^71","^7C","^74","^83","^W","^76"]]],["^1K","metabase/lib/schema.cljc"],["122fe4013d55087fc7287141eb7dc6f630436424","^6Y",["^ ","^6Z",null,"^6[",["^I",[]],"^70",["^10","^@","~$metabase.lib.schema.aggregation","^73","^7E","~$metabase.lib.schema.expression.arithmetic","~$metabase.lib.schema.expression.conditional","~$metabase.lib.schema.expression.string","~$metabase.lib.schema.expression.temporal","^:9","^7R","~$metabase.lib.schema.join","^;2","^82","^9C","~$metabase.lib.schema.template-tag","~$metabase.lib.schema.util","^83","^7I"]]],["^1K","clojure/data.cljs"],["bc14df6666853ed869d7b88aaa864111c65d0c7f","^6Y",["^ ","^6Z",null,"^6[",["^I",[]],"^70",["^10","^@","^7L"]]],["^1K","goog/reflect/reflect.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^6Y",["^ ","^6Z",null,"^6[",["^I",[]],"^70",["^10"]]],["^1K","goog/labs/useragent/util.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^6Y",["^ ","^6Z",null,"^6[",["^I",[]],"^70",["^10","^7<","^7@"]]],["^1K","metabase/lib/card.cljc"],["f3d7e32c01668fba6d10a6d5ef7f6a94623126e9","^6Y",["^ ","^6Z",null,"^6[",["^I",[]],"^70",["^10","^@","^X","^R","^71","^9@","^7R","^74","^75","^W","^9A","^76"]]],["^1K","goog/debug/debug.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^6Y",["^ ","^6Z",null,"^6[",["^I",[]],"^70",["^10","^7V","~$goog.debug.errorcontext"]]],["^1K","goog/string/stringbuffer.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^6Y",["^ ","^6Z",null,"^6[",["^I",[]],"^70",["^10"]]],["^1K","schema/spec/core.cljc"],["0dacc3066a87f33088c9a332b6c21e8b0560011c","^6Y",["^ ","^6Z",null,"^6[",["^I",[]],"^70",["^10","^@","^93"]]],["^8D","ttag"],["^7:","shadow.js.shim.module$ttag.js","require","^6Y",["^ ","^6Z",null,"^6[",["^I",[]],"^70",["^10"]]],["^1K","goog/math/coordinate.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^6Y",["^ ","^6Z",null,"^6[",["^I",[]],"^70",["^10","~$goog.math"]]],["^1K","goog/debug/errorcontext.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^6Y",["^ ","^6Z",null,"^6[",["^I",[]],"^70",["^10"]]],["^1K","cljs/tools/reader/reader_types.cljs"],["927809dcb44fa726e4969d993e3e733636d95ebb","^6Y",["^ ","^6Z",null,"^6[",["^I",[]],"^70",["^10","^@","^8X","^7O","^8["]]],["^1K","inflections/core.cljc"],["e6e3e2ec7855d2e49589935dde6e494c75e7673f","^6Y",["^ ","^6Z",null,"^6[",["^I",[]],"^70",["^10","^@","^78","^91","~$no.en.core"]]],["^1K","metabase/lib/convert.cljc"],["02b5f0cb2d10c8707d14831510e21c7d65dc15b4","^6Y",["^ ","^6Z",null,"^6[",["^I",[]],"^70",["^10","^@","^:U","^7L","^78","^8O","^:=","^13","^80","^7B","^7C","^72","^7E","^74","^W","^V"]]],["^1K","goog/labs/useragent/useragent.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^6Y",["^ ","^6Z",null,"^6[",["^I",[]],"^70",["^10","~$goog.flags"]]],["^1K","goog/dom/element.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^6Y",["^ ","^6Z",null,"^6[",["^I",[]],"^70",["^10","^89","^8:"]]],["^1K","metabase/lib/join.cljc"],["239ae05e663e7e3d4aaba19cf702d125ffda0dc8","^6Y",["^ ","^6Z",null,"^6[",["^I",[]],"^70",["^10","^@","^78","~$inflections.core","^13","^7A","^80","^81","^9W","~$metabase.lib.filter.operator","^7B","^R","^71","^7C","^9@","^7D","^72","^73","^7E","^:9","^;@","^::","^74","^83","^75","^W","^76"]]],["^1K","goog/html/uncheckedconversions.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^6Y",["^ ","^6Z",null,"^6[",["^I",[]],"^70",["^10","^7J","^9Q","^9E","^9R","^8=","^9M","^85","^86","^7<"]]],["^1K","metabase/lib/aggregation.cljc"],["69e5afb14bf9268c61c5028c24d98c80e02109fa","^6Y",["^ ","^6Z",null,"^6[",["^I",[]],"^70",["^10","^@","^13","^7A","^80","^81","^7B","^R","^71","^7C","^7D","^72","^;;","^73","^7G","^::","^74","^75","^W","^76"]]],["^1K","goog/debug/debugwindow.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^6Y",["^ ","^6Z",null,"^6[",["^I",[]],"^70",["^10","^:L","^8;","^9Q","^8=","^7T","^86","~$goog.structs.CircularBuffer","^8C"]]],["^1K","metabase/mbql/util.cljc"],["2532d5faa94d2a89dd06e529c641d594e298e2aa","^6Y",["^ ","^6Z",null,"^6[",["^I",[]],"^70",["^10","^@","^78","~$metabase.mbql.predicates","^97","^;6","^83","^75","^:@"]]],["^1K","cljs/tools/reader/impl/commons.cljs"],["927809dcb44fa726e4969d993e3e733636d95ebb","^6Y",["^ ","^6Z",null,"^6[",["^I",[]],"^70",["^10","^@","^8V","^8W","^8X"]]],["^1K","metabase/lib/types/isa.cljc"],["e18ef4b76ca36474693ff48f933bf55296452722","^6Y",["^ ","^6Z",null,"^6[",["^I",[]],"^70",["^10","^@","^13","~$metabase.lib.types.constants","^74","^7H"]]],["^1K","goog/dom/htmlelement.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^6Y",["^ ","^6Z",null,"^6[",["^I",[]],"^70",["^10"]]],["^1K","cljs/core.cljs"],["bc14df6666853ed869d7b88aaa864111c65d0c7f","^6Y",["^ ","^6Z",null,"^6[",["^I",[]],"^70",["^10","~$goog.math.Long","~$goog.math.Integer","^7O","^7W","^7V","^7N","^8["]]],["^1K","goog/html/safescript.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^6Y",["^ ","^6Z",null,"^6[",["^I",[]],"^70",["^10","^86","^87","^9F","^7J"]]],["^1K","clojure/test/check/random/longs.cljs"],["f33d988fd57bc9c11af1952db81c10f319c91416","^6Y",["^ ","^6Z",null,"^6[",["^I",[]],"^70",["^10","^@","~$clojure.test.check.random.longs.bit-count-impl","^;L","^@"]]],["^1K","goog/log/log.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^6Y",["^ ","^6Z",null,"^6[",["^I",[]],"^70",["^10","^7J","^:Q"]]],["^1K","goog/async/throwexception.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^6Y",["^ ","^6Z",null,"^6[",["^I",[]],"^70",["^10"]]],["^1K","camel_snake_kebab/internals/alter_name.cljc"],["5ae08f83ceb8959971e6334596bff0214bf6fdf2","^6Y",["^ ","^6Z",null,"^6[",["^I",[]],"^70",["^10","^@"]]],["^1K","metabase/mbql/normalize.cljc"],["04b18b0536de1d93ec656a5ad86e2fe4fdee0540","^6Y",["^ ","^6Z",null,"^6[",["^I",[]],"^70",["^10","^@","^7L","^91","^13","^7S","^83","^75","^V"]]],["^1K","goog/html/safestylesheet.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^6Y",["^ ","^6Z",null,"^6[",["^I",[]],"^70",["^10","^86","^9R","^87","^7W","^7J","^7<"]]],["^1K","goog/math/integer.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^6Y",["^ ","^6Z",null,"^6[",["^I",[]],"^70",["^10","^8B"]]],["^1K","goog/debug/console.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^6Y",["^ ","^6Z",null,"^6[",["^I",[]],"^70",["^10","~$goog.debug.TextFormatter","^7T"]]],["^1K","lambdaisland/glogi/print.cljs"],["76286836d4172602aa08006b2a754dda736ffe09","^6Y",["^ ","^6Z",null,"^6[",["^I",[]],"^70",["^10","^@","^:4","^7W"]]],["^1K","goog/dom/browserfeature.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^6Y",["^ ","^6Z",null,"^6[",["^I",[]],"^70",["^10","^8C"]]],["^1K","metabase/shared/util/internal/time.cljs"],["f92eec2c1c2703a1da00865534752f78d04a0561","^6Y",["^ ","^6Z",null,"^6[",["^I",[]],"^70",["^10","^@","^8E","~$metabase.shared.util.internal.time-common"]]],["^1K","clojure/set.cljs"],["bc14df6666853ed869d7b88aaa864111c65d0c7f","^6Y",["^ ","^6Z",null,"^6[",["^I",[]],"^70",["^10","^@"]]],["^1K","goog/uri/utils.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^6Y",["^ ","^6Z",null,"^6[",["^I",[]],"^70",["^10","^7J","^7O"]]],["^1K","goog/string/const.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^6Y",["^ ","^6Z",null,"^6[",["^I",[]],"^70",["^10","^7J","^87"]]],["^1K","metabase/lib/schema/id.cljc"],["7cdfc70702a9a9e04b75ca7c9dc898ddf546f99d","^6Y",["^ ","^6Z",null,"^6[",["^I",[]],"^70",["^10","^@","^73","^97","^7I"]]],["^1K","metabase/lib/equality.cljc"],["09e4ca6749d64c174c277a2b16f7ad15b5cf6870","^6Y",["^ ","^6Z",null,"^6[",["^I",[]],"^70",["^10","^@","^13","^80","^7B","^R","^7C","^74","^83"]]],["^1K","goog/dom/vendor.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^6Y",["^ ","^6Z",null,"^6[",["^I",[]],"^70",["^10","^7O","^8C"]]],["^1K","metabase/lib/filter.cljc"],["9834af342c05e488751df884eca79c07eb56f0d2","^6Y",["^ ","^6Z",null,"^6[",["^I",[]],"^70",["^10","^@","^78","^13","^7A","^81","^;H","^7B","^R","^71","^7C","^7D","^72","^7E","^:9","^7G","^74","^75","^76"]]],["^1K","metabase/lib/schema/literal.cljc"],["f8f31bfaef820ab25b896b49fd404b937d0df64e","^6Y",["^ ","^6Z",null,"^6[",["^I",[]],"^70",["^10","^@","^8O","^73","^7E","^98","^7I"]]],["^1K","metabase/lib/hierarchy.cljc"],["c9d228603522de5c85546fb645c59736d4eb94d2","^6Y",["^ ","^6Z",null,"^6[",["^I",[]],"^70",["^10","^@"]]],["^1K","metabase/mbql/predicates.cljc"],["20ab1a5ccd943c35c646c5f7396ea40f9bfa7ac4","^6Y",["^ ","^6Z",null,"^6[",["^I",[]],"^70",["^10","^@","^97","^:@"]]],["^1K","clojure/test/check/results.cljc"],["f33d988fd57bc9c11af1952db81c10f319c91416","^6Y",["^ ","^6Z",null,"^6[",["^I",[]],"^70",["^10","^@"]]],["^8D","crc-32"],["^7P","shadow.js.shim.module$crc_32.js","require","^6Y",["^ ","^6Z",null,"^6[",["^I",[]],"^70",["^10"]]],["^1K","metabase/lib/database.cljc"],["b145656d0293eff5d0bfc5ef4fdabbb849814b2a","^6Y",["^ ","^6Z",null,"^6[",["^I",[]],"^70",["^10","^@","^R","^72","^7R","^74","^97","^76"]]],["^1K","metabase/lib/schema/join.cljc"],["924e0ca4abbab776fa05357d6d22bafb8a596648","^6Y",["^ ","^6Z",null,"^6[",["^I",[]],"^70",["^10","^@","^73","^7E","^75","^7I"]]],["^1K","metabase/shared/util/time.cljc"],["09f2b7188b5a59daedb8b53670f692c598e5d2a4","^6Y",["^ ","^6Z",null,"^6[",["^I",[]],"^70",["^10","^@","~$metabase.shared.util.internal.time","^;P","^:3","^W"]]],["^1K","goog/crypt/base64.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^6Y",["^ ","^6Z",null,"^6[",["^I",[]],"^70",["^10","^7J","~$goog.crypt","^7<","^8C","~$goog.userAgent.product"]]]]],"~:clj-info",["^ ","jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/analyzer/impl.cljc",1689947050000,"jar:file:/root/.m2/repository/instaparse/instaparse/1.4.12/instaparse-1.4.12.jar!/instaparse/line_col.clj",1689946146000,"jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/source_map/base64_vlq.clj",1689947050000,"jar:file:/root/.m2/repository/instaparse/instaparse/1.4.12/instaparse-1.4.12.jar!/instaparse/viz.clj",1689946146000,"jar:file:/root/.m2/repository/org/clojure/tools.namespace/1.4.4/tools.namespace-1.4.4.jar!/clojure/tools/namespace/parse.cljc",1689946139000,"jar:file:/root/.m2/repository/weavejester/dependency/0.2.1/dependency-0.2.1.jar!/weavejester/dependency.cljc",1689946093000,"jar:file:/root/.m2/repository/instaparse/instaparse/1.4.12/instaparse-1.4.12.jar!/instaparse/transform.clj",1689946146000,"file:/home/gmrworkspace/dashboard/src/metabase/lib/schema/order_by.cljc",1690286812000,"jar:file:/root/.m2/repository/ring/ring-codec/1.2.0/ring-codec-1.2.0.jar!/ring/util/codec.clj",1689946172000,"file:/home/gmrworkspace/dashboard/src/metabase/lib/hierarchy.cljc",1690286812000,"jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/instant.clj",1689947050000,"jar:file:/root/.m2/repository/org/clojure/tools.reader/1.3.6/tools.reader-1.3.6.jar!/clojure/tools/reader/default_data_readers.clj",1689946174000,"file:/home/gmrworkspace/dashboard/src/metabase/models/dispatch.clj",1690286812000,"jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/pprint.cljc",1689947050000,"file:/home/gmrworkspace/dashboard/src/metabase/lib/schema/filter.cljc",1690286812000,"file:/home/gmrworkspace/dashboard/shared/src/metabase/mbql/util.cljc",1692013156305,"jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/externs.clj",1689947050000,"file:/home/gmrworkspace/dashboard/shared/src/metabase/mbql/util/match.clj",1690286812000,"jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/vendor/clojure/tools/reader/default_data_readers.clj",1689947050000,"file:/home/gmrworkspace/dashboard/shared/src/metabase/mbql/schema/helpers.cljc",1692013156305,"jar:file:/root/.m2/repository/prismatic/schema/1.4.1/schema-1.4.1.jar!/schema/core.cljc",1689946172000,"file:/home/gmrworkspace/dashboard/shared/src/metabase/shared/util/i18n.clj",1690286812000,"jar:file:/root/.m2/repository/org/clojure/tools.reader/1.3.6/tools.reader-1.3.6.jar!/clojure/tools/reader/edn.clj",1689946174000,"jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/compiler.cljc",1689947050000,"jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/reader.clj",1689947050000,"jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/env.cljc",1689947050000,"jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/analyzer/impl/namespaces.cljc",1689947050000,"file:/home/gmrworkspace/dashboard/src/metabase/lib/metadata.cljc",1690286812000,"jar:file:/root/.m2/repository/prismatic/schema/1.4.1/schema-1.4.1.jar!/schema/macros.clj",1689946172000,"file:/home/gmrworkspace/dashboard/src/metabase/util/i18n/plural.clj",1690286813000,"jar:file:/root/.m2/repository/metosin/malli/0.10.2/malli-0.10.2.jar!/malli/core.cljc",1689946170000,"jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/source_map.clj",1689947050000,"jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/util.cljc",1689947050000,"file:/home/gmrworkspace/dashboard/src/metabase/util.cljc",1690286813000,"jar:file:/root/.m2/repository/nano-id/nano-id/1.0.0/nano-id-1.0.0.jar!/nano_id/core.cljc",1689946171000,"file:/home/gmrworkspace/dashboard/src/metabase/lib/dispatch.cljc",1690286812000,"jar:file:/root/.m2/repository/io/github/camsaul/toucan2/1.0.520/toucan2-1.0.520.jar!/toucan2/core.clj",1689946166000,"file:/home/gmrworkspace/dashboard/src/metabase/lib/schema/common.cljc",1690286812000,"file:/home/gmrworkspace/dashboard/src/metabase/plugins/classloader.clj",1692013156125,"jar:file:/root/.m2/repository/medley/medley/1.4.0/medley-1.4.0.jar!/medley/core.cljc",1689946185000,"jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/analyzer.cljc",1689947050000,"file:/home/gmrworkspace/dashboard/src/metabase/lib/schema/util.cljc",1690286812000,"jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/analyzer/passes.cljc",1689947050000,"jar:file:/root/.m2/repository/org/clojure/test.check/1.1.1/test.check-1.1.1.jar!/clojure/test/check/random.clj",1689946177000,"jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/vendor/clojure/data/json.clj",1689947050000,"file:/home/gmrworkspace/dashboard/src/metabase/util/format.cljc",1690286813000,"file:/home/gmrworkspace/dashboard/src/metabase/lib/temporal_bucket.cljc",1690286812000,"jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/source_map/base64.clj",1689947050000,"jar:file:/root/.m2/repository/riddley/riddley/0.2.0/riddley-0.2.0.jar!/riddley/walk.clj",1689946160000,"file:/home/gmrworkspace/dashboard/src/metabase/lib/schema/ref.cljc",1690286812000,"jar:file:/root/.m2/repository/instaparse/instaparse/1.4.12/instaparse-1.4.12.jar!/instaparse/reduction.clj",1689946146000,"jar:file:/root/.m2/repository/org/tcrawley/dynapath/1.1.0/dynapath-1.1.0.jar!/dynapath/util.clj",1689946174000,"jar:file:/root/.m2/repository/camel-snake-kebab/camel-snake-kebab/0.4.3/camel-snake-kebab-0.4.3.jar!/camel_snake_kebab/internals/macros.cljc",1689946178000,"file:/home/gmrworkspace/dashboard/shared/src/metabase/mbql/util/match/impl.cljc",1690286812000,"jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/vendor/clojure/tools/reader/reader_types.clj",1689947050000,"jar:file:/root/.m2/repository/instaparse/instaparse/1.4.12/instaparse-1.4.12.jar!/instaparse/auto_flatten_seq.clj",1689946146000,"jar:file:/root/.m2/repository/instaparse/instaparse/1.4.12/instaparse-1.4.12.jar!/instaparse/core.clj",1689946146000,"jar:file:/root/.m2/repository/metosin/malli/0.10.2/malli-0.10.2.jar!/malli/generator.cljc",1689946170000,"file:/home/gmrworkspace/dashboard/src/metabase/lib/schema/id.cljc",1690286812000,"jar:file:/root/.m2/repository/org/clojure/core.cache/1.0.225/core.cache-1.0.225.jar!/clojure/core/cache.clj",1689946183000,"file:/home/gmrworkspace/dashboard/src/metabase/lib/schema/expression.cljc",1690286812000,"jar:file:/root/.m2/repository/metosin/malli/0.10.2/malli-0.10.2.jar!/malli/sci.cljc",1689946170000,"jar:file:/root/.m2/repository/potemkin/potemkin/0.4.6/potemkin-0.4.6.jar!/potemkin/types.clj",1689946176000,"file:/home/gmrworkspace/dashboard/src/metabase/lib/schema/template_tag.cljc",1690286812000,"jar:file:/root/.m2/repository/org/clojure/test.check/1.1.1/test.check-1.1.1.jar!/clojure/test/check/properties.cljc",1689946177000,"jar:file:/root/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/set.clj",1689946092000,"jar:file:/root/.m2/repository/org/clojure/math.numeric-tower/0.0.5/math.numeric-tower-0.0.5.jar!/clojure/math/numeric_tower.clj",1689946148000,"jar:file:/root/.m2/repository/net/cgrand/macrovich/0.2.1/macrovich-0.2.1.jar!/net/cgrand/macrovich.cljc",1689946165000,"jar:file:/root/.m2/repository/colorize/colorize/0.1.1/colorize-0.1.1.jar!/colorize/core.clj",1689946104000,"jar:file:/root/.m2/repository/borkdude/dynaload/0.3.5/dynaload-0.3.5.jar!/borkdude/dynaload.cljc",1689946165000,"jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/vendor/clojure/tools/reader/impl/inspect.clj",1689947050000,"file:/home/gmrworkspace/dashboard/src/metabase/lib/options.cljc",1692013156125,"jar:file:/root/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/string.clj",1689946092000,"jar:file:/root/.m2/repository/potemkin/potemkin/0.4.6/potemkin-0.4.6.jar!/potemkin.clj",1689946176000,"jar:file:/root/.m2/repository/instaparse/instaparse/1.4.12/instaparse-1.4.12.jar!/instaparse/failure.clj",1689946146000,"jar:file:/root/.m2/repository/prismatic/schema/1.4.1/schema-1.4.1.jar!/schema/spec/variant.cljc",1689946172000,"jar:file:/root/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/core.clj",1689946092000,"file:/home/gmrworkspace/dashboard/src/metabase/lib/metadata/protocols.cljc",1690286812000,"file:/home/gmrworkspace/dashboard/src/metabase/util/i18n/impl.clj",1692013156125,"file:/home/gmrworkspace/dashboard/src/metabase/lib/metadata/calculation.cljc",1690286812000,"jar:file:/root/.m2/repository/org/clojure/tools.namespace/1.4.4/tools.namespace-1.4.4.jar!/clojure/tools/namespace/dependency.cljc",1689946139000,"jar:file:/root/.m2/repository/prismatic/schema/1.4.1/schema-1.4.1.jar!/schema/spec/leaf.cljc",1689946172000,"jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/analyzer/passes/and_or.cljc",1689947050000,"jar:file:/root/.m2/repository/org/clojure/test.check/1.1.1/test.check-1.1.1.jar!/clojure/test/check.cljc",1689946177000,"file:/home/gmrworkspace/dashboard/src/metabase/lib/util.cljc",1690286812000,"jar:file:/root/.m2/repository/riddley/riddley/0.2.0/riddley-0.2.0.jar!/riddley/compiler.clj",1689946160000,"file:/home/gmrworkspace/dashboard/shared/src/metabase/mbql/predicates.cljc",1690286812000,"file:/home/gmrworkspace/dashboard/src/metabase/lib/types/constants.cljc",1690286812000,"jar:file:/root/.m2/repository/org/clojure/core.memoize/1.0.257/core.memoize-1.0.257.jar!/clojure/core/memoize.clj",1689946178000,"jar:file:/root/.m2/repository/metosin/malli/0.10.2/malli-0.10.2.jar!/malli/destructure.cljc",1689946170000,"jar:file:/root/.m2/repository/instaparse/instaparse/1.4.12/instaparse-1.4.12.jar!/instaparse/print.clj",1689946146000,"jar:file:/root/.m2/repository/org/clojure/tools.namespace/1.4.4/tools.namespace-1.4.4.jar!/clojure/tools/namespace/track.cljc",1689946139000,"file:/home/gmrworkspace/dashboard/src/metabase/lib/schema/aggregation.cljc",1690286812000,"jar:file:/root/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/pprint.clj",1689946092000,"jar:file:/root/.m2/repository/org/clojure/java.classpath/1.0.0/java.classpath-1.0.0.jar!/clojure/java/classpath.clj",1689946162000,"file:/home/gmrworkspace/dashboard/src/metabase/lib/equality.cljc",1690286812000,"jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/js_deps.cljc",1689947050000,"jar:file:/root/.m2/repository/metosin/malli/0.10.2/malli-0.10.2.jar!/malli/impl/regex.cljc",1689946170000,"jar:file:/root/.m2/repository/cheshire/cheshire/5.11.0/cheshire-5.11.0.jar!/cheshire/factory.clj",1689946173000,"jar:file:/root/.m2/repository/org/clojure/tools.reader/1.3.6/tools.reader-1.3.6.jar!/clojure/tools/reader/impl/errors.clj",1689946174000,"jar:file:/root/.m2/repository/metosin/malli/0.10.2/malli-0.10.2.jar!/malli/experimental.cljc",1689946170000,"jar:file:/root/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/walk.clj",1689946092000,"jar:file:/root/.m2/repository/org/clojure/tools.reader/1.3.6/tools.reader-1.3.6.jar!/clojure/tools/reader.clj",1689946174000,"file:/home/gmrworkspace/dashboard/src/metabase/lib/common.cljc",1690286812000,"jar:file:/root/.m2/repository/prismatic/schema/1.4.1/schema-1.4.1.jar!/schema/spec/core.cljc",1689946172000,"jar:file:/root/.m2/repository/org/clojure/test.check/1.1.1/test.check-1.1.1.jar!/clojure/test/check/generators.cljc",1689946177000,"jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/core.cljc",1689947050000,"jar:file:/root/.m2/repository/cheshire/cheshire/5.11.0/cheshire-5.11.0.jar!/cheshire/generate.clj",1689946173000,"jar:file:/root/.m2/repository/metosin/malli/0.10.2/malli-0.10.2.jar!/malli/experimental/time.cljc",1689946170000,"jar:file:/root/.m2/repository/org/clojure/tools.reader/1.3.6/tools.reader-1.3.6.jar!/clojure/tools/reader/reader_types.clj",1689946174000,"file:/home/gmrworkspace/dashboard/shared/src/metabase/mbql/schema.cljc",1692013156305,"jar:file:/root/.m2/repository/cheshire/cheshire/5.11.0/cheshire-5.11.0.jar!/cheshire/parse.clj",1689946173000,"file:/home/gmrworkspace/dashboard/src/metabase/util/i18n.clj",1692013156125,"jar:file:/root/.m2/repository/instaparse/instaparse/1.4.12/instaparse-1.4.12.jar!/instaparse/cfg.clj",1689946146000,"file:/home/gmrworkspace/dashboard/src/metabase/lib/filter/operator.cljc",1690286812000,"jar:file:/root/.m2/repository/cheshire/cheshire/5.11.0/cheshire-5.11.0.jar!/cheshire/core.clj",1689946173000,"jar:file:/root/.m2/repository/metosin/malli/0.10.2/malli-0.10.2.jar!/malli/impl/util.cljc",1689946170000,"jar:file:/root/.m2/repository/metosin/malli/0.10.2/malli-0.10.2.jar!/malli/registry.cljc",1689946170000,"jar:file:/root/.m2/repository/instaparse/instaparse/1.4.12/instaparse-1.4.12.jar!/instaparse/gll.clj",1689946146000,"jar:file:/root/.m2/repository/metosin/malli/0.10.2/malli-0.10.2.jar!/malli/instrument.clj",1689946170000,"jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/vendor/clojure/tools/reader.clj",1689947050000,"jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/spec/gen/alpha.cljc",1689947050000,"file:/home/gmrworkspace/dashboard/src/metabase/lib/ref.cljc",1690286812000,"file:/home/gmrworkspace/dashboard/src/metabase/lib/types/isa.cljc",1690286812000,"jar:file:/root/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/edn.clj",1689946092000,"jar:file:/root/.m2/repository/nano-id/nano-id/1.0.0/nano-id-1.0.0.jar!/nano_id/random.cljc",1689946171000,"file:/home/gmrworkspace/dashboard/src/metabase/lib/filter.cljc",1690286812000,"jar:file:/root/.m2/repository/environ/environ/1.2.0/environ-1.2.0.jar!/environ/core.cljc",1689946163000,"jar:file:/root/.m2/repository/prismatic/schema/1.4.1/schema-1.4.1.jar!/schema/spec/collection.cljc",1689946172000,"jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/vendor/clojure/tools/reader/impl/errors.clj",1689947050000,"jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/tagged_literals.cljc",1689947050000,"file:/home/gmrworkspace/dashboard/src/metabase/lib/schema.cljc",1692013156125,"jar:file:/root/.m2/repository/instaparse/instaparse/1.4.12/instaparse-1.4.12.jar!/instaparse/repeat.clj",1689946146000,"jar:file:/root/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/java/io.clj",1689946092000,"jar:file:/root/.m2/repository/org/clojure/test.check/1.1.1/test.check-1.1.1.jar!/clojure/test/check/results.cljc",1689946177000,"jar:file:/root/.m2/repository/com/lambdaisland/glogi/1.2.164/glogi-1.2.164.jar!/lambdaisland/glogi.clj",1689947043000,"jar:file:/root/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/instant.clj",1689946092000,"file:/home/gmrworkspace/dashboard/shared/src/metabase/shared/util/namespaces.clj",1690286812000,"jar:file:/root/.m2/repository/org/clojure/tools.namespace/1.4.4/tools.namespace-1.4.4.jar!/clojure/tools/namespace/file.clj",1689946139000,"jar:file:/root/.m2/repository/org/clojure/core.match/1.0.1/core.match-1.0.1.jar!/cljs/core/match.clj",1689946174000,"jar:file:/root/.m2/repository/org/clojure/spec.alpha/0.3.218/spec.alpha-0.3.218.jar!/clojure/spec/gen/alpha.clj",1689946117000,"file:/home/gmrworkspace/dashboard/src/metabase/lib/schema/join.cljc",1690286812000,"jar:file:/root/.m2/repository/metosin/malli/0.10.2/malli-0.10.2.jar!/malli/error.cljc",1689946170000,"file:/home/gmrworkspace/dashboard/shared/src/metabase/mbql/schema/macros.clj",1690286812000,"jar:file:/root/.m2/repository/prismatic/schema/1.4.1/schema-1.4.1.jar!/schema/utils.cljc",1689946172000,"file:/home/gmrworkspace/dashboard/src/metabase/util/malli/registry.cljc",1690286813000,"file:/home/gmrworkspace/dashboard/src/metabase/config.clj",1692013154929,"file:/home/gmrworkspace/dashboard/src/metabase/util/log.clj",1690286813000,"file:/home/gmrworkspace/dashboard/src/metabase/util/malli.cljc",1690286813000,"jar:file:/root/.m2/repository/org/clojure/test.check/1.1.1/test.check-1.1.1.jar!/clojure/test/check/rose_tree.cljc",1689946177000,"jar:file:/root/.m2/repository/org/clojure/tools.reader/1.3.6/tools.reader-1.3.6.jar!/clojure/tools/reader/impl/inspect.clj",1689946174000,"jar:file:/root/.m2/repository/instaparse/instaparse/1.4.12/instaparse-1.4.12.jar!/instaparse/combinators_source.clj",1689946146000,"jar:file:/root/.m2/repository/instaparse/instaparse/1.4.12/instaparse-1.4.12.jar!/instaparse/abnf.clj",1689946146000,"jar:file:/root/.m2/repository/org/clojure/tools.namespace/1.4.4/tools.namespace-1.4.4.jar!/clojure/tools/namespace/find.clj",1689946139000,"jar:file:/root/.m2/repository/org/tcrawley/dynapath/1.1.0/dynapath-1.1.0.jar!/dynapath/dynamic_classpath.clj",1689946174000,"file:/home/gmrworkspace/dashboard/src/metabase/lib/schema/temporal_bucketing.cljc",1690286812000,"jar:file:/root/.m2/repository/org/clojure/tools.reader/1.3.6/tools.reader-1.3.6.jar!/cljs/tools/reader/reader_types.clj",1689946174000,"jar:file:/root/.m2/repository/cheshire/cheshire/5.11.0/cheshire-5.11.0.jar!/cheshire/generate_seq.clj",1689946173000,"file:/home/gmrworkspace/dashboard/src/metabase/lib/schema/mbql_clause.cljc",1690286812000,"jar:file:/root/.m2/repository/metosin/malli/0.10.2/malli-0.10.2.jar!/malli/util.cljc",1689946170000,"file:/home/gmrworkspace/dashboard/src/metabase/util/jvm.clj",1692013156125],"~:analyzer",["^ ","^3",null,"^4",["^ "],"^5",["^ ","^6","JavaScript-friendly interface to the entire Dashboard lib? This stuff will probably change a bit as MLv2 evolves.\n\n  Note that in JS we've made the decision to make the stage number always be required as an explicit parameter, so we\n  DO NOT need to expose the `stage-index = -1` arities of functions below. Generally we probably only need to export\n  one arity... see TypeScript wrappers for actual usage.","^7","metabase/lib/js.cljs","^8",1,"^9",5,"^:",1,"^;",20],"^<",["^ ","^=","^>","^?","^@","^A","^B","^C","^D","^E","^F"],"^G",null,"^H",["^I",["^J"]],"^K","^L","^M",["^ "],"^P",null,"^Q",["^ ","^R","^R","^S","^T","^U","^V","~$u","^W","^T","^T","^X","^X","^Y","^R","^Z","^Z","^[","^X","^@","^@","^10","^10","^11","^12","~$m","^13","^14","^15","^W","^W","^16","^16","^17","^17","^18","^17","^12","^12","^V","^V","^19","^Z","^1:","^1;","^1;","^1;","^15","^15","^1<","^16","^13","^13"],"^1=",["^I",["^1>"]],"~:shadow/js-access-global",["^I",["Error"]],"^1?",null,"~:defs",["^ ","~$extract-template-tags",["^ ","~:protocol-inline",null,"^5",["^ ","^7","metabase/lib/js.cljs","^;",37,"~:top-fn",["^ ","~:variadic?",false,"~:fixed-arity",2,"~:max-fixed-arity",2,"~:method-params",[["~$query-text"],["^?P","~$existing-tags"]],"~:arglists",["^1B",[["^?P"],["^?P","^?Q"]]],"~:arglists-meta",["^1B",[null,null]]],"~:export",true,"^9",16,"^8",32,"^:",32,"^?R",["^1B",["~$quote",["^1B",[["^?P"],["^?P","^?Q"]]]]],"^6","Extract the template tags from a native query's text.\n\n  If the optional map of existing tags previously parsed is given, this will reuse the existing tags where\n  they match up with the new one (in particular, it will preserve the UUIDs).\n\n  Given the text of a native query, extract a possibly-empty set of template tag strings from it.\n\n  These look like mustache templates. For variables, we only allow alphanumeric characters, eg. `{{foo}}`.\n  For snippets they start with `snippet:`, eg. `{{ snippet: arbitrary text here }}`.\n  And for card references either `{{ #123 }}` or with the optional human label `{{ #123-card-title-slug }}`.\n\n  Invalid patterns are simply ignored, so something like `{{&foo!}}` is just disregarded."],"^K","^6N","^7","metabase/lib/js.cljs","^;",37,"^?K",["^ ","^?L",false,"^?M",2,"^?N",2,"^?O",[["^?P"],["^?P","^?Q"]],"^?R",["^1B",[["^?P"],["^?P","^?Q"]]],"^?S",["^1B",[null,null]]],"^?O",[["^?P"],["^?P","^?Q"]],"~:protocol-impl",null,"^?M",2,"^?T",true,"^?S",["^1B",[null,null]],"^9",1,"^?L",false,"~:methods",[["^ ","^?M",1,"^?L",false,"~:tag","~$any"],["^ ","^?M",2,"^?L",false,"^?X","^?Y"]],"^8",32,"^:",32,"^?N",2,"~:fn-var",true,"^?R",["^1B",[["^?P"],["^?P","^?Q"]]],"^6","Extract the template tags from a native query's text.\n\n  If the optional map of existing tags previously parsed is given, this will reuse the existing tags where\n  they match up with the new one (in particular, it will preserve the UUIDs).\n\n  Given the text of a native query, extract a possibly-empty set of template tag strings from it.\n\n  These look like mustache templates. For variables, we only allow alphanumeric characters, eg. `{{foo}}`.\n  For snippets they start with `snippet:`, eg. `{{ snippet: arbitrary text here }}`.\n  And for card references either `{{ #123 }}` or with the optional human label `{{ #123-card-title-slug }}`.\n\n  Invalid patterns are simply ignored, so something like `{{&foo!}}` is just disregarded."],"~$filter-operator",["^ ","^?J",null,"^5",["^ ","^7","metabase/lib/js.cljs","^8",365,"^9",16,"^:",365,"^;",31,"^?T",true,"^?R",["^1B",["^?U",["^1B",[["~$a-query","~$stage-number","~$a-filter-clause"]]]]],"^6","Returns the filter operator of `filter-clause`."],"^K","^3Z","^7","metabase/lib/js.cljs","^;",31,"^?O",["^1B",[["^@0","^@1","^@2"]]],"^?V",null,"^?T",true,"^?S",["^1B",[null,null]],"^9",1,"^?L",false,"^8",365,"~:ret-tag","^?Y","^:",365,"^?N",3,"^?Z",true,"^?R",["^1B",["^?U",["^1B",[["^@0","^@1","^@2"]]]]],"^6","Returns the filter operator of `filter-clause`."],"~$binning",["^ ","^?J",null,"^5",["^ ","^7","metabase/lib/js.cljs","^8",169,"^9",16,"^:",169,"^;",23,"^?T",true,"^?R",["^1B",["^?U",["^1B",[["~$x"]]]]],"^6","Retrieve the current binning state of a `:field` clause, field metadata, etc. as an opaque object, or `nil` if it\n  does not have binning options set."],"^K","^5F","^7","metabase/lib/js.cljs","^;",23,"^?O",["^1B",[["~$x"]]],"^?V",null,"^?T",true,"^?S",["^1B",[null,null]],"^9",1,"^?L",false,"^8",169,"^@3","^?Y","^:",169,"^?N",1,"^?Z",true,"^?R",["^1B",["^?U",["^1B",[["~$x"]]]]],"^6","Retrieve the current binning state of a `:field` clause, field metadata, etc. as an opaque object, or `nil` if it\n  does not have binning options set."],"~$query",["^ ","^?J",null,"^5",["^ ","^7","metabase/lib/js.cljs","^8",73,"^9",16,"^:",73,"^;",21,"^?T",true,"^?R",["^1B",["^?U",["^1B",[["~$database-id","~$metadata","~$query-map"]]]]],"^6","Coerce a plain map `query` to an actual query object that you can use with MLv2."],"^K","^67","^7","metabase/lib/js.cljs","^;",21,"^?O",["^1B",[["^@6","^@7","^@8"]]],"^?V",null,"^?T",true,"^?S",["^1B",[null,null]],"^9",1,"^?L",false,"^8",73,"^@3","^?Y","^:",73,"^?N",3,"^?Z",true,"^?R",["^1B",["^?U",["^1B",[["^@6","^@7","^@8"]]]]],"^6","Coerce a plain map `query` to an actual query object that you can use with MLv2."],"~$columns-group-columns",["^ ","^?J",null,"^5",["^ ","^7","metabase/lib/js.cljs","^8",285,"^9",16,"^:",285,"^;",37,"^?T",true,"^?R",["^1B",["^?U",["^1B",[["~$column-group"]]]]],"^6","Get the columns associated with a column group"],"^K","^5I","^7","metabase/lib/js.cljs","^;",37,"^?O",["^1B",[["^@:"]]],"^?V",null,"^?T",true,"^?S",["^1B",[null,null]],"^9",1,"^?L",false,"^8",285,"^@3","~$array","^:",285,"^?N",1,"^?Z",true,"^?R",["^1B",["^?U",["^1B",[["^@:"]]]]],"^6","Get the columns associated with a column group"],"~$join-fields",["^ ","^?J",null,"^5",["^ ","^7","metabase/lib/js.cljs","^8",479,"^9",16,"^:",479,"^;",27,"^?T",true,"^?R",["^1B",["^?U",["^1B",[["~$a-join"]]]]],"^6","Get the `:fields` associated with a join."],"^K","^5N","^7","metabase/lib/js.cljs","^;",27,"^?O",["^1B",[["^@="]]],"^?V",null,"^?T",true,"^?S",["^1B",[null,null]],"^9",1,"^?L",false,"^8",479,"^@3",["^I",["^@;","~$string","~$clj-nil"]],"^:",479,"^?N",1,"^?Z",true,"^?R",["^1B",["^?U",["^1B",[["^@="]]]]],"^6","Get the `:fields` associated with a join."],"~$aggregate",["^ ","^?J",null,"^5",["^ ","^7","metabase/lib/js.cljs","^8",310,"^9",16,"^:",310,"^;",25,"^?T",true,"^?R",["^1B",["^?U",["^1B",[["^@0","^@1","~$an-aggregate-clause"]]]]],"^6","Adds an aggregation to query."],"^K","^69","^7","metabase/lib/js.cljs","^;",25,"^?O",["^1B",[["^@0","^@1","^@A"]]],"^?V",null,"^?T",true,"^?S",["^1B",[null,null]],"^9",1,"^?L",false,"^8",310,"^@3","^?Y","^:",310,"^?N",3,"^?Z",true,"^?R",["^1B",["^?U",["^1B",[["^@0","^@1","^@A"]]]]],"^6","Adds an aggregation to query."],"~$join-conditions",["^ ","^?J",null,"^5",["^ ","^7","metabase/lib/js.cljs","^8",505,"^9",16,"^:",505,"^;",31,"^?T",true,"^?R",["^1B",["^?U",["^1B",[["^@="]]]]],"^6","Get the conditions (filter clauses) associated with a join."],"^K","^5:","^7","metabase/lib/js.cljs","^;",31,"^?O",["^1B",[["^@="]]],"^?V",null,"^?T",true,"^?S",["^1B",[null,null]],"^9",1,"^?L",false,"^8",505,"^@3","^@;","^:",505,"^?N",1,"^?Z",true,"^?R",["^1B",["^?U",["^1B",[["^@="]]]]],"^6","Get the conditions (filter clauses) associated with a join."],"~$query=",["^ ","^?J",null,"^5",["^ ","^7","metabase/lib/js.cljs","^;",22,"^?K",["^ ","^?L",false,"^?M",3,"^?N",3,"^?O",[["~$query1","~$query2"],["^@D","^@E","~$field-ids"]],"^?R",["^1B",[["^@D","^@E"],["^@D","^@E","^@F"]]],"^?S",["^1B",[null,null]]],"^?T",true,"^9",16,"^8",243,"^:",243,"^?R",["^1B",["^?U",["^1B",[["^@D","^@E"],["^@D","^@E","^@F"]]]]],"^6","Returns whether the provided queries should be considered equal.\n\n  If `field-ids` is specified, an input MBQL query without `:fields` set defaults to the `field-ids`.\n\n  Currently this works only for legacy queries in JS form!\n  It duplicates the logic formerly found in `query_builder/selectors.js`.\n\n  TODO: This should evolve into a more robust, pMBQL-based sense of equality over time.\n  For now it pulls logic that touches query internals into `metabase.lib`."],"^K","^3C","^7","metabase/lib/js.cljs","^;",22,"^?K",["^ ","^?L",false,"^?M",3,"^?N",3,"^?O",[["^@D","^@E"],["^@D","^@E","^@F"]],"^?R",["^1B",[["^@D","^@E"],["^@D","^@E","^@F"]]],"^?S",["^1B",[null,null]]],"^?O",[["^@D","^@E"],["^@D","^@E","^@F"]],"^?V",null,"^?M",3,"^?T",true,"^?S",["^1B",[null,null]],"^9",1,"^?L",false,"^?W",[["^ ","^?M",2,"^?L",false,"^?X","^?Y"],["^ ","^?M",3,"^?L",false,"^?X","~$boolean"]],"^8",243,"^:",243,"^?N",3,"^?Z",true,"^?R",["^1B",[["^@D","^@E"],["^@D","^@E","^@F"]]],"^6","Returns whether the provided queries should be considered equal.\n\n  If `field-ids` is specified, an input MBQL query without `:fields` set defaults to the `field-ids`.\n\n  Currently this works only for legacy queries in JS form!\n  It duplicates the logic formerly found in `query_builder/selectors.js`.\n\n  TODO: This should evolve into a more robust, pMBQL-based sense of equality over time.\n  For now it pulls logic that touches query internals into `metabase.lib`."],"~$temporal-bucket",["^ ","^?J",null,"^5",["^ ","^7","metabase/lib/js.cljs","^8",195,"^9",16,"^:",195,"^;",31,"^?T",true,"^?R",["^1B",["^?U",["^1B",[["~$x"]]]]],"^6","Get the current temporal bucketing options associated with something, if any."],"^K","^5O","^7","metabase/lib/js.cljs","^;",31,"^?O",["^1B",[["~$x"]]],"^?V",null,"^?T",true,"^?S",["^1B",[null,null]],"^9",1,"^?L",false,"^8",195,"^@3","^?Y","^:",195,"^?N",1,"^?Z",true,"^?R",["^1B",["^?U",["^1B",[["~$x"]]]]],"^6","Get the current temporal bucketing options associated with something, if any."],"~$remove-clause",["^ ","^?J",null,"^5",["^ ","^7","metabase/lib/js.cljs","^8",215,"^9",16,"^:",215,"^;",29,"^?T",true,"^?R",["^1B",["^?U",["^1B",[["^@0","^@1","~$clause"]]]]],"^6","Removes the `target-clause` in the filter of the `query`."],"^K","^6C","^7","metabase/lib/js.cljs","^;",29,"^?O",["^1B",[["^@0","^@1","^@J"]]],"^?V",null,"^?T",true,"^?S",["^1B",[null,null]],"^9",1,"^?L",false,"^8",215,"^@3","^?Y","^:",215,"^?N",3,"^?Z",true,"^?R",["^1B",["^?U",["^1B",[["^@0","^@1","^@J"]]]]],"^6","Removes the `target-clause` in the filter of the `query`."],"~$suggested-join-condition",["^ ","^?J",null,"^5",["^ ","^7","metabase/lib/js.cljs","^8",471,"^9",16,"^:",471,"^;",40,"^?T",true,"^?R",["^1B",["^?U",["^1B",[["^@0","^@1","~$joinable"]]]]],"^6","Return a suggested default join condition when constructing a join against `joinable`, e.g. a Table, Saved\n  Question, or another query. A suggested condition will be returned if the source Table has a foreign key to the\n  primary key of the thing we're joining (see #31175 for more info); otherwise this will return `nil` if no default\n  condition is suggested."],"^K","^3L","^7","metabase/lib/js.cljs","^;",40,"^?O",["^1B",[["^@0","^@1","^@L"]]],"^?V",null,"^?T",true,"^?S",["^1B",[null,null]],"^9",1,"^?L",false,"^8",471,"^@3","^?Y","^:",471,"^?N",3,"^?Z",true,"^?R",["^1B",["^?U",["^1B",[["^@0","^@1","^@L"]]]]],"^6","Return a suggested default join condition when constructing a join against `joinable`, e.g. a Table, Saved\n  Question, or another query. A suggested condition will be returned if the source Table has a foreign key to the\n  primary key of the thing we're joining (see #31175 for more info); otherwise this will return `nil` if no default\n  condition is suggested."],"~$replace-clause",["^ ","^?J",null,"^5",["^ ","^7","metabase/lib/js.cljs","^8",222,"^9",16,"^:",222,"^;",30,"^?T",true,"^?R",["^1B",["^?U",["^1B",[["^@0","^@1","~$target-clause","~$new-clause"]]]]],"^6","Replaces the `target-clause` with `new-clause` in the `query` stage."],"^K","^5[","^7","metabase/lib/js.cljs","^;",30,"^?O",["^1B",[["^@0","^@1","^@N","^@O"]]],"^?V",null,"^?T",true,"^?S",["^1B",[null,null]],"^9",1,"^?L",false,"^8",222,"^@3","^?Y","^:",222,"^?N",4,"^?Z",true,"^?R",["^1B",["^?U",["^1B",[["^@0","^@1","^@N","^@O"]]]]],"^6","Replaces the `target-clause` with `new-clause` in the `query` stage."],"~$drop-stage",["^ ","^?J",null,"^5",["^ ","^7","metabase/lib/js.cljs","^8",104,"^9",16,"^:",104,"^;",26,"^?T",true,"^?R",["^1B",["^?U",["^1B",[["^@0"]]]]],"^6","Drops the final stage in the pipeline"],"^K","^6J","^7","metabase/lib/js.cljs","^;",26,"^?O",["^1B",[["^@0"]]],"^?V",null,"^?T",true,"^?S",["^1B",[null,null]],"^9",1,"^?L",false,"^8",104,"^@3","^?Y","^:",104,"^?N",1,"^?Z",true,"^?R",["^1B",["^?U",["^1B",[["^@0"]]]]],"^6","Drops the final stage in the pipeline"],"~$join-lhs-display-name",["^ ","^?J",null,"^5",["^ ","^7","metabase/lib/js.cljs","^8",637,"^9",16,"^:",637,"^;",37,"^?T",true,"^?R",["^1B",["^?U",["^1B",[["^@0","^@1","~$join-or-joinable"]]]]],"^6","Get the display name for whatever we are joining. For an existing join, pass in the join clause. When constructing a\n  join, pass in the thing we are joining against, e.g. a TableMetadata or CardMetadata."],"^K","^4C","^7","metabase/lib/js.cljs","^;",37,"^?O",["^1B",[["^@0","^@1","^@R"]]],"^?V",null,"^?T",true,"^?S",["^1B",[null,null]],"^9",1,"^?L",false,"^8",637,"^@3","^?Y","^:",637,"^?N",3,"^?Z",true,"^?R",["^1B",["^?U",["^1B",[["^@0","^@1","^@R"]]]]],"^6","Get the display name for whatever we are joining. For an existing join, pass in the join clause. When constructing a\n  join, pass in the thing we are joining against, e.g. a TableMetadata or CardMetadata."],"~$native-extras",["^ ","^?J",null,"^5",["^ ","^7","metabase/lib/js.cljs","^8",613,"^9",16,"^:",613,"^;",29,"^?T",true,"^?R",["^1B",["^?U",["^1B",[["^@0"]]]]],"^6","Returns the extra keys for native queries associated with this query."],"^K","^3U","^7","metabase/lib/js.cljs","^;",29,"^?O",["^1B",[["^@0"]]],"^?V",null,"^?T",true,"^?S",["^1B",[null,null]],"^9",1,"^?L",false,"^8",613,"^@3","^?Y","^:",613,"^?N",1,"^?Z",true,"^?R",["^1B",["^?U",["^1B",[["^@0"]]]]],"^6","Returns the extra keys for native queries associated with this query."],"~$available-temporal-buckets",["^ ","^?J",null,"^5",["^ ","^7","metabase/lib/js.cljs","^;",42,"^?K",["^ ","^?L",false,"^?M",3,"^?N",3,"^?O",[["^@0","~$x"],["^@0","^@1","~$x"]],"^?R",["^1B",[["^@0","~$x"],["^@0","^@1","~$x"]]],"^?S",["^1B",[null,null]]],"^?T",true,"^9",16,"^8",205,"^:",205,"^?R",["^1B",["^?U",["^1B",[["^@0","~$x"],["^@0","^@1","~$x"]]]]],"^6","Get a list of available temporal bucketing options for `x` (a field reference, generally) in the context of `a-query`\n  and optionally `stage-number`. The returned list contains opaque objects which should be passed to [[display-info]]."],"^K","^3Y","^7","metabase/lib/js.cljs","^;",42,"^?K",["^ ","^?L",false,"^?M",3,"^?N",3,"^?O",[["^@0","~$x"],["^@0","^@1","~$x"]],"^?R",["^1B",[["^@0","~$x"],["^@0","^@1","~$x"]]],"^?S",["^1B",[null,null]]],"^?O",[["^@0","~$x"],["^@0","^@1","~$x"]],"^?V",null,"^?M",3,"^?T",true,"^?S",["^1B",[null,null]],"^9",1,"^?L",false,"^?W",[["^ ","^?M",2,"^?L",false,"^?X","^@;"],["^ ","^?M",3,"^?L",false,"^?X","^@;"]],"^8",205,"^:",205,"^?N",3,"^?Z",true,"^?R",["^1B",[["^@0","~$x"],["^@0","^@1","~$x"]]],"^6","Get a list of available temporal bucketing options for `x` (a field reference, generally) in the context of `a-query`\n  and optionally `stage-number`. The returned list contains opaque objects which should be passed to [[display-info]]."],"~$with-binning",["^ ","^?J",null,"^5",["^ ","^7","metabase/lib/js.cljs","^8",175,"^9",16,"^:",175,"^;",28,"^?T",true,"^?R",["^1B",["^?U",["^1B",[["~$x","~$binning-option"]]]]],"^6","Given `x` (a field reference) and a `binning` value, return a new `:field` clause with its `:binning` options set.\n\n  If `binning` is `nil`, removes any `:binning` options currently present.\n\n  `binning` can be one of the opaque values returned by [[available-binning-strategies]], or a literal\n  [[metabase.lib.schema.binning/binning]] value."],"^K","^6S","^7","metabase/lib/js.cljs","^;",28,"^?O",["^1B",[["~$x","^@V"]]],"^?V",null,"^?T",true,"^?S",["^1B",[null,null]],"^9",1,"^?L",false,"^8",175,"^@3","^?Y","^:",175,"^?N",2,"^?Z",true,"^?R",["^1B",["^?U",["^1B",[["~$x","^@V"]]]]],"^6","Given `x` (a field reference) and a `binning` value, return a new `:field` clause with its `:binning` options set.\n\n  If `binning` is `nil`, removes any `:binning` options currently present.\n\n  `binning` can be one of the opaque values returned by [[available-binning-strategies]], or a literal\n  [[metabase.lib.schema.binning/binning]] value."],"~$append-stage",["^ ","^?J",null,"^5",["^ ","^7","metabase/lib/js.cljs","^8",99,"^9",16,"^:",99,"^;",28,"^?T",true,"^?R",["^1B",["^?U",["^1B",[["^@0"]]]]],"^6","Adds a new blank stage to the end of the pipeline"],"^K","^3[","^7","metabase/lib/js.cljs","^;",28,"^?O",["^1B",[["^@0"]]],"^?V",null,"^?T",true,"^?S",["^1B",[null,null]],"^9",1,"^?L",false,"^8",99,"^@3","^?Y","^:",99,"^?N",1,"^?Z",true,"^?R",["^1B",["^?U",["^1B",[["^@0"]]]]],"^6","Adds a new blank stage to the end of the pipeline"],"~$join",["^ ","^?J",null,"^5",["^ ","^7","metabase/lib/js.cljs","^8",500,"^9",16,"^:",500,"^;",20,"^?T",true,"^?R",["^1B",["^?U",["^1B",[["^@0","^@1","^@="]]]]],"^6","Add a join clause (as created by [[join-clause]]) to a stage of a query."],"^K","^4L","^7","metabase/lib/js.cljs","^;",20,"^?O",["^1B",[["^@0","^@1","^@="]]],"^?V",null,"^?T",true,"^?S",["^1B",[null,null]],"^9",1,"^?L",false,"^8",500,"^@3","^?Y","^:",500,"^?N",3,"^?Z",true,"^?R",["^1B",["^?U",["^1B",[["^@0","^@1","^@="]]]]],"^6","Add a join clause (as created by [[join-clause]]) to a stage of a query."],"~$aggregations",["^ ","^?J",null,"^5",["^ ","^7","metabase/lib/js.cljs","^8",315,"^9",16,"^:",315,"^;",28,"^?T",true,"^?R",["^1B",["^?U",["^1B",[["^@0","^@1"]]]]],"^6","Get the aggregations in a given stage of a query."],"^K","^6V","^7","metabase/lib/js.cljs","^;",28,"^?O",["^1B",[["^@0","^@1"]]],"^?V",null,"^?T",true,"^?S",["^1B",[null,null]],"^9",1,"^?L",false,"^8",315,"^@3","^@;","^:",315,"^?N",2,"^?Z",true,"^?R",["^1B",["^?U",["^1B",[["^@0","^@1"]]]]],"^6","Get the aggregations in a given stage of a query."],"~$raw-native-query",["^ ","^?J",null,"^5",["^ ","^7","metabase/lib/js.cljs","^8",584,"^9",16,"^:",584,"^;",32,"^?T",true,"^?R",["^1B",["^?U",["^1B",[["^@0"]]]]],"^6","Returns the native query string"],"^K","^6<","^7","metabase/lib/js.cljs","^;",32,"^?O",["^1B",[["^@0"]]],"^?V",null,"^?T",true,"^?S",["^1B",[null,null]],"^9",1,"^?L",false,"^8",584,"^@3","^?Y","^:",584,"^?N",1,"^?Z",true,"^?R",["^1B",["^?U",["^1B",[["^@0"]]]]],"^6","Returns the native query string"],"~$filterable-column-operators",["^ ","^?J",null,"^5",["^ ","^7","metabase/lib/js.cljs","^8",354,"^9",16,"^:",354,"^;",43,"^?T",true,"^?R",["^1B",["^?U",["^1B",[["~$filterable-column"]]]]],"^6","Returns the operators for which `filterable-column` is applicable."],"^K","^6?","^7","metabase/lib/js.cljs","^;",43,"^?O",["^1B",[["^A0"]]],"^?V",null,"^?T",true,"^?S",["^1B",[null,null]],"^9",1,"^?L",false,"^8",354,"^@3","^@;","^:",354,"^?N",1,"^?Z",true,"^?R",["^1B",["^?U",["^1B",[["^A0"]]]]],"^6","Returns the operators for which `filterable-column` is applicable."],"~$with-temporal-bucket",["^ ","^?J",null,"^5",["^ ","^7","metabase/lib/js.cljs","^8",200,"^9",16,"^:",200,"^;",36,"^?T",true,"^?R",["^1B",["^?U",["^1B",[["~$x","~$bucketing-option"]]]]],"^6","Add a temporal bucketing option to an MBQL clause (or something that can be converted to an MBQL clause)."],"^K","^6@","^7","metabase/lib/js.cljs","^;",36,"^?O",["^1B",[["~$x","^A2"]]],"^?V",null,"^?T",true,"^?S",["^1B",[null,null]],"^9",1,"^?L",false,"^8",200,"^@3","^?Y","^:",200,"^?N",2,"^?Z",true,"^?R",["^1B",["^?U",["^1B",[["~$x","^A2"]]]]],"^6","Add a temporal bucketing option to an MBQL clause (or something that can be converted to an MBQL clause)."],"~$with-join-conditions",["^ ","^?J",null,"^5",["^ ","^7","metabase/lib/js.cljs","^8",510,"^9",16,"^:",510,"^;",36,"^?T",true,"^?R",["^1B",["^?U",["^1B",[["^@=","~$conditions"]]]]],"^6","Set the `:conditions` (filter clauses) for a join."],"^K","^3H","^7","metabase/lib/js.cljs","^;",36,"^?O",["^1B",[["^@=","^A4"]]],"^?V",null,"^?T",true,"^?S",["^1B",[null,null]],"^9",1,"^?L",false,"^8",510,"^@3","^?Y","^:",510,"^?N",2,"^?Z",true,"^?R",["^1B",["^?U",["^1B",[["^@=","^A4"]]]]],"^6","Set the `:conditions` (filter clauses) for a join."],"~$available-metrics",["^ ","^?J",null,"^5",["^ ","^7","metabase/lib/js.cljs","^8",618,"^9",16,"^:",618,"^;",33,"^?T",true,"^?R",["^1B",["^?U",["^1B",[["^@0"]]]]],"^6","Get a list of Metrics that you may consider using as aggregations for a query. Returns JS array of opaque Metric\n  metadata objects."],"^K","^3K","^7","metabase/lib/js.cljs","^;",33,"^?O",["^1B",[["^@0"]]],"^?V",null,"^?T",true,"^?S",["^1B",[null,null]],"^9",1,"^?L",false,"^8",618,"^@3","^@;","^:",618,"^?N",1,"^?Z",true,"^?R",["^1B",["^?U",["^1B",[["^@0"]]]]],"^6","Get a list of Metrics that you may consider using as aggregations for a query. Returns JS array of opaque Metric\n  metadata objects."],"~$with-different-database",["^ ","^?J",null,"^5",["^ ","^7","metabase/lib/js.cljs","^;",39,"^?K",["^ ","^?L",false,"^?M",4,"^?N",4,"^?O",[["^@0","^@6","^@7"],["^@0","^@6","^@7","^@S"]],"^?R",["^1B",[["^@0","^@6","^@7"],["^@0","^@6","^@7","^@S"]]],"^?S",["^1B",[null,null]]],"^?T",true,"^9",16,"^8",599,"^:",599,"^?R",["^1B",["^?U",["^1B",[["^@0","^@6","^@7"],["^@0","^@6","^@7","^@S"]]]]],"^6","Changes the database for this query. The first stage must be a native type.\n   Native extras must be provided if the new database requires it."],"^K","^4@","^7","metabase/lib/js.cljs","^;",39,"^?K",["^ ","^?L",false,"^?M",4,"^?N",4,"^?O",[["^@0","^@6","^@7"],["^@0","^@6","^@7","^@S"]],"^?R",["^1B",[["^@0","^@6","^@7"],["^@0","^@6","^@7","^@S"]]],"^?S",["^1B",[null,null]]],"^?O",[["^@0","^@6","^@7"],["^@0","^@6","^@7","^@S"]],"^?V",null,"^?M",4,"^?T",true,"^?S",["^1B",[null,null]],"^9",1,"^?L",false,"^?W",[["^ ","^?M",3,"^?L",false,"^?X","^?Y"],["^ ","^?M",4,"^?L",false,"^?X","^?Y"]],"^8",599,"^:",599,"^?N",4,"^?Z",true,"^?R",["^1B",[["^@0","^@6","^@7"],["^@0","^@6","^@7","^@S"]]],"^6","Changes the database for this query. The first stage must be a native type.\n   Native extras must be provided if the new database requires it."],"~$with-fields",["^ ","^?J",null,"^5",["^ ","^7","metabase/lib/js.cljs","^8",389,"^9",16,"^:",389,"^;",27,"^?T",true,"^?R",["^1B",["^?U",["^1B",[["^@0","^@1","~$new-fields"]]]]],"^6","Specify the `:fields` for a query. Pass an empty sequence or `nil` to remove `:fields`."],"^K","^4U","^7","metabase/lib/js.cljs","^;",27,"^?O",["^1B",[["^@0","^@1","^A8"]]],"^?V",null,"^?T",true,"^?S",["^1B",[null,null]],"^9",1,"^?L",false,"^8",389,"^@3","^?Y","^:",389,"^?N",3,"^?Z",true,"^?R",["^1B",["^?U",["^1B",[["^@0","^@1","^A8"]]]]],"^6","Specify the `:fields` for a query. Pass an empty sequence or `nil` to remove `:fields`."],"~$join-clause",["^ ","^?J",null,"^5",["^ ","^7","metabase/lib/js.cljs","^8",493,"^9",16,"^:",493,"^;",27,"^?T",true,"^?R",["^1B",["^?U",["^1B",[["^@L","^A4"]]]]],"^6","Create a join clause (an `:mbql/join` map) against something `joinable` (Table metadata, a Saved Question, another\n  query, etc.) with `conditions`, which should be an array of filter clauses. You can then manipulate this join clause\n  with stuff like [[with-join-fields]], or add it to a query with [[join]]."],"^K","^2T","^7","metabase/lib/js.cljs","^;",27,"^?O",["^1B",[["^@L","^A4"]]],"^?V",null,"^?T",true,"^?S",["^1B",[null,null]],"^9",1,"^?L",false,"^8",493,"^@3","^?Y","^:",493,"^?N",2,"^?Z",true,"^?R",["^1B",["^?U",["^1B",[["^@L","^A4"]]]]],"^6","Create a join clause (an `:mbql/join` map) against something `joinable` (Table metadata, a Saved Question, another\n  query, etc.) with `conditions`, which should be an array of filter clauses. You can then manipulate this join clause\n  with stuff like [[with-join-fields]], or add it to a query with [[join]]."],"~$aggregation-clause",["^ ","^?J",null,"^5",["^ ","^7","metabase/lib/js.cljs","^;",34,"^?K",["^ ","^?L",false,"^?M",2,"^?N",2,"^?O",[["~$aggregation-operator"],["^A;","~$column"]],"^?R",["^1B",[["^A;"],["^A;","^A<"]]],"^?S",["^1B",[null,null]]],"^?T",true,"^9",16,"^8",320,"^:",320,"^?R",["^1B",["^?U",["^1B",[["^A;"],["^A;","^A<"]]]]],"^6","Returns a standalone aggregation clause for an `aggregation-operator` and\n   a `column`.\n   For aggregations requiring an argument `column` is mandatory, otherwise\n   it is optional."],"^K","^52","^7","metabase/lib/js.cljs","^;",34,"^?K",["^ ","^?L",false,"^?M",2,"^?N",2,"^?O",[["^A;"],["^A;","^A<"]],"^?R",["^1B",[["^A;"],["^A;","^A<"]]],"^?S",["^1B",[null,null]]],"^?O",[["^A;"],["^A;","^A<"]],"^?V",null,"^?M",2,"^?T",true,"^?S",["^1B",[null,null]],"^9",1,"^?L",false,"^?W",[["^ ","^?M",1,"^?L",false,"^?X","^?Y"],["^ ","^?M",2,"^?L",false,"^?X","^?Y"]],"^8",320,"^:",320,"^?N",2,"^?Z",true,"^?R",["^1B",[["^A;"],["^A;","^A<"]]],"^6","Returns a standalone aggregation clause for an `aggregation-operator` and\n   a `column`.\n   For aggregations requiring an argument `column` is mandatory, otherwise\n   it is optional."],"~$prep-query-for-equals",["^ ","^?J",null,"^5",["^ ","^7","metabase/lib/js.cljs","^8",230,"^9",8,"^:",230,"^;",29,"~:private",true,"^?R",["^1B",["^?U",["^1B",[["^@0","^@F"]]]]]],"^A>",true,"^K","^36","^7","metabase/lib/js.cljs","^;",29,"^?O",["^1B",[["^@0","^@F"]]],"^?V",null,"^?S",["^1B",[null,null]],"^9",1,"^?L",false,"^8",230,"^@3",["^I",[null,"~$clj","^?Y"]],"^:",230,"^?N",2,"^?Z",true,"^?R",["^1B",["^?U",["^1B",[["^@0","^@F"]]]]]],"~$fix-namespaced-values",["^ ","^?J",null,"^5",["^ ","^7","metabase/lib/js.cljs","^8",80,"^9",8,"^:",80,"^;",29,"^A>",true,"^?R",["^1B",["^?U",["^1B",[["~$x"]]]]],"^6","This converts namespaced keywords to strings as `\"foo/bar\"`.\n\n  `clj->js` supports overriding how keyword map keys get transformed, but it doesn't let you override how values are\n  handled. So this function runs first and turns them into strings.\n\n  As an example of such a value, `(get-in card [:template-tags \"some-tag\" :widget-type])` can be `:date/all-options`."],"^A>",true,"^K","^2D","^7","metabase/lib/js.cljs","^;",29,"^?O",["^1B",[["~$x"]]],"^?V",null,"^?S",["^1B",[null,null]],"^9",1,"^?L",false,"^8",80,"^@3",["^I",[null,"^A?","^3M","^@>","~$cljs.core/MetaFn","^@?"]],"^:",80,"^?N",1,"^?Z",true,"^?R",["^1B",["^?U",["^1B",[["~$x"]]]]],"^6","This converts namespaced keywords to strings as `\"foo/bar\"`.\n\n  `clj->js` supports overriding how keyword map keys get transformed, but it doesn't let you override how values are\n  handled. So this function runs first and turns them into strings.\n\n  As an example of such a value, `(get-in card [:template-tags \"some-tag\" :widget-type])` can be `:date/all-options`."],"~$external-op",["^ ","^?J",null,"^5",["^ ","^7","metabase/lib/js.cljs","^8",558,"^9",16,"^:",558,"^;",27,"^?T",true,"^?R",["^1B",["^?U",["^1B",[["^@J"]]]]],"^6","Convert the internal operator `clause` to the external format."],"^K","^3=","^7","metabase/lib/js.cljs","^;",27,"^?O",["^1B",[["^@J"]]],"^?V",null,"^?T",true,"^?S",["^1B",[null,null]],"^9",1,"^?L",false,"^8",558,"^@3","~$object","^:",558,"^?N",1,"^?Z",true,"^?R",["^1B",["^?U",["^1B",[["^@J"]]]]],"^6","Convert the internal operator `clause` to the external format."],"~$with-join-fields",["^ ","^?J",null,"^5",["^ ","^7","metabase/lib/js.cljs","^8",487,"^9",16,"^:",487,"^;",32,"^?T",true,"^?R",["^1B",["^?U",["^1B",[["^@=","^A8"]]]]],"^6","Set the `:fields` for `a-join`."],"^K","^6A","^7","metabase/lib/js.cljs","^;",32,"^?O",["^1B",[["^@=","^A8"]]],"^?V",null,"^?T",true,"^?S",["^1B",[null,null]],"^9",1,"^?L",false,"^8",487,"^@3","^?Y","^:",487,"^?N",2,"^?Z",true,"^?R",["^1B",["^?U",["^1B",[["^@=","^A8"]]]]],"^6","Set the `:fields` for `a-join`."],"~$available-binning-strategies",["^ ","^?J",null,"^5",["^ ","^7","metabase/lib/js.cljs","^;",44,"^?K",["^ ","^?L",false,"^?M",3,"^?N",3,"^?O",[["^@0","~$x"],["^@0","^@1","~$x"]],"^?R",["^1B",[["^@0","~$x"],["^@0","^@1","~$x"]]],"^?S",["^1B",[null,null]]],"^?T",true,"^9",16,"^8",185,"^:",185,"^?R",["^1B",["^?U",["^1B",[["^@0","~$x"],["^@0","^@1","~$x"]]]]],"^6","Get a list of available binning strategies for `x` (a field reference, generally) in the context of `a-query` and\n  optionally `stage-number`. The returned list contains opaque objects which should be passed to [[display-info]]."],"^K","^25","^7","metabase/lib/js.cljs","^;",44,"^?K",["^ ","^?L",false,"^?M",3,"^?N",3,"^?O",[["^@0","~$x"],["^@0","^@1","~$x"]],"^?R",["^1B",[["^@0","~$x"],["^@0","^@1","~$x"]]],"^?S",["^1B",[null,null]]],"^?O",[["^@0","~$x"],["^@0","^@1","~$x"]],"^?V",null,"^?M",3,"^?T",true,"^?S",["^1B",[null,null]],"^9",1,"^?L",false,"^?W",[["^ ","^?M",2,"^?L",false,"^?X","^@;"],["^ ","^?M",3,"^?L",false,"^?X","^@;"]],"^8",185,"^:",185,"^?N",3,"^?Z",true,"^?R",["^1B",[["^@0","~$x"],["^@0","^@1","~$x"]]],"^6","Get a list of available binning strategies for `x` (a field reference, generally) in the context of `a-query` and\n  optionally `stage-number`. The returned list contains opaque objects which should be passed to [[display-info]]."],"~$expression",["^ ","^?J",null,"^5",["^ ","^7","metabase/lib/js.cljs","^8",453,"^9",16,"^:",453,"^;",26,"^?T",true,"^?R",["^1B",["^?U",["^1B",[["^@0","^@1","~$expression-name","~$an-expression-clause"]]]]],"^6","Adds an expression to query."],"^K","^6H","^7","metabase/lib/js.cljs","^;",26,"^?O",["^1B",[["^@0","^@1","^AG","^AH"]]],"^?V",null,"^?T",true,"^?S",["^1B",[null,null]],"^9",1,"^?L",false,"^8",453,"^@3","^?Y","^:",453,"^?N",4,"^?Z",true,"^?R",["^1B",["^?U",["^1B",[["^@0","^@1","^AG","^AH"]]]]],"^6","Adds an expression to query."],"~$describe-relative-datetime",["^ ","^?J",null,"^5",["^ ","^7","metabase/lib/js.cljs","^8",303,"^9",16,"^:",303,"^;",42,"^?T",true,"^?R",["^1B",["^?U",["^1B",[["~$n","~$unit"]]]]],"^6","Get a translated description of a relative datetime interval."],"^K","^2:","^7","metabase/lib/js.cljs","^;",42,"^?O",["^1B",[["~$n","^AJ"]]],"^?V",null,"^?T",true,"^?S",["^1B",[null,null]],"^9",1,"^?L",false,"^8",303,"^@3","^?Y","^:",303,"^?N",2,"^?Z",true,"^?R",["^1B",["^?U",["^1B",[["~$n","^AJ"]]]]],"^6","Get a translated description of a relative datetime interval."],"~$pMBQL",["^ ","^?J",null,"^5",["^ ","^7","metabase/lib/js.cljs","^8",57,"^9",8,"^:",57,"^;",13,"^A>",true,"^?R",["^1B",["^?U",["^1B",[["^@8"]]]]]],"^A>",true,"^K","^61","^7","metabase/lib/js.cljs","^;",13,"^?O",["^1B",[["^@8"]]],"^?V",null,"^?S",["^1B",[null,null]],"^9",1,"^?L",false,"^8",57,"^@3","^?Y","^:",57,"^?N",1,"^?Z",true,"^?R",["^1B",["^?U",["^1B",[["^@8"]]]]]],"~$order-bys",["^ ","^?J",null,"^5",["^ ","^7","metabase/lib/js.cljs","^8",140,"^9",16,"^:",140,"^;",25,"^?T",true,"^?R",["^1B",["^?U",["^1B",[["^@0","^@1"]]]]],"^6","Get the order-by clauses (as an array of opaque objects) in `a-query` at a given `stage-number`.\n  Returns an empty array if there are no order bys in the query."],"^K","^2X","^7","metabase/lib/js.cljs","^;",25,"^?O",["^1B",[["^@0","^@1"]]],"^?V",null,"^?T",true,"^?S",["^1B",[null,null]],"^9",1,"^?L",false,"^8",140,"^@3","^@;","^:",140,"^?N",2,"^?Z",true,"^?R",["^1B",["^?U",["^1B",[["^@0","^@1"]]]]],"^6","Get the order-by clauses (as an array of opaque objects) in `a-query` at a given `stage-number`.\n  Returns an empty array if there are no order bys in the query."],"~$display-info",["^ ","^?J",null,"^5",["^ ","^7","metabase/lib/js.cljs","^8",115,"^9",16,"^:",115,"^;",28,"^?T",true,"^?R",["^1B",["^?U",["^1B",[["^@0","^@1","~$x"]]]]],"^6","Given an opaque Cljs object, return a plain JS object with info you'd need to implement UI for it.\n  See `:metabase.lib.metadata.calculation/display-info` for the keys this might contain. Note that the JS versions of\n  the keys are converted to the equivalent `camelCase` strings from the original `:kebab-case`."],"^K","^5B","^7","metabase/lib/js.cljs","^;",28,"^?O",["^1B",[["^@0","^@1","~$x"]]],"^?V",null,"^?T",true,"^?S",["^1B",[null,null]],"^9",1,"^?L",false,"^8",115,"^@3","^?Y","^:",115,"^?N",3,"^?Z",true,"^?R",["^1B",["^?U",["^1B",[["^@0","^@1","~$x"]]]]],"^6","Given an opaque Cljs object, return a plain JS object with info you'd need to implement UI for it.\n  See `:metabase.lib.metadata.calculation/display-info` for the keys this might contain. Note that the JS versions of\n  the keys are converted to the equivalent `camelCase` strings from the original `:kebab-case`."],"~$fieldable-columns",["^ ","^?J",null,"^5",["^ ","^7","metabase/lib/js.cljs","^8",394,"^9",16,"^:",394,"^;",33,"^?T",true,"^?R",["^1B",["^?U",["^1B",[["^@0","^@1"]]]]],"^6","Return a sequence of column metadatas for columns that you can specify in the `:fields` of a query."],"^K","^5E","^7","metabase/lib/js.cljs","^;",33,"^?O",["^1B",[["^@0","^@1"]]],"^?V",null,"^?T",true,"^?S",["^1B",[null,null]],"^9",1,"^?L",false,"^8",394,"^@3","^@;","^:",394,"^?N",2,"^?Z",true,"^?R",["^1B",["^?U",["^1B",[["^@0","^@1"]]]]],"^6","Return a sequence of column metadatas for columns that you can specify in the `:fields` of a query."],"~$template-tags",["^ ","^?J",null,"^5",["^ ","^7","metabase/lib/js.cljs","^8",589,"^9",16,"^:",589,"^;",29,"^?T",true,"^?R",["^1B",["^?U",["^1B",[["^@0"]]]]],"^6","Returns the native query's template tags"],"^K","^30","^7","metabase/lib/js.cljs","^;",29,"^?O",["^1B",[["^@0"]]],"^?V",null,"^?T",true,"^?S",["^1B",[null,null]],"^9",1,"^?L",false,"^8",589,"^@3","^?Y","^:",589,"^?N",1,"^?Z",true,"^?R",["^1B",["^?U",["^1B",[["^@0"]]]]],"^6","Returns the native query's template tags"],"~$selected-aggregation-operators",["^ ","^?J",null,"^5",["^ ","^7","metabase/lib/js.cljs","^8",344,"^9",16,"^:",344,"^;",46,"^?T",true,"^?R",["^1B",["^?U",["^1B",[["~$agg-operators","~$agg-clause"]]]]],"^6","Mark the operator and the column (if any) in `agg-operators` selected by `agg-clause`."],"^K","^66","^7","metabase/lib/js.cljs","^;",46,"^?O",["^1B",[["^AQ","^AR"]]],"^?V",null,"^?T",true,"^?S",["^1B",[null,null]],"^9",1,"^?L",false,"^8",344,"^@3","^@;","^:",344,"^?N",2,"^?Z",true,"^?R",["^1B",["^?U",["^1B",[["^AQ","^AR"]]]]],"^6","Mark the operator and the column (if any) in `agg-operators` selected by `agg-clause`."],"~$order-by-clause",["^ ","^?J",null,"^5",["^ ","^7","metabase/lib/js.cljs","^;",31,"^?K",["^ ","^?L",false,"^?M",2,"^?N",2,"^?O",[["~$orderable"],["^AT","~$direction"]],"^?R",["^1B",[["^AT"],["^AT","^AU"]]],"^?S",["^1B",[null,null]]],"^?T",true,"^9",16,"^8",127,"^:",127,"^?R",["^1B",["^?U",["^1B",[["^AT"],["^AT","^AU"]]]]],"^6","Create an order-by clause independently of a query, e.g. for `replace` or whatever."],"^K","^55","^7","metabase/lib/js.cljs","^;",31,"^?K",["^ ","^?L",false,"^?M",2,"^?N",2,"^?O",[["^AT"],["^AT","^AU"]],"^?R",["^1B",[["^AT"],["^AT","^AU"]]],"^?S",["^1B",[null,null]]],"^?O",[["^AT"],["^AT","^AU"]],"^?V",null,"^?M",2,"^?T",true,"^?S",["^1B",[null,null]],"^9",1,"^?L",false,"^?W",[["^ ","^?M",1,"^?L",false,"^?X","^?Y"],["^ ","^?M",2,"^?L",false,"^?X","^?Y"]],"^8",127,"^:",127,"^?N",2,"^?Z",true,"^?R",["^1B",[["^AT"],["^AT","^AU"]]],"^6","Create an order-by clause independently of a query, e.g. for `replace` or whatever."],"~$filterable-columns",["^ ","^?J",null,"^5",["^ ","^7","metabase/lib/js.cljs","^8",349,"^9",16,"^:",349,"^;",34,"^?T",true,"^?R",["^1B",["^?U",["^1B",[["^@0","^@1"]]]]],"^6","Get the available filterable columns for the stage with `stage-number` of the query `a-query`."],"^K","^5G","^7","metabase/lib/js.cljs","^;",34,"^?O",["^1B",[["^@0","^@1"]]],"^?V",null,"^?T",true,"^?S",["^1B",[null,null]],"^9",1,"^?L",false,"^8",349,"^@3","^@;","^:",349,"^?N",2,"^?Z",true,"^?R",["^1B",["^?U",["^1B",[["^@0","^@1"]]]]],"^6","Get the available filterable columns for the stage with `stage-number` of the query `a-query`."],"~$join-condition-rhs-columns",["^ ","^?J",null,"^5",["^ ","^7","metabase/lib/js.cljs","^8",433,"^9",16,"^:",433,"^;",42,"^?T",true,"^?R",["^1B",["^?U",["^1B",[["^@0","^@1","^@L","~$lhs-column-or-nil"]]]]],"^6","Get a sequence of columns that can be used as the right-hand-side (target column) in a join condition. This column\n  is the one that belongs to the thing being joined, `joinable`, which can be something like a\n  Table ([[metabase.lib.metadata/TableMetadata]]), Saved Question/Model ([[metabase.lib.metadata/CardMetadata]]),\n  another query, etc. -- anything you can pass to [[join-clause]].\n\n  If the lhs-hand-side column has already been chosen (they can be chosen in any order in the Query Builder UI),\n  pass in the chosen LHS column. In the future, this may be used to restrict results to compatible columns. (See #31174)\n\n  Results will be returned in a 'somewhat smart' order with PKs and FKs returned before other columns."],"^K","^5K","^7","metabase/lib/js.cljs","^;",42,"^?O",["^1B",[["^@0","^@1","^@L","^AX"]]],"^?V",null,"^?T",true,"^?S",["^1B",[null,null]],"^9",1,"^?L",false,"^8",433,"^@3","^@;","^:",433,"^?N",4,"^?Z",true,"^?R",["^1B",["^?U",["^1B",[["^@0","^@1","^@L","^AX"]]]]],"^6","Get a sequence of columns that can be used as the right-hand-side (target column) in a join condition. This column\n  is the one that belongs to the thing being joined, `joinable`, which can be something like a\n  Table ([[metabase.lib.metadata/TableMetadata]]), Saved Question/Model ([[metabase.lib.metadata/CardMetadata]]),\n  another query, etc. -- anything you can pass to [[join-clause]].\n\n  If the lhs-hand-side column has already been chosen (they can be chosen in any order in the Query Builder UI),\n  pass in the chosen LHS column. In the future, this may be used to restrict results to compatible columns. (See #31174)\n\n  Results will be returned in a 'somewhat smart' order with PKs and FKs returned before other columns."],"~$filters",["^ ","^?J",null,"^5",["^ ","^7","metabase/lib/js.cljs","^8",375,"^9",16,"^:",375,"^;",23,"^?T",true,"^?R",["^1B",["^?U",["^1B",[["^@0","^@1"]]]]],"^6","Returns the current filters in stage with `stage-number` of `query`.\n  Logicaly, the filter attached to the query is the conjunction of the expressions\n  in the returned list. If the returned list is empty, then there is no filter\n  attached to the query."],"^K","^5P","^7","metabase/lib/js.cljs","^;",23,"^?O",["^1B",[["^@0","^@1"]]],"^?V",null,"^?T",true,"^?S",["^1B",[null,null]],"^9",1,"^?L",false,"^8",375,"^@3","^@;","^:",375,"^?N",2,"^?Z",true,"^?R",["^1B",["^?U",["^1B",[["^@0","^@1"]]]]],"^6","Returns the current filters in stage with `stage-number` of `query`.\n  Logicaly, the filter attached to the query is the conjunction of the expressions\n  in the returned list. If the returned list is empty, then there is no filter\n  attached to the query."],"~$join-condition-lhs-columns",["^ ","^?J",null,"^5",["^ ","^7","metabase/lib/js.cljs","^8",415,"^9",16,"^:",415,"^;",42,"^?T",true,"^?R",["^1B",["^?U",["^1B",[["^@0","^@1","~$existing-join-or-nil","~$rhs-column-or-nil"]]]]],"^6","Get a sequence of columns that can be used as the left-hand-side (source column) in a join condition. This column\n  is the one that comes from the source Table/Card/previous stage of the query or a previous join.\n\n  If you are changing the LHS of a condition for an existing join, pass in that existing join as\n  `existing-join-or-nil` so we can filter out the columns added by it (it doesn't make sense to present the columns\n  added by a join as options for its own LHS). Otherwise pass `nil` when building a new join. See #32005 for more\n  info.\n\n  If the right-hand-side column has already been chosen (they can be chosen in any order in the Query Builder UI),\n  pass in the chosen RHS column. In the future, this may be used to restrict results to compatible columns. (See #31174)\n\n  Results will be returned in a 'somewhat smart' order with PKs and FKs returned before other columns.\n\n  Unlike most other things that return columns, implicitly-joinable columns ARE NOT returned here."],"^K","^5Q","^7","metabase/lib/js.cljs","^;",42,"^?O",["^1B",[["^@0","^@1","^A[","^B0"]]],"^?V",null,"^?T",true,"^?S",["^1B",[null,null]],"^9",1,"^?L",false,"^8",415,"^@3","^@;","^:",415,"^?N",4,"^?Z",true,"^?R",["^1B",["^?U",["^1B",[["^@0","^@1","^A[","^B0"]]]]],"^6","Get a sequence of columns that can be used as the left-hand-side (source column) in a join condition. This column\n  is the one that comes from the source Table/Card/previous stage of the query or a previous join.\n\n  If you are changing the LHS of a condition for an existing join, pass in that existing join as\n  `existing-join-or-nil` so we can filter out the columns added by it (it doesn't make sense to present the columns\n  added by a join as options for its own LHS). Otherwise pass `nil` when building a new join. See #32005 for more\n  info.\n\n  If the right-hand-side column has already been chosen (they can be chosen in any order in the Query Builder UI),\n  pass in the chosen RHS column. In the future, this may be used to restrict results to compatible columns. (See #31174)\n\n  Results will be returned in a 'somewhat smart' order with PKs and FKs returned before other columns.\n\n  Unlike most other things that return columns, implicitly-joinable columns ARE NOT returned here."],"~$table-or-card-metadata",["^ ","^?J",null,"^5",["^ ","^7","metabase/lib/js.cljs","^8",631,"^9",16,"^:",631,"^;",38,"^?T",true,"^?R",["^1B",["^?U",["^1B",[["~$query-or-metadata-provider","~$table-id"]]]]],"^6","Get TableMetadata if passed an integer `table-id`, or CardMetadata if passed a legacy-style `card__<id>` string.\n  Returns `nil` if no matching metadata is found."],"^K","^4P","^7","metabase/lib/js.cljs","^;",38,"^?O",["^1B",[["^B2","^B3"]]],"^?V",null,"^?T",true,"^?S",["^1B",[null,null]],"^9",1,"^?L",false,"^8",631,"^@3","^?Y","^:",631,"^?N",2,"^?Z",true,"^?R",["^1B",["^?U",["^1B",[["^B2","^B3"]]]]],"^6","Get TableMetadata if passed an integer `table-id`, or CardMetadata if passed a legacy-style `card__<id>` string.\n  Returns `nil` if no matching metadata is found."],"~$orderable-columns",["^ ","^?J",null,"^5",["^ ","^7","metabase/lib/js.cljs","^8",109,"^9",16,"^:",109,"^;",33,"^?T",true,"^?R",["^1B",["^?U",["^1B",[["^@0","^@1"]]]]],"^6","Return a sequence of Column metadatas about the columns you can add order bys for in a given stage of `a-query.` To\n  add an order by, pass the result to [[order-by]]."],"^K","^2N","^7","metabase/lib/js.cljs","^;",33,"^?O",["^1B",[["^@0","^@1"]]],"^?V",null,"^?T",true,"^?S",["^1B",[null,null]],"^9",1,"^?L",false,"^8",109,"^@3","^@;","^:",109,"^?N",2,"^?Z",true,"^?R",["^1B",["^?U",["^1B",[["^@0","^@1"]]]]],"^6","Return a sequence of Column metadatas about the columns you can add order bys for in a given stage of `a-query.` To\n  add an order by, pass the result to [[order-by]]."],"~$suggestedName",["^ ","^?J",null,"^5",["^ ","^7","metabase/lib/js.cljs","^8",52,"^9",16,"^:",52,"^;",29,"^?T",true,"^?R",["^1B",["^?U",["^1B",[["^@5"]]]]],"^6","Return a nice description of a query."],"^K","^5@","^7","metabase/lib/js.cljs","^;",29,"^?O",["^1B",[["^@5"]]],"^?V",null,"^?T",true,"^?S",["^1B",[null,null]],"^9",1,"^?L",false,"^8",52,"^@3","^?Y","^:",52,"^?N",1,"^?Z",true,"^?R",["^1B",["^?U",["^1B",[["^@5"]]]]],"^6","Return a nice description of a query."],"~$metadataProvider",["^ ","^?J",null,"^5",["^ ","^7","metabase/lib/js.cljs","^8",66,"^9",16,"^:",66,"^;",32,"^?T",true,"^?R",["^1B",["^?U",["^1B",[["^@6","^@7"]]]]],"^6","Convert metadata to a metadata provider if it is not one already."],"^K","^63","^7","metabase/lib/js.cljs","^;",32,"^?O",["^1B",[["^@6","^@7"]]],"^?V",null,"^?T",true,"^?S",["^1B",[null,null]],"^9",1,"^?L",false,"^8",66,"^@3",["^I",[null,"~$metabase.lib.js.metadata/t_metabase$lib$js$metadata65074"]],"^:",66,"^?N",2,"^?Z",true,"^?R",["^1B",["^?U",["^1B",[["^@6","^@7"]]]]],"^6","Convert metadata to a metadata provider if it is not one already."],"~$filter-clause",["^ ","^?J",null,"^5",["^ ","^7","metabase/lib/js.cljs","^;",29,"^?K",["^ ","^?L",true,"^?M",2,"^?N",2,"^?O",[["^1B",["^?[","^A<","~$args"]]],"^?R",["^1B",[["^?[","^A<","~$&","^B9"]]],"^?S",["^1B",[null]]],"^?T",true,"^9",16,"^8",359,"^:",359,"^?R",["^1B",["^?U",["^1B",[["^?[","^A<","~$&","^B9"]]]]],"^6","Returns a standalone filter clause for a `filter-operator`,\n  a `column`, and arguments."],"^K","^3W","^7","metabase/lib/js.cljs","^;",29,"^?K",["^ ","^?L",true,"^?M",2,"^?N",2,"^?O",[["^1B",["^?[","^A<","^B9"]]],"^?R",["^1B",[["^?[","^A<","~$&","^B9"]]],"^?S",["^1B",[null]]],"^?O",[["^1B",["^?[","^A<","^B9"]]],"^?V",null,"^?M",2,"^?T",true,"^?S",["^1B",[null]],"^9",1,"^?L",true,"^?W",[["^ ","^?M",2,"^?L",true,"^?X","^?Y"]],"^8",359,"^@3","^?Y","^:",359,"^?N",2,"^?Z",true,"^?R",["^1B",[["^?[","^A<","~$&","^B9"]]],"^6","Returns a standalone filter clause for a `filter-operator`,\n  a `column`, and arguments."],"~$fields",["^ ","^?J",null,"^5",["^ ","^7","metabase/lib/js.cljs","^8",383,"^9",16,"^:",383,"^;",22,"^?T",true,"^?R",["^1B",["^?U",["^1B",[["^@0","^@1"]]]]],"^6","Get the current `:fields` in a query. Unlike the lib core version, this will return an empty sequence if `:fields` is\n  not specified rather than `nil` for JS-friendliness."],"^K","^3X","^7","metabase/lib/js.cljs","^;",22,"^?O",["^1B",[["^@0","^@1"]]],"^?V",null,"^?T",true,"^?S",["^1B",[null,null]],"^9",1,"^?L",false,"^8",383,"^@3","^@;","^:",383,"^?N",2,"^?Z",true,"^?R",["^1B",["^?U",["^1B",[["^@0","^@1"]]]]],"^6","Get the current `:fields` in a query. Unlike the lib core version, this will return an empty sequence if `:fields` is\n  not specified rather than `nil` for JS-friendliness."],"~$available-aggregation-operators",["^ ","^?J",null,"^5",["^ ","^7","metabase/lib/js.cljs","^8",330,"^9",16,"^:",330,"^;",47,"^?T",true,"^?R",["^1B",["^?U",["^1B",[["^@0","^@1"]]]]],"^6","Get the available aggregation operators for the stage with `stage-number` of\n  the query `a-query`.\n  If `stage-number` is omitted, the last stage is used."],"^K","^43","^7","metabase/lib/js.cljs","^;",47,"^?O",["^1B",[["^@0","^@1"]]],"^?V",null,"^?T",true,"^?S",["^1B",[null,null]],"^9",1,"^?L",false,"^8",330,"^@3","^@;","^:",330,"^?N",2,"^?Z",true,"^?R",["^1B",["^?U",["^1B",[["^@0","^@1"]]]]],"^6","Get the available aggregation operators for the stage with `stage-number` of\n  the query `a-query`.\n  If `stage-number` is omitted, the last stage is used."],"~$breakouts",["^ ","^?J",null,"^5",["^ ","^7","metabase/lib/js.cljs","^8",158,"^9",16,"^:",158,"^;",25,"^?T",true,"^?R",["^1B",["^?U",["^1B",[["^@0","^@1"]]]]],"^6","Get the breakout clauses (as an array of opaque objects) in `a-query` at a given `stage-number`.\n  Returns an empty array if there are no order bys in the query."],"^K","^3B","^7","metabase/lib/js.cljs","^;",25,"^?O",["^1B",[["^@0","^@1"]]],"^?V",null,"^?T",true,"^?S",["^1B",[null,null]],"^9",1,"^?L",false,"^8",158,"^@3","^@;","^:",158,"^?N",2,"^?Z",true,"^?R",["^1B",["^?U",["^1B",[["^@0","^@1"]]]]],"^6","Get the breakout clauses (as an array of opaque objects) in `a-query` at a given `stage-number`.\n  Returns an empty array if there are no order bys in the query."],"~$joinable-columns",["^ ","^?J",null,"^5",["^ ","^7","metabase/lib/js.cljs","^8",624,"^9",16,"^:",624,"^;",32,"^?T",true,"^?R",["^1B",["^?U",["^1B",[["^@0","^@1","^@R"]]]]],"^6","Return information about the fields that you can pass to [[with-join-fields]] when constructing a join against\n  something [[Joinable]] (i.e., a Table or Card) or manipulating an existing join. When passing in a join, currently\n  selected columns (those in the join's `:fields`) will include `:selected true` information."],"^K","^46","^7","metabase/lib/js.cljs","^;",32,"^?O",["^1B",[["^@0","^@1","^@R"]]],"^?V",null,"^?T",true,"^?S",["^1B",[null,null]],"^9",1,"^?L",false,"^8",624,"^@3","^@;","^:",624,"^?N",3,"^?Z",true,"^?R",["^1B",["^?U",["^1B",[["^@0","^@1","^@R"]]]]],"^6","Return information about the fields that you can pass to [[with-join-fields]] when constructing a join against\n  something [[Joinable]] (i.e., a Table or Card) or manipulating an existing join. When passing in a join, currently\n  selected columns (those in the join's `:fields`) will include `:selected true` information."],"~$group-columns",["^ ","^?J",null,"^5",["^ ","^7","metabase/lib/js.cljs","^8",259,"^9",16,"^:",259,"^;",29,"^?T",true,"^?R",["^1B",["^?U",["^1B",[["~$column-metadatas"]]]]],"^6","Given a group of columns returned by a function like [[metabase.lib.js/orderable-columns]], group the columns\n  by Table or equivalent (e.g. Saved Question) so that they're in an appropriate shape for showing in the Query\n  Builder. e.g a sequence of columns like\n\n    [venues.id\n     venues.name\n     venues.category-id\n     ;; implicitly joinable\n     categories.id\n     categories.name]\n\n  would get grouped into groups like\n\n    [{::columns [venues.id\n                 venues.name\n                 venues.category-id]}\n     {::columns [categories.id\n                 categories.name]}]\n\n  Groups have the type `:metadata/column-group` and can be passed directly\n  to [[metabase.lib.js/display-info]].\n  Use [[metabase.lib.js/columns-group-columns]] to extract the columns from a group."],"^K","^3D","^7","metabase/lib/js.cljs","^;",29,"^?O",["^1B",[["^B?"]]],"^?V",null,"^?T",true,"^?S",["^1B",[null,null]],"^9",1,"^?L",false,"^8",259,"^@3","^@;","^:",259,"^?N",1,"^?Z",true,"^?R",["^1B",["^?U",["^1B",[["^B?"]]]]],"^6","Given a group of columns returned by a function like [[metabase.lib.js/orderable-columns]], group the columns\n  by Table or equivalent (e.g. Saved Question) so that they're in an appropriate shape for showing in the Query\n  Builder. e.g a sequence of columns like\n\n    [venues.id\n     venues.name\n     venues.category-id\n     ;; implicitly joinable\n     categories.id\n     categories.name]\n\n  would get grouped into groups like\n\n    [{::columns [venues.id\n                 venues.name\n                 venues.category-id]}\n     {::columns [categories.id\n                 categories.name]}]\n\n  Groups have the type `:metadata/column-group` and can be passed directly\n  to [[metabase.lib.js/display-info]].\n  Use [[metabase.lib.js/columns-group-columns]] to extract the columns from a group."],"~$describe-temporal-unit",["^ ","^?J",null,"^5",["^ ","^7","metabase/lib/js.cljs","^8",290,"^9",16,"^:",290,"^;",38,"^?T",true,"^?R",["^1B",["^?U",["^1B",[["~$n","^AJ"]]]]],"^6","Get a translated description of a temporal bucketing unit."],"^K","^5U","^7","metabase/lib/js.cljs","^;",38,"^?O",["^1B",[["~$n","^AJ"]]],"^?V",null,"^?T",true,"^?S",["^1B",[null,null]],"^9",1,"^?L",false,"^8",290,"^@3","^?Y","^:",290,"^?N",2,"^?Z",true,"^?R",["^1B",["^?U",["^1B",[["~$n","^AJ"]]]]],"^6","Get a translated description of a temporal bucketing unit."],"~$joins",["^ ","^?J",null,"^5",["^ ","^7","metabase/lib/js.cljs","^8",515,"^9",16,"^:",515,"^;",21,"^?T",true,"^?R",["^1B",["^?U",["^1B",[["^@0","^@1"]]]]],"^6","Get the joins associated with a particular query stage."],"^K","^2K","^7","metabase/lib/js.cljs","^;",21,"^?O",["^1B",[["^@0","^@1"]]],"^?V",null,"^?T",true,"^?S",["^1B",[null,null]],"^9",1,"^?L",false,"^8",515,"^@3","^@;","^:",515,"^?N",2,"^?Z",true,"^?R",["^1B",["^?U",["^1B",[["^@0","^@1"]]]]],"^6","Get the joins associated with a particular query stage."],"~$native-query",["^ ","^?J",null,"^5",["^ ","^7","metabase/lib/js.cljs","^8",566,"^9",16,"^:",566,"^;",28,"^?T",true,"^?R",["^1B",["^?U",["^1B",[["^@6","^@7","~$inner-query"]]]]],"^6","Create a new native query.\n\n  Native in this sense means a pMBQL query with a first stage that is a native query."],"^K","^4=","^7","metabase/lib/js.cljs","^;",28,"^?O",["^1B",[["^@6","^@7","^BC"]]],"^?V",null,"^?T",true,"^?S",["^1B",[null,null]],"^9",1,"^?L",false,"^8",566,"^@3","^?Y","^:",566,"^?N",3,"^?Z",true,"^?R",["^1B",["^?U",["^1B",[["^@6","^@7","^BC"]]]]],"^6","Create a new native query.\n\n  Native in this sense means a pMBQL query with a first stage that is a native query."],"~$available-join-strategies",["^ ","^?J",null,"^5",["^ ","^7","metabase/lib/js.cljs","^8",409,"^9",16,"^:",409,"^;",41,"^?T",true,"^?R",["^1B",["^?U",["^1B",[["^@0","^@1"]]]]],"^6","Get available join strategies for the current Database (based on the Database's\n  supported [[metabase.driver/driver-features]]) as opaque JoinStrategy objects."],"^K","^5Z","^7","metabase/lib/js.cljs","^;",41,"^?O",["^1B",[["^@0","^@1"]]],"^?V",null,"^?T",true,"^?S",["^1B",[null,null]],"^9",1,"^?L",false,"^8",409,"^@3","^@;","^:",409,"^?N",2,"^?Z",true,"^?R",["^1B",["^?U",["^1B",[["^@0","^@1"]]]]],"^6","Get available join strategies for the current Database (based on the Database's\n  supported [[metabase.driver/driver-features]]) as opaque JoinStrategy objects."],"~$legacy-query",["^ ","^?J",null,"^5",["^ ","^7","metabase/lib/js.cljs","^8",94,"^9",16,"^:",94,"^;",28,"^?T",true,"^?R",["^1B",["^?U",["^1B",[["^@8"]]]]],"^6","Coerce a CLJS pMBQL query back to (1) a legacy query (2) in vanilla JS."],"^K","^2S","^7","metabase/lib/js.cljs","^;",28,"^?O",["^1B",[["^@8"]]],"^?V",null,"^?T",true,"^?S",["^1B",[null,null]],"^9",1,"^?L",false,"^8",94,"^@3","^?Y","^:",94,"^?N",1,"^?Z",true,"^?R",["^1B",["^?U",["^1B",[["^@8"]]]]],"^6","Coerce a CLJS pMBQL query back to (1) a legacy query (2) in vanilla JS."],"~$with-native-extras",["^ ","^?J",null,"^5",["^ ","^7","metabase/lib/js.cljs","^8",607,"^9",16,"^:",607,"^;",34,"^?T",true,"^?R",["^1B",["^?U",["^1B",[["^@0","^@S"]]]]],"^6","Updates the extras required for the db to run this query.\n   The first stage must be a native type. Will ignore extras not in `required-native-extras`"],"^K","^64","^7","metabase/lib/js.cljs","^;",34,"^?O",["^1B",[["^@0","^@S"]]],"^?V",null,"^?T",true,"^?S",["^1B",[null,null]],"^9",1,"^?L",false,"^8",607,"^@3","^?Y","^:",607,"^?N",2,"^?Z",true,"^?R",["^1B",["^?U",["^1B",[["^@0","^@S"]]]]],"^6","Updates the extras required for the db to run this query.\n   The first stage must be a native type. Will ignore extras not in `required-native-extras`"],"~$join-strategy",["^ ","^?J",null,"^5",["^ ","^7","metabase/lib/js.cljs","^8",399,"^9",16,"^:",399,"^;",29,"^?T",true,"^?R",["^1B",["^?U",["^1B",[["^@="]]]]],"^6","Get the strategy (type) of a given join as an opaque JoinStrategy object."],"^K","^6R","^7","metabase/lib/js.cljs","^;",29,"^?O",["^1B",[["^@="]]],"^?V",null,"^?T",true,"^?S",["^1B",[null,null]],"^9",1,"^?L",false,"^8",399,"^@3","^?Y","^:",399,"^?N",1,"^?Z",true,"^?R",["^1B",["^?U",["^1B",[["^@="]]]]],"^6","Get the strategy (type) of a given join as an opaque JoinStrategy object."],"~$picker-info",["^ ","^?J",null,"^5",["^ ","^7","metabase/lib/js.cljs","^8",544,"^9",16,"^:",544,"^;",27,"^?T",true,"^?R",["^1B",["^?U",["^1B",[["^@0","^@7"]]]]],"^6","Temporary solution providing access to internal IDs for the FE to pass on to MLv1 functions."],"^K","^4M","^7","metabase/lib/js.cljs","^;",27,"^?O",["^1B",[["^@0","^@7"]]],"^?V",null,"^?T",true,"^?S",["^1B",[null,null]],"^9",1,"^?L",false,"^8",544,"^:",544,"^?N",2,"^?Z",true,"^?R",["^1B",["^?U",["^1B",[["^@0","^@7"]]]]],"^6","Temporary solution providing access to internal IDs for the FE to pass on to MLv1 functions."],"~$aggregation-operator-columns",["^ ","^?J",null,"^5",["^ ","^7","metabase/lib/js.cljs","^8",337,"^9",16,"^:",337,"^;",44,"^?T",true,"^?R",["^1B",["^?U",["^1B",[["^A;"]]]]],"^6","Get the columns `aggregation-operator` can be applied to.\n  The columns are valid for the stage of the query that was used in\n  [[available-binning-strategies]] to get `available-aggregation`."],"^K","^5V","^7","metabase/lib/js.cljs","^;",44,"^?O",["^1B",[["^A;"]]],"^?V",null,"^?T",true,"^?S",["^1B",[null,null]],"^9",1,"^?L",false,"^8",337,"^@3","^@;","^:",337,"^?N",1,"^?Z",true,"^?R",["^1B",["^?U",["^1B",[["^A;"]]]]],"^6","Get the columns `aggregation-operator` can be applied to.\n  The columns are valid for the stage of the query that was used in\n  [[available-binning-strategies]] to get `available-aggregation`."],"~$join-condition-operators",["^ ","^?J",null,"^5",["^ ","^7","metabase/lib/js.cljs","^8",446,"^9",16,"^:",446,"^;",40,"^?T",true,"^?R",["^1B",["^?U",["^1B",[["^@0","^@1","^AX","^B0"]]]]],"^6","Return a sequence of valid filter clause operators that can be used to build a join condition. In the Query Builder\n  UI, this can be chosen at any point before or after choosing the LHS and RHS. Invalid options are not currently\n  filtered out based on values of the LHS or RHS, but in the future we can add this -- see #31174."],"^K","^4I","^7","metabase/lib/js.cljs","^;",40,"^?O",["^1B",[["^@0","^@1","^AX","^B0"]]],"^?V",null,"^?T",true,"^?S",["^1B",[null,null]],"^9",1,"^?L",false,"^8",446,"^@3","^@;","^:",446,"^?N",4,"^?Z",true,"^?R",["^1B",["^?U",["^1B",[["^@0","^@1","^AX","^B0"]]]]],"^6","Return a sequence of valid filter clause operators that can be used to build a join condition. In the Query Builder\n  UI, this can be chosen at any point before or after choosing the LHS and RHS. Invalid options are not currently\n  filtered out based on values of the LHS or RHS, but in the future we can add this -- see #31174."],"~$expressionable-columns",["^ ","^?J",null,"^5",["^ ","^7","metabase/lib/js.cljs","^;",38,"^?K",["^ ","^?L",false,"^?M",3,"^?N",3,"^?O",[["^@0","~$expression-position"],["^@0","^@1","^BL"]],"^?R",["^1B",[["^@0","^BL"],["^@0","^@1","^BL"]]],"^?S",["^1B",[null,null]]],"^?T",true,"^9",16,"^8",463,"^:",463,"^?R",["^1B",["^?U",["^1B",[["^@0","^BL"],["^@0","^@1","^BL"]]]]],"^6","Return an array of Column metadatas about the columns that can be used in an expression in a given stage of `a-query`.\n   Pass the current `expression-position` or `null` for new expressions."],"^K","^56","^7","metabase/lib/js.cljs","^;",38,"^?K",["^ ","^?L",false,"^?M",3,"^?N",3,"^?O",[["^@0","^BL"],["^@0","^@1","^BL"]],"^?R",["^1B",[["^@0","^BL"],["^@0","^@1","^BL"]]],"^?S",["^1B",[null,null]]],"^?O",[["^@0","^BL"],["^@0","^@1","^BL"]],"^?V",null,"^?M",3,"^?T",true,"^?S",["^1B",[null,null]],"^9",1,"^?L",false,"^?W",[["^ ","^?M",2,"^?L",false,"^?X","^?Y"],["^ ","^?M",3,"^?L",false,"^?X","^@;"]],"^8",463,"^:",463,"^?N",3,"^?Z",true,"^?R",["^1B",[["^@0","^BL"],["^@0","^@1","^BL"]]],"^6","Return an array of Column metadatas about the columns that can be used in an expression in a given stage of `a-query`.\n   Pass the current `expression-position` or `null` for new expressions."],"^J",["^ ","^?J",null,"^5",["^ ","^7","metabase/lib/js.cljs","^8",370,"^9",16,"^:",370,"^;",22,"^?T",true,"^?R",["^1B",["^?U",["^1B",[["^@0","^@1","~$boolean-expression"]]]]],"^6","Sets `boolean-expression` as a filter on `query`."],"^K","^5M","^7","metabase/lib/js.cljs","^;",22,"^?O",["^1B",[["^@0","^@1","^BM"]]],"^?V",null,"^?T",true,"^?S",["^1B",[null,null]],"^9",1,"^?L",false,"^8",370,"^@3","^?Y","^:",370,"^?N",3,"^?Z",true,"^?R",["^1B",["^?U",["^1B",[["^@0","^@1","^BM"]]]]],"^6","Sets `boolean-expression` as a filter on `query`."],"~$change-direction",["^ ","^?J",null,"^5",["^ ","^7","metabase/lib/js.cljs","^8",146,"^9",16,"^:",146,"^;",32,"^?T",true,"^?R",["^1B",["^?U",["^1B",[["^@0","~$current-order-by"]]]]],"^6","Flip the direction of `current-order-by` in `a-query`."],"^K","^5=","^7","metabase/lib/js.cljs","^;",32,"^?O",["^1B",[["^@0","^BO"]]],"^?V",null,"^?T",true,"^?S",["^1B",[null,null]],"^9",1,"^?L",false,"^8",146,"^@3","^?Y","^:",146,"^?N",2,"^?Z",true,"^?R",["^1B",["^?U",["^1B",[["^@0","^BO"]]]]],"^6","Flip the direction of `current-order-by` in `a-query`."],"~$with-template-tags",["^ ","^?J",null,"^5",["^ ","^7","metabase/lib/js.cljs","^8",579,"^9",16,"^:",579,"^;",34,"^?T",true,"^?R",["^1B",["^?U",["^1B",[["^@0","~$tags"]]]]],"^6","Updates the native query's template tags."],"^K","^3R","^7","metabase/lib/js.cljs","^;",34,"^?O",["^1B",[["^@0","^BQ"]]],"^?V",null,"^?T",true,"^?S",["^1B",[null,null]],"^9",1,"^?L",false,"^8",579,"^@3","^?Y","^:",579,"^?N",2,"^?Z",true,"^?R",["^1B",["^?U",["^1B",[["^@0","^BQ"]]]]],"^6","Updates the native query's template tags."],"~$expressions",["^ ","^?J",null,"^5",["^ ","^7","metabase/lib/js.cljs","^8",458,"^9",16,"^:",458,"^;",27,"^?T",true,"^?R",["^1B",["^?U",["^1B",[["^@0","^@1"]]]]],"^6","Get the expressions map from a given stage of a `query`."],"^K","^5D","^7","metabase/lib/js.cljs","^;",27,"^?O",["^1B",[["^@0","^@1"]]],"^?V",null,"^?T",true,"^?S",["^1B",[null,null]],"^9",1,"^?L",false,"^8",458,"^@3","^@;","^:",458,"^?N",2,"^?Z",true,"^?R",["^1B",["^?U",["^1B",[["^@0","^@1"]]]]],"^6","Get the expressions map from a given stage of a `query`."],"~$with-join-strategy",["^ ","^?J",null,"^5",["^ ","^7","metabase/lib/js.cljs","^8",404,"^9",16,"^:",404,"^;",34,"^?T",true,"^?R",["^1B",["^?U",["^1B",[["^@=","~$strategy"]]]]],"^6","Return a copy of `a-join` with its `:strategy` set to an opaque JoinStrategy."],"^K","^2>","^7","metabase/lib/js.cljs","^;",34,"^?O",["^1B",[["^@=","^BT"]]],"^?V",null,"^?T",true,"^?S",["^1B",[null,null]],"^9",1,"^?L",false,"^8",404,"^@3","^?Y","^:",404,"^?N",2,"^?Z",true,"^?R",["^1B",["^?U",["^1B",[["^@=","^BT"]]]]],"^6","Return a copy of `a-join` with its `:strategy` set to an opaque JoinStrategy."],"~$order-by",["^ ","^?J",null,"^5",["^ ","^7","metabase/lib/js.cljs","^8",135,"^9",16,"^:",135,"^;",24,"^?T",true,"^?R",["^1B",["^?U",["^1B",[["^@0","^@1","^AT","^AU"]]]]],"^6","Add an `order-by` clause to `a-query`. Returns updated query."],"^K","^3V","^7","metabase/lib/js.cljs","^;",24,"^?O",["^1B",[["^@0","^@1","^AT","^AU"]]],"^?V",null,"^?T",true,"^?S",["^1B",[null,null]],"^9",1,"^?L",false,"^8",135,"^@3","^?Y","^:",135,"^?N",4,"^?Z",true,"^?R",["^1B",["^?U",["^1B",[["^@0","^@1","^AT","^AU"]]]]],"^6","Add an `order-by` clause to `a-query`. Returns updated query."],"~$describe-temporal-interval",["^ ","^?J",null,"^5",["^ ","^7","metabase/lib/js.cljs","^8",296,"^9",16,"^:",296,"^;",42,"^?T",true,"^?R",["^1B",["^?U",["^1B",[["~$n","^AJ"]]]]],"^6","Get a translated description of a temporal bucketing interval."],"^K","^38","^7","metabase/lib/js.cljs","^;",42,"^?O",["^1B",[["~$n","^AJ"]]],"^?V",null,"^?T",true,"^?S",["^1B",[null,null]],"^9",1,"^?L",false,"^8",296,"^@3","^?Y","^:",296,"^?N",2,"^?Z",true,"^?R",["^1B",["^?U",["^1B",[["~$n","^AJ"]]]]],"^6","Get a translated description of a temporal bucketing interval."],"~$breakout",["^ ","^?J",null,"^5",["^ ","^7","metabase/lib/js.cljs","^8",164,"^9",16,"^:",164,"^;",24,"^?T",true,"^?R",["^1B",["^?U",["^1B",[["^@0","^@1","~$x"]]]]],"^6","Add an `order-by` clause to `a-query`. Returns updated query."],"^K","^3@","^7","metabase/lib/js.cljs","^;",24,"^?O",["^1B",[["^@0","^@1","~$x"]]],"^?V",null,"^?T",true,"^?S",["^1B",[null,null]],"^9",1,"^?L",false,"^8",164,"^@3","^?Y","^:",164,"^?N",3,"^?Z",true,"^?R",["^1B",["^?U",["^1B",[["^@0","^@1","~$x"]]]]],"^6","Add an `order-by` clause to `a-query`. Returns updated query."],"^@6",["^ ","^?J",null,"^5",["^ ","^7","metabase/lib/js.cljs","^8",643,"^9",16,"^:",643,"^;",27,"^?T",true,"^?R",["^1B",["^?U",["^1B",[["^@0"]]]]],"^6","Get the Database ID (`:database`) associated with a query. If the query is using\n  the [[metabase.mbql.schema/saved-questions-virtual-database-id]] (used in some situations for queries with a\n  `:source-card`)\n\n    {:database -1337}\n\n  we will attempt to resolve the correct Database ID by getting metadata for the source Card and returning its\n  `:database-id`; if this is not available for one reason or another this will return `nil`."],"^K","^5J","^7","metabase/lib/js.cljs","^;",27,"^?O",["^1B",[["^@0"]]],"^?V",null,"^?T",true,"^?S",["^1B",[null,null]],"^9",1,"^?L",false,"^8",643,"^@3","^?Y","^:",643,"^?N",1,"^?Z",true,"^?R",["^1B",["^?U",["^1B",[["^@0"]]]]],"^6","Get the Database ID (`:database`) associated with a query. If the query is using\n  the [[metabase.mbql.schema/saved-questions-virtual-database-id]] (used in some situations for queries with a\n  `:source-card`)\n\n    {:database -1337}\n\n  we will attempt to resolve the correct Database ID by getting metadata for the source Card and returning its\n  `:database-id`; if this is not available for one reason or another this will return `nil`."],"~$required-native-extras",["^ ","^?J",null,"^5",["^ ","^7","metabase/lib/js.cljs","^8",594,"^9",16,"^:",594,"^;",38,"^?T",true,"^?R",["^1B",["^?U",["^1B",[["^@6","^@7"]]]]],"^6","Returns whether the extra keys required by the database."],"^K","^3>","^7","metabase/lib/js.cljs","^;",38,"^?O",["^1B",[["^@6","^@7"]]],"^?V",null,"^?T",true,"^?S",["^1B",[null,null]],"^9",1,"^?L",false,"^8",594,"^@3","^@;","^:",594,"^?N",2,"^?Z",true,"^?R",["^1B",["^?U",["^1B",[["^@6","^@7"]]]]],"^6","Returns whether the extra keys required by the database."],"~$remove-join",["^ ","^?J",null,"^5",["^ ","^7","metabase/lib/js.cljs","^8",530,"^9",16,"^:",530,"^;",27,"^?T",true,"^?R",["^1B",["^?U",["^1B",[["^@0","^@1","~$join-spec"]]]]],"^6","Remove the join specified by `join-spec` in `a-query` at `stage-number`.\n  The join can be specified either by itself (as returned by [[joins]]), by its alias\n  or by its index in the list of joins as returned by [[joins]].\n  If the specified join cannot be found, then `a-query` is returned as is.\n  Top level clauses containing references to the removed join are removed too."],"^K","^1Y","^7","metabase/lib/js.cljs","^;",27,"^?O",["^1B",[["^@0","^@1","^BZ"]]],"^?V",null,"^?T",true,"^?S",["^1B",[null,null]],"^9",1,"^?L",false,"^8",530,"^@3","^?Y","^:",530,"^?N",3,"^?Z",true,"^?R",["^1B",["^?U",["^1B",[["^@0","^@1","^BZ"]]]]],"^6","Remove the join specified by `join-spec` in `a-query` at `stage-number`.\n  The join can be specified either by itself (as returned by [[joins]]), by its alias\n  or by its index in the list of joins as returned by [[joins]].\n  If the specified join cannot be found, then `a-query` is returned as is.\n  Top level clauses containing references to the removed join are removed too."],"~$joined-thing",["^ ","^?J",null,"^5",["^ ","^7","metabase/lib/js.cljs","^8",539,"^9",16,"^:",539,"^;",28,"^?T",true,"^?R",["^1B",["^?U",["^1B",[["^@0","^@="]]]]],"^6","Return metadata about the origin of `join` using `metadata-providerable` as the source of information."],"^K","^3E","^7","metabase/lib/js.cljs","^;",28,"^?O",["^1B",[["^@0","^@="]]],"^?V",null,"^?T",true,"^?S",["^1B",[null,null]],"^9",1,"^?L",false,"^8",539,"^@3",["^I",["^?Y","^@?"]],"^:",539,"^?N",2,"^?Z",true,"^?R",["^1B",["^?U",["^1B",[["^@0","^@="]]]]],"^6","Return metadata about the origin of `join` using `metadata-providerable` as the source of information."],"~$with-native-query",["^ ","^?J",null,"^5",["^ ","^7","metabase/lib/js.cljs","^8",573,"^9",16,"^:",573,"^;",33,"^?T",true,"^?R",["^1B",["^?U",["^1B",[["^@0","^BC"]]]]],"^6","Update the raw native query, the first stage must already be a native type.\n   Replaces templates tags"],"^K","^2H","^7","metabase/lib/js.cljs","^;",33,"^?O",["^1B",[["^@0","^BC"]]],"^?V",null,"^?T",true,"^?S",["^1B",[null,null]],"^9",1,"^?L",false,"^8",573,"^@3","^?Y","^:",573,"^?N",2,"^?Z",true,"^?R",["^1B",["^?U",["^1B",[["^@0","^BC"]]]]],"^6","Update the raw native query, the first stage must already be a native type.\n   Replaces templates tags"],"~$breakoutable-columns",["^ ","^?J",null,"^5",["^ ","^7","metabase/lib/js.cljs","^8",151,"^9",16,"^:",151,"^;",36,"^?T",true,"^?R",["^1B",["^?U",["^1B",[["^@0","^@1"]]]]],"^6","Return an array of Column metadatas about the columns that can be broken out by in a given stage of `a-query.`\n  To break out by a given column, the corresponding element of the result has to be added to the query using\n  [[breakout]]."],"^K","^2J","^7","metabase/lib/js.cljs","^;",36,"^?O",["^1B",[["^@0","^@1"]]],"^?V",null,"^?T",true,"^?S",["^1B",[null,null]],"^9",1,"^?L",false,"^8",151,"^@3","^@;","^:",151,"^?N",2,"^?Z",true,"^?R",["^1B",["^?U",["^1B",[["^@0","^@1"]]]]],"^6","Return an array of Column metadatas about the columns that can be broken out by in a given stage of `a-query.`\n  To break out by a given column, the corresponding element of the result has to be added to the query using\n  [[breakout]]."],"~$rename-join",["^ ","^?J",null,"^5",["^ ","^7","metabase/lib/js.cljs","^8",520,"^9",16,"^:",520,"^;",27,"^?T",true,"^?R",["^1B",["^?U",["^1B",[["^@0","^@1","^BZ","~$new-name"]]]]],"^6","Rename the join specified by `join-spec` in `a-query` at `stage-number` to `new-name`.\n  The join can be specified either by itself (as returned by [[joins]]), by its alias\n  or by its index in the list of joins as returned by [[joins]].\n  If the specified join cannot be found, then `query` is returned as is.\n  If renaming the join to `new-name` would clash with an existing join, a\n  suffix is appended to `new-name` to make it unique."],"^K","^22","^7","metabase/lib/js.cljs","^;",27,"^?O",["^1B",[["^@0","^@1","^BZ","^C3"]]],"^?V",null,"^?T",true,"^?S",["^1B",[null,null]],"^9",1,"^?L",false,"^8",520,"^@3","^?Y","^:",520,"^?N",4,"^?Z",true,"^?R",["^1B",["^?U",["^1B",[["^@0","^@1","^BZ","^C3"]]]]],"^6","Rename the join specified by `join-spec` in `a-query` at `stage-number` to `new-name`.\n  The join can be specified either by itself (as returned by [[joins]]), by its alias\n  or by its index in the list of joins as returned by [[joins]].\n  If the specified join cannot be found, then `query` is returned as is.\n  If renaming the join to `new-name` would clash with an existing join, a\n  suffix is appended to `new-name` to make it unique."]],"^1@",["^ ","^@","^@","^U","^V","~$u","^W","^W","^W","^V","^V"],"~:cljs.analyzer/constants",["^ ","^1=",["^I",["~:args","~:lib/type","~:table","~:template-tags","~:else","~:warn","~:asc","~:fields","~:field","~:type","~:debug","~:keyword-fn","~:native","~:id","~:operator","~:database","~:options","~:query","~:keywordize-keys","~:dataset"]],"~:order",["^CG","^C>","^CF","^C?","^C9","^C@","^C7","^C;","^CA","^C8","^C<","^C=","^C6","^CD","^CB","^CH","^C:","^CC","^CE","^C5"]],"^1G",["^ ","^1>",["^I",[]]],"^1H",["^ "],"^1I",["^10","^@","^13","^X","^1;","^12","^15","^R","^Z","^T","^17","^16","^W","^V"]],"^O","^L","~:ns-specs",["^ "],"~:ns-spec-vars",["^I",[]],"~:compiler-options",["^6X",[["^CL","~:static-fns"],true,["^CL","~:shadow-tweaks"],null,["^CL","~:source-map-inline"],null,["^CL","~:elide-asserts"],true,["^CL","~:optimize-constants"],null,["^CL","^1N"],null,["^CL","~:external-config"],null,["^CL","~:tooling-config"],null,["^CL","~:emit-constants"],null,["^CL","~:load-tests"],false,["^CL","~:form-size-threshold"],null,["^CL","~:global-goog-object&array"],null,["^CL","~:data-readers"],null,["^CL","~:infer-externs"],"~:auto",["^CL","^1P"],["^I",["^1Q"]],["~:js-options","~:js-provider"],"^1>",["~:mode"],"~:release",["^CL","~:fn-invoke-direct"],null,["^CL","~:source-map"],null]]]