["^ ","~:output",["^ ","~:js","goog.provide('metabase.lib.metadata');\nmetabase.util.malli.registry.register_BANG_(new cljs.core.Keyword(\"metabase.lib.metadata\",\"column-source\",\"metabase.lib.metadata/column-source\",-458963769),new cljs.core.PersistentVector(null, 11, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"enum\",\"enum\",1679018432),new cljs.core.Keyword(\"source\",\"card\",\"source/card\",-139977973),new cljs.core.Keyword(\"source\",\"native\",\"source/native\",-1444604147),new cljs.core.Keyword(\"source\",\"previous-stage\",\"source/previous-stage\",1962610878),new cljs.core.Keyword(\"source\",\"table-defaults\",\"source/table-defaults\",909975194),new cljs.core.Keyword(\"source\",\"fields\",\"source/fields\",-649667981),new cljs.core.Keyword(\"source\",\"aggregations\",\"source/aggregations\",-1828710137),new cljs.core.Keyword(\"source\",\"breakouts\",\"source/breakouts\",-1706018158),new cljs.core.Keyword(\"source\",\"joins\",\"source/joins\",1225821486),new cljs.core.Keyword(\"source\",\"expressions\",\"source/expressions\",-458367840),new cljs.core.Keyword(\"source\",\"implicitly-joinable\",\"source/implicitly-joinable\",-729101197)], null));\n/**\n * Malli schema for a valid map of column metadata, which can mean one of two things:\n * \n *   1. Metadata about a particular Field in the application database. This will always have an `:id`\n * \n *   2. Results metadata from a column in `data.cols` and/or `data.results_metadata.columns` in a Query Processor\n *   response, or saved in something like `Card.result_metadata`. These *may* have an `:id`, or may not -- columns\n *   coming back from native queries or things like `SELECT count(*)` aren't associated with any particular `Field`\n *   and thus will not have an `:id`.\n * \n *   Now maybe these should be two different schemas, but `:id` being there or not is the only real difference; besides\n *   that they are largely compatible. So they're the same for now. We can revisit this in the future if we actually want\n *   to differentiate between the two versions.\n */\nmetabase.lib.metadata.ColumnMetadata = new cljs.core.PersistentVector(null, 14, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"map\",\"map\",1371690461),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(\"error\",\"message\",\"error/message\",-502809098),\"Valid column metadata\"], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"lib\",\"type\",\"lib/type\",1175424801),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"=\",\"=\",1152933628),new cljs.core.Keyword(\"metadata\",\"column\",\"metadata/column\",-1799249054)], null)], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"name\",\"name\",1843675177),new cljs.core.Keyword(\"metabase.lib.schema.common\",\"non-blank-string\",\"metabase.lib.schema.common/non-blank-string\",-2032366619)], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"base-type\",\"base-type\",1167971299),new cljs.core.Keyword(\"metabase.lib.schema.common\",\"base-type\",\"metabase.lib.schema.common/base-type\",999524206)], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"id\",\"id\",-1388402092),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"optional\",\"optional\",2053951509),true], null),new cljs.core.Keyword(\"metabase.lib.schema.id\",\"field\",\"metabase.lib.schema.id/field\",-985236431)], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"display-name\",\"display-name\",694513143),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"optional\",\"optional\",2053951509),true], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"maybe\",\"maybe\",-314397560),new cljs.core.Keyword(\"metabase.lib.schema.common\",\"non-blank-string\",\"metabase.lib.schema.common/non-blank-string\",-2032366619)], null)], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"effective-type\",\"effective-type\",-355725458),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"optional\",\"optional\",2053951509),true], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"maybe\",\"maybe\",-314397560),new cljs.core.Keyword(\"metabase.lib.schema.common\",\"base-type\",\"metabase.lib.schema.common/base-type\",999524206)], null)], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"fk-field-id\",\"fk-field-id\",1124127357),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"optional\",\"optional\",2053951509),true], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"maybe\",\"maybe\",-314397560),new cljs.core.Keyword(\"metabase.lib.schema.id\",\"field\",\"metabase.lib.schema.id/field\",-985236431)], null)], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"source-alias\",\"source-alias\",1652088724),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"optional\",\"optional\",2053951509),true], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"maybe\",\"maybe\",-314397560),new cljs.core.Keyword(\"metabase.lib.schema.common\",\"non-blank-string\",\"metabase.lib.schema.common/non-blank-string\",-2032366619)], null)], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"lib\",\"source\",\"lib/source\",-434086550),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"optional\",\"optional\",2053951509),true], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"ref\",\"ref\",1289896967),new cljs.core.Keyword(\"metabase.lib.metadata\",\"column-source\",\"metabase.lib.metadata/column-source\",-458963769)], null)], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"lib\",\"source-column-alias\",\"lib/source-column-alias\",1494821386),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"optional\",\"optional\",2053951509),true], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"maybe\",\"maybe\",-314397560),new cljs.core.Keyword(\"metabase.lib.schema.common\",\"non-blank-string\",\"metabase.lib.schema.common/non-blank-string\",-2032366619)], null)], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"lib\",\"desired-column-alias\",\"lib/desired-column-alias\",-1998967402),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"optional\",\"optional\",2053951509),true], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"maybe\",\"maybe\",-314397560),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"string\",\"string\",-1989541586),new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"min\",\"min\",444991522),(1),new cljs.core.Keyword(null,\"max\",\"max\",61366548),(60)], null)], null)], null)], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"selected?\",\"selected?\",-742502788),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"optional\",\"optional\",2053951509),true], null),new cljs.core.Keyword(null,\"boolean\",\"boolean\",-1919418404)], null)], null);\n/**\n * Schema for metadata about a specific Saved Question (which may or may not be a Model). More or less the same as\n *   a [[metabase.models.card]], but with kebab-case keys. Note that the `:dataset-query` is not necessarily converted to\n *   pMBQL yet. Probably safe to assume it is normalized however. Likewise, `:result-metadata` is probably not quite\n *   massaged into a sequence of `ColumnMetadata`s just yet. See [[metabase.lib.card/card-metadata-columns]] that\n *   converts these as needed.\n */\nmetabase.lib.metadata.CardMetadata = new cljs.core.PersistentVector(null, 10, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"map\",\"map\",1371690461),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(\"error\",\"message\",\"error/message\",-502809098),\"Valid Card metadata\"], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"lib\",\"type\",\"lib/type\",1175424801),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"=\",\"=\",1152933628),new cljs.core.Keyword(\"metadata\",\"card\",\"metadata/card\",-1039333889)], null)], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"id\",\"id\",-1388402092),new cljs.core.Keyword(\"metabase.lib.schema.id\",\"card\",\"metabase.lib.schema.id/card\",-801728009)], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"name\",\"name\",1843675177),new cljs.core.Keyword(\"metabase.lib.schema.common\",\"non-blank-string\",\"metabase.lib.schema.common/non-blank-string\",-2032366619)], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"dataset-query\",\"dataset-query\",1851066427),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"optional\",\"optional\",2053951509),true], null),new cljs.core.Keyword(null,\"map\",\"map\",1371690461)], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"result-metadata\",\"result-metadata\",2017934672),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"optional\",\"optional\",2053951509),true], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"maybe\",\"maybe\",-314397560),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"sequential\",\"sequential\",-1082983960),new cljs.core.Keyword(null,\"map\",\"map\",1371690461)], null)], null)], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"dataset\",\"dataset\",1159262238),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"optional\",\"optional\",2053951509),true], null),new cljs.core.Keyword(null,\"boolean\",\"boolean\",-1919418404)], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"database-id\",\"database-id\",1883826326),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"optional\",\"optional\",2053951509),true], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"maybe\",\"maybe\",-314397560),new cljs.core.Keyword(\"metabase.lib.schema.id\",\"database\",\"metabase.lib.schema.id/database\",2063511424)], null)], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"table-id\",\"table-id\",-766649466),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"optional\",\"optional\",2053951509),true], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"maybe\",\"maybe\",-314397560),new cljs.core.Keyword(\"metabase.lib.schema.id\",\"table\",\"metabase.lib.schema.id/table\",-583250693)], null)], null)], null);\n/**\n * More or less the same as a [[metabase.models.segment]], but with kebab-case keys.\n */\nmetabase.lib.metadata.SegmentMetadata = new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"map\",\"map\",1371690461),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(\"error\",\"message\",\"error/message\",-502809098),\"Valid Segment metadata\"], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"lib\",\"type\",\"lib/type\",1175424801),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"=\",\"=\",1152933628),new cljs.core.Keyword(\"metadata\",\"segment\",\"metadata/segment\",-1286738015)], null)], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"id\",\"id\",-1388402092),new cljs.core.Keyword(\"metabase.lib.schema.id\",\"segment\",\"metabase.lib.schema.id/segment\",-983297351)], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"name\",\"name\",1843675177),new cljs.core.Keyword(\"metabase.lib.schema.common\",\"non-blank-string\",\"metabase.lib.schema.common/non-blank-string\",-2032366619)], null)], null);\n/**\n * Malli schema for a legacy v1 [[metabase.models.metric]], but with kebab-case keys. A Metric defines an MBQL snippet\n *   with an aggregation and optionally a filter clause. You can add a `:metric` reference to the `:aggregations` in an\n *   MBQL stage, and the QP treats it like a macro and expands it to the underlying clauses --\n *   see [[metabase.query-processor.middleware.expand-macros]].\n */\nmetabase.lib.metadata.MetricMetadata = new cljs.core.PersistentVector(null, 8, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"map\",\"map\",1371690461),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(\"error\",\"message\",\"error/message\",-502809098),\"Valid Metric metadata\"], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"lib\",\"type\",\"lib/type\",1175424801),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"=\",\"=\",1152933628),new cljs.core.Keyword(\"metadata\",\"metric\",\"metadata/metric\",538003406)], null)], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"id\",\"id\",-1388402092),new cljs.core.Keyword(\"metabase.lib.schema.id\",\"metric\",\"metabase.lib.schema.id/metric\",369478774)], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"name\",\"name\",1843675177),new cljs.core.Keyword(\"metabase.lib.schema.common\",\"non-blank-string\",\"metabase.lib.schema.common/non-blank-string\",-2032366619)], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"table-id\",\"table-id\",-766649466),new cljs.core.Keyword(\"metabase.lib.schema.id\",\"table\",\"metabase.lib.schema.id/table\",-583250693)], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"definition\",\"definition\",-1198729982),new cljs.core.Keyword(null,\"map\",\"map\",1371690461)], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"description\",\"description\",-1428560544),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"optional\",\"optional\",2053951509),true], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"maybe\",\"maybe\",-314397560),new cljs.core.Keyword(\"metabase.lib.schema.common\",\"non-blank-string\",\"metabase.lib.schema.common/non-blank-string\",-2032366619)], null)], null)], null);\n/**\n * Schema for metadata about a specific [[metabase.models.table]]. More or less the same as a [[metabase.models.table]],\n *   but with kebab-case keys.\n */\nmetabase.lib.metadata.TableMetadata = new cljs.core.PersistentVector(null, 7, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"map\",\"map\",1371690461),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(\"error\",\"message\",\"error/message\",-502809098),\"Valid Table metadata\"], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"lib\",\"type\",\"lib/type\",1175424801),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"=\",\"=\",1152933628),new cljs.core.Keyword(\"metadata\",\"table\",\"metadata/table\",-882499405)], null)], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"id\",\"id\",-1388402092),new cljs.core.Keyword(\"metabase.lib.schema.id\",\"table\",\"metabase.lib.schema.id/table\",-583250693)], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"name\",\"name\",1843675177),new cljs.core.Keyword(\"metabase.lib.schema.common\",\"non-blank-string\",\"metabase.lib.schema.common/non-blank-string\",-2032366619)], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"display-name\",\"display-name\",694513143),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"optional\",\"optional\",2053951509),true], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"maybe\",\"maybe\",-314397560),new cljs.core.Keyword(\"metabase.lib.schema.common\",\"non-blank-string\",\"metabase.lib.schema.common/non-blank-string\",-2032366619)], null)], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"schema\",\"schema\",-1582001791),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"optional\",\"optional\",2053951509),true], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"maybe\",\"maybe\",-314397560),new cljs.core.Keyword(\"metabase.lib.schema.common\",\"non-blank-string\",\"metabase.lib.schema.common/non-blank-string\",-2032366619)], null)], null)], null);\n/**\n * Malli schema for the DatabaseMetadata as returned by `GET /api/database/:id/metadata` -- what should be available to\n *   the frontend Query Builder.\n */\nmetabase.lib.metadata.DatabaseMetadata = new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"map\",\"map\",1371690461),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(\"error\",\"message\",\"error/message\",-502809098),\"Valid Database metadata\"], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"lib\",\"type\",\"lib/type\",1175424801),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"=\",\"=\",1152933628),new cljs.core.Keyword(\"metadata\",\"database\",\"metadata/database\",-924828824)], null)], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"id\",\"id\",-1388402092),new cljs.core.Keyword(\"metabase.lib.schema.id\",\"database\",\"metabase.lib.schema.id/database\",2063511424)], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"tables\",\"tables\",1334623052),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"optional\",\"optional\",2053951509),true], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"sequential\",\"sequential\",-1082983960),metabase.lib.metadata.TableMetadata], null)], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"features\",\"features\",-1146962336),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"optional\",\"optional\",2053951509),true], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"set\",\"set\",304602554),new cljs.core.Keyword(null,\"keyword\",\"keyword\",811389747)], null)], null)], null);\n/**\n * Schema for something that satisfies the [[lib.metadata.protocols/MetadataProvider]] protocol.\n */\nmetabase.lib.metadata.MetadataProvider = new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"fn\",\"fn\",-1175266204),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(\"error\",\"message\",\"error/message\",-502809098),\"Valid MetadataProvider\"], null),new cljs.core.Var(function(){return metabase.lib.metadata.protocols.metadata_provider_QMARK_;},new cljs.core.Symbol(\"metabase.lib.metadata.protocols\",\"metadata-provider?\",\"metabase.lib.metadata.protocols/metadata-provider?\",-472923865,null),cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null,\"ns\",\"ns\",441598760),new cljs.core.Keyword(null,\"name\",\"name\",1843675177),new cljs.core.Keyword(null,\"file\",\"file\",-1269645878),new cljs.core.Keyword(null,\"end-column\",\"end-column\",1425389514),new cljs.core.Keyword(null,\"column\",\"column\",2078222095),new cljs.core.Keyword(null,\"line\",\"line\",212345235),new cljs.core.Keyword(null,\"end-line\",\"end-line\",1837326455),new cljs.core.Keyword(null,\"arglists\",\"arglists\",1661989754),new cljs.core.Keyword(null,\"doc\",\"doc\",1913296891),new cljs.core.Keyword(null,\"test\",\"test\",577538877)],[new cljs.core.Symbol(null,\"metabase.lib.metadata.protocols\",\"metabase.lib.metadata.protocols\",128660233,null),new cljs.core.Symbol(null,\"metadata-provider?\",\"metadata-provider?\",1669871524,null),\"metabase/lib/metadata/protocols.cljc\",25,1,70,70,cljs.core.list(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,\"x\",\"x\",-555367584,null)], null)),\"Whether `x` is a valid [[MetadataProvider]].\",(cljs.core.truth_(metabase.lib.metadata.protocols.metadata_provider_QMARK_)?metabase.lib.metadata.protocols.metadata_provider_QMARK_.cljs$lang$test:null)]))], null);\n/**\n * Something that can be used to get a MetadataProvider. Either a MetadataProvider, or a map with a MetadataProvider in\n *   the key `:lib/metadata` (i.e., a query).\n */\nmetabase.lib.metadata.MetadataProviderable = new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"or\",\"or\",235744169),metabase.lib.metadata.MetadataProvider,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"map\",\"map\",1371690461),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(\"error\",\"message\",\"error/message\",-502809098),\"map with a MetadataProvider in the key :lib/metadata (i.e. a query)\"], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"lib\",\"metadata\",\"lib/metadata\",1798917220),metabase.lib.metadata.MetadataProvider], null)], null)], null);\n/**\n * Inputs: [metadata-providerable :- MetadataProviderable]\n *   Return: MetadataProvider\n *        \n * \n *   Get a MetadataProvider from something that can provide one.\n */\nmetabase.lib.metadata.__GT_metadata_provider = (function metabase$lib$metadata$__GT_metadata_provider(metadata_providerable){\n\nif(metabase.lib.metadata.protocols.metadata_provider_QMARK_(metadata_providerable)){\nreturn metadata_providerable;\n} else {\nreturn new cljs.core.Keyword(\"lib\",\"metadata\",\"lib/metadata\",1798917220).cljs$core$IFn$_invoke$arity$1(metadata_providerable);\n}\n});\n/**\n * Inputs: [metadata-providerable :- MetadataProviderable]\n *   Return: DatabaseMetadata\n *        \n * \n *   Get metadata about the Database we're querying.\n */\nmetabase.lib.metadata.database = (function metabase$lib$metadata$database(metadata_providerable){\n\nreturn metabase.lib.metadata.protocols.database(metabase.lib.metadata.__GT_metadata_provider(metadata_providerable));\n});\n/**\n * Inputs: [metadata-providerable :- MetadataProviderable]\n *   Return: [:sequential TableMetadata]\n *        \n * \n *   Get metadata about all Tables for the Database we're querying.\n */\nmetabase.lib.metadata.tables = (function metabase$lib$metadata$tables(metadata_providerable){\n\nreturn metabase.lib.metadata.protocols.tables(metabase.lib.metadata.__GT_metadata_provider(metadata_providerable));\n});\n/**\n * Inputs: [metadata-providerable :- MetadataProviderable table-id :- :metabase.lib.schema.id/table]\n *   Return: TableMetadata\n *        \n * \n *   Find metadata for a specific Table, either by string `table-name`, and optionally `schema`, or by ID.\n */\nmetabase.lib.metadata.table = (function metabase$lib$metadata$table(metadata_providerable,table_id){\n\nreturn metabase.lib.metadata.protocols.table(metabase.lib.metadata.__GT_metadata_provider(metadata_providerable),table_id);\n});\n/**\n * Inputs: [metadata-providerable :- MetadataProviderable table-id :- :metabase.lib.schema.id/table]\n *   Return: [:sequential ColumnMetadata]\n *        \n * \n *   Get metadata about all the Fields belonging to a specific Table.\n */\nmetabase.lib.metadata.fields = (function metabase$lib$metadata$fields(metadata_providerable,table_id){\n\nreturn metabase.lib.metadata.protocols.fields(metabase.lib.metadata.__GT_metadata_provider(metadata_providerable),table_id);\n});\n/**\n * Inputs: [metadata-providerable :- MetadataProviderable field-id :- :metabase.lib.schema.id/field]\n *   Return: ColumnMetadata\n *        \n * \n *   Get metadata about a specific Field in the Database we're querying.\n */\nmetabase.lib.metadata.field = (function metabase$lib$metadata$field(metadata_providerable,field_id){\n\nreturn metabase.lib.metadata.protocols.field(metabase.lib.metadata.__GT_metadata_provider(metadata_providerable),field_id);\n});\n/**\n * Metadata about the columns returned by a particular stage of a pMBQL query. For example a single-stage native query\n *   like\n * \n *  {:database 1\n *   :lib/type :mbql/query\n *   :stages   [{:lib/type :mbql.stage/mbql\n *               :native   \"SELECT id, name FROM VENUES;\"}]}\n * \n *   might have stage metadata like\n * \n *  {:columns [{:name \"id\", :base-type :type/Integer}\n *             {:name \"name\", :base-type :type/Text}]}\n * \n *   associated with the query's lone stage.\n * \n *   At some point in the near future we will hopefully attach this metadata directly to each stage in a query, so a\n *   multi-stage query will have `:lib/stage-metadata` for each stage. The main goal is to facilitate things like\n *   returning lists of visible or filterable columns for a given stage of a query. This is TBD, see #28717 for a WIP\n *   implementation of this idea.\n * \n *   This is the same format as the results metadata returned with QP results in `data.results_metadata`. The `:columns`\n *   portion of this (`data.results_metadata.columns`) is also saved as `Card.result_metadata` for Saved Questions.\n * \n *   Note that queries currently actually come back with both `data.results_metadata` AND `data.cols`; it looks like the\n *   Frontend actually *merges* these together -- see `applyMetadataDiff` in\n *   `frontend/src/metabase/query_builder/selectors.js` -- but this is ridiculous. Let's try to merge anything missing in\n *   `results_metadata` into `cols` going forward so things don't need to be manually merged in the future.\n */\nmetabase.lib.metadata.StageMetadata = new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"map\",\"map\",1371690461),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(\"lib\",\"type\",\"lib/type\",1175424801),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"=\",\"=\",1152933628),new cljs.core.Keyword(\"metadata\",\"results\",\"metadata/results\",330329298)], null)], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"columns\",\"columns\",1998437288),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"sequential\",\"sequential\",-1082983960),metabase.lib.metadata.ColumnMetadata], null)], null)], null);\n/**\n * Inputs: [query :- :map stage-number :- :int]\n *   Return: [:maybe StageMetadata]\n *        \n * \n *   Get metadata associated with a particular `stage-number` of the query, if any. `stage-number` can be a negative\n *   index.\n * \n *   Currently, only returns metadata if it is explicitly attached to a stage; in the future we will probably dynamically\n *   calculate this stuff if possible based on DatabaseMetadata and previous stages. Stay tuned!\n */\nmetabase.lib.metadata.stage = (function metabase$lib$metadata$stage(query,stage_number){\n\nreturn new cljs.core.Keyword(\"lib\",\"stage-metadata\",\"lib/stage-metadata\",1079153610).cljs$core$IFn$_invoke$arity$1(metabase.lib.util.query_stage(query,stage_number));\n});\n/**\n * Inputs: ([query :- :map column-name :- :metabase.lib.schema.common/non-blank-string]\n *         [query :- :map stage-number :- :int column-name :- :metabase.lib.schema.common/non-blank-string])\n *   Return: [:maybe ColumnMetadata]\n *        \n * \n *   Metadata about a specific column returned by a specific stage of the query, e.g. perhaps the first stage of the\n *   query has an expression `num_cans`, then\n * \n *  (lib.metadata/stage-column query stage \"num_cans\")\n * \n *   should return something like\n * \n *  {:name \"num_cans\", :base-type :type/Integer, ...}\n * \n *   This is currently a best-effort thing and will only return information about columns if stage metadata is attached\n *   to a particular stage. In the near term future this should be better about calculating that metadata dynamically and\n *   returning correct info here.\n */\nmetabase.lib.metadata.stage_column = (function metabase$lib$metadata$stage_column(var_args){\nvar G__48553 = arguments.length;\nswitch (G__48553) {\ncase 2:\nreturn metabase.lib.metadata.stage_column.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ncase 3:\nreturn metabase.lib.metadata.stage_column.cljs$core$IFn$_invoke$arity$3((arguments[(0)]),(arguments[(1)]),(arguments[(2)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\n(metabase.lib.metadata.stage_column.cljs$core$IFn$_invoke$arity$2 = (function (query,column_name){\n\nreturn metabase.lib.metadata.stage_column.cljs$core$IFn$_invoke$arity$3(query,(-1),column_name);\n}));\n\n(metabase.lib.metadata.stage_column.cljs$core$IFn$_invoke$arity$3 = (function (query,stage_number,column_name){\n\nreturn cljs.core.some((function (column){\nif(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(new cljs.core.Keyword(null,\"name\",\"name\",1843675177).cljs$core$IFn$_invoke$arity$1(column),column_name)){\nreturn column;\n} else {\nreturn null;\n}\n}),new cljs.core.Keyword(null,\"columns\",\"columns\",1998437288).cljs$core$IFn$_invoke$arity$1(metabase.lib.metadata.stage(query,stage_number)));\n}));\n\n(metabase.lib.metadata.stage_column.cljs$lang$maxFixedArity = 3);\n\n/**\n * Inputs: [metadata-providerable :- MetadataProviderable card-id :- :metabase.lib.schema.id/card]\n *   Return: [:maybe CardMetadata]\n *        \n * \n *   Get metadata for a Card, aka Saved Question, with `card-id`, if it can be found.\n */\nmetabase.lib.metadata.card = (function metabase$lib$metadata$card(metadata_providerable,card_id){\n\nreturn metabase.lib.metadata.protocols.card(metabase.lib.metadata.__GT_metadata_provider(metadata_providerable),card_id);\n});\n/**\n * Inputs: [metadata-providerable :- MetadataProviderable segment-id :- :metabase.lib.schema.id/segment]\n *   Return: [:maybe SegmentMetadata]\n *        \n * \n *   Get metadata for the Segment with `segment-id`, if it can be found.\n */\nmetabase.lib.metadata.segment = (function metabase$lib$metadata$segment(metadata_providerable,segment_id){\n\nreturn metabase.lib.metadata.protocols.segment(metabase.lib.metadata.__GT_metadata_provider(metadata_providerable),segment_id);\n});\n/**\n * Inputs: [metadata-providerable :- MetadataProviderable metric-id :- :metabase.lib.schema.id/metric]\n *   Return: [:maybe MetricMetadata]\n *        \n * \n *   Get metadata for the Metric with `metric-id`, if it can be found.\n */\nmetabase.lib.metadata.metric = (function metabase$lib$metadata$metric(metadata_providerable,metric_id){\n\nreturn metabase.lib.metadata.protocols.metric(metabase.lib.metadata.__GT_metadata_provider(metadata_providerable),metric_id);\n});\n/**\n * Inputs: [metadata-providerable :- MetadataProviderable table-id :- [:or :metabase.lib.schema.id/table :string]]\n *   Return: [:maybe [:or CardMetadata TableMetadata]]\n *        \n * \n *   Convenience, for frontend JS usage (see #31915): look up metadata based on Table ID, handling legacy-style\n *   `card__<id>` strings as well. Throws an Exception (Clj-only, due to Malli validation) if passed an integer Table ID\n *   and the Table does not exist, since this is a real error; however if passed a `card__<id>` that does not exist,\n *   simply returns `nil` (since we do not have a strict expectation that Cards always be present in the\n *   MetadataProvider).\n */\nmetabase.lib.metadata.table_or_card = (function metabase$lib$metadata$table_or_card(metadata_providerable,table_id){\n\nvar temp__5802__auto__ = metabase.lib.util.legacy_string_table_id__GT_card_id(table_id);\nif(cljs.core.truth_(temp__5802__auto__)){\nvar card_id = temp__5802__auto__;\nreturn metabase.lib.metadata.card(metadata_providerable,card_id);\n} else {\nreturn metabase.lib.metadata.table(metadata_providerable,table_id);\n}\n});\n","~:ns-info",["^ ","~:rename-macros",null,"~:renames",["^ "],"~:meta",["^ ","~:file","metabase/lib/metadata.cljc","~:line",1,"~:column",5,"~:end-line",1,"~:end-column",26],"~:ns-aliases",["^ ","~$cljs.loader","~$shadow.loader","~$clojure.core","~$cljs.core","~$clojure.spec.gen.alpha","~$cljs.spec.gen.alpha","~$clojure.pprint","~$cljs.pprint","~$clojure.core.match","~$cljs.core.match"],"~:use-macros",null,"~:excludes",["~#set",[]],"~:name","~$metabase.lib.metadata","~:reader-aliases",["^ "],"~:op","~:ns","~:imports",null,"~:requires",["^ ","~$mu","~$metabase.util.malli","~$lib.schema.common","~$metabase.lib.schema.common","~$metabase.lib.metadata.protocols","^T","^?","^?","~$metabase.lib.util","^U","~$goog","^V","~$metabase.util.malli.registry","^W","^S","^S","~$metabase.lib.schema.id","^X","~$mr","^W","~$lib.util","^U","^Q","^Q","~$lib.metadata.protocols","^T","~$lib.schema.id","^X"],"~:seen",["^H",["~:require"]],"~:uses",null,"~:require-macros",["^ ","^?","^?","^P","^Q","^W","^W","^Y","^W","^Q","^Q"],"~:form",["~#list",["~$ns","^J",["^16",["^12",["^T","~:as","^["],["^S","^18","^R"],["^X","^18","^10"],["^U","^18","^Z"],["^Q","^18","^P"],["^W","^18","^Y"]]]]],"~:flags",["^ ","^12",["^H",[]]],"~:js-deps",["^ "],"~:deps",["^V","^?","^T","^S","^X","^U","^Q","^W"]],"^M","^J","~:resource-id",["~:shadow.build.classpath/resource","metabase/lib/metadata.cljc"],"~:compiled-at",1692612527756,"^K",["^ ","^P","^Q","^R","^S","^T","^T","^?","^?","^U","^U","^V","^V","^W","^W","^S","^S","^X","^X","^Y","^W","^Z","^U","^Q","^Q","^[","^T","^10","^X"],"~:resource-name","metabase/lib/metadata.cljc","~:warnings",[],"~:source","(ns metabase.lib.metadata\n  (:require\n   [metabase.lib.metadata.protocols :as lib.metadata.protocols]\n   [metabase.lib.schema.common :as lib.schema.common]\n   [metabase.lib.schema.id :as lib.schema.id]\n   [metabase.lib.util :as lib.util]\n   [metabase.util.malli :as mu]\n   [metabase.util.malli.registry :as mr]))\n\n;;; Column vs Field?\n;;;\n;;; Lately I've been using `Field` to only mean a something that lives in the application database, i.e. something\n;;; that is associated with row in the `Field` table and has an `:id`. I'm using `Column` as a more generic term that\n;;; includes not only `Field`s but also the columns returned by a stage of a query, e.g. `SELECT count(*) AS count`\n;;; returns a `Column` called `count`, but it's not a `Field` because it's not associated with an actual Field in the\n;;; application database.\n;;;\n;;; Column = any column returned by a query or stage of a query\n;;; Field  = a Column that is associated with a capital-F Field in the application database, i.e. has an `:id`\n;;;\n;;; All Fields are Columns, but not all Columns are Fields.\n;;;\n;;; Also worth a mention: we also have `Dimension`s, associated with the `dimension` table in the application\n;;; database, which can act like psuedo-Fields or affect how we treat normal Fields. For example, Dimensions are used\n;;; to implement column remapping, e.g. the GUI might display values of `categories.name` when it presents filter\n;;; options for `venues.category_id` -- you can remap a meaningless integer FK column to something more helpful.\n;;; 'Human readable values' like these can also be entered manually from the GUI, for example for enum columns. How\n;;; will this affect what MLv2 needs to know or does? Not clear at this point, but we'll probably want to abstract\n;;; away dealing with Dimensions in the future so the FE QB GUI doesn't need to special case them.\n\n(mr/def ::column-source\n  [:enum\n   ;; these are for things from some sort of source other than the current stage;\n   ;; they must be referenced with string names rather than Field IDs\n   :source/card\n   :source/native\n   :source/previous-stage\n   ;; these are for things that were introduced by the current stage of the query; `:field` references should be\n   ;; referenced with Field IDs if available.\n   ;;\n   ;; default columns returned by the `:source-table` for the current stage.\n   :source/table-defaults\n   ;; specifically introduced by the corresponding top-level clauses.\n   :source/fields\n   :source/aggregations\n   :source/breakouts\n   ;; introduced by a join, not necessarily ultimately returned.\n   :source/joins\n   ;; Introduced by `:expressions`; not necessarily ultimately returned.\n   :source/expressions\n   ;; Not even introduced, but 'visible' because this column is implicitly joinable.\n   :source/implicitly-joinable])\n\n(def ColumnMetadata\n  \"Malli schema for a valid map of column metadata, which can mean one of two things:\n\n  1. Metadata about a particular Field in the application database. This will always have an `:id`\n\n  2. Results metadata from a column in `data.cols` and/or `data.results_metadata.columns` in a Query Processor\n     response, or saved in something like `Card.result_metadata`. These *may* have an `:id`, or may not -- columns\n     coming back from native queries or things like `SELECT count(*)` aren't associated with any particular `Field`\n     and thus will not have an `:id`.\n\n  Now maybe these should be two different schemas, but `:id` being there or not is the only real difference; besides\n  that they are largely compatible. So they're the same for now. We can revisit this in the future if we actually want\n  to differentiate between the two versions.\"\n  [:map\n   {:error/message \"Valid column metadata\"}\n   [:lib/type  [:= :metadata/column]]\n   [:name      ::lib.schema.common/non-blank-string]\n   ;; TODO -- ignore `base_type` and make `effective_type` required; see #29707\n   [:base-type ::lib.schema.common/base-type]\n   [:id             {:optional true} ::lib.schema.id/field]\n   [:display-name   {:optional true} [:maybe ::lib.schema.common/non-blank-string]]\n   [:effective-type {:optional true} [:maybe ::lib.schema.common/base-type]]\n   ;; if this is a field from another table (implicit join), this is the field in the current table that should be\n   ;; used to perform the implicit join. e.g. if current table is `VENUES` and this field is `CATEGORIES.ID`, then the\n   ;; `fk_field_id` would be `VENUES.CATEGORY_ID`. In a `:field` reference this is saved in the options map as\n   ;; `:source-field`.\n   [:fk-field-id    {:optional true} [:maybe ::lib.schema.id/field]]\n   ;; Join alias of the table we're joining against, if any. Not really 100% clear why we would need this on top\n   ;; of [[metabase.lib.join/current-join-alias]], which stores the same info under a namespaced key. I think we can\n   ;; remove it.\n   [:source-alias   {:optional true} [:maybe ::lib.schema.common/non-blank-string]]\n   ;; what top-level clause in the query this metadata originated from, if it is calculated (i.e., if this metadata\n   ;; was generated by [[metabase.lib.metadata.calculation/metadata]])\n   [:lib/source     {:optional true} [:ref ::column-source]]\n   ;;\n   ;; this stuff is adapted from [[metabase.query-processor.util.add-alias-info]]. It is included in\n   ;; the [[metabase.lib.metadata.calculation/metadata]]\n   ;;\n   ;; the alias that should be used to this clause on the LHS of a `SELECT <lhs> AS <rhs>` or equivalent, i.e. the\n   ;; name of this clause as exported by the previous stage, source table, or join.\n   [:lib/source-column-alias {:optional true} [:maybe ::lib.schema.common/non-blank-string]]\n   ;; the name we should export this column as, i.e. the RHS of a `SELECT <lhs> AS <rhs>` or equivalent. This is\n   ;; guaranteed to be unique in each stage of the query.\n   [:lib/desired-column-alias {:optional true} [:maybe [:string {:min 1, :max 60}]]]\n   ;; when column metadata is returned by certain things\n   ;; like [[metabase.lib.aggregation/selected-aggregation-operators]] or [[metabase.lib.field/fieldable-columns]], it\n   ;; might include this key, which tells you whether or not that column is currently selected or not already, e.g.\n   ;; for [[metabase.lib.field/fieldable-columns]] it means its already present in `:fields`\n   [:selected? {:optional true} :boolean]])\n\n(def CardMetadata\n  \"Schema for metadata about a specific Saved Question (which may or may not be a Model). More or less the same as\n  a [[metabase.models.card]], but with kebab-case keys. Note that the `:dataset-query` is not necessarily converted to\n  pMBQL yet. Probably safe to assume it is normalized however. Likewise, `:result-metadata` is probably not quite\n  massaged into a sequence of `ColumnMetadata`s just yet. See [[metabase.lib.card/card-metadata-columns]] that\n  converts these as needed.\"\n  [:map\n   {:error/message \"Valid Card metadata\"}\n   [:lib/type [:= :metadata/card]]\n   [:id   ::lib.schema.id/card]\n   [:name ::lib.schema.common/non-blank-string]\n   ;; saved query. This is possibly still a legacy query, but should already be normalized.\n   ;; Call [[metabase.lib.convert/->pMBQL]] on it as needed\n   [:dataset-query   {:optional true} :map]\n   ;; vector of column metadata maps; these are ALMOST the correct shape to be [[ColumnMetadata]], but they're\n   ;; probably missing `:lib/type` and probably using `:snake_case` keys.\n   [:result-metadata {:optional true} [:maybe [:sequential :map]]]\n   ;; whether this Card is a Model or not.\n   [:dataset         {:optional true} :boolean]\n   ;; I think Database ID is always supposed to be present for a Card, altho our mock metadata in tests might not have\n   ;; it. It's `NOT NULL` in the application database. Probably safe to generally assume it's there.\n   ;;\n   ;; TODO -- confirm whether we can make this non-optional in the schema or not.\n   [:database-id     {:optional true} [:maybe ::lib.schema.id/database]]\n   ;; Table ID is nullable in the application database, because native queries are not necessarily associated with a\n   ;; particular Table (unless they are against MongoDB)... for MBQL queries it should be populated however.\n   [:table-id        {:optional true} [:maybe ::lib.schema.id/table]]])\n\n(def SegmentMetadata\n  \"More or less the same as a [[metabase.models.segment]], but with kebab-case keys.\"\n  [:map\n   {:error/message \"Valid Segment metadata\"}\n   [:lib/type [:= :metadata/segment]]\n   [:id       ::lib.schema.id/segment]\n   [:name     ::lib.schema.common/non-blank-string]])\n\n(def MetricMetadata\n  \"Malli schema for a legacy v1 [[metabase.models.metric]], but with kebab-case keys. A Metric defines an MBQL snippet\n  with an aggregation and optionally a filter clause. You can add a `:metric` reference to the `:aggregations` in an\n  MBQL stage, and the QP treats it like a macro and expands it to the underlying clauses --\n  see [[metabase.query-processor.middleware.expand-macros]].\"\n  [:map\n   {:error/message \"Valid Metric metadata\"}\n   [:lib/type   [:= :metadata/metric]]\n   [:id         ::lib.schema.id/metric]\n   [:name       ::lib.schema.common/non-blank-string]\n   [:table-id   ::lib.schema.id/table]\n   ;; the MBQL snippet defining this Metric; this may still be in legacy\n   ;; format. [[metabase.lib.metric/metric-definition]] handles conversion to pMBQL if needed.\n   [:definition :map]\n   [:description {:optional true} [:maybe ::lib.schema.common/non-blank-string]]])\n\n(def TableMetadata\n  \"Schema for metadata about a specific [[metabase.models.table]]. More or less the same as a [[metabase.models.table]],\n  but with kebab-case keys.\"\n  [:map\n   {:error/message \"Valid Table metadata\"}\n   [:lib/type [:= :metadata/table]]\n   [:id       ::lib.schema.id/table]\n   [:name     ::lib.schema.common/non-blank-string]\n   [:display-name {:optional true} [:maybe ::lib.schema.common/non-blank-string]]\n   [:schema       {:optional true} [:maybe ::lib.schema.common/non-blank-string]]])\n\n(def DatabaseMetadata\n  \"Malli schema for the DatabaseMetadata as returned by `GET /api/database/:id/metadata` -- what should be available to\n  the frontend Query Builder.\"\n  [:map\n   {:error/message \"Valid Database metadata\"}\n   [:lib/type [:= :metadata/database]]\n   [:id ::lib.schema.id/database]\n   ;; Like `:fields` for [[TableMetadata]], this is now optional -- we can fetch the Tables separately if needed.\n   [:tables   {:optional true} [:sequential TableMetadata]]\n   ;; TODO -- this should validate against the driver features list in [[metabase.driver/driver-features]] if we're in\n   ;; Clj mode\n   [:features {:optional true} [:set :keyword]]])\n\n(def MetadataProvider\n  \"Schema for something that satisfies the [[lib.metadata.protocols/MetadataProvider]] protocol.\"\n  [:fn\n   {:error/message \"Valid MetadataProvider\"}\n   #'lib.metadata.protocols/metadata-provider?])\n\n(def MetadataProviderable\n  \"Something that can be used to get a MetadataProvider. Either a MetadataProvider, or a map with a MetadataProvider in\n  the key `:lib/metadata` (i.e., a query).\"\n  [:or\n   MetadataProvider\n   [:map\n    {:error/message \"map with a MetadataProvider in the key :lib/metadata (i.e. a query)\"}\n    [:lib/metadata MetadataProvider]]])\n\n(mu/defn ->metadata-provider :- MetadataProvider\n  \"Get a MetadataProvider from something that can provide one.\"\n  [metadata-providerable :- MetadataProviderable]\n  (if (lib.metadata.protocols/metadata-provider? metadata-providerable)\n    metadata-providerable\n    (:lib/metadata metadata-providerable)))\n\n(mu/defn database :- DatabaseMetadata\n  \"Get metadata about the Database we're querying.\"\n  [metadata-providerable :- MetadataProviderable]\n  (lib.metadata.protocols/database (->metadata-provider metadata-providerable)))\n\n(mu/defn tables :- [:sequential TableMetadata]\n  \"Get metadata about all Tables for the Database we're querying.\"\n  [metadata-providerable :- MetadataProviderable]\n  (lib.metadata.protocols/tables (->metadata-provider metadata-providerable)))\n\n(mu/defn table :- TableMetadata\n  \"Find metadata for a specific Table, either by string `table-name`, and optionally `schema`, or by ID.\"\n  [metadata-providerable :- MetadataProviderable\n   table-id              :- ::lib.schema.id/table]\n  (lib.metadata.protocols/table (->metadata-provider metadata-providerable) table-id))\n\n(mu/defn fields :- [:sequential ColumnMetadata]\n  \"Get metadata about all the Fields belonging to a specific Table.\"\n  [metadata-providerable :- MetadataProviderable\n   table-id              :- ::lib.schema.id/table]\n  (lib.metadata.protocols/fields (->metadata-provider metadata-providerable) table-id))\n\n(mu/defn field :- ColumnMetadata\n  \"Get metadata about a specific Field in the Database we're querying.\"\n  [metadata-providerable :- MetadataProviderable\n   field-id              :- ::lib.schema.id/field]\n  (lib.metadata.protocols/field (->metadata-provider metadata-providerable) field-id))\n\n;;;; Stage metadata\n\n(def StageMetadata\n  \"Metadata about the columns returned by a particular stage of a pMBQL query. For example a single-stage native query\n  like\n\n    {:database 1\n     :lib/type :mbql/query\n     :stages   [{:lib/type :mbql.stage/mbql\n                 :native   \\\"SELECT id, name FROM VENUES;\\\"}]}\n\n  might have stage metadata like\n\n    {:columns [{:name \\\"id\\\", :base-type :type/Integer}\n               {:name \\\"name\\\", :base-type :type/Text}]}\n\n  associated with the query's lone stage.\n\n  At some point in the near future we will hopefully attach this metadata directly to each stage in a query, so a\n  multi-stage query will have `:lib/stage-metadata` for each stage. The main goal is to facilitate things like\n  returning lists of visible or filterable columns for a given stage of a query. This is TBD, see #28717 for a WIP\n  implementation of this idea.\n\n  This is the same format as the results metadata returned with QP results in `data.results_metadata`. The `:columns`\n  portion of this (`data.results_metadata.columns`) is also saved as `Card.result_metadata` for Saved Questions.\n\n  Note that queries currently actually come back with both `data.results_metadata` AND `data.cols`; it looks like the\n  Frontend actually *merges* these together -- see `applyMetadataDiff` in\n  `frontend/src/metabase/query_builder/selectors.js` -- but this is ridiculous. Let's try to merge anything missing in\n  `results_metadata` into `cols` going forward so things don't need to be manually merged in the future.\"\n  [:map\n   [:lib/type [:= :metadata/results]]\n   [:columns [:sequential ColumnMetadata]]])\n\n(mu/defn stage :- [:maybe StageMetadata]\n  \"Get metadata associated with a particular `stage-number` of the query, if any. `stage-number` can be a negative\n  index.\n\n  Currently, only returns metadata if it is explicitly attached to a stage; in the future we will probably dynamically\n  calculate this stuff if possible based on DatabaseMetadata and previous stages. Stay tuned!\"\n  [query        :- :map\n   stage-number :- :int]\n  (:lib/stage-metadata (lib.util/query-stage query stage-number)))\n\n(mu/defn stage-column :- [:maybe ColumnMetadata]\n  \"Metadata about a specific column returned by a specific stage of the query, e.g. perhaps the first stage of the\n  query has an expression `num_cans`, then\n\n    (lib.metadata/stage-column query stage \\\"num_cans\\\")\n\n  should return something like\n\n    {:name \\\"num_cans\\\", :base-type :type/Integer, ...}\n\n  This is currently a best-effort thing and will only return information about columns if stage metadata is attached\n  to a particular stage. In the near term future this should be better about calculating that metadata dynamically and\n  returning correct info here.\"\n  ([query       :- :map\n    column-name :- ::lib.schema.common/non-blank-string]\n   (stage-column query -1 column-name))\n\n  ([query        :- :map\n    stage-number :- :int\n    column-name  :- ::lib.schema.common/non-blank-string]\n   (some (fn [column]\n           (when (= (:name column) column-name)\n             column))\n         (:columns (stage query stage-number)))))\n\n(mu/defn card :- [:maybe CardMetadata]\n  \"Get metadata for a Card, aka Saved Question, with `card-id`, if it can be found.\"\n  [metadata-providerable :- MetadataProviderable\n   card-id               :- ::lib.schema.id/card]\n  (lib.metadata.protocols/card (->metadata-provider metadata-providerable) card-id))\n\n(mu/defn segment :- [:maybe SegmentMetadata]\n  \"Get metadata for the Segment with `segment-id`, if it can be found.\"\n  [metadata-providerable :- MetadataProviderable\n   segment-id            :- ::lib.schema.id/segment]\n  (lib.metadata.protocols/segment (->metadata-provider metadata-providerable) segment-id))\n\n(mu/defn metric :- [:maybe MetricMetadata]\n  \"Get metadata for the Metric with `metric-id`, if it can be found.\"\n  [metadata-providerable :- MetadataProviderable\n   metric-id             :- ::lib.schema.id/metric]\n  (lib.metadata.protocols/metric (->metadata-provider metadata-providerable) metric-id))\n\n(mu/defn table-or-card :- [:maybe [:or CardMetadata TableMetadata]]\n  \"Convenience, for frontend JS usage (see #31915): look up metadata based on Table ID, handling legacy-style\n  `card__<id>` strings as well. Throws an Exception (Clj-only, due to Malli validation) if passed an integer Table ID\n  and the Table does not exist, since this is a real error; however if passed a `card__<id>` that does not exist,\n  simply returns `nil` (since we do not have a strict expectation that Cards always be present in the\n  MetadataProvider).\"\n  [metadata-providerable :- MetadataProviderable\n   table-id              :- [:or ::lib.schema.id/table :string]]\n  (if-let [card-id (lib.util/legacy-string-table-id->card-id table-id)]\n    (card metadata-providerable card-id)\n    (table metadata-providerable table-id)))\n","~:reader-features",["^H",["~:cljs-release","~:cljs"]],"~:cljc",true,"~:source-map-compact",["^ ","mappings",";AA8BA,AAAAA,4CAAA,gHAAA,oFAAA,qDAAA,gEAAA,qEAAA,oFAAA,mFAAA,oEAAA,iFAAA,2EAAA,kEAAA,8EAAA;AAuBA;;;;;;;;;;;;;;uCAAA,oFAAA,mDAAA,2CAAA,oEAAA,gCAAA,mFAAA,0DAAA,mFAAA,+CAAA,yFAAA,mFAAA,qDAAA,yIAAA,mFAAA,+DAAA,yHAAA,mFAAA,kDAAA,2CAAA,6DAAA,aAAA,0GAAA,mFAAA,oEAAA,2CAAA,6DAAA,aAAA,mFAAA,uDAAA,iJAAA,mFAAA,yEAAA,2CAAA,6DAAA,aAAA,mFAAA,uDAAA,iIAAA,mFAAA,mEAAA,2CAAA,6DAAA,aAAA,mFAAA,uDAAA,kHAAA,mFAAA,qEAAA,2CAAA,6DAAA,aAAA,mFAAA,uDAAA,iJAAA,mFAAA,8DAAA,2CAAA,6DAAA,aAAA,mFAAA,mDAAA,gIAAA,mFAAA,wFAAA,2CAAA,6DAAA,aAAA,mFAAA,uDAAA,iJAAA,mFAAA,2FAAA,2CAAA,6DAAA,aAAA,mFAAA,uDAAA,mFAAA,0DAAA,2CAAA,kDAAA,IAAA,iDAAA,qCAAA,mFAAA,+DAAA,2CAAA,6DAAA,aAAA,ttLAAKC;AAkDL;;;;;;;qCAAA,oFAAA,mDAAA,2CAAA,oEAAA,8BAAA,mFAAA,0DAAA,mFAAA,+CAAA,qFAAA,mFAAA,kDAAA,wGAAA,mFAAA,qDAAA,yIAAA,mFAAA,uEAAA,2CAAA,6DAAA,aAAA,2DAAA,mFAAA,2EAAA,2CAAA,6DAAA,aAAA,mFAAA,uDAAA,mFAAA,kEAAA,2EAAA,mFAAA,2DAAA,2CAAA,6DAAA,aAAA,oEAAA,mFAAA,mEAAA,2CAAA,6DAAA,aAAA,mFAAA,uDAAA,wHAAA,mFAAA,6DAAA,2CAAA,6DAAA,aAAA,mFAAA,uDAAA,r0GAAKC;AA4BL;;;wCAAA,mFAAA,mDAAA,2CAAA,oEAAA,iCAAA,mFAAA,0DAAA,mFAAA,+CAAA,2FAAA,mFAAA,kDAAA,8GAAA,mFAAA,qDAAA,niCAAKC;AAQL;;;;;;uCAAA,mFAAA,mDAAA,2CAAA,oEAAA,gCAAA,mFAAA,0DAAA,mFAAA,+CAAA,uFAAA,mFAAA,kDAAA,2GAAA,mFAAA,qDAAA,yIAAA,mFAAA,6DAAA,0GAAA,mFAAA,kEAAA,2DAAA,mFAAA,oEAAA,2CAAA,6DAAA,aAAA,mFAAA,uDAAA,ngEAAKC;AAgBL;;;;sCAAA,mFAAA,mDAAA,2CAAA,oEAAA,+BAAA,mFAAA,0DAAA,mFAAA,+CAAA,sFAAA,mFAAA,kDAAA,0GAAA,mFAAA,qDAAA,yIAAA,mFAAA,oEAAA,2CAAA,6DAAA,aAAA,mFAAA,uDAAA,iJAAA,mFAAA,0DAAA,2CAAA,6DAAA,aAAA,mFAAA,uDAAA,llEAAKC;AAWL;;;;yCAAA,mFAAA,mDAAA,2CAAA,oEAAA,kCAAA,mFAAA,0DAAA,mFAAA,+CAAA,4FAAA,mFAAA,kDAAA,gHAAA,mFAAA,yDAAA,2CAAA,6DAAA,aAAA,mFAAA,sHAAA,mFAAA,8DAAA,2CAAA,6DAAA,aAAA,mFAAA,kDAAA,rvDAAKC,szCAQuCD;AAK5C;;;yCAAA,mFAAA,kDAAA,2CAAA,oEAAA,iCAAA,+FAAA,AAAA,kJAAA,wCAAA,gDAAA,qDAAA,sDAAA,iEAAA,yDAAA,oDAAA,6DAAA,6DAAA,mDAAA,sDAAA,AAAA,8GAAA,AAAA,qFAAA,AAAA,uCAAA,AAAA,GAAA,AAAA,EAAA,AAAA,GAAA,AAAA,GAAA,AAAA,8JAAA,AAAA,+CAAA,kBAAAE,0DAAA,AAAA,AAAAA,wEAAA,ztDAAKC;AAML;;;;6CAAA,mFAAA,uFAAA,mFAAA,mDAAA,2CAAA,oEAAA,8EAAA,mFAAA,7mBAAKC,gLAIFD,+fAGgBA;AAEnB;;;;;;;+CAAA,/CAASE,sGAENC;AAFH,AAAA;AAGE,GAAI,AAACJ,yDAA0CI;AAC7CA;;AACA,OAAA,gGAAeA;;;AAEnB;;;;;;;iCAAA,jCAASC,0EAEND;AAFH,AAAA;AAGE,OAACE,yCAAgC,AAACH,6CAAoBC;;AAExD;;;;;;;+BAAA,/BAASG,sEAENH;AAFH,AAAA;AAGE,OAACI,uCAA8B,AAACL,6CAAoBC;;AAEtD;;;;;;;8BAAA,9BAASK,oEAENL,sBACAM;AAHH,AAAA;AAIE,OAACC,sCAA6B,AAACR,6CAAoBC,uBAAuBM;;AAE5E;;;;;;;+BAAA,/BAASE,sEAENR,sBACAM;AAHH,AAAA;AAIE,OAACG,uCAA8B,AAACV,6CAAoBC,uBAAuBM;;AAE7E;;;;;;;8BAAA,9BAASI,oEAENV,sBACAW;AAHH,AAAA;AAIE,OAACC,sCAA6B,AAACb,6CAAoBC,uBAAuBW;;AAI5E;;;;;;;;;;;;;;;;;;;;;;;;;;;;;sCAAA,mFAAA,mDAAA,mFAAA,0DAAA,mFAAA,+CAAA,yFAAA,mFAAA,2DAAA,mFAAA,rvBAAKE,uzBA8BqBvB;AAE1B;;;;;;;;;;;8BAAA,9BAASwB,oEAMNC,MACAC;AAPH,AAAA;AAQE,OAAA,4GAAqB,AAACC,8BAAqBF,MAAMC;;AAEnD,AAAA;;;;;;;;;;;;;;;;;;;qCAAA,6CAAAE,lFAASE;AAAT,AAAA,IAAAD,WAAA,AAAA;AAAA,AAAA,QAAAA;KAAA;AAAA,OAAAC,iEAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;KAAA;AAAA,OAAAA,iEAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;;AAAA,MAAA,KAAAC,MAAA,CAAA,8DAAA,AAAA;;;;;AAAA,CAAA,mEAAA,nEAASD,8EAaLL,MACAO;AAdJ,AAAA;AAeG,8EAAA,vEAACC,iEAAaR,WAASO;;;AAf1B,CAAA,mEAAA,nEAASF,8EAiBLL,MACAC,aACAM;AAnBJ,AAAA;AAoBG,OAACE,eAAK,WAAKC;AAAL,AACE,GAAM,AAACC,6CAAE,AAAA,mFAAOD,QAAQH;AAAxB,AACEG;;AADF;;GAEF,AAAA,yFAAU,AAACX,4BAAMC,MAAMC;;;AAvBhC,CAAA,6DAAA,7DAASI;;AAAT,AAyBA;;;;;;;6BAAA,7BAASO,kEAEN3B,sBACA4B;AAHH,AAAA;AAIE,OAACC,qCAA4B,AAAC9B,6CAAoBC,uBAAuB4B;;AAE3E;;;;;;;gCAAA,hCAASE,wEAEN9B,sBACA+B;AAHH,AAAA;AAIE,OAACC,wCAA+B,AAACjC,6CAAoBC,uBAAuB+B;;AAE9E;;;;;;;+BAAA,/BAASE,sEAENjC,sBACAkC;AAHH,AAAA;AAIE,OAACC,uCAA8B,AAACpC,6CAAoBC,uBAAuBkC;;AAE7E;;;;;;;;;;;sCAAA,tCAASE,oFAMNpC,sBACAM;AAPH,AAAA;AAQE,IAAA+B,qBAAiB,AAACC,qDAAyChC;AAA3D,AAAA,oBAAA+B;AAAA,cAAAA,VAAST;AAAT,AACE,OAACD,2BAAK3B,sBAAsB4B;;AAC5B,OAACvB,4BAAML,sBAAsBM","names",["metabase.util.malli.registry/register!","metabase.lib.metadata/ColumnMetadata","metabase.lib.metadata/CardMetadata","metabase.lib.metadata/SegmentMetadata","metabase.lib.metadata/MetricMetadata","metabase.lib.metadata/TableMetadata","metabase.lib.metadata/DatabaseMetadata","metabase.lib.metadata.protocols/metadata-provider?","metabase.lib.metadata/MetadataProvider","metabase.lib.metadata/MetadataProviderable","metabase.lib.metadata/->metadata-provider","metadata-providerable","metabase.lib.metadata/database","metabase.lib.metadata.protocols/database","metabase.lib.metadata/tables","metabase.lib.metadata.protocols/tables","metabase.lib.metadata/table","table-id","metabase.lib.metadata.protocols/table","metabase.lib.metadata/fields","metabase.lib.metadata.protocols/fields","metabase.lib.metadata/field","field-id","metabase.lib.metadata.protocols/field","metabase.lib.metadata/StageMetadata","metabase.lib.metadata/stage","query","stage-number","metabase.lib.util/query-stage","var_args","G__48553","metabase.lib.metadata/stage-column","js/Error","column-name","metabase.lib.metadata.stage_column","cljs.core/some","column","cljs.core._EQ_","metabase.lib.metadata/card","card-id","metabase.lib.metadata.protocols/card","metabase.lib.metadata/segment","segment-id","metabase.lib.metadata.protocols/segment","metabase.lib.metadata/metric","metric-id","metabase.lib.metadata.protocols/metric","metabase.lib.metadata/table-or-card","temp__5802__auto__","metabase.lib.util/legacy-string-table-id->card-id"]],"~:used-vars",["^H",["~$metabase.lib.util/legacy-string-table-id->card-id","~$metabase.lib.metadata/DatabaseMetadata","~$metabase.lib.metadata/fields","~$metabase.lib.metadata/StageMetadata","~$metabase.lib.metadata/field","~$metabase.lib.metadata/CardMetadata","~$metabase.lib.metadata/tables","~$metabase.lib.metadata/table-or-card","~$metabase.lib.metadata/stage-column","~$cljs.core/=","~$metabase.lib.util/query-stage","~$metabase.lib.metadata/SegmentMetadata","~$metabase.lib.metadata.protocols/metric","~$metabase.lib.metadata.protocols/metadata-provider?","~$metabase.lib.metadata/card","~$metabase.lib.metadata/ColumnMetadata","~$metabase.lib.metadata.protocols/table","~$metabase.lib.metadata/->metadata-provider","~$metabase.util.malli.registry/register!","~$metabase.lib.metadata/TableMetadata","~$metabase.lib.metadata/segment","~$metabase.lib.metadata.protocols/tables","~$metabase.lib.metadata/MetadataProvider","~$metabase.lib.metadata/MetadataProviderable","~$metabase.lib.metadata/database","~$metabase.lib.metadata.protocols/card","~$metabase.lib.metadata/MetricMetadata","~$metabase.lib.metadata/metric","~$metabase.lib.metadata.protocols/fields","~$metabase.lib.metadata.protocols/field","~$metabase.lib.metadata.protocols/database","~$metabase.lib.metadata/stage","~$metabase.lib.metadata/table","~$metabase.lib.metadata.protocols/segment","~$js/Error","~$cljs.core/some"]]],"~:cache-keys",["~#cmap",[["^1=","camel_snake_kebab/internals/misc.cljc"],["5ae08f83ceb8959971e6334596bff0214bf6fdf2","~:shadow.build.compiler/resolve",["^ ","~:require-id",null,"~:deps-ids",["^H",[]],"~:deps-syms",["^V","^?","~$camel-snake-kebab.internals.string-separator","~$clojure.string"]]],["^1=","goog/dom/tagname.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2D",["^ ","^2E",null,"^2F",["^H",[]],"^2G",["^V","~$goog.dom.HtmlElement"]]],["^1=","metabase/shared/util/i18n.cljs"],["6c3c8615004b349dae9851ed547d516d45e04bd0","^2D",["^ ","^2E",null,"^2F",["^H",[]],"^2G",["^V","^?","~$shadow.js.shim.module$ttag","^2I"]]],["^1=","goog/labs/useragent/platform.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2D",["^ ","^2E",null,"^2F",["^H",[]],"^2G",["^V","~$goog.string.internal","~$goog.labs.userAgent.util","~$goog.labs.userAgent.highEntropy.highEntropyValue","~$goog.labs.userAgent.highEntropy.highEntropyData","~$goog.labs.userAgent"]]],["^1=","metabase/types.cljc"],["00232bf78b259e26a21c218c8f2d746ba7003a15","^2D",["^ ","^2E",null,"^2F",["^H",[]],"^2G",["^V","^?","~$clojure.set","~$metabase.types.coercion-hierarchies","~$metabase.util"]]],["^1=","cljs/spec/gen/alpha.cljs"],["bc14df6666853ed869d7b88aaa864111c65d0c7f","^2D",["^ ","^2E",null,"^2F",["^H",[]],"^2G",["^V","^?","~$goog.Uri"]]],["^1=","metabase/lib/util.cljc"],["11c3262368d876979e323f3e646aab21fbf9b86e","^2D",["^ ","^2E",null,"^2F",["^H",[]],"^2G",["^V","^?","~$shadow.js.shim.module$crc_32","~$goog.string","~$goog.string.format","^2Q","^2I","~$medley.core","~$metabase.lib.common","~$metabase.lib.options","~$metabase.lib.schema","^S","~$metabase.lib.schema.expression","^X","~$metabase.mbql.util","~$metabase.shared.util.i18n","^2S","^Q"]]],["^1=","lambdaisland/glogi.cljs"],["76286836d4172602aa08006b2a754dda736ffe09","^2D",["^ ","^2E",null,"^2F",["^H",[]],"^2G",["^V","^?","~$goog.log","~$goog.debug.Console","~$goog.array","^2I","~$goog.object","~$goog.debug.FancyWindow","~$goog.debug.DivConsole"]]],["^1=","goog/math/math.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2D",["^ ","^2E",null,"^2F",["^H",[]],"^2G",["^V","~$goog.asserts"]]],["^1=","goog/html/trustedtypes.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2D",["^ ","^2E",null,"^2F",["^H",[]],"^2G",["^V"]]],["^1=","goog/string/stringformat.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2D",["^ ","^2E",null,"^2F",["^H",[]],"^2G",["^V","^2V"]]],["^1=","malli/registry.cljc"],["514c6f7d69d7e40b56fa75bfd1a49a683ca15982","^2D",["^ ","^2E",null,"^2F",["^H",[]],"^2G",["^V","^?"]]],["^1=","goog/labs/useragent/browser.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2D",["^ ","^2E",null,"^2F",["^H",[]],"^2G",["^V","^2M","^2N","^39","^2L","^2O","^2P"]]],["^1=","goog/html/safeurl.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2D",["^ ","^2E",null,"^2F",["^H",[]],"^2G",["^V","^39","~$goog.fs.url","~$goog.html.TrustedResourceUrl","~$goog.string.Const","~$goog.string.TypedString","^2L"]]],["^1=","goog/style/style.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2D",["^ ","^2E",null,"^2F",["^H",[]],"^2G",["^V","^39","~$goog.dom","~$goog.dom.NodeType","~$goog.dom.TagName","~$goog.dom.safe","~$goog.dom.vendor","~$goog.html.SafeStyleSheet","~$goog.math.Box","~$goog.math.Coordinate","~$goog.math.Rect","~$goog.math.Size","^36","~$goog.reflect","^2V","~$goog.userAgent"]]],["^1=","goog/array/array.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2D",["^ ","^2E",null,"^2F",["^H",[]],"^2G",["^V","^39"]]],["~:shadow.build.js-support/require","moment"],["~$shadow.js.shim.module$moment","shadow.js.shim.module$moment.js","require","^2D",["^ ","^2E",null,"^2F",["^H",[]],"^2G",["^V"]]],["^3J","moment-timezone"],["~$shadow.js.shim.module$moment_timezone","shadow.js.shim.module$moment_timezone.js","require","^2D",["^ ","^2E",null,"^2F",["^H",[]],"^2G",["^V"]]],["^1=","metabase/mbql/schema/macros.cljs"],["2af09bd42ffb1e15b66723cf7ba15db7dc75d10b","^2D",["^ ","^2E",null,"^2F",["^H",[]],"^2G",["^V","^?"]]],["^1=","metabase/lib/schema/mbql_clause.cljc"],["e5bdd00c58db706b1219843528fd3cd9dd8ab728","^2D",["^ ","^2E",null,"^2F",["^H",[]],"^2G",["^V","^?","^S","^30","~$metabase.types","^Q","^W"]]],["^1=","goog/useragent/useragent.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2D",["^ ","^2E",null,"^2F",["^H",[]],"^2G",["^V","~$goog.labs.userAgent.browser","~$goog.labs.userAgent.engine","~$goog.labs.userAgent.platform","^2M","^3H","^2L"]]],["^1=","malli/generator.cljc"],["514c6f7d69d7e40b56fa75bfd1a49a683ca15982","^2D",["^ ","^2E",null,"^2F",["^H",[]],"^2G",["^V","^?","^A","^2I","~$clojure.test.check","~$clojure.test.check.generators","~$clojure.test.check.properties","~$clojure.test.check.random","~$clojure.test.check.rose-tree","~$malli.core","~$malli.registry"]]],["^1=","clojure/test/check/properties.cljc"],["f33d988fd57bc9c11af1952db81c10f319c91416","^2D",["^ ","^2E",null,"^2F",["^H",[]],"^2G",["^V","^?","^3R","~$clojure.test.check.results"]]],["^1=","clojure/test/check/generators.cljc"],["f33d988fd57bc9c11af1952db81c10f319c91416","^2D",["^ ","^2E",null,"^2F",["^H",[]],"^2G",["^V","^?","^2I","^3T","^3U","^2V"]]],["^1=","goog/debug/error.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2D",["^ ","^2E",null,"^2F",["^H",[]],"^2G",["^V"]]],["^1=","metabase/lib/common.cljc"],["a3bc6343077ef13a3da77612b68f23f9b2a3d890","^2D",["^ ","^2E",null,"^2F",["^H",[]],"^2G",["^V","^?","~$metabase.lib.dispatch","~$metabase.lib.hierarchy","^2Z","~$metabase.lib.ref","^S","^Q"]]],["^1=","metabase/lib/schema/util.cljc"],["14a9e8a90c56f5e44b4ecd361e962722fd97aecf","^2D",["^ ","^2E",null,"^2F",["^H",[]],"^2G",["^V","^?","^2Z"]]],["^1=","goog/flags/flags.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2D",["^ ","^2E",null,"^2F",["^H",[]],"^2G",["^V"]]],["^1=","malli/util.cljc"],["514c6f7d69d7e40b56fa75bfd1a49a683ca15982","^2D",["^ ","^2E",null,"^2F",["^H",[]],"^2G",["^V","^?","^?","^3V"]]],["^1=","clojure/test/check/random/doubles.cljs"],["f33d988fd57bc9c11af1952db81c10f319c91416","^2D",["^ ","^2E",null,"^2F",["^H",[]],"^2G",["^V","^?","~$clojure.test.check.random.longs"]]],["^1=","net/cgrand/macrovich.cljc"],["abcb26cbfe0f8eef363b25525210c0fe1eb1f693","^2D",["^ ","^2E",null,"^2F",["^H",[]],"^2G",["^V","^?"]]],["^1=","malli/destructure.cljc"],["514c6f7d69d7e40b56fa75bfd1a49a683ca15982","^2D",["^ ","^2E",null,"^2F",["^H",[]],"^2G",["^V","^?","~$clojure.walk","^3V","~$malli.impl.util"]]],["^1=","schema/spec/variant.cljc"],["0dacc3066a87f33088c9a332b6c21e8b0560011c","^2D",["^ ","^2E",null,"^2F",["^H",[]],"^2G",["^V","^?","~$schema.utils","~$schema.spec.core"]]],["^1=","goog/structs/circularbuffer.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2D",["^ ","^2E",null,"^2F",["^H",[]],"^2G",["^V"]]],["^1=","weavejester/dependency.cljc"],["7fd7f8879313f6a7e295f7447e668bdf492c42c1","^2D",["^ ","^2E",null,"^2F",["^H",[]],"^2G",["^V","^?","^2Q"]]],["^1=","metabase/lib/schema/common.cljc"],["3f51a06335a7cb84c835d859c422919499874414","^2D",["^ ","^2E",null,"^2F",["^H",[]],"^2G",["^V","^?","^2I","^3M","^W"]]],["^1=","goog/dom/nodetype.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2D",["^ ","^2E",null,"^2F",["^H",[]],"^2G",["^V"]]],["^1=","goog/labs/useragent/highentropy/highentropyvalue.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2D",["^ ","^2E",null,"^2F",["^H",[]],"^2G",["^V","^2M","^2L"]]],["^1=","cljs/pprint.cljs"],["bc14df6666853ed869d7b88aaa864111c65d0c7f","^2D",["^ ","^2E",null,"^2F",["^H",[]],"^2G",["^V","^?","^2I","^2V","~$goog.string.StringBuffer"]]],["^1=","metabase/lib/schema/template_tag.cljc"],["f1b6289b8e576857fe667aed3da134e4ad1ea26a","^2D",["^ ","^2E",null,"^2F",["^H",[]],"^2G",["^V","^?","^3V","^S","^X","~$metabase.mbql.schema","^W"]]],["^1=","metabase/lib/schema/ref.cljc"],["5037a60b3d2f427702cf5cedf23f02bcc394d051","^2D",["^ ","^2E",null,"^2F",["^H",[]],"^2G",["^V","^?","^2I","^3Y","^3Z","^S","^30","^X","~$metabase.lib.schema.mbql-clause","~$metabase.lib.schema.temporal-bucketing","^3M","^W"]]],["^1=","clojure/test/check/rose_tree.cljc"],["f33d988fd57bc9c11af1952db81c10f319c91416","^2D",["^ ","^2E",null,"^2F",["^H",[]],"^2G",["^V","^?"]]],["^1=","clojure/test/check/impl.cljc"],["f33d988fd57bc9c11af1952db81c10f319c91416","^2D",["^ ","^2E",null,"^2F",["^H",[]],"^2G",["^V","^?"]]],["^1=","camel_snake_kebab/internals/string_separator.cljc"],["5ae08f83ceb8959971e6334596bff0214bf6fdf2","^2D",["^ ","^2E",null,"^2F",["^H",[]],"^2G",["^V","^?","^2I"]]],["^1=","clojure/test/check/random.cljs"],["f33d988fd57bc9c11af1952db81c10f319c91416","^2D",["^ ","^2E",null,"^2F",["^H",[]],"^2G",["^V","^?","~$clojure.test.check.random.doubles","^40"]]],["^1=","metabase/lib/schema/expression/arithmetic.cljc"],["e6936a3e0b11bc3cd40d4e396c708af4622c21cb","^2D",["^ ","^2E",null,"^2F",["^H",[]],"^2G",["^V","^?","^3V","^2X","^3Z","^S","^30","^47","^48","^3M","^W"]]],["^1=","goog/string/typedstring.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2D",["^ ","^2E",null,"^2F",["^H",[]],"^2G",["^V"]]],["^1=","metabase/lib/schema/expression/string.cljc"],["b2d7de575aaaa880fdc88dfc31642c8e002c3669","^2D",["^ ","^2E",null,"^2F",["^H",[]],"^2G",["^V","^?","^30","^47"]]],["^1=","goog/object/object.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2D",["^ ","^2E",null,"^2F",["^H",[]],"^2G",["^V"]]],["^1=","metabase/lib/schema/filter.cljc"],["0147dea423ebfd097bf1edb97f0325c9e2908a85","^2D",["^ ","^2E",null,"^2F",["^H",[]],"^2G",["^V","^?","^S","^30","^47","^48","^W"]]],["^1=","goog/dom/asserts.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2D",["^ ","^2E",null,"^2F",["^H",[]],"^2G",["^V","^39"]]],"~:SHADOW-TIMESTAMP",[1689947046000,1689947046000,1689947050000],["^1=","metabase/lib/ref.cljc"],["86a9fbeddec3e58f7bb54e61f5342658b370fb3b","^2D",["^ ","^2E",null,"^2F",["^H",[]],"^2G",["^V","^?","^3Y","~$metabase.lib.schema.ref","^Q"]]],["^1=","goog/math/long.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2D",["^ ","^2E",null,"^2F",["^H",[]],"^2G",["^V","^39","^3H"]]],["^1=","goog/html/trustedresourceurl.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2D",["^ ","^2E",null,"^2F",["^H",[]],"^2G",["^V","^39","~$goog.fs.blob","^3:","~$goog.html.SafeScript","~$goog.html.trustedtypes","^3<","^3="]]],["^1=","schema/spec/leaf.cljc"],["0dacc3066a87f33088c9a332b6c21e8b0560011c","^2D",["^ ","^2E",null,"^2F",["^H",[]],"^2G",["^V","^?","^44"]]],["^1=","metabase/util/format.cljc"],["875f86a08288cb3ad5a6f15df988897eaf8613af","^2D",["^ ","^2E",null,"^2F",["^H",[]],"^2G",["^V","^?","^2V"]]],["^1=","goog/math/irect.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2D",["^ ","^2E",null,"^2F",["^H",[]],"^2G",["^V"]]],["^1=","goog/math/box.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2D",["^ ","^2E",null,"^2F",["^H",[]],"^2G",["^V","^39","^3E"]]],["^1=","metabase/lib/options.cljc"],["1870276153adf026e09a3e9ed1ba8beaad80e1c8","^2D",["^ ","^2E",null,"^2F",["^H",[]],"^2G",["^V","^?","^S","^32","^2S","^Q"]]],["^1=","goog/string/internal.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2D",["^ ","^2E",null,"^2F",["^H",[]],"^2G",["^V"]]],["^1=","clojure/test/check.cljc"],["f33d988fd57bc9c11af1952db81c10f319c91416","^2D",["^ ","^2E",null,"^2F",["^H",[]],"^2G",["^V","^?","^3R","^3T","^3X","^3U","~$clojure.test.check.impl"]]],["^1=","goog/functions/functions.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2D",["^ ","^2E",null,"^2F",["^H",[]],"^2G",["^V"]]],["^1=","metabase/lib/metadata.cljc"],["a8652a185953ef0e0b1c77d5540a4aa7271c0c63","^2D",["^ ","^2E",null,"^2F",["^H",[]],"^2G",["^V","^?","^T","^S","^X","^U","^Q","^W"]]],["^1=","goog/html/safestyle.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2D",["^ ","^2E",null,"^2F",["^H",[]],"^2G",["^V","^3<","~$goog.html.SafeUrl","^3=","^39","^2L"]]],["^1=","goog/dom/safe.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2D",["^ ","^2E",null,"^2F",["^H",[]],"^2G",["^V","^39","~$goog.asserts.dom","~$goog.dom.asserts","~$goog.functions","~$goog.html.SafeHtml","^4=","~$goog.html.SafeStyle","^4@","^3;","~$goog.html.uncheckedconversions","^3<","^2L"]]],["^1=","goog/asserts/dom.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2D",["^ ","^2E",null,"^2F",["^H",[]],"^2G",["^V","^3@","^39","~$goog.dom.element"]]],["^1=","medley/core.cljc"],["f5117fa4c15ff14c4a0ab7db414b0f102afb0b8a","^2D",["^ ","^2E",null,"^2F",["^H",[]],"^2G",["^V","^?"]]],["^1=","clojure/walk.cljs"],["bc14df6666853ed869d7b88aaa864111c65d0c7f","^2D",["^ ","^2E",null,"^2F",["^H",[]],"^2G",["^V","^?"]]],["^1=","metabase/lib/metadata/protocols.cljc"],["f5c81e2cab09f5dabb3cab711f7db1c5df1b398d","^2D",["^ ","^2E",null,"^2F",["^H",[]],"^2G",["^V","^?"]]],["^1=","metabase/lib/schema/expression/conditional.cljc"],["226c4623394b90853fcb014e9a95e84ffc8bd6db","^2D",["^ ","^2E",null,"^2F",["^H",[]],"^2G",["^V","^?","^2Q","^30","^47","^3M","^W"]]],["^1=","lambdaisland/glogi/console.cljs"],["76286836d4172602aa08006b2a754dda736ffe09","^2D",["^ ","^2E",null,"^2F",["^H",[]],"^2G",["^V","^?","~$lambdaisland.glogi","~$lambdaisland.glogi.print","^36","^34"]]],["^1=","goog/html/safehtml.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2D",["^ ","^2E",null,"^2F",["^H",[]],"^2G",["^V","^3<","^4=","^4E","^3C","^4@","^3@","^3;","^3=","^39","^3N","^35","^36","^2L","~$goog.dom.tags","^4>"]]],["^1=","goog/dom/tags.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2D",["^ ","^2E",null,"^2F",["^H",[]],"^2G",["^V","^36"]]],["^1=","goog/math/size.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2D",["^ ","^2E",null,"^2F",["^H",[]],"^2G",["^V"]]],["^1=","malli/error.cljc"],["514c6f7d69d7e40b56fa75bfd1a49a683ca15982","^2D",["^ ","^2E",null,"^2F",["^H",[]],"^2G",["^V","^?","^2I","^3V","~$malli.util"]]],["^1=","metabase/lib/dispatch.cljc"],["914208cd51b78412eff1b402519bbb422845497a","^2D",["^ ","^2E",null,"^2F",["^H",[]],"^2G",["^V","^?","^2S"]]],["^1=","metabase/util/malli.cljc"],["0f9ba23be6bb9fa629617001e985b988d2322b17","^2D",["^ ","^2E",null,"^2F",["^H",[]],"^2G",["^V","^?","^?","^3V","~$malli.destructure","~$malli.error","~$malli.generator","^4K","^32","^2S"]]],["^1=","goog/labs/useragent/engine.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2D",["^ ","^2E",null,"^2F",["^H",[]],"^2G",["^V","^35","^2L","^2M"]]],["^1=","goog/fs/blob.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2D",["^ ","^2E",null,"^2F",["^H",[]],"^2G",["^V"]]],["^1=","metabase/mbql/schema/helpers.cljc"],["b1f6002b97b59423b504abb666e13c9b0228b768","^2D",["^ ","^2E",null,"^2F",["^H",[]],"^2G",["^V","^?","^2I","^3M","~$schema.core"]]],["^1=","goog/dom/dom.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2D",["^ ","^2E",null,"^2F",["^H",[]],"^2G",["^V","^35","^39","^4A","~$goog.dom.BrowserFeature","^3?","^3@","^3A","^4D","^4F","^3E","^3G","^36","^2V","^3<","~$goog.string.Unicode","^3I"]]],["^1=","borkdude/dynaload.cljc"],["accd696ba364b850b4d92e38f5a34d0e828a0ad1","^2D",["^ ","^2E",null,"^2F",["^H",[]],"^2G",["^V","^?"]]],["^1=","metabase/util/log.cljs"],["7d8a3bf01eb27c2ba7269dc90dc218e46bcc1d3a","^2D",["^ ","^2E",null,"^2F",["^H",[]],"^2G",["^V","^?","^33","^2V","^2W","^4H","~$lambdaisland.glogi.console"]]],["^1=","goog/asserts/asserts.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2D",["^ ","^2E",null,"^2F",["^H",[]],"^2G",["^V","~$goog.debug.Error","^3?"]]],["^1=","goog/debug/relativetimeprovider.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2D",["^ ","^2E",null,"^2F",["^H",[]],"^2G",["^V"]]],["^1=","malli/sci.cljc"],["514c6f7d69d7e40b56fa75bfd1a49a683ca15982","^2D",["^ ","^2E",null,"^2F",["^H",[]],"^2G",["^V","^?","~$borkdude.dynaload"]]],["^1=","metabase/lib/schema/expression.cljc"],["f5c5c3ff3dc0f9a8b407cd7d06a68c6787061991","^2D",["^ ","^2E",null,"^2F",["^H",[]],"^2G",["^V","^?","^3Y","^3Z","^S","^32","^3M","^Q","^W"]]],["^1=","goog/math/rect.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2D",["^ ","^2E",null,"^2F",["^H",[]],"^2G",["^V","^39","^3D","^3E","~$goog.math.IRect","^3G"]]],["^1=","flatland/ordered/map.cljs"],["3a9cb9d79e47d77ecd4f4d550371ecf01464c461","^2D",["^ ","^2E",null,"^2F",["^H",[]],"^2G",["^V","^?"]]],["^1=","goog/uri/uri.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2D",["^ ","^2E",null,"^2F",["^H",[]],"^2G",["^V","^35","^39","~$goog.collections.maps","^2V","~$goog.structs","~$goog.uri.utils","~$goog.uri.utils.ComponentIndex","~$goog.uri.utils.StandardQueryParam"]]],["^1=","metabase/util/malli/registry.cljc"],["921d4f259bbe54cbeb6b88ae56937df492bdfb5e","^2D",["^ ","^2E",null,"^2F",["^H",[]],"^2G",["^V","^?","^3V","^3W","^4K"]]],["^1=","goog/labs/useragent/highentropy/highentropydata.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2D",["^ ","^2E",null,"^2F",["^H",[]],"^2G",["^V","^2N"]]],["^1=","metabase/types/coercion_hierarchies.cljc"],["c3d70ef6080e044d61f13ff6bfd76490e2dcd0ac","^2D",["^ ","^2E",null,"^2F",["^H",[]],"^2G",["^V","^?","^2Q"]]],["^1=","goog/collections/maps.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2D",["^ ","^2E",null,"^2F",["^H",[]],"^2G",["^V"]]],["^1=","goog/debug/divconsole.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2D",["^ ","^2E",null,"^2F",["^H",[]],"^2G",["^V","~$goog.debug.HtmlFormatter","~$goog.dom.DomHelper","^3@","^3A","^4D","^3C","^33","^3<","~$goog.style"]]],["^1=","schema/spec/collection.cljc"],["0dacc3066a87f33088c9a332b6c21e8b0560011c","^2D",["^ ","^2E",null,"^2F",["^H",[]],"^2G",["^V","^?","^43","^44"]]],["^1=","malli/impl/util.cljc"],["514c6f7d69d7e40b56fa75bfd1a49a683ca15982","^2D",["^ ","^2E",null,"^2F",["^H",[]],"^2G",["^V","^?"]]],["^1=","metabase/lib/schema/order_by.cljc"],["3f577f71e4ecba1aa1061f2228f6026ab45312ff","^2D",["^ ","^2E",null,"^2F",["^H",[]],"^2G",["^V","^?","^30","^47","^W"]]],["^1=","schema/utils.cljc"],["0dacc3066a87f33088c9a332b6c21e8b0560011c","^2D",["^ ","^2E",null,"^2F",["^H",[]],"^2G",["^V","^?","^2W","^36","^2V","^2I"]]],["^1=","metabase/lib/schema/aggregation.cljc"],["ea4a70903cfc3ffeaa60ebdedb5ea00892da4dbe","^2D",["^ ","^2E",null,"^2F",["^H",[]],"^2G",["^V","^?","^3Z","^30","^47","^32","^W"]]],["^1=","cljs/core/match.cljs"],["f419c02deee501e9f4b29f81215ba81ffcefe9b6","^2D",["^ ","^2E",null,"^2F",["^H",[]],"^2G",["^V","^?"]]],["^1=","goog/debug/fancywindow.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2D",["^ ","^2E",null,"^2F",["^H",[]],"^2G",["^V","^35","^39","~$goog.debug.DebugWindow","^50","^3@","^3A","^4D","^3C","^33","^36","^2V","^3<","^3I"]]],["^1=","goog/debug/formatter.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2D",["^ ","^2E",null,"^2F",["^H",[]],"^2G",["^V","~$goog.debug","~$goog.debug.RelativeTimeProvider","^4D","^4@","^4F","^33","^3<"]]],["^1=","metabase/shared/util/namespaces.cljs"],["00687008abd6eb291bc9d5ff1fff73210e0bbe6e","^2D",["^ ","^2E",null,"^2F",["^H",[]],"^2G",["^V","^?"]]],["^1=","metabase/mbql/util/match/impl.cljc"],["4150e01975339d308f5cfedda77875eda19c030d","^2D",["^ ","^2E",null,"^2F",["^H",[]],"^2G",["^V","^?"]]],["^1=","goog/fs/url.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2D",["^ ","^2E",null,"^2F",["^H",[]],"^2G",["^V"]]],["^1=","goog/base.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2D",["^ ","^2E",null,"^2F",["^H",[]],"^2G",[]]],["^1=","goog/structs/structs.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2D",["^ ","^2E",null,"^2F",["^H",[]],"^2G",["^V","^35","^36"]]],["^1=","clojure/string.cljs"],["bc14df6666853ed869d7b88aaa864111c65d0c7f","^2D",["^ ","^2E",null,"^2F",["^H",[]],"^2G",["^V","^?","^2V","^45"]]],["^1=","metabase/lib/schema/temporal_bucketing.cljc"],["9cb7bba3e46e1de2fbb37d61df332336da6d9f66","^2D",["^ ","^2E",null,"^2F",["^H",[]],"^2G",["^V","^?","^2Q","^W"]]],["^1=","metabase/util.cljc"],["2eb945a6741f1450ecac08a9087b862ce52b9e3a","^2D",["^ ","^2E",null,"^2F",["^H",[]],"^2G",["^V","^?","~$camel-snake-kebab.internals.macros","~$clojure.data","^C","^2Q","^2I","^41","~$flatland.ordered.map","^2X","^32","~$metabase.shared.util.namespaces","~$metabase.util.format","~$metabase.util.log","~$net.cgrand.macrovich","~$weavejester.dependency"]]],["^1=","clojure/test/check/random/longs/bit_count_impl.cljs"],["f33d988fd57bc9c11af1952db81c10f319c91416","^2D",["^ ","^2E",null,"^2F",["^H",[]],"^2G",["^V","^?"]]],["^1=","malli/impl/regex.cljc"],["514c6f7d69d7e40b56fa75bfd1a49a683ca15982","^2D",["^ ","^2E",null,"^2F",["^H",[]],"^2G",["^V","^?","^42"]]],["^1=","camel_snake_kebab/internals/macros.cljc"],["5ae08f83ceb8959971e6334596bff0214bf6fdf2","^2D",["^ ","^2E",null,"^2F",["^H",[]],"^2G",["^V","^?","~$camel-snake-kebab.internals.alter-name","~$camel-snake-kebab.internals.misc"]]],["^1=","metabase/lib/schema/expression/temporal.cljc"],["f1f22c1655e7d335b884a22b010f2b8b08ad1e94","^2D",["^ ","^2E",null,"^2F",["^H",[]],"^2G",["^V","^?","^2Q","^3V","^3Z","^S","^30","~$metabase.lib.schema.literal","^47","^48","^W","^3K","^3L"]]],["^1=","goog/string/string.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2D",["^ ","^2E",null,"^2F",["^H",[]],"^2G",["^V","^3A","^4F","^3<","^2L"]]],["^1=","schema/core.cljc"],["0dacc3066a87f33088c9a332b6c21e8b0560011c","^2D",["^ ","^2E",null,"^2F",["^H",[]],"^2G",["^V","^?","^2I","^43","^44","~$schema.spec.leaf","~$schema.spec.variant","~$schema.spec.collection"]]],["^1=","metabase/mbql/schema.cljc"],["c51bf2a180ecbc12d6a1cd42a4049323f46a0085","^2D",["^ ","^2E",null,"^2F",["^H",[]],"^2G",["^V","^?","^3K","^3L","^?","^2Q","~$metabase.mbql.schema.helpers","~$metabase.mbql.schema.macros","^4O"]]],["^1=","metabase/mbql/util/match.cljs"],["d65aaa9fbcb7960b90ba7ca97258b1dc8a40be2b","^2D",["^ ","^2E",null,"^2F",["^H",[]],"^2G",["^V","^?","^E","~$metabase.mbql.util.match.impl"]]],["^1=","malli/core.cljc"],["514c6f7d69d7e40b56fa75bfd1a49a683ca15982","^2D",["^ ","^2E",null,"^2F",["^H",[]],"^2G",["^V","^?","^?","~$malli.impl.regex","^42","^3W","~$malli.sci"]]],["^1=","metabase/lib/schema.cljc"],["122fe4013d55087fc7287141eb7dc6f630436424","^2D",["^ ","^2E",null,"^2F",["^H",[]],"^2G",["^V","^?","~$metabase.lib.schema.aggregation","^S","^30","~$metabase.lib.schema.expression.arithmetic","~$metabase.lib.schema.expression.conditional","~$metabase.lib.schema.expression.string","~$metabase.lib.schema.expression.temporal","~$metabase.lib.schema.filter","^X","~$metabase.lib.schema.join","^5?","~$metabase.lib.schema.order-by","^4;","~$metabase.lib.schema.template-tag","~$metabase.lib.schema.util","~$metabase.mbql.util.match","^W"]]],["^1=","clojure/data.cljs"],["bc14df6666853ed869d7b88aaa864111c65d0c7f","^2D",["^ ","^2E",null,"^2F",["^H",[]],"^2G",["^V","^?","^2Q"]]],["^1=","goog/reflect/reflect.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2D",["^ ","^2E",null,"^2F",["^H",[]],"^2G",["^V"]]],["^1=","goog/labs/useragent/util.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2D",["^ ","^2E",null,"^2F",["^H",[]],"^2G",["^V","^2L","^2P"]]],["^1=","goog/debug/debug.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2D",["^ ","^2E",null,"^2F",["^H",[]],"^2G",["^V","^35","~$goog.debug.errorcontext"]]],["^1=","goog/string/stringbuffer.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2D",["^ ","^2E",null,"^2F",["^H",[]],"^2G",["^V"]]],["^1=","schema/spec/core.cljc"],["0dacc3066a87f33088c9a332b6c21e8b0560011c","^2D",["^ ","^2E",null,"^2F",["^H",[]],"^2G",["^V","^?","^43"]]],["^3J","ttag"],["^2K","shadow.js.shim.module$ttag.js","require","^2D",["^ ","^2E",null,"^2F",["^H",[]],"^2G",["^V"]]],["^1=","goog/math/coordinate.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2D",["^ ","^2E",null,"^2F",["^H",[]],"^2G",["^V","~$goog.math"]]],["^1=","goog/debug/errorcontext.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2D",["^ ","^2E",null,"^2F",["^H",[]],"^2G",["^V"]]],["^1=","goog/labs/useragent/useragent.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2D",["^ ","^2E",null,"^2F",["^H",[]],"^2G",["^V","~$goog.flags"]]],["^1=","goog/dom/element.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2D",["^ ","^2E",null,"^2F",["^H",[]],"^2G",["^V","^3?","^3@"]]],["^1=","goog/html/uncheckedconversions.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2D",["^ ","^2E",null,"^2F",["^H",[]],"^2G",["^V","^39","^4D","^4=","^4E","^3C","^4@","^3;","^3<","^2L"]]],["^1=","goog/debug/debugwindow.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2D",["^ ","^2E",null,"^2F",["^H",[]],"^2G",["^V","^4[","^3A","^4D","^3C","^33","^3<","~$goog.structs.CircularBuffer","^3I"]]],["^1=","metabase/mbql/util.cljc"],["2532d5faa94d2a89dd06e529c641d594e298e2aa","^2D",["^ ","^2E",null,"^2F",["^H",[]],"^2G",["^V","^?","^2I","~$metabase.mbql.predicates","^46","^5C","^5R","^32","^4O"]]],["^1=","goog/dom/htmlelement.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2D",["^ ","^2E",null,"^2F",["^H",[]],"^2G",["^V"]]],["^1=","cljs/core.cljs"],["bc14df6666853ed869d7b88aaa864111c65d0c7f","^2D",["^ ","^2E",null,"^2F",["^H",[]],"^2G",["^V","~$goog.math.Long","~$goog.math.Integer","^2V","^36","^35","^2T","^45"]]],["^1=","goog/html/safescript.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2D",["^ ","^2E",null,"^2F",["^H",[]],"^2G",["^V","^3<","^3=","^4>","^39"]]],["^1=","clojure/test/check/random/longs.cljs"],["f33d988fd57bc9c11af1952db81c10f319c91416","^2D",["^ ","^2E",null,"^2F",["^H",[]],"^2G",["^V","^?","~$clojure.test.check.random.longs.bit-count-impl","^5X","^?"]]],["^1=","goog/log/log.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2D",["^ ","^2E",null,"^2F",["^H",[]],"^2G",["^V","^39","^53"]]],["^1=","camel_snake_kebab/internals/alter_name.cljc"],["5ae08f83ceb8959971e6334596bff0214bf6fdf2","^2D",["^ ","^2E",null,"^2F",["^H",[]],"^2G",["^V","^?"]]],["^1=","goog/html/safestylesheet.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2D",["^ ","^2E",null,"^2F",["^H",[]],"^2G",["^V","^3<","^4E","^3=","^36","^39","^2L"]]],["^1=","goog/math/integer.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2D",["^ ","^2E",null,"^2F",["^H",[]],"^2G",["^V","^3H"]]],["^1=","goog/debug/console.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2D",["^ ","^2E",null,"^2F",["^H",[]],"^2G",["^V","~$goog.debug.TextFormatter","^33"]]],["^1=","lambdaisland/glogi/print.cljs"],["76286836d4172602aa08006b2a754dda736ffe09","^2D",["^ ","^2E",null,"^2F",["^H",[]],"^2G",["^V","^?","^4H","^36"]]],["^1=","goog/dom/browserfeature.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2D",["^ ","^2E",null,"^2F",["^H",[]],"^2G",["^V","^3I"]]],["^1=","clojure/set.cljs"],["bc14df6666853ed869d7b88aaa864111c65d0c7f","^2D",["^ ","^2E",null,"^2F",["^H",[]],"^2G",["^V","^?"]]],["^1=","goog/uri/utils.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2D",["^ ","^2E",null,"^2F",["^H",[]],"^2G",["^V","^39","^2V"]]],["^1=","goog/string/const.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2D",["^ ","^2E",null,"^2F",["^H",[]],"^2G",["^V","^39","^3="]]],["^1=","metabase/lib/schema/id.cljc"],["7cdfc70702a9a9e04b75ca7c9dc898ddf546f99d","^2D",["^ ","^2E",null,"^2F",["^H",[]],"^2G",["^V","^?","^S","^46","^W"]]],["^1=","goog/dom/vendor.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^2D",["^ ","^2E",null,"^2F",["^H",[]],"^2G",["^V","^2V","^3I"]]],["^1=","metabase/lib/schema/literal.cljc"],["f8f31bfaef820ab25b896b49fd404b937d0df64e","^2D",["^ ","^2E",null,"^2F",["^H",[]],"^2G",["^V","^?","^3V","^S","^30","^47","^W"]]],["^1=","metabase/lib/hierarchy.cljc"],["c9d228603522de5c85546fb645c59736d4eb94d2","^2D",["^ ","^2E",null,"^2F",["^H",[]],"^2G",["^V","^?"]]],["^1=","metabase/mbql/predicates.cljc"],["20ab1a5ccd943c35c646c5f7396ea40f9bfa7ac4","^2D",["^ ","^2E",null,"^2F",["^H",[]],"^2G",["^V","^?","^46","^4O"]]],["^1=","clojure/test/check/results.cljc"],["f33d988fd57bc9c11af1952db81c10f319c91416","^2D",["^ ","^2E",null,"^2F",["^H",[]],"^2G",["^V","^?"]]],["^3J","crc-32"],["^2U","shadow.js.shim.module$crc_32.js","require","^2D",["^ ","^2E",null,"^2F",["^H",[]],"^2G",["^V"]]],["^1=","metabase/lib/schema/join.cljc"],["924e0ca4abbab776fa05357d6d22bafb8a596648","^2D",["^ ","^2E",null,"^2F",["^H",[]],"^2G",["^V","^?","^S","^30","^32","^W"]]]]],"~:clj-info",["^ ","jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/analyzer/impl.cljc",1689947050000,"jar:file:/root/.m2/repository/instaparse/instaparse/1.4.12/instaparse-1.4.12.jar!/instaparse/line_col.clj",1689946146000,"jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/source_map/base64_vlq.clj",1689947050000,"jar:file:/root/.m2/repository/instaparse/instaparse/1.4.12/instaparse-1.4.12.jar!/instaparse/viz.clj",1689946146000,"jar:file:/root/.m2/repository/org/clojure/tools.namespace/1.4.4/tools.namespace-1.4.4.jar!/clojure/tools/namespace/parse.cljc",1689946139000,"jar:file:/root/.m2/repository/weavejester/dependency/0.2.1/dependency-0.2.1.jar!/weavejester/dependency.cljc",1689946093000,"jar:file:/root/.m2/repository/instaparse/instaparse/1.4.12/instaparse-1.4.12.jar!/instaparse/transform.clj",1689946146000,"jar:file:/root/.m2/repository/ring/ring-codec/1.2.0/ring-codec-1.2.0.jar!/ring/util/codec.clj",1689946172000,"file:/home/gmrworkspace/dashboard/src/metabase/lib/hierarchy.cljc",1690286812000,"jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/instant.clj",1689947050000,"jar:file:/root/.m2/repository/org/clojure/tools.reader/1.3.6/tools.reader-1.3.6.jar!/clojure/tools/reader/default_data_readers.clj",1689946174000,"jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/pprint.cljc",1689947050000,"jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/externs.clj",1689947050000,"file:/home/gmrworkspace/dashboard/shared/src/metabase/mbql/util/match.clj",1690286812000,"jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/vendor/clojure/tools/reader/default_data_readers.clj",1689947050000,"file:/home/gmrworkspace/dashboard/shared/src/metabase/mbql/schema/helpers.cljc",1692013156305,"jar:file:/root/.m2/repository/prismatic/schema/1.4.1/schema-1.4.1.jar!/schema/core.cljc",1689946172000,"file:/home/gmrworkspace/dashboard/shared/src/metabase/shared/util/i18n.clj",1690286812000,"jar:file:/root/.m2/repository/org/clojure/tools.reader/1.3.6/tools.reader-1.3.6.jar!/clojure/tools/reader/edn.clj",1689946174000,"jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/compiler.cljc",1689947050000,"jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/env.cljc",1689947050000,"jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/analyzer/impl/namespaces.cljc",1689947050000,"jar:file:/root/.m2/repository/prismatic/schema/1.4.1/schema-1.4.1.jar!/schema/macros.clj",1689946172000,"file:/home/gmrworkspace/dashboard/src/metabase/util/i18n/plural.clj",1690286813000,"jar:file:/root/.m2/repository/metosin/malli/0.10.2/malli-0.10.2.jar!/malli/core.cljc",1689946170000,"jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/source_map.clj",1689947050000,"jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/util.cljc",1689947050000,"file:/home/gmrworkspace/dashboard/src/metabase/util.cljc",1690286813000,"jar:file:/root/.m2/repository/nano-id/nano-id/1.0.0/nano-id-1.0.0.jar!/nano_id/core.cljc",1689946171000,"file:/home/gmrworkspace/dashboard/src/metabase/lib/dispatch.cljc",1690286812000,"file:/home/gmrworkspace/dashboard/src/metabase/lib/schema/common.cljc",1690286812000,"file:/home/gmrworkspace/dashboard/src/metabase/plugins/classloader.clj",1692013156125,"jar:file:/root/.m2/repository/medley/medley/1.4.0/medley-1.4.0.jar!/medley/core.cljc",1689946185000,"jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/analyzer.cljc",1689947050000,"jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/analyzer/passes.cljc",1689947050000,"jar:file:/root/.m2/repository/org/clojure/test.check/1.1.1/test.check-1.1.1.jar!/clojure/test/check/random.clj",1689946177000,"jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/vendor/clojure/data/json.clj",1689947050000,"file:/home/gmrworkspace/dashboard/src/metabase/util/format.cljc",1690286813000,"jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/source_map/base64.clj",1689947050000,"jar:file:/root/.m2/repository/riddley/riddley/0.2.0/riddley-0.2.0.jar!/riddley/walk.clj",1689946160000,"file:/home/gmrworkspace/dashboard/src/metabase/lib/schema/ref.cljc",1690286812000,"jar:file:/root/.m2/repository/instaparse/instaparse/1.4.12/instaparse-1.4.12.jar!/instaparse/reduction.clj",1689946146000,"jar:file:/root/.m2/repository/org/tcrawley/dynapath/1.1.0/dynapath-1.1.0.jar!/dynapath/util.clj",1689946174000,"jar:file:/root/.m2/repository/camel-snake-kebab/camel-snake-kebab/0.4.3/camel-snake-kebab-0.4.3.jar!/camel_snake_kebab/internals/macros.cljc",1689946178000,"file:/home/gmrworkspace/dashboard/shared/src/metabase/mbql/util/match/impl.cljc",1690286812000,"jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/vendor/clojure/tools/reader/reader_types.clj",1689947050000,"jar:file:/root/.m2/repository/instaparse/instaparse/1.4.12/instaparse-1.4.12.jar!/instaparse/auto_flatten_seq.clj",1689946146000,"jar:file:/root/.m2/repository/instaparse/instaparse/1.4.12/instaparse-1.4.12.jar!/instaparse/core.clj",1689946146000,"jar:file:/root/.m2/repository/metosin/malli/0.10.2/malli-0.10.2.jar!/malli/generator.cljc",1689946170000,"file:/home/gmrworkspace/dashboard/src/metabase/lib/schema/id.cljc",1690286812000,"jar:file:/root/.m2/repository/org/clojure/core.cache/1.0.225/core.cache-1.0.225.jar!/clojure/core/cache.clj",1689946183000,"file:/home/gmrworkspace/dashboard/src/metabase/lib/schema/expression.cljc",1690286812000,"jar:file:/root/.m2/repository/metosin/malli/0.10.2/malli-0.10.2.jar!/malli/sci.cljc",1689946170000,"jar:file:/root/.m2/repository/potemkin/potemkin/0.4.6/potemkin-0.4.6.jar!/potemkin/types.clj",1689946176000,"jar:file:/root/.m2/repository/org/clojure/test.check/1.1.1/test.check-1.1.1.jar!/clojure/test/check/properties.cljc",1689946177000,"jar:file:/root/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/set.clj",1689946092000,"jar:file:/root/.m2/repository/org/clojure/math.numeric-tower/0.0.5/math.numeric-tower-0.0.5.jar!/clojure/math/numeric_tower.clj",1689946148000,"jar:file:/root/.m2/repository/net/cgrand/macrovich/0.2.1/macrovich-0.2.1.jar!/net/cgrand/macrovich.cljc",1689946165000,"jar:file:/root/.m2/repository/colorize/colorize/0.1.1/colorize-0.1.1.jar!/colorize/core.clj",1689946104000,"jar:file:/root/.m2/repository/borkdude/dynaload/0.3.5/dynaload-0.3.5.jar!/borkdude/dynaload.cljc",1689946165000,"jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/vendor/clojure/tools/reader/impl/inspect.clj",1689947050000,"file:/home/gmrworkspace/dashboard/src/metabase/lib/options.cljc",1692013156125,"jar:file:/root/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/string.clj",1689946092000,"jar:file:/root/.m2/repository/potemkin/potemkin/0.4.6/potemkin-0.4.6.jar!/potemkin.clj",1689946176000,"jar:file:/root/.m2/repository/instaparse/instaparse/1.4.12/instaparse-1.4.12.jar!/instaparse/failure.clj",1689946146000,"jar:file:/root/.m2/repository/prismatic/schema/1.4.1/schema-1.4.1.jar!/schema/spec/variant.cljc",1689946172000,"jar:file:/root/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/core.clj",1689946092000,"file:/home/gmrworkspace/dashboard/src/metabase/util/i18n/impl.clj",1692013156125,"jar:file:/root/.m2/repository/org/clojure/tools.namespace/1.4.4/tools.namespace-1.4.4.jar!/clojure/tools/namespace/dependency.cljc",1689946139000,"jar:file:/root/.m2/repository/prismatic/schema/1.4.1/schema-1.4.1.jar!/schema/spec/leaf.cljc",1689946172000,"jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/analyzer/passes/and_or.cljc",1689947050000,"jar:file:/root/.m2/repository/org/clojure/test.check/1.1.1/test.check-1.1.1.jar!/clojure/test/check.cljc",1689946177000,"jar:file:/root/.m2/repository/riddley/riddley/0.2.0/riddley-0.2.0.jar!/riddley/compiler.clj",1689946160000,"jar:file:/root/.m2/repository/org/clojure/core.memoize/1.0.257/core.memoize-1.0.257.jar!/clojure/core/memoize.clj",1689946178000,"jar:file:/root/.m2/repository/metosin/malli/0.10.2/malli-0.10.2.jar!/malli/destructure.cljc",1689946170000,"jar:file:/root/.m2/repository/instaparse/instaparse/1.4.12/instaparse-1.4.12.jar!/instaparse/print.clj",1689946146000,"jar:file:/root/.m2/repository/org/clojure/tools.namespace/1.4.4/tools.namespace-1.4.4.jar!/clojure/tools/namespace/track.cljc",1689946139000,"jar:file:/root/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/pprint.clj",1689946092000,"jar:file:/root/.m2/repository/org/clojure/java.classpath/1.0.0/java.classpath-1.0.0.jar!/clojure/java/classpath.clj",1689946162000,"jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/js_deps.cljc",1689947050000,"jar:file:/root/.m2/repository/metosin/malli/0.10.2/malli-0.10.2.jar!/malli/impl/regex.cljc",1689946170000,"jar:file:/root/.m2/repository/cheshire/cheshire/5.11.0/cheshire-5.11.0.jar!/cheshire/factory.clj",1689946173000,"jar:file:/root/.m2/repository/org/clojure/tools.reader/1.3.6/tools.reader-1.3.6.jar!/clojure/tools/reader/impl/errors.clj",1689946174000,"jar:file:/root/.m2/repository/metosin/malli/0.10.2/malli-0.10.2.jar!/malli/experimental.cljc",1689946170000,"jar:file:/root/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/walk.clj",1689946092000,"jar:file:/root/.m2/repository/org/clojure/tools.reader/1.3.6/tools.reader-1.3.6.jar!/clojure/tools/reader.clj",1689946174000,"file:/home/gmrworkspace/dashboard/src/metabase/lib/common.cljc",1690286812000,"jar:file:/root/.m2/repository/prismatic/schema/1.4.1/schema-1.4.1.jar!/schema/spec/core.cljc",1689946172000,"jar:file:/root/.m2/repository/org/clojure/test.check/1.1.1/test.check-1.1.1.jar!/clojure/test/check/generators.cljc",1689946177000,"jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/core.cljc",1689947050000,"jar:file:/root/.m2/repository/cheshire/cheshire/5.11.0/cheshire-5.11.0.jar!/cheshire/generate.clj",1689946173000,"jar:file:/root/.m2/repository/metosin/malli/0.10.2/malli-0.10.2.jar!/malli/experimental/time.cljc",1689946170000,"jar:file:/root/.m2/repository/org/clojure/tools.reader/1.3.6/tools.reader-1.3.6.jar!/clojure/tools/reader/reader_types.clj",1689946174000,"file:/home/gmrworkspace/dashboard/shared/src/metabase/mbql/schema.cljc",1692013156305,"jar:file:/root/.m2/repository/cheshire/cheshire/5.11.0/cheshire-5.11.0.jar!/cheshire/parse.clj",1689946173000,"file:/home/gmrworkspace/dashboard/src/metabase/util/i18n.clj",1692013156125,"jar:file:/root/.m2/repository/instaparse/instaparse/1.4.12/instaparse-1.4.12.jar!/instaparse/cfg.clj",1689946146000,"jar:file:/root/.m2/repository/cheshire/cheshire/5.11.0/cheshire-5.11.0.jar!/cheshire/core.clj",1689946173000,"jar:file:/root/.m2/repository/metosin/malli/0.10.2/malli-0.10.2.jar!/malli/impl/util.cljc",1689946170000,"jar:file:/root/.m2/repository/metosin/malli/0.10.2/malli-0.10.2.jar!/malli/registry.cljc",1689946170000,"jar:file:/root/.m2/repository/instaparse/instaparse/1.4.12/instaparse-1.4.12.jar!/instaparse/gll.clj",1689946146000,"jar:file:/root/.m2/repository/metosin/malli/0.10.2/malli-0.10.2.jar!/malli/instrument.clj",1689946170000,"jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/vendor/clojure/tools/reader.clj",1689947050000,"jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/spec/gen/alpha.cljc",1689947050000,"file:/home/gmrworkspace/dashboard/src/metabase/lib/ref.cljc",1690286812000,"jar:file:/root/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/edn.clj",1689946092000,"jar:file:/root/.m2/repository/nano-id/nano-id/1.0.0/nano-id-1.0.0.jar!/nano_id/random.cljc",1689946171000,"jar:file:/root/.m2/repository/environ/environ/1.2.0/environ-1.2.0.jar!/environ/core.cljc",1689946163000,"jar:file:/root/.m2/repository/prismatic/schema/1.4.1/schema-1.4.1.jar!/schema/spec/collection.cljc",1689946172000,"jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/vendor/clojure/tools/reader/impl/errors.clj",1689947050000,"jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/tagged_literals.cljc",1689947050000,"jar:file:/root/.m2/repository/instaparse/instaparse/1.4.12/instaparse-1.4.12.jar!/instaparse/repeat.clj",1689946146000,"jar:file:/root/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/java/io.clj",1689946092000,"jar:file:/root/.m2/repository/org/clojure/test.check/1.1.1/test.check-1.1.1.jar!/clojure/test/check/results.cljc",1689946177000,"jar:file:/root/.m2/repository/com/lambdaisland/glogi/1.2.164/glogi-1.2.164.jar!/lambdaisland/glogi.clj",1689947043000,"jar:file:/root/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/instant.clj",1689946092000,"file:/home/gmrworkspace/dashboard/shared/src/metabase/shared/util/namespaces.clj",1690286812000,"jar:file:/root/.m2/repository/org/clojure/tools.namespace/1.4.4/tools.namespace-1.4.4.jar!/clojure/tools/namespace/file.clj",1689946139000,"jar:file:/root/.m2/repository/org/clojure/core.match/1.0.1/core.match-1.0.1.jar!/cljs/core/match.clj",1689946174000,"jar:file:/root/.m2/repository/org/clojure/spec.alpha/0.3.218/spec.alpha-0.3.218.jar!/clojure/spec/gen/alpha.clj",1689946117000,"jar:file:/root/.m2/repository/metosin/malli/0.10.2/malli-0.10.2.jar!/malli/error.cljc",1689946170000,"file:/home/gmrworkspace/dashboard/shared/src/metabase/mbql/schema/macros.clj",1690286812000,"jar:file:/root/.m2/repository/prismatic/schema/1.4.1/schema-1.4.1.jar!/schema/utils.cljc",1689946172000,"file:/home/gmrworkspace/dashboard/src/metabase/util/malli/registry.cljc",1690286813000,"file:/home/gmrworkspace/dashboard/src/metabase/config.clj",1692013154929,"file:/home/gmrworkspace/dashboard/src/metabase/util/log.clj",1690286813000,"file:/home/gmrworkspace/dashboard/src/metabase/util/malli.cljc",1690286813000,"jar:file:/root/.m2/repository/org/clojure/test.check/1.1.1/test.check-1.1.1.jar!/clojure/test/check/rose_tree.cljc",1689946177000,"jar:file:/root/.m2/repository/org/clojure/tools.reader/1.3.6/tools.reader-1.3.6.jar!/clojure/tools/reader/impl/inspect.clj",1689946174000,"jar:file:/root/.m2/repository/instaparse/instaparse/1.4.12/instaparse-1.4.12.jar!/instaparse/combinators_source.clj",1689946146000,"jar:file:/root/.m2/repository/instaparse/instaparse/1.4.12/instaparse-1.4.12.jar!/instaparse/abnf.clj",1689946146000,"jar:file:/root/.m2/repository/org/clojure/tools.namespace/1.4.4/tools.namespace-1.4.4.jar!/clojure/tools/namespace/find.clj",1689946139000,"jar:file:/root/.m2/repository/org/tcrawley/dynapath/1.1.0/dynapath-1.1.0.jar!/dynapath/dynamic_classpath.clj",1689946174000,"file:/home/gmrworkspace/dashboard/src/metabase/lib/schema/temporal_bucketing.cljc",1690286812000,"jar:file:/root/.m2/repository/cheshire/cheshire/5.11.0/cheshire-5.11.0.jar!/cheshire/generate_seq.clj",1689946173000,"file:/home/gmrworkspace/dashboard/src/metabase/lib/schema/mbql_clause.cljc",1690286812000,"jar:file:/root/.m2/repository/metosin/malli/0.10.2/malli-0.10.2.jar!/malli/util.cljc",1689946170000,"file:/home/gmrworkspace/dashboard/src/metabase/util/jvm.clj",1692013156125],"~:analyzer",["^ ","^3",null,"^4",["^ "],"^5",["^ ","^6","metabase/lib/metadata.cljc","^7",1,"^8",5,"^9",1,"^:",26],"^;",["^ ","^<","^=","^>","^?","^@","^A","^B","^C","^D","^E"],"^F",null,"^G",["^H",[]],"^I","^J","^K",["^ "],"^N",null,"^O",["^ ","^P","^Q","^R","^S","^T","^T","^?","^?","^U","^U","^V","^V","^W","^W","^S","^S","^X","^X","^Y","^W","^Z","^U","^Q","^Q","^[","^T","^10","^X"],"^11",["^H",["^12"]],"~:shadow/js-access-global",["^H",["Error"]],"^13",null,"~:defs",["^ ","~$metric",["^ ","~:schema",["~:=>",["~:cat","~$MetadataProviderable","~:metabase.lib.schema.id/metric"],["~:maybe","~$MetricMetadata"]],"~:validate!","id48556","~:protocol-inline",null,"^5",["^ ","^9;",["^9<",["^9=","^9>","^9?"],["^9@","^9A"]],"^9B","id48556","^6","metabase/lib/metadata.cljc","^:",16,"^8",10,"~:raw-arglists",["^16",["~$quote",["^16",[["~$metadata-providerable","~:-","^9>","~$metric-id","~:-","^9?"]]]]],"^7",311,"^9",311,"~:arglists",["^16",["^9E",["^16",[["^9F","^9G"]]]]],"~:doc","Inputs: [metadata-providerable :- MetadataProviderable metric-id :- :metabase.lib.schema.id/metric]\n  Return: [:maybe MetricMetadata]\n          \n\n  Get metadata for the Metric with `metric-id`, if it can be found."],"^I","^29","^6","metabase/lib/metadata.cljc","^:",16,"~:method-params",["^16",[["^9F","^9G"]]],"~:protocol-impl",null,"~:arglists-meta",["^16",[null,null]],"^8",1,"~:variadic?",false,"^9D",["^16",["^9E",["^16",[["^9F","~:-","^9>","^9G","~:-","^9?"]]]]],"^7",311,"~:ret-tag","~$any","^9",311,"~:max-fixed-arity",2,"~:fn-var",true,"^9H",["^16",["^9E",["^16",[["^9F","^9G"]]]]],"^9I","Inputs: [metadata-providerable :- MetadataProviderable metric-id :- :metabase.lib.schema.id/metric]\n  Return: [:maybe MetricMetadata]\n          \n\n  Get metadata for the Metric with `metric-id`, if it can be found."],"^9A",["^ ","^5",["^ ","^6","metabase/lib/metadata.cljc","^7",140,"^8",6,"^9",140,"^:",20],"^I","^28","^6","metabase/lib/metadata.cljc","^:",20,"^8",1,"^7",140,"^9",140,"~:tag","~$cljs.core/IVector","^9I","Malli schema for a legacy v1 [[metabase.models.metric]], but with kebab-case keys. A Metric defines an MBQL snippet\n  with an aggregation and optionally a filter clause. You can add a `:metric` reference to the `:aggregations` in an\n  MBQL stage, and the QP treats it like a macro and expands it to the underlying clauses --\n  see [[metabase.query-processor.middleware.expand-macros]]."],"~$stage",["^ ","^9;",["^9<",["^9=","~:map","~:int"],["^9@","~$StageMetadata"]],"^9B","id48550","^9C",null,"^5",["^ ","^9;",["^9<",["^9=","^9U","^9V"],["^9@","^9W"]],"^9B","id48550","^6","metabase/lib/metadata.cljc","^:",15,"^8",10,"^9D",["^16",["^9E",["^16",[["~$query","~:-","^9U","~$stage-number","~:-","^9V"]]]]],"^7",264,"^9",264,"^9H",["^16",["^9E",["^16",[["^9X","^9Y"]]]]],"^9I","Inputs: [query :- :map stage-number :- :int]\n  Return: [:maybe StageMetadata]\n          \n\n  Get metadata associated with a particular `stage-number` of the query, if any. `stage-number` can be a negative\n  index.\n\n  Currently, only returns metadata if it is explicitly attached to a stage; in the future we will probably dynamically\n  calculate this stuff if possible based on DatabaseMetadata and previous stages. Stay tuned!"],"^I","^2=","^6","metabase/lib/metadata.cljc","^:",15,"^9J",["^16",[["^9X","^9Y"]]],"^9K",null,"^9L",["^16",[null,null]],"^8",1,"^9M",false,"^9D",["^16",["^9E",["^16",[["^9X","~:-","^9U","^9Y","~:-","^9V"]]]]],"^7",264,"^9N","^9O","^9",264,"^9P",2,"^9Q",true,"^9H",["^16",["^9E",["^16",[["^9X","^9Y"]]]]],"^9I","Inputs: [query :- :map stage-number :- :int]\n  Return: [:maybe StageMetadata]\n          \n\n  Get metadata associated with a particular `stage-number` of the query, if any. `stage-number` can be a negative\n  index.\n\n  Currently, only returns metadata if it is explicitly attached to a stage; in the future we will probably dynamically\n  calculate this stuff if possible based on DatabaseMetadata and previous stages. Stay tuned!"],"~$table",["^ ","^9;",["^9<",["^9=","^9>","~:metabase.lib.schema.id/table"],"~$TableMetadata"],"^9B","id48547","^9C",null,"^5",["^ ","^9;",["^9<",["^9=","^9>","^9["],"^:0"],"^9B","id48547","^6","metabase/lib/metadata.cljc","^:",15,"^8",10,"^9D",["^16",["^9E",["^16",[["^9F","~:-","^9>","~$table-id","~:-","^9["]]]]],"^7",212,"^9",212,"^9H",["^16",["^9E",["^16",[["^9F","^:1"]]]]],"^9I","Inputs: [metadata-providerable :- MetadataProviderable table-id :- :metabase.lib.schema.id/table]\n  Return: TableMetadata\n          \n\n  Find metadata for a specific Table, either by string `table-name`, and optionally `schema`, or by ID."],"^I","^2>","^6","metabase/lib/metadata.cljc","^:",15,"^9J",["^16",[["^9F","^:1"]]],"^9K",null,"^9L",["^16",[null,null]],"^8",1,"^9M",false,"^9D",["^16",["^9E",["^16",[["^9F","~:-","^9>","^:1","~:-","^9["]]]]],"^7",212,"^9N","^9O","^9",212,"^9P",2,"^9Q",true,"^9H",["^16",["^9E",["^16",[["^9F","^:1"]]]]],"^9I","Inputs: [metadata-providerable :- MetadataProviderable table-id :- :metabase.lib.schema.id/table]\n  Return: TableMetadata\n          \n\n  Find metadata for a specific Table, either by string `table-name`, and optionally `schema`, or by ID."],"~$DatabaseMetadata",["^ ","^5",["^ ","^6","metabase/lib/metadata.cljc","^7",167,"^8",6,"^9",167,"^:",22],"^I","^1K","^6","metabase/lib/metadata.cljc","^:",22,"^8",1,"^7",167,"^9",167,"^9R","^9S","^9I","Malli schema for the DatabaseMetadata as returned by `GET /api/database/:id/metadata` -- what should be available to\n  the frontend Query Builder."],"~$fields",["^ ","^9;",["^9<",["^9=","^9>","^9["],["~:sequential","~$ColumnMetadata"]],"^9B","id48548","^9C",null,"^5",["^ ","^9;",["^9<",["^9=","^9>","^9["],["^:4","^:5"]],"^9B","id48548","^6","metabase/lib/metadata.cljc","^:",16,"^8",10,"^9D",["^16",["^9E",["^16",[["^9F","~:-","^9>","^:1","~:-","^9["]]]]],"^7",218,"^9",218,"^9H",["^16",["^9E",["^16",[["^9F","^:1"]]]]],"^9I","Inputs: [metadata-providerable :- MetadataProviderable table-id :- :metabase.lib.schema.id/table]\n  Return: [:sequential ColumnMetadata]\n          \n\n  Get metadata about all the Fields belonging to a specific Table."],"^I","^1L","^6","metabase/lib/metadata.cljc","^:",16,"^9J",["^16",[["^9F","^:1"]]],"^9K",null,"^9L",["^16",[null,null]],"^8",1,"^9M",false,"^9D",["^16",["^9E",["^16",[["^9F","~:-","^9>","^:1","~:-","^9["]]]]],"^7",218,"^9N","^9O","^9",218,"^9P",2,"^9Q",true,"^9H",["^16",["^9E",["^16",[["^9F","^:1"]]]]],"^9I","Inputs: [metadata-providerable :- MetadataProviderable table-id :- :metabase.lib.schema.id/table]\n  Return: [:sequential ColumnMetadata]\n          \n\n  Get metadata about all the Fields belonging to a specific Table."],"^9W",["^ ","^5",["^ ","^6","metabase/lib/metadata.cljc","^7",232,"^8",6,"^9",232,"^:",19],"^I","^1M","^6","metabase/lib/metadata.cljc","^:",19,"^8",1,"^7",232,"^9",232,"^9R","^9S","^9I","Metadata about the columns returned by a particular stage of a pMBQL query. For example a single-stage native query\n  like\n\n    {:database 1\n     :lib/type :mbql/query\n     :stages   [{:lib/type :mbql.stage/mbql\n                 :native   \"SELECT id, name FROM VENUES;\"}]}\n\n  might have stage metadata like\n\n    {:columns [{:name \"id\", :base-type :type/Integer}\n               {:name \"name\", :base-type :type/Text}]}\n\n  associated with the query's lone stage.\n\n  At some point in the near future we will hopefully attach this metadata directly to each stage in a query, so a\n  multi-stage query will have `:lib/stage-metadata` for each stage. The main goal is to facilitate things like\n  returning lists of visible or filterable columns for a given stage of a query. This is TBD, see #28717 for a WIP\n  implementation of this idea.\n\n  This is the same format as the results metadata returned with QP results in `data.results_metadata`. The `:columns`\n  portion of this (`data.results_metadata.columns`) is also saved as `Card.result_metadata` for Saved Questions.\n\n  Note that queries currently actually come back with both `data.results_metadata` AND `data.cols`; it looks like the\n  Frontend actually *merges* these together -- see `applyMetadataDiff` in\n  `frontend/src/metabase/query_builder/selectors.js` -- but this is ridiculous. Let's try to merge anything missing in\n  `results_metadata` into `cols` going forward so things don't need to be manually merged in the future."],"~$tables",["^ ","^9;",["^9<",["^9=","^9>"],["^:4","^:0"]],"^9B","id48546","^9C",null,"^5",["^ ","^9;",["^9<",["^9=","^9>"],["^:4","^:0"]],"^9B","id48546","^6","metabase/lib/metadata.cljc","^:",16,"^8",10,"^9D",["^16",["^9E",["^16",[["^9F","~:-","^9>"]]]]],"^7",207,"^9",207,"^9H",["^16",["^9E",["^16",[["^9F"]]]]],"^9I","Inputs: [metadata-providerable :- MetadataProviderable]\n  Return: [:sequential TableMetadata]\n          \n\n  Get metadata about all Tables for the Database we're querying."],"^I","^1P","^6","metabase/lib/metadata.cljc","^:",16,"^9J",["^16",[["^9F"]]],"^9K",null,"^9L",["^16",[null,null]],"^8",1,"^9M",false,"^9D",["^16",["^9E",["^16",[["^9F","~:-","^9>"]]]]],"^7",207,"^9N","^9O","^9",207,"^9P",1,"^9Q",true,"^9H",["^16",["^9E",["^16",[["^9F"]]]]],"^9I","Inputs: [metadata-providerable :- MetadataProviderable]\n  Return: [:sequential TableMetadata]\n          \n\n  Get metadata about all Tables for the Database we're querying."],"~$CardMetadata",["^ ","^5",["^ ","^6","metabase/lib/metadata.cljc","^7",104,"^8",6,"^9",104,"^:",18],"^I","^1O","^6","metabase/lib/metadata.cljc","^:",18,"^8",1,"^7",104,"^9",104,"^9R","^9S","^9I","Schema for metadata about a specific Saved Question (which may or may not be a Model). More or less the same as\n  a [[metabase.models.card]], but with kebab-case keys. Note that the `:dataset-query` is not necessarily converted to\n  pMBQL yet. Probably safe to assume it is normalized however. Likewise, `:result-metadata` is probably not quite\n  massaged into a sequence of `ColumnMetadata`s just yet. See [[metabase.lib.card/card-metadata-columns]] that\n  converts these as needed."],"~$field",["^ ","^9;",["^9<",["^9=","^9>","~:metabase.lib.schema.id/field"],"^:5"],"^9B","id48549","^9C",null,"^5",["^ ","^9;",["^9<",["^9=","^9>","^:9"],"^:5"],"^9B","id48549","^6","metabase/lib/metadata.cljc","^:",15,"^8",10,"^9D",["^16",["^9E",["^16",[["^9F","~:-","^9>","~$field-id","~:-","^:9"]]]]],"^7",224,"^9",224,"^9H",["^16",["^9E",["^16",[["^9F","^::"]]]]],"^9I","Inputs: [metadata-providerable :- MetadataProviderable field-id :- :metabase.lib.schema.id/field]\n  Return: ColumnMetadata\n          \n\n  Get metadata about a specific Field in the Database we're querying."],"^I","^1N","^6","metabase/lib/metadata.cljc","^:",15,"^9J",["^16",[["^9F","^::"]]],"^9K",null,"^9L",["^16",[null,null]],"^8",1,"^9M",false,"^9D",["^16",["^9E",["^16",[["^9F","~:-","^9>","^::","~:-","^:9"]]]]],"^7",224,"^9N","^9O","^9",224,"^9P",2,"^9Q",true,"^9H",["^16",["^9E",["^16",[["^9F","^::"]]]]],"^9I","Inputs: [metadata-providerable :- MetadataProviderable field-id :- :metabase.lib.schema.id/field]\n  Return: ColumnMetadata\n          \n\n  Get metadata about a specific Field in the Database we're querying."],"~$table-or-card",["^ ","^9;",["^9<",["^9=","^9>",["~:or","^9[","~:string"]],["^9@",["^:<","^:7","^:0"]]],"^9B","id48557","^9C",null,"^5",["^ ","^9;",["^9<",["^9=","^9>",["^:<","^9[","^:="]],["^9@",["^:<","^:7","^:0"]]],"^9B","id48557","^6","metabase/lib/metadata.cljc","^:",23,"^8",10,"^9D",["^16",["^9E",["^16",[["^9F","~:-","^9>","^:1","~:-",["^:<","^9[","^:="]]]]]],"^7",317,"^9",317,"^9H",["^16",["^9E",["^16",[["^9F","^:1"]]]]],"^9I","Inputs: [metadata-providerable :- MetadataProviderable table-id :- [:or :metabase.lib.schema.id/table :string]]\n  Return: [:maybe [:or CardMetadata TableMetadata]]\n          \n\n  Convenience, for frontend JS usage (see #31915): look up metadata based on Table ID, handling legacy-style\n  `card__<id>` strings as well. Throws an Exception (Clj-only, due to Malli validation) if passed an integer Table ID\n  and the Table does not exist, since this is a real error; however if passed a `card__<id>` that does not exist,\n  simply returns `nil` (since we do not have a strict expectation that Cards always be present in the\n  MetadataProvider)."],"^I","^1Q","^6","metabase/lib/metadata.cljc","^:",23,"^9J",["^16",[["^9F","^:1"]]],"^9K",null,"^9L",["^16",[null,null]],"^8",1,"^9M",false,"^9D",["^16",["^9E",["^16",[["^9F","~:-","^9>","^:1","~:-",["^:<","^9[","^:="]]]]]],"^7",317,"^9N","^9O","^9",317,"^9P",2,"^9Q",true,"^9H",["^16",["^9E",["^16",[["^9F","^:1"]]]]],"^9I","Inputs: [metadata-providerable :- MetadataProviderable table-id :- [:or :metabase.lib.schema.id/table :string]]\n  Return: [:maybe [:or CardMetadata TableMetadata]]\n          \n\n  Convenience, for frontend JS usage (see #31915): look up metadata based on Table ID, handling legacy-style\n  `card__<id>` strings as well. Throws an Exception (Clj-only, due to Malli validation) if passed an integer Table ID\n  and the Table does not exist, since this is a real error; however if passed a `card__<id>` that does not exist,\n  simply returns `nil` (since we do not have a strict expectation that Cards always be present in the\n  MetadataProvider)."],"~$stage-column",["^ ","^9;",["~:function",["^9<",["^9=","^9U","~:metabase.lib.schema.common/non-blank-string"],["^9@","^:5"]],["^9<",["^9=","^9U","^9V","^:@"],["^9@","^:5"]]],"^9B","id48551","^9C",null,"^5",["^ ","^9;",["^:?",["^9<",["^9=","^9U","^:@"],["^9@","^:5"]],["^9<",["^9=","^9U","^9V","^:@"],["^9@","^:5"]]],"^9B","id48551","^6","metabase/lib/metadata.cljc","^:",22,"~:top-fn",["^ ","^9M",false,"~:fixed-arity",3,"^9P",3,"^9J",[["^9X","~$column-name"],["^9X","^9Y","^:C"]],"^9H",["^16",[["^9X","^:C"],["^9X","^9Y","^:C"]]],"^9L",["^16",[null,null]]],"^8",10,"^9D",["^16",["^9E",["^16",[["^9X","~:-","^9U","^:C","~:-","^:@"],["^9X","~:-","^9U","^9Y","~:-","^9V","^:C","~:-","^:@"]]]]],"^7",274,"^9",274,"^9H",["^16",["^9E",["^16",[["^9X","^:C"],["^9X","^9Y","^:C"]]]]],"^9I","Inputs: ([query :- :map column-name :- :metabase.lib.schema.common/non-blank-string]\n           [query :- :map stage-number :- :int column-name :- :metabase.lib.schema.common/non-blank-string])\n  Return: [:maybe ColumnMetadata]\n          \n\n  Metadata about a specific column returned by a specific stage of the query, e.g. perhaps the first stage of the\n  query has an expression `num_cans`, then\n\n    (lib.metadata/stage-column query stage \"num_cans\")\n\n  should return something like\n\n    {:name \"num_cans\", :base-type :type/Integer, ...}\n\n  This is currently a best-effort thing and will only return information about columns if stage metadata is attached\n  to a particular stage. In the near term future this should be better about calculating that metadata dynamically and\n  returning correct info here."],"^I","^1R","^6","metabase/lib/metadata.cljc","^:",22,"^:A",["^ ","^9M",false,"^:B",3,"^9P",3,"^9J",[["^9X","^:C"],["^9X","^9Y","^:C"]],"^9H",["^16",[["^9X","^:C"],["^9X","^9Y","^:C"]]],"^9L",["^16",[null,null]]],"^9J",[["^9X","^:C"],["^9X","^9Y","^:C"]],"^9K",null,"^:B",3,"^9L",["^16",[null,null]],"^8",1,"^9M",false,"~:methods",[["^ ","^:B",2,"^9M",false,"^9R","^9O"],["^ ","^:B",3,"^9M",false,"^9R",["^H",["^9O","~$clj-nil"]]]],"^9D",["^16",["^9E",["^16",[["^9X","~:-","^9U","^:C","~:-","^:@"],["^9X","~:-","^9U","^9Y","~:-","^9V","^:C","~:-","^:@"]]]]],"^7",274,"^9",274,"^9P",3,"^9Q",true,"^9H",["^16",[["^9X","^:C"],["^9X","^9Y","^:C"]]],"^9I","Inputs: ([query :- :map column-name :- :metabase.lib.schema.common/non-blank-string]\n           [query :- :map stage-number :- :int column-name :- :metabase.lib.schema.common/non-blank-string])\n  Return: [:maybe ColumnMetadata]\n          \n\n  Metadata about a specific column returned by a specific stage of the query, e.g. perhaps the first stage of the\n  query has an expression `num_cans`, then\n\n    (lib.metadata/stage-column query stage \"num_cans\")\n\n  should return something like\n\n    {:name \"num_cans\", :base-type :type/Integer, ...}\n\n  This is currently a best-effort thing and will only return information about columns if stage metadata is attached\n  to a particular stage. In the near term future this should be better about calculating that metadata dynamically and\n  returning correct info here."],"~$SegmentMetadata",["^ ","^5",["^ ","^6","metabase/lib/metadata.cljc","^7",132,"^8",6,"^9",132,"^:",21],"^I","^1U","^6","metabase/lib/metadata.cljc","^:",21,"^8",1,"^7",132,"^9",132,"^9R","^9S","^9I","More or less the same as a [[metabase.models.segment]], but with kebab-case keys."],"~$card",["^ ","^9;",["^9<",["^9=","^9>","~:metabase.lib.schema.id/card"],["^9@","^:7"]],"^9B","id48554","^9C",null,"^5",["^ ","^9;",["^9<",["^9=","^9>","^:H"],["^9@","^:7"]],"^9B","id48554","^6","metabase/lib/metadata.cljc","^:",14,"^8",10,"^9D",["^16",["^9E",["^16",[["^9F","~:-","^9>","~$card-id","~:-","^:H"]]]]],"^7",299,"^9",299,"^9H",["^16",["^9E",["^16",[["^9F","^:I"]]]]],"^9I","Inputs: [metadata-providerable :- MetadataProviderable card-id :- :metabase.lib.schema.id/card]\n  Return: [:maybe CardMetadata]\n          \n\n  Get metadata for a Card, aka Saved Question, with `card-id`, if it can be found."],"^I","^1X","^6","metabase/lib/metadata.cljc","^:",14,"^9J",["^16",[["^9F","^:I"]]],"^9K",null,"^9L",["^16",[null,null]],"^8",1,"^9M",false,"^9D",["^16",["^9E",["^16",[["^9F","~:-","^9>","^:I","~:-","^:H"]]]]],"^7",299,"^9N","^9O","^9",299,"^9P",2,"^9Q",true,"^9H",["^16",["^9E",["^16",[["^9F","^:I"]]]]],"^9I","Inputs: [metadata-providerable :- MetadataProviderable card-id :- :metabase.lib.schema.id/card]\n  Return: [:maybe CardMetadata]\n          \n\n  Get metadata for a Card, aka Saved Question, with `card-id`, if it can be found."],"^:5",["^ ","^5",["^ ","^6","metabase/lib/metadata.cljc","^7",54,"^8",6,"^9",54,"^:",20],"^I","^1Y","^6","metabase/lib/metadata.cljc","^:",20,"^8",1,"^7",54,"^9",54,"^9R","^9S","^9I","Malli schema for a valid map of column metadata, which can mean one of two things:\n\n  1. Metadata about a particular Field in the application database. This will always have an `:id`\n\n  2. Results metadata from a column in `data.cols` and/or `data.results_metadata.columns` in a Query Processor\n     response, or saved in something like `Card.result_metadata`. These *may* have an `:id`, or may not -- columns\n     coming back from native queries or things like `SELECT count(*)` aren't associated with any particular `Field`\n     and thus will not have an `:id`.\n\n  Now maybe these should be two different schemas, but `:id` being there or not is the only real difference; besides\n  that they are largely compatible. So they're the same for now. We can revisit this in the future if we actually want\n  to differentiate between the two versions."],"~$->metadata-provider",["^ ","^9;",["^9<",["^9=","^9>"],"~$MetadataProvider"],"^9B","id48542","^9C",null,"^5",["^ ","^9;",["^9<",["^9=","^9>"],"^:K"],"^9B","id48542","^6","metabase/lib/metadata.cljc","^:",29,"^8",10,"^9D",["^16",["^9E",["^16",[["^9F","~:-","^9>"]]]]],"^7",195,"^9",195,"^9H",["^16",["^9E",["^16",[["^9F"]]]]],"^9I","Inputs: [metadata-providerable :- MetadataProviderable]\n  Return: MetadataProvider\n          \n\n  Get a MetadataProvider from something that can provide one."],"^I","^1[","^6","metabase/lib/metadata.cljc","^:",29,"^9J",["^16",[["^9F"]]],"^9K",null,"^9L",["^16",[null,null]],"^8",1,"^9M",false,"^9D",["^16",["^9E",["^16",[["^9F","~:-","^9>"]]]]],"^7",195,"^9N",["^H",[null,"^9O"]],"^9",195,"^9P",1,"^9Q",true,"^9H",["^16",["^9E",["^16",[["^9F"]]]]],"^9I","Inputs: [metadata-providerable :- MetadataProviderable]\n  Return: MetadataProvider\n          \n\n  Get a MetadataProvider from something that can provide one."],"^:0",["^ ","^5",["^ ","^6","metabase/lib/metadata.cljc","^7",156,"^8",6,"^9",156,"^:",19],"^I","^21","^6","metabase/lib/metadata.cljc","^:",19,"^8",1,"^7",156,"^9",156,"^9R","^9S","^9I","Schema for metadata about a specific [[metabase.models.table]]. More or less the same as a [[metabase.models.table]],\n  but with kebab-case keys."],"~$segment",["^ ","^9;",["^9<",["^9=","^9>","~:metabase.lib.schema.id/segment"],["^9@","^:F"]],"^9B","id48555","^9C",null,"^5",["^ ","^9;",["^9<",["^9=","^9>","^:M"],["^9@","^:F"]],"^9B","id48555","^6","metabase/lib/metadata.cljc","^:",17,"^8",10,"^9D",["^16",["^9E",["^16",[["^9F","~:-","^9>","~$segment-id","~:-","^:M"]]]]],"^7",305,"^9",305,"^9H",["^16",["^9E",["^16",[["^9F","^:N"]]]]],"^9I","Inputs: [metadata-providerable :- MetadataProviderable segment-id :- :metabase.lib.schema.id/segment]\n  Return: [:maybe SegmentMetadata]\n          \n\n  Get metadata for the Segment with `segment-id`, if it can be found."],"^I","^22","^6","metabase/lib/metadata.cljc","^:",17,"^9J",["^16",[["^9F","^:N"]]],"^9K",null,"^9L",["^16",[null,null]],"^8",1,"^9M",false,"^9D",["^16",["^9E",["^16",[["^9F","~:-","^9>","^:N","~:-","^:M"]]]]],"^7",305,"^9N","^9O","^9",305,"^9P",2,"^9Q",true,"^9H",["^16",["^9E",["^16",[["^9F","^:N"]]]]],"^9I","Inputs: [metadata-providerable :- MetadataProviderable segment-id :- :metabase.lib.schema.id/segment]\n  Return: [:maybe SegmentMetadata]\n          \n\n  Get metadata for the Segment with `segment-id`, if it can be found."],"^:K",["^ ","^5",["^ ","^6","metabase/lib/metadata.cljc","^7",180,"^8",6,"^9",180,"^:",22],"^I","^24","^6","metabase/lib/metadata.cljc","^:",22,"^8",1,"^7",180,"^9",180,"^9R","^9S","^9I","Schema for something that satisfies the [[lib.metadata.protocols/MetadataProvider]] protocol."],"~$database",["^ ","^9;",["^9<",["^9=","^9>"],"^:2"],"^9B","id48545","^9C",null,"^5",["^ ","^9;",["^9<",["^9=","^9>"],"^:2"],"^9B","id48545","^6","metabase/lib/metadata.cljc","^:",18,"^8",10,"^9D",["^16",["^9E",["^16",[["^9F","~:-","^9>"]]]]],"^7",202,"^9",202,"^9H",["^16",["^9E",["^16",[["^9F"]]]]],"^9I","Inputs: [metadata-providerable :- MetadataProviderable]\n  Return: DatabaseMetadata\n          \n\n  Get metadata about the Database we're querying."],"^I","^26","^6","metabase/lib/metadata.cljc","^:",18,"^9J",["^16",[["^9F"]]],"^9K",null,"^9L",["^16",[null,null]],"^8",1,"^9M",false,"^9D",["^16",["^9E",["^16",[["^9F","~:-","^9>"]]]]],"^7",202,"^9N","^9O","^9",202,"^9P",1,"^9Q",true,"^9H",["^16",["^9E",["^16",[["^9F"]]]]],"^9I","Inputs: [metadata-providerable :- MetadataProviderable]\n  Return: DatabaseMetadata\n          \n\n  Get metadata about the Database we're querying."],"^9>",["^ ","^5",["^ ","^6","metabase/lib/metadata.cljc","^7",186,"^8",6,"^9",186,"^:",26],"^I","^25","^6","metabase/lib/metadata.cljc","^:",26,"^8",1,"^7",186,"^9",186,"^9R","^9S","^9I","Something that can be used to get a MetadataProvider. Either a MetadataProvider, or a map with a MetadataProvider in\n  the key `:lib/metadata` (i.e., a query)."]],"^14",["^ ","^?","^?","^P","^Q","^W","^W","^Y","^W","^Q","^Q"],"~:cljs.analyzer/constants",["^ ","^11",["^H",["~:source/expressions","~:description","~:enum","~:features","~$x","~:metabase.lib.schema.id/database","^9;","~:lib/type","~:metadata/segment","~:min","~:definition","~:metadata/column","~:base-type","~:lib/metadata","~:fn","~$metadata-provider?","^:@","~:table-id","~:ref","~:metabase.lib.metadata/column-source","~:source/aggregations","^1W","^9@","^:4","^M","~:metadata/database","~:columns","^I","^T","^:<","~:lib/source","^6","~:lib/source-column-alias","~:lib/stage-metadata","^:","~:source/card","~:tables","~:source/native","^:=","~:source/joins","~:metabase.lib.schema.common/base-type","~:effective-type","~:metadata/metric","^8","~:result-metadata","^:9","~:metadata/results","~:source/breakouts","~:source/implicitly-joinable","~:metadata/table","^7","~:source/fields","~:keyword","~:max","~:id","~:source-alias","~:optional","^9?","~:database-id","~:lib/desired-column-alias","~:error/message","^9","^:H","~:display-name","^:M","~:set","~:source/table-defaults","^9H","~:dataset-query","^9[","^9I","~:selected?","~:=","~:boolean","^9U","~:fk-field-id","~:test","~:dataset","~:source/previous-stage","~:metadata/card"]],"~:order",["^;5","^:S","^;<","^;>","^;Z","^;S","^;H","^;6","^;E","^;?","^:Q","^;F","^9U","^;P","^:V","~:=","^:Z","^I","^:@","^:[","^;@","^;K","^;M","^:9","^;Q","^9@","^;A","^;W","^;L","^;9","^;4","^;:","^;O","^:=","^:X","^;J","^;U","^;V","^;[","^:H","^;T","^;C","^:4","^;Y","^;N","^:U","^;3","^9[","^:W","^:M","^;B","^9?","^:Y","^:R","^;G","^9;","^;7","^;=","^:T","^;R","^;I","^;1","^1W","^M","^6","^:","^8","^7","^9","^9H","^9I","^;X","^T","^;2","~$x","^:<","^;0","^;D","^;8","^;;"]],"^19",["^ ","^12",["^H",[]]],"^1:",["^ "],"^1;",["^V","^?","^T","^S","^X","^U","^Q","^W"]],"^M","^J","~:ns-specs",["^ "],"~:ns-spec-vars",["^H",[]],"~:compiler-options",["^2C",[["^<3","~:static-fns"],true,["^<3","~:shadow-tweaks"],null,["^<3","~:source-map-inline"],null,["^<3","~:elide-asserts"],true,["^<3","~:optimize-constants"],null,["^<3","^1@"],null,["^<3","~:external-config"],null,["^<3","~:tooling-config"],null,["^<3","~:emit-constants"],null,["^<3","~:load-tests"],false,["^<3","~:form-size-threshold"],null,["^<3","~:global-goog-object&array"],null,["^<3","~:data-readers"],null,["^<3","~:infer-externs"],"~:auto",["^<3","^1B"],["^H",["^1C"]],["~:js-options","~:js-provider"],"^12",["~:mode"],"~:release",["^<3","~:fn-invoke-direct"],null,["^<3","~:source-map"],null]]]