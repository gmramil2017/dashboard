["^ ","~:output",["^ ","~:js","goog.provide('metabase.mbql.util.match.impl');\n/**\n * Return a function to use for pattern matching via `core.match`'s `:guard` functionality based on the value of a\n *   `pred-or-class` passed in as a pattern to `match` or `replace`.\n * \n *   (Class-based matching currently only works in Clojure. For ClojureScript, only predicate function matching works.)\n */\nmetabase.mbql.util.match.impl.match_with_pred_or_class = (function metabase$mbql$util$match$impl$match_with_pred_or_class(pred_or_class){\nif(cljs.core.fn_QMARK_(pred_or_class)){\nreturn pred_or_class;\n} else {\nthrow cljs.core.ex_info.cljs$core$IFn$_invoke$arity$2(\"Invalid pattern: don't know how to handle symbol.\",new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"symbol\",\"symbol\",-1038572696),pred_or_class], null));\n\n}\n});\n/**\n * Internal impl for `match`. If `form` is a collection, call `match-fn` to recursively look for matches in it.\n */\nmetabase.mbql.util.match.impl.match_in_collection = (function metabase$mbql$util$match$impl$match_in_collection(match_fn,clause_parents,form){\n\n\nif(cljs.core.map_QMARK_(form)){\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$2(cljs.core.concat,(function (){var iter__5523__auto__ = (function metabase$mbql$util$match$impl$match_in_collection_$_iter__46940(s__46941){\nreturn (new cljs.core.LazySeq(null,(function (){\nvar s__46941__$1 = s__46941;\nwhile(true){\nvar temp__5804__auto__ = cljs.core.seq(s__46941__$1);\nif(temp__5804__auto__){\nvar s__46941__$2 = temp__5804__auto__;\nif(cljs.core.chunked_seq_QMARK_(s__46941__$2)){\nvar c__5521__auto__ = cljs.core.chunk_first(s__46941__$2);\nvar size__5522__auto__ = cljs.core.count(c__5521__auto__);\nvar b__46943 = cljs.core.chunk_buffer(size__5522__auto__);\nif((function (){var i__46942 = (0);\nwhile(true){\nif((i__46942 < size__5522__auto__)){\nvar vec__46944 = cljs.core._nth(c__5521__auto__,i__46942);\nvar k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__46944,(0),null);\nvar v = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__46944,(1),null);\ncljs.core.chunk_append(b__46943,(function (){var G__46947 = cljs.core.conj.cljs$core$IFn$_invoke$arity$2(clause_parents,k);\nvar G__46948 = v;\nreturn (match_fn.cljs$core$IFn$_invoke$arity$2 ? match_fn.cljs$core$IFn$_invoke$arity$2(G__46947,G__46948) : match_fn.call(null,G__46947,G__46948));\n})());\n\nvar G__46976 = (i__46942 + (1));\ni__46942 = G__46976;\ncontinue;\n} else {\nreturn true;\n}\nbreak;\n}\n})()){\nreturn cljs.core.chunk_cons(cljs.core.chunk(b__46943),metabase$mbql$util$match$impl$match_in_collection_$_iter__46940(cljs.core.chunk_rest(s__46941__$2)));\n} else {\nreturn cljs.core.chunk_cons(cljs.core.chunk(b__46943),null);\n}\n} else {\nvar vec__46949 = cljs.core.first(s__46941__$2);\nvar k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__46949,(0),null);\nvar v = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__46949,(1),null);\nreturn cljs.core.cons((function (){var G__46952 = cljs.core.conj.cljs$core$IFn$_invoke$arity$2(clause_parents,k);\nvar G__46953 = v;\nreturn (match_fn.cljs$core$IFn$_invoke$arity$2 ? match_fn.cljs$core$IFn$_invoke$arity$2(G__46952,G__46953) : match_fn.call(null,G__46952,G__46953));\n})(),metabase$mbql$util$match$impl$match_in_collection_$_iter__46940(cljs.core.rest(s__46941__$2)));\n}\n} else {\nreturn null;\n}\nbreak;\n}\n}),null,null));\n});\nreturn iter__5523__auto__(form);\n})());\n} else {\nif(cljs.core.sequential_QMARK_(form)){\nreturn cljs.core.mapcat.cljs$core$IFn$_invoke$arity$variadic(cljs.core.partial.cljs$core$IFn$_invoke$arity$2(match_fn,(((cljs.core.first(form) instanceof cljs.core.Keyword))?cljs.core.conj.cljs$core$IFn$_invoke$arity$2(clause_parents,cljs.core.first(form)):clause_parents)),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([form], 0));\n} else {\nreturn null;\n}\n}\n});\n/**\n * Inernal impl for `replace`. Recursively replace values in a collection using a `replace-fn`.\n */\nmetabase.mbql.util.match.impl.replace_in_collection = (function metabase$mbql$util$match$impl$replace_in_collection(replace_fn,clause_parents,form){\nif(cljs.core.map_QMARK_(form)){\nreturn cljs.core.into.cljs$core$IFn$_invoke$arity$2(form,(function (){var iter__5523__auto__ = (function metabase$mbql$util$match$impl$replace_in_collection_$_iter__46954(s__46955){\nreturn (new cljs.core.LazySeq(null,(function (){\nvar s__46955__$1 = s__46955;\nwhile(true){\nvar temp__5804__auto__ = cljs.core.seq(s__46955__$1);\nif(temp__5804__auto__){\nvar s__46955__$2 = temp__5804__auto__;\nif(cljs.core.chunked_seq_QMARK_(s__46955__$2)){\nvar c__5521__auto__ = cljs.core.chunk_first(s__46955__$2);\nvar size__5522__auto__ = cljs.core.count(c__5521__auto__);\nvar b__46957 = cljs.core.chunk_buffer(size__5522__auto__);\nif((function (){var i__46956 = (0);\nwhile(true){\nif((i__46956 < size__5522__auto__)){\nvar vec__46958 = cljs.core._nth(c__5521__auto__,i__46956);\nvar k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__46958,(0),null);\nvar v = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__46958,(1),null);\ncljs.core.chunk_append(b__46957,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [k,(function (){var G__46962 = cljs.core.conj.cljs$core$IFn$_invoke$arity$2(clause_parents,k);\nvar G__46963 = v;\nreturn (replace_fn.cljs$core$IFn$_invoke$arity$2 ? replace_fn.cljs$core$IFn$_invoke$arity$2(G__46962,G__46963) : replace_fn.call(null,G__46962,G__46963));\n})()], null));\n\nvar G__46980 = (i__46956 + (1));\ni__46956 = G__46980;\ncontinue;\n} else {\nreturn true;\n}\nbreak;\n}\n})()){\nreturn cljs.core.chunk_cons(cljs.core.chunk(b__46957),metabase$mbql$util$match$impl$replace_in_collection_$_iter__46954(cljs.core.chunk_rest(s__46955__$2)));\n} else {\nreturn cljs.core.chunk_cons(cljs.core.chunk(b__46957),null);\n}\n} else {\nvar vec__46964 = cljs.core.first(s__46955__$2);\nvar k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__46964,(0),null);\nvar v = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__46964,(1),null);\nreturn cljs.core.cons(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [k,(function (){var G__46967 = cljs.core.conj.cljs$core$IFn$_invoke$arity$2(clause_parents,k);\nvar G__46968 = v;\nreturn (replace_fn.cljs$core$IFn$_invoke$arity$2 ? replace_fn.cljs$core$IFn$_invoke$arity$2(G__46967,G__46968) : replace_fn.call(null,G__46967,G__46968));\n})()], null),metabase$mbql$util$match$impl$replace_in_collection_$_iter__46954(cljs.core.rest(s__46955__$2)));\n}\n} else {\nreturn null;\n}\nbreak;\n}\n}),null,null));\n});\nreturn iter__5523__auto__(form);\n})());\n} else {\nif(cljs.core.sequential_QMARK_(form)){\nreturn cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.partial.cljs$core$IFn$_invoke$arity$2(replace_fn,(((cljs.core.first(form) instanceof cljs.core.Keyword))?cljs.core.conj.cljs$core$IFn$_invoke$arity$2(clause_parents,cljs.core.first(form)):clause_parents)),form);\n} else {\nreturn form;\n\n}\n}\n});\n/**\n * Like `update-in`, but only updates in the existing value is non-empty.\n */\nmetabase.mbql.util.match.impl.update_in_unless_empty = (function metabase$mbql$util$match$impl$update_in_unless_empty(var_args){\nvar args__5775__auto__ = [];\nvar len__5769__auto___46981 = arguments.length;\nvar i__5770__auto___46982 = (0);\nwhile(true){\nif((i__5770__auto___46982 < len__5769__auto___46981)){\nargs__5775__auto__.push((arguments[i__5770__auto___46982]));\n\nvar G__46983 = (i__5770__auto___46982 + (1));\ni__5770__auto___46982 = G__46983;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__5776__auto__ = ((((3) < args__5775__auto__.length))?(new cljs.core.IndexedSeq(args__5775__auto__.slice((3)),(0),null)):null);\nreturn metabase.mbql.util.match.impl.update_in_unless_empty.cljs$core$IFn$_invoke$arity$variadic((arguments[(0)]),(arguments[(1)]),(arguments[(2)]),argseq__5776__auto__);\n});\n\n(metabase.mbql.util.match.impl.update_in_unless_empty.cljs$core$IFn$_invoke$arity$variadic = (function (m,ks,f,args){\nif(cljs.core.not(cljs.core.seq(cljs.core.get_in.cljs$core$IFn$_invoke$arity$2(m,ks)))){\nreturn m;\n} else {\nreturn cljs.core.apply.cljs$core$IFn$_invoke$arity$5(cljs.core.update_in,m,ks,f,args);\n}\n}));\n\n(metabase.mbql.util.match.impl.update_in_unless_empty.cljs$lang$maxFixedArity = (3));\n\n/** @this {Function} */\n(metabase.mbql.util.match.impl.update_in_unless_empty.cljs$lang$applyTo = (function (seq46969){\nvar G__46970 = cljs.core.first(seq46969);\nvar seq46969__$1 = cljs.core.next(seq46969);\nvar G__46971 = cljs.core.first(seq46969__$1);\nvar seq46969__$2 = cljs.core.next(seq46969__$1);\nvar G__46972 = cljs.core.first(seq46969__$2);\nvar seq46969__$3 = cljs.core.next(seq46969__$2);\nvar self__5754__auto__ = this;\nreturn self__5754__auto__.cljs$core$IFn$_invoke$arity$variadic(G__46970,G__46971,G__46972,seq46969__$3);\n}));\n\n","~:ns-info",["^ ","~:rename-macros",null,"~:renames",["^ "],"~:meta",["^ ","~:doc","Internal implementation of the MBQL `match` and `replace` macros. Don't use these directly.","~:file","metabase/mbql/util/match/impl.cljc","~:line",1,"~:column",5,"~:end-line",1,"~:end-column",34],"~:ns-aliases",["^ ","~$cljs.loader","~$shadow.loader","~$clojure.core","~$cljs.core","~$clojure.spec.gen.alpha","~$cljs.spec.gen.alpha","~$clojure.pprint","~$cljs.pprint","~$clojure.core.match","~$cljs.core.match"],"~:use-macros",null,"~:excludes",["~#set",[]],"~:name","~$metabase.mbql.util.match.impl","~:reader-aliases",["^ "],"~:op","~:ns","~:imports",null,"~:requires",["^ ","^@","^@","~$goog","^Q"],"~:seen",["^I",[]],"~:uses",null,"~:require-macros",["^ ","^@","^@"],"~:form",["~#list",["~$ns","^K","Internal implementation of the MBQL `match` and `replace` macros. Don't use these directly."]],"~:flags",["^ "],"~:js-deps",["^ "],"~:deps",["^Q","^@"]],"^N","^K","~:resource-id",["~:shadow.build.classpath/resource","metabase/mbql/util/match/impl.cljc"],"~:compiled-at",1692612525512,"^L",["^ ","^@","^@","^Q","^Q"],"~:resource-name","metabase/mbql/util/match/impl.cljc","~:warnings",[],"~:source","(ns metabase.mbql.util.match.impl\n  \"Internal implementation of the MBQL `match` and `replace` macros. Don't use these directly.\")\n\n;; have to do this at runtime because we don't know if a symbol is a class or pred or whatever when we compile the macro\n(defn match-with-pred-or-class\n  \"Return a function to use for pattern matching via `core.match`'s `:guard` functionality based on the value of a\n  `pred-or-class` passed in as a pattern to `match` or `replace`.\n\n  (Class-based matching currently only works in Clojure. For ClojureScript, only predicate function matching works.)\"\n  [pred-or-class]\n  (cond\n    ;; TODO -- FIXME -- Figure out how to make this work in JS\n    #?@(:clj [(class? pred-or-class)\n              (partial instance? pred-or-class)])\n\n    (fn? pred-or-class)\n    pred-or-class\n\n    :else\n    ;; this is dev-specific so we don't need to localize it\n    (throw (ex-info \"Invalid pattern: don't know how to handle symbol.\" {:symbol pred-or-class}))))\n\n(defn match-in-collection\n  \"Internal impl for `match`. If `form` is a collection, call `match-fn` to recursively look for matches in it.\"\n  [match-fn clause-parents form]\n  {:pre [(fn? match-fn) (vector? clause-parents)]}\n  (cond\n    (map? form)\n    (reduce concat (for [[k v] form]\n                     (match-fn (conj clause-parents k) v)))\n\n    (sequential? form)\n    (mapcat (partial match-fn (if (keyword? (first form))\n                                (conj clause-parents (first form))\n                                clause-parents))\n            form)))\n\n(defn replace-in-collection\n  \"Inernal impl for `replace`. Recursively replace values in a collection using a `replace-fn`.\"\n  [replace-fn clause-parents form]\n  (cond\n    (map? form)\n    (into form (for [[k v] form]\n                 [k (replace-fn (conj clause-parents k) v)]))\n\n    (sequential? form)\n    (mapv (partial replace-fn (if (keyword? (first form))\n                                (conj clause-parents (first form))\n                                clause-parents))\n          form)\n    :else              form))\n\n(defn update-in-unless-empty\n  \"Like `update-in`, but only updates in the existing value is non-empty.\"\n  [m ks f & args]\n  (if-not (seq (get-in m ks))\n    m\n    (apply update-in m ks f args)))\n","~:reader-features",["^I",["~:cljs-release","~:cljs"]],"~:cljc",true,"~:source-map-compact",["^ ","mappings","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","names",["metabase.mbql.util.match.impl/match-with-pred-or-class","pred-or-class","cljs.core/fn?","cljs.core.ex_info","metabase.mbql.util.match.impl/match-in-collection","match-fn","clause-parents","form","cljs.core/map?","cljs.core.reduce","cljs.core/concat","iter__5523__auto__","s__46941","cljs.core/LazySeq","temp__5804__auto__","cljs.core/seq","cljs.core/chunked-seq?","c__5521__auto__","size__5522__auto__","cljs.core/count","b__46943","cljs.core/chunk-buffer","i__46942","vec__46944","cljs.core/-nth","cljs.core.nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__46940","cljs.core/chunk-rest","vec__46949","cljs.core/first","cljs.core/cons","cljs.core/rest","k","v","G__46947","G__46948","G__46952","G__46953","cljs.core.conj","cljs.core/sequential?","cljs.core.mapcat","cljs.core.partial","cljs.core/Keyword","metabase.mbql.util.match.impl/replace-in-collection","replace-fn","cljs.core.into","s__46955","b__46957","i__46956","vec__46958","iter__46954","vec__46964","G__46962","G__46963","G__46967","G__46968","cljs.core.mapv","var_args","args__5775__auto__","len__5769__auto__","i__5770__auto__","argseq__5776__auto__","cljs.core/IndexedSeq","metabase.mbql.util.match.impl/update-in-unless-empty","seq46969","G__46970","cljs.core/next","G__46971","G__46972","self__5754__auto__","m","ks","f","args","cljs.core/not","cljs.core.get_in","cljs.core.apply","cljs.core/update-in","cljs.core/chunk-first"]],"~:used-vars",["^I",["~$cljs.core/mapcat","~$metabase.mbql.util.match.impl/update-in-unless-empty","~$cljs.core/rest","~$cljs.core/sequential?","~$cljs.core/partial","~$cljs.core/IndexedSeq","~$cljs.core/count","~$cljs.core/reduce","~$cljs.core/seq","~$cljs.core/chunk-first","~$cljs.core/apply","~$cljs.core/Keyword","~$cljs.core/chunk","~$cljs.core/mapv","~$cljs.core/LazySeq","~$cljs.core/chunk-rest","~$metabase.mbql.util.match.impl/replace-in-collection","~$cljs.core/concat","~$cljs.core/into","~$cljs.core/map?","~$cljs.core/conj","~$cljs.core/fn?","~$cljs.core/get-in","~$cljs.core/chunk-append","~$cljs.core/-nth","~$cljs.core/nth","~$cljs.core/ex-info","~$cljs.core/next","~$cljs.core/chunk-cons","~$cljs.core/not","~$cljs.core/cons","~$metabase.mbql.util.match.impl/match-with-pred-or-class","~$cljs.core/chunk-buffer","~$cljs.core/first","~$cljs.core/update-in","~$metabase.mbql.util.match.impl/match-in-collection","~$cljs.core/chunked-seq?"]]],"~:cache-keys",["~#cmap",[["^10","goog/dom/tagname.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","~:shadow.build.compiler/resolve",["^ ","~:require-id",null,"~:deps-ids",["^I",[]],"~:deps-syms",["^Q","~$goog.dom.HtmlElement"]]],["^10","goog/html/trustedtypes.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^28",["^ ","^29",null,"^2:",["^I",[]],"^2;",["^Q"]]],["^10","goog/labs/useragent/browser.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^28",["^ ","^29",null,"^2:",["^I",[]],"^2;",["^Q","~$goog.labs.userAgent.util","~$goog.labs.userAgent.highEntropy.highEntropyValue","~$goog.asserts","~$goog.string.internal","~$goog.labs.userAgent.highEntropy.highEntropyData","~$goog.labs.userAgent"]]],["^10","goog/html/safeurl.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^28",["^ ","^29",null,"^2:",["^I",[]],"^2;",["^Q","^2?","~$goog.fs.url","~$goog.html.TrustedResourceUrl","~$goog.string.Const","~$goog.string.TypedString","^2@"]]],["^10","goog/array/array.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^28",["^ ","^29",null,"^2:",["^I",[]],"^2;",["^Q","^2?"]]],["^10","goog/debug/error.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^28",["^ ","^29",null,"^2:",["^I",[]],"^2;",["^Q"]]],["^10","goog/flags/flags.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^28",["^ ","^29",null,"^2:",["^I",[]],"^2;",["^Q"]]],["^10","goog/dom/nodetype.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^28",["^ ","^29",null,"^2:",["^I",[]],"^2;",["^Q"]]],["^10","goog/labs/useragent/highentropy/highentropyvalue.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^28",["^ ","^29",null,"^2:",["^I",[]],"^2;",["^Q","^2=","^2@"]]],["^10","goog/string/typedstring.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^28",["^ ","^29",null,"^2:",["^I",[]],"^2;",["^Q"]]],["^10","goog/object/object.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^28",["^ ","^29",null,"^2:",["^I",[]],"^2;",["^Q"]]],["^10","goog/dom/asserts.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^28",["^ ","^29",null,"^2:",["^I",[]],"^2;",["^Q","^2?"]]],"~:SHADOW-TIMESTAMP",[1689947046000,1689947046000,1689947050000],["^10","goog/math/long.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^28",["^ ","^29",null,"^2:",["^I",[]],"^2;",["^Q","^2?","~$goog.reflect"]]],["^10","goog/html/trustedresourceurl.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^28",["^ ","^29",null,"^2:",["^I",[]],"^2;",["^Q","^2?","~$goog.fs.blob","^2C","~$goog.html.SafeScript","~$goog.html.trustedtypes","^2E","^2F"]]],["^10","goog/string/internal.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^28",["^ ","^29",null,"^2:",["^I",[]],"^2;",["^Q"]]],["^10","goog/functions/functions.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^28",["^ ","^29",null,"^2:",["^I",[]],"^2;",["^Q"]]],["^10","goog/html/safestyle.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^28",["^ ","^29",null,"^2:",["^I",[]],"^2;",["^Q","^2E","~$goog.html.SafeUrl","^2F","^2?","^2@"]]],["^10","goog/dom/safe.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^28",["^ ","^29",null,"^2:",["^I",[]],"^2;",["^Q","^2?","~$goog.asserts.dom","~$goog.dom.asserts","~$goog.functions","~$goog.html.SafeHtml","^2J","~$goog.html.SafeStyle","^2L","^2D","~$goog.html.uncheckedconversions","^2E","^2@"]]],["^10","goog/asserts/dom.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^28",["^ ","^29",null,"^2:",["^I",[]],"^2;",["^Q","~$goog.dom.TagName","^2?","~$goog.dom.element"]]],["^10","goog/html/safehtml.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^28",["^ ","^29",null,"^2:",["^I",[]],"^2;",["^Q","^2E","^2J","^2Q","~$goog.html.SafeStyleSheet","^2L","^2S","^2D","^2F","^2?","~$goog.labs.userAgent.browser","~$goog.array","~$goog.object","^2@","~$goog.dom.tags","^2K"]]],["^10","goog/dom/tags.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^28",["^ ","^29",null,"^2:",["^I",[]],"^2;",["^Q","^2X"]]],["^10","goog/fs/blob.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^28",["^ ","^29",null,"^2:",["^I",[]],"^2;",["^Q"]]],["^10","goog/asserts/asserts.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^28",["^ ","^29",null,"^2:",["^I",[]],"^2;",["^Q","~$goog.debug.Error","~$goog.dom.NodeType"]]],["^10","goog/uri/uri.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^28",["^ ","^29",null,"^2:",["^I",[]],"^2;",["^Q","^2W","^2?","~$goog.collections.maps","~$goog.string","~$goog.structs","~$goog.uri.utils","~$goog.uri.utils.ComponentIndex","~$goog.uri.utils.StandardQueryParam"]]],["^10","goog/labs/useragent/highentropy/highentropydata.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^28",["^ ","^29",null,"^2:",["^I",[]],"^2;",["^Q","^2>"]]],["^10","goog/collections/maps.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^28",["^ ","^29",null,"^2:",["^I",[]],"^2;",["^Q"]]],["^10","metabase/mbql/util/match/impl.cljc"],["4150e01975339d308f5cfedda77875eda19c030d","^28",["^ ","^29",null,"^2:",["^I",[]],"^2;",["^Q","^@"]]],["^10","goog/fs/url.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^28",["^ ","^29",null,"^2:",["^I",[]],"^2;",["^Q"]]],["^10","goog/base.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^28",["^ ","^29",null,"^2:",["^I",[]],"^2;",[]]],["^10","goog/structs/structs.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^28",["^ ","^29",null,"^2:",["^I",[]],"^2;",["^Q","^2W","^2X"]]],["^10","goog/string/string.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^28",["^ ","^29",null,"^2:",["^I",[]],"^2;",["^Q","~$goog.dom.safe","^2R","^2E","^2@"]]],["^10","goog/reflect/reflect.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^28",["^ ","^29",null,"^2:",["^I",[]],"^2;",["^Q"]]],["^10","goog/labs/useragent/util.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^28",["^ ","^29",null,"^2:",["^I",[]],"^2;",["^Q","^2@","^2B"]]],["^10","goog/string/stringbuffer.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^28",["^ ","^29",null,"^2:",["^I",[]],"^2;",["^Q"]]],["^10","goog/labs/useragent/useragent.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^28",["^ ","^29",null,"^2:",["^I",[]],"^2;",["^Q","~$goog.flags"]]],["^10","goog/dom/element.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^28",["^ ","^29",null,"^2:",["^I",[]],"^2;",["^Q","^2[","^2S"]]],["^10","goog/html/uncheckedconversions.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^28",["^ ","^29",null,"^2:",["^I",[]],"^2;",["^Q","^2?","^2P","^2J","^2Q","^2U","^2L","^2D","^2E","^2@"]]],["^10","goog/dom/htmlelement.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^28",["^ ","^29",null,"^2:",["^I",[]],"^2;",["^Q"]]],["^10","cljs/core.cljs"],["bc14df6666853ed869d7b88aaa864111c65d0c7f","^28",["^ ","^29",null,"^2:",["^I",[]],"^2;",["^Q","~$goog.math.Long","~$goog.math.Integer","^31","^2X","^2W","~$goog.Uri","~$goog.string.StringBuffer"]]],["^10","goog/html/safescript.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^28",["^ ","^29",null,"^2:",["^I",[]],"^2;",["^Q","^2E","^2F","^2K","^2?"]]],["^10","goog/html/safestylesheet.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^28",["^ ","^29",null,"^2:",["^I",[]],"^2;",["^Q","^2E","^2Q","^2F","^2X","^2?","^2@"]]],["^10","goog/math/integer.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^28",["^ ","^29",null,"^2:",["^I",[]],"^2;",["^Q","^2H"]]],["^10","goog/uri/utils.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^28",["^ ","^29",null,"^2:",["^I",[]],"^2;",["^Q","^2?","^31"]]],["^10","goog/string/const.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^28",["^ ","^29",null,"^2:",["^I",[]],"^2;",["^Q","^2?","^2F"]]]]],"~:clj-info",["^ ","jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/analyzer/impl.cljc",1689947050000,"jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/source_map/base64_vlq.clj",1689947050000,"jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/instant.clj",1689947050000,"jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/externs.clj",1689947050000,"jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/vendor/clojure/tools/reader/default_data_readers.clj",1689947050000,"jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/compiler.cljc",1689947050000,"jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/env.cljc",1689947050000,"jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/analyzer/impl/namespaces.cljc",1689947050000,"jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/source_map.clj",1689947050000,"jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/util.cljc",1689947050000,"jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/analyzer.cljc",1689947050000,"jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/analyzer/passes.cljc",1689947050000,"jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/vendor/clojure/data/json.clj",1689947050000,"jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/source_map/base64.clj",1689947050000,"jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/vendor/clojure/tools/reader/reader_types.clj",1689947050000,"jar:file:/root/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/set.clj",1689946092000,"jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/vendor/clojure/tools/reader/impl/inspect.clj",1689947050000,"jar:file:/root/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/string.clj",1689946092000,"jar:file:/root/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/core.clj",1689946092000,"jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/analyzer/passes/and_or.cljc",1689947050000,"jar:file:/root/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/pprint.clj",1689946092000,"jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/js_deps.cljc",1689947050000,"jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/core.cljc",1689947050000,"jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/vendor/clojure/tools/reader.clj",1689947050000,"jar:file:/root/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/edn.clj",1689946092000,"jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/vendor/clojure/tools/reader/impl/errors.clj",1689947050000,"jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/tagged_literals.cljc",1689947050000,"jar:file:/root/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/java/io.clj",1689946092000,"jar:file:/root/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/instant.clj",1689946092000],"~:analyzer",["^ ","^3",null,"^4",["^ "],"^5",["^ ","^6","Internal implementation of the MBQL `match` and `replace` macros. Don't use these directly.","^7","metabase/mbql/util/match/impl.cljc","^8",1,"^9",5,"^:",1,"^;",34],"^<",["^ ","^=","^>","^?","^@","^A","^B","^C","^D","^E","^F"],"^G",null,"^H",["^I",[]],"^J","^K","^L",["^ "],"^O",null,"^P",["^ ","^@","^@","^Q","^Q"],"^R",["^I",[]],"^S",null,"~:defs",["^ ","~$match-with-pred-or-class",["^ ","~:protocol-inline",null,"^5",["^ ","^7","metabase/mbql/util/match/impl.cljc","^8",5,"^9",7,"^:",5,"^;",31,"~:arglists",["^V",["~$quote",["^V",[["~$pred-or-class"]]]]],"^6","Return a function to use for pattern matching via `core.match`'s `:guard` functionality based on the value of a\n  `pred-or-class` passed in as a pattern to `match` or `replace`.\n\n  (Class-based matching currently only works in Clojure. For ClojureScript, only predicate function matching works.)"],"^J","^20","^7","metabase/mbql/util/match/impl.cljc","^;",31,"~:method-params",["^V",[["^44"]]],"~:protocol-impl",null,"~:arglists-meta",["^V",[null,null]],"^9",1,"~:variadic?",false,"^8",5,"^:",5,"~:max-fixed-arity",1,"~:fn-var",true,"^42",["^V",["^43",["^V",[["^44"]]]]],"^6","Return a function to use for pattern matching via `core.match`'s `:guard` functionality based on the value of a\n  `pred-or-class` passed in as a pattern to `match` or `replace`.\n\n  (Class-based matching currently only works in Clojure. For ClojureScript, only predicate function matching works.)"],"~$match-in-collection",["^ ","^41",null,"^5",["^ ","^7","metabase/mbql/util/match/impl.cljc","^8",23,"^9",7,"^:",23,"^;",26,"^42",["^V",["^43",["^V",[["~$match-fn","~$clause-parents","~$form"]]]]],"^6","Internal impl for `match`. If `form` is a collection, call `match-fn` to recursively look for matches in it."],"^J","^24","^7","metabase/mbql/util/match/impl.cljc","^;",26,"^45",["^V",[["^4<","^4=","^4>"]]],"^46",null,"^47",["^V",[null,null]],"^9",1,"^48",false,"^8",23,"~:ret-tag",["^I",["~$any","~$clj-nil"]],"^:",23,"^49",3,"^4:",true,"^42",["^V",["^43",["^V",[["^4<","^4=","^4>"]]]]],"^6","Internal impl for `match`. If `form` is a collection, call `match-fn` to recursively look for matches in it."],"~$replace-in-collection",["^ ","^41",null,"^5",["^ ","^7","metabase/mbql/util/match/impl.cljc","^8",38,"^9",7,"^:",38,"^;",28,"^42",["^V",["^43",["^V",[["~$replace-fn","^4=","^4>"]]]]],"^6","Inernal impl for `replace`. Recursively replace values in a collection using a `replace-fn`."],"^J","^1M","^7","metabase/mbql/util/match/impl.cljc","^;",28,"^45",["^V",[["^4C","^4=","^4>"]]],"^46",null,"^47",["^V",[null,null]],"^9",1,"^48",false,"^8",38,"^4?",["^I",[null,"~$clj","^4@"]],"^:",38,"^49",3,"^4:",true,"^42",["^V",["^43",["^V",[["^4C","^4=","^4>"]]]]],"^6","Inernal impl for `replace`. Recursively replace values in a collection using a `replace-fn`."],"~$update-in-unless-empty",["^ ","^41",null,"^5",["^ ","^7","metabase/mbql/util/match/impl.cljc","^8",53,"^9",7,"^:",53,"^;",29,"^42",["^V",["^43",["^V",[["~$m","~$ks","~$f","~$&","~$args"]]]]],"^6","Like `update-in`, but only updates in the existing value is non-empty.","~:top-fn",["^ ","^48",true,"~:fixed-arity",3,"^49",3,"^45",[["^V",["~$m","^4F","~$f","^4G"]]],"^42",["^V",[["~$m","^4F","~$f","~$&","^4G"]]],"^47",["^V",[null]]]],"^J","^1>","^7","metabase/mbql/util/match/impl.cljc","^;",29,"^4H",["^ ","^48",true,"^4I",3,"^49",3,"^45",[["^V",["~$m","^4F","~$f","^4G"]]],"^42",["^V",[["~$m","^4F","~$f","~$&","^4G"]]],"^47",["^V",[null]]],"^45",[["^V",["~$m","^4F","~$f","^4G"]]],"^46",null,"^4I",3,"^47",["^V",[null]],"^9",1,"^48",true,"~:methods",[["^ ","^4I",3,"^48",true,"~:tag",["^I",[null,"^4@"]]]],"^8",53,"^4?","^4@","^:",53,"^49",3,"^4:",true,"^42",["^V",[["~$m","^4F","~$f","~$&","^4G"]]],"^6","Like `update-in`, but only updates in the existing value is non-empty."]],"^T",["^ ","^@","^@"],"~:cljs.analyzer/constants",["^ ","^R",["^I",["~:else","~:symbol"]],"~:order",["^4M","^4N"]],"^X",["^ "],"^Y",["^ "],"^Z",["^Q","^@"]],"^N","^K","~:ns-specs",["^ "],"~:ns-spec-vars",["^I",[]],"~:compiler-options",["^27",[["^4R","~:static-fns"],true,["^4R","~:shadow-tweaks"],null,["^4R","~:source-map-inline"],null,["^4R","~:elide-asserts"],true,["^4R","~:optimize-constants"],null,["^4R","^13"],null,["^4R","~:external-config"],null,["^4R","~:tooling-config"],null,["^4R","~:emit-constants"],null,["^4R","~:load-tests"],false,["^4R","~:form-size-threshold"],null,["^4R","~:global-goog-object&array"],null,["^4R","~:data-readers"],null,["^4R","~:infer-externs"],"~:auto",["^4R","^15"],["^I",["^16"]],["~:js-options","~:js-provider"],"~:require",["~:mode"],"~:release",["^4R","~:fn-invoke-direct"],null,["^4R","~:source-map"],null]]]