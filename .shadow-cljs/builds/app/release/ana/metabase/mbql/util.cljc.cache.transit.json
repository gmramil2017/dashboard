["^ ","~:output",["^ ","~:js","goog.provide('metabase.mbql.util');\n/**\n * Like `name`, but if `x` is a namespace-qualified keyword, returns that a string including the namespace.\n */\nmetabase.mbql.util.qualified_name = (function metabase$mbql$util$qualified_name(x){\nif(cljs.core.truth_((function (){var and__5043__auto__ = (x instanceof cljs.core.Keyword);\nif(and__5043__auto__){\nreturn cljs.core.namespace(x);\n} else {\nreturn and__5043__auto__;\n}\n})())){\nreturn [cljs.core.namespace(x),\"/\",cljs.core.name(x)].join('');\n} else {\nreturn cljs.core.name(x);\n}\n});\nvar output_schema47842_48394 = schema.core.Keyword;\nvar input_schema47844_48395 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [schema.core.one(metabase.mbql.schema.helpers.KeywordOrString,cljs.core.with_meta(new cljs.core.Symbol(null,\"token\",\"token\",429068312,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"schema\",\"schema\",-1582001791),new cljs.core.Symbol(\"schema.helpers\",\"KeywordOrString\",\"schema.helpers/KeywordOrString\",-360677001,null)], null)))], null);\nvar ret__34795__auto___48396 = /**\n * Inputs: [token :- schema.helpers/KeywordOrString]\n *   Returns: s/Keyword\n * \n *   Convert a string or keyword in various cases (`lisp-case`, `snake_case`, or `SCREAMING_SNAKE_CASE`) to a lisp-cased\n *   keyword.\n */\nmetabase.mbql.util.normalize_token = (function metabase$mbql$util$normalize_token(token){\nreturn cljs.core.keyword.cljs$core$IFn$_invoke$arity$1(clojure.string.replace(clojure.string.lower_case(metabase.mbql.util.qualified_name(token)),/_/,\"-\"));\n});\nschema.utils.declare_class_schema_BANG_(schema.utils.fn_schema_bearer(metabase.mbql.util.normalize_token),schema.core.__GT_FnSchema(output_schema47842_48394,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [input_schema47844_48395], null)));\n\n/**\n * True if `x` is an MBQL clause (a sequence with a keyword as its first arg). (Since this is used by the code in\n *   `normalize` this handles pre-normalized clauses as well.)\n */\nmetabase.mbql.util.mbql_clause_QMARK_ = (function metabase$mbql$util$mbql_clause_QMARK_(x){\nreturn ((cljs.core.sequential_QMARK_(x)) && ((((!(cljs.core.map_entry_QMARK_(x)))) && ((cljs.core.first(x) instanceof cljs.core.Keyword)))));\n});\n/**\n * If `x` an MBQL clause, and an instance of clauses defined by keyword(s) `k-or-ks`?\n * \n *  (is-clause? :count [:count 10])        ; -> true\n *  (is-clause? #{:+ :- :* :/} [:+ 10 20]) ; -> true\n */\nmetabase.mbql.util.is_clause_QMARK_ = (function metabase$mbql$util$is_clause_QMARK_(k_or_ks,x){\nvar and__5043__auto__ = metabase.mbql.util.mbql_clause_QMARK_(x);\nif(and__5043__auto__){\nif(cljs.core.coll_QMARK_(k_or_ks)){\nvar G__47849 = cljs.core.first(x);\nvar fexpr__47848 = cljs.core.set(k_or_ks);\nreturn (fexpr__47848.cljs$core$IFn$_invoke$arity$1 ? fexpr__47848.cljs$core$IFn$_invoke$arity$1(G__47849) : fexpr__47848.call(null,G__47849));\n} else {\nreturn cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(k_or_ks,cljs.core.first(x));\n}\n} else {\nreturn and__5043__auto__;\n}\n});\nmetabase.mbql.util.combine_compound_filters_of_type = (function metabase$mbql$util$combine_compound_filters_of_type(compound_type,subclauses){\nreturn cljs.core.mapcat.cljs$core$IFn$_invoke$arity$variadic((function (p1__47850_SHARP_){\nreturn cljs.core.first(cljs.core.seq(cljs.core.filter.cljs$core$IFn$_invoke$arity$2(cljs.core.some_QMARK_,(function metabase$mbql$util$combine_compound_filters_of_type_$_match_47851(_AMPERSAND_parents,_AMPERSAND_match){\ntry{if(((cljs.core.vector_QMARK_(_AMPERSAND_match)) && ((cljs.core.count(_AMPERSAND_match) >= (1))))){\ntry{var _AMPERSAND_match_left__47857 = cljs.core.subvec.cljs$core$IFn$_invoke$arity$3(_AMPERSAND_match,(0),(1));\nif(((cljs.core.vector_QMARK_(_AMPERSAND_match_left__47857)) && ((cljs.core.count(_AMPERSAND_match_left__47857) === (1))))){\ntry{var _AMPERSAND_match_left__47857_0__47862 = cljs.core.nth.cljs$core$IFn$_invoke$arity$2(_AMPERSAND_match_left__47857,(0));\nif(cljs.core.truth_(cljs.core.partial.cljs$core$IFn$_invoke$arity$2(cljs.core._EQ_,compound_type)(_AMPERSAND_match_left__47857_0__47862))){\nvar args = cljs.core.subvec.cljs$core$IFn$_invoke$arity$2(_AMPERSAND_match,(1));\nreturn new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [args], null);\n} else {\nthrow cljs.core.match.backtrack;\n\n}\n}catch (e47867){if((e47867 instanceof Error)){\nvar e__46040__auto__ = e47867;\nif((e__46040__auto__ === cljs.core.match.backtrack)){\nthrow cljs.core.match.backtrack;\n} else {\nthrow e__46040__auto__;\n}\n} else {\nthrow e47867;\n\n}\n}} else {\nthrow cljs.core.match.backtrack;\n\n}\n}catch (e47865){if((e47865 instanceof Error)){\nvar e__46040__auto__ = e47865;\nif((e__46040__auto__ === cljs.core.match.backtrack)){\nthrow cljs.core.match.backtrack;\n} else {\nthrow e__46040__auto__;\n}\n} else {\nthrow e47865;\n\n}\n}} else {\nthrow cljs.core.match.backtrack;\n\n}\n}catch (e47864){if((e47864 instanceof Error)){\nvar e__46040__auto__ = e47864;\nif((e__46040__auto__ === cljs.core.match.backtrack)){\nreturn new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [_AMPERSAND_match], null)], null);\n} else {\nthrow e__46040__auto__;\n}\n} else {\nthrow e47864;\n\n}\n}})(cljs.core.PersistentVector.EMPTY,p1__47850_SHARP_))));\n}),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([subclauses], 0));\n});\n/**\n * Simplify compound `:and`, `:or`, and `:not` compound filters, combining or eliminating them where possible. This\n *   also fixes theoretically disallowed compound filters like `:and` with only a single subclause, and eliminates `nils`\n *   and duplicate subclauses from the clauses.\n */\nmetabase.mbql.util.simplify_compound_filter = (function metabase$mbql$util$simplify_compound_filter(filter_clause){\nreturn (function metabase$mbql$util$simplify_compound_filter_$_replace_47872(_AMPERSAND_parents,_AMPERSAND_match){\ntry{if(cljs.core.truth_((function (){var fexpr__47973 = metabase.mbql.util.match.impl.match_with_pred_or_class(cljs.core.seq_QMARK_);\nreturn (fexpr__47973.cljs$core$IFn$_invoke$arity$1 ? fexpr__47973.cljs$core$IFn$_invoke$arity$1(_AMPERSAND_match) : fexpr__47973.call(null,_AMPERSAND_match));\n})())){\nreturn metabase$mbql$util$simplify_compound_filter_$_replace_47872(_AMPERSAND_parents,cljs.core.vec(_AMPERSAND_match));\n} else {\nthrow cljs.core.match.backtrack;\n\n}\n}catch (e47905){if((e47905 instanceof Error)){\nvar e__46040__auto__ = e47905;\nif((e__46040__auto__ === cljs.core.match.backtrack)){\ntry{if((_AMPERSAND_match === null)){\nreturn null;\n} else {\nthrow cljs.core.match.backtrack;\n\n}\n}catch (e47906){if((e47906 instanceof Error)){\nvar e__46040__auto____$1 = e47906;\nif((e__46040__auto____$1 === cljs.core.match.backtrack)){\ntry{if(((cljs.core.vector_QMARK_(_AMPERSAND_match)) && ((cljs.core.count(_AMPERSAND_match) >= (0))))){\ntry{var _AMPERSAND_match_left__47879 = cljs.core.subvec.cljs$core$IFn$_invoke$arity$3(_AMPERSAND_match,(0),(0));\nif(((cljs.core.vector_QMARK_(_AMPERSAND_match_left__47879)) && ((cljs.core.count(_AMPERSAND_match_left__47879) === (0))))){\ntry{var _AMPERSAND_match_right__47880 = cljs.core.subvec.cljs$core$IFn$_invoke$arity$2(_AMPERSAND_match,(0));\nif(cljs.core.truth_(cljs.core.partial.cljs$core$IFn$_invoke$arity$2(cljs.core.every_QMARK_,cljs.core.nil_QMARK_)(_AMPERSAND_match_right__47880))){\nreturn null;\n} else {\nthrow cljs.core.match.backtrack;\n\n}\n}catch (e47972){if((e47972 instanceof Error)){\nvar e__46040__auto____$2 = e47972;\nif((e__46040__auto____$2 === cljs.core.match.backtrack)){\nthrow cljs.core.match.backtrack;\n} else {\nthrow e__46040__auto____$2;\n}\n} else {\nthrow e47972;\n\n}\n}} else {\nthrow cljs.core.match.backtrack;\n\n}\n}catch (e47971){if((e47971 instanceof Error)){\nvar e__46040__auto____$2 = e47971;\nif((e__46040__auto____$2 === cljs.core.match.backtrack)){\nthrow cljs.core.match.backtrack;\n} else {\nthrow e__46040__auto____$2;\n}\n} else {\nthrow e47971;\n\n}\n}} else {\nthrow cljs.core.match.backtrack;\n\n}\n}catch (e47908){if((e47908 instanceof Error)){\nvar e__46040__auto____$2 = e47908;\nif((e__46040__auto____$2 === cljs.core.match.backtrack)){\ntry{if(((cljs.core.vector_QMARK_(_AMPERSAND_match)) && ((cljs.core.count(_AMPERSAND_match) === 0)))){\nreturn null;\n} else {\nthrow cljs.core.match.backtrack;\n\n}\n}catch (e47909){if((e47909 instanceof Error)){\nvar e__46040__auto____$3 = e47909;\nif((e__46040__auto____$3 === cljs.core.match.backtrack)){\ntry{if(((cljs.core.vector_QMARK_(_AMPERSAND_match)) && ((cljs.core.count(_AMPERSAND_match) === 1)))){\ntry{var _AMPERSAND_match_0__47881 = cljs.core.nth.cljs$core$IFn$_invoke$arity$2(_AMPERSAND_match,(0));\nif(cljs.core.keyword_identical_QMARK_(_AMPERSAND_match_0__47881,new cljs.core.Keyword(null,\"and\",\"and\",-971899817))){\nreturn null;\n} else {\nthrow cljs.core.match.backtrack;\n\n}\n}catch (e47969){if((e47969 instanceof Error)){\nvar e__46040__auto____$4 = e47969;\nif((e__46040__auto____$4 === cljs.core.match.backtrack)){\ntry{var _AMPERSAND_match_0__47881 = cljs.core.nth.cljs$core$IFn$_invoke$arity$2(_AMPERSAND_match,(0));\nif(cljs.core.keyword_identical_QMARK_(_AMPERSAND_match_0__47881,new cljs.core.Keyword(null,\"or\",\"or\",235744169))){\nreturn null;\n} else {\nthrow cljs.core.match.backtrack;\n\n}\n}catch (e47970){if((e47970 instanceof Error)){\nvar e__46040__auto____$5 = e47970;\nif((e__46040__auto____$5 === cljs.core.match.backtrack)){\nthrow cljs.core.match.backtrack;\n} else {\nthrow e__46040__auto____$5;\n}\n} else {\nthrow e47970;\n\n}\n}} else {\nthrow e__46040__auto____$4;\n}\n} else {\nthrow e47969;\n\n}\n}} else {\nthrow cljs.core.match.backtrack;\n\n}\n}catch (e47910){if((e47910 instanceof Error)){\nvar e__46040__auto____$4 = e47910;\nif((e__46040__auto____$4 === cljs.core.match.backtrack)){\ntry{if(((cljs.core.vector_QMARK_(_AMPERSAND_match)) && ((cljs.core.count(_AMPERSAND_match) >= (1))))){\ntry{var _AMPERSAND_match_left__47882 = cljs.core.subvec.cljs$core$IFn$_invoke$arity$3(_AMPERSAND_match,(0),(1));\nif(((cljs.core.vector_QMARK_(_AMPERSAND_match_left__47882)) && ((cljs.core.count(_AMPERSAND_match_left__47882) === (1))))){\ntry{var _AMPERSAND_match_left__47882_0__47884 = cljs.core.nth.cljs$core$IFn$_invoke$arity$2(_AMPERSAND_match_left__47882,(0));\nif(cljs.core.truth_((function (){var fexpr__47967 = new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"or\",\"or\",235744169),null,new cljs.core.Keyword(null,\"and\",\"and\",-971899817),null], null), null);\nreturn (fexpr__47967.cljs$core$IFn$_invoke$arity$1 ? fexpr__47967.cljs$core$IFn$_invoke$arity$1(_AMPERSAND_match_left__47882_0__47884) : fexpr__47967.call(null,_AMPERSAND_match_left__47882_0__47884));\n})())){\ntry{var _AMPERSAND_match_right__47883 = cljs.core.subvec.cljs$core$IFn$_invoke$arity$2(_AMPERSAND_match,(1));\nif(cljs.core.truth_(cljs.core.partial.cljs$core$IFn$_invoke$arity$2(cljs.core.some,cljs.core.nil_QMARK_)(_AMPERSAND_match_right__47883))){\nvar args = cljs.core.subvec.cljs$core$IFn$_invoke$arity$2(_AMPERSAND_match,(1));\nvar clause_name = cljs.core.nth.cljs$core$IFn$_invoke$arity$2(_AMPERSAND_match_left__47882,(0));\nreturn metabase$mbql$util$simplify_compound_filter_$_replace_47872(_AMPERSAND_parents,cljs.core.apply.cljs$core$IFn$_invoke$arity$3(cljs.core.vector,clause_name,cljs.core.filterv(cljs.core.some_QMARK_,args)));\n} else {\nthrow cljs.core.match.backtrack;\n\n}\n}catch (e47968){if((e47968 instanceof Error)){\nvar e__46040__auto____$5 = e47968;\nif((e__46040__auto____$5 === cljs.core.match.backtrack)){\nthrow cljs.core.match.backtrack;\n} else {\nthrow e__46040__auto____$5;\n}\n} else {\nthrow e47968;\n\n}\n}} else {\nthrow cljs.core.match.backtrack;\n\n}\n}catch (e47966){if((e47966 instanceof Error)){\nvar e__46040__auto____$5 = e47966;\nif((e__46040__auto____$5 === cljs.core.match.backtrack)){\nthrow cljs.core.match.backtrack;\n} else {\nthrow e__46040__auto____$5;\n}\n} else {\nthrow e47966;\n\n}\n}} else {\nthrow cljs.core.match.backtrack;\n\n}\n}catch (e47965){if((e47965 instanceof Error)){\nvar e__46040__auto____$5 = e47965;\nif((e__46040__auto____$5 === cljs.core.match.backtrack)){\nthrow cljs.core.match.backtrack;\n} else {\nthrow e__46040__auto____$5;\n}\n} else {\nthrow e47965;\n\n}\n}} else {\nthrow cljs.core.match.backtrack;\n\n}\n}catch (e47911){if((e47911 instanceof Error)){\nvar e__46040__auto____$5 = e47911;\nif((e__46040__auto____$5 === cljs.core.match.backtrack)){\ntry{if(((cljs.core.vector_QMARK_(_AMPERSAND_match)) && ((cljs.core.count(_AMPERSAND_match) === 2)))){\ntry{var _AMPERSAND_match_0__47885 = cljs.core.nth.cljs$core$IFn$_invoke$arity$2(_AMPERSAND_match,(0));\nif(cljs.core.keyword_identical_QMARK_(_AMPERSAND_match_0__47885,new cljs.core.Keyword(null,\"not\",\"not\",-595976884))){\ntry{var _AMPERSAND_match_1__47886 = cljs.core.nth.cljs$core$IFn$_invoke$arity$2(_AMPERSAND_match,(1));\nif(((cljs.core.vector_QMARK_(_AMPERSAND_match_1__47886)) && ((cljs.core.count(_AMPERSAND_match_1__47886) >= (1))))){\ntry{var _AMPERSAND_match_1__47886_left__47887 = cljs.core.subvec.cljs$core$IFn$_invoke$arity$3(_AMPERSAND_match_1__47886,(0),(1));\nif(((cljs.core.vector_QMARK_(_AMPERSAND_match_1__47886_left__47887)) && ((cljs.core.count(_AMPERSAND_match_1__47886_left__47887) === (1))))){\ntry{var _AMPERSAND_match_1__47886_left__47887_0__47889 = cljs.core.nth.cljs$core$IFn$_invoke$arity$2(_AMPERSAND_match_1__47886_left__47887,(0));\nif(cljs.core.keyword_identical_QMARK_(_AMPERSAND_match_1__47886_left__47887_0__47889,new cljs.core.Keyword(null,\"and\",\"and\",-971899817))){\nvar args = cljs.core.subvec.cljs$core$IFn$_invoke$arity$2(_AMPERSAND_match_1__47886,(1));\nreturn metabase$mbql$util$simplify_compound_filter_$_replace_47872(_AMPERSAND_parents,cljs.core.apply.cljs$core$IFn$_invoke$arity$3(cljs.core.vector,new cljs.core.Keyword(null,\"or\",\"or\",235744169),cljs.core.map.cljs$core$IFn$_invoke$arity$2((function (p1__47869_SHARP_){\nreturn (new cljs.core.PersistentVector(null,2,(5),cljs.core.PersistentVector.EMPTY_NODE,[new cljs.core.Keyword(null,\"not\",\"not\",-595976884),p1__47869_SHARP_],null));\n}),args)));\n} else {\nthrow cljs.core.match.backtrack;\n\n}\n}catch (e47961){if((e47961 instanceof Error)){\nvar e__46040__auto____$6 = e47961;\nif((e__46040__auto____$6 === cljs.core.match.backtrack)){\ntry{var _AMPERSAND_match_1__47886_left__47887_0__47889 = cljs.core.nth.cljs$core$IFn$_invoke$arity$2(_AMPERSAND_match_1__47886_left__47887,(0));\nif(cljs.core.keyword_identical_QMARK_(_AMPERSAND_match_1__47886_left__47887_0__47889,new cljs.core.Keyword(null,\"or\",\"or\",235744169))){\nvar args = cljs.core.subvec.cljs$core$IFn$_invoke$arity$2(_AMPERSAND_match_1__47886,(1));\nreturn metabase$mbql$util$simplify_compound_filter_$_replace_47872(_AMPERSAND_parents,cljs.core.apply.cljs$core$IFn$_invoke$arity$3(cljs.core.vector,new cljs.core.Keyword(null,\"and\",\"and\",-971899817),cljs.core.map.cljs$core$IFn$_invoke$arity$2((function (p1__47870_SHARP_){\nreturn (new cljs.core.PersistentVector(null,2,(5),cljs.core.PersistentVector.EMPTY_NODE,[new cljs.core.Keyword(null,\"not\",\"not\",-595976884),p1__47870_SHARP_],null));\n}),args)));\n} else {\nthrow cljs.core.match.backtrack;\n\n}\n}catch (e47962){if((e47962 instanceof Error)){\nvar e__46040__auto____$7 = e47962;\nif((e__46040__auto____$7 === cljs.core.match.backtrack)){\nthrow cljs.core.match.backtrack;\n} else {\nthrow e__46040__auto____$7;\n}\n} else {\nthrow e47962;\n\n}\n}} else {\nthrow e__46040__auto____$6;\n}\n} else {\nthrow e47961;\n\n}\n}} else {\nthrow cljs.core.match.backtrack;\n\n}\n}catch (e47960){if((e47960 instanceof Error)){\nvar e__46040__auto____$6 = e47960;\nif((e__46040__auto____$6 === cljs.core.match.backtrack)){\nthrow cljs.core.match.backtrack;\n} else {\nthrow e__46040__auto____$6;\n}\n} else {\nthrow e47960;\n\n}\n}} else {\nthrow cljs.core.match.backtrack;\n\n}\n}catch (e47959){if((e47959 instanceof Error)){\nvar e__46040__auto____$6 = e47959;\nif((e__46040__auto____$6 === cljs.core.match.backtrack)){\nthrow cljs.core.match.backtrack;\n} else {\nthrow e__46040__auto____$6;\n}\n} else {\nthrow e47959;\n\n}\n}} else {\nthrow cljs.core.match.backtrack;\n\n}\n}catch (e47953){if((e47953 instanceof Error)){\nvar e__46040__auto____$6 = e47953;\nif((e__46040__auto____$6 === cljs.core.match.backtrack)){\ntry{var _AMPERSAND_match_0__47885 = cljs.core.nth.cljs$core$IFn$_invoke$arity$2(_AMPERSAND_match,(0));\nif(cljs.core.keyword_identical_QMARK_(_AMPERSAND_match_0__47885,new cljs.core.Keyword(null,\"and\",\"and\",-971899817))){\nvar arg = cljs.core.nth.cljs$core$IFn$_invoke$arity$2(_AMPERSAND_match,(1));\nreturn metabase$mbql$util$simplify_compound_filter_$_replace_47872(_AMPERSAND_parents,arg);\n} else {\nthrow cljs.core.match.backtrack;\n\n}\n}catch (e47954){if((e47954 instanceof Error)){\nvar e__46040__auto____$7 = e47954;\nif((e__46040__auto____$7 === cljs.core.match.backtrack)){\ntry{var _AMPERSAND_match_0__47885 = cljs.core.nth.cljs$core$IFn$_invoke$arity$2(_AMPERSAND_match,(0));\nif(cljs.core.keyword_identical_QMARK_(_AMPERSAND_match_0__47885,new cljs.core.Keyword(null,\"or\",\"or\",235744169))){\nvar arg = cljs.core.nth.cljs$core$IFn$_invoke$arity$2(_AMPERSAND_match,(1));\nreturn metabase$mbql$util$simplify_compound_filter_$_replace_47872(_AMPERSAND_parents,arg);\n} else {\nthrow cljs.core.match.backtrack;\n\n}\n}catch (e47956){if((e47956 instanceof Error)){\nvar e__46040__auto____$8 = e47956;\nif((e__46040__auto____$8 === cljs.core.match.backtrack)){\nthrow cljs.core.match.backtrack;\n} else {\nthrow e__46040__auto____$8;\n}\n} else {\nthrow e47956;\n\n}\n}} else {\nthrow e__46040__auto____$7;\n}\n} else {\nthrow e47954;\n\n}\n}} else {\nthrow e__46040__auto____$6;\n}\n} else {\nthrow e47953;\n\n}\n}} else {\nthrow cljs.core.match.backtrack;\n\n}\n}catch (e47912){if((e47912 instanceof Error)){\nvar e__46040__auto____$6 = e47912;\nif((e__46040__auto____$6 === cljs.core.match.backtrack)){\ntry{if(((cljs.core.vector_QMARK_(_AMPERSAND_match)) && ((cljs.core.count(_AMPERSAND_match) >= (1))))){\ntry{var _AMPERSAND_match_left__47890 = cljs.core.subvec.cljs$core$IFn$_invoke$arity$3(_AMPERSAND_match,(0),(1));\nif(((cljs.core.vector_QMARK_(_AMPERSAND_match_left__47890)) && ((cljs.core.count(_AMPERSAND_match_left__47890) === (1))))){\ntry{var _AMPERSAND_match_left__47890_0__47892 = cljs.core.nth.cljs$core$IFn$_invoke$arity$2(_AMPERSAND_match_left__47890,(0));\nif(cljs.core.keyword_identical_QMARK_(_AMPERSAND_match_left__47890_0__47892,new cljs.core.Keyword(null,\"and\",\"and\",-971899817))){\ntry{var _AMPERSAND_match_right__47891 = cljs.core.subvec.cljs$core$IFn$_invoke$arity$2(_AMPERSAND_match,(1));\nif(cljs.core.truth_(cljs.core.partial.cljs$core$IFn$_invoke$arity$2(cljs.core.some,cljs.core.partial.cljs$core$IFn$_invoke$arity$2(metabase.mbql.util.is_clause_QMARK_,new cljs.core.Keyword(null,\"and\",\"and\",-971899817)))(_AMPERSAND_match_right__47891))){\nvar args = cljs.core.subvec.cljs$core$IFn$_invoke$arity$2(_AMPERSAND_match,(1));\nreturn metabase$mbql$util$simplify_compound_filter_$_replace_47872(_AMPERSAND_parents,cljs.core.apply.cljs$core$IFn$_invoke$arity$3(cljs.core.vector,new cljs.core.Keyword(null,\"and\",\"and\",-971899817),metabase.mbql.util.combine_compound_filters_of_type(new cljs.core.Keyword(null,\"and\",\"and\",-971899817),args)));\n} else {\nthrow cljs.core.match.backtrack;\n\n}\n}catch (e47949){if((e47949 instanceof Error)){\nvar e__46040__auto____$7 = e47949;\nif((e__46040__auto____$7 === cljs.core.match.backtrack)){\nthrow cljs.core.match.backtrack;\n} else {\nthrow e__46040__auto____$7;\n}\n} else {\nthrow e47949;\n\n}\n}} else {\nthrow cljs.core.match.backtrack;\n\n}\n}catch (e47925){if((e47925 instanceof Error)){\nvar e__46040__auto____$7 = e47925;\nif((e__46040__auto____$7 === cljs.core.match.backtrack)){\ntry{var _AMPERSAND_match_left__47890_0__47892 = cljs.core.nth.cljs$core$IFn$_invoke$arity$2(_AMPERSAND_match_left__47890,(0));\nif(cljs.core.keyword_identical_QMARK_(_AMPERSAND_match_left__47890_0__47892,new cljs.core.Keyword(null,\"or\",\"or\",235744169))){\ntry{var _AMPERSAND_match_right__47891 = cljs.core.subvec.cljs$core$IFn$_invoke$arity$2(_AMPERSAND_match,(1));\nif(cljs.core.truth_(cljs.core.partial.cljs$core$IFn$_invoke$arity$2(cljs.core.some,cljs.core.partial.cljs$core$IFn$_invoke$arity$2(metabase.mbql.util.is_clause_QMARK_,new cljs.core.Keyword(null,\"or\",\"or\",235744169)))(_AMPERSAND_match_right__47891))){\nvar args = cljs.core.subvec.cljs$core$IFn$_invoke$arity$2(_AMPERSAND_match,(1));\nreturn metabase$mbql$util$simplify_compound_filter_$_replace_47872(_AMPERSAND_parents,cljs.core.apply.cljs$core$IFn$_invoke$arity$3(cljs.core.vector,new cljs.core.Keyword(null,\"or\",\"or\",235744169),metabase.mbql.util.combine_compound_filters_of_type(new cljs.core.Keyword(null,\"or\",\"or\",235744169),args)));\n} else {\nthrow cljs.core.match.backtrack;\n\n}\n}catch (e47941){if((e47941 instanceof Error)){\nvar e__46040__auto____$8 = e47941;\nif((e__46040__auto____$8 === cljs.core.match.backtrack)){\nthrow cljs.core.match.backtrack;\n} else {\nthrow e__46040__auto____$8;\n}\n} else {\nthrow e47941;\n\n}\n}} else {\nthrow cljs.core.match.backtrack;\n\n}\n}catch (e47926){if((e47926 instanceof Error)){\nvar e__46040__auto____$8 = e47926;\nif((e__46040__auto____$8 === cljs.core.match.backtrack)){\ntry{var _AMPERSAND_match_left__47890_0__47892 = cljs.core.nth.cljs$core$IFn$_invoke$arity$2(_AMPERSAND_match_left__47890,(0));\nif(cljs.core.truth_((function (){var fexpr__47935 = new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"or\",\"or\",235744169),null,new cljs.core.Keyword(null,\"and\",\"and\",-971899817),null], null), null);\nreturn (fexpr__47935.cljs$core$IFn$_invoke$arity$1 ? fexpr__47935.cljs$core$IFn$_invoke$arity$1(_AMPERSAND_match_left__47890_0__47892) : fexpr__47935.call(null,_AMPERSAND_match_left__47890_0__47892));\n})())){\ntry{var _AMPERSAND_match_right__47891 = cljs.core.subvec.cljs$core$IFn$_invoke$arity$2(_AMPERSAND_match,(1));\nif((function (p1__47871_SHARP_){\nreturn cljs.core.not(cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.distinct_QMARK_,p1__47871_SHARP_));\n})(_AMPERSAND_match_right__47891)){\nvar args = cljs.core.subvec.cljs$core$IFn$_invoke$arity$2(_AMPERSAND_match,(1));\nvar clause = cljs.core.nth.cljs$core$IFn$_invoke$arity$2(_AMPERSAND_match_left__47890,(0));\nreturn metabase$mbql$util$simplify_compound_filter_$_replace_47872(_AMPERSAND_parents,cljs.core.apply.cljs$core$IFn$_invoke$arity$3(cljs.core.vector,clause,cljs.core.distinct.cljs$core$IFn$_invoke$arity$1(args)));\n} else {\nthrow cljs.core.match.backtrack;\n\n}\n}catch (e47936){if((e47936 instanceof Error)){\nvar e__46040__auto____$9 = e47936;\nif((e__46040__auto____$9 === cljs.core.match.backtrack)){\nthrow cljs.core.match.backtrack;\n} else {\nthrow e__46040__auto____$9;\n}\n} else {\nthrow e47936;\n\n}\n}} else {\nthrow cljs.core.match.backtrack;\n\n}\n}catch (e47931){if((e47931 instanceof Error)){\nvar e__46040__auto____$9 = e47931;\nif((e__46040__auto____$9 === cljs.core.match.backtrack)){\nthrow cljs.core.match.backtrack;\n} else {\nthrow e__46040__auto____$9;\n}\n} else {\nthrow e47931;\n\n}\n}} else {\nthrow e__46040__auto____$8;\n}\n} else {\nthrow e47926;\n\n}\n}} else {\nthrow e__46040__auto____$7;\n}\n} else {\nthrow e47925;\n\n}\n}} else {\nthrow cljs.core.match.backtrack;\n\n}\n}catch (e47924){if((e47924 instanceof Error)){\nvar e__46040__auto____$7 = e47924;\nif((e__46040__auto____$7 === cljs.core.match.backtrack)){\nthrow cljs.core.match.backtrack;\n} else {\nthrow e__46040__auto____$7;\n}\n} else {\nthrow e47924;\n\n}\n}} else {\nthrow cljs.core.match.backtrack;\n\n}\n}catch (e47913){if((e47913 instanceof Error)){\nvar e__46040__auto____$7 = e47913;\nif((e__46040__auto____$7 === cljs.core.match.backtrack)){\ntry{if(((cljs.core.vector_QMARK_(_AMPERSAND_match)) && ((cljs.core.count(_AMPERSAND_match) === 2)))){\ntry{var _AMPERSAND_match_0__47893 = cljs.core.nth.cljs$core$IFn$_invoke$arity$2(_AMPERSAND_match,(0));\nif(cljs.core.keyword_identical_QMARK_(_AMPERSAND_match_0__47893,new cljs.core.Keyword(null,\"not\",\"not\",-595976884))){\ntry{var _AMPERSAND_match_1__47894 = cljs.core.nth.cljs$core$IFn$_invoke$arity$2(_AMPERSAND_match,(1));\nif(((cljs.core.vector_QMARK_(_AMPERSAND_match_1__47894)) && ((cljs.core.count(_AMPERSAND_match_1__47894) === 2)))){\ntry{var _AMPERSAND_match_1__47894_0__47898 = cljs.core.nth.cljs$core$IFn$_invoke$arity$2(_AMPERSAND_match_1__47894,(0));\nif(cljs.core.keyword_identical_QMARK_(_AMPERSAND_match_1__47894_0__47898,new cljs.core.Keyword(null,\"not\",\"not\",-595976884))){\nvar arg = cljs.core.nth.cljs$core$IFn$_invoke$arity$2(_AMPERSAND_match_1__47894,(1));\nreturn metabase$mbql$util$simplify_compound_filter_$_replace_47872(_AMPERSAND_parents,arg);\n} else {\nthrow cljs.core.match.backtrack;\n\n}\n}catch (e47923){if((e47923 instanceof Error)){\nvar e__46040__auto____$8 = e47923;\nif((e__46040__auto____$8 === cljs.core.match.backtrack)){\nthrow cljs.core.match.backtrack;\n} else {\nthrow e__46040__auto____$8;\n}\n} else {\nthrow e47923;\n\n}\n}} else {\nthrow cljs.core.match.backtrack;\n\n}\n}catch (e47922){if((e47922 instanceof Error)){\nvar e__46040__auto____$8 = e47922;\nif((e__46040__auto____$8 === cljs.core.match.backtrack)){\nthrow cljs.core.match.backtrack;\n} else {\nthrow e__46040__auto____$8;\n}\n} else {\nthrow e47922;\n\n}\n}} else {\nthrow cljs.core.match.backtrack;\n\n}\n}catch (e47921){if((e47921 instanceof Error)){\nvar e__46040__auto____$8 = e47921;\nif((e__46040__auto____$8 === cljs.core.match.backtrack)){\nthrow cljs.core.match.backtrack;\n} else {\nthrow e__46040__auto____$8;\n}\n} else {\nthrow e47921;\n\n}\n}} else {\nthrow cljs.core.match.backtrack;\n\n}\n}catch (e47914){if((e47914 instanceof Error)){\nvar e__46040__auto____$8 = e47914;\nif((e__46040__auto____$8 === cljs.core.match.backtrack)){\ntry{if(((cljs.core.vector_QMARK_(_AMPERSAND_match)) && ((cljs.core.count(_AMPERSAND_match) >= (1))))){\ntry{var _AMPERSAND_match_left__47900 = cljs.core.subvec.cljs$core$IFn$_invoke$arity$3(_AMPERSAND_match,(0),(1));\nif(((cljs.core.vector_QMARK_(_AMPERSAND_match_left__47900)) && ((cljs.core.count(_AMPERSAND_match_left__47900) === (1))))){\ntry{var _AMPERSAND_match_left__47900_0__47902 = cljs.core.nth.cljs$core$IFn$_invoke$arity$2(_AMPERSAND_match_left__47900,(0));\nif(cljs.core.keyword_identical_QMARK_(_AMPERSAND_match_left__47900_0__47902,new cljs.core.Keyword(null,\"else\",\"else\",-1508377146))){\nreturn filter_clause;\n} else {\nthrow cljs.core.match.backtrack;\n\n}\n}catch (e47920){if((e47920 instanceof Error)){\nvar e__46040__auto____$9 = e47920;\nif((e__46040__auto____$9 === cljs.core.match.backtrack)){\nthrow cljs.core.match.backtrack;\n} else {\nthrow e__46040__auto____$9;\n}\n} else {\nthrow e47920;\n\n}\n}} else {\nthrow cljs.core.match.backtrack;\n\n}\n}catch (e47918){if((e47918 instanceof Error)){\nvar e__46040__auto____$9 = e47918;\nif((e__46040__auto____$9 === cljs.core.match.backtrack)){\nthrow cljs.core.match.backtrack;\n} else {\nthrow e__46040__auto____$9;\n}\n} else {\nthrow e47918;\n\n}\n}} else {\nthrow cljs.core.match.backtrack;\n\n}\n}catch (e47915){if((e47915 instanceof Error)){\nvar e__46040__auto____$9 = e47915;\nif((e__46040__auto____$9 === cljs.core.match.backtrack)){\nreturn metabase.mbql.util.match.impl.replace_in_collection(metabase$mbql$util$simplify_compound_filter_$_replace_47872,_AMPERSAND_parents,_AMPERSAND_match);\n} else {\nthrow e__46040__auto____$9;\n}\n} else {\nthrow e47915;\n\n}\n}} else {\nthrow e__46040__auto____$8;\n}\n} else {\nthrow e47914;\n\n}\n}} else {\nthrow e__46040__auto____$7;\n}\n} else {\nthrow e47913;\n\n}\n}} else {\nthrow e__46040__auto____$6;\n}\n} else {\nthrow e47912;\n\n}\n}} else {\nthrow e__46040__auto____$5;\n}\n} else {\nthrow e47911;\n\n}\n}} else {\nthrow e__46040__auto____$4;\n}\n} else {\nthrow e47910;\n\n}\n}} else {\nthrow e__46040__auto____$3;\n}\n} else {\nthrow e47909;\n\n}\n}} else {\nthrow e__46040__auto____$2;\n}\n} else {\nthrow e47908;\n\n}\n}} else {\nthrow e__46040__auto____$1;\n}\n} else {\nthrow e47906;\n\n}\n}} else {\nthrow e__46040__auto__;\n}\n} else {\nthrow e47905;\n\n}\n}})(cljs.core.PersistentVector.EMPTY,filter_clause);\n});\nvar output_schema47974_48407 = metabase.mbql.schema.Filter;\nvar input_schema47976_48408 = new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [schema.core.one(schema.core.Any,cljs.core.with_meta(new cljs.core.Symbol(null,\"filter-clause\",\"filter-clause\",-1237814159,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"schema\",\"schema\",-1582001791),new cljs.core.Symbol(\"schema.core\",\"Any\",\"schema.core/Any\",-1891898271,null)], null))),schema.core.Any], null);\nvar ret__34795__auto___48409 = (function (){\n/**\n * Inputs: [filter-clause & more-filter-clauses]\n *   Returns: mbql.s/Filter\n * \n *   Combine two filter clauses into a single clause in a way that minimizes slapping a bunch of `:and`s together if\n *   possible.\n */\nmetabase.mbql.util.combine_filter_clauses = (function metabase$mbql$util$combine_filter_clauses(var_args){\nvar args__5775__auto__ = [];\nvar len__5769__auto___48410 = arguments.length;\nvar i__5770__auto___48411 = (0);\nwhile(true){\nif((i__5770__auto___48411 < len__5769__auto___48410)){\nargs__5775__auto__.push((arguments[i__5770__auto___48411]));\n\nvar G__48412 = (i__5770__auto___48411 + (1));\ni__5770__auto___48411 = G__48412;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__5776__auto__ = ((((1) < args__5775__auto__.length))?(new cljs.core.IndexedSeq(args__5775__auto__.slice((1)),(0),null)):null);\nreturn metabase.mbql.util.combine_filter_clauses.cljs$core$IFn$_invoke$arity$variadic((arguments[(0)]),argseq__5776__auto__);\n});\n\n(metabase.mbql.util.combine_filter_clauses.cljs$core$IFn$_invoke$arity$variadic = (function (filter_clause,more_filter_clauses){\nreturn metabase.mbql.util.simplify_compound_filter(cljs.core.cons(new cljs.core.Keyword(null,\"and\",\"and\",-971899817),cljs.core.cons(filter_clause,more_filter_clauses)));\n}));\n\n(metabase.mbql.util.combine_filter_clauses.cljs$lang$maxFixedArity = (1));\n\n/** @this {Function} */\n(metabase.mbql.util.combine_filter_clauses.cljs$lang$applyTo = (function (seq47979){\nvar G__47980 = cljs.core.first(seq47979);\nvar seq47979__$1 = cljs.core.next(seq47979);\nvar self__5754__auto__ = this;\nreturn self__5754__auto__.cljs$core$IFn$_invoke$arity$variadic(G__47980,seq47979__$1);\n}));\n\nreturn null;\n})()\n;\nschema.utils.declare_class_schema_BANG_(schema.utils.fn_schema_bearer(metabase.mbql.util.combine_filter_clauses),schema.core.__GT_FnSchema(output_schema47974_48407,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [input_schema47976_48408], null)));\n\nvar output_schema47984_48413 = metabase.mbql.schema.MBQLQuery;\nvar input_schema47986_48414 = new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [schema.core.one(metabase.mbql.schema.MBQLQuery,cljs.core.with_meta(new cljs.core.Symbol(null,\"inner-query\",\"inner-query\",-907556093,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"schema\",\"schema\",-1582001791),new cljs.core.Symbol(\"mbql.s\",\"MBQLQuery\",\"mbql.s/MBQLQuery\",-332777720,null)], null))),schema.core.one(schema.core.maybe(metabase.mbql.schema.Filter),cljs.core.with_meta(new cljs.core.Symbol(null,\"new-clause\",\"new-clause\",-910348391,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"schema\",\"schema\",-1582001791),cljs.core.list(new cljs.core.Symbol(\"s\",\"maybe\",\"s/maybe\",1326133944,null),new cljs.core.Symbol(\"mbql.s\",\"Filter\",\"mbql.s/Filter\",650308569,null))], null)))], null);\nvar ret__34795__auto___48415 = /**\n * Inputs: [inner-query :- mbql.s/MBQLQuery new-clause :- (s/maybe mbql.s/Filter)]\n *   Returns: mbql.s/MBQLQuery\n * \n *   Add a additional filter clause to an *inner* MBQL query, merging with the existing filter clause with `:and` if\n *   needed.\n */\nmetabase.mbql.util.add_filter_clause_to_inner_query = (function metabase$mbql$util$add_filter_clause_to_inner_query(inner_query,new_clause){\nif(cljs.core.not(new_clause)){\nreturn inner_query;\n} else {\nreturn cljs.core.update.cljs$core$IFn$_invoke$arity$4(inner_query,new cljs.core.Keyword(null,\"filter\",\"filter\",-948537934),metabase.mbql.util.combine_filter_clauses,new_clause);\n}\n});\nschema.utils.declare_class_schema_BANG_(schema.utils.fn_schema_bearer(metabase.mbql.util.add_filter_clause_to_inner_query),schema.core.__GT_FnSchema(output_schema47984_48413,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [input_schema47986_48414], null)));\n\nvar output_schema47989_48416 = metabase.mbql.schema.Query;\nvar input_schema47991_48417 = new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [schema.core.one(metabase.mbql.schema.Query,cljs.core.with_meta(new cljs.core.Symbol(null,\"outer-query\",\"outer-query\",-395069361,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"schema\",\"schema\",-1582001791),new cljs.core.Symbol(\"mbql.s\",\"Query\",\"mbql.s/Query\",1061827921,null)], null))),schema.core.one(schema.core.maybe(metabase.mbql.schema.Filter),cljs.core.with_meta(new cljs.core.Symbol(null,\"new-clause\",\"new-clause\",-910348391,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"schema\",\"schema\",-1582001791),cljs.core.list(new cljs.core.Symbol(\"s\",\"maybe\",\"s/maybe\",1326133944,null),new cljs.core.Symbol(\"mbql.s\",\"Filter\",\"mbql.s/Filter\",650308569,null))], null)))], null);\nvar ret__34795__auto___48418 = /**\n * Inputs: [outer-query :- mbql.s/Query new-clause :- (s/maybe mbql.s/Filter)]\n *   Returns: mbql.s/Query\n * \n *   Add an additional filter clause to an `outer-query`. If `new-clause` is `nil` this is a no-op.\n */\nmetabase.mbql.util.add_filter_clause = (function metabase$mbql$util$add_filter_clause(outer_query,new_clause){\nreturn cljs.core.update.cljs$core$IFn$_invoke$arity$4(outer_query,new cljs.core.Keyword(null,\"query\",\"query\",-1288509510),metabase.mbql.util.add_filter_clause_to_inner_query,new_clause);\n});\nschema.utils.declare_class_schema_BANG_(schema.utils.fn_schema_bearer(metabase.mbql.util.add_filter_clause),schema.core.__GT_FnSchema(output_schema47989_48416,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [input_schema47991_48417], null)));\n\n/**\n * Rewrite `:inside` filter clauses as a pair of `:between` clauses.\n */\nmetabase.mbql.util.desugar_inside = (function metabase$mbql$util$desugar_inside(m){\nreturn (function metabase$mbql$util$desugar_inside_$_replace_47994(_AMPERSAND_parents,_AMPERSAND_match){\ntry{if(((cljs.core.vector_QMARK_(_AMPERSAND_match)) && ((cljs.core.count(_AMPERSAND_match) === 7)))){\ntry{var _AMPERSAND_match_0__47996 = cljs.core.nth.cljs$core$IFn$_invoke$arity$2(_AMPERSAND_match,(0));\nif(cljs.core.keyword_identical_QMARK_(_AMPERSAND_match_0__47996,new cljs.core.Keyword(null,\"inside\",\"inside\",1972503011))){\nvar lat_field = cljs.core.nth.cljs$core$IFn$_invoke$arity$2(_AMPERSAND_match,(1));\nvar lon_field = cljs.core.nth.cljs$core$IFn$_invoke$arity$2(_AMPERSAND_match,(2));\nvar lat_max = cljs.core.nth.cljs$core$IFn$_invoke$arity$2(_AMPERSAND_match,(3));\nvar lon_min = cljs.core.nth.cljs$core$IFn$_invoke$arity$2(_AMPERSAND_match,(4));\nvar lat_min = cljs.core.nth.cljs$core$IFn$_invoke$arity$2(_AMPERSAND_match,(5));\nvar lon_max = cljs.core.nth.cljs$core$IFn$_invoke$arity$2(_AMPERSAND_match,(6));\nreturn new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"and\",\"and\",-971899817),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"between\",\"between\",1131099276),lat_field,lat_min,lat_max], null),new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"between\",\"between\",1131099276),lon_field,lon_min,lon_max], null)], null);\n} else {\nthrow cljs.core.match.backtrack;\n\n}\n}catch (e48004){if((e48004 instanceof Error)){\nvar e__46040__auto__ = e48004;\nif((e__46040__auto__ === cljs.core.match.backtrack)){\nthrow cljs.core.match.backtrack;\n} else {\nthrow e__46040__auto__;\n}\n} else {\nthrow e48004;\n\n}\n}} else {\nthrow cljs.core.match.backtrack;\n\n}\n}catch (e48003){if((e48003 instanceof Error)){\nvar e__46040__auto__ = e48003;\nif((e__46040__auto__ === cljs.core.match.backtrack)){\nreturn metabase.mbql.util.match.impl.replace_in_collection(metabase$mbql$util$desugar_inside_$_replace_47994,_AMPERSAND_parents,_AMPERSAND_match);\n} else {\nthrow e__46040__auto__;\n}\n} else {\nthrow e48003;\n\n}\n}})(cljs.core.PersistentVector.EMPTY,m);\n});\n/**\n * Rewrite `:is-null` and `:not-null` filter clauses as simpler `:=` and `:!=`, respectively.\n */\nmetabase.mbql.util.desugar_is_null_and_not_null = (function metabase$mbql$util$desugar_is_null_and_not_null(m){\nreturn (function metabase$mbql$util$desugar_is_null_and_not_null_$_replace_48005(_AMPERSAND_parents,_AMPERSAND_match){\ntry{if(((cljs.core.vector_QMARK_(_AMPERSAND_match)) && ((cljs.core.count(_AMPERSAND_match) === 2)))){\ntry{var _AMPERSAND_match_0__48007 = cljs.core.nth.cljs$core$IFn$_invoke$arity$2(_AMPERSAND_match,(0));\nif(cljs.core.keyword_identical_QMARK_(_AMPERSAND_match_0__48007,new cljs.core.Keyword(null,\"is-null\",\"is-null\",-1997050930))){\nvar field = cljs.core.nth.cljs$core$IFn$_invoke$arity$2(_AMPERSAND_match,(1));\nreturn new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"=\",\"=\",1152933628),field,null], null);\n} else {\nthrow cljs.core.match.backtrack;\n\n}\n}catch (e48010){if((e48010 instanceof Error)){\nvar e__46040__auto__ = e48010;\nif((e__46040__auto__ === cljs.core.match.backtrack)){\ntry{var _AMPERSAND_match_0__48007 = cljs.core.nth.cljs$core$IFn$_invoke$arity$2(_AMPERSAND_match,(0));\nif(cljs.core.keyword_identical_QMARK_(_AMPERSAND_match_0__48007,new cljs.core.Keyword(null,\"not-null\",\"not-null\",-1326718535))){\nvar field = cljs.core.nth.cljs$core$IFn$_invoke$arity$2(_AMPERSAND_match,(1));\nreturn new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"!=\",\"!=\",-1841737356),field,null], null);\n} else {\nthrow cljs.core.match.backtrack;\n\n}\n}catch (e48011){if((e48011 instanceof Error)){\nvar e__46040__auto____$1 = e48011;\nif((e__46040__auto____$1 === cljs.core.match.backtrack)){\nthrow cljs.core.match.backtrack;\n} else {\nthrow e__46040__auto____$1;\n}\n} else {\nthrow e48011;\n\n}\n}} else {\nthrow e__46040__auto__;\n}\n} else {\nthrow e48010;\n\n}\n}} else {\nthrow cljs.core.match.backtrack;\n\n}\n}catch (e48009){if((e48009 instanceof Error)){\nvar e__46040__auto__ = e48009;\nif((e__46040__auto__ === cljs.core.match.backtrack)){\nreturn metabase.mbql.util.match.impl.replace_in_collection(metabase$mbql$util$desugar_is_null_and_not_null_$_replace_48005,_AMPERSAND_parents,_AMPERSAND_match);\n} else {\nthrow e__46040__auto__;\n}\n} else {\nthrow e48009;\n\n}\n}})(cljs.core.PersistentVector.EMPTY,m);\n});\n/**\n * Rewrite `:is-empty` and `:not-empty` filter clauses as simpler `:=` and `:!=`, respectively.\n */\nmetabase.mbql.util.desugar_is_empty_and_not_empty = (function metabase$mbql$util$desugar_is_empty_and_not_empty(m){\nreturn (function metabase$mbql$util$desugar_is_empty_and_not_empty_$_replace_48012(_AMPERSAND_parents,_AMPERSAND_match){\ntry{if(((cljs.core.vector_QMARK_(_AMPERSAND_match)) && ((cljs.core.count(_AMPERSAND_match) === 2)))){\ntry{var _AMPERSAND_match_0__48014 = cljs.core.nth.cljs$core$IFn$_invoke$arity$2(_AMPERSAND_match,(0));\nif(cljs.core.keyword_identical_QMARK_(_AMPERSAND_match_0__48014,new cljs.core.Keyword(null,\"is-empty\",\"is-empty\",-1040302908))){\nvar field = cljs.core.nth.cljs$core$IFn$_invoke$arity$2(_AMPERSAND_match,(1));\nreturn new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"or\",\"or\",235744169),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"=\",\"=\",1152933628),field,null], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"=\",\"=\",1152933628),field,\"\"], null)], null);\n} else {\nthrow cljs.core.match.backtrack;\n\n}\n}catch (e48017){if((e48017 instanceof Error)){\nvar e__46040__auto__ = e48017;\nif((e__46040__auto__ === cljs.core.match.backtrack)){\ntry{var _AMPERSAND_match_0__48014 = cljs.core.nth.cljs$core$IFn$_invoke$arity$2(_AMPERSAND_match,(0));\nif(cljs.core.keyword_identical_QMARK_(_AMPERSAND_match_0__48014,new cljs.core.Keyword(null,\"not-empty\",\"not-empty\",388922063))){\nvar field = cljs.core.nth.cljs$core$IFn$_invoke$arity$2(_AMPERSAND_match,(1));\nreturn new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"and\",\"and\",-971899817),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"!=\",\"!=\",-1841737356),field,null], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"!=\",\"!=\",-1841737356),field,\"\"], null)], null);\n} else {\nthrow cljs.core.match.backtrack;\n\n}\n}catch (e48018){if((e48018 instanceof Error)){\nvar e__46040__auto____$1 = e48018;\nif((e__46040__auto____$1 === cljs.core.match.backtrack)){\nthrow cljs.core.match.backtrack;\n} else {\nthrow e__46040__auto____$1;\n}\n} else {\nthrow e48018;\n\n}\n}} else {\nthrow e__46040__auto__;\n}\n} else {\nthrow e48017;\n\n}\n}} else {\nthrow cljs.core.match.backtrack;\n\n}\n}catch (e48016){if((e48016 instanceof Error)){\nvar e__46040__auto__ = e48016;\nif((e__46040__auto__ === cljs.core.match.backtrack)){\nreturn metabase.mbql.util.match.impl.replace_in_collection(metabase$mbql$util$desugar_is_empty_and_not_empty_$_replace_48012,_AMPERSAND_parents,_AMPERSAND_match);\n} else {\nthrow e__46040__auto__;\n}\n} else {\nthrow e48016;\n\n}\n}})(cljs.core.PersistentVector.EMPTY,m);\n});\n/**\n * Replace a field or expression inside :time-interval\n */\nmetabase.mbql.util.replace_field_or_expression = (function metabase$mbql$util$replace_field_or_expression(m,unit){\nreturn (function metabase$mbql$util$replace_field_or_expression_$_replace_48019(_AMPERSAND_parents,_AMPERSAND_match){\ntry{if(((cljs.core.vector_QMARK_(_AMPERSAND_match)) && ((cljs.core.count(_AMPERSAND_match) === 3)))){\ntry{var _AMPERSAND_match_0__48021 = cljs.core.nth.cljs$core$IFn$_invoke$arity$2(_AMPERSAND_match,(0));\nif(cljs.core.keyword_identical_QMARK_(_AMPERSAND_match_0__48021,new cljs.core.Keyword(null,\"field\",\"field\",-1302436500))){\nvar id_or_name = cljs.core.nth.cljs$core$IFn$_invoke$arity$2(_AMPERSAND_match,(1));\nvar opts = cljs.core.nth.cljs$core$IFn$_invoke$arity$2(_AMPERSAND_match,(2));\nreturn new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"field\",\"field\",-1302436500),id_or_name,cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(opts,new cljs.core.Keyword(null,\"temporal-unit\",\"temporal-unit\",-1892306358),unit)], null);\n} else {\nthrow cljs.core.match.backtrack;\n\n}\n}catch (e48029){if((e48029 instanceof Error)){\nvar e__46040__auto__ = e48029;\nif((e__46040__auto__ === cljs.core.match.backtrack)){\nthrow cljs.core.match.backtrack;\n} else {\nthrow e__46040__auto__;\n}\n} else {\nthrow e48029;\n\n}\n}} else {\nthrow cljs.core.match.backtrack;\n\n}\n}catch (e48026){if((e48026 instanceof Error)){\nvar e__46040__auto__ = e48026;\nif((e__46040__auto__ === cljs.core.match.backtrack)){\ntry{if(((cljs.core.vector_QMARK_(_AMPERSAND_match)) && ((cljs.core.count(_AMPERSAND_match) === 2)))){\ntry{var _AMPERSAND_match_0__48024 = cljs.core.nth.cljs$core$IFn$_invoke$arity$2(_AMPERSAND_match,(0));\nif(cljs.core.keyword_identical_QMARK_(_AMPERSAND_match_0__48024,new cljs.core.Keyword(null,\"expression\",\"expression\",202311876))){\nvar expression_name = cljs.core.nth.cljs$core$IFn$_invoke$arity$2(_AMPERSAND_match,(1));\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"expression\",\"expression\",202311876),expression_name], null);\n} else {\nthrow cljs.core.match.backtrack;\n\n}\n}catch (e48028){if((e48028 instanceof Error)){\nvar e__46040__auto____$1 = e48028;\nif((e__46040__auto____$1 === cljs.core.match.backtrack)){\nthrow cljs.core.match.backtrack;\n} else {\nthrow e__46040__auto____$1;\n}\n} else {\nthrow e48028;\n\n}\n}} else {\nthrow cljs.core.match.backtrack;\n\n}\n}catch (e48027){if((e48027 instanceof Error)){\nvar e__46040__auto____$1 = e48027;\nif((e__46040__auto____$1 === cljs.core.match.backtrack)){\nreturn metabase.mbql.util.match.impl.replace_in_collection(metabase$mbql$util$replace_field_or_expression_$_replace_48019,_AMPERSAND_parents,_AMPERSAND_match);\n} else {\nthrow e__46040__auto____$1;\n}\n} else {\nthrow e48027;\n\n}\n}} else {\nthrow e__46040__auto__;\n}\n} else {\nthrow e48026;\n\n}\n}})(cljs.core.PersistentVector.EMPTY,m);\n});\n/**\n * Rewrite `:time-interval` filter clauses as simpler ones like `:=` or `:between`.\n */\nmetabase.mbql.util.desugar_time_interval = (function metabase$mbql$util$desugar_time_interval(m){\nreturn (function metabase$mbql$util$desugar_time_interval_$_replace_48030(_AMPERSAND_parents,_AMPERSAND_match){\ntry{if(((cljs.core.vector_QMARK_(_AMPERSAND_match)) && ((cljs.core.count(_AMPERSAND_match) === 4)))){\ntry{var _AMPERSAND_match_0__48039 = cljs.core.nth.cljs$core$IFn$_invoke$arity$2(_AMPERSAND_match,(0));\nif(cljs.core.keyword_identical_QMARK_(_AMPERSAND_match_0__48039,new cljs.core.Keyword(null,\"time-interval\",\"time-interval\",704622015))){\nvar field_or_expression = cljs.core.nth.cljs$core$IFn$_invoke$arity$2(_AMPERSAND_match,(1));\nvar n = cljs.core.nth.cljs$core$IFn$_invoke$arity$2(_AMPERSAND_match,(2));\nvar unit = cljs.core.nth.cljs$core$IFn$_invoke$arity$2(_AMPERSAND_match,(3));\nreturn metabase$mbql$util$desugar_time_interval_$_replace_48030(_AMPERSAND_parents,new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"time-interval\",\"time-interval\",704622015),field_or_expression,n,unit,null], null));\n} else {\nthrow cljs.core.match.backtrack;\n\n}\n}catch (e48065){if((e48065 instanceof Error)){\nvar e__46040__auto__ = e48065;\nif((e__46040__auto__ === cljs.core.match.backtrack)){\nthrow cljs.core.match.backtrack;\n} else {\nthrow e__46040__auto__;\n}\n} else {\nthrow e48065;\n\n}\n}} else {\nthrow cljs.core.match.backtrack;\n\n}\n}catch (e48048){if((e48048 instanceof Error)){\nvar e__46040__auto__ = e48048;\nif((e__46040__auto__ === cljs.core.match.backtrack)){\ntry{if(((cljs.core.vector_QMARK_(_AMPERSAND_match)) && ((cljs.core.count(_AMPERSAND_match) === 5)))){\ntry{var _AMPERSAND_match_0__48043 = cljs.core.nth.cljs$core$IFn$_invoke$arity$2(_AMPERSAND_match,(0));\nif(cljs.core.keyword_identical_QMARK_(_AMPERSAND_match_0__48043,new cljs.core.Keyword(null,\"time-interval\",\"time-interval\",704622015))){\ntry{var _AMPERSAND_match_2__48045 = cljs.core.nth.cljs$core$IFn$_invoke$arity$2(_AMPERSAND_match,(2));\nif(cljs.core.keyword_identical_QMARK_(_AMPERSAND_match_2__48045,new cljs.core.Keyword(null,\"current\",\"current\",-1088038603))){\nvar field_or_expression = cljs.core.nth.cljs$core$IFn$_invoke$arity$2(_AMPERSAND_match,(1));\nvar unit = cljs.core.nth.cljs$core$IFn$_invoke$arity$2(_AMPERSAND_match,(3));\nvar options = cljs.core.nth.cljs$core$IFn$_invoke$arity$2(_AMPERSAND_match,(4));\nreturn metabase$mbql$util$desugar_time_interval_$_replace_48030(_AMPERSAND_parents,new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"time-interval\",\"time-interval\",704622015),field_or_expression,(0),unit,options], null));\n} else {\nthrow cljs.core.match.backtrack;\n\n}\n}catch (e48051){if((e48051 instanceof Error)){\nvar e__46040__auto____$1 = e48051;\nif((e__46040__auto____$1 === cljs.core.match.backtrack)){\ntry{var _AMPERSAND_match_2__48045 = cljs.core.nth.cljs$core$IFn$_invoke$arity$2(_AMPERSAND_match,(2));\nif(cljs.core.keyword_identical_QMARK_(_AMPERSAND_match_2__48045,new cljs.core.Keyword(null,\"last\",\"last\",1105735132))){\nvar field_or_expression = cljs.core.nth.cljs$core$IFn$_invoke$arity$2(_AMPERSAND_match,(1));\nvar unit = cljs.core.nth.cljs$core$IFn$_invoke$arity$2(_AMPERSAND_match,(3));\nvar options = cljs.core.nth.cljs$core$IFn$_invoke$arity$2(_AMPERSAND_match,(4));\nreturn metabase$mbql$util$desugar_time_interval_$_replace_48030(_AMPERSAND_parents,new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"time-interval\",\"time-interval\",704622015),field_or_expression,(-1),unit,options], null));\n} else {\nthrow cljs.core.match.backtrack;\n\n}\n}catch (e48052){if((e48052 instanceof Error)){\nvar e__46040__auto____$2 = e48052;\nif((e__46040__auto____$2 === cljs.core.match.backtrack)){\ntry{var _AMPERSAND_match_2__48045 = cljs.core.nth.cljs$core$IFn$_invoke$arity$2(_AMPERSAND_match,(2));\nif(cljs.core.keyword_identical_QMARK_(_AMPERSAND_match_2__48045,new cljs.core.Keyword(null,\"next\",\"next\",-117701485))){\nvar field_or_expression = cljs.core.nth.cljs$core$IFn$_invoke$arity$2(_AMPERSAND_match,(1));\nvar unit = cljs.core.nth.cljs$core$IFn$_invoke$arity$2(_AMPERSAND_match,(3));\nvar options = cljs.core.nth.cljs$core$IFn$_invoke$arity$2(_AMPERSAND_match,(4));\nreturn metabase$mbql$util$desugar_time_interval_$_replace_48030(_AMPERSAND_parents,new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"time-interval\",\"time-interval\",704622015),field_or_expression,(1),unit,options], null));\n} else {\nthrow cljs.core.match.backtrack;\n\n}\n}catch (e48053){if((e48053 instanceof Error)){\nvar e__46040__auto____$3 = e48053;\nif((e__46040__auto____$3 === cljs.core.match.backtrack)){\ntry{var _AMPERSAND_match_2__48045 = cljs.core.nth.cljs$core$IFn$_invoke$arity$2(_AMPERSAND_match,(2));\nif(cljs.core.truth_((function (){var fexpr__48063 = new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [(-1),null], null), null);\nreturn (fexpr__48063.cljs$core$IFn$_invoke$arity$1 ? fexpr__48063.cljs$core$IFn$_invoke$arity$1(_AMPERSAND_match_2__48045) : fexpr__48063.call(null,_AMPERSAND_match_2__48045));\n})())){\ntry{var _AMPERSAND_match_4__48047 = cljs.core.nth.cljs$core$IFn$_invoke$arity$2(_AMPERSAND_match,(4));\nif(cljs.core.truth_(new cljs.core.Keyword(null,\"include-current\",\"include-current\",-1602371981).cljs$core$IFn$_invoke$arity$1(_AMPERSAND_match_4__48047))){\nvar n = cljs.core.nth.cljs$core$IFn$_invoke$arity$2(_AMPERSAND_match,(2));\nvar field_or_expression = cljs.core.nth.cljs$core$IFn$_invoke$arity$2(_AMPERSAND_match,(1));\nvar unit = cljs.core.nth.cljs$core$IFn$_invoke$arity$2(_AMPERSAND_match,(3));\nreturn new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"between\",\"between\",1131099276),metabase.mbql.util.replace_field_or_expression(field_or_expression,unit),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"relative-datetime\",\"relative-datetime\",1285169278),n,unit], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"relative-datetime\",\"relative-datetime\",1285169278),(0),unit], null)], null);\n} else {\nthrow cljs.core.match.backtrack;\n\n}\n}catch (e48064){if((e48064 instanceof Error)){\nvar e__46040__auto____$4 = e48064;\nif((e__46040__auto____$4 === cljs.core.match.backtrack)){\nthrow cljs.core.match.backtrack;\n} else {\nthrow e__46040__auto____$4;\n}\n} else {\nthrow e48064;\n\n}\n}} else {\nthrow cljs.core.match.backtrack;\n\n}\n}catch (e48054){if((e48054 instanceof Error)){\nvar e__46040__auto____$4 = e48054;\nif((e__46040__auto____$4 === cljs.core.match.backtrack)){\ntry{var _AMPERSAND_match_2__48045 = cljs.core.nth.cljs$core$IFn$_invoke$arity$2(_AMPERSAND_match,(2));\nif(cljs.core.truth_((function (){var fexpr__48061 = new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [(1),null], null), null);\nreturn (fexpr__48061.cljs$core$IFn$_invoke$arity$1 ? fexpr__48061.cljs$core$IFn$_invoke$arity$1(_AMPERSAND_match_2__48045) : fexpr__48061.call(null,_AMPERSAND_match_2__48045));\n})())){\ntry{var _AMPERSAND_match_4__48047 = cljs.core.nth.cljs$core$IFn$_invoke$arity$2(_AMPERSAND_match,(4));\nif(cljs.core.truth_(new cljs.core.Keyword(null,\"include-current\",\"include-current\",-1602371981).cljs$core$IFn$_invoke$arity$1(_AMPERSAND_match_4__48047))){\nvar n = cljs.core.nth.cljs$core$IFn$_invoke$arity$2(_AMPERSAND_match,(2));\nvar field_or_expression = cljs.core.nth.cljs$core$IFn$_invoke$arity$2(_AMPERSAND_match,(1));\nvar unit = cljs.core.nth.cljs$core$IFn$_invoke$arity$2(_AMPERSAND_match,(3));\nreturn new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"between\",\"between\",1131099276),metabase.mbql.util.replace_field_or_expression(field_or_expression,unit),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"relative-datetime\",\"relative-datetime\",1285169278),(0),unit], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"relative-datetime\",\"relative-datetime\",1285169278),n,unit], null)], null);\n} else {\nthrow cljs.core.match.backtrack;\n\n}\n}catch (e48062){if((e48062 instanceof Error)){\nvar e__46040__auto____$5 = e48062;\nif((e__46040__auto____$5 === cljs.core.match.backtrack)){\nthrow cljs.core.match.backtrack;\n} else {\nthrow e__46040__auto____$5;\n}\n} else {\nthrow e48062;\n\n}\n}} else {\nthrow cljs.core.match.backtrack;\n\n}\n}catch (e48055){if((e48055 instanceof Error)){\nvar e__46040__auto____$5 = e48055;\nif((e__46040__auto____$5 === cljs.core.match.backtrack)){\ntry{var _AMPERSAND_match_2__48045 = cljs.core.nth.cljs$core$IFn$_invoke$arity$2(_AMPERSAND_match,(2));\nif(cljs.core.truth_((function (){var fexpr__48060 = new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 3, [(0),null,(1),null,(-1),null], null), null);\nreturn (fexpr__48060.cljs$core$IFn$_invoke$arity$1 ? fexpr__48060.cljs$core$IFn$_invoke$arity$1(_AMPERSAND_match_2__48045) : fexpr__48060.call(null,_AMPERSAND_match_2__48045));\n})())){\nvar n = cljs.core.nth.cljs$core$IFn$_invoke$arity$2(_AMPERSAND_match,(2));\nvar field_or_expression = cljs.core.nth.cljs$core$IFn$_invoke$arity$2(_AMPERSAND_match,(1));\nvar unit = cljs.core.nth.cljs$core$IFn$_invoke$arity$2(_AMPERSAND_match,(3));\nreturn new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"=\",\"=\",1152933628),metabase.mbql.util.replace_field_or_expression(field_or_expression,unit),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"relative-datetime\",\"relative-datetime\",1285169278),n,unit], null)], null);\n} else {\nthrow cljs.core.match.backtrack;\n\n}\n}catch (e48056){if((e48056 instanceof Error)){\nvar e__46040__auto____$6 = e48056;\nif((e__46040__auto____$6 === cljs.core.match.backtrack)){\ntry{var _AMPERSAND_match_2__48045 = cljs.core.nth.cljs$core$IFn$_invoke$arity$2(_AMPERSAND_match,(2));\nif((_AMPERSAND_match_2__48045 < (0))){\ntry{var _AMPERSAND_match_4__48047 = cljs.core.nth.cljs$core$IFn$_invoke$arity$2(_AMPERSAND_match,(4));\nif(cljs.core.truth_(new cljs.core.Keyword(null,\"include-current\",\"include-current\",-1602371981).cljs$core$IFn$_invoke$arity$1(_AMPERSAND_match_4__48047))){\nvar n = cljs.core.nth.cljs$core$IFn$_invoke$arity$2(_AMPERSAND_match,(2));\nvar field_or_expression = cljs.core.nth.cljs$core$IFn$_invoke$arity$2(_AMPERSAND_match,(1));\nvar unit = cljs.core.nth.cljs$core$IFn$_invoke$arity$2(_AMPERSAND_match,(3));\nreturn new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"between\",\"between\",1131099276),metabase.mbql.util.replace_field_or_expression(field_or_expression,unit),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"relative-datetime\",\"relative-datetime\",1285169278),n,unit], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"relative-datetime\",\"relative-datetime\",1285169278),(0),unit], null)], null);\n} else {\nthrow cljs.core.match.backtrack;\n\n}\n}catch (e48059){if((e48059 instanceof Error)){\nvar e__46040__auto____$7 = e48059;\nif((e__46040__auto____$7 === cljs.core.match.backtrack)){\nvar n = cljs.core.nth.cljs$core$IFn$_invoke$arity$2(_AMPERSAND_match,(2));\nvar field_or_expression = cljs.core.nth.cljs$core$IFn$_invoke$arity$2(_AMPERSAND_match,(1));\nvar unit = cljs.core.nth.cljs$core$IFn$_invoke$arity$2(_AMPERSAND_match,(3));\nreturn new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"between\",\"between\",1131099276),metabase.mbql.util.replace_field_or_expression(field_or_expression,unit),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"relative-datetime\",\"relative-datetime\",1285169278),n,unit], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"relative-datetime\",\"relative-datetime\",1285169278),(-1),unit], null)], null);\n} else {\nthrow e__46040__auto____$7;\n}\n} else {\nthrow e48059;\n\n}\n}} else {\nthrow cljs.core.match.backtrack;\n\n}\n}catch (e48057){if((e48057 instanceof Error)){\nvar e__46040__auto____$7 = e48057;\nif((e__46040__auto____$7 === cljs.core.match.backtrack)){\ntry{var _AMPERSAND_match_4__48047 = cljs.core.nth.cljs$core$IFn$_invoke$arity$2(_AMPERSAND_match,(4));\nif(cljs.core.truth_(new cljs.core.Keyword(null,\"include-current\",\"include-current\",-1602371981).cljs$core$IFn$_invoke$arity$1(_AMPERSAND_match_4__48047))){\nvar n = cljs.core.nth.cljs$core$IFn$_invoke$arity$2(_AMPERSAND_match,(2));\nvar field_or_expression = cljs.core.nth.cljs$core$IFn$_invoke$arity$2(_AMPERSAND_match,(1));\nvar unit = cljs.core.nth.cljs$core$IFn$_invoke$arity$2(_AMPERSAND_match,(3));\nreturn new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"between\",\"between\",1131099276),metabase.mbql.util.replace_field_or_expression(field_or_expression,unit),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"relative-datetime\",\"relative-datetime\",1285169278),(0),unit], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"relative-datetime\",\"relative-datetime\",1285169278),n,unit], null)], null);\n} else {\nthrow cljs.core.match.backtrack;\n\n}\n}catch (e48058){if((e48058 instanceof Error)){\nvar e__46040__auto____$8 = e48058;\nif((e__46040__auto____$8 === cljs.core.match.backtrack)){\nvar n = cljs.core.nth.cljs$core$IFn$_invoke$arity$2(_AMPERSAND_match,(2));\nvar field_or_expression = cljs.core.nth.cljs$core$IFn$_invoke$arity$2(_AMPERSAND_match,(1));\nvar unit = cljs.core.nth.cljs$core$IFn$_invoke$arity$2(_AMPERSAND_match,(3));\nreturn new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"between\",\"between\",1131099276),metabase.mbql.util.replace_field_or_expression(field_or_expression,unit),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"relative-datetime\",\"relative-datetime\",1285169278),(1),unit], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"relative-datetime\",\"relative-datetime\",1285169278),n,unit], null)], null);\n} else {\nthrow e__46040__auto____$8;\n}\n} else {\nthrow e48058;\n\n}\n}} else {\nthrow e__46040__auto____$7;\n}\n} else {\nthrow e48057;\n\n}\n}} else {\nthrow e__46040__auto____$6;\n}\n} else {\nthrow e48056;\n\n}\n}} else {\nthrow e__46040__auto____$5;\n}\n} else {\nthrow e48055;\n\n}\n}} else {\nthrow e__46040__auto____$4;\n}\n} else {\nthrow e48054;\n\n}\n}} else {\nthrow e__46040__auto____$3;\n}\n} else {\nthrow e48053;\n\n}\n}} else {\nthrow e__46040__auto____$2;\n}\n} else {\nthrow e48052;\n\n}\n}} else {\nthrow e__46040__auto____$1;\n}\n} else {\nthrow e48051;\n\n}\n}} else {\nthrow cljs.core.match.backtrack;\n\n}\n}catch (e48050){if((e48050 instanceof Error)){\nvar e__46040__auto____$1 = e48050;\nif((e__46040__auto____$1 === cljs.core.match.backtrack)){\nthrow cljs.core.match.backtrack;\n} else {\nthrow e__46040__auto____$1;\n}\n} else {\nthrow e48050;\n\n}\n}} else {\nthrow cljs.core.match.backtrack;\n\n}\n}catch (e48049){if((e48049 instanceof Error)){\nvar e__46040__auto____$1 = e48049;\nif((e__46040__auto____$1 === cljs.core.match.backtrack)){\nreturn metabase.mbql.util.match.impl.replace_in_collection(metabase$mbql$util$desugar_time_interval_$_replace_48030,_AMPERSAND_parents,_AMPERSAND_match);\n} else {\nthrow e__46040__auto____$1;\n}\n} else {\nthrow e48049;\n\n}\n}} else {\nthrow e__46040__auto__;\n}\n} else {\nthrow e48048;\n\n}\n}})(cljs.core.PersistentVector.EMPTY,m);\n});\n/**\n * Rewrite `:does-not-contain` filter clauses as simpler `:not` clauses.\n */\nmetabase.mbql.util.desugar_does_not_contain = (function metabase$mbql$util$desugar_does_not_contain(m){\nreturn (function metabase$mbql$util$desugar_does_not_contain_$_replace_48066(_AMPERSAND_parents,_AMPERSAND_match){\ntry{if(((cljs.core.vector_QMARK_(_AMPERSAND_match)) && ((cljs.core.count(_AMPERSAND_match) >= (1))))){\ntry{var _AMPERSAND_match_left__48068 = cljs.core.subvec.cljs$core$IFn$_invoke$arity$3(_AMPERSAND_match,(0),(1));\nif(((cljs.core.vector_QMARK_(_AMPERSAND_match_left__48068)) && ((cljs.core.count(_AMPERSAND_match_left__48068) === (1))))){\ntry{var _AMPERSAND_match_left__48068_0__48070 = cljs.core.nth.cljs$core$IFn$_invoke$arity$2(_AMPERSAND_match_left__48068,(0));\nif(cljs.core.keyword_identical_QMARK_(_AMPERSAND_match_left__48068_0__48070,new cljs.core.Keyword(null,\"does-not-contain\",\"does-not-contain\",-274946853))){\nvar args = cljs.core.subvec.cljs$core$IFn$_invoke$arity$2(_AMPERSAND_match,(1));\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"not\",\"not\",-595976884),cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"contains\",\"contains\",676899812)], null),args)], null);\n} else {\nthrow cljs.core.match.backtrack;\n\n}\n}catch (e48073){if((e48073 instanceof Error)){\nvar e__46040__auto__ = e48073;\nif((e__46040__auto__ === cljs.core.match.backtrack)){\nthrow cljs.core.match.backtrack;\n} else {\nthrow e__46040__auto__;\n}\n} else {\nthrow e48073;\n\n}\n}} else {\nthrow cljs.core.match.backtrack;\n\n}\n}catch (e48072){if((e48072 instanceof Error)){\nvar e__46040__auto__ = e48072;\nif((e__46040__auto__ === cljs.core.match.backtrack)){\nthrow cljs.core.match.backtrack;\n} else {\nthrow e__46040__auto__;\n}\n} else {\nthrow e48072;\n\n}\n}} else {\nthrow cljs.core.match.backtrack;\n\n}\n}catch (e48071){if((e48071 instanceof Error)){\nvar e__46040__auto__ = e48071;\nif((e__46040__auto__ === cljs.core.match.backtrack)){\nreturn metabase.mbql.util.match.impl.replace_in_collection(metabase$mbql$util$desugar_does_not_contain_$_replace_48066,_AMPERSAND_parents,_AMPERSAND_match);\n} else {\nthrow e__46040__auto__;\n}\n} else {\nthrow e48071;\n\n}\n}})(cljs.core.PersistentVector.EMPTY,m);\n});\n/**\n * `:=` and `!=` clauses with more than 2 args automatically get rewritten as compound filters.\n * \n *   [:= field x y]  -> [:or  [:=  field x] [:=  field y]]\n *   [:!= field x y] -> [:and [:!= field x] [:!= field y]]\n */\nmetabase.mbql.util.desugar_equals_and_not_equals_with_extra_args = (function metabase$mbql$util$desugar_equals_and_not_equals_with_extra_args(m){\nreturn (function metabase$mbql$util$desugar_equals_and_not_equals_with_extra_args_$_replace_48074(_AMPERSAND_parents,_AMPERSAND_match){\ntry{if(((cljs.core.vector_QMARK_(_AMPERSAND_match)) && ((cljs.core.count(_AMPERSAND_match) >= (4))))){\ntry{var _AMPERSAND_match_left__48076 = cljs.core.subvec.cljs$core$IFn$_invoke$arity$3(_AMPERSAND_match,(0),(4));\nif(((cljs.core.vector_QMARK_(_AMPERSAND_match_left__48076)) && ((cljs.core.count(_AMPERSAND_match_left__48076) === (4))))){\ntry{var _AMPERSAND_match_left__48076_0__48078 = cljs.core.nth.cljs$core$IFn$_invoke$arity$2(_AMPERSAND_match_left__48076,(0));\nif(cljs.core.keyword_identical_QMARK_(_AMPERSAND_match_left__48076_0__48078,new cljs.core.Keyword(null,\"=\",\"=\",1152933628))){\nvar field = cljs.core.nth.cljs$core$IFn$_invoke$arity$2(_AMPERSAND_match_left__48076,(1));\nvar x = cljs.core.nth.cljs$core$IFn$_invoke$arity$2(_AMPERSAND_match_left__48076,(2));\nvar y = cljs.core.nth.cljs$core$IFn$_invoke$arity$2(_AMPERSAND_match_left__48076,(3));\nvar more = cljs.core.subvec.cljs$core$IFn$_invoke$arity$2(_AMPERSAND_match,(4));\nreturn cljs.core.apply.cljs$core$IFn$_invoke$arity$3(cljs.core.vector,new cljs.core.Keyword(null,\"or\",\"or\",235744169),(function (){var iter__5523__auto__ = (function metabase$mbql$util$desugar_equals_and_not_equals_with_extra_args_$_replace_48074_$_iter__48090(s__48091){\nreturn (new cljs.core.LazySeq(null,(function (){\nvar s__48091__$1 = s__48091;\nwhile(true){\nvar temp__5804__auto__ = cljs.core.seq(s__48091__$1);\nif(temp__5804__auto__){\nvar s__48091__$2 = temp__5804__auto__;\nif(cljs.core.chunked_seq_QMARK_(s__48091__$2)){\nvar c__5521__auto__ = cljs.core.chunk_first(s__48091__$2);\nvar size__5522__auto__ = cljs.core.count(c__5521__auto__);\nvar b__48093 = cljs.core.chunk_buffer(size__5522__auto__);\nif((function (){var i__48092 = (0);\nwhile(true){\nif((i__48092 < size__5522__auto__)){\nvar x__$1 = cljs.core._nth(c__5521__auto__,i__48092);\ncljs.core.chunk_append(b__48093,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"=\",\"=\",1152933628),field,x__$1], null));\n\nvar G__48429 = (i__48092 + (1));\ni__48092 = G__48429;\ncontinue;\n} else {\nreturn true;\n}\nbreak;\n}\n})()){\nreturn cljs.core.chunk_cons(cljs.core.chunk(b__48093),metabase$mbql$util$desugar_equals_and_not_equals_with_extra_args_$_replace_48074_$_iter__48090(cljs.core.chunk_rest(s__48091__$2)));\n} else {\nreturn cljs.core.chunk_cons(cljs.core.chunk(b__48093),null);\n}\n} else {\nvar x__$1 = cljs.core.first(s__48091__$2);\nreturn cljs.core.cons(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"=\",\"=\",1152933628),field,x__$1], null),metabase$mbql$util$desugar_equals_and_not_equals_with_extra_args_$_replace_48074_$_iter__48090(cljs.core.rest(s__48091__$2)));\n}\n} else {\nreturn null;\n}\nbreak;\n}\n}),null,null));\n});\nreturn iter__5523__auto__(cljs.core.concat.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [x,y], null),more));\n})());\n} else {\nthrow cljs.core.match.backtrack;\n\n}\n}catch (e48084){if((e48084 instanceof Error)){\nvar e__46040__auto__ = e48084;\nif((e__46040__auto__ === cljs.core.match.backtrack)){\ntry{var _AMPERSAND_match_left__48076_0__48078 = cljs.core.nth.cljs$core$IFn$_invoke$arity$2(_AMPERSAND_match_left__48076,(0));\nif(cljs.core.keyword_identical_QMARK_(_AMPERSAND_match_left__48076_0__48078,new cljs.core.Keyword(null,\"!=\",\"!=\",-1841737356))){\nvar field = cljs.core.nth.cljs$core$IFn$_invoke$arity$2(_AMPERSAND_match_left__48076,(1));\nvar x = cljs.core.nth.cljs$core$IFn$_invoke$arity$2(_AMPERSAND_match_left__48076,(2));\nvar y = cljs.core.nth.cljs$core$IFn$_invoke$arity$2(_AMPERSAND_match_left__48076,(3));\nvar more = cljs.core.subvec.cljs$core$IFn$_invoke$arity$2(_AMPERSAND_match,(4));\nreturn cljs.core.apply.cljs$core$IFn$_invoke$arity$3(cljs.core.vector,new cljs.core.Keyword(null,\"and\",\"and\",-971899817),(function (){var iter__5523__auto__ = (function metabase$mbql$util$desugar_equals_and_not_equals_with_extra_args_$_replace_48074_$_iter__48086(s__48087){\nreturn (new cljs.core.LazySeq(null,(function (){\nvar s__48087__$1 = s__48087;\nwhile(true){\nvar temp__5804__auto__ = cljs.core.seq(s__48087__$1);\nif(temp__5804__auto__){\nvar s__48087__$2 = temp__5804__auto__;\nif(cljs.core.chunked_seq_QMARK_(s__48087__$2)){\nvar c__5521__auto__ = cljs.core.chunk_first(s__48087__$2);\nvar size__5522__auto__ = cljs.core.count(c__5521__auto__);\nvar b__48089 = cljs.core.chunk_buffer(size__5522__auto__);\nif((function (){var i__48088 = (0);\nwhile(true){\nif((i__48088 < size__5522__auto__)){\nvar x__$1 = cljs.core._nth(c__5521__auto__,i__48088);\ncljs.core.chunk_append(b__48089,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"!=\",\"!=\",-1841737356),field,x__$1], null));\n\nvar G__48431 = (i__48088 + (1));\ni__48088 = G__48431;\ncontinue;\n} else {\nreturn true;\n}\nbreak;\n}\n})()){\nreturn cljs.core.chunk_cons(cljs.core.chunk(b__48089),metabase$mbql$util$desugar_equals_and_not_equals_with_extra_args_$_replace_48074_$_iter__48086(cljs.core.chunk_rest(s__48087__$2)));\n} else {\nreturn cljs.core.chunk_cons(cljs.core.chunk(b__48089),null);\n}\n} else {\nvar x__$1 = cljs.core.first(s__48087__$2);\nreturn cljs.core.cons(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"!=\",\"!=\",-1841737356),field,x__$1], null),metabase$mbql$util$desugar_equals_and_not_equals_with_extra_args_$_replace_48074_$_iter__48086(cljs.core.rest(s__48087__$2)));\n}\n} else {\nreturn null;\n}\nbreak;\n}\n}),null,null));\n});\nreturn iter__5523__auto__(cljs.core.concat.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [x,y], null),more));\n})());\n} else {\nthrow cljs.core.match.backtrack;\n\n}\n}catch (e48085){if((e48085 instanceof Error)){\nvar e__46040__auto____$1 = e48085;\nif((e__46040__auto____$1 === cljs.core.match.backtrack)){\nthrow cljs.core.match.backtrack;\n} else {\nthrow e__46040__auto____$1;\n}\n} else {\nthrow e48085;\n\n}\n}} else {\nthrow e__46040__auto__;\n}\n} else {\nthrow e48084;\n\n}\n}} else {\nthrow cljs.core.match.backtrack;\n\n}\n}catch (e48083){if((e48083 instanceof Error)){\nvar e__46040__auto__ = e48083;\nif((e__46040__auto__ === cljs.core.match.backtrack)){\nthrow cljs.core.match.backtrack;\n} else {\nthrow e__46040__auto__;\n}\n} else {\nthrow e48083;\n\n}\n}} else {\nthrow cljs.core.match.backtrack;\n\n}\n}catch (e48082){if((e48082 instanceof Error)){\nvar e__46040__auto__ = e48082;\nif((e__46040__auto__ === cljs.core.match.backtrack)){\nreturn metabase.mbql.util.match.impl.replace_in_collection(metabase$mbql$util$desugar_equals_and_not_equals_with_extra_args_$_replace_48074,_AMPERSAND_parents,_AMPERSAND_match);\n} else {\nthrow e__46040__auto__;\n}\n} else {\nthrow e48082;\n\n}\n}})(cljs.core.PersistentVector.EMPTY,m);\n});\n/**\n * Replace `relative-datetime` clauses like `[:relative-datetime :current]` with `[:relative-datetime 0 <unit>]`.\n *   `<unit>` is inferred from the `:field` the clause is being compared to (if any), otherwise falls back to `default.`\n */\nmetabase.mbql.util.desugar_current_relative_datetime = (function metabase$mbql$util$desugar_current_relative_datetime(m){\nreturn (function metabase$mbql$util$desugar_current_relative_datetime_$_replace_48094(_AMPERSAND_parents,_AMPERSAND_match){\ntry{if(((cljs.core.vector_QMARK_(_AMPERSAND_match)) && ((cljs.core.count(_AMPERSAND_match) >= (2))))){\ntry{var _AMPERSAND_match_left__48096 = cljs.core.subvec.cljs$core$IFn$_invoke$arity$3(_AMPERSAND_match,(0),(2));\nif(((cljs.core.vector_QMARK_(_AMPERSAND_match_left__48096)) && ((cljs.core.count(_AMPERSAND_match_left__48096) === (2))))){\ntry{var _AMPERSAND_match_right__48097 = cljs.core.subvec.cljs$core$IFn$_invoke$arity$2(_AMPERSAND_match,(2));\nif(cljs.core.truth_(cljs.core.partial.cljs$core$IFn$_invoke$arity$2(cljs.core.some,cljs.core.partial.cljs$core$IFn$_invoke$arity$2(cljs.core._EQ_,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"relative-datetime\",\"relative-datetime\",1285169278),new cljs.core.Keyword(null,\"current\",\"current\",-1088038603)], null)))(_AMPERSAND_match_right__48097))){\nvar args = cljs.core.subvec.cljs$core$IFn$_invoke$arity$2(_AMPERSAND_match,(2));\nvar clause = cljs.core.nth.cljs$core$IFn$_invoke$arity$2(_AMPERSAND_match_left__48096,(0));\nvar field = cljs.core.nth.cljs$core$IFn$_invoke$arity$2(_AMPERSAND_match_left__48096,(1));\nvar temporal_unit = (function (){var or__5045__auto__ = cljs.core.first(cljs.core.seq(cljs.core.filter.cljs$core$IFn$_invoke$arity$2(cljs.core.some_QMARK_,(function metabase$mbql$util$desugar_current_relative_datetime_$_replace_48094_$_match_48103(_AMPERSAND_parents__$1,_AMPERSAND_match__$1){\ntry{if(((cljs.core.vector_QMARK_(_AMPERSAND_match__$1)) && ((cljs.core.count(_AMPERSAND_match__$1) === 3)))){\ntry{var _AMPERSAND_match_0__48106 = cljs.core.nth.cljs$core$IFn$_invoke$arity$2(_AMPERSAND_match__$1,(0));\nif(cljs.core.keyword_identical_QMARK_(_AMPERSAND_match_0__48106,new cljs.core.Keyword(null,\"field\",\"field\",-1302436500))){\ntry{var _AMPERSAND_match_2__48108 = cljs.core.nth.cljs$core$IFn$_invoke$arity$2(_AMPERSAND_match__$1,(2));\nif((((!((_AMPERSAND_match_2__48108 == null))))?(((((_AMPERSAND_match_2__48108.cljs$lang$protocol_mask$partition0$ & (256))) || ((cljs.core.PROTOCOL_SENTINEL === _AMPERSAND_match_2__48108.cljs$core$ILookup$))))?true:(((!_AMPERSAND_match_2__48108.cljs$lang$protocol_mask$partition0$))?cljs.core.native_satisfies_QMARK_(cljs.core.ILookup,_AMPERSAND_match_2__48108):false)):cljs.core.native_satisfies_QMARK_(cljs.core.ILookup,_AMPERSAND_match_2__48108))){\ntry{var _AMPERSAND_match_2__48108_temporal_unit__48111 = cljs.core.get.cljs$core$IFn$_invoke$arity$3(_AMPERSAND_match_2__48108,new cljs.core.Keyword(null,\"temporal-unit\",\"temporal-unit\",-1892306358),new cljs.core.Keyword(\"clojure.core.match\",\"not-found\",\"clojure.core.match/not-found\",1553053780));\nif(cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2(_AMPERSAND_match_2__48108_temporal_unit__48111,new cljs.core.Keyword(\"clojure.core.match\",\"not-found\",\"clojure.core.match/not-found\",1553053780))){\nvar temporal_unit = cljs.core.get.cljs$core$IFn$_invoke$arity$2(_AMPERSAND_match_2__48108,new cljs.core.Keyword(null,\"temporal-unit\",\"temporal-unit\",-1892306358));\nreturn new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [temporal_unit], null);\n} else {\nthrow cljs.core.match.backtrack;\n\n}\n}catch (e48116){if((e48116 instanceof Error)){\nvar e__46040__auto__ = e48116;\nif((e__46040__auto__ === cljs.core.match.backtrack)){\nthrow cljs.core.match.backtrack;\n} else {\nthrow e__46040__auto__;\n}\n} else {\nthrow e48116;\n\n}\n}} else {\nthrow cljs.core.match.backtrack;\n\n}\n}catch (e48114){if((e48114 instanceof Error)){\nvar e__46040__auto__ = e48114;\nif((e__46040__auto__ === cljs.core.match.backtrack)){\nthrow cljs.core.match.backtrack;\n} else {\nthrow e__46040__auto__;\n}\n} else {\nthrow e48114;\n\n}\n}} else {\nthrow cljs.core.match.backtrack;\n\n}\n}catch (e48113){if((e48113 instanceof Error)){\nvar e__46040__auto__ = e48113;\nif((e__46040__auto__ === cljs.core.match.backtrack)){\nthrow cljs.core.match.backtrack;\n} else {\nthrow e__46040__auto__;\n}\n} else {\nthrow e48113;\n\n}\n}} else {\nthrow cljs.core.match.backtrack;\n\n}\n}catch (e48112){if((e48112 instanceof Error)){\nvar e__46040__auto__ = e48112;\nif((e__46040__auto__ === cljs.core.match.backtrack)){\nreturn metabase.mbql.util.match.impl.match_in_collection(metabase$mbql$util$desugar_current_relative_datetime_$_replace_48094_$_match_48103,_AMPERSAND_parents__$1,_AMPERSAND_match__$1);\n} else {\nthrow e__46040__auto__;\n}\n} else {\nthrow e48112;\n\n}\n}})(cljs.core.PersistentVector.EMPTY,field))));\nif(cljs.core.truth_(or__5045__auto__)){\nreturn or__5045__auto__;\n} else {\nreturn new cljs.core.Keyword(null,\"default\",\"default\",-1987822328);\n}\n})();\nreturn cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [clause,field], null),(function metabase$mbql$util$desugar_current_relative_datetime_$_replace_48094_$_replace_48117(_AMPERSAND_parents__$1,_AMPERSAND_match__$1){\ntry{if(((cljs.core.vector_QMARK_(_AMPERSAND_match__$1)) && ((cljs.core.count(_AMPERSAND_match__$1) === 2)))){\ntry{var _AMPERSAND_match_0__48119 = cljs.core.nth.cljs$core$IFn$_invoke$arity$2(_AMPERSAND_match__$1,(0));\nif(cljs.core.keyword_identical_QMARK_(_AMPERSAND_match_0__48119,new cljs.core.Keyword(null,\"relative-datetime\",\"relative-datetime\",1285169278))){\ntry{var _AMPERSAND_match_1__48120 = cljs.core.nth.cljs$core$IFn$_invoke$arity$2(_AMPERSAND_match__$1,(1));\nif(cljs.core.keyword_identical_QMARK_(_AMPERSAND_match_1__48120,new cljs.core.Keyword(null,\"current\",\"current\",-1088038603))){\nreturn new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"relative-datetime\",\"relative-datetime\",1285169278),(0),temporal_unit], null);\n} else {\nthrow cljs.core.match.backtrack;\n\n}\n}catch (e48123){if((e48123 instanceof Error)){\nvar e__46040__auto__ = e48123;\nif((e__46040__auto__ === cljs.core.match.backtrack)){\nthrow cljs.core.match.backtrack;\n} else {\nthrow e__46040__auto__;\n}\n} else {\nthrow e48123;\n\n}\n}} else {\nthrow cljs.core.match.backtrack;\n\n}\n}catch (e48122){if((e48122 instanceof Error)){\nvar e__46040__auto__ = e48122;\nif((e__46040__auto__ === cljs.core.match.backtrack)){\nthrow cljs.core.match.backtrack;\n} else {\nthrow e__46040__auto__;\n}\n} else {\nthrow e48122;\n\n}\n}} else {\nthrow cljs.core.match.backtrack;\n\n}\n}catch (e48121){if((e48121 instanceof Error)){\nvar e__46040__auto__ = e48121;\nif((e__46040__auto__ === cljs.core.match.backtrack)){\nreturn metabase.mbql.util.match.impl.replace_in_collection(metabase$mbql$util$desugar_current_relative_datetime_$_replace_48094_$_replace_48117,_AMPERSAND_parents__$1,_AMPERSAND_match__$1);\n} else {\nthrow e__46040__auto__;\n}\n} else {\nthrow e48121;\n\n}\n}})(cljs.core.PersistentVector.EMPTY,args));\n} else {\nthrow cljs.core.match.backtrack;\n\n}\n}catch (e48102){if((e48102 instanceof Error)){\nvar e__46040__auto__ = e48102;\nif((e__46040__auto__ === cljs.core.match.backtrack)){\nthrow cljs.core.match.backtrack;\n} else {\nthrow e__46040__auto__;\n}\n} else {\nthrow e48102;\n\n}\n}} else {\nthrow cljs.core.match.backtrack;\n\n}\n}catch (e48101){if((e48101 instanceof Error)){\nvar e__46040__auto__ = e48101;\nif((e__46040__auto__ === cljs.core.match.backtrack)){\nthrow cljs.core.match.backtrack;\n} else {\nthrow e__46040__auto__;\n}\n} else {\nthrow e48101;\n\n}\n}} else {\nthrow cljs.core.match.backtrack;\n\n}\n}catch (e48100){if((e48100 instanceof Error)){\nvar e__46040__auto__ = e48100;\nif((e__46040__auto__ === cljs.core.match.backtrack)){\nreturn metabase.mbql.util.match.impl.replace_in_collection(metabase$mbql$util$desugar_current_relative_datetime_$_replace_48094,_AMPERSAND_parents,_AMPERSAND_match);\n} else {\nthrow e__46040__auto__;\n}\n} else {\nthrow e48100;\n\n}\n}})(cljs.core.PersistentVector.EMPTY,m);\n});\n/**\n * Mapping from the sugar syntax to extract datetime to the unit.\n */\nmetabase.mbql.util.temporal_extract_ops__GT_unit = cljs.core.PersistentHashMap.fromArrays([new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"get-quarter\",\"get-quarter\",1327778593),null], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"get-year\",\"get-year\",-936011274),null], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"get-week\",\"get-week\",-888059349),new cljs.core.Keyword(null,\"us\",\"us\",746429226)], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"get-week\",\"get-week\",-888059349),null], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"get-hour\",\"get-hour\",622714059),null], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"get-day\",\"get-day\",127568857),null], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"get-minute\",\"get-minute\",1468086343),null], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"get-month\",\"get-month\",-369374731),null], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"get-day-of-week\",\"get-day-of-week\",2010140752),null], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"get-week\",\"get-week\",-888059349),new cljs.core.Keyword(null,\"iso\",\"iso\",-1366207543)], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"get-week\",\"get-week\",-888059349),new cljs.core.Keyword(null,\"instance\",\"instance\",-2121349050)], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"get-second\",\"get-second\",-2065946318),null], null)],[new cljs.core.Keyword(null,\"quarter-of-year\",\"quarter-of-year\",-472803491),new cljs.core.Keyword(null,\"year-of-era\",\"year-of-era\",682445876),new cljs.core.Keyword(null,\"week-of-year-us\",\"week-of-year-us\",849423511),new cljs.core.Keyword(null,\"week-of-year-iso\",\"week-of-year-iso\",-1827744293),new cljs.core.Keyword(null,\"hour-of-day\",\"hour-of-day\",2086777099),new cljs.core.Keyword(null,\"day-of-month\",\"day-of-month\",-1096650288),new cljs.core.Keyword(null,\"minute-of-hour\",\"minute-of-hour\",1903220478),new cljs.core.Keyword(null,\"month-of-year\",\"month-of-year\",760756492),new cljs.core.Keyword(null,\"day-of-week\",\"day-of-week\",1639326729),new cljs.core.Keyword(null,\"week-of-year-iso\",\"week-of-year-iso\",-1827744293),new cljs.core.Keyword(null,\"week-of-year-instance\",\"week-of-year-instance\",2047974624),new cljs.core.Keyword(null,\"second-of-minute\",\"second-of-minute\",222734326)]);\nmetabase.mbql.util.temporal_extract_ops = cljs.core.set(cljs.core.map.cljs$core$IFn$_invoke$arity$2(cljs.core.first,cljs.core.keys(metabase.mbql.util.temporal_extract_ops__GT_unit)));\n/**\n * Replace datetime extractions clauses like `[:get-year field]` with `[:temporal-extract field :year]`.\n */\nmetabase.mbql.util.desugar_temporal_extract = (function metabase$mbql$util$desugar_temporal_extract(m){\nreturn (function metabase$mbql$util$desugar_temporal_extract_$_replace_48124(_AMPERSAND_parents,_AMPERSAND_match){\ntry{if(((cljs.core.vector_QMARK_(_AMPERSAND_match)) && ((cljs.core.count(_AMPERSAND_match) >= (2))))){\ntry{var _AMPERSAND_match_left__48126 = cljs.core.subvec.cljs$core$IFn$_invoke$arity$3(_AMPERSAND_match,(0),(2));\nif(((cljs.core.vector_QMARK_(_AMPERSAND_match_left__48126)) && ((cljs.core.count(_AMPERSAND_match_left__48126) === (2))))){\ntry{var _AMPERSAND_match_left__48126_0__48128 = cljs.core.nth.cljs$core$IFn$_invoke$arity$2(_AMPERSAND_match_left__48126,(0));\nif(cljs.core.truth_((metabase.mbql.util.temporal_extract_ops.cljs$core$IFn$_invoke$arity$1 ? metabase.mbql.util.temporal_extract_ops.cljs$core$IFn$_invoke$arity$1(_AMPERSAND_match_left__48126_0__48128) : metabase.mbql.util.temporal_extract_ops.call(null,_AMPERSAND_match_left__48126_0__48128)))){\nvar op = cljs.core.nth.cljs$core$IFn$_invoke$arity$2(_AMPERSAND_match_left__48126,(0));\nvar field = cljs.core.nth.cljs$core$IFn$_invoke$arity$2(_AMPERSAND_match_left__48126,(1));\nvar args = cljs.core.subvec.cljs$core$IFn$_invoke$arity$2(_AMPERSAND_match,(2));\nreturn new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"temporal-extract\",\"temporal-extract\",1781686405),field,(function (){var G__48133 = new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [op,cljs.core.first(args)], null);\nreturn (metabase.mbql.util.temporal_extract_ops__GT_unit.cljs$core$IFn$_invoke$arity$1 ? metabase.mbql.util.temporal_extract_ops__GT_unit.cljs$core$IFn$_invoke$arity$1(G__48133) : metabase.mbql.util.temporal_extract_ops__GT_unit.call(null,G__48133));\n})()], null);\n} else {\nthrow cljs.core.match.backtrack;\n\n}\n}catch (e48132){if((e48132 instanceof Error)){\nvar e__46040__auto__ = e48132;\nif((e__46040__auto__ === cljs.core.match.backtrack)){\nthrow cljs.core.match.backtrack;\n} else {\nthrow e__46040__auto__;\n}\n} else {\nthrow e48132;\n\n}\n}} else {\nthrow cljs.core.match.backtrack;\n\n}\n}catch (e48131){if((e48131 instanceof Error)){\nvar e__46040__auto__ = e48131;\nif((e__46040__auto__ === cljs.core.match.backtrack)){\nthrow cljs.core.match.backtrack;\n} else {\nthrow e__46040__auto__;\n}\n} else {\nthrow e48131;\n\n}\n}} else {\nthrow cljs.core.match.backtrack;\n\n}\n}catch (e48130){if((e48130 instanceof Error)){\nvar e__46040__auto__ = e48130;\nif((e__46040__auto__ === cljs.core.match.backtrack)){\nreturn metabase.mbql.util.match.impl.replace_in_collection(metabase$mbql$util$desugar_temporal_extract_$_replace_48124,_AMPERSAND_parents,_AMPERSAND_match);\n} else {\nthrow e__46040__auto__;\n}\n} else {\nthrow e48130;\n\n}\n}})(cljs.core.PersistentVector.EMPTY,m);\n});\nmetabase.mbql.util.desugar_divide_with_extra_args = (function metabase$mbql$util$desugar_divide_with_extra_args(expression){\nreturn (function metabase$mbql$util$desugar_divide_with_extra_args_$_replace_48134(_AMPERSAND_parents,_AMPERSAND_match){\ntry{if(((cljs.core.vector_QMARK_(_AMPERSAND_match)) && ((cljs.core.count(_AMPERSAND_match) >= (4))))){\ntry{var _AMPERSAND_match_left__48136 = cljs.core.subvec.cljs$core$IFn$_invoke$arity$3(_AMPERSAND_match,(0),(4));\nif(((cljs.core.vector_QMARK_(_AMPERSAND_match_left__48136)) && ((cljs.core.count(_AMPERSAND_match_left__48136) === (4))))){\ntry{var _AMPERSAND_match_left__48136_0__48138 = cljs.core.nth.cljs$core$IFn$_invoke$arity$2(_AMPERSAND_match_left__48136,(0));\nif(cljs.core.keyword_identical_QMARK_(_AMPERSAND_match_left__48136_0__48138,new cljs.core.Keyword(null,\"/\",\"/\",1282502798))){\nvar x = cljs.core.nth.cljs$core$IFn$_invoke$arity$2(_AMPERSAND_match_left__48136,(1));\nvar y = cljs.core.nth.cljs$core$IFn$_invoke$arity$2(_AMPERSAND_match_left__48136,(2));\nvar z = cljs.core.nth.cljs$core$IFn$_invoke$arity$2(_AMPERSAND_match_left__48136,(3));\nvar more = cljs.core.subvec.cljs$core$IFn$_invoke$arity$2(_AMPERSAND_match,(4));\nreturn metabase$mbql$util$desugar_divide_with_extra_args_$_replace_48134(_AMPERSAND_parents,cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"/\",\"/\",1282502798),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"/\",\"/\",1282502798),x,y], null)], null),cljs.core.cons(z,more)));\n} else {\nthrow cljs.core.match.backtrack;\n\n}\n}catch (e48144){if((e48144 instanceof Error)){\nvar e__46040__auto__ = e48144;\nif((e__46040__auto__ === cljs.core.match.backtrack)){\nthrow cljs.core.match.backtrack;\n} else {\nthrow e__46040__auto__;\n}\n} else {\nthrow e48144;\n\n}\n}} else {\nthrow cljs.core.match.backtrack;\n\n}\n}catch (e48143){if((e48143 instanceof Error)){\nvar e__46040__auto__ = e48143;\nif((e__46040__auto__ === cljs.core.match.backtrack)){\nthrow cljs.core.match.backtrack;\n} else {\nthrow e__46040__auto__;\n}\n} else {\nthrow e48143;\n\n}\n}} else {\nthrow cljs.core.match.backtrack;\n\n}\n}catch (e48142){if((e48142 instanceof Error)){\nvar e__46040__auto__ = e48142;\nif((e__46040__auto__ === cljs.core.match.backtrack)){\nreturn metabase.mbql.util.match.impl.replace_in_collection(metabase$mbql$util$desugar_divide_with_extra_args_$_replace_48134,_AMPERSAND_parents,_AMPERSAND_match);\n} else {\nthrow e__46040__auto__;\n}\n} else {\nthrow e48142;\n\n}\n}})(cljs.core.PersistentVector.EMPTY,expression);\n});\nvar output_schema48145_48440 = metabase.mbql.schema.FieldOrExpressionDef;\nvar input_schema48147_48441 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [schema.core.one(metabase.mbql.schema.FieldOrExpressionDef,cljs.core.with_meta(new cljs.core.Symbol(null,\"expression\",\"expression\",1842843403,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"schema\",\"schema\",-1582001791),new cljs.core.Symbol(\"mbql.s\",\"FieldOrExpressionDef\",\"mbql.s/FieldOrExpressionDef\",-1851966074,null)], null)))], null);\nvar ret__34795__auto___48442 = /**\n * Inputs: [expression :- mbql.s/FieldOrExpressionDef]\n *   Returns: mbql.s/FieldOrExpressionDef\n * \n *   Rewrite various 'syntactic sugar' expressions like `:/` with more than two args into something simpler for drivers\n *   to compile.\n */\nmetabase.mbql.util.desugar_expression = (function metabase$mbql$util$desugar_expression(expression){\nreturn metabase.mbql.util.desugar_divide_with_extra_args(expression);\n});\nschema.utils.declare_class_schema_BANG_(schema.utils.fn_schema_bearer(metabase.mbql.util.desugar_expression),schema.core.__GT_FnSchema(output_schema48145_48440,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [input_schema48147_48441], null)));\n\nmetabase.mbql.util.maybe_desugar_expression = (function metabase$mbql$util$maybe_desugar_expression(clause){\nvar G__48150 = clause;\nif(cljs.core.truth_(metabase.mbql.predicates.FieldOrExpressionDef_QMARK_(clause))){\nreturn metabase.mbql.util.desugar_expression(G__48150);\n} else {\nreturn G__48150;\n}\n});\nvar output_schema48151_48443 = metabase.mbql.schema.Filter;\nvar input_schema48153_48444 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [schema.core.one(metabase.mbql.schema.Filter,cljs.core.with_meta(new cljs.core.Symbol(null,\"filter-clause\",\"filter-clause\",-1237814159,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"schema\",\"schema\",-1582001791),new cljs.core.Symbol(\"mbql.s\",\"Filter\",\"mbql.s/Filter\",650308569,null)], null)))], null);\nvar ret__34795__auto___48445 = /**\n * Inputs: [filter-clause :- mbql.s/Filter]\n *   Returns: mbql.s/Filter\n * \n *   Rewrite various 'syntatic sugar' filter clauses like `:time-interval` and `:inside` as simpler, logically\n *   equivalent clauses. This can be used to simplify the number of filter clauses that need to be supported by anything\n *   that needs to enumerate all the possible filter types (such as driver query processor implementations, or the\n *   implementation [[negate-filter-clause]] below.)\n */\nmetabase.mbql.util.desugar_filter_clause = (function metabase$mbql$util$desugar_filter_clause(filter_clause){\nreturn metabase.mbql.util.maybe_desugar_expression(metabase.mbql.util.desugar_temporal_extract(metabase.mbql.util.simplify_compound_filter(metabase.mbql.util.desugar_inside(metabase.mbql.util.desugar_is_empty_and_not_empty(metabase.mbql.util.desugar_is_null_and_not_null(metabase.mbql.util.desugar_time_interval(metabase.mbql.util.desugar_does_not_contain(metabase.mbql.util.desugar_equals_and_not_equals_with_extra_args(metabase.mbql.util.desugar_current_relative_datetime(filter_clause))))))))));\n});\nschema.utils.declare_class_schema_BANG_(schema.utils.fn_schema_bearer(metabase.mbql.util.desugar_filter_clause),schema.core.__GT_FnSchema(output_schema48151_48443,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [input_schema48153_48444], null)));\n\nmetabase.mbql.util.negate_STAR_ = (function (){var method_table__5642__auto__ = cljs.core.atom.cljs$core$IFn$_invoke$arity$1(cljs.core.PersistentArrayMap.EMPTY);\nvar prefer_table__5643__auto__ = cljs.core.atom.cljs$core$IFn$_invoke$arity$1(cljs.core.PersistentArrayMap.EMPTY);\nvar method_cache__5644__auto__ = cljs.core.atom.cljs$core$IFn$_invoke$arity$1(cljs.core.PersistentArrayMap.EMPTY);\nvar cached_hierarchy__5645__auto__ = cljs.core.atom.cljs$core$IFn$_invoke$arity$1(cljs.core.PersistentArrayMap.EMPTY);\nvar hierarchy__5646__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$3(cljs.core.PersistentArrayMap.EMPTY,new cljs.core.Keyword(null,\"hierarchy\",\"hierarchy\",-1053470341),(function (){var fexpr__48156 = cljs.core.get_global_hierarchy;\nreturn (fexpr__48156.cljs$core$IFn$_invoke$arity$0 ? fexpr__48156.cljs$core$IFn$_invoke$arity$0() : fexpr__48156.call(null));\n})());\nreturn (new cljs.core.MultiFn(cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(\"metabase.mbql.util\",\"negate*\"),cljs.core.first,new cljs.core.Keyword(null,\"default\",\"default\",-1987822328),hierarchy__5646__auto__,method_table__5642__auto__,prefer_table__5643__auto__,method_cache__5644__auto__,cached_hierarchy__5645__auto__));\n})();\nmetabase.mbql.util.negate_STAR_.cljs$core$IMultiFn$_add_method$arity$3(null,new cljs.core.Keyword(null,\"not\",\"not\",-595976884),(function (p__48157){\nvar vec__48158 = p__48157;\nvar _ = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__48158,(0),null);\nvar subclause = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__48158,(1),null);\nreturn subclause;\n}));\nmetabase.mbql.util.negate_STAR_.cljs$core$IMultiFn$_add_method$arity$3(null,new cljs.core.Keyword(null,\"and\",\"and\",-971899817),(function (p__48161){\nvar vec__48162 = p__48161;\nvar seq__48163 = cljs.core.seq(vec__48162);\nvar first__48164 = cljs.core.first(seq__48163);\nvar seq__48163__$1 = cljs.core.next(seq__48163);\nvar _ = first__48164;\nvar subclauses = seq__48163__$1;\nreturn cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"or\",\"or\",235744169)], null),cljs.core.map.cljs$core$IFn$_invoke$arity$2(metabase.mbql.util.negate_STAR_,subclauses));\n}));\nmetabase.mbql.util.negate_STAR_.cljs$core$IMultiFn$_add_method$arity$3(null,new cljs.core.Keyword(null,\"or\",\"or\",235744169),(function (p__48165){\nvar vec__48166 = p__48165;\nvar seq__48167 = cljs.core.seq(vec__48166);\nvar first__48168 = cljs.core.first(seq__48167);\nvar seq__48167__$1 = cljs.core.next(seq__48167);\nvar _ = first__48168;\nvar subclauses = seq__48167__$1;\nreturn cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"and\",\"and\",-971899817)], null),cljs.core.map.cljs$core$IFn$_invoke$arity$2(metabase.mbql.util.negate_STAR_,subclauses));\n}));\nmetabase.mbql.util.negate_STAR_.cljs$core$IMultiFn$_add_method$arity$3(null,new cljs.core.Keyword(null,\"=\",\"=\",1152933628),(function (p__48169){\nvar vec__48170 = p__48169;\nvar _ = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__48170,(0),null);\nvar field = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__48170,(1),null);\nvar value = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__48170,(2),null);\nreturn new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"!=\",\"!=\",-1841737356),field,value], null);\n}));\nmetabase.mbql.util.negate_STAR_.cljs$core$IMultiFn$_add_method$arity$3(null,new cljs.core.Keyword(null,\"!=\",\"!=\",-1841737356),(function (p__48173){\nvar vec__48174 = p__48173;\nvar _ = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__48174,(0),null);\nvar field = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__48174,(1),null);\nvar value = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__48174,(2),null);\nreturn new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"=\",\"=\",1152933628),field,value], null);\n}));\nmetabase.mbql.util.negate_STAR_.cljs$core$IMultiFn$_add_method$arity$3(null,new cljs.core.Keyword(null,\">\",\">\",-555517146),(function (p__48177){\nvar vec__48178 = p__48177;\nvar _ = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__48178,(0),null);\nvar field = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__48178,(1),null);\nvar value = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__48178,(2),null);\nreturn new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"<=\",\"<=\",-395636158),field,value], null);\n}));\nmetabase.mbql.util.negate_STAR_.cljs$core$IMultiFn$_add_method$arity$3(null,new cljs.core.Keyword(null,\"<\",\"<\",-646864291),(function (p__48181){\nvar vec__48182 = p__48181;\nvar _ = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__48182,(0),null);\nvar field = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__48182,(1),null);\nvar value = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__48182,(2),null);\nreturn new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\">=\",\">=\",-623615505),field,value], null);\n}));\nmetabase.mbql.util.negate_STAR_.cljs$core$IMultiFn$_add_method$arity$3(null,new cljs.core.Keyword(null,\">=\",\">=\",-623615505),(function (p__48185){\nvar vec__48186 = p__48185;\nvar _ = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__48186,(0),null);\nvar field = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__48186,(1),null);\nvar value = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__48186,(2),null);\nreturn new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"<\",\"<\",-646864291),field,value], null);\n}));\nmetabase.mbql.util.negate_STAR_.cljs$core$IMultiFn$_add_method$arity$3(null,new cljs.core.Keyword(null,\"<=\",\"<=\",-395636158),(function (p__48189){\nvar vec__48190 = p__48189;\nvar _ = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__48190,(0),null);\nvar field = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__48190,(1),null);\nvar value = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__48190,(2),null);\nreturn new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\">\",\">\",-555517146),field,value], null);\n}));\nmetabase.mbql.util.negate_STAR_.cljs$core$IMultiFn$_add_method$arity$3(null,new cljs.core.Keyword(null,\"between\",\"between\",1131099276),(function (p__48193){\nvar vec__48194 = p__48193;\nvar _ = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__48194,(0),null);\nvar field = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__48194,(1),null);\nvar min = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__48194,(2),null);\nvar max = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__48194,(3),null);\nreturn new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"or\",\"or\",235744169),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"<\",\"<\",-646864291),field,min], null),new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\">\",\">\",-555517146),field,max], null)], null);\n}));\nmetabase.mbql.util.negate_STAR_.cljs$core$IMultiFn$_add_method$arity$3(null,new cljs.core.Keyword(null,\"contains\",\"contains\",676899812),(function (clause){\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"not\",\"not\",-595976884),clause], null);\n}));\nmetabase.mbql.util.negate_STAR_.cljs$core$IMultiFn$_add_method$arity$3(null,new cljs.core.Keyword(null,\"starts-with\",\"starts-with\",366503009),(function (clause){\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"not\",\"not\",-595976884),clause], null);\n}));\nmetabase.mbql.util.negate_STAR_.cljs$core$IMultiFn$_add_method$arity$3(null,new cljs.core.Keyword(null,\"ends-with\",\"ends-with\",-456791011),(function (clause){\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"not\",\"not\",-595976884),clause], null);\n}));\nvar output_schema48197_48446 = metabase.mbql.schema.Filter;\nvar input_schema48199_48447 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [schema.core.one(metabase.mbql.schema.Filter,cljs.core.with_meta(new cljs.core.Symbol(null,\"filter-clause\",\"filter-clause\",-1237814159,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"schema\",\"schema\",-1582001791),new cljs.core.Symbol(\"mbql.s\",\"Filter\",\"mbql.s/Filter\",650308569,null)], null)))], null);\nvar ret__34795__auto___48449 = /**\n * Inputs: [filter-clause :- mbql.s/Filter]\n *   Returns: mbql.s/Filter\n * \n *   Return the logical compliment of an MBQL filter clause, generally without using `:not` (except for the string\n *   filter clause types). Useful for generating highly optimized filter clauses and for drivers that do not support\n *   top-level `:not` filter clauses.\n */\nmetabase.mbql.util.negate_filter_clause = (function metabase$mbql$util$negate_filter_clause(filter_clause){\nreturn metabase.mbql.util.simplify_compound_filter(metabase.mbql.util.negate_STAR_.cljs$core$IFn$_invoke$arity$1(metabase.mbql.util.desugar_filter_clause(filter_clause)));\n});\nschema.utils.declare_class_schema_BANG_(schema.utils.fn_schema_bearer(metabase.mbql.util.negate_filter_clause),schema.core.__GT_FnSchema(output_schema48197_48446,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [input_schema48199_48447], null)));\n\nvar output_schema48202_48450 = schema.core.maybe(metabase.mbql.schema.helpers.IntGreaterThanZero);\nvar input_schema48204_48451 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [schema.core.one(schema.core.Any,new cljs.core.Symbol(null,\"arg0\",\"arg0\",-1024593414,null))], null);\nvar ret__34795__auto___48452 = /**\n * Inputs: [{{source-table-id :source-table, source-query :source-query} :query, query-type :type, :as query}]\n *   Returns: (s/maybe schema.helpers/IntGreaterThanZero)\n * \n *   Return the source Table ID associated with `query`, if applicable; handles nested queries as well. If `query` is\n *   `nil`, returns `nil`.\n * \n *   Throws an Exception when it encounters a unresolved source query (i.e., the `:source-table \"card__id\"`\n *   form), because it cannot return an accurate result for a query that has not yet been preprocessed.\n */\nmetabase.mbql.util.query__GT_source_table_id = (function metabase$mbql$util$query__GT_source_table_id(p__48207){\nwhile(true){\nvar map__48208 = p__48207;\nvar map__48208__$1 = cljs.core.__destructure_map(map__48208);\nvar query = map__48208__$1;\nvar map__48209 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__48208__$1,new cljs.core.Keyword(null,\"query\",\"query\",-1288509510));\nvar map__48209__$1 = cljs.core.__destructure_map(map__48209);\nvar source_table_id = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__48209__$1,new cljs.core.Keyword(null,\"source-table\",\"source-table\",-225307692));\nvar source_query = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__48209__$1,new cljs.core.Keyword(null,\"source-query\",\"source-query\",198004422));\nvar query_type = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__48208__$1,new cljs.core.Keyword(null,\"type\",\"type\",1174270348));\nif(cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2(query_type,new cljs.core.Keyword(null,\"query\",\"query\",-1288509510))){\nreturn null;\n} else {\nif(cljs.core.truth_((function (){var and__5043__auto__ = (source_table_id == null);\nif(and__5043__auto__){\nvar and__5043__auto____$1 = source_query;\nif(cljs.core.truth_(and__5043__auto____$1)){\nreturn new cljs.core.Keyword(null,\"native\",\"native\",-613060878).cljs$core$IFn$_invoke$arity$1(source_query);\n} else {\nreturn and__5043__auto____$1;\n}\n} else {\nreturn and__5043__auto__;\n}\n})())){\nreturn null;\n} else {\nif(cljs.core.truth_((function (){var and__5043__auto__ = (source_table_id == null);\nif(and__5043__auto__){\nreturn source_query;\n} else {\nreturn and__5043__auto__;\n}\n})())){\nvar G__48453 = cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(query,new cljs.core.Keyword(null,\"query\",\"query\",-1288509510),source_query);\np__48207 = G__48453;\ncontinue;\n} else {\nif(cljs.core.truth_(cljs.core.every_pred.cljs$core$IFn$_invoke$arity$2(cljs.core.string_QMARK_,cljs.core.partial.cljs$core$IFn$_invoke$arity$2(cljs.core.re_matches,metabase.mbql.schema.source_table_card_id_regex))(source_table_id))){\nthrow cljs.core.ex_info.cljs$core$IFn$_invoke$arity$2(metabase.shared.util.i18n.js_i18n(\"Error: query''s source query has not been resolved. You probably need to `preprocess` the query first.\"),cljs.core.PersistentArrayMap.EMPTY);\n} else {\nreturn source_table_id;\n\n}\n}\n}\n}\nbreak;\n}\n});\nschema.utils.declare_class_schema_BANG_(schema.utils.fn_schema_bearer(metabase.mbql.util.query__GT_source_table_id),schema.core.__GT_FnSchema(output_schema48202_48450,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [input_schema48204_48451], null)));\n\nvar output_schema48210_48454 = schema.core.maybe(metabase.mbql.schema.helpers.IntGreaterThanZero);\nvar input_schema48212_48455 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [schema.core.one(schema.core.Any,cljs.core.with_meta(new cljs.core.Symbol(null,\"join\",\"join\",881669637,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"schema\",\"schema\",-1582001791),new cljs.core.Symbol(\"schema.core\",\"Any\",\"schema.core/Any\",-1891898271,null)], null)))], null);\nvar ret__34795__auto___48457 = /**\n * Inputs: [join]\n *   Returns: (s/maybe schema.helpers/IntGreaterThanZero)\n * \n *   Like `query->source-table-id`, but for a join.\n */\nmetabase.mbql.util.join__GT_source_table_id = (function metabase$mbql$util$join__GT_source_table_id(join){\nreturn metabase.mbql.util.query__GT_source_table_id(new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"type\",\"type\",1174270348),new cljs.core.Keyword(null,\"query\",\"query\",-1288509510),new cljs.core.Keyword(null,\"query\",\"query\",-1288509510),join], null));\n});\nschema.utils.declare_class_schema_BANG_(schema.utils.fn_schema_bearer(metabase.mbql.util.join__GT_source_table_id),schema.core.__GT_FnSchema(output_schema48210_48454,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [input_schema48212_48455], null)));\n\nvar output_schema48215_48458 = metabase.mbql.schema.MBQLQuery;\nvar input_schema48217_48459 = new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [schema.core.one(metabase.mbql.schema.MBQLQuery,cljs.core.with_meta(new cljs.core.Symbol(null,\"inner-query\",\"inner-query\",-907556093,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"schema\",\"schema\",-1582001791),new cljs.core.Symbol(\"mbql.s\",\"MBQLQuery\",\"mbql.s/MBQLQuery\",-332777720,null)], null))),schema.core.one(metabase.mbql.schema.OrderBy,new cljs.core.Symbol(null,\"arg1\",\"arg1\",-1702536411,null))], null);\nvar ret__34795__auto___48460 = /**\n * Inputs: [inner-query :- mbql.s/MBQLQuery [_ [_ id-or-name :as _field] :as order-by-clause] :- mbql.s/OrderBy]\n *   Returns: mbql.s/MBQLQuery\n * \n *   Add a new `:order-by` clause to an MBQL `inner-query`. If the new order-by clause references a Field that is\n *   already being used in another order-by clause, this function does nothing.\n */\nmetabase.mbql.util.add_order_by_clause = (function metabase$mbql$util$add_order_by_clause(inner_query,p__48220){\nvar vec__48221 = p__48220;\nvar _ = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__48221,(0),null);\nvar vec__48224 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__48221,(1),null);\nvar ___$1 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__48224,(0),null);\nvar id_or_name = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__48224,(1),null);\nvar _field = vec__48224;\nvar order_by_clause = vec__48221;\nvar existing_fields = cljs.core.set((function (){var iter__5523__auto__ = (function metabase$mbql$util$add_order_by_clause_$_iter__48227(s__48228){\nreturn (new cljs.core.LazySeq(null,(function (){\nvar s__48228__$1 = s__48228;\nwhile(true){\nvar temp__5804__auto__ = cljs.core.seq(s__48228__$1);\nif(temp__5804__auto__){\nvar s__48228__$2 = temp__5804__auto__;\nif(cljs.core.chunked_seq_QMARK_(s__48228__$2)){\nvar c__5521__auto__ = cljs.core.chunk_first(s__48228__$2);\nvar size__5522__auto__ = cljs.core.count(c__5521__auto__);\nvar b__48230 = cljs.core.chunk_buffer(size__5522__auto__);\nif((function (){var i__48229 = (0);\nwhile(true){\nif((i__48229 < size__5522__auto__)){\nvar vec__48231 = cljs.core._nth(c__5521__auto__,i__48229);\nvar ___$2 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__48231,(0),null);\nvar vec__48234 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__48231,(1),null);\nvar ___$3 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__48234,(0),null);\nvar id_or_name__$1 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__48234,(1),null);\ncljs.core.chunk_append(b__48230,id_or_name__$1);\n\nvar G__48461 = (i__48229 + (1));\ni__48229 = G__48461;\ncontinue;\n} else {\nreturn true;\n}\nbreak;\n}\n})()){\nreturn cljs.core.chunk_cons(cljs.core.chunk(b__48230),metabase$mbql$util$add_order_by_clause_$_iter__48227(cljs.core.chunk_rest(s__48228__$2)));\n} else {\nreturn cljs.core.chunk_cons(cljs.core.chunk(b__48230),null);\n}\n} else {\nvar vec__48237 = cljs.core.first(s__48228__$2);\nvar ___$2 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__48237,(0),null);\nvar vec__48240 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__48237,(1),null);\nvar ___$3 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__48240,(0),null);\nvar id_or_name__$1 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__48240,(1),null);\nreturn cljs.core.cons(id_or_name__$1,metabase$mbql$util$add_order_by_clause_$_iter__48227(cljs.core.rest(s__48228__$2)));\n}\n} else {\nreturn null;\n}\nbreak;\n}\n}),null,null));\n});\nreturn iter__5523__auto__(new cljs.core.Keyword(null,\"order-by\",\"order-by\",1527318070).cljs$core$IFn$_invoke$arity$1(inner_query));\n})());\nif(cljs.core.truth_((existing_fields.cljs$core$IFn$_invoke$arity$1 ? existing_fields.cljs$core$IFn$_invoke$arity$1(id_or_name) : existing_fields.call(null,id_or_name)))){\nreturn inner_query;\n} else {\nreturn cljs.core.update.cljs$core$IFn$_invoke$arity$4(inner_query,new cljs.core.Keyword(null,\"order-by\",\"order-by\",1527318070),cljs.core.comp.cljs$core$IFn$_invoke$arity$3(cljs.core.vec,cljs.core.distinct,cljs.core.conj),order_by_clause);\n}\n});\nschema.utils.declare_class_schema_BANG_(schema.utils.fn_schema_bearer(metabase.mbql.util.add_order_by_clause),schema.core.__GT_FnSchema(output_schema48215_48458,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [input_schema48217_48459], null)));\n\n/**\n * Dispatch function perfect for use with multimethods that dispatch off elements of an MBQL query. If `x` is an MBQL\n *   clause, dispatches off the clause name; otherwise dispatches off `x`'s class.\n */\nmetabase.mbql.util.dispatch_by_clause_name_or_class = (function metabase$mbql$util$dispatch_by_clause_name_or_class(var_args){\nvar G__48244 = arguments.length;\nswitch (G__48244) {\ncase 1:\nreturn metabase.mbql.util.dispatch_by_clause_name_or_class.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\n\nbreak;\ncase 2:\nreturn metabase.mbql.util.dispatch_by_clause_name_or_class.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\n(metabase.mbql.util.dispatch_by_clause_name_or_class.cljs$core$IFn$_invoke$arity$1 = (function (x){\nif(metabase.mbql.util.mbql_clause_QMARK_(x)){\nreturn cljs.core.first(x);\n} else {\nreturn cljs.core.type(x);\n}\n}));\n\n(metabase.mbql.util.dispatch_by_clause_name_or_class.cljs$core$IFn$_invoke$arity$2 = (function (x,_){\nreturn metabase.mbql.util.dispatch_by_clause_name_or_class.cljs$core$IFn$_invoke$arity$1(x);\n}));\n\n(metabase.mbql.util.dispatch_by_clause_name_or_class.cljs$lang$maxFixedArity = 2);\n\nvar output_schema48245_48463 = metabase.mbql.schema.FieldOrExpressionDef;\nvar input_schema48247_48464 = new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [schema.core.one(schema.core.Any,cljs.core.with_meta(new cljs.core.Symbol(null,\"inner-query\",\"inner-query\",-907556093,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"schema\",\"schema\",-1582001791),new cljs.core.Symbol(\"schema.core\",\"Any\",\"schema.core/Any\",-1891898271,null)], null))),schema.core.one(schema.core.cond_pre.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([schema.core.Keyword,metabase.mbql.schema.helpers.NonBlankString], 0)),cljs.core.with_meta(new cljs.core.Symbol(null,\"expression-name\",\"expression-name\",-157919182,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"schema\",\"schema\",-1582001791),cljs.core.list(new cljs.core.Symbol(\"s\",\"cond-pre\",\"s/cond-pre\",-923707600,null),new cljs.core.Symbol(\"s\",\"Keyword\",\"s/Keyword\",-850066400,null),new cljs.core.Symbol(\"schema.helpers\",\"NonBlankString\",\"schema.helpers/NonBlankString\",1984244415,null))], null)))], null);\nvar ret__34795__auto___48465 = /**\n * Inputs: [inner-query expression-name :- (s/cond-pre s/Keyword schema.helpers/NonBlankString)]\n *   Returns: mbql.s/FieldOrExpressionDef\n * \n *   Return the `Expression` referenced by a given `expression-name`.\n */\nmetabase.mbql.util.expression_with_name = (function metabase$mbql$util$expression_with_name(inner_query,expression_name){\nvar allowed_names = new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [metabase.mbql.util.qualified_name(expression_name),cljs.core.keyword.cljs$core$IFn$_invoke$arity$1(expression_name)], null);\nvar G__48251 = inner_query;\nvar map__48252 = G__48251;\nvar map__48252__$1 = cljs.core.__destructure_map(map__48252);\nvar expressions = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__48252__$1,new cljs.core.Keyword(null,\"expressions\",\"expressions\",255689909));\nvar source_query = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__48252__$1,new cljs.core.Keyword(null,\"source-query\",\"source-query\",198004422));\nvar found = cljs.core.PersistentHashSet.EMPTY;\nvar G__48251__$1 = G__48251;\nvar found__$1 = found;\nwhile(true){\nvar map__48254 = G__48251__$1;\nvar map__48254__$1 = cljs.core.__destructure_map(map__48254);\nvar expressions__$1 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__48254__$1,new cljs.core.Keyword(null,\"expressions\",\"expressions\",255689909));\nvar source_query__$1 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__48254__$1,new cljs.core.Keyword(null,\"source-query\",\"source-query\",198004422));\nvar found__$2 = found__$1;\nvar or__5045__auto__ = cljs.core.some(cljs.core.partial.cljs$core$IFn$_invoke$arity$2(cljs.core.get,expressions__$1),allowed_names);\nif(cljs.core.truth_(or__5045__auto__)){\nreturn or__5045__auto__;\n} else {\nvar found__$3 = cljs.core.into.cljs$core$IFn$_invoke$arity$2(found__$2,cljs.core.keys(expressions__$1));\nif(cljs.core.truth_(source_query__$1)){\nvar G__48467 = source_query__$1;\nvar G__48468 = found__$3;\nG__48251__$1 = G__48467;\nfound__$1 = G__48468;\ncontinue;\n} else {\nthrow cljs.core.ex_info.cljs$core$IFn$_invoke$arity$2(metabase.shared.util.i18n.js_i18n.cljs$core$IFn$_invoke$arity$variadic(\"No expression named ''{0}''\",cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([metabase.mbql.util.qualified_name(expression_name)], 0)),new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null,\"type\",\"type\",1174270348),new cljs.core.Keyword(null,\"invalid-query\",\"invalid-query\",-1009703371),new cljs.core.Keyword(null,\"expression-name\",\"expression-name\",-1798450709),expression_name,new cljs.core.Keyword(null,\"tried\",\"tried\",-1728444308),allowed_names,new cljs.core.Keyword(null,\"found\",\"found\",-584700170),found__$3], null));\n}\n}\nbreak;\n}\n});\nschema.utils.declare_class_schema_BANG_(schema.utils.fn_schema_bearer(metabase.mbql.util.expression_with_name),schema.core.__GT_FnSchema(output_schema48245_48463,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [input_schema48247_48464], null)));\n\nvar output_schema48255_48469 = metabase.mbql.schema.Aggregation;\nvar input_schema48257_48470 = new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [schema.core.one(schema.core.Any,cljs.core.with_meta(new cljs.core.Symbol(null,\"query\",\"query\",352022017,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"schema\",\"schema\",-1582001791),new cljs.core.Symbol(\"schema.core\",\"Any\",\"schema.core/Any\",-1891898271,null)], null))),schema.core.one(schema.core.Any,cljs.core.with_meta(new cljs.core.Symbol(null,\"index\",\"index\",108845612,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"schema\",\"schema\",-1582001791),new cljs.core.Symbol(\"schema.core\",\"Any\",\"schema.core/Any\",-1891898271,null)], null)))], null);\nvar input_schema48260_48471 = new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [schema.core.one(metabase.mbql.schema.Query,cljs.core.with_meta(new cljs.core.Symbol(null,\"query\",\"query\",352022017,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"schema\",\"schema\",-1582001791),new cljs.core.Symbol(\"mbql.s\",\"Query\",\"mbql.s/Query\",1061827921,null)], null))),schema.core.one(metabase.mbql.schema.helpers.IntGreaterThanOrEqualToZero,cljs.core.with_meta(new cljs.core.Symbol(null,\"index\",\"index\",108845612,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"schema\",\"schema\",-1582001791),new cljs.core.Symbol(\"schema.helpers\",\"IntGreaterThanOrEqualToZero\",\"schema.helpers/IntGreaterThanOrEqualToZero\",-1218348852,null)], null))),schema.core.one(metabase.mbql.schema.helpers.IntGreaterThanOrEqualToZero,cljs.core.with_meta(new cljs.core.Symbol(null,\"nesting-level\",\"nesting-level\",-2057556677,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"schema\",\"schema\",-1582001791),new cljs.core.Symbol(\"schema.helpers\",\"IntGreaterThanOrEqualToZero\",\"schema.helpers/IntGreaterThanOrEqualToZero\",-1218348852,null)], null)))], null);\nvar ret__34795__auto___48472 = (function (){\n/**\n * Inputs: ([query index] [query :- mbql.s/Query index :- schema.helpers/IntGreaterThanOrEqualToZero nesting-level :- schema.helpers/IntGreaterThanOrEqualToZero])\n *   Returns: mbql.s/Aggregation\n * \n *   Fetch the aggregation at index. This is intended to power aggregate field references (e.g. [:aggregation 0]).\n * This also handles nested queries, which could be potentially ambiguous if multiple levels had aggregations. To\n * support nested queries, you'll need to keep tract of how many `:source-query`s deep you've traveled; pass in this\n * number to as optional arg `nesting-level` to make sure you reference aggregations at the right level of nesting.\n */\nmetabase.mbql.util.aggregation_at_index = (function metabase$mbql$util$aggregation_at_index(var_args){\nvar G__48264 = arguments.length;\nswitch (G__48264) {\ncase 2:\nreturn metabase.mbql.util.aggregation_at_index.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ncase 3:\nreturn metabase.mbql.util.aggregation_at_index.cljs$core$IFn$_invoke$arity$3((arguments[(0)]),(arguments[(1)]),(arguments[(2)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\n(metabase.mbql.util.aggregation_at_index.cljs$core$IFn$_invoke$arity$2 = (function (query,index){\nreturn metabase.mbql.util.aggregation_at_index.cljs$core$IFn$_invoke$arity$3(query,index,(0));\n}));\n\n(metabase.mbql.util.aggregation_at_index.cljs$core$IFn$_invoke$arity$3 = (function (query,index,nesting_level){\nwhile(true){\nif((nesting_level === (0))){\nvar or__5045__auto__ = cljs.core.nth.cljs$core$IFn$_invoke$arity$2(cljs.core.get_in.cljs$core$IFn$_invoke$arity$2(query,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"query\",\"query\",-1288509510),new cljs.core.Keyword(null,\"aggregation\",\"aggregation\",1597476696)], null)),index);\nif(cljs.core.truth_(or__5045__auto__)){\nreturn or__5045__auto__;\n} else {\nthrow cljs.core.ex_info.cljs$core$IFn$_invoke$arity$2(metabase.shared.util.i18n.js_i18n.cljs$core$IFn$_invoke$arity$variadic(\"No aggregation at index: {0}\",cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([index], 0)),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"index\",\"index\",-1531685915),index], null));\n}\n} else {\nvar G__48474 = new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"query\",\"query\",-1288509510),cljs.core.get_in.cljs$core$IFn$_invoke$arity$2(query,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"query\",\"query\",-1288509510),new cljs.core.Keyword(null,\"source-query\",\"source-query\",198004422)], null))], null);\nvar G__48475 = index;\nvar G__48476 = (nesting_level - (1));\nquery = G__48474;\nindex = G__48475;\nnesting_level = G__48476;\ncontinue;\n}\nbreak;\n}\n}));\n\n(metabase.mbql.util.aggregation_at_index.cljs$lang$maxFixedArity = 3);\n\nreturn null;\n})()\n;\nschema.utils.declare_class_schema_BANG_(schema.utils.fn_schema_bearer(metabase.mbql.util.aggregation_at_index),schema.core.make_fn_schema(output_schema48255_48469,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [input_schema48257_48470,input_schema48260_48471], null)));\n\n/**\n * Is this ID (presumably of a Metric or Segment) a GA one?\n */\nmetabase.mbql.util.ga_id_QMARK_ = (function metabase$mbql$util$ga_id_QMARK_(id){\nreturn cljs.core.boolean$((cljs.core.truth_(cljs.core.some_fn.cljs$core$IFn$_invoke$arity$2(cljs.core.string_QMARK_,cljs.core.keyword_QMARK_)(id))?cljs.core.re_find(/^ga(id)?:/,cljs.core.name(id)):null));\n});\n/**\n * Is this metric or segment clause not a Dashboard Metric or Segment, but rather a GA one? E.g. something like `[:metric\n *   ga:users]`. We want to ignore those because they're not the same thing at all as MB Metrics/Segments and don't\n *   correspond to objects in our application DB.\n */\nmetabase.mbql.util.ga_metric_or_segment_QMARK_ = (function metabase$mbql$util$ga_metric_or_segment_QMARK_(p__48265){\nvar vec__48266 = p__48265;\nvar _ = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__48266,(0),null);\nvar id = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__48266,(1),null);\nreturn metabase.mbql.util.ga_id_QMARK_(id);\n});\n/**\n * Return a function that can be used to uniquify string names. Function maintains an internal counter that will suffix\n *   any names passed to it as needed so all results will be unique.\n * \n *  (let [unique-name (unique-name-generator)]\n *    [(unique-name \"A\")\n *     (unique-name \"B\")\n *     (unique-name \"A\")])\n *  ;; -> [\"A\" \"B\" \"A_2\"]\n * \n *   By default, unique aliases are generated for each unique `[id original-name]` key pair. By default, a unique `id` is\n *   generated for every call, meaning repeated calls to [[unique-name-generator]] with the same `original-name` will\n *   return different unique aliases. If idempotence is desired, the function returned by the generator also has a 2\n *   airity version with the signature\n * \n *  (unique-name-fn id original-name)\n * \n *   for example:\n * \n *  (let [unique-name (unique-name-generator)]\n *    [(unique-name :x \"A\")\n *     (unique-name :x \"B\")\n *     (unique-name :x \"A\")\n *     (unique-name :y \"A\")])\n *  ;; -> [\"A\" \"B\" \"A\" \"A_2\"]\n * \n *   Finally, [[unique-name-generator]] accepts the following options to further customize behavior:\n * \n *   ### `:name-key-fn`\n * \n *   Generated aliases are unique by the value of `[id (name-key-fn original-name)]`; the default is `identity`, so by\n *   default aliases are unique by `[id name-key-fn]`. Specify something custom here if you want to make the unique\n *   aliases unique by some other value, for example to make them unique without regards to case:\n * \n *  (let [f (unique-name-generator :name-key-fn str/lower-case)]\n *    [(f \"x\")\n *     (f \"X\")\n *     (f \"X\")])\n *  ;; -> [\"x\" \"X_2\" \"X_3\"]\n * \n *   This is useful for databases that treat column aliases as case-insensitive (see #19618 for some examples of this).\n * \n *   ### `:unique-alias-fn`\n * \n *   The function used to generate a potentially-unique alias given an original alias and unique suffix with the signature\n * \n *  (unique-alias-fn original suffix)\n * \n *   By default, combines them like `original_suffix`, but you can supply a custom function if you need to change this\n *   behavior:\n * \n *  (let [f (unique-name-generator :unique-alias-fn (fn [x y] (format \"%s~~%s\" y x)))]\n *    [(f \"x\")\n *     (f \"x\")])\n *   ;; -> [\"x\" \"2~~x\"]\n * \n *   This is useful if you need to constrain the generated suffix in some way, for example by limiting its length or\n *   escaping characters disallowed in a column alias.\n * \n *   Values generated by this function are recursively checked for uniqueness, and will keep trying values a unique value\n *   is generated; for this reason the function *must* return a unique value for every unique input. Use caution when\n *   limiting the length of the identifier generated (consider appending a hash in cases like these).\n */\nmetabase.mbql.util.unique_name_generator = (function metabase$mbql$util$unique_name_generator(var_args){\nvar args__5775__auto__ = [];\nvar len__5769__auto___48477 = arguments.length;\nvar i__5770__auto___48478 = (0);\nwhile(true){\nif((i__5770__auto___48478 < len__5769__auto___48477)){\nargs__5775__auto__.push((arguments[i__5770__auto___48478]));\n\nvar G__48479 = (i__5770__auto___48478 + (1));\ni__5770__auto___48478 = G__48479;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__5776__auto__ = ((((0) < args__5775__auto__.length))?(new cljs.core.IndexedSeq(args__5775__auto__.slice((0)),(0),null)):null);\nreturn metabase.mbql.util.unique_name_generator.cljs$core$IFn$_invoke$arity$variadic(argseq__5776__auto__);\n});\n\n(metabase.mbql.util.unique_name_generator.cljs$core$IFn$_invoke$arity$variadic = (function (p__48270){\nvar map__48271 = p__48270;\nvar map__48271__$1 = cljs.core.__destructure_map(map__48271);\nvar name_key_fn = cljs.core.get.cljs$core$IFn$_invoke$arity$3(map__48271__$1,new cljs.core.Keyword(null,\"name-key-fn\",\"name-key-fn\",-1634839199),cljs.core.identity);\nvar unique_alias_fn = cljs.core.get.cljs$core$IFn$_invoke$arity$3(map__48271__$1,new cljs.core.Keyword(null,\"unique-alias-fn\",\"unique-alias-fn\",32555420),(function (original,suffix){\nreturn [cljs.core.str.cljs$core$IFn$_invoke$arity$1(original),\"_\",cljs.core.str.cljs$core$IFn$_invoke$arity$1(suffix)].join('');\n}));\nvar id_PLUS_original__GT_unique = cljs.core.atom.cljs$core$IFn$_invoke$arity$1(cljs.core.PersistentArrayMap.EMPTY);\nvar original__GT_count = cljs.core.atom.cljs$core$IFn$_invoke$arity$1(cljs.core.PersistentArrayMap.EMPTY);\nreturn (function() {\nvar metabase$mbql$util$generate_name = null;\nvar metabase$mbql$util$generate_name__1 = (function (alias){\nreturn metabase$mbql$util$generate_name.cljs$core$IFn$_invoke$arity$2(cljs.core.gensym.cljs$core$IFn$_invoke$arity$0(),alias);\n});\nvar metabase$mbql$util$generate_name__2 = (function (id,original){\nwhile(true){\nvar name_key = (name_key_fn.cljs$core$IFn$_invoke$arity$1 ? name_key_fn.cljs$core$IFn$_invoke$arity$1(original) : name_key_fn.call(null,original));\nvar or__5045__auto__ = (function (){var G__48273 = new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [id,name_key], null);\nvar fexpr__48272 = cljs.core.deref(id_PLUS_original__GT_unique);\nreturn (fexpr__48272.cljs$core$IFn$_invoke$arity$1 ? fexpr__48272.cljs$core$IFn$_invoke$arity$1(G__48273) : fexpr__48272.call(null,G__48273));\n})();\nif(cljs.core.truth_(or__5045__auto__)){\nreturn or__5045__auto__;\n} else {\nvar total_count = cljs.core.get.cljs$core$IFn$_invoke$arity$2(cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4(original__GT_count,cljs.core.update,name_key,cljs.core.fnil.cljs$core$IFn$_invoke$arity$2(cljs.core.inc,(0))),name_key);\nif(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(total_count,(1))){\ncljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4(id_PLUS_original__GT_unique,cljs.core.assoc,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [id,name_key], null),original);\n\nreturn original;\n} else {\nvar candidate = (function (){var G__48274 = original;\nvar G__48275 = cljs.core.str.cljs$core$IFn$_invoke$arity$1(total_count);\nreturn (unique_alias_fn.cljs$core$IFn$_invoke$arity$2 ? unique_alias_fn.cljs$core$IFn$_invoke$arity$2(G__48274,G__48275) : unique_alias_fn.call(null,G__48274,G__48275));\n})();\n\nvar G__48483 = id;\nvar G__48484 = candidate;\nid = G__48483;\noriginal = G__48484;\ncontinue;\n}\n}\nbreak;\n}\n});\nmetabase$mbql$util$generate_name = function(id,original){\nswitch(arguments.length){\ncase 1:\nreturn metabase$mbql$util$generate_name__1.call(this,id);\ncase 2:\nreturn metabase$mbql$util$generate_name__2.call(this,id,original);\n}\nthrow(new Error('Invalid arity: ' + arguments.length));\n};\nmetabase$mbql$util$generate_name.cljs$core$IFn$_invoke$arity$1 = metabase$mbql$util$generate_name__1;\nmetabase$mbql$util$generate_name.cljs$core$IFn$_invoke$arity$2 = metabase$mbql$util$generate_name__2;\nreturn metabase$mbql$util$generate_name;\n})()\n}));\n\n(metabase.mbql.util.unique_name_generator.cljs$lang$maxFixedArity = (0));\n\n/** @this {Function} */\n(metabase.mbql.util.unique_name_generator.cljs$lang$applyTo = (function (seq48269){\nvar self__5755__auto__ = this;\nreturn self__5755__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq48269));\n}));\n\nvar output_schema48276_48485 = schema.core.constrained.cljs$core$IFn$_invoke$arity$3(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [schema.core.Str], null),cljs.core.distinct_QMARK_,\"sequence of unique strings\");\nvar input_schema48278_48486 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [schema.core.one(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [schema.core.Str], null),cljs.core.with_meta(new cljs.core.Symbol(null,\"names\",\"names\",-302543131,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"schema\",\"schema\",-1582001791),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(\"s\",\"Str\",\"s/Str\",907974338,null)], null)], null)))], null);\nvar ret__34795__auto___48487 = /**\n * Inputs: [names :- [s/Str]]\n *   Returns: (s/constrained [s/Str] distinct? \"sequence of unique strings\")\n * \n *   Make the names in a sequence of string names unique by adding suffixes such as `_2`.\n * \n *   (uniquify-names [\"count\" \"sum\" \"count\" \"count_2\"])\n *   ;; -> [\"count\" \"sum\" \"count_2\" \"count_2_2\"]\n */\nmetabase.mbql.util.uniquify_names = (function metabase$mbql$util$uniquify_names(names){\nreturn cljs.core.map.cljs$core$IFn$_invoke$arity$2(metabase.mbql.util.unique_name_generator(),names);\n});\nschema.utils.declare_class_schema_BANG_(schema.utils.fn_schema_bearer(metabase.mbql.util.uniquify_names),schema.core.__GT_FnSchema(output_schema48276_48485,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [input_schema48278_48486], null)));\n\nmetabase.mbql.util.NamedAggregation = schema.core.constrained.cljs$core$IFn$_invoke$arity$3(metabase.mbql.schema.aggregation_options,(function (p1__48281_SHARP_){\nreturn new cljs.core.Keyword(null,\"name\",\"name\",1843675177).cljs$core$IFn$_invoke$arity$1(cljs.core.nth.cljs$core$IFn$_invoke$arity$2(p1__48281_SHARP_,(2)));\n}),\"`:aggregation-options` with a `:name`\");\nmetabase.mbql.util.UniquelyNamedAggregations = schema.core.constrained.cljs$core$IFn$_invoke$arity$3(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [metabase.mbql.util.NamedAggregation], null),(function (clauses){\nreturn cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.distinct_QMARK_,(function (){var iter__5523__auto__ = (function metabase$mbql$util$iter__48282(s__48283){\nreturn (new cljs.core.LazySeq(null,(function (){\nvar s__48283__$1 = s__48283;\nwhile(true){\nvar temp__5804__auto__ = cljs.core.seq(s__48283__$1);\nif(temp__5804__auto__){\nvar s__48283__$2 = temp__5804__auto__;\nif(cljs.core.chunked_seq_QMARK_(s__48283__$2)){\nvar c__5521__auto__ = cljs.core.chunk_first(s__48283__$2);\nvar size__5522__auto__ = cljs.core.count(c__5521__auto__);\nvar b__48285 = cljs.core.chunk_buffer(size__5522__auto__);\nif((function (){var i__48284 = (0);\nwhile(true){\nif((i__48284 < size__5522__auto__)){\nvar vec__48286 = cljs.core._nth(c__5521__auto__,i__48284);\nvar _ = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__48286,(0),null);\nvar ___$1 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__48286,(1),null);\nvar map__48289 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__48286,(2),null);\nvar map__48289__$1 = cljs.core.__destructure_map(map__48289);\nvar ag_name = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__48289__$1,new cljs.core.Keyword(null,\"name\",\"name\",1843675177));\ncljs.core.chunk_append(b__48285,ag_name);\n\nvar G__48488 = (i__48284 + (1));\ni__48284 = G__48488;\ncontinue;\n} else {\nreturn true;\n}\nbreak;\n}\n})()){\nreturn cljs.core.chunk_cons(cljs.core.chunk(b__48285),metabase$mbql$util$iter__48282(cljs.core.chunk_rest(s__48283__$2)));\n} else {\nreturn cljs.core.chunk_cons(cljs.core.chunk(b__48285),null);\n}\n} else {\nvar vec__48290 = cljs.core.first(s__48283__$2);\nvar _ = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__48290,(0),null);\nvar ___$1 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__48290,(1),null);\nvar map__48293 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__48290,(2),null);\nvar map__48293__$1 = cljs.core.__destructure_map(map__48293);\nvar ag_name = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__48293__$1,new cljs.core.Keyword(null,\"name\",\"name\",1843675177));\nreturn cljs.core.cons(ag_name,metabase$mbql$util$iter__48282(cljs.core.rest(s__48283__$2)));\n}\n} else {\nreturn null;\n}\nbreak;\n}\n}),null,null));\n});\nreturn iter__5523__auto__(clauses);\n})());\n}),\"sequence of named aggregations with unique names\");\nvar output_schema48294_48489 = metabase.mbql.util.UniquelyNamedAggregations;\nvar input_schema48296_48490 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [schema.core.one(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [metabase.mbql.util.NamedAggregation], null),cljs.core.with_meta(new cljs.core.Symbol(null,\"named-aggregations\",\"named-aggregations\",-771029585,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"schema\",\"schema\",-1582001791),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,\"NamedAggregation\",\"NamedAggregation\",1856050571,null)], null)], null)))], null);\nvar ret__34795__auto___48491 = /**\n * Inputs: [named-aggregations :- [NamedAggregation]]\n *   Returns: UniquelyNamedAggregations\n * \n *   Make the names of a sequence of named aggregations unique by adding suffixes such as `_2`.\n */\nmetabase.mbql.util.uniquify_named_aggregations = (function metabase$mbql$util$uniquify_named_aggregations(named_aggregations){\nvar unique_names = metabase.mbql.util.uniquify_names((function (){var iter__5523__auto__ = (function metabase$mbql$util$uniquify_named_aggregations_$_iter__48299(s__48300){\nreturn (new cljs.core.LazySeq(null,(function (){\nvar s__48300__$1 = s__48300;\nwhile(true){\nvar temp__5804__auto__ = cljs.core.seq(s__48300__$1);\nif(temp__5804__auto__){\nvar s__48300__$2 = temp__5804__auto__;\nif(cljs.core.chunked_seq_QMARK_(s__48300__$2)){\nvar c__5521__auto__ = cljs.core.chunk_first(s__48300__$2);\nvar size__5522__auto__ = cljs.core.count(c__5521__auto__);\nvar b__48302 = cljs.core.chunk_buffer(size__5522__auto__);\nif((function (){var i__48301 = (0);\nwhile(true){\nif((i__48301 < size__5522__auto__)){\nvar vec__48303 = cljs.core._nth(c__5521__auto__,i__48301);\nvar _ = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__48303,(0),null);\nvar _wrapped_ag = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__48303,(1),null);\nvar map__48306 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__48303,(2),null);\nvar map__48306__$1 = cljs.core.__destructure_map(map__48306);\nvar ag_name = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__48306__$1,new cljs.core.Keyword(null,\"name\",\"name\",1843675177));\ncljs.core.chunk_append(b__48302,ag_name);\n\nvar G__48492 = (i__48301 + (1));\ni__48301 = G__48492;\ncontinue;\n} else {\nreturn true;\n}\nbreak;\n}\n})()){\nreturn cljs.core.chunk_cons(cljs.core.chunk(b__48302),metabase$mbql$util$uniquify_named_aggregations_$_iter__48299(cljs.core.chunk_rest(s__48300__$2)));\n} else {\nreturn cljs.core.chunk_cons(cljs.core.chunk(b__48302),null);\n}\n} else {\nvar vec__48307 = cljs.core.first(s__48300__$2);\nvar _ = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__48307,(0),null);\nvar _wrapped_ag = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__48307,(1),null);\nvar map__48310 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__48307,(2),null);\nvar map__48310__$1 = cljs.core.__destructure_map(map__48310);\nvar ag_name = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__48310__$1,new cljs.core.Keyword(null,\"name\",\"name\",1843675177));\nreturn cljs.core.cons(ag_name,metabase$mbql$util$uniquify_named_aggregations_$_iter__48299(cljs.core.rest(s__48300__$2)));\n}\n} else {\nreturn null;\n}\nbreak;\n}\n}),null,null));\n});\nreturn iter__5523__auto__(named_aggregations);\n})());\nreturn cljs.core.map.cljs$core$IFn$_invoke$arity$3((function (p__48311,unique_name){\nvar vec__48312 = p__48311;\nvar _ = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__48312,(0),null);\nvar wrapped_ag = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__48312,(1),null);\nvar options = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__48312,(2),null);\nreturn new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"aggregation-options\",\"aggregation-options\",-1904917550),wrapped_ag,cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(options,new cljs.core.Keyword(null,\"name\",\"name\",1843675177),unique_name)], null);\n}),named_aggregations,unique_names);\n});\nschema.utils.declare_class_schema_BANG_(schema.utils.fn_schema_bearer(metabase.mbql.util.uniquify_named_aggregations),schema.core.__GT_FnSchema(output_schema48294_48489,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [input_schema48296_48490], null)));\n\nvar output_schema48315_48494 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [metabase.mbql.util.NamedAggregation], null);\nvar input_schema48317_48495 = new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [schema.core.one(schema.core.pred.cljs$core$IFn$_invoke$arity$1(cljs.core.fn_QMARK_),cljs.core.with_meta(new cljs.core.Symbol(null,\"aggregation->name-fn\",\"aggregation->name-fn\",596978962,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"schema\",\"schema\",-1582001791),cljs.core.list(new cljs.core.Symbol(\"s\",\"pred\",\"s/pred\",-727014287,null),new cljs.core.Symbol(null,\"fn?\",\"fn?\",1820990818,null))], null))),schema.core.one(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [metabase.mbql.schema.Aggregation], null),cljs.core.with_meta(new cljs.core.Symbol(null,\"aggregations\",\"aggregations\",559417189,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"schema\",\"schema\",-1582001791),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(\"mbql.s\",\"Aggregation\",\"mbql.s/Aggregation\",124504849,null)], null)], null)))], null);\nvar ret__34795__auto___48496 = /**\n * Inputs: [aggregation->name-fn :- (s/pred fn?) aggregations :- [mbql.s/Aggregation]]\n *   Returns: [NamedAggregation]\n * \n *   Wrap every aggregation clause in an `:aggregation-options` clause, using the name returned\n *   by `(aggregation->name-fn ag-clause)` as names for any clauses that do not already have a `:name` in\n *   `:aggregation-options`.\n * \n *  (pre-alias-aggregations annotate/aggregation-name\n *   [[:count] [:count] [:aggregation-options [:sum [:field 1 nil] {:name \"Sum-41\"}]])\n *  ;; -> [[:aggregation-options [:count] {:name \"count\"}]\n *         [:aggregation-options [:count] {:name \"count\"}]\n *         [:aggregation-options [:sum [:field 1 nil]] {:name \"Sum-41\"}]]\n * \n *   Most often, `aggregation->name-fn` will be something like `annotate/aggregation-name`, but for purposes of keeping\n *   the `metabase.mbql` module seperate from the `metabase.query-processor` code we'll let you pass that in yourself.\n */\nmetabase.mbql.util.pre_alias_aggregations = (function metabase$mbql$util$pre_alias_aggregations(aggregation__GT_name_fn,aggregations){\nreturn (function metabase$mbql$util$pre_alias_aggregations_$_replace_48320(_AMPERSAND_parents,_AMPERSAND_match){\ntry{if(((cljs.core.vector_QMARK_(_AMPERSAND_match)) && ((cljs.core.count(_AMPERSAND_match) === 3)))){\ntry{var _AMPERSAND_match_0__48326 = cljs.core.nth.cljs$core$IFn$_invoke$arity$2(_AMPERSAND_match,(0));\nif(cljs.core.keyword_identical_QMARK_(_AMPERSAND_match_0__48326,new cljs.core.Keyword(null,\"aggregation-options\",\"aggregation-options\",-1904917550))){\ntry{var _AMPERSAND_match_2__48328 = cljs.core.nth.cljs$core$IFn$_invoke$arity$2(_AMPERSAND_match,(2));\nif(cljs.core.truth_(new cljs.core.Keyword(null,\"name\",\"name\",1843675177).cljs$core$IFn$_invoke$arity$1(_AMPERSAND_match_2__48328))){\nreturn _AMPERSAND_match;\n} else {\nthrow cljs.core.match.backtrack;\n\n}\n}catch (e48337){if((e48337 instanceof Error)){\nvar e__46040__auto__ = e48337;\nif((e__46040__auto__ === cljs.core.match.backtrack)){\nvar options = cljs.core.nth.cljs$core$IFn$_invoke$arity$2(_AMPERSAND_match,(2));\nvar wrapped_ag = cljs.core.nth.cljs$core$IFn$_invoke$arity$2(_AMPERSAND_match,(1));\nreturn new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"aggregation-options\",\"aggregation-options\",-1904917550),wrapped_ag,cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(options,new cljs.core.Keyword(null,\"name\",\"name\",1843675177),(aggregation__GT_name_fn.cljs$core$IFn$_invoke$arity$1 ? aggregation__GT_name_fn.cljs$core$IFn$_invoke$arity$1(wrapped_ag) : aggregation__GT_name_fn.call(null,wrapped_ag)))], null);\n} else {\nthrow e__46040__auto__;\n}\n} else {\nthrow e48337;\n\n}\n}} else {\nthrow cljs.core.match.backtrack;\n\n}\n}catch (e48336){if((e48336 instanceof Error)){\nvar e__46040__auto__ = e48336;\nif((e__46040__auto__ === cljs.core.match.backtrack)){\nthrow cljs.core.match.backtrack;\n} else {\nthrow e__46040__auto__;\n}\n} else {\nthrow e48336;\n\n}\n}} else {\nthrow cljs.core.match.backtrack;\n\n}\n}catch (e48332){if((e48332 instanceof Error)){\nvar e__46040__auto__ = e48332;\nif((e__46040__auto__ === cljs.core.match.backtrack)){\ntry{if(((cljs.core.vector_QMARK_(_AMPERSAND_match)) && ((cljs.core.count(_AMPERSAND_match) >= (1))))){\ntry{var _AMPERSAND_match_left__48329 = cljs.core.subvec.cljs$core$IFn$_invoke$arity$3(_AMPERSAND_match,(0),(1));\nif(((cljs.core.vector_QMARK_(_AMPERSAND_match_left__48329)) && ((cljs.core.count(_AMPERSAND_match_left__48329) === (1))))){\ntry{var _AMPERSAND_match_left__48329_0__48331 = cljs.core.nth.cljs$core$IFn$_invoke$arity$2(_AMPERSAND_match_left__48329,(0));\nif((_AMPERSAND_match_left__48329_0__48331 instanceof cljs.core.Keyword)){\nreturn new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"aggregation-options\",\"aggregation-options\",-1904917550),_AMPERSAND_match,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"name\",\"name\",1843675177),(aggregation__GT_name_fn.cljs$core$IFn$_invoke$arity$1 ? aggregation__GT_name_fn.cljs$core$IFn$_invoke$arity$1(_AMPERSAND_match) : aggregation__GT_name_fn.call(null,_AMPERSAND_match))], null)], null);\n} else {\nthrow cljs.core.match.backtrack;\n\n}\n}catch (e48335){if((e48335 instanceof Error)){\nvar e__46040__auto____$1 = e48335;\nif((e__46040__auto____$1 === cljs.core.match.backtrack)){\nthrow cljs.core.match.backtrack;\n} else {\nthrow e__46040__auto____$1;\n}\n} else {\nthrow e48335;\n\n}\n}} else {\nthrow cljs.core.match.backtrack;\n\n}\n}catch (e48334){if((e48334 instanceof Error)){\nvar e__46040__auto____$1 = e48334;\nif((e__46040__auto____$1 === cljs.core.match.backtrack)){\nthrow cljs.core.match.backtrack;\n} else {\nthrow e__46040__auto____$1;\n}\n} else {\nthrow e48334;\n\n}\n}} else {\nthrow cljs.core.match.backtrack;\n\n}\n}catch (e48333){if((e48333 instanceof Error)){\nvar e__46040__auto____$1 = e48333;\nif((e__46040__auto____$1 === cljs.core.match.backtrack)){\nreturn metabase.mbql.util.match.impl.replace_in_collection(metabase$mbql$util$pre_alias_aggregations_$_replace_48320,_AMPERSAND_parents,_AMPERSAND_match);\n} else {\nthrow e__46040__auto____$1;\n}\n} else {\nthrow e48333;\n\n}\n}} else {\nthrow e__46040__auto__;\n}\n} else {\nthrow e48332;\n\n}\n}})(cljs.core.PersistentVector.EMPTY,aggregations);\n});\nschema.utils.declare_class_schema_BANG_(schema.utils.fn_schema_bearer(metabase.mbql.util.pre_alias_aggregations),schema.core.__GT_FnSchema(output_schema48315_48494,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [input_schema48317_48495], null)));\n\nvar output_schema48338_48501 = metabase.mbql.util.UniquelyNamedAggregations;\nvar input_schema48340_48502 = new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [schema.core.one(schema.core.pred.cljs$core$IFn$_invoke$arity$1(cljs.core.fn_QMARK_),cljs.core.with_meta(new cljs.core.Symbol(null,\"aggregation->name-fn\",\"aggregation->name-fn\",596978962,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"schema\",\"schema\",-1582001791),cljs.core.list(new cljs.core.Symbol(\"s\",\"pred\",\"s/pred\",-727014287,null),new cljs.core.Symbol(null,\"fn?\",\"fn?\",1820990818,null))], null))),schema.core.one(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [metabase.mbql.schema.Aggregation], null),cljs.core.with_meta(new cljs.core.Symbol(null,\"aggregations\",\"aggregations\",559417189,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"schema\",\"schema\",-1582001791),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(\"mbql.s\",\"Aggregation\",\"mbql.s/Aggregation\",124504849,null)], null)], null)))], null);\nvar ret__34795__auto___48503 = /**\n * Inputs: [aggregation->name-fn :- (s/pred fn?) aggregations :- [mbql.s/Aggregation]]\n *   Returns: UniquelyNamedAggregations\n * \n *   Wrap every aggregation clause in a `:named` clause with a unique name. Combines `pre-alias-aggregations` with\n *   `uniquify-named-aggregations`.\n */\nmetabase.mbql.util.pre_alias_and_uniquify_aggregations = (function metabase$mbql$util$pre_alias_and_uniquify_aggregations(aggregation__GT_name_fn,aggregations){\nreturn metabase.mbql.util.uniquify_named_aggregations(metabase.mbql.util.pre_alias_aggregations(aggregation__GT_name_fn,aggregations));\n});\nschema.utils.declare_class_schema_BANG_(schema.utils.fn_schema_bearer(metabase.mbql.util.pre_alias_and_uniquify_aggregations),schema.core.__GT_FnSchema(output_schema48338_48501,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [input_schema48340_48502], null)));\n\n/**\n * Calculate the absolute maximum number of results that should be returned by this query (MBQL or native), useful for\n *   doing the equivalent of\n * \n *  java.sql.Statement statement = ...;\n *  statement.setMaxRows(<max-rows-limit>).\n * \n *   to ensure the DB cursor or equivalent doesn't fetch more rows than will be consumed.\n * \n *   This is calculated as follows:\n * \n *   *  If query is `MBQL` and has a `:limit` or `:page` clause, returns appropriate number\n *   *  If query has `:constraints` with `:max-results-bare-rows` or `:max-results`, returns the appropriate number\n *   *  `:max-results-bare-rows` is returned if set and Query does not have any aggregations\n *   *  `:max-results` is returned otherwise\n *   *  If none of the above are set, returns `nil`. In this case, you should use something like the Dashboard QP's\n *   `max-rows-limit`\n */\nmetabase.mbql.util.query__GT_max_rows_limit = (function metabase$mbql$util$query__GT_max_rows_limit(p__48343){\nvar map__48344 = p__48343;\nvar map__48344__$1 = cljs.core.__destructure_map(map__48344);\nvar map__48345 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__48344__$1,new cljs.core.Keyword(null,\"constraints\",\"constraints\",422775616));\nvar map__48345__$1 = cljs.core.__destructure_map(map__48345);\nvar max_results = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__48345__$1,new cljs.core.Keyword(null,\"max-results\",\"max-results\",-32858165));\nvar max_results_bare_rows = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__48345__$1,new cljs.core.Keyword(null,\"max-results-bare-rows\",\"max-results-bare-rows\",2096475889));\nvar map__48346 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__48344__$1,new cljs.core.Keyword(null,\"query\",\"query\",-1288509510));\nvar map__48346__$1 = cljs.core.__destructure_map(map__48346);\nvar limit = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__48346__$1,new cljs.core.Keyword(null,\"limit\",\"limit\",-1355822363));\nvar aggregations = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__48346__$1,new cljs.core.Keyword(null,\"aggregation\",\"aggregation\",1597476696));\nvar map__48347 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__48346__$1,new cljs.core.Keyword(null,\"page\",\"page\",849072397));\nvar map__48347__$1 = cljs.core.__destructure_map(map__48347);\nvar items = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__48347__$1,new cljs.core.Keyword(null,\"items\",\"items\",1031954938));\nvar query_type = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__48344__$1,new cljs.core.Keyword(null,\"type\",\"type\",1174270348));\nvar safe_min = (function() { \nvar G__48504__delegate = function (args){\nvar temp__5804__auto__ = cljs.core.seq(cljs.core.filter.cljs$core$IFn$_invoke$arity$2(cljs.core.some_QMARK_,args));\nif(temp__5804__auto__){\nvar args__$1 = temp__5804__auto__;\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$2(cljs.core.min,args__$1);\n} else {\nreturn null;\n}\n};\nvar G__48504 = function (var_args){\nvar args = null;\nif (arguments.length > 0) {\nvar G__48505__i = 0, G__48505__a = new Array(arguments.length -  0);\nwhile (G__48505__i < G__48505__a.length) {G__48505__a[G__48505__i] = arguments[G__48505__i + 0]; ++G__48505__i;}\n  args = new cljs.core.IndexedSeq(G__48505__a,0,null);\n} \nreturn G__48504__delegate.call(this,args);};\nG__48504.cljs$lang$maxFixedArity = 0;\nG__48504.cljs$lang$applyTo = (function (arglist__48506){\nvar args = cljs.core.seq(arglist__48506);\nreturn G__48504__delegate(args);\n});\nG__48504.cljs$core$IFn$_invoke$arity$variadic = G__48504__delegate;\nreturn G__48504;\n})()\n;\nvar mbql_limit = ((cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(query_type,new cljs.core.Keyword(null,\"query\",\"query\",-1288509510)))?safe_min(items,limit):null);\nvar constraints_limit = (function (){var or__5045__auto__ = (cljs.core.truth_(aggregations)?null:max_results_bare_rows);\nif(cljs.core.truth_(or__5045__auto__)){\nreturn or__5045__auto__;\n} else {\nreturn max_results;\n}\n})();\nreturn safe_min(mbql_limit,constraints_limit);\n});\nmetabase.mbql.util.remove_empty = (function metabase$mbql$util$remove_empty(x){\nif(cljs.core.map_QMARK_(x)){\nreturn cljs.core.not_empty(cljs.core.into.cljs$core$IFn$_invoke$arity$2(cljs.core.PersistentArrayMap.EMPTY,(function (){var iter__5523__auto__ = (function metabase$mbql$util$remove_empty_$_iter__48348(s__48349){\nreturn (new cljs.core.LazySeq(null,(function (){\nvar s__48349__$1 = s__48349;\nwhile(true){\nvar temp__5804__auto__ = cljs.core.seq(s__48349__$1);\nif(temp__5804__auto__){\nvar s__48349__$2 = temp__5804__auto__;\nif(cljs.core.chunked_seq_QMARK_(s__48349__$2)){\nvar c__5521__auto__ = cljs.core.chunk_first(s__48349__$2);\nvar size__5522__auto__ = cljs.core.count(c__5521__auto__);\nvar b__48351 = cljs.core.chunk_buffer(size__5522__auto__);\nif((function (){var i__48350 = (0);\nwhile(true){\nif((i__48350 < size__5522__auto__)){\nvar vec__48352 = cljs.core._nth(c__5521__auto__,i__48350);\nvar k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__48352,(0),null);\nvar v = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__48352,(1),null);\nvar v__$1 = (metabase.mbql.util.remove_empty.cljs$core$IFn$_invoke$arity$1 ? metabase.mbql.util.remove_empty.cljs$core$IFn$_invoke$arity$1(v) : metabase.mbql.util.remove_empty.call(null,v));\nif((!((v__$1 == null)))){\ncljs.core.chunk_append(b__48351,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [k,v__$1], null));\n\nvar G__48508 = (i__48350 + (1));\ni__48350 = G__48508;\ncontinue;\n} else {\nvar G__48509 = (i__48350 + (1));\ni__48350 = G__48509;\ncontinue;\n}\n} else {\nreturn true;\n}\nbreak;\n}\n})()){\nreturn cljs.core.chunk_cons(cljs.core.chunk(b__48351),metabase$mbql$util$remove_empty_$_iter__48348(cljs.core.chunk_rest(s__48349__$2)));\n} else {\nreturn cljs.core.chunk_cons(cljs.core.chunk(b__48351),null);\n}\n} else {\nvar vec__48355 = cljs.core.first(s__48349__$2);\nvar k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__48355,(0),null);\nvar v = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__48355,(1),null);\nvar v__$1 = (metabase.mbql.util.remove_empty.cljs$core$IFn$_invoke$arity$1 ? metabase.mbql.util.remove_empty.cljs$core$IFn$_invoke$arity$1(v) : metabase.mbql.util.remove_empty.call(null,v));\nif((!((v__$1 == null)))){\nreturn cljs.core.cons(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [k,v__$1], null),metabase$mbql$util$remove_empty_$_iter__48348(cljs.core.rest(s__48349__$2)));\n} else {\nvar G__48510 = cljs.core.rest(s__48349__$2);\ns__48349__$1 = G__48510;\ncontinue;\n}\n}\n} else {\nreturn null;\n}\nbreak;\n}\n}),null,null));\n});\nreturn iter__5523__auto__(x);\n})()));\n} else {\nif(cljs.core.sequential_QMARK_(x)){\nreturn cljs.core.not_empty(cljs.core.into.cljs$core$IFn$_invoke$arity$2(cljs.core.empty(x),cljs.core.filter.cljs$core$IFn$_invoke$arity$2(cljs.core.some_QMARK_,cljs.core.map.cljs$core$IFn$_invoke$arity$2(metabase.mbql.util.remove_empty,x))));\n} else {\nreturn x;\n\n}\n}\n});\nvar output_schema48358_48511 = metabase.mbql.schema.FieldOrAggregationReference;\nvar input_schema48360_48512 = new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [schema.core.one(metabase.mbql.schema.FieldOrAggregationReference,new cljs.core.Symbol(null,\"arg0\",\"arg0\",-1024593414,null)),schema.core.one(schema.core.Any,cljs.core.with_meta(new cljs.core.Symbol(null,\"f\",\"f\",43394975,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"schema\",\"schema\",-1582001791),new cljs.core.Symbol(\"schema.core\",\"Any\",\"schema.core/Any\",-1891898271,null)], null))),schema.core.Any], null);\nvar ret__34795__auto___48513 = (function (){\n/**\n * Inputs: [[clause-type id-or-name opts] :- mbql.s/FieldOrAggregationReference f & args]\n *   Returns: mbql.s/FieldOrAggregationReference\n * \n *   Like [[clojure.core/update]], but for the options in a `:field`, `:expression`, or `:aggregation` clause.\n */\nmetabase.mbql.util.update_field_options = (function metabase$mbql$util$update_field_options(var_args){\nvar args__5775__auto__ = [];\nvar len__5769__auto___48514 = arguments.length;\nvar i__5770__auto___48515 = (0);\nwhile(true){\nif((i__5770__auto___48515 < len__5769__auto___48514)){\nargs__5775__auto__.push((arguments[i__5770__auto___48515]));\n\nvar G__48516 = (i__5770__auto___48515 + (1));\ni__5770__auto___48515 = G__48516;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__5776__auto__ = ((((2) < args__5775__auto__.length))?(new cljs.core.IndexedSeq(args__5775__auto__.slice((2)),(0),null)):null);\nreturn metabase.mbql.util.update_field_options.cljs$core$IFn$_invoke$arity$variadic((arguments[(0)]),(arguments[(1)]),argseq__5776__auto__);\n});\n\n(metabase.mbql.util.update_field_options.cljs$core$IFn$_invoke$arity$variadic = (function (p__48366,f,args){\nvar vec__48367 = p__48366;\nvar clause_type = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__48367,(0),null);\nvar id_or_name = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__48367,(1),null);\nvar opts = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__48367,(2),null);\nvar opts__$1 = cljs.core.not_empty(metabase.mbql.util.remove_empty(cljs.core.apply.cljs$core$IFn$_invoke$arity$3(f,opts,args)));\nif(cljs.core.truth_(opts__$1)){\nreturn new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [clause_type,id_or_name,opts__$1], null);\n} else {\nif(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(clause_type,new cljs.core.Keyword(null,\"field\",\"field\",-1302436500))){\nreturn new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [clause_type,id_or_name,null], null);\n} else {\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [clause_type,id_or_name], null);\n\n}\n}\n}));\n\n(metabase.mbql.util.update_field_options.cljs$lang$maxFixedArity = (2));\n\n/** @this {Function} */\n(metabase.mbql.util.update_field_options.cljs$lang$applyTo = (function (seq48363){\nvar G__48364 = cljs.core.first(seq48363);\nvar seq48363__$1 = cljs.core.next(seq48363);\nvar G__48365 = cljs.core.first(seq48363__$1);\nvar seq48363__$2 = cljs.core.next(seq48363__$1);\nvar self__5754__auto__ = this;\nreturn self__5754__auto__.cljs$core$IFn$_invoke$arity$variadic(G__48364,G__48365,seq48363__$2);\n}));\n\nreturn null;\n})()\n;\nschema.utils.declare_class_schema_BANG_(schema.utils.fn_schema_bearer(metabase.mbql.util.update_field_options),schema.core.__GT_FnSchema(output_schema48358_48511,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [input_schema48360_48512], null)));\n\n/**\n * Like [[clojure.core/assoc]], but for the options in a `:field`, `:expression`, or `:aggregation` clause.\n */\nmetabase.mbql.util.assoc_field_options = (function metabase$mbql$util$assoc_field_options(var_args){\nvar args__5775__auto__ = [];\nvar len__5769__auto___48518 = arguments.length;\nvar i__5770__auto___48519 = (0);\nwhile(true){\nif((i__5770__auto___48519 < len__5769__auto___48518)){\nargs__5775__auto__.push((arguments[i__5770__auto___48519]));\n\nvar G__48520 = (i__5770__auto___48519 + (1));\ni__5770__auto___48519 = G__48520;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__5776__auto__ = ((((1) < args__5775__auto__.length))?(new cljs.core.IndexedSeq(args__5775__auto__.slice((1)),(0),null)):null);\nreturn metabase.mbql.util.assoc_field_options.cljs$core$IFn$_invoke$arity$variadic((arguments[(0)]),argseq__5776__auto__);\n});\n\n(metabase.mbql.util.assoc_field_options.cljs$core$IFn$_invoke$arity$variadic = (function (clause,kvs){\nreturn cljs.core.apply.cljs$core$IFn$_invoke$arity$4(metabase.mbql.util.update_field_options,clause,cljs.core.assoc,kvs);\n}));\n\n(metabase.mbql.util.assoc_field_options.cljs$lang$maxFixedArity = (1));\n\n/** @this {Function} */\n(metabase.mbql.util.assoc_field_options.cljs$lang$applyTo = (function (seq48370){\nvar G__48371 = cljs.core.first(seq48370);\nvar seq48370__$1 = cljs.core.next(seq48370);\nvar self__5754__auto__ = this;\nreturn self__5754__auto__.cljs$core$IFn$_invoke$arity$variadic(G__48371,seq48370__$1);\n}));\n\n/**\n * Set the `:temporal-unit` of a `:field` clause to `unit`.\n */\nmetabase.mbql.util.with_temporal_unit = (function metabase$mbql$util$with_temporal_unit(p__48372,unit){\nvar vec__48373 = p__48372;\nvar _ = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__48373,(0),null);\nvar ___$1 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__48373,(1),null);\nvar map__48376 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__48373,(2),null);\nvar map__48376__$1 = cljs.core.__destructure_map(map__48376);\nvar base_type = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__48376__$1,new cljs.core.Keyword(null,\"base-type\",\"base-type\",1167971299));\nvar clause = vec__48373;\n\nif(((cljs.core.not(base_type)) || (metabase.mbql.schema.valid_temporal_unit_for_base_type_QMARK_.cljs$core$IFn$_invoke$arity$2(base_type,unit)))){\nreturn metabase.mbql.util.assoc_field_options.cljs$core$IFn$_invoke$arity$variadic(clause,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"temporal-unit\",\"temporal-unit\",-1892306358),unit], 0));\n} else {\nreturn clause;\n}\n});\n/**\n * Update a `:field`, `:expression` reference, or `:aggregation` reference clause by removing all namespaced keys in the\n *   options map. This is mainly for clause equality comparison purposes -- in current usage namespaced keys are used by\n *   individual pieces of middleware or driver implementations for tracking little bits of information that should not be\n *   considered relevant when comparing clauses for equality.\n */\nmetabase.mbql.util.remove_namespaced_options = (function metabase$mbql$util$remove_namespaced_options(field_or_ref){\nreturn metabase.mbql.util.update_field_options(field_or_ref,cljs.core.partial.cljs$core$IFn$_invoke$arity$3(cljs.core.into,cljs.core.PersistentArrayMap.EMPTY,cljs.core.remove.cljs$core$IFn$_invoke$arity$1((function (p__48377){\nvar vec__48378 = p__48377;\nvar k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__48378,(0),null);\nvar _ = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__48378,(1),null);\nreturn cljs.core.qualified_keyword_QMARK_(k);\n}))));\n});\n/**\n * Find all the `:field` references with integer IDs in `coll`, which can be a full MBQL query, a snippet of MBQL, or a\n *   sequence of those things; return a set of Field IDs. Includes Fields referenced indirectly via `:source-field`.\n *   Returns `nil` if no IDs are found.\n */\nmetabase.mbql.util.referenced_field_ids = (function metabase$mbql$util$referenced_field_ids(coll){\nreturn cljs.core.not_empty(cljs.core.into.cljs$core$IFn$_invoke$arity$3(cljs.core.PersistentHashSet.EMPTY,cljs.core.comp.cljs$core$IFn$_invoke$arity$2(cljs.core.cat,cljs.core.filter.cljs$core$IFn$_invoke$arity$1(cljs.core.some_QMARK_)),cljs.core.seq(cljs.core.filter.cljs$core$IFn$_invoke$arity$2(cljs.core.some_QMARK_,(function metabase$mbql$util$referenced_field_ids_$_match_48381(_AMPERSAND_parents,_AMPERSAND_match){\ntry{if(((cljs.core.vector_QMARK_(_AMPERSAND_match)) && ((cljs.core.count(_AMPERSAND_match) === 3)))){\ntry{var _AMPERSAND_match_0__48383 = cljs.core.nth.cljs$core$IFn$_invoke$arity$2(_AMPERSAND_match,(0));\nif(cljs.core.keyword_identical_QMARK_(_AMPERSAND_match_0__48383,new cljs.core.Keyword(null,\"field\",\"field\",-1302436500))){\ntry{var _AMPERSAND_match_1__48384 = cljs.core.nth.cljs$core$IFn$_invoke$arity$2(_AMPERSAND_match,(1));\nif(cljs.core.integer_QMARK_(_AMPERSAND_match_1__48384)){\nvar id = cljs.core.nth.cljs$core$IFn$_invoke$arity$2(_AMPERSAND_match,(1));\nvar opts = cljs.core.nth.cljs$core$IFn$_invoke$arity$2(_AMPERSAND_match,(2));\nreturn new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [id,new cljs.core.Keyword(null,\"source-field\",\"source-field\",933829534).cljs$core$IFn$_invoke$arity$1(opts)], null)], null);\n} else {\nthrow cljs.core.match.backtrack;\n\n}\n}catch (e48388){if((e48388 instanceof Error)){\nvar e__46040__auto__ = e48388;\nif((e__46040__auto__ === cljs.core.match.backtrack)){\nthrow cljs.core.match.backtrack;\n} else {\nthrow e__46040__auto__;\n}\n} else {\nthrow e48388;\n\n}\n}} else {\nthrow cljs.core.match.backtrack;\n\n}\n}catch (e48387){if((e48387 instanceof Error)){\nvar e__46040__auto__ = e48387;\nif((e__46040__auto__ === cljs.core.match.backtrack)){\nthrow cljs.core.match.backtrack;\n} else {\nthrow e__46040__auto__;\n}\n} else {\nthrow e48387;\n\n}\n}} else {\nthrow cljs.core.match.backtrack;\n\n}\n}catch (e48386){if((e48386 instanceof Error)){\nvar e__46040__auto__ = e48386;\nif((e__46040__auto__ === cljs.core.match.backtrack)){\nreturn metabase.mbql.util.match.impl.match_in_collection(metabase$mbql$util$referenced_field_ids_$_match_48381,_AMPERSAND_parents,_AMPERSAND_match);\n} else {\nthrow e__46040__auto__;\n}\n} else {\nthrow e48386;\n\n}\n}})(cljs.core.PersistentVector.EMPTY,coll)))));\n});\n","~:ns-info",["^ ","~:rename-macros",null,"~:renames",["^ "],"~:meta",["^ ","~:doc","Utilitiy functions for working with MBQL queries.","~:file","metabase/mbql/util.cljc","~:line",1,"~:column",5,"~:end-line",1,"~:end-column",23],"~:ns-aliases",["^ ","~$cljs.loader","~$shadow.loader","~$clojure.core","~$cljs.core","~$clojure.spec.gen.alpha","~$cljs.spec.gen.alpha","~$clojure.pprint","~$cljs.pprint","~$clojure.core.match","~$cljs.core.match"],"~:use-macros",null,"~:excludes",["~#set",["~$replace"]],"~:name","~$metabase.mbql.util","~:reader-aliases",["^ "],"~:op","~:ns","~:imports",null,"~:requires",["^ ","~$metabase.mbql.predicates","^R","~$mbql.s","~$metabase.mbql.schema","~$schema.core","^U","~$i18n","~$metabase.shared.util.i18n","~$metabase.mbql.util.match","^X","~$mbql.match","^X","^@","^@","~$goog","^Z","~$metabase.mbql.schema.helpers","^[","^W","^W","~$s","^U","~$schema.helpers","^[","^T","^T","~$str","~$clojure.string","^12","^12","~$mbql.preds","^R"],"~:seen",["^I",["~:require"]],"~:uses",null,"~:require-macros",["^ ","^@","^@","^U","^U","^V","^W","^X","^X","^Y","^X","^W","^W","~$s","^U"],"~:form",["~#list",["~$ns","^L","Utilitiy functions for working with MBQL queries.",["^19",["~:refer-clojure","~:exclude",["^J"]]],["^19",["^15",["^12","~:as","^11"],["^R","^1=","^13"],["^T","^1=","^S"],["^[","^1=","^10"],["^X","^1=","^Y"],["^W","^1=","^V"],["^U","^1=","~$s"]]]]],"~:flags",["^ ","^15",["^I",[]]],"~:js-deps",["^ "],"~:deps",["^Z","^@","^12","^R","^T","^[","^X","^W","^U"]],"^O","^L","~:resource-id",["~:shadow.build.classpath/resource","metabase/mbql/util.cljc"],"~:compiled-at",1692612527714,"^M",["^ ","^R","^R","^S","^T","^U","^U","^V","^W","^X","^X","^Y","^X","^@","^@","^Z","^Z","^[","^[","^W","^W","~$s","^U","^10","^[","^T","^T","^11","^12","^12","^12","^13","^R"],"~:resource-name","metabase/mbql/util.cljc","~:warnings",[],"~:source","(ns metabase.mbql.util\n  \"Utilitiy functions for working with MBQL queries.\"\n  (:refer-clojure :exclude [replace])\n  #?@\n  (:clj\n   [(:require\n     [clojure.string :as str]\n     [metabase.mbql.predicates :as mbql.preds]\n     [metabase.mbql.schema :as mbql.s]\n     [metabase.mbql.schema.helpers :as schema.helpers]\n     [metabase.mbql.util.match :as mbql.match]\n     [metabase.models.dispatch :as models.dispatch]\n     [metabase.shared.util.i18n :as i18n]\n     [metabase.util.i18n]\n     [metabase.util.log :as log]\n     [potemkin :as p]\n     [schema.core :as s])]\n   :cljs\n   [(:require\n     [clojure.string :as str]\n     [metabase.mbql.predicates :as mbql.preds]\n     [metabase.mbql.schema :as mbql.s]\n     [metabase.mbql.schema.helpers :as schema.helpers]\n     [metabase.mbql.util.match :as mbql.match]\n     [metabase.shared.util.i18n :as i18n]\n     [schema.core :as s])]))\n\n(defn qualified-name\n  \"Like `name`, but if `x` is a namespace-qualified keyword, returns that a string including the namespace.\"\n  [x]\n  (if (and (keyword? x) (namespace x))\n    (str (namespace x) \"/\" (name x))\n    (name x)))\n\n(s/defn normalize-token :- s/Keyword\n  \"Convert a string or keyword in various cases (`lisp-case`, `snake_case`, or `SCREAMING_SNAKE_CASE`) to a lisp-cased\n  keyword.\"\n  [token :- schema.helpers/KeywordOrString]\n  #_{:clj-kondo/ignore [:discouraged-var]}\n  (-> (qualified-name token)\n      str/lower-case\n      (str/replace #\"_\" \"-\")\n      keyword))\n\n(defn mbql-clause?\n  \"True if `x` is an MBQL clause (a sequence with a keyword as its first arg). (Since this is used by the code in\n  `normalize` this handles pre-normalized clauses as well.)\"\n  [x]\n  (and (sequential? x)\n       (not (map-entry? x))\n       (keyword? (first x))))\n\n(defn is-clause?\n  \"If `x` an MBQL clause, and an instance of clauses defined by keyword(s) `k-or-ks`?\n\n    (is-clause? :count [:count 10])        ; -> true\n    (is-clause? #{:+ :- :* :/} [:+ 10 20]) ; -> true\"\n  [k-or-ks x]\n  (and\n   (mbql-clause? x)\n   (if (coll? k-or-ks)\n     ((set k-or-ks) (first x))\n     (= k-or-ks (first x)))))\n\n;;; +----------------------------------------------------------------------------------------------------------------+\n;;; |                                       Functions for manipulating queries                                       |\n;;; +----------------------------------------------------------------------------------------------------------------+\n\n(defn- combine-compound-filters-of-type [compound-type subclauses]\n  (mapcat #(mbql.match/match-one %\n             [(_ :guard (partial = compound-type)) & args]\n             args\n             _\n             [&match])\n          subclauses))\n\n(defn simplify-compound-filter\n  \"Simplify compound `:and`, `:or`, and `:not` compound filters, combining or eliminating them where possible. This\n  also fixes theoretically disallowed compound filters like `:and` with only a single subclause, and eliminates `nils`\n  and duplicate subclauses from the clauses.\"\n  [filter-clause]\n  (mbql.match/replace filter-clause\n    seq? (recur (vec &match))\n\n    ;; if this an an empty filter, toss it\n    nil                                  nil\n    [& (_ :guard (partial every? nil?))] nil\n    []                                   nil\n    [(:or :and :or)]                     nil\n\n    ;; if the COMPOUND clause contains any nils, toss them\n    [(clause-name :guard #{:and :or}) & (args :guard (partial some nil?))]\n    (recur (apply vector clause-name (filterv some? args)))\n\n    ;; Rewrite a `:not` over `:and` using de Morgan's law\n    [:not [:and & args]]\n    (recur (apply vector :or (map #(vector :not %) args)))\n\n    ;; Rewrite a `:not` over `:or` using de Morgan's law\n    [:not [:or & args]]\n    (recur (apply vector :and (map #(vector :not %) args)))\n\n    ;; for `and` or `not` compound filters with only one subclase, just unnest the subclause\n    [(:or :and :or) arg] (recur arg)\n\n    ;; for `and` and `not` compound filters with subclauses of the same type pull up any compounds of the same type\n    ;; e.g. [:and :a [:and b c]] ; -> [:and a b c]\n    [:and & (args :guard (partial some (partial is-clause? :and)))]\n    (recur (apply vector :and (combine-compound-filters-of-type :and args)))\n\n    [:or & (args :guard (partial some (partial is-clause? :or)))]\n    (recur (apply vector :or (combine-compound-filters-of-type :or args)))\n\n    ;; for `and` or `or` clauses with duplicate args, remove the duplicates and recur\n    [(clause :guard #{:and :or}) & (args :guard #(not (apply distinct? %)))]\n    (recur (apply vector clause (distinct args)))\n\n    ;; for `not` that wraps another `not`, eliminate both\n    [:not [:not arg]]\n    (recur arg)\n\n    :else\n    filter-clause))\n\n(s/defn combine-filter-clauses :- mbql.s/Filter\n  \"Combine two filter clauses into a single clause in a way that minimizes slapping a bunch of `:and`s together if\n  possible.\"\n  [filter-clause & more-filter-clauses]\n  (simplify-compound-filter (cons :and (cons filter-clause more-filter-clauses))))\n\n(s/defn add-filter-clause-to-inner-query :- mbql.s/MBQLQuery\n  \"Add a additional filter clause to an *inner* MBQL query, merging with the existing filter clause with `:and` if\n  needed.\"\n  [inner-query :- mbql.s/MBQLQuery new-clause :- (s/maybe mbql.s/Filter)]\n  (if-not new-clause\n    inner-query\n    (update inner-query :filter combine-filter-clauses new-clause)))\n\n(s/defn add-filter-clause :- mbql.s/Query\n  \"Add an additional filter clause to an `outer-query`. If `new-clause` is `nil` this is a no-op.\"\n  [outer-query :- mbql.s/Query new-clause :- (s/maybe mbql.s/Filter)]\n  (update outer-query :query add-filter-clause-to-inner-query new-clause))\n\n(defn desugar-inside\n  \"Rewrite `:inside` filter clauses as a pair of `:between` clauses.\"\n  [m]\n  (mbql.match/replace m\n    [:inside lat-field lon-field lat-max lon-min lat-min lon-max]\n    [:and\n     [:between lat-field lat-min lat-max]\n     [:between lon-field lon-min lon-max]]))\n\n(defn desugar-is-null-and-not-null\n  \"Rewrite `:is-null` and `:not-null` filter clauses as simpler `:=` and `:!=`, respectively.\"\n  [m]\n  (mbql.match/replace m\n    [:is-null field]  [:=  field nil]\n    [:not-null field] [:!= field nil]))\n\n(defn desugar-is-empty-and-not-empty\n  \"Rewrite `:is-empty` and `:not-empty` filter clauses as simpler `:=` and `:!=`, respectively.\"\n  [m]\n  (mbql.match/replace m\n    [:is-empty field]  [:or  [:=  field nil] [:=  field \"\"]]\n    [:not-empty field] [:and [:!= field nil] [:!= field \"\"]]))\n\n(defn- replace-field-or-expression\n  \"Replace a field or expression inside :time-interval\"\n  [m unit]\n  (mbql.match/replace m\n    [:field id-or-name opts] [:field id-or-name (assoc opts :temporal-unit unit)]\n    [:expression expression-name] [:expression expression-name]))\n\n(defn desugar-time-interval\n  \"Rewrite `:time-interval` filter clauses as simpler ones like `:=` or `:between`.\"\n  [m]\n  (mbql.match/replace m\n    [:time-interval field-or-expression n unit] (recur [:time-interval field-or-expression n unit nil])\n\n    ;; replace current/last/next with corresponding value of n and recur\n    [:time-interval field-or-expression :current unit options] (recur [:time-interval field-or-expression  0 unit options])\n    [:time-interval field-or-expression :last    unit options] (recur [:time-interval field-or-expression -1 unit options])\n    [:time-interval field-or-expression :next    unit options] (recur [:time-interval field-or-expression  1 unit options])\n\n    [:time-interval field-or-expression (n :guard #{-1}) unit (_ :guard :include-current)]\n    [:between\n     (replace-field-or-expression field-or-expression unit)\n     [:relative-datetime n unit]\n     [:relative-datetime 0 unit]]\n\n    [:time-interval field-or-expression (n :guard #{1}) unit (_ :guard :include-current)]\n    [:between\n     (replace-field-or-expression field-or-expression unit)\n     [:relative-datetime 0 unit]\n     [:relative-datetime n unit]]\n\n    [:time-interval field-or-expression (n :guard #{-1 0 1}) unit _]\n    [:= (replace-field-or-expression field-or-expression unit) [:relative-datetime n unit]]\n\n    [:time-interval field-or-expression (n :guard neg?) unit (_ :guard :include-current)]\n    [:between\n     (replace-field-or-expression field-or-expression unit)\n     [:relative-datetime n unit]\n     [:relative-datetime 0 unit]]\n\n    [:time-interval field-or-expression (n :guard neg?) unit _]\n    [:between\n     (replace-field-or-expression field-or-expression unit)\n     [:relative-datetime n unit]\n     [:relative-datetime -1 unit]]\n\n    [:time-interval field-or-expression n unit (_ :guard :include-current)]\n    [:between\n     (replace-field-or-expression field-or-expression unit)\n     [:relative-datetime 0 unit]\n     [:relative-datetime n unit]]\n\n    [:time-interval field-or-expression n unit _]\n    [:between\n     (replace-field-or-expression field-or-expression unit)\n     [:relative-datetime 1 unit]\n     [:relative-datetime n unit]]))\n\n(defn desugar-does-not-contain\n  \"Rewrite `:does-not-contain` filter clauses as simpler `:not` clauses.\"\n  [m]\n  (mbql.match/replace m\n    [:does-not-contain & args]\n    [:not (into [:contains] args)]))\n\n(defn desugar-equals-and-not-equals-with-extra-args\n  \"`:=` and `!=` clauses with more than 2 args automatically get rewritten as compound filters.\n\n     [:= field x y]  -> [:or  [:=  field x] [:=  field y]]\n     [:!= field x y] -> [:and [:!= field x] [:!= field y]]\"\n  [m]\n  (mbql.match/replace m\n    [:= field x y & more]\n    (apply vector :or (for [x (concat [x y] more)]\n                        [:= field x]))\n\n    [:!= field x y & more]\n    (apply vector :and (for [x (concat [x y] more)]\n                         [:!= field x]))))\n\n(defn desugar-current-relative-datetime\n  \"Replace `relative-datetime` clauses like `[:relative-datetime :current]` with `[:relative-datetime 0 <unit>]`.\n  `<unit>` is inferred from the `:field` the clause is being compared to (if any), otherwise falls back to `default.`\"\n  [m]\n  (mbql.match/replace m\n    [clause field & (args :guard (partial some (partial = [:relative-datetime :current])))]\n    (let [temporal-unit (or (mbql.match/match-one field [:field _ {:temporal-unit temporal-unit}] temporal-unit)\n                            :default)]\n      (into [clause field] (mbql.match/replace args\n                             [:relative-datetime :current]\n                             [:relative-datetime 0 temporal-unit])))))\n\n(def temporal-extract-ops->unit\n  \"Mapping from the sugar syntax to extract datetime to the unit.\"\n  {[:get-year        nil]       :year-of-era\n   [:get-quarter     nil]       :quarter-of-year\n   [:get-month       nil]       :month-of-year\n   ;; default get-week mode is iso\n   [:get-week        nil]       :week-of-year-iso\n   [:get-week        :iso]      :week-of-year-iso\n   [:get-week        :us]       :week-of-year-us\n   [:get-week        :instance] :week-of-year-instance\n   [:get-day         nil]       :day-of-month\n   [:get-day-of-week nil]       :day-of-week\n   [:get-hour        nil]       :hour-of-day\n   [:get-minute      nil]       :minute-of-hour\n   [:get-second      nil]       :second-of-minute})\n\n(def ^:private temporal-extract-ops\n  (->> (keys temporal-extract-ops->unit)\n       (map first)\n       set))\n\n(defn desugar-temporal-extract\n  \"Replace datetime extractions clauses like `[:get-year field]` with `[:temporal-extract field :year]`.\"\n  [m]\n  (mbql.match/replace m\n    [(op :guard temporal-extract-ops) field & args]\n    [:temporal-extract field (temporal-extract-ops->unit [op (first args)])]))\n\n(defn- desugar-divide-with-extra-args [expression]\n  (mbql.match/replace expression\n    [:/ x y z & more]\n    (recur (into [:/ [:/ x y]] (cons z more)))))\n\n(s/defn desugar-expression :- mbql.s/FieldOrExpressionDef\n  \"Rewrite various 'syntactic sugar' expressions like `:/` with more than two args into something simpler for drivers\n  to compile.\"\n  [expression :- mbql.s/FieldOrExpressionDef]\n  (-> expression\n      desugar-divide-with-extra-args))\n\n(defn- maybe-desugar-expression [clause]\n  (cond-> clause\n    (mbql.preds/FieldOrExpressionDef? clause) desugar-expression))\n\n(s/defn desugar-filter-clause :- mbql.s/Filter\n  \"Rewrite various 'syntatic sugar' filter clauses like `:time-interval` and `:inside` as simpler, logically\n  equivalent clauses. This can be used to simplify the number of filter clauses that need to be supported by anything\n  that needs to enumerate all the possible filter types (such as driver query processor implementations, or the\n  implementation [[negate-filter-clause]] below.)\"\n  [filter-clause :- mbql.s/Filter]\n  (-> filter-clause\n      desugar-current-relative-datetime\n      desugar-equals-and-not-equals-with-extra-args\n      desugar-does-not-contain\n      desugar-time-interval\n      desugar-is-null-and-not-null\n      desugar-is-empty-and-not-empty\n      desugar-inside\n      simplify-compound-filter\n      desugar-temporal-extract\n      maybe-desugar-expression))\n\n(defmulti ^:private negate* first)\n\n(defmethod negate* :not [[_ subclause]]    subclause)\n(defmethod negate* :and [[_ & subclauses]] (into [:or]  (map negate* subclauses)))\n(defmethod negate* :or  [[_ & subclauses]] (into [:and] (map negate* subclauses)))\n(defmethod negate* :=   [[_ field value]]  [:!= field value])\n(defmethod negate* :!=  [[_ field value]]  [:=  field value])\n(defmethod negate* :>   [[_ field value]]  [:<= field value])\n(defmethod negate* :<   [[_ field value]]  [:>= field value])\n(defmethod negate* :>=  [[_ field value]]  [:<  field value])\n(defmethod negate* :<=  [[_ field value]]  [:>  field value])\n\n(defmethod negate* :between [[_ field min max]] [:or [:< field min] [:> field max]])\n\n(defmethod negate* :contains    [clause] [:not clause])\n(defmethod negate* :starts-with [clause] [:not clause])\n(defmethod negate* :ends-with   [clause] [:not clause])\n\n(s/defn negate-filter-clause :- mbql.s/Filter\n  \"Return the logical compliment of an MBQL filter clause, generally without using `:not` (except for the string\n  filter clause types). Useful for generating highly optimized filter clauses and for drivers that do not support\n  top-level `:not` filter clauses.\"\n  [filter-clause :- mbql.s/Filter]\n  (-> filter-clause desugar-filter-clause negate* simplify-compound-filter))\n\n(s/defn query->source-table-id :- (s/maybe schema.helpers/IntGreaterThanZero)\n  \"Return the source Table ID associated with `query`, if applicable; handles nested queries as well. If `query` is\n  `nil`, returns `nil`.\n\n  Throws an Exception when it encounters a unresolved source query (i.e., the `:source-table \\\"card__id\\\"`\n  form), because it cannot return an accurate result for a query that has not yet been preprocessed.\"\n  {:arglists '([outer-query])}\n  [{{source-table-id :source-table, source-query :source-query} :query, query-type :type, :as query}]\n  (cond\n    ;; for native queries, there's no source table to resolve\n    (not= query-type :query)\n    nil\n\n    ;; for MBQL queries with a *native* source query, it's the same story\n    (and (nil? source-table-id) source-query (:native source-query))\n    nil\n\n    ;; for MBQL queries with an MBQL source query, recurse on the source query and try again\n    (and (nil? source-table-id) source-query)\n    (recur (assoc query :query source-query))\n\n    ;; if ID is a `card__id` form that can only mean we haven't preprocessed the query and resolved the source query.\n    ;; This is almost certainly an accident, so throw an Exception so we can make the proper fixes\n    ((every-pred string? (partial re-matches mbql.s/source-table-card-id-regex)) source-table-id)\n    (throw\n     (ex-info\n      (i18n/tru \"Error: query''s source query has not been resolved. You probably need to `preprocess` the query first.\")\n      {}))\n\n    ;; otherwise resolve the source Table\n    :else\n    source-table-id))\n\n(s/defn join->source-table-id :- (s/maybe schema.helpers/IntGreaterThanZero)\n  \"Like `query->source-table-id`, but for a join.\"\n  [join]\n  (query->source-table-id {:type :query, :query join}))\n\n(s/defn add-order-by-clause :- mbql.s/MBQLQuery\n  \"Add a new `:order-by` clause to an MBQL `inner-query`. If the new order-by clause references a Field that is\n  already being used in another order-by clause, this function does nothing.\"\n  [inner-query :- mbql.s/MBQLQuery, [_ [_ id-or-name :as _field], :as order-by-clause] :- mbql.s/OrderBy]\n  (let [existing-fields (set (for [[_ [_ id-or-name]] (:order-by inner-query)]\n                               id-or-name))]\n    (if (existing-fields id-or-name)\n      ;; Field already referenced, nothing to do\n      inner-query\n      ;; otherwise add new clause at the end\n      (update inner-query :order-by (comp vec distinct conj) order-by-clause))))\n\n(defn dispatch-by-clause-name-or-class\n  \"Dispatch function perfect for use with multimethods that dispatch off elements of an MBQL query. If `x` is an MBQL\n  clause, dispatches off the clause name; otherwise dispatches off `x`'s class.\"\n  ([x]\n   #?(:clj\n      (if (mbql-clause? x)\n        (first x)\n        (or (metabase.models.dispatch/model x)\n            (type x)))\n      :cljs\n      (if (mbql-clause? x)\n        (first x)\n        (type x))))\n  ([x _]\n   (dispatch-by-clause-name-or-class x)))\n\n(s/defn expression-with-name :- mbql.s/FieldOrExpressionDef\n  \"Return the `Expression` referenced by a given `expression-name`.\"\n  [inner-query expression-name :- (s/cond-pre s/Keyword schema.helpers/NonBlankString)]\n  (let [allowed-names [(qualified-name expression-name) (keyword expression-name)]]\n    (loop [{:keys [expressions source-query]} inner-query, found #{}]\n      (or\n       ;; look for either string or keyword version of `expression-name` in `expressions`\n       (some (partial get expressions) allowed-names)\n       ;; otherwise, if we have a source query recursively look in that (do we allow that??)\n       (let [found (into found (keys expressions))]\n         (if source-query\n           (recur source-query found)\n           ;; failing that throw an Exception with detailed info about what we tried and what the actual expressions\n           ;; were\n           (throw (ex-info (i18n/tru \"No expression named ''{0}''\" (qualified-name expression-name))\n                           {:type            :invalid-query\n                            :expression-name expression-name\n                            :tried           allowed-names\n                            :found           found}))))))))\n\n(s/defn aggregation-at-index :- mbql.s/Aggregation\n  \"Fetch the aggregation at index. This is intended to power aggregate field references (e.g. [:aggregation 0]).\n   This also handles nested queries, which could be potentially ambiguous if multiple levels had aggregations. To\n   support nested queries, you'll need to keep tract of how many `:source-query`s deep you've traveled; pass in this\n   number to as optional arg `nesting-level` to make sure you reference aggregations at the right level of nesting.\"\n  ([query index]\n   (aggregation-at-index query index 0))\n\n  ([query         :- mbql.s/Query\n    index         :- schema.helpers/IntGreaterThanOrEqualToZero\n    nesting-level :- schema.helpers/IntGreaterThanOrEqualToZero]\n   (if (zero? nesting-level)\n     (or (nth (get-in query [:query :aggregation]) index)\n         (throw (ex-info (i18n/tru \"No aggregation at index: {0}\" index) {:index index})))\n     ;; keep recursing deeper into the query until we get to the same level the aggregation reference was defined at\n     (recur {:query (get-in query [:query :source-query])} index (dec nesting-level)))))\n\n(defn ga-id?\n  \"Is this ID (presumably of a Metric or Segment) a GA one?\"\n  [id]\n  (boolean\n   (when ((some-fn string? keyword?) id)\n     (re-find #\"^ga(id)?:\" (name id)))))\n\n(defn ga-metric-or-segment?\n  \"Is this metric or segment clause not a Dashboard Metric or Segment, but rather a GA one? E.g. something like `[:metric\n  ga:users]`. We want to ignore those because they're not the same thing at all as MB Metrics/Segments and don't\n  correspond to objects in our application DB.\"\n  [[_ id]]\n  (ga-id? id))\n\n;;; --------------------------------- Unique names & transforming ags to have names ----------------------------------\n\n(defn unique-name-generator\n  \"Return a function that can be used to uniquify string names. Function maintains an internal counter that will suffix\n  any names passed to it as needed so all results will be unique.\n\n    (let [unique-name (unique-name-generator)]\n      [(unique-name \\\"A\\\")\n       (unique-name \\\"B\\\")\n       (unique-name \\\"A\\\")])\n    ;; -> [\\\"A\\\" \\\"B\\\" \\\"A_2\\\"]\n\n  By default, unique aliases are generated for each unique `[id original-name]` key pair. By default, a unique `id` is\n  generated for every call, meaning repeated calls to [[unique-name-generator]] with the same `original-name` will\n  return different unique aliases. If idempotence is desired, the function returned by the generator also has a 2\n  airity version with the signature\n\n    (unique-name-fn id original-name)\n\n  for example:\n\n    (let [unique-name (unique-name-generator)]\n      [(unique-name :x \\\"A\\\")\n       (unique-name :x \\\"B\\\")\n       (unique-name :x \\\"A\\\")\n       (unique-name :y \\\"A\\\")])\n    ;; -> [\\\"A\\\" \\\"B\\\" \\\"A\\\" \\\"A_2\\\"]\n\n  Finally, [[unique-name-generator]] accepts the following options to further customize behavior:\n\n  ### `:name-key-fn`\n\n  Generated aliases are unique by the value of `[id (name-key-fn original-name)]`; the default is `identity`, so by\n  default aliases are unique by `[id name-key-fn]`. Specify something custom here if you want to make the unique\n  aliases unique by some other value, for example to make them unique without regards to case:\n\n    (let [f (unique-name-generator :name-key-fn str/lower-case)]\n      [(f \\\"x\\\")\n       (f \\\"X\\\")\n       (f \\\"X\\\")])\n    ;; -> [\\\"x\\\" \\\"X_2\\\" \\\"X_3\\\"]\n\n  This is useful for databases that treat column aliases as case-insensitive (see #19618 for some examples of this).\n\n  ### `:unique-alias-fn`\n\n  The function used to generate a potentially-unique alias given an original alias and unique suffix with the signature\n\n    (unique-alias-fn original suffix)\n\n  By default, combines them like `original_suffix`, but you can supply a custom function if you need to change this\n  behavior:\n\n    (let [f (unique-name-generator :unique-alias-fn (fn [x y] (format \\\"%s~~%s\\\" y x)))]\n      [(f \\\"x\\\")\n       (f \\\"x\\\")])\n  ;; -> [\\\"x\\\" \\\"2~~x\\\"]\n\n  This is useful if you need to constrain the generated suffix in some way, for example by limiting its length or\n  escaping characters disallowed in a column alias.\n\n  Values generated by this function are recursively checked for uniqueness, and will keep trying values a unique value\n  is generated; for this reason the function *must* return a unique value for every unique input. Use caution when\n  limiting the length of the identifier generated (consider appending a hash in cases like these).\"\n  [& {:keys [name-key-fn unique-alias-fn]\n      :or   {name-key-fn     identity\n             unique-alias-fn (fn [original suffix]\n                               (str original \\_ suffix))}}]\n  (let [id+original->unique (atom {})   ; map of [id original-alias] -> unique-alias\n        original->count     (atom {})]  ; map of original-alias -> count\n    (fn generate-name\n      ([alias]\n       (generate-name (gensym) alias))\n\n      ([id original]\n       (let [name-key (name-key-fn original)]\n         (or\n          ;; if we already have generated an alias for this key (e.g. `[id original]`), return it as-is.\n          (@id+original->unique [id name-key])\n          ;; otherwise generate a new unique alias.\n          ;; see if we're the first to try to use this candidate alias. Update the usage count in `original->count`\n          (let [total-count (get (swap! original->count update name-key (fnil inc 0)) name-key)]\n            (if (= total-count 1)\n              ;; if we are the first to do it, record it in `id+original->unique` and return it.\n              (do\n                (swap! id+original->unique assoc [id name-key] original)\n                original)\n              ;; otherwise prefix the alias by the current total count (e.g. `id` becomes `id_2`) and recur. If `id_2`\n              ;; is unused, it will get returned. Otherwise we'll recursively try `id_2_2`, and so forth.\n              (let [candidate (unique-alias-fn original (str total-count))]\n                ;; double-check that `unique-alias-fn` isn't doing something silly like truncating the generated alias\n                ;; to aggressively or forgetting to include the `suffix` -- otherwise we could end up with an infinite\n                ;; loop\n                (assert (not= candidate original)\n                        (str \"unique-alias-fn must return a different string than its input. Input: \"\n                             (pr-str candidate)))\n                (recur id candidate))))))))))\n\n(s/defn uniquify-names :- (s/constrained [s/Str] distinct? \"sequence of unique strings\")\n  \"Make the names in a sequence of string names unique by adding suffixes such as `_2`.\n\n     (uniquify-names [\\\"count\\\" \\\"sum\\\" \\\"count\\\" \\\"count_2\\\"])\n     ;; -> [\\\"count\\\" \\\"sum\\\" \\\"count_2\\\" \\\"count_2_2\\\"]\"\n  [names :- [s/Str]]\n  (map (unique-name-generator) names))\n\n(def ^:private NamedAggregation\n  (s/constrained\n   mbql.s/aggregation-options\n   #(:name (nth % 2))\n   \"`:aggregation-options` with a `:name`\"))\n\n(def ^:private UniquelyNamedAggregations\n  (s/constrained\n   [NamedAggregation]\n   (fn [clauses]\n     (apply distinct? (for [[_ _ {ag-name :name}] clauses]\n                        ag-name)))\n   \"sequence of named aggregations with unique names\"))\n\n(s/defn uniquify-named-aggregations :- UniquelyNamedAggregations\n  \"Make the names of a sequence of named aggregations unique by adding suffixes such as `_2`.\"\n  [named-aggregations :- [NamedAggregation]]\n  (let [unique-names (uniquify-names\n                      (for [[_ _wrapped-ag {ag-name :name}] named-aggregations]\n                        ag-name))]\n    (map\n     (fn [[_ wrapped-ag options] unique-name]\n       [:aggregation-options wrapped-ag (assoc options :name unique-name)])\n     named-aggregations\n     unique-names)))\n\n(s/defn pre-alias-aggregations :- [NamedAggregation]\n  \"Wrap every aggregation clause in an `:aggregation-options` clause, using the name returned\n  by `(aggregation->name-fn ag-clause)` as names for any clauses that do not already have a `:name` in\n  `:aggregation-options`.\n\n    (pre-alias-aggregations annotate/aggregation-name\n     [[:count] [:count] [:aggregation-options [:sum [:field 1 nil] {:name \\\"Sum-41\\\"}]])\n    ;; -> [[:aggregation-options [:count] {:name \\\"count\\\"}]\n           [:aggregation-options [:count] {:name \\\"count\\\"}]\n           [:aggregation-options [:sum [:field 1 nil]] {:name \\\"Sum-41\\\"}]]\n\n  Most often, `aggregation->name-fn` will be something like `annotate/aggregation-name`, but for purposes of keeping\n  the `metabase.mbql` module seperate from the `metabase.query-processor` code we'll let you pass that in yourself.\"\n  {:style/indent 1}\n  [aggregation->name-fn :- (s/pred fn?), aggregations :- [mbql.s/Aggregation]]\n  (mbql.match/replace aggregations\n    [:aggregation-options _ (_ :guard :name)]\n    &match\n\n    [:aggregation-options wrapped-ag options]\n    [:aggregation-options wrapped-ag (assoc options :name (aggregation->name-fn wrapped-ag))]\n\n    [(_ :guard keyword?) & _]\n    [:aggregation-options &match {:name (aggregation->name-fn &match)}]))\n\n(s/defn pre-alias-and-uniquify-aggregations :- UniquelyNamedAggregations\n  \"Wrap every aggregation clause in a `:named` clause with a unique name. Combines `pre-alias-aggregations` with\n  `uniquify-named-aggregations`.\"\n  {:style/indent 1}\n  [aggregation->name-fn :- (s/pred fn?), aggregations :- [mbql.s/Aggregation]]\n  (-> (pre-alias-aggregations aggregation->name-fn aggregations)\n      uniquify-named-aggregations))\n\n(defn query->max-rows-limit\n  \"Calculate the absolute maximum number of results that should be returned by this query (MBQL or native), useful for\n  doing the equivalent of\n\n    java.sql.Statement statement = ...;\n    statement.setMaxRows(<max-rows-limit>).\n\n  to ensure the DB cursor or equivalent doesn't fetch more rows than will be consumed.\n\n  This is calculated as follows:\n\n  *  If query is `MBQL` and has a `:limit` or `:page` clause, returns appropriate number\n  *  If query has `:constraints` with `:max-results-bare-rows` or `:max-results`, returns the appropriate number\n     *  `:max-results-bare-rows` is returned if set and Query does not have any aggregations\n     *  `:max-results` is returned otherwise\n  *  If none of the above are set, returns `nil`. In this case, you should use something like the Dashboard QP's\n     `max-rows-limit`\"\n  [{{:keys [max-results max-results-bare-rows]}                      :constraints\n    {limit :limit, aggregations :aggregation, {:keys [items]} :page} :query\n    query-type                                                       :type}]\n  (let [safe-min          (fn [& args]\n                            (when-let [args (seq (filter some? args))]\n                              (reduce min args)))\n        mbql-limit        (when (= query-type :query)\n                            (safe-min items limit))\n        constraints-limit (or\n                           (when-not aggregations\n                             max-results-bare-rows)\n                           max-results)]\n    (safe-min mbql-limit constraints-limit)))\n\n(defn- remove-empty [x]\n  (cond\n    (map? x)\n    (not-empty (into {} (for [[k v] x\n                              :let  [v (remove-empty v)]\n                              :when (some? v)]\n                          [k v])))\n\n    (sequential? x)\n    (not-empty (into (empty x) (filter some? (map remove-empty x))))\n\n    :else\n    x))\n\n(s/defn update-field-options :- mbql.s/FieldOrAggregationReference\n  \"Like [[clojure.core/update]], but for the options in a `:field`, `:expression`, or `:aggregation` clause.\"\n  {:arglists '([field-or-ag-ref-or-expression-ref f & args])}\n  [[clause-type id-or-name opts] :- mbql.s/FieldOrAggregationReference f & args]\n  (let [opts (not-empty (remove-empty (apply f opts args)))]\n    ;; `:field` clauses should have a `nil` options map if there are no options. `:aggregation` and `:expression`\n    ;; should get the arg removed if it's `nil` or empty. (For now. In the future we may change this if we make the\n    ;; 3-arg versions the \"official\" normalized versions.)\n    (cond\n      opts                   [clause-type id-or-name opts]\n      (= clause-type :field) [clause-type id-or-name nil]\n      :else                  [clause-type id-or-name])))\n\n(defn assoc-field-options\n  \"Like [[clojure.core/assoc]], but for the options in a `:field`, `:expression`, or `:aggregation` clause.\"\n  [clause & kvs]\n  (apply update-field-options clause assoc kvs))\n\n(defn with-temporal-unit\n  \"Set the `:temporal-unit` of a `:field` clause to `unit`.\"\n  [[_ _ {:keys [base-type]} :as clause] unit]\n  ;; it doesn't make sense to call this on an `:expression` or `:aggregation`.\n  (assert (is-clause? :field clause))\n  (if (or (not base-type)\n          (mbql.s/valid-temporal-unit-for-base-type? base-type unit))\n    (assoc-field-options clause :temporal-unit unit)\n    #_{:clj-kondo/ignore [:redundant-do]} ; The linter detects that this is redundant in CLJS and warns for it.\n    (do\n      #?(:clj\n         (log/warn (metabase.util.i18n/trs \"{0} is not a valid temporal unit for {1}; not adding to clause {2}\"\n                                           unit base-type (pr-str clause))))\n      clause)))\n\n(defn remove-namespaced-options\n  \"Update a `:field`, `:expression` reference, or `:aggregation` reference clause by removing all namespaced keys in the\n  options map. This is mainly for clause equality comparison purposes -- in current usage namespaced keys are used by\n  individual pieces of middleware or driver implementations for tracking little bits of information that should not be\n  considered relevant when comparing clauses for equality.\"\n  [field-or-ref]\n  (update-field-options field-or-ref (partial into {} (remove (fn [[k _]]\n                                                                (qualified-keyword? k))))))\n\n(defn referenced-field-ids\n  \"Find all the `:field` references with integer IDs in `coll`, which can be a full MBQL query, a snippet of MBQL, or a\n  sequence of those things; return a set of Field IDs. Includes Fields referenced indirectly via `:source-field`.\n  Returns `nil` if no IDs are found.\"\n  [coll]\n  (not-empty\n   (into #{}\n         (comp cat (filter some?))\n         (mbql.match/match coll\n           [:field (id :guard integer?) opts]\n           [id (:source-field opts)]))))\n\n#?(:clj\n   (p/import-vars\n    [mbql.match\n     match\n     match-one\n     replace\n     replace-in]))\n","~:reader-features",["^I",["~:cljs-release","~:cljs"]],"~:cljc",true,"~:source-map-compact",["^ ","mappings","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","names",["metabase.mbql.util/qualified-name","x","and__5043__auto__","cljs.core/Keyword","cljs.core/namespace","cljs.core/name","output-schema47842","input-schema47844","schema.core/one","ret__34795__auto__","schema.utils/declare-class-schema!","schema.utils/fn-schema-bearer","schema.core/->FnSchema","metabase.mbql.util/normalize-token","schema.core/Keyword","token","metabase.mbql.schema.helpers/KeywordOrString","clojure.string/lower-case","clojure.string/replace","cljs.core.keyword","metabase.mbql.util/mbql-clause?","cljs.core/sequential?","cljs.core/map-entry?","cljs.core/first","metabase.mbql.util/is-clause?","k-or-ks","cljs.core/coll?","G__47849","fexpr__47848","cljs.core/set","cljs.core._EQ_","metabase.mbql.util/combine-compound-filters-of-type","compound-type","subclauses","p1__47850#","cljs.core.mapcat","cljs.core/seq","cljs.core.filter","cljs.core/some?","&parents","&match","cljs.core/vector?","cljs.core/count","&match_left__47857","cljs.core.subvec","&match_left__47857_0__47862","cljs.core.nth","cljs.core.match/backtrack","e47867","js/Error","e__46040__auto__","e47865","e47864","cljs.core.partial","cljs.core/=","args","metabase.mbql.util/simplify-compound-filter","filter-clause","fexpr__47973","metabase.mbql.util.match.impl/match-with-pred-or-class","replace-47872","e47905","e47906","&match_left__47879","&match_right__47880","e47972","e47971","e47908","e47909","&match_0__47881","cljs.core/keyword-identical?","e47969","e47970","e47910","&match_left__47882","&match_left__47882_0__47884","fexpr__47967","&match_right__47883","e47968","e47966","e47965","e47911","&match_0__47885","&match_1__47886","&match_1__47886_left__47887","&match_1__47886_left__47887_0__47889","p1__47869#","cljs.core/PersistentVector","e47961","p1__47870#","e47962","e47960","e47959","e47953","e47954","e47956","e47912","&match_left__47890","&match_left__47890_0__47892","&match_right__47891","e47949","e47925","e47941","e47926","fexpr__47935","p1__47871#","e47936","e47931","e47924","e47913","&match_0__47893","&match_1__47894","&match_1__47894_0__47898","e47923","e47922","e47921","e47914","&match_left__47900","&match_left__47900_0__47902","e47920","e47918","e47915","metabase.mbql.util.match.impl/replace-in-collection","cljs.core/seq?","cljs.core/vec","cljs.core/every?","cljs.core/nil?","clause-name","cljs.core/some","cljs.core.apply","cljs.core/vector","cljs.core/filterv","cljs.core.map","arg","clause","cljs.core/not","cljs.core/distinct?","cljs.core.distinct","output-schema47974","input-schema47976","schema.core/Any","var_args","args__5775__auto__","len__5769__auto__","i__5770__auto__","argseq__5776__auto__","cljs.core/IndexedSeq","metabase.mbql.util/combine-filter-clauses","seq47979","G__47980","cljs.core/next","self__5754__auto__","metabase.mbql.schema/Filter","more-filter-clauses","cljs.core/cons","output-schema47984","input-schema47986","metabase.mbql.util/add-filter-clause-to-inner-query","metabase.mbql.schema/MBQLQuery","inner-query","new-clause","schema.core/maybe","cljs.core.update","output-schema47989","input-schema47991","metabase.mbql.util/add-filter-clause","metabase.mbql.schema/Query","outer-query","metabase.mbql.util/desugar-inside","m","&match_0__47996","e48004","e48003","replace-47994","lat-field","lon-field","lat-max","lon-min","lat-min","lon-max","metabase.mbql.util/desugar-is-null-and-not-null","&match_0__48007","e48010","e48011","e48009","replace-48005","field","metabase.mbql.util/desugar-is-empty-and-not-empty","&match_0__48014","e48017","e48018","e48016","replace-48012","metabase.mbql.util/replace-field-or-expression","unit","&match_0__48021","e48029","e48026","&match_0__48024","e48028","e48027","replace-48019","id-or-name","opts","cljs.core.assoc","expression-name","metabase.mbql.util/desugar-time-interval","&match_0__48039","replace-48030","e48065","e48048","&match_0__48043","&match_2__48045","e48051","e48052","e48053","fexpr__48063","&match_4__48047","e48064","e48054","fexpr__48061","e48062","e48055","fexpr__48060","e48056","e48059","e48057","e48058","e48050","e48049","field-or-expression","n","options","metabase.mbql.util/desugar-does-not-contain","&match_left__48068","&match_left__48068_0__48070","e48073","e48072","e48071","replace-48066","cljs.core.into","metabase.mbql.util/desugar-equals-and-not-equals-with-extra-args","&match_left__48076","&match_left__48076_0__48078","iter__5523__auto__","s__48091","cljs.core/LazySeq","temp__5804__auto__","cljs.core/chunked-seq?","c__5521__auto__","size__5522__auto__","b__48093","cljs.core/chunk-buffer","i__48092","cljs.core/-nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__48090","cljs.core/chunk-rest","cljs.core/rest","e48084","s__48087","b__48089","i__48088","iter__48086","e48085","e48083","e48082","replace-48074","y","more","cljs.core.concat","metabase.mbql.util/desugar-current-relative-datetime","&match_left__48096","&match_right__48097","or__5045__auto__","&match_0__48106","&match_2__48108","cljs.core/PROTOCOL_SENTINEL","cljs.core/native-satisfies?","cljs.core/ILookup","&match_2__48108_temporal-unit__48111","cljs.core.get","cljs.core.not_EQ_","e48116","e48114","e48113","e48112","metabase.mbql.util.match.impl/match-in-collection","match-48103","&match_0__48119","&match_1__48120","e48123","e48122","e48121","replace-48117","e48102","e48101","e48100","replace-48094","temporal-unit","metabase.mbql.util/temporal-extract-ops->unit","metabase.mbql.util/temporal-extract-ops","cljs.core/keys","metabase.mbql.util/desugar-temporal-extract","&match_left__48126","&match_left__48126_0__48128","G__48133","e48132","e48131","e48130","replace-48124","op","metabase.mbql.util/desugar-divide-with-extra-args","expression","&match_left__48136","&match_left__48136_0__48138","replace-48134","e48144","e48143","e48142","z","output-schema48145","input-schema48147","metabase.mbql.util/desugar-expression","metabase.mbql.schema/FieldOrExpressionDef","metabase.mbql.util/maybe-desugar-expression","G__48150","metabase.mbql.predicates/FieldOrExpressionDef?","output-schema48151","input-schema48153","metabase.mbql.util/desugar-filter-clause","method-table__5642__auto__","cljs.core.atom","prefer-table__5643__auto__","method-cache__5644__auto__","cached-hierarchy__5645__auto__","hierarchy__5646__auto__","fexpr__48156","cljs.core/MultiFn","cljs.core.symbol","metabase.mbql.util/negate*","p__48157","vec__48158","_","subclause","p__48161","vec__48162","seq__48163","first__48164","p__48165","vec__48166","seq__48167","first__48168","p__48169","vec__48170","value","p__48173","vec__48174","p__48177","vec__48178","p__48181","vec__48182","p__48185","vec__48186","p__48189","vec__48190","p__48193","vec__48194","min","max","output-schema48197","input-schema48199","metabase.mbql.util/negate-filter-clause","output-schema48202","input-schema48204","p__48207","map__48208","cljs.core/--destructure-map","map__48209","metabase.mbql.util/query->source-table-id","metabase.mbql.schema.helpers/IntGreaterThanZero","source-table-id","source-query","query-type","query","cljs.core.every_pred","cljs.core/string?","cljs.core/re-matches","metabase.mbql.schema/source-table-card-id-regex","cljs.core.ex_info","metabase.shared.util.i18n/js-i18n","output-schema48210","input-schema48212","metabase.mbql.util/join->source-table-id","join","output-schema48215","input-schema48217","p__48220","vec__48221","vec__48224","metabase.mbql.util/add-order-by-clause","_field","order-by-clause","metabase.mbql.schema/OrderBy","existing-fields","s__48228","b__48230","i__48229","vec__48231","vec__48234","iter__48227","vec__48237","vec__48240","cljs.core.comp","cljs.core/distinct","cljs.core/conj","G__48244","metabase.mbql.util/dispatch-by-clause-name-or-class","cljs.core/type","metabase.mbql.util.dispatch_by_clause_name_or_class","output-schema48245","input-schema48247","metabase.mbql.util/expression-with-name","schema.core.cond_pre","metabase.mbql.schema.helpers/NonBlankString","allowed-names","G__48251","map__48252","map__48254","expressions","found","cljs.core/get","metabase.shared.util.i18n.js_i18n","output-schema48255","input-schema48257","input-schema48260","G__48264","metabase.mbql.util/aggregation-at-index","schema.core/make-fn-schema","metabase.mbql.schema/Aggregation","index","metabase.mbql.util.aggregation_at_index","metabase.mbql.schema.helpers/IntGreaterThanOrEqualToZero","nesting-level","cljs.core.get_in","metabase.mbql.util/ga-id?","id","cljs.core/boolean","cljs.core.some_fn","cljs.core/keyword?","cljs.core/re-find","p__48265","vec__48266","metabase.mbql.util/ga-metric-or-segment?","metabase.mbql.util/unique-name-generator","p__48270","map__48271","seq48269","self__5755__auto__","name-key-fn","unique-alias-fn","cljs.core/identity","original","suffix","id+original->unique","original->count","alias","metabase$mbql$util$generate_name","cljs.core.gensym","name-key","G__48273","fexpr__48272","cljs.core/deref","total-count","cljs.core.swap_BANG_","cljs.core/update","cljs.core.fnil","cljs.core/inc","cljs.core/assoc","candidate","G__48274","G__48275","output-schema48276","input-schema48278","metabase.mbql.util/uniquify-names","schema.core.constrained","schema.core/Str","names","metabase.mbql.util/NamedAggregation","p1__48281#","metabase.mbql.schema/aggregation-options","metabase.mbql.util/UniquelyNamedAggregations","clauses","s__48283","b__48285","i__48284","vec__48286","map__48289","iter__48282","vec__48290","map__48293","ag-name","output-schema48294","input-schema48296","metabase.mbql.util/uniquify-named-aggregations","named-aggregations","unique-names","s__48300","b__48302","i__48301","vec__48303","map__48306","iter__48299","vec__48307","map__48310","_wrapped-ag","p__48311","vec__48312","wrapped-ag","unique-name","output-schema48315","input-schema48317","metabase.mbql.util/pre-alias-aggregations","aggregation->name-fn","schema.core.pred","cljs.core/fn?","aggregations","&match_0__48326","&match_2__48328","e48337","e48336","e48332","&match_left__48329","&match_left__48329_0__48331","e48335","e48334","e48333","replace-48320","output-schema48338","input-schema48340","metabase.mbql.util/pre-alias-and-uniquify-aggregations","p__48343","map__48344","map__48345","map__48346","map__48347","metabase.mbql.util/query->max-rows-limit","max-results","max-results-bare-rows","limit","items","safe-min","cljs.core.reduce","cljs.core/min","mbql-limit","constraints-limit","metabase.mbql.util/remove-empty","cljs.core/map?","cljs.core/not-empty","s__48349","b__48351","i__48350","vec__48352","iter__48348","vec__48355","k","v","cljs.core/empty","output-schema48358","input-schema48360","metabase.mbql.util/update-field-options","p__48366","vec__48367","seq48363","G__48364","G__48365","metabase.mbql.schema/FieldOrAggregationReference","clause-type","f","metabase.mbql.util/assoc-field-options","seq48370","G__48371","kvs","p__48372","vec__48373","map__48376","metabase.mbql.util/with-temporal-unit","base-type","metabase.mbql.schema.valid_temporal_unit_for_base_type_QMARK_","metabase.mbql.util.assoc_field_options","metabase.mbql.util/remove-namespaced-options","field-or-ref","cljs.core/into","cljs.core.remove","p__48377","vec__48378","cljs.core/qualified-keyword?","metabase.mbql.util/referenced-field-ids","coll","cljs.core/cat","&match_0__48383","&match_1__48384","e48388","e48387","e48386","match-48381","cljs.core/integer?","cljs.core/chunk-first"]],"~:used-vars",["^I",["~$cljs.core/mapcat","~$cljs.core/--destructure-map","~$metabase.mbql.util/replace-field-or-expression","~$cljs.core/some?","~$cljs.core.match/backtrack","~$cljs.core/PROTOCOL_SENTINEL","~$cljs.core/comp","~$cljs.core/rest","~$schema.core/Any","~$schema.core/->FnSchema","~$cljs.core/keyword","~$metabase.mbql.util/with-temporal-unit","~$cljs.core/MultiFn","~$cljs.core/sequential?","~$cljs.core/keyword?","~$metabase.mbql.util/simplify-compound-filter","~$metabase.mbql.util/desugar-divide-with-extra-args","~$metabase.mbql.util/unique-name-generator","~$cljs.core/vector?","~$metabase.mbql.util/assoc-field-options","~$cljs.core/filter","~$cljs.core/=","~$cljs.core/keys","~$cljs.core/re-matches","~$cljs.core/partial","~$cljs.core/IndexedSeq","~$metabase.mbql.util/desugar-filter-clause","~$metabase.mbql.schema/MBQLQuery","~$cljs.core/count","~$cljs.core/deref","~$metabase.mbql.schema/Aggregation","~$metabase.mbql.util/query->max-rows-limit","~$metabase.mbql.util/desugar-equals-and-not-equals-with-extra-args","~$cljs.core/reduce","~$cljs.core/seq","~$cljs.core/chunk-first","~$cljs.core/apply","~$metabase.mbql.util/maybe-desugar-expression","~$metabase.mbql.schema/Query","~$cljs.core/identity","~$cljs.core/Keyword","~$metabase.mbql.util/desugar-is-null-and-not-null","~$cljs.core/map-entry?","~$metabase.mbql.util/referenced-field-ids","~$cljs.core/chunk","~$cljs.core/not=","~$metabase.mbql.util/is-clause?","~$cljs.core/distinct","~$cljs.core/string?","~$metabase.mbql.predicates/FieldOrExpressionDef?","~$cljs.core/keyword-identical?","~$cljs.core/LazySeq","~$cljs.core/chunk-rest","~$cljs.core/atom","~$metabase.mbql.util.match.impl/replace-in-collection","~$cljs.core/qualified-keyword?","~$cljs.core/concat","~$schema.utils/fn-schema-bearer","~$cljs.core/set","~$metabase.mbql.util/add-filter-clause","~$metabase.mbql.util/temporal-extract-ops","~$cljs.core/native-satisfies?","~$metabase.mbql.util/add-filter-clause-to-inner-query","~$cljs.core/fnil","~$metabase.mbql.schema.helpers/KeywordOrString","~$metabase.mbql.util/temporal-extract-ops->unit","~$metabase.mbql.util/combine-compound-filters-of-type","~$cljs.core/into","~$metabase.mbql.util/mbql-clause?","~$cljs.core/map?","~$cljs.core/conj","~$metabase.mbql.util/remove-empty","~$cljs.core/update","~$cljs.core/namespace","~$cljs.core/map","~$cljs.core/fn?","~$metabase.mbql.util/uniquify-named-aggregations","~$cljs.core/filterv","~$cljs.core/PersistentVector","~$cljs.core/get-in","~$metabase.mbql.schema/aggregation-options","~$cljs.core/empty","~$cljs.core/swap!","~$cljs.core/-add-method","~$metabase.mbql.util/combine-filter-clauses","~$cljs.core/get","~$metabase.mbql.schema.helpers/IntGreaterThanOrEqualToZero","~$cljs.core/integer?","~$metabase.mbql.util/desugar-is-empty-and-not-empty","~$cljs.core/chunk-append","~$cljs.core/-nth","~$cljs.core/remove","~$schema.core/one","~$metabase.mbql.util/NamedAggregation","~$metabase.mbql.util/expression-with-name","~$metabase.mbql.schema/valid-temporal-unit-for-base-type?","~$cljs.core/not-empty","~$schema.core/maybe","~$metabase.mbql.util/query->source-table-id","~$cljs.core/cat","~$metabase.mbql.util/add-order-by-clause","~$metabase.mbql.util/desugar-temporal-extract","~$cljs.core/symbol","~$metabase.mbql.util/normalize-token","~$cljs.core/distinct?","~$metabase.mbql.schema.helpers/IntGreaterThanZero","~$metabase.mbql.util/negate-filter-clause","~$metabase.mbql.schema/FieldOrExpressionDef","~$cljs.core/min","~$cljs.core/re-find","~$metabase.mbql.util/uniquify-names","~$metabase.mbql.util/qualified-name","~$cljs.core/subvec","~$metabase.mbql.schema.helpers/NonBlankString","~$cljs.core/nil?","~$metabase.shared.util.i18n/js-i18n","~$metabase.mbql.util/update-field-options","~$metabase.mbql.util/desugar-inside","~$cljs.core/nth","~$cljs.core/ex-info","~$clojure.string/replace","~$metabase.mbql.schema/Filter","~$metabase.mbql.schema/source-table-card-id-regex","~$metabase.mbql.util/pre-alias-and-uniquify-aggregations","~$clojure.string/lower-case","~$cljs.core/next","~$cljs.core/vec","~$metabase.mbql.util/aggregation-at-index","~$metabase.mbql.util/negate*","~$metabase.mbql.util/pre-alias-aggregations","~$cljs.core/chunk-cons","~$schema.core/pred","~$cljs.core/not","~$schema.core/constrained","~$cljs.core/cons","~$schema.core/cond-pre","~$metabase.mbql.util/desugar-current-relative-datetime","~$cljs.core/assoc","~$metabase.mbql.util/join->source-table-id","~$metabase.mbql.util.match.impl/match-with-pred-or-class","~$metabase.mbql.util/UniquelyNamedAggregations","~$cljs.core/chunk-buffer","~$metabase.mbql.util/ga-metric-or-segment?","~$schema.core/make-fn-schema","~$cljs.core/coll?","~$schema.core/Str","~$schema.core/Keyword","~$metabase.mbql.util/ga-id?","~$metabase.mbql.schema/OrderBy","~$schema.utils/declare-class-schema!","~$cljs.core/some-fn","~$metabase.mbql.util/desugar-time-interval","~$cljs.core/gensym","~$cljs.core/first","~$cljs.core/seq?","~$metabase.mbql.util/desugar-expression","~$metabase.mbql.util/dispatch-by-clause-name-or-class","~$cljs.core/name","~$cljs.core/every?","~$cljs.core/every-pred","~$js/Error","~$cljs.core/vector","~$cljs.core/boolean","~$cljs.core/type","~$metabase.mbql.util.match.impl/match-in-collection","~$cljs.core/inc","~$cljs.core/ILookup","~$cljs.core/some","~$metabase.mbql.util/desugar-does-not-contain","~$metabase.mbql.schema/FieldOrAggregationReference","~$cljs.core/chunked-seq?","~$metabase.mbql.util/remove-namespaced-options"]]],"~:cache-keys",["~#cmap",[["^1B","camel_snake_kebab/internals/misc.cljc"],["5ae08f83ceb8959971e6334596bff0214bf6fdf2","~:shadow.build.compiler/resolve",["^ ","~:require-id",null,"~:deps-ids",["^I",[]],"~:deps-syms",["^Z","^@","~$camel-snake-kebab.internals.string-separator","^12"]]],["^1B","goog/dom/tagname.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^5M",["^ ","^5N",null,"^5O",["^I",[]],"^5P",["^Z","~$goog.dom.HtmlElement"]]],["^1B","metabase/shared/util/i18n.cljs"],["6c3c8615004b349dae9851ed547d516d45e04bd0","^5M",["^ ","^5N",null,"^5O",["^I",[]],"^5P",["^Z","^@","~$shadow.js.shim.module$ttag","^12"]]],["^1B","goog/labs/useragent/platform.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^5M",["^ ","^5N",null,"^5O",["^I",[]],"^5P",["^Z","~$goog.string.internal","~$goog.labs.userAgent.util","~$goog.labs.userAgent.highEntropy.highEntropyValue","~$goog.labs.userAgent.highEntropy.highEntropyData","~$goog.labs.userAgent"]]],["^1B","metabase/types.cljc"],["00232bf78b259e26a21c218c8f2d746ba7003a15","^5M",["^ ","^5N",null,"^5O",["^I",[]],"^5P",["^Z","^@","~$clojure.set","~$metabase.types.coercion-hierarchies","~$metabase.util"]]],["^1B","lambdaisland/glogi.cljs"],["76286836d4172602aa08006b2a754dda736ffe09","^5M",["^ ","^5N",null,"^5O",["^I",[]],"^5P",["^Z","^@","~$goog.log","~$goog.debug.Console","~$goog.array","^12","~$goog.object","~$goog.debug.FancyWindow","~$goog.debug.DivConsole"]]],["^1B","goog/math/math.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^5M",["^ ","^5N",null,"^5O",["^I",[]],"^5P",["^Z","~$goog.asserts"]]],["^1B","goog/html/trustedtypes.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^5M",["^ ","^5N",null,"^5O",["^I",[]],"^5P",["^Z"]]],["^1B","goog/string/stringformat.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^5M",["^ ","^5N",null,"^5O",["^I",[]],"^5P",["^Z","~$goog.string"]]],["^1B","goog/labs/useragent/browser.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^5M",["^ ","^5N",null,"^5O",["^I",[]],"^5P",["^Z","^5U","^5V","^66","^5T","^5W","^5X"]]],["^1B","goog/html/safeurl.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^5M",["^ ","^5N",null,"^5O",["^I",[]],"^5P",["^Z","^66","~$goog.fs.url","~$goog.html.TrustedResourceUrl","~$goog.string.Const","~$goog.string.TypedString","^5T"]]],["^1B","goog/style/style.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^5M",["^ ","^5N",null,"^5O",["^I",[]],"^5P",["^Z","^66","~$goog.dom","~$goog.dom.NodeType","~$goog.dom.TagName","~$goog.dom.safe","~$goog.dom.vendor","~$goog.html.SafeStyleSheet","~$goog.math.Box","~$goog.math.Coordinate","~$goog.math.Rect","~$goog.math.Size","^63","~$goog.reflect","^67","~$goog.userAgent"]]],["^1B","goog/array/array.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^5M",["^ ","^5N",null,"^5O",["^I",[]],"^5P",["^Z","^66"]]],["~:shadow.build.js-support/require","moment"],["~$shadow.js.shim.module$moment","shadow.js.shim.module$moment.js","require","^5M",["^ ","^5N",null,"^5O",["^I",[]],"^5P",["^Z"]]],["^6H","moment-timezone"],["~$shadow.js.shim.module$moment_timezone","shadow.js.shim.module$moment_timezone.js","require","^5M",["^ ","^5N",null,"^5O",["^I",[]],"^5P",["^Z"]]],["^1B","metabase/mbql/schema/macros.cljs"],["2af09bd42ffb1e15b66723cf7ba15db7dc75d10b","^5M",["^ ","^5N",null,"^5O",["^I",[]],"^5P",["^Z","^@"]]],["^1B","goog/useragent/useragent.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^5M",["^ ","^5N",null,"^5O",["^I",[]],"^5P",["^Z","~$goog.labs.userAgent.browser","~$goog.labs.userAgent.engine","~$goog.labs.userAgent.platform","^5U","^6F","^5T"]]],["^1B","goog/debug/error.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^5M",["^ ","^5N",null,"^5O",["^I",[]],"^5P",["^Z"]]],["^1B","goog/flags/flags.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^5M",["^ ","^5N",null,"^5O",["^I",[]],"^5P",["^Z"]]],["^1B","net/cgrand/macrovich.cljc"],["abcb26cbfe0f8eef363b25525210c0fe1eb1f693","^5M",["^ ","^5N",null,"^5O",["^I",[]],"^5P",["^Z","^@"]]],["^1B","schema/spec/variant.cljc"],["0dacc3066a87f33088c9a332b6c21e8b0560011c","^5M",["^ ","^5N",null,"^5O",["^I",[]],"^5P",["^Z","^@","~$schema.utils","~$schema.spec.core"]]],["^1B","goog/structs/circularbuffer.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^5M",["^ ","^5N",null,"^5O",["^I",[]],"^5P",["^Z"]]],["^1B","weavejester/dependency.cljc"],["7fd7f8879313f6a7e295f7447e668bdf492c42c1","^5M",["^ ","^5N",null,"^5O",["^I",[]],"^5P",["^Z","^@","^5Y"]]],["^1B","goog/dom/nodetype.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^5M",["^ ","^5N",null,"^5O",["^I",[]],"^5P",["^Z"]]],["^1B","goog/labs/useragent/highentropy/highentropyvalue.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^5M",["^ ","^5N",null,"^5O",["^I",[]],"^5P",["^Z","^5U","^5T"]]],["^1B","cljs/pprint.cljs"],["bc14df6666853ed869d7b88aaa864111c65d0c7f","^5M",["^ ","^5N",null,"^5O",["^I",[]],"^5P",["^Z","^@","^12","^67","~$goog.string.StringBuffer"]]],["^1B","camel_snake_kebab/internals/string_separator.cljc"],["5ae08f83ceb8959971e6334596bff0214bf6fdf2","^5M",["^ ","^5N",null,"^5O",["^I",[]],"^5P",["^Z","^@","^12"]]],["^1B","goog/string/typedstring.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^5M",["^ ","^5N",null,"^5O",["^I",[]],"^5P",["^Z"]]],["^1B","goog/object/object.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^5M",["^ ","^5N",null,"^5O",["^I",[]],"^5P",["^Z"]]],["^1B","goog/dom/asserts.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^5M",["^ ","^5N",null,"^5O",["^I",[]],"^5P",["^Z","^66"]]],"~:SHADOW-TIMESTAMP",[1689947046000,1689947046000,1689947050000],["^1B","goog/math/long.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^5M",["^ ","^5N",null,"^5O",["^I",[]],"^5P",["^Z","^66","^6F"]]],["^1B","goog/html/trustedresourceurl.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^5M",["^ ","^5N",null,"^5O",["^I",[]],"^5P",["^Z","^66","~$goog.fs.blob","^68","~$goog.html.SafeScript","~$goog.html.trustedtypes","^6:","^6;"]]],["^1B","schema/spec/leaf.cljc"],["0dacc3066a87f33088c9a332b6c21e8b0560011c","^5M",["^ ","^5N",null,"^5O",["^I",[]],"^5P",["^Z","^@","^6O"]]],["^1B","metabase/util/format.cljc"],["875f86a08288cb3ad5a6f15df988897eaf8613af","^5M",["^ ","^5N",null,"^5O",["^I",[]],"^5P",["^Z","^@","^67"]]],["^1B","goog/math/irect.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^5M",["^ ","^5N",null,"^5O",["^I",[]],"^5P",["^Z"]]],["^1B","goog/math/box.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^5M",["^ ","^5N",null,"^5O",["^I",[]],"^5P",["^Z","^66","^6C"]]],["^1B","goog/string/internal.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^5M",["^ ","^5N",null,"^5O",["^I",[]],"^5P",["^Z"]]],["^1B","goog/functions/functions.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^5M",["^ ","^5N",null,"^5O",["^I",[]],"^5P",["^Z"]]],["^1B","goog/html/safestyle.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^5M",["^ ","^5N",null,"^5O",["^I",[]],"^5P",["^Z","^6:","~$goog.html.SafeUrl","^6;","^66","^5T"]]],["^1B","goog/dom/safe.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^5M",["^ ","^5N",null,"^5O",["^I",[]],"^5P",["^Z","^66","~$goog.asserts.dom","~$goog.dom.asserts","~$goog.functions","~$goog.html.SafeHtml","^6S","~$goog.html.SafeStyle","^6U","^69","~$goog.html.uncheckedconversions","^6:","^5T"]]],["^1B","goog/asserts/dom.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^5M",["^ ","^5N",null,"^5O",["^I",[]],"^5P",["^Z","^6>","^66","~$goog.dom.element"]]],["^1B","medley/core.cljc"],["f5117fa4c15ff14c4a0ab7db414b0f102afb0b8a","^5M",["^ ","^5N",null,"^5O",["^I",[]],"^5P",["^Z","^@"]]],["^1B","clojure/walk.cljs"],["bc14df6666853ed869d7b88aaa864111c65d0c7f","^5M",["^ ","^5N",null,"^5O",["^I",[]],"^5P",["^Z","^@"]]],["^1B","lambdaisland/glogi/console.cljs"],["76286836d4172602aa08006b2a754dda736ffe09","^5M",["^ ","^5N",null,"^5O",["^I",[]],"^5P",["^Z","^@","~$lambdaisland.glogi","~$lambdaisland.glogi.print","^63","^61"]]],["^1B","goog/html/safehtml.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^5M",["^ ","^5N",null,"^5O",["^I",[]],"^5P",["^Z","^6:","^6S","^6Z","^6A","^6U","^6>","^69","^6;","^66","^6K","^62","^63","^5T","~$goog.dom.tags","^6T"]]],["^1B","goog/dom/tags.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^5M",["^ ","^5N",null,"^5O",["^I",[]],"^5P",["^Z","^63"]]],["^1B","goog/math/size.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^5M",["^ ","^5N",null,"^5O",["^I",[]],"^5P",["^Z"]]],["^1B","goog/labs/useragent/engine.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^5M",["^ ","^5N",null,"^5O",["^I",[]],"^5P",["^Z","^62","^5T","^5U"]]],["^1B","goog/fs/blob.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^5M",["^ ","^5N",null,"^5O",["^I",[]],"^5P",["^Z"]]],["^1B","metabase/mbql/schema/helpers.cljc"],["b1f6002b97b59423b504abb666e13c9b0228b768","^5M",["^ ","^5N",null,"^5O",["^I",[]],"^5P",["^Z","^@","^12","~$metabase.types","^U"]]],["^1B","goog/dom/dom.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^5M",["^ ","^5N",null,"^5O",["^I",[]],"^5P",["^Z","^62","^66","^6V","~$goog.dom.BrowserFeature","^6=","^6>","^6?","^6Y","^6[","^6C","^6E","^63","^67","^6:","~$goog.string.Unicode","^6G"]]],["^1B","metabase/util/log.cljs"],["7d8a3bf01eb27c2ba7269dc90dc218e46bcc1d3a","^5M",["^ ","^5N",null,"^5O",["^I",[]],"^5P",["^Z","^@","^60","^67","~$goog.string.format","^71","~$lambdaisland.glogi.console"]]],["^1B","goog/asserts/asserts.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^5M",["^ ","^5N",null,"^5O",["^I",[]],"^5P",["^Z","~$goog.debug.Error","^6="]]],["^1B","goog/debug/relativetimeprovider.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^5M",["^ ","^5N",null,"^5O",["^I",[]],"^5P",["^Z"]]],["^1B","goog/math/rect.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^5M",["^ ","^5N",null,"^5O",["^I",[]],"^5P",["^Z","^66","^6B","^6C","~$goog.math.IRect","^6E"]]],["^1B","flatland/ordered/map.cljs"],["3a9cb9d79e47d77ecd4f4d550371ecf01464c461","^5M",["^ ","^5N",null,"^5O",["^I",[]],"^5P",["^Z","^@"]]],["^1B","goog/uri/uri.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^5M",["^ ","^5N",null,"^5O",["^I",[]],"^5P",["^Z","^62","^66","~$goog.collections.maps","^67","~$goog.structs","~$goog.uri.utils","~$goog.uri.utils.ComponentIndex","~$goog.uri.utils.StandardQueryParam"]]],["^1B","goog/labs/useragent/highentropy/highentropydata.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^5M",["^ ","^5N",null,"^5O",["^I",[]],"^5P",["^Z","^5V"]]],["^1B","metabase/types/coercion_hierarchies.cljc"],["c3d70ef6080e044d61f13ff6bfd76490e2dcd0ac","^5M",["^ ","^5N",null,"^5O",["^I",[]],"^5P",["^Z","^@","^5Y"]]],["^1B","goog/collections/maps.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^5M",["^ ","^5N",null,"^5O",["^I",[]],"^5P",["^Z"]]],["^1B","goog/debug/divconsole.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^5M",["^ ","^5N",null,"^5O",["^I",[]],"^5P",["^Z","~$goog.debug.HtmlFormatter","~$goog.dom.DomHelper","^6>","^6?","^6Y","^6A","^60","^6:","~$goog.style"]]],["^1B","schema/spec/collection.cljc"],["0dacc3066a87f33088c9a332b6c21e8b0560011c","^5M",["^ ","^5N",null,"^5O",["^I",[]],"^5P",["^Z","^@","^6N","^6O"]]],["^1B","schema/utils.cljc"],["0dacc3066a87f33088c9a332b6c21e8b0560011c","^5M",["^ ","^5N",null,"^5O",["^I",[]],"^5P",["^Z","^@","^77","^63","^67","^12"]]],["^1B","cljs/core/match.cljs"],["f419c02deee501e9f4b29f81215ba81ffcefe9b6","^5M",["^ ","^5N",null,"^5O",["^I",[]],"^5P",["^Z","^@"]]],["^1B","goog/debug/fancywindow.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^5M",["^ ","^5N",null,"^5O",["^I",[]],"^5P",["^Z","^62","^66","~$goog.debug.DebugWindow","^7A","^6>","^6?","^6Y","^6A","^60","^63","^67","^6:","^6G"]]],["^1B","goog/debug/formatter.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^5M",["^ ","^5N",null,"^5O",["^I",[]],"^5P",["^Z","~$goog.debug","~$goog.debug.RelativeTimeProvider","^6Y","^6U","^6[","^60","^6:"]]],["^1B","metabase/shared/util/namespaces.cljs"],["00687008abd6eb291bc9d5ff1fff73210e0bbe6e","^5M",["^ ","^5N",null,"^5O",["^I",[]],"^5P",["^Z","^@"]]],["^1B","metabase/mbql/util/match/impl.cljc"],["4150e01975339d308f5cfedda77875eda19c030d","^5M",["^ ","^5N",null,"^5O",["^I",[]],"^5P",["^Z","^@"]]],["^1B","goog/fs/url.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^5M",["^ ","^5N",null,"^5O",["^I",[]],"^5P",["^Z"]]],["^1B","goog/base.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^5M",["^ ","^5N",null,"^5O",["^I",[]],"^5P",[]]],["^1B","goog/structs/structs.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^5M",["^ ","^5N",null,"^5O",["^I",[]],"^5P",["^Z","^62","^63"]]],["^1B","clojure/string.cljs"],["bc14df6666853ed869d7b88aaa864111c65d0c7f","^5M",["^ ","^5N",null,"^5O",["^I",[]],"^5P",["^Z","^@","^67","^6P"]]],["^1B","metabase/util.cljc"],["2eb945a6741f1450ecac08a9087b862ce52b9e3a","^5M",["^ ","^5N",null,"^5O",["^I",[]],"^5P",["^Z","^@","~$camel-snake-kebab.internals.macros","~$clojure.data","^D","^5Y","^12","~$clojure.walk","~$flatland.ordered.map","~$medley.core","^W","~$metabase.shared.util.namespaces","~$metabase.util.format","~$metabase.util.log","~$net.cgrand.macrovich","~$weavejester.dependency"]]],["^1B","camel_snake_kebab/internals/macros.cljc"],["5ae08f83ceb8959971e6334596bff0214bf6fdf2","^5M",["^ ","^5N",null,"^5O",["^I",[]],"^5P",["^Z","^@","~$camel-snake-kebab.internals.alter-name","~$camel-snake-kebab.internals.misc"]]],["^1B","goog/string/string.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^5M",["^ ","^5N",null,"^5O",["^I",[]],"^5P",["^Z","^6?","^6[","^6:","^5T"]]],["^1B","schema/core.cljc"],["0dacc3066a87f33088c9a332b6c21e8b0560011c","^5M",["^ ","^5N",null,"^5O",["^I",[]],"^5P",["^Z","^@","^12","^6N","^6O","~$schema.spec.leaf","~$schema.spec.variant","~$schema.spec.collection"]]],["^1B","metabase/mbql/schema.cljc"],["c51bf2a180ecbc12d6a1cd42a4049323f46a0085","^5M",["^ ","^5N",null,"^5O",["^I",[]],"^5P",["^Z","^@","^6I","^6J","^@","^5Y","^[","~$metabase.mbql.schema.macros","^U"]]],["^1B","metabase/mbql/util/match.cljs"],["d65aaa9fbcb7960b90ba7ca97258b1dc8a40be2b","^5M",["^ ","^5N",null,"^5O",["^I",[]],"^5P",["^Z","^@","^F","~$metabase.mbql.util.match.impl"]]],["^1B","clojure/data.cljs"],["bc14df6666853ed869d7b88aaa864111c65d0c7f","^5M",["^ ","^5N",null,"^5O",["^I",[]],"^5P",["^Z","^@","^5Y"]]],["^1B","goog/reflect/reflect.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^5M",["^ ","^5N",null,"^5O",["^I",[]],"^5P",["^Z"]]],["^1B","goog/labs/useragent/util.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^5M",["^ ","^5N",null,"^5O",["^I",[]],"^5P",["^Z","^5T","^5X"]]],["^1B","goog/debug/debug.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^5M",["^ ","^5N",null,"^5O",["^I",[]],"^5P",["^Z","^62","~$goog.debug.errorcontext"]]],["^1B","goog/string/stringbuffer.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^5M",["^ ","^5N",null,"^5O",["^I",[]],"^5P",["^Z"]]],["^1B","schema/spec/core.cljc"],["0dacc3066a87f33088c9a332b6c21e8b0560011c","^5M",["^ ","^5N",null,"^5O",["^I",[]],"^5P",["^Z","^@","^6N"]]],["^6H","ttag"],["^5S","shadow.js.shim.module$ttag.js","require","^5M",["^ ","^5N",null,"^5O",["^I",[]],"^5P",["^Z"]]],["^1B","goog/math/coordinate.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^5M",["^ ","^5N",null,"^5O",["^I",[]],"^5P",["^Z","~$goog.math"]]],["^1B","goog/debug/errorcontext.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^5M",["^ ","^5N",null,"^5O",["^I",[]],"^5P",["^Z"]]],["^1B","goog/labs/useragent/useragent.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^5M",["^ ","^5N",null,"^5O",["^I",[]],"^5P",["^Z","~$goog.flags"]]],["^1B","goog/dom/element.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^5M",["^ ","^5N",null,"^5O",["^I",[]],"^5P",["^Z","^6=","^6>"]]],["^1B","goog/html/uncheckedconversions.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^5M",["^ ","^5N",null,"^5O",["^I",[]],"^5P",["^Z","^66","^6Y","^6S","^6Z","^6A","^6U","^69","^6:","^5T"]]],["^1B","goog/debug/debugwindow.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^5M",["^ ","^5N",null,"^5O",["^I",[]],"^5P",["^Z","^7@","^6?","^6Y","^6A","^60","^6:","~$goog.structs.CircularBuffer","^6G"]]],["^1B","metabase/mbql/util.cljc"],["2532d5faa94d2a89dd06e529c641d594e298e2aa","^5M",["^ ","^5N",null,"^5O",["^I",[]],"^5P",["^Z","^@","^12","^R","^T","^[","^X","^W","^U"]]],["^1B","goog/dom/htmlelement.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^5M",["^ ","^5N",null,"^5O",["^I",[]],"^5P",["^Z"]]],["^1B","cljs/core.cljs"],["bc14df6666853ed869d7b88aaa864111c65d0c7f","^5M",["^ ","^5N",null,"^5O",["^I",[]],"^5P",["^Z","~$goog.math.Long","~$goog.math.Integer","^67","^63","^62","~$goog.Uri","^6P"]]],["^1B","goog/html/safescript.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^5M",["^ ","^5N",null,"^5O",["^I",[]],"^5P",["^Z","^6:","^6;","^6T","^66"]]],["^1B","goog/log/log.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^5M",["^ ","^5N",null,"^5O",["^I",[]],"^5P",["^Z","^66","^7D"]]],["^1B","camel_snake_kebab/internals/alter_name.cljc"],["5ae08f83ceb8959971e6334596bff0214bf6fdf2","^5M",["^ ","^5N",null,"^5O",["^I",[]],"^5P",["^Z","^@"]]],["^1B","goog/html/safestylesheet.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^5M",["^ ","^5N",null,"^5O",["^I",[]],"^5P",["^Z","^6:","^6Z","^6;","^63","^66","^5T"]]],["^1B","goog/math/integer.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^5M",["^ ","^5N",null,"^5O",["^I",[]],"^5P",["^Z","^6F"]]],["^1B","goog/debug/console.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^5M",["^ ","^5N",null,"^5O",["^I",[]],"^5P",["^Z","~$goog.debug.TextFormatter","^60"]]],["^1B","lambdaisland/glogi/print.cljs"],["76286836d4172602aa08006b2a754dda736ffe09","^5M",["^ ","^5N",null,"^5O",["^I",[]],"^5P",["^Z","^@","^71","^63"]]],["^1B","goog/dom/browserfeature.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^5M",["^ ","^5N",null,"^5O",["^I",[]],"^5P",["^Z","^6G"]]],["^1B","clojure/set.cljs"],["bc14df6666853ed869d7b88aaa864111c65d0c7f","^5M",["^ ","^5N",null,"^5O",["^I",[]],"^5P",["^Z","^@"]]],["^1B","goog/uri/utils.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^5M",["^ ","^5N",null,"^5O",["^I",[]],"^5P",["^Z","^66","^67"]]],["^1B","goog/string/const.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^5M",["^ ","^5N",null,"^5O",["^I",[]],"^5P",["^Z","^66","^6;"]]],["^1B","goog/dom/vendor.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^5M",["^ ","^5N",null,"^5O",["^I",[]],"^5P",["^Z","^67","^6G"]]],["^1B","metabase/mbql/predicates.cljc"],["20ab1a5ccd943c35c646c5f7396ea40f9bfa7ac4","^5M",["^ ","^5N",null,"^5O",["^I",[]],"^5P",["^Z","^@","^T","^U"]]]]],"~:clj-info",["^ ","jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/analyzer/impl.cljc",1689947050000,"jar:file:/root/.m2/repository/instaparse/instaparse/1.4.12/instaparse-1.4.12.jar!/instaparse/line_col.clj",1689946146000,"jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/source_map/base64_vlq.clj",1689947050000,"jar:file:/root/.m2/repository/instaparse/instaparse/1.4.12/instaparse-1.4.12.jar!/instaparse/viz.clj",1689946146000,"jar:file:/root/.m2/repository/org/clojure/tools.namespace/1.4.4/tools.namespace-1.4.4.jar!/clojure/tools/namespace/parse.cljc",1689946139000,"jar:file:/root/.m2/repository/weavejester/dependency/0.2.1/dependency-0.2.1.jar!/weavejester/dependency.cljc",1689946093000,"jar:file:/root/.m2/repository/instaparse/instaparse/1.4.12/instaparse-1.4.12.jar!/instaparse/transform.clj",1689946146000,"jar:file:/root/.m2/repository/ring/ring-codec/1.2.0/ring-codec-1.2.0.jar!/ring/util/codec.clj",1689946172000,"jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/instant.clj",1689947050000,"jar:file:/root/.m2/repository/org/clojure/tools.reader/1.3.6/tools.reader-1.3.6.jar!/clojure/tools/reader/default_data_readers.clj",1689946174000,"jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/pprint.cljc",1689947050000,"jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/externs.clj",1689947050000,"file:/home/gmrworkspace/dashboard/shared/src/metabase/mbql/util/match.clj",1690286812000,"jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/vendor/clojure/tools/reader/default_data_readers.clj",1689947050000,"file:/home/gmrworkspace/dashboard/shared/src/metabase/mbql/schema/helpers.cljc",1692013156305,"jar:file:/root/.m2/repository/prismatic/schema/1.4.1/schema-1.4.1.jar!/schema/core.cljc",1689946172000,"file:/home/gmrworkspace/dashboard/shared/src/metabase/shared/util/i18n.clj",1690286812000,"jar:file:/root/.m2/repository/org/clojure/tools.reader/1.3.6/tools.reader-1.3.6.jar!/clojure/tools/reader/edn.clj",1689946174000,"jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/compiler.cljc",1689947050000,"jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/env.cljc",1689947050000,"jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/analyzer/impl/namespaces.cljc",1689947050000,"jar:file:/root/.m2/repository/prismatic/schema/1.4.1/schema-1.4.1.jar!/schema/macros.clj",1689946172000,"file:/home/gmrworkspace/dashboard/src/metabase/util/i18n/plural.clj",1690286813000,"jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/source_map.clj",1689947050000,"jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/util.cljc",1689947050000,"file:/home/gmrworkspace/dashboard/src/metabase/util.cljc",1690286813000,"jar:file:/root/.m2/repository/nano-id/nano-id/1.0.0/nano-id-1.0.0.jar!/nano_id/core.cljc",1689946171000,"file:/home/gmrworkspace/dashboard/src/metabase/plugins/classloader.clj",1692013156125,"jar:file:/root/.m2/repository/medley/medley/1.4.0/medley-1.4.0.jar!/medley/core.cljc",1689946185000,"jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/analyzer.cljc",1689947050000,"jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/analyzer/passes.cljc",1689947050000,"jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/vendor/clojure/data/json.clj",1689947050000,"file:/home/gmrworkspace/dashboard/src/metabase/util/format.cljc",1690286813000,"jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/source_map/base64.clj",1689947050000,"jar:file:/root/.m2/repository/riddley/riddley/0.2.0/riddley-0.2.0.jar!/riddley/walk.clj",1689946160000,"jar:file:/root/.m2/repository/instaparse/instaparse/1.4.12/instaparse-1.4.12.jar!/instaparse/reduction.clj",1689946146000,"jar:file:/root/.m2/repository/org/tcrawley/dynapath/1.1.0/dynapath-1.1.0.jar!/dynapath/util.clj",1689946174000,"jar:file:/root/.m2/repository/camel-snake-kebab/camel-snake-kebab/0.4.3/camel-snake-kebab-0.4.3.jar!/camel_snake_kebab/internals/macros.cljc",1689946178000,"file:/home/gmrworkspace/dashboard/shared/src/metabase/mbql/util/match/impl.cljc",1690286812000,"jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/vendor/clojure/tools/reader/reader_types.clj",1689947050000,"jar:file:/root/.m2/repository/instaparse/instaparse/1.4.12/instaparse-1.4.12.jar!/instaparse/auto_flatten_seq.clj",1689946146000,"jar:file:/root/.m2/repository/instaparse/instaparse/1.4.12/instaparse-1.4.12.jar!/instaparse/core.clj",1689946146000,"jar:file:/root/.m2/repository/org/clojure/core.cache/1.0.225/core.cache-1.0.225.jar!/clojure/core/cache.clj",1689946183000,"jar:file:/root/.m2/repository/potemkin/potemkin/0.4.6/potemkin-0.4.6.jar!/potemkin/types.clj",1689946176000,"jar:file:/root/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/set.clj",1689946092000,"jar:file:/root/.m2/repository/org/clojure/math.numeric-tower/0.0.5/math.numeric-tower-0.0.5.jar!/clojure/math/numeric_tower.clj",1689946148000,"jar:file:/root/.m2/repository/net/cgrand/macrovich/0.2.1/macrovich-0.2.1.jar!/net/cgrand/macrovich.cljc",1689946165000,"jar:file:/root/.m2/repository/colorize/colorize/0.1.1/colorize-0.1.1.jar!/colorize/core.clj",1689946104000,"jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/vendor/clojure/tools/reader/impl/inspect.clj",1689947050000,"jar:file:/root/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/string.clj",1689946092000,"jar:file:/root/.m2/repository/potemkin/potemkin/0.4.6/potemkin-0.4.6.jar!/potemkin.clj",1689946176000,"jar:file:/root/.m2/repository/instaparse/instaparse/1.4.12/instaparse-1.4.12.jar!/instaparse/failure.clj",1689946146000,"jar:file:/root/.m2/repository/prismatic/schema/1.4.1/schema-1.4.1.jar!/schema/spec/variant.cljc",1689946172000,"jar:file:/root/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/core.clj",1689946092000,"file:/home/gmrworkspace/dashboard/src/metabase/util/i18n/impl.clj",1692013156125,"jar:file:/root/.m2/repository/org/clojure/tools.namespace/1.4.4/tools.namespace-1.4.4.jar!/clojure/tools/namespace/dependency.cljc",1689946139000,"jar:file:/root/.m2/repository/prismatic/schema/1.4.1/schema-1.4.1.jar!/schema/spec/leaf.cljc",1689946172000,"jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/analyzer/passes/and_or.cljc",1689947050000,"jar:file:/root/.m2/repository/riddley/riddley/0.2.0/riddley-0.2.0.jar!/riddley/compiler.clj",1689946160000,"jar:file:/root/.m2/repository/org/clojure/core.memoize/1.0.257/core.memoize-1.0.257.jar!/clojure/core/memoize.clj",1689946178000,"jar:file:/root/.m2/repository/instaparse/instaparse/1.4.12/instaparse-1.4.12.jar!/instaparse/print.clj",1689946146000,"jar:file:/root/.m2/repository/org/clojure/tools.namespace/1.4.4/tools.namespace-1.4.4.jar!/clojure/tools/namespace/track.cljc",1689946139000,"jar:file:/root/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/pprint.clj",1689946092000,"jar:file:/root/.m2/repository/org/clojure/java.classpath/1.0.0/java.classpath-1.0.0.jar!/clojure/java/classpath.clj",1689946162000,"jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/js_deps.cljc",1689947050000,"jar:file:/root/.m2/repository/cheshire/cheshire/5.11.0/cheshire-5.11.0.jar!/cheshire/factory.clj",1689946173000,"jar:file:/root/.m2/repository/org/clojure/tools.reader/1.3.6/tools.reader-1.3.6.jar!/clojure/tools/reader/impl/errors.clj",1689946174000,"jar:file:/root/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/walk.clj",1689946092000,"jar:file:/root/.m2/repository/org/clojure/tools.reader/1.3.6/tools.reader-1.3.6.jar!/clojure/tools/reader.clj",1689946174000,"jar:file:/root/.m2/repository/prismatic/schema/1.4.1/schema-1.4.1.jar!/schema/spec/core.cljc",1689946172000,"jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/core.cljc",1689947050000,"jar:file:/root/.m2/repository/cheshire/cheshire/5.11.0/cheshire-5.11.0.jar!/cheshire/generate.clj",1689946173000,"jar:file:/root/.m2/repository/org/clojure/tools.reader/1.3.6/tools.reader-1.3.6.jar!/clojure/tools/reader/reader_types.clj",1689946174000,"jar:file:/root/.m2/repository/cheshire/cheshire/5.11.0/cheshire-5.11.0.jar!/cheshire/parse.clj",1689946173000,"file:/home/gmrworkspace/dashboard/src/metabase/util/i18n.clj",1692013156125,"jar:file:/root/.m2/repository/instaparse/instaparse/1.4.12/instaparse-1.4.12.jar!/instaparse/cfg.clj",1689946146000,"jar:file:/root/.m2/repository/cheshire/cheshire/5.11.0/cheshire-5.11.0.jar!/cheshire/core.clj",1689946173000,"jar:file:/root/.m2/repository/instaparse/instaparse/1.4.12/instaparse-1.4.12.jar!/instaparse/gll.clj",1689946146000,"jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/vendor/clojure/tools/reader.clj",1689947050000,"jar:file:/root/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/edn.clj",1689946092000,"jar:file:/root/.m2/repository/nano-id/nano-id/1.0.0/nano-id-1.0.0.jar!/nano_id/random.cljc",1689946171000,"jar:file:/root/.m2/repository/environ/environ/1.2.0/environ-1.2.0.jar!/environ/core.cljc",1689946163000,"jar:file:/root/.m2/repository/prismatic/schema/1.4.1/schema-1.4.1.jar!/schema/spec/collection.cljc",1689946172000,"jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/vendor/clojure/tools/reader/impl/errors.clj",1689947050000,"jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/tagged_literals.cljc",1689947050000,"jar:file:/root/.m2/repository/instaparse/instaparse/1.4.12/instaparse-1.4.12.jar!/instaparse/repeat.clj",1689946146000,"jar:file:/root/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/java/io.clj",1689946092000,"jar:file:/root/.m2/repository/com/lambdaisland/glogi/1.2.164/glogi-1.2.164.jar!/lambdaisland/glogi.clj",1689947043000,"jar:file:/root/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/instant.clj",1689946092000,"file:/home/gmrworkspace/dashboard/shared/src/metabase/shared/util/namespaces.clj",1690286812000,"jar:file:/root/.m2/repository/org/clojure/tools.namespace/1.4.4/tools.namespace-1.4.4.jar!/clojure/tools/namespace/file.clj",1689946139000,"jar:file:/root/.m2/repository/org/clojure/core.match/1.0.1/core.match-1.0.1.jar!/cljs/core/match.clj",1689946174000,"file:/home/gmrworkspace/dashboard/shared/src/metabase/mbql/schema/macros.clj",1690286812000,"jar:file:/root/.m2/repository/prismatic/schema/1.4.1/schema-1.4.1.jar!/schema/utils.cljc",1689946172000,"file:/home/gmrworkspace/dashboard/src/metabase/config.clj",1692013154929,"file:/home/gmrworkspace/dashboard/src/metabase/util/log.clj",1690286813000,"jar:file:/root/.m2/repository/org/clojure/tools.reader/1.3.6/tools.reader-1.3.6.jar!/clojure/tools/reader/impl/inspect.clj",1689946174000,"jar:file:/root/.m2/repository/instaparse/instaparse/1.4.12/instaparse-1.4.12.jar!/instaparse/combinators_source.clj",1689946146000,"jar:file:/root/.m2/repository/instaparse/instaparse/1.4.12/instaparse-1.4.12.jar!/instaparse/abnf.clj",1689946146000,"jar:file:/root/.m2/repository/org/clojure/tools.namespace/1.4.4/tools.namespace-1.4.4.jar!/clojure/tools/namespace/find.clj",1689946139000,"jar:file:/root/.m2/repository/org/tcrawley/dynapath/1.1.0/dynapath-1.1.0.jar!/dynapath/dynamic_classpath.clj",1689946174000,"jar:file:/root/.m2/repository/cheshire/cheshire/5.11.0/cheshire-5.11.0.jar!/cheshire/generate_seq.clj",1689946173000,"file:/home/gmrworkspace/dashboard/src/metabase/util/jvm.clj",1692013156125],"~:analyzer",["^ ","^3",null,"^4",["^ "],"^5",["^ ","^6","Utilitiy functions for working with MBQL queries.","^7","metabase/mbql/util.cljc","^8",1,"^9",5,"^:",1,"^;",23],"^<",["^ ","^=","^>","^?","^@","^A","^B","^C","^D","^E","^F"],"^G",null,"^H",["^I",["^J"]],"^K","^L","^M",["^ "],"^P",null,"^Q",["^ ","^R","^R","^S","^T","^U","^U","^V","^W","^X","^X","^Y","^X","^@","^@","^Z","^Z","^[","^[","^W","^W","~$s","^U","^10","^[","^T","^T","^11","^12","^12","^12","^13","^R"],"^14",["^I",["^15"]],"~:shadow/js-access-global",["^I",["Error"]],"^16",null,"~:defs",["^ ","~$referenced-field-ids",["^ ","~:protocol-inline",null,"^5",["^ ","^7","metabase/mbql/util.cljc","^8",714,"^9",7,"^:",714,"^;",27,"~:arglists",["^19",["~$quote",["^19",[["~$coll"]]]]],"^6","Find all the `:field` references with integer IDs in `coll`, which can be a full MBQL query, a snippet of MBQL, or a\n  sequence of those things; return a set of Field IDs. Includes Fields referenced indirectly via `:source-field`.\n  Returns `nil` if no IDs are found."],"^K","^2N","^7","metabase/mbql/util.cljc","^;",27,"~:method-params",["^19",[["^:J"]]],"~:protocol-impl",null,"~:arglists-meta",["^19",[null,null]],"^9",1,"~:variadic?",false,"^8",714,"~:ret-tag",["^I",[null,"~$clj-nil"]],"^:",714,"~:max-fixed-arity",1,"~:fn-var",true,"^:H",["^19",["^:I",["^19",[["^:J"]]]]],"^6","Find all the `:field` references with integer IDs in `coll`, which can be a full MBQL query, a snippet of MBQL, or a\n  sequence of those things; return a set of Field IDs. Includes Fields referenced indirectly via `:source-field`.\n  Returns `nil` if no IDs are found."],"~$desugar-is-null-and-not-null",["^ ","^:G",null,"^5",["^ ","^7","metabase/mbql/util.cljc","^8",153,"^9",7,"^:",153,"^;",35,"^:H",["^19",["^:I",["^19",[["~$m"]]]]],"^6","Rewrite `:is-null` and `:not-null` filter clauses as simpler `:=` and `:!=`, respectively."],"^K","^2L","^7","metabase/mbql/util.cljc","^;",35,"^:K",["^19",[["~$m"]]],"^:L",null,"^:M",["^19",[null,null]],"^9",1,"^:N",false,"^8",153,"^:O","~$any","^:",153,"^:Q",1,"^:R",true,"^:H",["^19",["^:I",["^19",[["~$m"]]]]],"^6","Rewrite `:is-null` and `:not-null` filter clauses as simpler `:=` and `:!=`, respectively."],"~$desugar-current-relative-datetime",["^ ","^:G",null,"^5",["^ ","^7","metabase/mbql/util.cljc","^8",246,"^9",7,"^:",246,"^;",40,"^:H",["^19",["^:I",["^19",[["~$m"]]]]],"^6","Replace `relative-datetime` clauses like `[:relative-datetime :current]` with `[:relative-datetime 0 <unit>]`.\n  `<unit>` is inferred from the `:field` the clause is being compared to (if any), otherwise falls back to `default.`"],"^K","^4S","^7","metabase/mbql/util.cljc","^;",40,"^:K",["^19",[["~$m"]]],"^:L",null,"^:M",["^19",[null,null]],"^9",1,"^:N",false,"^8",246,"^:O","^:T","^:",246,"^:Q",1,"^:R",true,"^:H",["^19",["^:I",["^19",[["~$m"]]]]],"^6","Replace `relative-datetime` clauses like `[:relative-datetime :current]` with `[:relative-datetime 0 <unit>]`.\n  `<unit>` is inferred from the `:field` the clause is being compared to (if any), otherwise falls back to `default.`"],"~$ga-id?",["^ ","^:G",null,"^5",["^ ","^7","metabase/mbql/util.cljc","^8",448,"^9",7,"^:",448,"^;",13,"^:H",["^19",["^:I",["^19",[["~$id"]]]]],"^6","Is this ID (presumably of a Metric or Segment) a GA one?"],"^K","^52","^7","metabase/mbql/util.cljc","^;",13,"^:K",["^19",[["^:W"]]],"^:L",null,"^:M",["^19",[null,null]],"^9",1,"^:N",false,"^8",448,"^:O","~$boolean","^:",448,"^:Q",1,"^:R",true,"^:H",["^19",["^:I",["^19",[["^:W"]]]]],"^6","Is this ID (presumably of a Metric or Segment) a GA one?"],"~$add-filter-clause",["^ ","~:schema",["^19",["^1X","~$output-schema47989",["~$input-schema47991"]]],"^:G",null,"^5",["^ ","^:Z",["^19",["^1X","^:[",["^;0"]]],"^7","metabase/mbql/util.cljc","^;",26,"^9",9,"~:raw-arglists",["^19",["^:I",["^19",[["~$outer-query","~:-","~$mbql.s/Query","~$new-clause","~:-",["^19",["~$s/maybe","~$mbql.s/Filter"]]]]]]],"^8",139,"^:",139,"^:H",["^19",["^:I",["^19",[["^;2","^;4"]]]]],"^6","Inputs: [outer-query :- mbql.s/Query new-clause :- (s/maybe mbql.s/Filter)]\n  Returns: mbql.s/Query\n\n  Add an additional filter clause to an `outer-query`. If `new-clause` is `nil` this is a no-op."],"^K","^32","^7","metabase/mbql/util.cljc","^;",26,"^:K",["^19",[["^;2","^;4"]]],"^:L",null,"^:M",["^19",[null,null]],"^9",1,"^:N",false,"^;1",["^19",["^:I",["^19",[["^;2","~:-","^;3","^;4","~:-",["^19",["^;5","^;6"]]]]]]],"^8",139,"^:O",["^I",["~$clj","^:T"]],"^:",139,"^:Q",2,"^:R",true,"^:H",["^19",["^:I",["^19",[["^;2","^;4"]]]]],"^6","Inputs: [outer-query :- mbql.s/Query new-clause :- (s/maybe mbql.s/Filter)]\n  Returns: mbql.s/Query\n\n  Add an additional filter clause to an `outer-query`. If `new-clause` is `nil` this is a no-op."],"~$dispatch-by-clause-name-or-class",["^ ","^:G",null,"^5",["^ ","^7","metabase/mbql/util.cljc","^8",395,"^9",7,"^:",395,"^;",39,"^:H",["^19",["^:I",["^19",[["~$x"],["~$x","~$_"]]]]],"^6","Dispatch function perfect for use with multimethods that dispatch off elements of an MBQL query. If `x` is an MBQL\n  clause, dispatches off the clause name; otherwise dispatches off `x`'s class.","~:top-fn",["^ ","^:N",false,"~:fixed-arity",2,"^:Q",2,"^:K",[["~$x"],["~$x","~$_"]],"^:H",["^19",[["~$x"],["~$x","~$_"]]],"^:M",["^19",[null,null]]]],"^K","^5;","^7","metabase/mbql/util.cljc","^;",39,"^;9",["^ ","^:N",false,"^;:",2,"^:Q",2,"^:K",[["~$x"],["~$x","~$_"]],"^:H",["^19",[["~$x"],["~$x","~$_"]]],"^:M",["^19",[null,null]]],"^:K",[["~$x"],["~$x","~$_"]],"^:L",null,"^;:",2,"^:M",["^19",[null,null]],"^9",1,"^:N",false,"~:methods",[["^ ","^;:",1,"^:N",false,"~:tag",["^I",["^:T","^:P"]]],["^ ","^;:",2,"^:N",false,"^;<",["^I",["^:T","^:P"]]]],"^8",395,"^:",395,"^:Q",2,"^:R",true,"^:H",["^19",[["~$x"],["~$x","~$_"]]],"^6","Dispatch function perfect for use with multimethods that dispatch off elements of an MBQL query. If `x` is an MBQL\n  clause, dispatches off the clause name; otherwise dispatches off `x`'s class."],"~$mbql-clause?",["^ ","^:G",null,"^5",["^ ","^7","metabase/mbql/util.cljc","^8",45,"^9",7,"^:",45,"^;",19,"^:H",["^19",["^:I",["^19",[["~$x"]]]]],"^6","True if `x` is an MBQL clause (a sequence with a keyword as its first arg). (Since this is used by the code in\n  `normalize` this handles pre-normalized clauses as well.)"],"^K","^3;","^7","metabase/mbql/util.cljc","^;",19,"^:K",["^19",[["~$x"]]],"^:L",null,"^:M",["^19",[null,null]],"^9",1,"^:N",false,"^8",45,"^:O","^:X","^:",45,"^:Q",1,"^:R",true,"^:H",["^19",["^:I",["^19",[["~$x"]]]]],"^6","True if `x` is an MBQL clause (a sequence with a keyword as its first arg). (Since this is used by the code in\n  `normalize` this handles pre-normalized clauses as well.)"],"~$uniquify-named-aggregations",["^ ","^:Z",["^19",["^1X","~$output-schema48294",["~$input-schema48296"]]],"^:G",null,"^5",["^ ","^:Z",["^19",["^1X","^;?",["^;@"]]],"^7","metabase/mbql/util.cljc","^;",36,"^9",9,"^;1",["^19",["^:I",["^19",[["~$named-aggregations","~:-",["~$NamedAggregation"]]]]]],"^8",582,"^:",582,"^:H",["^19",["^:I",["^19",[["^;A"]]]]],"^6","Inputs: [named-aggregations :- [NamedAggregation]]\n  Returns: UniquelyNamedAggregations\n\n  Make the names of a sequence of named aggregations unique by adding suffixes such as `_2`."],"^K","^3C","^7","metabase/mbql/util.cljc","^;",36,"^:K",["^19",[["^;A"]]],"^:L",null,"^:M",["^19",[null,null]],"^9",1,"^:N",false,"^;1",["^19",["^:I",["^19",[["^;A","~:-",["^;B"]]]]]],"^8",582,"^:O","^2V","^:",582,"^:Q",1,"^:R",true,"^:H",["^19",["^:I",["^19",[["^;A"]]]]],"^6","Inputs: [named-aggregations :- [NamedAggregation]]\n  Returns: UniquelyNamedAggregations\n\n  Make the names of a sequence of named aggregations unique by adding suffixes such as `_2`."],"~$remove-namespaced-options",["^ ","^:G",null,"^5",["^ ","^7","metabase/mbql/util.cljc","^8",705,"^9",7,"^:",705,"^;",32,"^:H",["^19",["^:I",["^19",[["~$field-or-ref"]]]]],"^6","Update a `:field`, `:expression` reference, or `:aggregation` reference clause by removing all namespaced keys in the\n  options map. This is mainly for clause equality comparison purposes -- in current usage namespaced keys are used by\n  individual pieces of middleware or driver implementations for tracking little bits of information that should not be\n  considered relevant when comparing clauses for equality."],"^K","^5J","^7","metabase/mbql/util.cljc","^;",32,"^:K",["^19",[["^;D"]]],"^:L",null,"^:M",["^19",[null,null]],"^9",1,"^:N",false,"^8",705,"^:O","~$cljs.core/IVector","^:",705,"^:Q",1,"^:R",true,"^:H",["^19",["^:I",["^19",[["^;D"]]]]],"^6","Update a `:field`, `:expression` reference, or `:aggregation` reference clause by removing all namespaced keys in the\n  options map. This is mainly for clause equality comparison purposes -- in current usage namespaced keys are used by\n  individual pieces of middleware or driver implementations for tracking little bits of information that should not be\n  considered relevant when comparing clauses for equality."],"~$desugar-is-empty-and-not-empty",["^ ","^:G",null,"^5",["^ ","^7","metabase/mbql/util.cljc","^8",160,"^9",7,"^:",160,"^;",37,"^:H",["^19",["^:I",["^19",[["~$m"]]]]],"^6","Rewrite `:is-empty` and `:not-empty` filter clauses as simpler `:=` and `:!=`, respectively."],"^K","^3O","^7","metabase/mbql/util.cljc","^;",37,"^:K",["^19",[["~$m"]]],"^:L",null,"^:M",["^19",[null,null]],"^9",1,"^:N",false,"^8",160,"^:O","^:T","^:",160,"^:Q",1,"^:R",true,"^:H",["^19",["^:I",["^19",[["~$m"]]]]],"^6","Rewrite `:is-empty` and `:not-empty` filter clauses as simpler `:=` and `:!=`, respectively."],"~$desugar-divide-with-extra-args",["^ ","^:G",null,"^5",["^ ","^7","metabase/mbql/util.cljc","^8",286,"^9",8,"^:",286,"^;",38,"~:private",true,"^:H",["^19",["^:I",["^19",[["~$expression"]]]]]],"^;H",true,"^K","^23","^7","metabase/mbql/util.cljc","^;",38,"^:K",["^19",[["^;I"]]],"^:L",null,"^:M",["^19",[null,null]],"^9",1,"^:N",false,"^8",286,"^:O","^:T","^:",286,"^:Q",1,"^:R",true,"^:H",["^19",["^:I",["^19",[["^;I"]]]]]],"~$simplify-compound-filter",["^ ","^:G",null,"^5",["^ ","^7","metabase/mbql/util.cljc","^8",77,"^9",7,"^:",77,"^;",31,"^:H",["^19",["^:I",["^19",[["~$filter-clause"]]]]],"^6","Simplify compound `:and`, `:or`, and `:not` compound filters, combining or eliminating them where possible. This\n  also fixes theoretically disallowed compound filters like `:and` with only a single subclause, and eliminates `nils`\n  and duplicate subclauses from the clauses."],"^K","^22","^7","metabase/mbql/util.cljc","^;",31,"^:K",["^19",[["^;K"]]],"^:L",null,"^:M",["^19",[null,null]],"^9",1,"^:N",false,"^8",77,"^:O","^:T","^:",77,"^:Q",1,"^:R",true,"^:H",["^19",["^:I",["^19",[["^;K"]]]]],"^6","Simplify compound `:and`, `:or`, and `:not` compound filters, combining or eliminating them where possible. This\n  also fixes theoretically disallowed compound filters like `:and` with only a single subclause, and eliminates `nils`\n  and duplicate subclauses from the clauses."],"^;B",["^ ","^5",["^ ","^7","metabase/mbql/util.cljc","^8",568,"^9",16,"^:",568,"^;",32,"^;H",true],"^;H",true,"^K","^3T","^7","metabase/mbql/util.cljc","^;",32,"^9",1,"^8",568,"^:",568,"^;<","~$schema.core/Constrained"],"~$add-order-by-clause",["^ ","^:Z",["^19",["^1X","~$output-schema48215",["~$input-schema48217"]]],"^:G",null,"^5",["^ ","^:Z",["^19",["^1X","^;N",["^;O"]]],"^7","metabase/mbql/util.cljc","^;",28,"^9",9,"^;1",["^19",["^:I",["^19",[["~$inner-query","~:-","~$mbql.s/MBQLQuery",["~$_",["~$_","~$id-or-name","^1=","~$_field"],"^1=","~$order-by-clause"],"~:-","~$mbql.s/OrderBy"]]]]],"^8",383,"^:",383,"^:H",["^19",["^:I",["^19",[["^;P",["~$_",["~$_","^;R","^1=","^;S"],"^1=","^;T"]]]]]],"^6","Inputs: [inner-query :- mbql.s/MBQLQuery [_ [_ id-or-name :as _field] :as order-by-clause] :- mbql.s/OrderBy]\n  Returns: mbql.s/MBQLQuery\n\n  Add a new `:order-by` clause to an MBQL `inner-query`. If the new order-by clause references a Field that is\n  already being used in another order-by clause, this function does nothing."],"^K","^3[","^7","metabase/mbql/util.cljc","^;",28,"^:K",["^19",[["^;P","~$p__48220"]]],"^:L",null,"^:M",["^19",[null,null]],"^9",1,"^:N",false,"^;1",["^19",["^:I",["^19",[["^;P","~:-","^;Q",["~$_",["~$_","^;R","^1=","^;S"],"^1=","^;T"],"~:-","^;U"]]]]],"^8",383,"^:O",["^I",[null,"^;7","^:T"]],"^:",383,"^:Q",2,"^:R",true,"^:H",["^19",["^:I",["^19",[["^;P",["~$_",["~$_","^;R","^1=","^;S"],"^1=","^;T"]]]]]],"^6","Inputs: [inner-query :- mbql.s/MBQLQuery [_ [_ id-or-name :as _field] :as order-by-clause] :- mbql.s/OrderBy]\n  Returns: mbql.s/MBQLQuery\n\n  Add a new `:order-by` clause to an MBQL `inner-query`. If the new order-by clause references a Field that is\n  already being used in another order-by clause, this function does nothing."],"~$query->source-table-id",["^ ","^:Z",["^19",["^1X","~$output-schema48202",["~$input-schema48204"]]],"^:G",null,"^5",["^ ","^:Z",["^19",["^1X","^;X",["^;Y"]]],"^7","metabase/mbql/util.cljc","^;",31,"^9",9,"^;1",["^19",["^:I",["^19",[[["^5L",[["^ ","~$source-table-id","~:source-table","~$source-query","~:source-query"],"~:query","~$query-type","~:type","^1=","~$query"]]]]]]],"^8",345,"^:",345,"^:H",["^19",["^:I",["^19",[[["^5L",[["^ ","^;Z","^;[","^<0","^<1"],"^<2","^<3","^<4","^1=","^<5"]]]]]]],"^6","Inputs: [{{source-table-id :source-table, source-query :source-query} :query, query-type :type, :as query}]\n  Returns: (s/maybe schema.helpers/IntGreaterThanZero)\n\n  Return the source Table ID associated with `query`, if applicable; handles nested queries as well. If `query` is\n  `nil`, returns `nil`.\n\n  Throws an Exception when it encounters a unresolved source query (i.e., the `:source-table \"card__id\"`\n  form), because it cannot return an accurate result for a query that has not yet been preprocessed."],"^K","^3Y","^7","metabase/mbql/util.cljc","^;",31,"^:K",["^19",[["~$p__48207"]]],"^:L",null,"^:M",["^19",[null,null]],"^9",1,"^:N",false,"^;1",["^19",["^:I",["^19",[[["^5L",[["^ ","^;Z","^;[","^<0","^<1"],"^<2","^<3","^<4","^1=","^<5"]]]]]]],"^8",345,"^:O",["^I",["^:T","^:P"]],"^:",345,"^:Q",1,"^:R",true,"^:H",["^19",["^:I",["^19",[[["^5L",[["^ ","^;Z","^;[","^<0","^<1"],"^<2","^<3","^<4","^1=","^<5"]]]]]]],"^6","Inputs: [{{source-table-id :source-table, source-query :source-query} :query, query-type :type, :as query}]\n  Returns: (s/maybe schema.helpers/IntGreaterThanZero)\n\n  Return the source Table ID associated with `query`, if applicable; handles nested queries as well. If `query` is\n  `nil`, returns `nil`.\n\n  Throws an Exception when it encounters a unresolved source query (i.e., the `:source-table \"card__id\"`\n  form), because it cannot return an accurate result for a query that has not yet been preprocessed."],"~$normalize-token",["^ ","^:Z",["^19",["^1X","~$output-schema47842",["~$input-schema47844"]]],"^:G",null,"^5",["^ ","^:Z",["^19",["^1X","^<8",["^<9"]]],"^7","metabase/mbql/util.cljc","^;",24,"^9",9,"^;1",["^19",["^:I",["^19",[["~$token","~:-","~$schema.helpers/KeywordOrString"]]]]],"^8",35,"^:",35,"^:H",["^19",["^:I",["^19",[["^<:"]]]]],"^6","Inputs: [token :- schema.helpers/KeywordOrString]\n  Returns: s/Keyword\n\n  Convert a string or keyword in various cases (`lisp-case`, `snake_case`, or `SCREAMING_SNAKE_CASE`) to a lisp-cased\n  keyword."],"^K","^42","^7","metabase/mbql/util.cljc","^;",24,"^:K",["^19",[["^<:"]]],"^:L",null,"^:M",["^19",[null,null]],"^9",1,"^:N",false,"^;1",["^19",["^:I",["^19",[["^<:","~:-","^<;"]]]]],"^8",35,"^:O",["^I",["^2K","^:P"]],"^:",35,"^:Q",1,"^:R",true,"^:H",["^19",["^:I",["^19",[["^<:"]]]]],"^6","Inputs: [token :- schema.helpers/KeywordOrString]\n  Returns: s/Keyword\n\n  Convert a string or keyword in various cases (`lisp-case`, `snake_case`, or `SCREAMING_SNAKE_CASE`) to a lisp-cased\n  keyword."],"~$qualified-name",["^ ","^:G",null,"^5",["^ ","^7","metabase/mbql/util.cljc","^8",28,"^9",7,"^:",28,"^;",21,"^:H",["^19",["^:I",["^19",[["~$x"]]]]],"^6","Like `name`, but if `x` is a namespace-qualified keyword, returns that a string including the namespace."],"^K","^4:","^7","metabase/mbql/util.cljc","^;",21,"^:K",["^19",[["~$x"]]],"^:L",null,"^:M",["^19",[null,null]],"^9",1,"^:N",false,"^8",28,"^:O","~$string","^:",28,"^:Q",1,"^:R",true,"^:H",["^19",["^:I",["^19",[["~$x"]]]]],"^6","Like `name`, but if `x` is a namespace-qualified keyword, returns that a string including the namespace."],"~$desugar-inside",["^ ","^:G",null,"^5",["^ ","^7","metabase/mbql/util.cljc","^8",144,"^9",7,"^:",144,"^;",21,"^:H",["^19",["^:I",["^19",[["~$m"]]]]],"^6","Rewrite `:inside` filter clauses as a pair of `:between` clauses."],"^K","^4@","^7","metabase/mbql/util.cljc","^;",21,"^:K",["^19",[["~$m"]]],"^:L",null,"^:M",["^19",[null,null]],"^9",1,"^:N",false,"^8",144,"^:O","^:T","^:",144,"^:Q",1,"^:R",true,"^:H",["^19",["^:I",["^19",[["~$m"]]]]],"^6","Rewrite `:inside` filter clauses as a pair of `:between` clauses."],"~$aggregation-at-index",["^ ","^:Z",["^19",["^4Z","~$output-schema48255",["~$input-schema48257","~$input-schema48260"]]],"^:G",null,"^5",["^ ","^:Z",["^19",["^4Z","^<@",["^<A","^<B"]]],"^7","metabase/mbql/util.cljc","^;",29,"^;9",["^ ","^:N",false,"^;:",3,"^:Q",3,"^:K",[["^<5","~$index"],["^<5","^<C","~$nesting-level"]],"^:H",["^19",[["^<5","^<C"],["^<5","^<C","^<D"]]],"^:M",["^19",[null,null]]],"^9",9,"^;1",["^19",["^:I",["^19",[["^<5","^<C"],["^<5","~:-","^;3","^<C","~:-","~$schema.helpers/IntGreaterThanOrEqualToZero","^<D","~:-","^<E"]]]]],"^8",431,"^:",431,"^:H",["^19",["^:I",["^19",[["^<5","^<C"],["^<5","^<C","^<D"]]]]],"^6","Inputs: ([query index] [query :- mbql.s/Query index :- schema.helpers/IntGreaterThanOrEqualToZero nesting-level :- schema.helpers/IntGreaterThanOrEqualToZero])\n  Returns: mbql.s/Aggregation\n\n  Fetch the aggregation at index. This is intended to power aggregate field references (e.g. [:aggregation 0]).\n   This also handles nested queries, which could be potentially ambiguous if multiple levels had aggregations. To\n   support nested queries, you'll need to keep tract of how many `:source-query`s deep you've traveled; pass in this\n   number to as optional arg `nesting-level` to make sure you reference aggregations at the right level of nesting."],"^K","^4J","^7","metabase/mbql/util.cljc","^;",29,"^;9",["^ ","^:N",false,"^;:",3,"^:Q",3,"^:K",[["^<5","^<C"],["^<5","^<C","^<D"]],"^:H",["^19",[["^<5","^<C"],["^<5","^<C","^<D"]]],"^:M",["^19",[null,null]]],"^:K",[["^<5","^<C"],["^<5","^<C","^<D"]],"^:L",null,"^;:",3,"^:M",["^19",[null,null]],"^9",1,"^:N",false,"^;;",[["^ ","^;:",2,"^:N",false,"^;<","^:T"],["^ ","^;:",3,"^:N",false,"^;<","^:T"]],"^;1",["^19",["^:I",["^19",[["^<5","^<C"],["^<5","~:-","^;3","^<C","~:-","^<E","^<D","~:-","^<E"]]]]],"^8",431,"^:",431,"^:Q",3,"^:R",true,"^:H",["^19",[["^<5","^<C"],["^<5","^<C","^<D"]]],"^6","Inputs: ([query index] [query :- mbql.s/Query index :- schema.helpers/IntGreaterThanOrEqualToZero nesting-level :- schema.helpers/IntGreaterThanOrEqualToZero])\n  Returns: mbql.s/Aggregation\n\n  Fetch the aggregation at index. This is intended to power aggregate field references (e.g. [:aggregation 0]).\n   This also handles nested queries, which could be potentially ambiguous if multiple levels had aggregations. To\n   support nested queries, you'll need to keep tract of how many `:source-query`s deep you've traveled; pass in this\n   number to as optional arg `nesting-level` to make sure you reference aggregations at the right level of nesting."],"~$maybe-desugar-expression",["^ ","^:G",null,"^5",["^ ","^7","metabase/mbql/util.cljc","^8",298,"^9",8,"^:",298,"^;",32,"^;H",true,"^:H",["^19",["^:I",["^19",[["~$clause"]]]]]],"^;H",true,"^K","^2H","^7","metabase/mbql/util.cljc","^;",32,"^:K",["^19",[["^<G"]]],"^:L",null,"^:M",["^19",[null,null]],"^9",1,"^:N",false,"^8",298,"^:O",["^I",[null,"^:T"]],"^:",298,"^:Q",1,"^:R",true,"^:H",["^19",["^:I",["^19",[["^<G"]]]]]],"~$query->max-rows-limit",["^ ","^:G",null,"^5",["^ ","^7","metabase/mbql/util.cljc","^8",627,"^9",7,"^:",627,"^;",28,"^:H",["^19",["^:I",["^19",[[["^5L",[["^ ","~:keys",["~$max-results","~$max-results-bare-rows"]],"~:constraints",["^5L",["~$limit","~:limit","~$aggregations","~:aggregation",["^ ","^<I",["~$items"]],"~:page"]],"^<2","^<3","^<4"]]]]]]],"^6","Calculate the absolute maximum number of results that should be returned by this query (MBQL or native), useful for\n  doing the equivalent of\n\n    java.sql.Statement statement = ...;\n    statement.setMaxRows(<max-rows-limit>).\n\n  to ensure the DB cursor or equivalent doesn't fetch more rows than will be consumed.\n\n  This is calculated as follows:\n\n  *  If query is `MBQL` and has a `:limit` or `:page` clause, returns appropriate number\n  *  If query has `:constraints` with `:max-results-bare-rows` or `:max-results`, returns the appropriate number\n     *  `:max-results-bare-rows` is returned if set and Query does not have any aggregations\n     *  `:max-results` is returned otherwise\n  *  If none of the above are set, returns `nil`. In this case, you should use something like the Dashboard QP's\n     `max-rows-limit`"],"^K","^2B","^7","metabase/mbql/util.cljc","^;",28,"^:K",["^19",[["~$p__48343"]]],"^:L",null,"^:M",["^19",[null,null]],"^9",1,"^:N",false,"^8",627,"^:O",["^I",["^:T","^:P"]],"^:",627,"^:Q",1,"^:R",true,"^:H",["^19",["^:I",["^19",[[["^5L",[["^ ","^<I",["^<J","^<K"]],"^<L",["^5L",["^<M","^<N","^<O","^<P",["^ ","^<I",["^<Q"]],"^<R"]],"^<2","^<3","^<4"]]]]]]],"^6","Calculate the absolute maximum number of results that should be returned by this query (MBQL or native), useful for\n  doing the equivalent of\n\n    java.sql.Statement statement = ...;\n    statement.setMaxRows(<max-rows-limit>).\n\n  to ensure the DB cursor or equivalent doesn't fetch more rows than will be consumed.\n\n  This is calculated as follows:\n\n  *  If query is `MBQL` and has a `:limit` or `:page` clause, returns appropriate number\n  *  If query has `:constraints` with `:max-results-bare-rows` or `:max-results`, returns the appropriate number\n     *  `:max-results-bare-rows` is returned if set and Query does not have any aggregations\n     *  `:max-results` is returned otherwise\n  *  If none of the above are set, returns `nil`. In this case, you should use something like the Dashboard QP's\n     `max-rows-limit`"],"~$negate*",["^ ","^5",["^ ","^7","metabase/mbql/util.cljc","^8",320,"^9",21,"^:",320,"^;",28,"^;H",true],"^;H",true,"^K","^4K","^7","metabase/mbql/util.cljc","^;",28,"^9",1,"^8",320,"^:",320,"^;<","^1["],"~$pre-alias-aggregations",["^ ","^:Z",["^19",["^1X","~$output-schema48315",["~$input-schema48317"]]],"^:G",null,"^5",["^ ","^:Z",["^19",["^1X","^<V",["^<W"]]],"^7","metabase/mbql/util.cljc","^;",31,"^9",9,"^;1",["^19",["^:I",["^19",[["~$aggregation->name-fn","~:-",["^19",["~$s/pred","~$fn?"]],"^<O","~:-",["~$mbql.s/Aggregation"]]]]]],"^8",594,"~:style/indent",1,"^:",594,"^:H",["^19",["^:I",["^19",[["^<X","^<O"]]]]],"^6","Inputs: [aggregation->name-fn :- (s/pred fn?) aggregations :- [mbql.s/Aggregation]]\n  Returns: [NamedAggregation]\n\n  Wrap every aggregation clause in an `:aggregation-options` clause, using the name returned\n  by `(aggregation->name-fn ag-clause)` as names for any clauses that do not already have a `:name` in\n  `:aggregation-options`.\n\n    (pre-alias-aggregations annotate/aggregation-name\n     [[:count] [:count] [:aggregation-options [:sum [:field 1 nil] {:name \"Sum-41\"}]])\n    ;; -> [[:aggregation-options [:count] {:name \"count\"}]\n           [:aggregation-options [:count] {:name \"count\"}]\n           [:aggregation-options [:sum [:field 1 nil]] {:name \"Sum-41\"}]]\n\n  Most often, `aggregation->name-fn` will be something like `annotate/aggregation-name`, but for purposes of keeping\n  the `metabase.mbql` module seperate from the `metabase.query-processor` code we'll let you pass that in yourself."],"^K","^4L","^7","metabase/mbql/util.cljc","^;",31,"^:K",["^19",[["^<X","^<O"]]],"^:L",null,"^:M",["^19",[null,null]],"^9",1,"^:N",false,"^;1",["^19",["^:I",["^19",[["^<X","~:-",["^19",["^<Y","^<Z"]],"^<O","~:-",["^<["]]]]]],"^8",594,"^:O","^:T","^=0",1,"^:",594,"^:Q",2,"^:R",true,"^:H",["^19",["^:I",["^19",[["^<X","^<O"]]]]],"^6","Inputs: [aggregation->name-fn :- (s/pred fn?) aggregations :- [mbql.s/Aggregation]]\n  Returns: [NamedAggregation]\n\n  Wrap every aggregation clause in an `:aggregation-options` clause, using the name returned\n  by `(aggregation->name-fn ag-clause)` as names for any clauses that do not already have a `:name` in\n  `:aggregation-options`.\n\n    (pre-alias-aggregations annotate/aggregation-name\n     [[:count] [:count] [:aggregation-options [:sum [:field 1 nil] {:name \"Sum-41\"}]])\n    ;; -> [[:aggregation-options [:count] {:name \"count\"}]\n           [:aggregation-options [:count] {:name \"count\"}]\n           [:aggregation-options [:sum [:field 1 nil]] {:name \"Sum-41\"}]]\n\n  Most often, `aggregation->name-fn` will be something like `annotate/aggregation-name`, but for purposes of keeping\n  the `metabase.mbql` module seperate from the `metabase.query-processor` code we'll let you pass that in yourself."],"~$is-clause?",["^ ","^:G",null,"^5",["^ ","^7","metabase/mbql/util.cljc","^8",53,"^9",7,"^:",53,"^;",17,"^:H",["^19",["^:I",["^19",[["~$k-or-ks","~$x"]]]]],"^6","If `x` an MBQL clause, and an instance of clauses defined by keyword(s) `k-or-ks`?\n\n    (is-clause? :count [:count 10])        ; -> true\n    (is-clause? #{:+ :- :* :/} [:+ 10 20]) ; -> true"],"^K","^2Q","^7","metabase/mbql/util.cljc","^;",17,"^:K",["^19",[["^=2","~$x"]]],"^:L",null,"^:M",["^19",[null,null]],"^9",1,"^:N",false,"^8",53,"^:O",["^I",["^:X","^:T"]],"^:",53,"^:Q",2,"^:R",true,"^:H",["^19",["^:I",["^19",[["^=2","~$x"]]]]],"^6","If `x` an MBQL clause, and an instance of clauses defined by keyword(s) `k-or-ks`?\n\n    (is-clause? :count [:count 10])        ; -> true\n    (is-clause? #{:+ :- :* :/} [:+ 10 20]) ; -> true"],"~$join->source-table-id",["^ ","^:Z",["^19",["^1X","~$output-schema48210",["~$input-schema48212"]]],"^:G",null,"^5",["^ ","^:Z",["^19",["^1X","^=4",["^=5"]]],"^7","metabase/mbql/util.cljc","^;",30,"^9",9,"^;1",["^19",["^:I",["^19",[["~$join"]]]]],"^8",378,"^:",378,"^:H",["^19",["^:I",["^19",[["^=6"]]]]],"^6","Inputs: [join]\n  Returns: (s/maybe schema.helpers/IntGreaterThanZero)\n\n  Like `query->source-table-id`, but for a join."],"^K","^4U","^7","metabase/mbql/util.cljc","^;",30,"^:K",["^19",[["^=6"]]],"^:L",null,"^:M",["^19",[null,null]],"^9",1,"^:N",false,"^;1",["^19",["^:I",["^19",[["^=6"]]]]],"^8",378,"^:O",["^I",["^:T","^:P"]],"^:",378,"^:Q",1,"^:R",true,"^:H",["^19",["^:I",["^19",[["^=6"]]]]],"^6","Inputs: [join]\n  Returns: (s/maybe schema.helpers/IntGreaterThanZero)\n\n  Like `query->source-table-id`, but for a join."],"~$ga-metric-or-segment?",["^ ","^:G",null,"^5",["^ ","^7","metabase/mbql/util.cljc","^8",455,"^9",7,"^:",455,"^;",28,"^:H",["^19",["^:I",["^19",[[["~$_","^:W"]]]]]],"^6","Is this metric or segment clause not a Dashboard Metric or Segment, but rather a GA one? E.g. something like `[:metric\n  ga:users]`. We want to ignore those because they're not the same thing at all as MB Metrics/Segments and don't\n  correspond to objects in our application DB."],"^K","^4Y","^7","metabase/mbql/util.cljc","^;",28,"^:K",["^19",[["~$p__48265"]]],"^:L",null,"^:M",["^19",[null,null]],"^9",1,"^:N",false,"^8",455,"^:O","^:X","^:",455,"^:Q",1,"^:R",true,"^:H",["^19",["^:I",["^19",[[["~$_","^:W"]]]]]],"^6","Is this metric or segment clause not a Dashboard Metric or Segment, but rather a GA one? E.g. something like `[:metric\n  ga:users]`. We want to ignore those because they're not the same thing at all as MB Metrics/Segments and don't\n  correspond to objects in our application DB."],"~$UniquelyNamedAggregations",["^ ","^5",["^ ","^7","metabase/mbql/util.cljc","^8",574,"^9",16,"^:",574,"^;",41,"^;H",true],"^;H",true,"^K","^4W","^7","metabase/mbql/util.cljc","^;",41,"^9",1,"^8",574,"^:",574,"^;<","^;L"],"~$desugar-time-interval",["^ ","^:G",null,"^5",["^ ","^7","metabase/mbql/util.cljc","^8",174,"^9",7,"^:",174,"^;",28,"^:H",["^19",["^:I",["^19",[["~$m"]]]]],"^6","Rewrite `:time-interval` filter clauses as simpler ones like `:=` or `:between`."],"^K","^56","^7","metabase/mbql/util.cljc","^;",28,"^:K",["^19",[["~$m"]]],"^:L",null,"^:M",["^19",[null,null]],"^9",1,"^:N",false,"^8",174,"^:O","^:T","^:",174,"^:Q",1,"^:R",true,"^:H",["^19",["^:I",["^19",[["~$m"]]]]],"^6","Rewrite `:time-interval` filter clauses as simpler ones like `:=` or `:between`."],"~$temporal-extract-ops",["^ ","^5",["^ ","^7","metabase/mbql/util.cljc","^8",274,"^9",16,"^:",274,"^;",36,"^;H",true],"^;H",true,"^K","^33","^7","metabase/mbql/util.cljc","^;",36,"^9",1,"^8",274,"^:",274,"^;<",["^I",["^;7","^:T","~$cljs.core/ISet","~$cljs.core/MetaFn","^:P"]]],"~$desugar-expression",["^ ","^:Z",["^19",["^1X","~$output-schema48145",["~$input-schema48147"]]],"^:G",null,"^5",["^ ","^:Z",["^19",["^1X","^=?",["^=@"]]],"^7","metabase/mbql/util.cljc","^;",27,"^9",9,"^;1",["^19",["^:I",["^19",[["^;I","~:-","~$mbql.s/FieldOrExpressionDef"]]]]],"^8",291,"^:",291,"^:H",["^19",["^:I",["^19",[["^;I"]]]]],"^6","Inputs: [expression :- mbql.s/FieldOrExpressionDef]\n  Returns: mbql.s/FieldOrExpressionDef\n\n  Rewrite various 'syntactic sugar' expressions like `:/` with more than two args into something simpler for drivers\n  to compile."],"^K","^5:","^7","metabase/mbql/util.cljc","^;",27,"^:K",["^19",[["^;I"]]],"^:L",null,"^:M",["^19",[null,null]],"^9",1,"^:N",false,"^;1",["^19",["^:I",["^19",[["^;I","~:-","^=A"]]]]],"^8",291,"^:O","^:T","^:",291,"^:Q",1,"^:R",true,"^:H",["^19",["^:I",["^19",[["^;I"]]]]],"^6","Inputs: [expression :- mbql.s/FieldOrExpressionDef]\n  Returns: mbql.s/FieldOrExpressionDef\n\n  Rewrite various 'syntactic sugar' expressions like `:/` with more than two args into something simpler for drivers\n  to compile."],"~$add-filter-clause-to-inner-query",["^ ","^:Z",["^19",["^1X","~$output-schema47984",["~$input-schema47986"]]],"^:G",null,"^5",["^ ","^:Z",["^19",["^1X","^=C",["^=D"]]],"^7","metabase/mbql/util.cljc","^;",41,"^9",9,"^;1",["^19",["^:I",["^19",[["^;P","~:-","^;Q","^;4","~:-",["^19",["^;5","^;6"]]]]]]],"^8",131,"^:",131,"^:H",["^19",["^:I",["^19",[["^;P","^;4"]]]]],"^6","Inputs: [inner-query :- mbql.s/MBQLQuery new-clause :- (s/maybe mbql.s/Filter)]\n  Returns: mbql.s/MBQLQuery\n\n  Add a additional filter clause to an *inner* MBQL query, merging with the existing filter clause with `:and` if\n  needed."],"^K","^35","^7","metabase/mbql/util.cljc","^;",41,"^:K",["^19",[["^;P","^;4"]]],"^:L",null,"^:M",["^19",[null,null]],"^9",1,"^:N",false,"^;1",["^19",["^:I",["^19",[["^;P","~:-","^;Q","^;4","~:-",["^19",["^;5","^;6"]]]]]]],"^8",131,"^:O",["^I",[null,"^;7","^:T"]],"^:",131,"^:Q",2,"^:R",true,"^:H",["^19",["^:I",["^19",[["^;P","^;4"]]]]],"^6","Inputs: [inner-query :- mbql.s/MBQLQuery new-clause :- (s/maybe mbql.s/Filter)]\n  Returns: mbql.s/MBQLQuery\n\n  Add a additional filter clause to an *inner* MBQL query, merging with the existing filter clause with `:and` if\n  needed."],"~$combine-compound-filters-of-type",["^ ","^:G",null,"^5",["^ ","^7","metabase/mbql/util.cljc","^8",69,"^9",8,"^:",69,"^;",40,"^;H",true,"^:H",["^19",["^:I",["^19",[["~$compound-type","~$subclauses"]]]]]],"^;H",true,"^K","^39","^7","metabase/mbql/util.cljc","^;",40,"^:K",["^19",[["^=F","^=G"]]],"^:L",null,"^:M",["^19",[null,null]],"^9",1,"^:N",false,"^8",69,"^:O","^:T","^:",69,"^:Q",2,"^:R",true,"^:H",["^19",["^:I",["^19",[["^=F","^=G"]]]]]],"~$temporal-extract-ops->unit",["^ ","^5",["^ ","^7","metabase/mbql/util.cljc","^8",258,"^9",6,"^:",258,"^;",32],"^K","^38","^7","metabase/mbql/util.cljc","^;",32,"^9",1,"^8",258,"^:",258,"^;<","~$cljs.core/IMap","^6","Mapping from the sugar syntax to extract datetime to the unit."],"~$remove-empty",["^ ","^:G",null,"^5",["^ ","^7","metabase/mbql/util.cljc","^8",658,"^9",8,"^:",658,"^;",20,"^;H",true,"^:H",["^19",["^:I",["^19",[["~$x"]]]]]],"^;H",true,"^K","^3>","^7","metabase/mbql/util.cljc","^;",20,"^:K",["^19",[["~$x"]]],"^:L",null,"^:M",["^19",[null,null]],"^9",1,"^:N",false,"^8",658,"^:O",["^I",[null,"^:P"]],"^:",658,"^:Q",1,"^:R",true,"^:H",["^19",["^:I",["^19",[["~$x"]]]]]],"~$desugar-does-not-contain",["^ ","^:G",null,"^5",["^ ","^7","metabase/mbql/util.cljc","^8",224,"^9",7,"^:",224,"^;",31,"^:H",["^19",["^:I",["^19",[["~$m"]]]]],"^6","Rewrite `:does-not-contain` filter clauses as simpler `:not` clauses."],"^K","^5G","^7","metabase/mbql/util.cljc","^;",31,"^:K",["^19",[["~$m"]]],"^:L",null,"^:M",["^19",[null,null]],"^9",1,"^:N",false,"^8",224,"^:O","^:T","^:",224,"^:Q",1,"^:R",true,"^:H",["^19",["^:I",["^19",[["~$m"]]]]],"^6","Rewrite `:does-not-contain` filter clauses as simpler `:not` clauses."],"~$replace-field-or-expression",["^ ","^:G",null,"^5",["^ ","^7","metabase/mbql/util.cljc","^8",167,"^9",8,"^:",167,"^;",35,"^;H",true,"^:H",["^19",["^:I",["^19",[["~$m","~$unit"]]]]],"^6","Replace a field or expression inside :time-interval"],"^;H",true,"^K","^1Q","^7","metabase/mbql/util.cljc","^;",35,"^:K",["^19",[["~$m","^=M"]]],"^:L",null,"^:M",["^19",[null,null]],"^9",1,"^:N",false,"^8",167,"^:O","^:T","^:",167,"^:Q",2,"^:R",true,"^:H",["^19",["^:I",["^19",[["~$m","^=M"]]]]],"^6","Replace a field or expression inside :time-interval"],"~$with-temporal-unit",["^ ","^:G",null,"^5",["^ ","^7","metabase/mbql/util.cljc","^8",690,"^9",7,"^:",690,"^;",25,"^:H",["^19",["^:I",["^19",[[["~$_","~$_",["^ ","^<I",["~$base-type"]],"^1=","^<G"],"^=M"]]]]],"^6","Set the `:temporal-unit` of a `:field` clause to `unit`."],"^K","^1Z","^7","metabase/mbql/util.cljc","^;",25,"^:K",["^19",[["~$p__48372","^=M"]]],"^:L",null,"^:M",["^19",[null,null]],"^9",1,"^:N",false,"^8",690,"^:O",["^I",[null,"^:T"]],"^:",690,"^:Q",2,"^:R",true,"^:H",["^19",["^:I",["^19",[[["~$_","~$_",["^ ","^<I",["^=O"]],"^1=","^<G"],"^=M"]]]]],"^6","Set the `:temporal-unit` of a `:field` clause to `unit`."],"~$combine-filter-clauses",["^ ","^:Z",["^19",["^1X","~$output-schema47974",["~$input-schema47976"]]],"^:G",null,"^5",["^ ","^:Z",["^19",["^1X","^=R",["^=S"]]],"^7","metabase/mbql/util.cljc","^;",31,"^;9",["^ ","^:N",true,"^;:",1,"^:Q",1,"^:K",[["^19",["^;K","~$more-filter-clauses"]]],"^:H",["^19",[["^;K","~$&","^=T"]]],"^:M",["^19",[null]]],"^9",9,"^;1",["^19",["^:I",["^19",[["^;K","~$&","^=T"]]]]],"^8",125,"^:",125,"^:H",["^19",["^:I",["^19",[["^;K","~$&","^=T"]]]]],"^6","Inputs: [filter-clause & more-filter-clauses]\n  Returns: mbql.s/Filter\n\n  Combine two filter clauses into a single clause in a way that minimizes slapping a bunch of `:and`s together if\n  possible."],"^K","^3K","^7","metabase/mbql/util.cljc","^;",31,"^;9",["^ ","^:N",true,"^;:",1,"^:Q",1,"^:K",[["^19",["^;K","^=T"]]],"^:H",["^19",[["^;K","~$&","^=T"]]],"^:M",["^19",[null]]],"^:K",[["^19",["^;K","^=T"]]],"^:L",null,"^;:",1,"^:M",["^19",[null]],"^9",1,"^:N",true,"^;;",[["^ ","^;:",1,"^:N",true,"^;<","^:T"]],"^;1",["^19",["^:I",["^19",[["^;K","~$&","^=T"]]]]],"^8",125,"^:O","^:T","^:",125,"^:Q",1,"^:R",true,"^:H",["^19",[["^;K","~$&","^=T"]]],"^6","Inputs: [filter-clause & more-filter-clauses]\n  Returns: mbql.s/Filter\n\n  Combine two filter clauses into a single clause in a way that minimizes slapping a bunch of `:and`s together if\n  possible."],"~$unique-name-generator",["^ ","^:G",null,"^5",["^ ","^7","metabase/mbql/util.cljc","^8",464,"^9",7,"^:",464,"^;",28,"^:H",["^19",["^:I",["^19",[["~$&",["^ ","^<I",["~$name-key-fn","~$unique-alias-fn"],"~:or",["^ ","^=V","~$identity","^=W",["^19",["~$fn",["~$original","~$suffix"],["^19",["^11","^=[","~c_","^>0"]]]]]]]]]]],"^6","Return a function that can be used to uniquify string names. Function maintains an internal counter that will suffix\n  any names passed to it as needed so all results will be unique.\n\n    (let [unique-name (unique-name-generator)]\n      [(unique-name \"A\")\n       (unique-name \"B\")\n       (unique-name \"A\")])\n    ;; -> [\"A\" \"B\" \"A_2\"]\n\n  By default, unique aliases are generated for each unique `[id original-name]` key pair. By default, a unique `id` is\n  generated for every call, meaning repeated calls to [[unique-name-generator]] with the same `original-name` will\n  return different unique aliases. If idempotence is desired, the function returned by the generator also has a 2\n  airity version with the signature\n\n    (unique-name-fn id original-name)\n\n  for example:\n\n    (let [unique-name (unique-name-generator)]\n      [(unique-name :x \"A\")\n       (unique-name :x \"B\")\n       (unique-name :x \"A\")\n       (unique-name :y \"A\")])\n    ;; -> [\"A\" \"B\" \"A\" \"A_2\"]\n\n  Finally, [[unique-name-generator]] accepts the following options to further customize behavior:\n\n  ### `:name-key-fn`\n\n  Generated aliases are unique by the value of `[id (name-key-fn original-name)]`; the default is `identity`, so by\n  default aliases are unique by `[id name-key-fn]`. Specify something custom here if you want to make the unique\n  aliases unique by some other value, for example to make them unique without regards to case:\n\n    (let [f (unique-name-generator :name-key-fn str/lower-case)]\n      [(f \"x\")\n       (f \"X\")\n       (f \"X\")])\n    ;; -> [\"x\" \"X_2\" \"X_3\"]\n\n  This is useful for databases that treat column aliases as case-insensitive (see #19618 for some examples of this).\n\n  ### `:unique-alias-fn`\n\n  The function used to generate a potentially-unique alias given an original alias and unique suffix with the signature\n\n    (unique-alias-fn original suffix)\n\n  By default, combines them like `original_suffix`, but you can supply a custom function if you need to change this\n  behavior:\n\n    (let [f (unique-name-generator :unique-alias-fn (fn [x y] (format \"%s~~%s\" y x)))]\n      [(f \"x\")\n       (f \"x\")])\n  ;; -> [\"x\" \"2~~x\"]\n\n  This is useful if you need to constrain the generated suffix in some way, for example by limiting its length or\n  escaping characters disallowed in a column alias.\n\n  Values generated by this function are recursively checked for uniqueness, and will keep trying values a unique value\n  is generated; for this reason the function *must* return a unique value for every unique input. Use caution when\n  limiting the length of the identifier generated (consider appending a hash in cases like these).","^;9",["^ ","^:N",true,"^;:",0,"^:Q",0,"^:K",[["^19",[["^ ","^<I",["^=V","^=W"],"^=X",["^ ","^=V","^=Y","^=W",["^19",["^=Z",["^=[","^>0"],["^19",["^11","^=[","~c_","^>0"]]]]]]]]],"^:H",["^19",[["~$&",["^ ","^<I",["^=V","^=W"],"^=X",["^ ","^=V","^=Y","^=W",["^19",["^=Z",["^=[","^>0"],["^19",["^11","^=[","~c_","^>0"]]]]]]]]],"^:M",["^19",[null]]]],"^K","^24","^7","metabase/mbql/util.cljc","^;",28,"^;9",["^ ","^:N",true,"^;:",0,"^:Q",0,"^:K",[["^19",[["^ ","^<I",["^=V","^=W"],"^=X",["^ ","^=V","^=Y","^=W",["^19",["^=Z",["^=[","^>0"],["^19",["^11","^=[","~c_","^>0"]]]]]]]]],"^:H",["^19",[["~$&",["^ ","^<I",["^=V","^=W"],"^=X",["^ ","^=V","^=Y","^=W",["^19",["^=Z",["^=[","^>0"],["^19",["^11","^=[","~c_","^>0"]]]]]]]]],"^:M",["^19",[null]]],"^:K",[["^19",[["^ ","^<I",["^=V","^=W"],"^=X",["^ ","^=V","^=Y","^=W",["^19",["^=Z",["^=[","^>0"],["^19",["^11","^=[","~c_","^>0"]]]]]]]]],"^:L",null,"^;:",0,"^:M",["^19",[null]],"^9",1,"^:N",true,"^;;",[["^ ","^;:",0,"^:N",true,"^;<","~$function"]],"^8",464,"^:O","^:T","^:",464,"^:Q",0,"^:R",true,"^:H",["^19",[["~$&",["^ ","^<I",["^=V","^=W"],"^=X",["^ ","^=V","^=Y","^=W",["^19",["^=Z",["^=[","^>0"],["^19",["^11","^=[","~c_","^>0"]]]]]]]]],"^6","Return a function that can be used to uniquify string names. Function maintains an internal counter that will suffix\n  any names passed to it as needed so all results will be unique.\n\n    (let [unique-name (unique-name-generator)]\n      [(unique-name \"A\")\n       (unique-name \"B\")\n       (unique-name \"A\")])\n    ;; -> [\"A\" \"B\" \"A_2\"]\n\n  By default, unique aliases are generated for each unique `[id original-name]` key pair. By default, a unique `id` is\n  generated for every call, meaning repeated calls to [[unique-name-generator]] with the same `original-name` will\n  return different unique aliases. If idempotence is desired, the function returned by the generator also has a 2\n  airity version with the signature\n\n    (unique-name-fn id original-name)\n\n  for example:\n\n    (let [unique-name (unique-name-generator)]\n      [(unique-name :x \"A\")\n       (unique-name :x \"B\")\n       (unique-name :x \"A\")\n       (unique-name :y \"A\")])\n    ;; -> [\"A\" \"B\" \"A\" \"A_2\"]\n\n  Finally, [[unique-name-generator]] accepts the following options to further customize behavior:\n\n  ### `:name-key-fn`\n\n  Generated aliases are unique by the value of `[id (name-key-fn original-name)]`; the default is `identity`, so by\n  default aliases are unique by `[id name-key-fn]`. Specify something custom here if you want to make the unique\n  aliases unique by some other value, for example to make them unique without regards to case:\n\n    (let [f (unique-name-generator :name-key-fn str/lower-case)]\n      [(f \"x\")\n       (f \"X\")\n       (f \"X\")])\n    ;; -> [\"x\" \"X_2\" \"X_3\"]\n\n  This is useful for databases that treat column aliases as case-insensitive (see #19618 for some examples of this).\n\n  ### `:unique-alias-fn`\n\n  The function used to generate a potentially-unique alias given an original alias and unique suffix with the signature\n\n    (unique-alias-fn original suffix)\n\n  By default, combines them like `original_suffix`, but you can supply a custom function if you need to change this\n  behavior:\n\n    (let [f (unique-name-generator :unique-alias-fn (fn [x y] (format \"%s~~%s\" y x)))]\n      [(f \"x\")\n       (f \"x\")])\n  ;; -> [\"x\" \"2~~x\"]\n\n  This is useful if you need to constrain the generated suffix in some way, for example by limiting its length or\n  escaping characters disallowed in a column alias.\n\n  Values generated by this function are recursively checked for uniqueness, and will keep trying values a unique value\n  is generated; for this reason the function *must* return a unique value for every unique input. Use caution when\n  limiting the length of the identifier generated (consider appending a hash in cases like these)."],"~$desugar-temporal-extract",["^ ","^:G",null,"^5",["^ ","^7","metabase/mbql/util.cljc","^8",279,"^9",7,"^:",279,"^;",31,"^:H",["^19",["^:I",["^19",[["~$m"]]]]],"^6","Replace datetime extractions clauses like `[:get-year field]` with `[:temporal-extract field :year]`."],"^K","^40","^7","metabase/mbql/util.cljc","^;",31,"^:K",["^19",[["~$m"]]],"^:L",null,"^:M",["^19",[null,null]],"^9",1,"^:N",false,"^8",279,"^:O","^:T","^:",279,"^:Q",1,"^:R",true,"^:H",["^19",["^:I",["^19",[["~$m"]]]]],"^6","Replace datetime extractions clauses like `[:get-year field]` with `[:temporal-extract field :year]`."],"~$expression-with-name",["^ ","^:Z",["^19",["^1X","~$output-schema48245",["~$input-schema48247"]]],"^:G",null,"^5",["^ ","^:Z",["^19",["^1X","^>4",["^>5"]]],"^7","metabase/mbql/util.cljc","^;",29,"^9",9,"^;1",["^19",["^:I",["^19",[["^;P","~$expression-name","~:-",["^19",["~$s/cond-pre","~$s/Keyword","~$schema.helpers/NonBlankString"]]]]]]],"^8",411,"^:",411,"^:H",["^19",["^:I",["^19",[["^;P","^>6"]]]]],"^6","Inputs: [inner-query expression-name :- (s/cond-pre s/Keyword schema.helpers/NonBlankString)]\n  Returns: mbql.s/FieldOrExpressionDef\n\n  Return the `Expression` referenced by a given `expression-name`."],"^K","^3U","^7","metabase/mbql/util.cljc","^;",29,"^:K",["^19",[["^;P","^>6"]]],"^:L",null,"^:M",["^19",[null,null]],"^9",1,"^:N",false,"^;1",["^19",["^:I",["^19",[["^;P","^>6","~:-",["^19",["^>7","^>8","^>9"]]]]]]],"^8",411,"^:O","^:T","^:",411,"^:Q",2,"^:R",true,"^:H",["^19",["^:I",["^19",[["^;P","^>6"]]]]],"^6","Inputs: [inner-query expression-name :- (s/cond-pre s/Keyword schema.helpers/NonBlankString)]\n  Returns: mbql.s/FieldOrExpressionDef\n\n  Return the `Expression` referenced by a given `expression-name`."],"~$assoc-field-options",["^ ","^:G",null,"^5",["^ ","^7","metabase/mbql/util.cljc","^8",685,"^9",7,"^:",685,"^;",26,"^:H",["^19",["^:I",["^19",[["^<G","~$&","~$kvs"]]]]],"^6","Like [[clojure.core/assoc]], but for the options in a `:field`, `:expression`, or `:aggregation` clause.","^;9",["^ ","^:N",true,"^;:",1,"^:Q",1,"^:K",[["^19",["^<G","^>;"]]],"^:H",["^19",[["^<G","~$&","^>;"]]],"^:M",["^19",[null]]]],"^K","^26","^7","metabase/mbql/util.cljc","^;",26,"^;9",["^ ","^:N",true,"^;:",1,"^:Q",1,"^:K",[["^19",["^<G","^>;"]]],"^:H",["^19",[["^<G","~$&","^>;"]]],"^:M",["^19",[null]]],"^:K",[["^19",["^<G","^>;"]]],"^:L",null,"^;:",1,"^:M",["^19",[null]],"^9",1,"^:N",true,"^;;",[["^ ","^;:",1,"^:N",true,"^;<","^:T"]],"^8",685,"^:O","^:T","^:",685,"^:Q",1,"^:R",true,"^:H",["^19",[["^<G","~$&","^>;"]]],"^6","Like [[clojure.core/assoc]], but for the options in a `:field`, `:expression`, or `:aggregation` clause."],"~$negate-filter-clause",["^ ","^:Z",["^19",["^1X","~$output-schema48197",["~$input-schema48199"]]],"^:G",null,"^5",["^ ","^:Z",["^19",["^1X","^>=",["^>>"]]],"^7","metabase/mbql/util.cljc","^;",29,"^9",9,"^;1",["^19",["^:I",["^19",[["^;K","~:-","^;6"]]]]],"^8",338,"^:",338,"^:H",["^19",["^:I",["^19",[["^;K"]]]]],"^6","Inputs: [filter-clause :- mbql.s/Filter]\n  Returns: mbql.s/Filter\n\n  Return the logical compliment of an MBQL filter clause, generally without using `:not` (except for the string\n  filter clause types). Useful for generating highly optimized filter clauses and for drivers that do not support\n  top-level `:not` filter clauses."],"^K","^45","^7","metabase/mbql/util.cljc","^;",29,"^:K",["^19",[["^;K"]]],"^:L",null,"^:M",["^19",[null,null]],"^9",1,"^:N",false,"^;1",["^19",["^:I",["^19",[["^;K","~:-","^;6"]]]]],"^8",338,"^:O","^:T","^:",338,"^:Q",1,"^:R",true,"^:H",["^19",["^:I",["^19",[["^;K"]]]]],"^6","Inputs: [filter-clause :- mbql.s/Filter]\n  Returns: mbql.s/Filter\n\n  Return the logical compliment of an MBQL filter clause, generally without using `:not` (except for the string\n  filter clause types). Useful for generating highly optimized filter clauses and for drivers that do not support\n  top-level `:not` filter clauses."],"~$uniquify-names",["^ ","^:Z",["^19",["^1X","~$output-schema48276",["~$input-schema48278"]]],"^:G",null,"^5",["^ ","^:Z",["^19",["^1X","^>@",["^>A"]]],"^7","metabase/mbql/util.cljc","^;",23,"^9",9,"^;1",["^19",["^:I",["^19",[["~$names","~:-",["~$s/Str"]]]]]],"^8",560,"^:",560,"^:H",["^19",["^:I",["^19",[["^>B"]]]]],"^6","Inputs: [names :- [s/Str]]\n  Returns: (s/constrained [s/Str] distinct? \"sequence of unique strings\")\n\n  Make the names in a sequence of string names unique by adding suffixes such as `_2`.\n\n     (uniquify-names [\"count\" \"sum\" \"count\" \"count_2\"])\n     ;; -> [\"count\" \"sum\" \"count_2\" \"count_2_2\"]"],"^K","^49","^7","metabase/mbql/util.cljc","^;",23,"^:K",["^19",[["^>B"]]],"^:L",null,"^:M",["^19",[null,null]],"^9",1,"^:N",false,"^;1",["^19",["^:I",["^19",[["^>B","~:-",["^>C"]]]]]],"^8",560,"^:O","^2V","^:",560,"^:Q",1,"^:R",true,"^:H",["^19",["^:I",["^19",[["^>B"]]]]],"^6","Inputs: [names :- [s/Str]]\n  Returns: (s/constrained [s/Str] distinct? \"sequence of unique strings\")\n\n  Make the names in a sequence of string names unique by adding suffixes such as `_2`.\n\n     (uniquify-names [\"count\" \"sum\" \"count\" \"count_2\"])\n     ;; -> [\"count\" \"sum\" \"count_2\" \"count_2_2\"]"],"~$update-field-options",["^ ","^:Z",["^19",["^1X","~$output-schema48358",["~$input-schema48360"]]],"^:G",null,"^5",["^ ","^:Z",["^19",["^1X","^>E",["^>F"]]],"^7","metabase/mbql/util.cljc","^;",29,"^;9",["^ ","^:N",true,"^;:",2,"^:Q",2,"^:K",[["^19",[["~$clause-type","^;R","~$opts"],"~$f","~$args"]]],"^:H",["^19",[[["^>G","^;R","^>H"],"~$f","~$&","^>I"]]],"^:M",["^19",[null]]],"^9",9,"^;1",["^19",["^:I",["^19",[[["^>G","^;R","^>H"],"~:-","~$mbql.s/FieldOrAggregationReference","~$f","~$&","^>I"]]]]],"^8",672,"^:",672,"^:H",["^19",["^:I",["^19",[[["^>G","^;R","^>H"],"~$f","~$&","^>I"]]]]],"^6","Inputs: [[clause-type id-or-name opts] :- mbql.s/FieldOrAggregationReference f & args]\n  Returns: mbql.s/FieldOrAggregationReference\n\n  Like [[clojure.core/update]], but for the options in a `:field`, `:expression`, or `:aggregation` clause."],"^K","^4?","^7","metabase/mbql/util.cljc","^;",29,"^;9",["^ ","^:N",true,"^;:",2,"^:Q",2,"^:K",[["^19",[["^>G","^;R","^>H"],"~$f","^>I"]]],"^:H",["^19",[[["^>G","^;R","^>H"],"~$f","~$&","^>I"]]],"^:M",["^19",[null]]],"^:K",[["^19",[["^>G","^;R","^>H"],"~$f","^>I"]]],"^:L",null,"^;:",2,"^:M",["^19",[null]],"^9",1,"^:N",true,"^;;",[["^ ","^;:",2,"^:N",true,"^;<","^;E"]],"^;1",["^19",["^:I",["^19",[[["^>G","^;R","^>H"],"~:-","^>J","~$f","~$&","^>I"]]]]],"^8",672,"^:O","^:T","^:",672,"^:Q",2,"^:R",true,"^:H",["^19",[[["^>G","^;R","^>H"],"~$f","~$&","^>I"]]],"^6","Inputs: [[clause-type id-or-name opts] :- mbql.s/FieldOrAggregationReference f & args]\n  Returns: mbql.s/FieldOrAggregationReference\n\n  Like [[clojure.core/update]], but for the options in a `:field`, `:expression`, or `:aggregation` clause."],"~$desugar-filter-clause",["^ ","^:Z",["^19",["^1X","~$output-schema48151",["~$input-schema48153"]]],"^:G",null,"^5",["^ ","^:Z",["^19",["^1X","^>L",["^>M"]]],"^7","metabase/mbql/util.cljc","^;",30,"^9",9,"^;1",["^19",["^:I",["^19",[["^;K","~:-","^;6"]]]]],"^8",302,"^:",302,"^:H",["^19",["^:I",["^19",[["^;K"]]]]],"^6","Inputs: [filter-clause :- mbql.s/Filter]\n  Returns: mbql.s/Filter\n\n  Rewrite various 'syntatic sugar' filter clauses like `:time-interval` and `:inside` as simpler, logically\n  equivalent clauses. This can be used to simplify the number of filter clauses that need to be supported by anything\n  that needs to enumerate all the possible filter types (such as driver query processor implementations, or the\n  implementation [[negate-filter-clause]] below.)"],"^K","^2=","^7","metabase/mbql/util.cljc","^;",30,"^:K",["^19",[["^;K"]]],"^:L",null,"^:M",["^19",[null,null]],"^9",1,"^:N",false,"^;1",["^19",["^:I",["^19",[["^;K","~:-","^;6"]]]]],"^8",302,"^:O",["^I",[null,"^:T"]],"^:",302,"^:Q",1,"^:R",true,"^:H",["^19",["^:I",["^19",[["^;K"]]]]],"^6","Inputs: [filter-clause :- mbql.s/Filter]\n  Returns: mbql.s/Filter\n\n  Rewrite various 'syntatic sugar' filter clauses like `:time-interval` and `:inside` as simpler, logically\n  equivalent clauses. This can be used to simplify the number of filter clauses that need to be supported by anything\n  that needs to enumerate all the possible filter types (such as driver query processor implementations, or the\n  implementation [[negate-filter-clause]] below.)"],"~$desugar-equals-and-not-equals-with-extra-args",["^ ","^:G",null,"^5",["^ ","^7","metabase/mbql/util.cljc","^8",231,"^9",7,"^:",231,"^;",52,"^:H",["^19",["^:I",["^19",[["~$m"]]]]],"^6","~`:=` and `!=` clauses with more than 2 args automatically get rewritten as compound filters.\n\n     [:= field x y]  -> [:or  [:=  field x] [:=  field y]]\n     [:!= field x y] -> [:and [:!= field x] [:!= field y]]"],"^K","^2C","^7","metabase/mbql/util.cljc","^;",52,"^:K",["^19",[["~$m"]]],"^:L",null,"^:M",["^19",[null,null]],"^9",1,"^:N",false,"^8",231,"^:O","^:T","^:",231,"^:Q",1,"^:R",true,"^:H",["^19",["^:I",["^19",[["~$m"]]]]],"^6","~`:=` and `!=` clauses with more than 2 args automatically get rewritten as compound filters.\n\n     [:= field x y]  -> [:or  [:=  field x] [:=  field y]]\n     [:!= field x y] -> [:and [:!= field x] [:!= field y]]"],"~$pre-alias-and-uniquify-aggregations",["^ ","^:Z",["^19",["^1X","~$output-schema48338",["~$input-schema48340"]]],"^:G",null,"^5",["^ ","^:Z",["^19",["^1X","^>P",["^>Q"]]],"^7","metabase/mbql/util.cljc","^;",44,"^9",9,"^;1",["^19",["^:I",["^19",[["^<X","~:-",["^19",["^<Y","^<Z"]],"^<O","~:-",["^<["]]]]]],"^8",619,"^=0",1,"^:",619,"^:H",["^19",["^:I",["^19",[["^<X","^<O"]]]]],"^6","Inputs: [aggregation->name-fn :- (s/pred fn?) aggregations :- [mbql.s/Aggregation]]\n  Returns: UniquelyNamedAggregations\n\n  Wrap every aggregation clause in a `:named` clause with a unique name. Combines `pre-alias-aggregations` with\n  `uniquify-named-aggregations`."],"^K","^4F","^7","metabase/mbql/util.cljc","^;",44,"^:K",["^19",[["^<X","^<O"]]],"^:L",null,"^:M",["^19",[null,null]],"^9",1,"^:N",false,"^;1",["^19",["^:I",["^19",[["^<X","~:-",["^19",["^<Y","^<Z"]],"^<O","~:-",["^<["]]]]]],"^8",619,"^:O","^2V","^=0",1,"^:",619,"^:Q",2,"^:R",true,"^:H",["^19",["^:I",["^19",[["^<X","^<O"]]]]],"^6","Inputs: [aggregation->name-fn :- (s/pred fn?) aggregations :- [mbql.s/Aggregation]]\n  Returns: UniquelyNamedAggregations\n\n  Wrap every aggregation clause in a `:named` clause with a unique name. Combines `pre-alias-aggregations` with\n  `uniquify-named-aggregations`."]],"^17",["^ ","^@","^@","^U","^U","^V","^W","^X","^X","^Y","^X","^W","^W","~$s","^U"],"~:cljs.analyzer/constants",["^ ","^14",["^I",["^>8","~:week-of-year-instance","^<L","~:starts-with","^1W","~:name-key-fn","^:Z","^<5","~:get-quarter","^<Z","~:<=","^>C","~:inside","^;P","~:base-type","~:expression","~:is-empty","~:contains","~:temporal-extract","^=6","^>B","^<N","~$arg1","^<O","~:index","~:instance","^=A","~:else","^<1","~:>","~:get-minute","~:default","^;Q","~:day-of-week","^K","^=X","~:iso","~:temporal-unit","~:us","~:get-hour","~:hour-of-day","^;B","~:expression-name","~:get-week","^;I","~:max-results","~:tried","~:between","^<E","~:month-of-year","~:not","~:field","^<4","^<C","^<R","~:/","~:is-null","^;2","^;A","~:>=","~:not-empty","~:get-day-of-week","~:day-of-month","^>7","^<Y","^;K","^;3","~:max-results-bare-rows","^<[","^>6","^<X","~:get-second","~:filter","~:native","~:aggregation-options","~:next","~:include-current","~:year-of-era","~:clojure.core.match/not-found","~:!=","^;[","~:expressions","~:current","~:get-month","~:invalid-query","~:get-year","~:order-by","~:found","~:second-of-minute","~:and","~:week-of-year-us","^<;","^<:","^;5","^<P","~:not-null","^;4","~:get-day","^;6","~:items","~$arg0","^<2","~:does-not-contain","^<D","~:hierarchy","~:week-of-year-iso","~:unique-alias-fn","~:last","~:=","~:ends-with","~:<","~:quarter-of-year","~:relative-datetime","~:minute-of-hour","~:source-field","~:time-interval","^>9","~$f"]],"~:order",["^<:","^:Z","^<;","^?5","^?D","^=X","^@1","^;K","^1W","^;P","^;Q","^;4","^;5","^;6","^?M","^;2","^;3","^<2","^>X","^?B","^@3","^?T","^?F","~:=","^?H","^>[","^>Z","^?E","^?:","^@A","^@>","^?Q","^?P","^@;","^?V","^@7","^?0","^?S","^?7","^>V","^?Y","^??","^?;","^?<","^@4","^?6","^?W","^?I","^?9","^?4","^?L","^@=","^?R","^@2","^@9","^?=","^?J","^@?","^?C","^?8","^>S","^@0","^?1","~:/","^;I","^=A","^@8","~:>","^>W","~:<","^?G","^>T","^@<","^@6","^;[","^<1","^<4","^?N","^=6","^?2","^?Z","^>6","^>7","^>8","^>9","^?U","^?>","^?A","^?[","^?X","^<5","^<C","^<E","^<D","^<P","^?3","^>U","^@:","^>B","^>C","^K","^;A","^;B","^?O","^<X","^<Y","^<Z","^<O","^<[","^<L","^?@","^?K","^<N","^<R","^@5","~$f","^>Y","^@@"]],"^1>",["^ ","^15",["^I",[]]],"^1?",["^ "],"^1@",["^Z","^@","^12","^R","^T","^[","^X","^W","^U"]],"^O","^L","~:ns-specs",["^ "],"~:ns-spec-vars",["^I",[]],"~:compiler-options",["^5L",[["^@E","~:static-fns"],true,["^@E","~:shadow-tweaks"],null,["^@E","~:source-map-inline"],null,["^@E","~:elide-asserts"],true,["^@E","~:optimize-constants"],null,["^@E","^1E"],null,["^@E","~:external-config"],null,["^@E","~:tooling-config"],null,["^@E","~:emit-constants"],null,["^@E","~:load-tests"],false,["^@E","~:form-size-threshold"],null,["^@E","~:global-goog-object&array"],null,["^@E","~:data-readers"],null,["^@E","~:infer-externs"],"~:auto",["^@E","^1G"],["^I",["^1H"]],["~:js-options","~:js-provider"],"^15",["~:mode"],"~:release",["^@E","~:fn-invoke-direct"],null,["^@E","~:source-map"],null]]]