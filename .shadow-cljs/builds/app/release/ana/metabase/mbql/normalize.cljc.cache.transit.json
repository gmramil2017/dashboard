["^ ","~:output",["^ ","~:js","goog.provide('metabase.mbql.normalize');\n/**\n * True if `x` is an MBQL clause (a sequence with a token as its first arg). (This is different from the implementation\n *   in `mbql.u` because it also supports un-normalized clauses. You shouldn't need to use this outside of this\n *   namespace.)\n */\nmetabase.mbql.normalize.mbql_clause_QMARK_ = (function metabase$mbql$normalize$mbql_clause_QMARK_(x){\nvar and__5043__auto__ = cljs.core.sequential_QMARK_(x);\nif(and__5043__auto__){\nvar and__5043__auto____$1 = (!(cljs.core.map_entry_QMARK_(x)));\nif(and__5043__auto____$1){\nreturn cljs.core.some_fn.cljs$core$IFn$_invoke$arity$2(cljs.core.keyword_QMARK_,cljs.core.string_QMARK_)(cljs.core.first(x));\n} else {\nreturn and__5043__auto____$1;\n}\n} else {\nreturn and__5043__auto__;\n}\n});\n/**\n * Normalize token `x`, but only if it's a keyword or string.\n */\nmetabase.mbql.normalize.maybe_normalize_token = (function metabase$mbql$normalize$maybe_normalize_token(x){\nif(cljs.core.truth_(cljs.core.some_fn.cljs$core$IFn$_invoke$arity$2(cljs.core.keyword_QMARK_,cljs.core.string_QMARK_)(x))){\nreturn metabase.mbql.util.normalize_token(x);\n} else {\nreturn x;\n}\n});\n/**\n * If `x` an MBQL clause, and an instance of clauses defined by keyword(s) `k-or-ks`?\n * \n *  (is-clause? :count [:count 10])        ; -> true\n *  (is-clause? #{:+ :- :* :/} [:+ 10 20]) ; -> true\n * \n *   (This is different from the implementation in `mbql.u` because it also supports un-normalized clauses. You shouldn't\n *   need to use this outside of this namespace.)\n */\nmetabase.mbql.normalize.is_clause_QMARK_ = (function metabase$mbql$normalize$is_clause_QMARK_(k_or_ks,x){\nvar and__5043__auto__ = metabase.mbql.normalize.mbql_clause_QMARK_(x);\nif(cljs.core.truth_(and__5043__auto__)){\nvar clause_name = metabase.mbql.normalize.maybe_normalize_token(cljs.core.first(x));\nif(cljs.core.coll_QMARK_(k_or_ks)){\nvar fexpr__63610 = cljs.core.set(k_or_ks);\nreturn (fexpr__63610.cljs$core$IFn$_invoke$arity$1 ? fexpr__63610.cljs$core$IFn$_invoke$arity$1(clause_name) : fexpr__63610.call(null,clause_name));\n} else {\nreturn cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(k_or_ks,clause_name);\n}\n} else {\nreturn and__5043__auto__;\n}\n});\nmetabase.mbql.normalize.normalize_mbql_clause_tokens = (function (){var method_table__5642__auto__ = cljs.core.atom.cljs$core$IFn$_invoke$arity$1(cljs.core.PersistentArrayMap.EMPTY);\nvar prefer_table__5643__auto__ = cljs.core.atom.cljs$core$IFn$_invoke$arity$1(cljs.core.PersistentArrayMap.EMPTY);\nvar method_cache__5644__auto__ = cljs.core.atom.cljs$core$IFn$_invoke$arity$1(cljs.core.PersistentArrayMap.EMPTY);\nvar cached_hierarchy__5645__auto__ = cljs.core.atom.cljs$core$IFn$_invoke$arity$1(cljs.core.PersistentArrayMap.EMPTY);\nvar hierarchy__5646__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$3(cljs.core.PersistentArrayMap.EMPTY,new cljs.core.Keyword(null,\"hierarchy\",\"hierarchy\",-1053470341),(function (){var fexpr__63633 = cljs.core.get_global_hierarchy;\nreturn (fexpr__63633.cljs$core$IFn$_invoke$arity$0 ? fexpr__63633.cljs$core$IFn$_invoke$arity$0() : fexpr__63633.call(null));\n})());\nreturn (new cljs.core.MultiFn(cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(\"metabase.mbql.normalize\",\"normalize-mbql-clause-tokens\"),cljs.core.comp.cljs$core$IFn$_invoke$arity$2(metabase.mbql.normalize.maybe_normalize_token,cljs.core.first),new cljs.core.Keyword(null,\"default\",\"default\",-1987822328),hierarchy__5646__auto__,method_table__5642__auto__,prefer_table__5643__auto__,method_cache__5644__auto__,cached_hierarchy__5645__auto__));\n})();\nmetabase.mbql.normalize.normalize_mbql_clause_tokens.cljs$core$IMultiFn$_add_method$arity$3(null,new cljs.core.Keyword(null,\"aggregation\",\"aggregation\",1597476696),(function (p__63636){\nvar vec__63641 = p__63636;\nvar _ = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__63641,(0),null);\nvar aggregation_index = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__63641,(1),null);\nvar option = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__63641,(2),null);\nvar G__63649 = new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"aggregation\",\"aggregation\",1597476696),aggregation_index], null);\nif((!((option == null)))){\nreturn cljs.core.conj.cljs$core$IFn$_invoke$arity$2(G__63649,option);\n} else {\nreturn G__63649;\n}\n}));\nmetabase.mbql.normalize.normalize_mbql_clause_tokens.cljs$core$IMultiFn$_add_method$arity$3(null,new cljs.core.Keyword(null,\"expression\",\"expression\",202311876),(function (p__63660){\nvar vec__63666 = p__63660;\nvar _ = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__63666,(0),null);\nvar expression_name = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__63666,(1),null);\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"expression\",\"expression\",202311876),(((expression_name instanceof cljs.core.Keyword))?metabase.mbql.util.qualified_name(expression_name):expression_name)], null);\n}));\nmetabase.mbql.normalize.normalize_mbql_clause_tokens.cljs$core$IMultiFn$_add_method$arity$3(null,new cljs.core.Keyword(null,\"binning-strategy\",\"binning-strategy\",2063329158),(function (p__63689){\nvar vec__63691 = p__63689;\nvar _ = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__63691,(0),null);\nvar field = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__63691,(1),null);\nvar strategy_name = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__63691,(2),null);\nvar strategy_param = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__63691,(3),null);\nif(cljs.core.truth_(strategy_param)){\nreturn cljs.core.conj.cljs$core$IFn$_invoke$arity$2(metabase.mbql.normalize.normalize_mbql_clause_tokens.cljs$core$IFn$_invoke$arity$1(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"binning-strategy\",\"binning-strategy\",2063329158),field,strategy_name], null)),strategy_param);\n} else {\nreturn new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"binning-strategy\",\"binning-strategy\",2063329158),(metabase.mbql.normalize.normalize_tokens.cljs$core$IFn$_invoke$arity$2 ? metabase.mbql.normalize.normalize_tokens.cljs$core$IFn$_invoke$arity$2(field,new cljs.core.Keyword(null,\"ignore-path\",\"ignore-path\",944069061)) : metabase.mbql.normalize.normalize_tokens.call(null,field,new cljs.core.Keyword(null,\"ignore-path\",\"ignore-path\",944069061))),metabase.mbql.normalize.maybe_normalize_token(strategy_name)], null);\n}\n}));\nmetabase.mbql.normalize.normalize_mbql_clause_tokens.cljs$core$IMultiFn$_add_method$arity$3(null,new cljs.core.Keyword(null,\"field\",\"field\",-1302436500),(function (p__63702){\nvar vec__63703 = p__63702;\nvar _ = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__63703,(0),null);\nvar id_or_name = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__63703,(1),null);\nvar opts = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__63703,(2),null);\nvar opts__$1 = (metabase.mbql.normalize.normalize_tokens.cljs$core$IFn$_invoke$arity$2 ? metabase.mbql.normalize.normalize_tokens.cljs$core$IFn$_invoke$arity$2(opts,new cljs.core.Keyword(null,\"ignore-path\",\"ignore-path\",944069061)) : metabase.mbql.normalize.normalize_tokens.call(null,opts,new cljs.core.Keyword(null,\"ignore-path\",\"ignore-path\",944069061)));\nreturn new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"field\",\"field\",-1302436500),id_or_name,(function (){var G__63712 = opts__$1;\nvar G__63712__$1 = (cljs.core.truth_(new cljs.core.Keyword(null,\"base-type\",\"base-type\",1167971299).cljs$core$IFn$_invoke$arity$1(opts__$1))?cljs.core.update.cljs$core$IFn$_invoke$arity$3(G__63712,new cljs.core.Keyword(null,\"base-type\",\"base-type\",1167971299),cljs.core.keyword):G__63712);\nvar G__63712__$2 = (cljs.core.truth_(new cljs.core.Keyword(null,\"temporal-unit\",\"temporal-unit\",-1892306358).cljs$core$IFn$_invoke$arity$1(opts__$1))?cljs.core.update.cljs$core$IFn$_invoke$arity$3(G__63712__$1,new cljs.core.Keyword(null,\"temporal-unit\",\"temporal-unit\",-1892306358),cljs.core.keyword):G__63712__$1);\nif(cljs.core.truth_(new cljs.core.Keyword(null,\"binning\",\"binning\",1709835866).cljs$core$IFn$_invoke$arity$1(opts__$1))){\nreturn cljs.core.update.cljs$core$IFn$_invoke$arity$3(G__63712__$2,new cljs.core.Keyword(null,\"binning\",\"binning\",1709835866),(function (binning){\nvar G__63720 = binning;\nif(cljs.core.truth_(new cljs.core.Keyword(null,\"strategy\",\"strategy\",-1471631918).cljs$core$IFn$_invoke$arity$1(binning))){\nreturn cljs.core.update.cljs$core$IFn$_invoke$arity$3(G__63720,new cljs.core.Keyword(null,\"strategy\",\"strategy\",-1471631918),cljs.core.keyword);\n} else {\nreturn G__63720;\n}\n}));\n} else {\nreturn G__63712__$2;\n}\n})()], null);\n}));\nmetabase.mbql.normalize.normalize_mbql_clause_tokens.cljs$core$IMultiFn$_add_method$arity$3(null,new cljs.core.Keyword(null,\"field-literal\",\"field-literal\",-1295883554),(function (p__63730){\nvar vec__63731 = p__63730;\nvar _ = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__63731,(0),null);\nvar field_name = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__63731,(1),null);\nvar field_type = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__63731,(2),null);\nreturn new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"field-literal\",\"field-literal\",-1295883554),(((field_name instanceof cljs.core.Keyword))?metabase.mbql.util.qualified_name(field_name):field_name),cljs.core.keyword.cljs$core$IFn$_invoke$arity$1(field_type)], null);\n}));\nmetabase.mbql.normalize.normalize_mbql_clause_tokens.cljs$core$IMultiFn$_add_method$arity$3(null,new cljs.core.Keyword(null,\"datetime-field\",\"datetime-field\",21731696),(function (p__63741){\nvar vec__63742 = p__63741;\nvar _ = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__63742,(0),null);\nvar field = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__63742,(1),null);\nvar as_or_unit = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__63742,(2),null);\nvar maybe_unit = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__63742,(3),null);\nif(cljs.core.truth_(maybe_unit)){\nreturn new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"datetime-field\",\"datetime-field\",21731696),(metabase.mbql.normalize.normalize_tokens.cljs$core$IFn$_invoke$arity$2 ? metabase.mbql.normalize.normalize_tokens.cljs$core$IFn$_invoke$arity$2(field,new cljs.core.Keyword(null,\"ignore-path\",\"ignore-path\",944069061)) : metabase.mbql.normalize.normalize_tokens.call(null,field,new cljs.core.Keyword(null,\"ignore-path\",\"ignore-path\",944069061))),new cljs.core.Keyword(null,\"as\",\"as\",1148689641),metabase.mbql.normalize.maybe_normalize_token(maybe_unit)], null);\n} else {\nreturn new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"datetime-field\",\"datetime-field\",21731696),(metabase.mbql.normalize.normalize_tokens.cljs$core$IFn$_invoke$arity$2 ? metabase.mbql.normalize.normalize_tokens.cljs$core$IFn$_invoke$arity$2(field,new cljs.core.Keyword(null,\"ignore-path\",\"ignore-path\",944069061)) : metabase.mbql.normalize.normalize_tokens.call(null,field,new cljs.core.Keyword(null,\"ignore-path\",\"ignore-path\",944069061))),metabase.mbql.normalize.maybe_normalize_token(as_or_unit)], null);\n}\n}));\nmetabase.mbql.normalize.normalize_mbql_clause_tokens.cljs$core$IMultiFn$_add_method$arity$3(null,new cljs.core.Keyword(null,\"time-interval\",\"time-interval\",704622015),(function (p__63767){\nvar vec__63770 = p__63767;\nvar _ = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__63770,(0),null);\nvar field = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__63770,(1),null);\nvar amount = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__63770,(2),null);\nvar unit = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__63770,(3),null);\nvar options = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__63770,(4),null);\nif(cljs.core.truth_(options)){\nreturn cljs.core.conj.cljs$core$IFn$_invoke$arity$2(metabase.mbql.normalize.normalize_mbql_clause_tokens.cljs$core$IFn$_invoke$arity$1(new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"time-interval\",\"time-interval\",704622015),field,amount,unit], null)),(metabase.mbql.normalize.normalize_tokens.cljs$core$IFn$_invoke$arity$2 ? metabase.mbql.normalize.normalize_tokens.cljs$core$IFn$_invoke$arity$2(options,new cljs.core.Keyword(null,\"ignore-path\",\"ignore-path\",944069061)) : metabase.mbql.normalize.normalize_tokens.call(null,options,new cljs.core.Keyword(null,\"ignore-path\",\"ignore-path\",944069061))));\n} else {\nreturn new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"time-interval\",\"time-interval\",704622015),(metabase.mbql.normalize.normalize_tokens.cljs$core$IFn$_invoke$arity$2 ? metabase.mbql.normalize.normalize_tokens.cljs$core$IFn$_invoke$arity$2(field,new cljs.core.Keyword(null,\"ignore-path\",\"ignore-path\",944069061)) : metabase.mbql.normalize.normalize_tokens.call(null,field,new cljs.core.Keyword(null,\"ignore-path\",\"ignore-path\",944069061))),((cljs.core.integer_QMARK_(amount))?amount:metabase.mbql.normalize.maybe_normalize_token(amount)),metabase.mbql.normalize.maybe_normalize_token(unit)], null);\n}\n}));\nmetabase.mbql.normalize.normalize_mbql_clause_tokens.cljs$core$IMultiFn$_add_method$arity$3(null,new cljs.core.Keyword(null,\"relative-datetime\",\"relative-datetime\",1285169278),(function (p__63782){\nvar vec__63783 = p__63782;\nvar _ = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__63783,(0),null);\nvar amount = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__63783,(1),null);\nvar unit = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__63783,(2),null);\nif(cljs.core.truth_(unit)){\nreturn new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"relative-datetime\",\"relative-datetime\",1285169278),amount,metabase.mbql.normalize.maybe_normalize_token(unit)], null);\n} else {\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"relative-datetime\",\"relative-datetime\",1285169278),new cljs.core.Keyword(null,\"current\",\"current\",-1088038603)], null);\n}\n}));\nmetabase.mbql.normalize.normalize_mbql_clause_tokens.cljs$core$IMultiFn$_add_method$arity$3(null,new cljs.core.Keyword(null,\"interval\",\"interval\",1708495417),(function (p__63791){\nvar vec__63792 = p__63791;\nvar _ = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__63792,(0),null);\nvar amount = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__63792,(1),null);\nvar unit = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__63792,(2),null);\nreturn new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"interval\",\"interval\",1708495417),amount,metabase.mbql.normalize.maybe_normalize_token(unit)], null);\n}));\nmetabase.mbql.normalize.normalize_mbql_clause_tokens.cljs$core$IMultiFn$_add_method$arity$3(null,new cljs.core.Keyword(null,\"datetime-add\",\"datetime-add\",209603411),(function (p__63799){\nvar vec__63803 = p__63799;\nvar _ = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__63803,(0),null);\nvar field = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__63803,(1),null);\nvar amount = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__63803,(2),null);\nvar unit = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__63803,(3),null);\nreturn new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"datetime-add\",\"datetime-add\",209603411),(metabase.mbql.normalize.normalize_tokens.cljs$core$IFn$_invoke$arity$2 ? metabase.mbql.normalize.normalize_tokens.cljs$core$IFn$_invoke$arity$2(field,new cljs.core.Keyword(null,\"ignore-path\",\"ignore-path\",944069061)) : metabase.mbql.normalize.normalize_tokens.call(null,field,new cljs.core.Keyword(null,\"ignore-path\",\"ignore-path\",944069061))),amount,metabase.mbql.normalize.maybe_normalize_token(unit)], null);\n}));\nmetabase.mbql.normalize.normalize_mbql_clause_tokens.cljs$core$IMultiFn$_add_method$arity$3(null,new cljs.core.Keyword(null,\"datetime-subtract\",\"datetime-subtract\",275307697),(function (p__63813){\nvar vec__63816 = p__63813;\nvar _ = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__63816,(0),null);\nvar field = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__63816,(1),null);\nvar amount = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__63816,(2),null);\nvar unit = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__63816,(3),null);\nreturn new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"datetime-subtract\",\"datetime-subtract\",275307697),(metabase.mbql.normalize.normalize_tokens.cljs$core$IFn$_invoke$arity$2 ? metabase.mbql.normalize.normalize_tokens.cljs$core$IFn$_invoke$arity$2(field,new cljs.core.Keyword(null,\"ignore-path\",\"ignore-path\",944069061)) : metabase.mbql.normalize.normalize_tokens.call(null,field,new cljs.core.Keyword(null,\"ignore-path\",\"ignore-path\",944069061))),amount,metabase.mbql.normalize.maybe_normalize_token(unit)], null);\n}));\nmetabase.mbql.normalize.normalize_mbql_clause_tokens.cljs$core$IMultiFn$_add_method$arity$3(null,new cljs.core.Keyword(null,\"get-week\",\"get-week\",-888059349),(function (p__63831){\nvar vec__63833 = p__63831;\nvar _ = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__63833,(0),null);\nvar field = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__63833,(1),null);\nvar mode = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__63833,(2),null);\nif(cljs.core.truth_(mode)){\nreturn new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"get-week\",\"get-week\",-888059349),(metabase.mbql.normalize.normalize_tokens.cljs$core$IFn$_invoke$arity$2 ? metabase.mbql.normalize.normalize_tokens.cljs$core$IFn$_invoke$arity$2(field,new cljs.core.Keyword(null,\"ignore-path\",\"ignore-path\",944069061)) : metabase.mbql.normalize.normalize_tokens.call(null,field,new cljs.core.Keyword(null,\"ignore-path\",\"ignore-path\",944069061))),metabase.mbql.normalize.maybe_normalize_token(mode)], null);\n} else {\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"get-week\",\"get-week\",-888059349),(metabase.mbql.normalize.normalize_tokens.cljs$core$IFn$_invoke$arity$2 ? metabase.mbql.normalize.normalize_tokens.cljs$core$IFn$_invoke$arity$2(field,new cljs.core.Keyword(null,\"ignore-path\",\"ignore-path\",944069061)) : metabase.mbql.normalize.normalize_tokens.call(null,field,new cljs.core.Keyword(null,\"ignore-path\",\"ignore-path\",944069061)))], null);\n}\n}));\nmetabase.mbql.normalize.normalize_mbql_clause_tokens.cljs$core$IMultiFn$_add_method$arity$3(null,new cljs.core.Keyword(null,\"temporal-extract\",\"temporal-extract\",1781686405),(function (p__63842){\nvar vec__63843 = p__63842;\nvar _ = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__63843,(0),null);\nvar field = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__63843,(1),null);\nvar unit = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__63843,(2),null);\nvar mode = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__63843,(3),null);\nif(cljs.core.truth_(mode)){\nreturn new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"temporal-extract\",\"temporal-extract\",1781686405),(metabase.mbql.normalize.normalize_tokens.cljs$core$IFn$_invoke$arity$2 ? metabase.mbql.normalize.normalize_tokens.cljs$core$IFn$_invoke$arity$2(field,new cljs.core.Keyword(null,\"ignore-path\",\"ignore-path\",944069061)) : metabase.mbql.normalize.normalize_tokens.call(null,field,new cljs.core.Keyword(null,\"ignore-path\",\"ignore-path\",944069061))),metabase.mbql.normalize.maybe_normalize_token(unit),metabase.mbql.normalize.maybe_normalize_token(mode)], null);\n} else {\nreturn new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"temporal-extract\",\"temporal-extract\",1781686405),(metabase.mbql.normalize.normalize_tokens.cljs$core$IFn$_invoke$arity$2 ? metabase.mbql.normalize.normalize_tokens.cljs$core$IFn$_invoke$arity$2(field,new cljs.core.Keyword(null,\"ignore-path\",\"ignore-path\",944069061)) : metabase.mbql.normalize.normalize_tokens.call(null,field,new cljs.core.Keyword(null,\"ignore-path\",\"ignore-path\",944069061))),metabase.mbql.normalize.maybe_normalize_token(unit)], null);\n}\n}));\nmetabase.mbql.normalize.normalize_mbql_clause_tokens.cljs$core$IMultiFn$_add_method$arity$3(null,new cljs.core.Keyword(null,\"datetime-diff\",\"datetime-diff\",1133112155),(function (p__63848){\nvar vec__63851 = p__63848;\nvar _ = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__63851,(0),null);\nvar x = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__63851,(1),null);\nvar y = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__63851,(2),null);\nvar unit = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__63851,(3),null);\nreturn new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"datetime-diff\",\"datetime-diff\",1133112155),(metabase.mbql.normalize.normalize_tokens.cljs$core$IFn$_invoke$arity$2 ? metabase.mbql.normalize.normalize_tokens.cljs$core$IFn$_invoke$arity$2(x,new cljs.core.Keyword(null,\"ignore-path\",\"ignore-path\",944069061)) : metabase.mbql.normalize.normalize_tokens.call(null,x,new cljs.core.Keyword(null,\"ignore-path\",\"ignore-path\",944069061))),(metabase.mbql.normalize.normalize_tokens.cljs$core$IFn$_invoke$arity$2 ? metabase.mbql.normalize.normalize_tokens.cljs$core$IFn$_invoke$arity$2(y,new cljs.core.Keyword(null,\"ignore-path\",\"ignore-path\",944069061)) : metabase.mbql.normalize.normalize_tokens.call(null,y,new cljs.core.Keyword(null,\"ignore-path\",\"ignore-path\",944069061))),metabase.mbql.normalize.maybe_normalize_token(unit)], null);\n}));\nmetabase.mbql.normalize.normalize_mbql_clause_tokens.cljs$core$IMultiFn$_add_method$arity$3(null,new cljs.core.Keyword(null,\"value\",\"value\",305978217),(function (p__63859){\nvar vec__63863 = p__63859;\nvar _ = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__63863,(0),null);\nvar value = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__63863,(1),null);\nvar info = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__63863,(2),null);\nreturn new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"value\",\"value\",305978217),value,info], null);\n}));\nmetabase.mbql.normalize.normalize_mbql_clause_tokens.cljs$core$IMultiFn$_add_method$arity$3(null,new cljs.core.Keyword(null,\"default\",\"default\",-1987822328),(function (p__63870){\nvar vec__63871 = p__63870;\nvar seq__63872 = cljs.core.seq(vec__63871);\nvar first__63873 = cljs.core.first(seq__63872);\nvar seq__63872__$1 = cljs.core.next(seq__63872);\nvar clause_name = first__63873;\nvar args = seq__63872__$1;\nreturn cljs.core.into.cljs$core$IFn$_invoke$arity$3(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [metabase.mbql.normalize.maybe_normalize_token(clause_name)], null),cljs.core.map.cljs$core$IFn$_invoke$arity$1((function (p1__63869_SHARP_){\nreturn (metabase.mbql.normalize.normalize_tokens.cljs$core$IFn$_invoke$arity$2 ? metabase.mbql.normalize.normalize_tokens.cljs$core$IFn$_invoke$arity$2(p1__63869_SHARP_,new cljs.core.Keyword(null,\"ignore-path\",\"ignore-path\",944069061)) : metabase.mbql.normalize.normalize_tokens.call(null,p1__63869_SHARP_,new cljs.core.Keyword(null,\"ignore-path\",\"ignore-path\",944069061)));\n})),args);\n}));\nmetabase.mbql.normalize.aggregation_subclause_QMARK_ = (function metabase$mbql$normalize$aggregation_subclause_QMARK_(x){\nvar or__5045__auto__ = (cljs.core.truth_(cljs.core.some_fn.cljs$core$IFn$_invoke$arity$2(cljs.core.keyword_QMARK_,cljs.core.string_QMARK_)(x))?(function (){var G__63881 = metabase.mbql.normalize.maybe_normalize_token(x);\nvar fexpr__63880 = new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 18, [new cljs.core.Keyword(null,\"min\",\"min\",444991522),null,new cljs.core.Keyword(null,\"*\",\"*\",-1294732318),null,new cljs.core.Keyword(null,\"stddev\",\"stddev\",-865474939),null,new cljs.core.Keyword(null,\"count-where\",\"count-where\",385407720),null,new cljs.core.Keyword(null,\"-\",\"-\",-2112348439),null,new cljs.core.Keyword(null,\"cum-count\",\"cum-count\",-1964431543),null,new cljs.core.Keyword(null,\"sum-where\",\"sum-where\",2135348428),null,new cljs.core.Keyword(null,\"/\",\"/\",1282502798),null,new cljs.core.Keyword(null,\"distinct\",\"distinct\",-1788879121),null,new cljs.core.Keyword(null,\"percentile\",\"percentile\",-601188752),null,new cljs.core.Keyword(null,\"+\",\"+\",1913524883),null,new cljs.core.Keyword(null,\"var\",\"var\",-769682797),null,new cljs.core.Keyword(null,\"median\",\"median\",569566131),null,new cljs.core.Keyword(null,\"share\",\"share\",-589433933),null,new cljs.core.Keyword(null,\"max\",\"max\",61366548),null,new cljs.core.Keyword(null,\"count\",\"count\",2139924085),null,new cljs.core.Keyword(null,\"avg\",\"avg\",197406200),null,new cljs.core.Keyword(null,\"sum\",\"sum\",136986814),null], null), null);\nreturn (fexpr__63880.cljs$core$IFn$_invoke$arity$1 ? fexpr__63880.cljs$core$IFn$_invoke$arity$1(G__63881) : fexpr__63880.call(null,G__63881));\n})():null);\nif(cljs.core.truth_(or__5045__auto__)){\nreturn or__5045__auto__;\n} else {\nif(cljs.core.truth_(metabase.mbql.normalize.mbql_clause_QMARK_(x))){\nvar G__63883 = cljs.core.first(x);\nreturn (metabase.mbql.normalize.aggregation_subclause_QMARK_.cljs$core$IFn$_invoke$arity$1 ? metabase.mbql.normalize.aggregation_subclause_QMARK_.cljs$core$IFn$_invoke$arity$1(G__63883) : metabase.mbql.normalize.aggregation_subclause_QMARK_.call(null,G__63883));\n} else {\nreturn null;\n}\n}\n});\n/**\n * For old-style aggregations like `{:aggregation :count}` make sure we normalize the ag type (`:count`). Other wacky\n *   clauses like `{:aggregation [:count :count]}` need to be handled as well :(\n */\nmetabase.mbql.normalize.normalize_ag_clause_tokens = (function metabase$mbql$normalize$normalize_ag_clause_tokens(ag_clause){\nif(cljs.core.truth_(cljs.core.some_fn.cljs$core$IFn$_invoke$arity$2(cljs.core.keyword_QMARK_,cljs.core.string_QMARK_)(ag_clause))){\nreturn metabase.mbql.normalize.maybe_normalize_token(ag_clause);\n} else {\nif(cljs.core.truth_(metabase.mbql.normalize.is_clause_QMARK_(new cljs.core.Keyword(null,\"named\",\"named\",-422393479),ag_clause))){\nvar vec__63888 = ag_clause;\nvar seq__63889 = cljs.core.seq(vec__63888);\nvar first__63890 = cljs.core.first(seq__63889);\nvar seq__63889__$1 = cljs.core.next(seq__63889);\nvar _ = first__63890;\nvar first__63890__$1 = cljs.core.first(seq__63889__$1);\nvar seq__63889__$2 = cljs.core.next(seq__63889__$1);\nvar wrapped_ag = first__63890__$1;\nvar more = seq__63889__$2;\nreturn cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"named\",\"named\",-422393479),(metabase.mbql.normalize.normalize_ag_clause_tokens.cljs$core$IFn$_invoke$arity$1 ? metabase.mbql.normalize.normalize_ag_clause_tokens.cljs$core$IFn$_invoke$arity$1(wrapped_ag) : metabase.mbql.normalize.normalize_ag_clause_tokens.call(null,wrapped_ag))], null),more);\n} else {\nif(cljs.core.truth_((cljs.core.truth_(metabase.mbql.normalize.mbql_clause_QMARK_(ag_clause))?metabase.mbql.normalize.aggregation_subclause_QMARK_(cljs.core.second(ag_clause)):null))){\nreturn cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(metabase.mbql.normalize.normalize_ag_clause_tokens,ag_clause);\n} else {\nreturn (metabase.mbql.normalize.normalize_tokens.cljs$core$IFn$_invoke$arity$2 ? metabase.mbql.normalize.normalize_tokens.cljs$core$IFn$_invoke$arity$2(ag_clause,new cljs.core.Keyword(null,\"ignore-path\",\"ignore-path\",944069061)) : metabase.mbql.normalize.normalize_tokens.call(null,ag_clause,new cljs.core.Keyword(null,\"ignore-path\",\"ignore-path\",944069061)));\n\n}\n}\n}\n});\n/**\n * For expressions, we don't want to normalize the name of the expression; keep that as is, and make it a string;\n * normalize the definitions as normal.\n */\nmetabase.mbql.normalize.normalize_expressions_tokens = (function metabase$mbql$normalize$normalize_expressions_tokens(expressions_clause){\nreturn cljs.core.into.cljs$core$IFn$_invoke$arity$2(cljs.core.PersistentArrayMap.EMPTY,(function (){var iter__5523__auto__ = (function metabase$mbql$normalize$normalize_expressions_tokens_$_iter__63894(s__63895){\nreturn (new cljs.core.LazySeq(null,(function (){\nvar s__63895__$1 = s__63895;\nwhile(true){\nvar temp__5804__auto__ = cljs.core.seq(s__63895__$1);\nif(temp__5804__auto__){\nvar s__63895__$2 = temp__5804__auto__;\nif(cljs.core.chunked_seq_QMARK_(s__63895__$2)){\nvar c__5521__auto__ = cljs.core.chunk_first(s__63895__$2);\nvar size__5522__auto__ = cljs.core.count(c__5521__auto__);\nvar b__63897 = cljs.core.chunk_buffer(size__5522__auto__);\nif((function (){var i__63896 = (0);\nwhile(true){\nif((i__63896 < size__5522__auto__)){\nvar vec__63900 = cljs.core._nth(c__5521__auto__,i__63896);\nvar expression_name = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__63900,(0),null);\nvar definition = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__63900,(1),null);\ncljs.core.chunk_append(b__63897,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [metabase.mbql.util.qualified_name(expression_name),(metabase.mbql.normalize.normalize_tokens.cljs$core$IFn$_invoke$arity$2 ? metabase.mbql.normalize.normalize_tokens.cljs$core$IFn$_invoke$arity$2(definition,new cljs.core.Keyword(null,\"ignore-path\",\"ignore-path\",944069061)) : metabase.mbql.normalize.normalize_tokens.call(null,definition,new cljs.core.Keyword(null,\"ignore-path\",\"ignore-path\",944069061)))], null));\n\nvar G__64665 = (i__63896 + (1));\ni__63896 = G__64665;\ncontinue;\n} else {\nreturn true;\n}\nbreak;\n}\n})()){\nreturn cljs.core.chunk_cons(cljs.core.chunk(b__63897),metabase$mbql$normalize$normalize_expressions_tokens_$_iter__63894(cljs.core.chunk_rest(s__63895__$2)));\n} else {\nreturn cljs.core.chunk_cons(cljs.core.chunk(b__63897),null);\n}\n} else {\nvar vec__63904 = cljs.core.first(s__63895__$2);\nvar expression_name = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__63904,(0),null);\nvar definition = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__63904,(1),null);\nreturn cljs.core.cons(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [metabase.mbql.util.qualified_name(expression_name),(metabase.mbql.normalize.normalize_tokens.cljs$core$IFn$_invoke$arity$2 ? metabase.mbql.normalize.normalize_tokens.cljs$core$IFn$_invoke$arity$2(definition,new cljs.core.Keyword(null,\"ignore-path\",\"ignore-path\",944069061)) : metabase.mbql.normalize.normalize_tokens.call(null,definition,new cljs.core.Keyword(null,\"ignore-path\",\"ignore-path\",944069061)))], null),metabase$mbql$normalize$normalize_expressions_tokens_$_iter__63894(cljs.core.rest(s__63895__$2)));\n}\n} else {\nreturn null;\n}\nbreak;\n}\n}),null,null));\n});\nreturn iter__5523__auto__(expressions_clause);\n})());\n});\n/**\n * Normalize tokens in the order-by clause, which can have different syntax when using MBQL 95 or 98\n *   rules (`[<field> :asc]` vs `[:asc <field>]`, for example).\n */\nmetabase.mbql.normalize.normalize_order_by_tokens = (function metabase$mbql$normalize$normalize_order_by_tokens(clauses){\nreturn cljs.core.vec((function (){var iter__5523__auto__ = (function metabase$mbql$normalize$normalize_order_by_tokens_$_iter__63913(s__63914){\nreturn (new cljs.core.LazySeq(null,(function (){\nvar s__63914__$1 = s__63914;\nwhile(true){\nvar temp__5804__auto__ = cljs.core.seq(s__63914__$1);\nif(temp__5804__auto__){\nvar s__63914__$2 = temp__5804__auto__;\nif(cljs.core.chunked_seq_QMARK_(s__63914__$2)){\nvar c__5521__auto__ = cljs.core.chunk_first(s__63914__$2);\nvar size__5522__auto__ = cljs.core.count(c__5521__auto__);\nvar b__63916 = cljs.core.chunk_buffer(size__5522__auto__);\nif((function (){var i__63915 = (0);\nwhile(true){\nif((i__63915 < size__5522__auto__)){\nvar subclause = cljs.core._nth(c__5521__auto__,i__63915);\ncljs.core.chunk_append(b__63916,(cljs.core.truth_(metabase.mbql.normalize.mbql_clause_QMARK_(subclause))?metabase.mbql.normalize.normalize_mbql_clause_tokens.cljs$core$IFn$_invoke$arity$1(subclause):cljs.core.reverse(metabase.mbql.normalize.normalize_mbql_clause_tokens.cljs$core$IFn$_invoke$arity$1(cljs.core.reverse(subclause)))));\n\nvar G__64668 = (i__63915 + (1));\ni__63915 = G__64668;\ncontinue;\n} else {\nreturn true;\n}\nbreak;\n}\n})()){\nreturn cljs.core.chunk_cons(cljs.core.chunk(b__63916),metabase$mbql$normalize$normalize_order_by_tokens_$_iter__63913(cljs.core.chunk_rest(s__63914__$2)));\n} else {\nreturn cljs.core.chunk_cons(cljs.core.chunk(b__63916),null);\n}\n} else {\nvar subclause = cljs.core.first(s__63914__$2);\nreturn cljs.core.cons((cljs.core.truth_(metabase.mbql.normalize.mbql_clause_QMARK_(subclause))?metabase.mbql.normalize.normalize_mbql_clause_tokens.cljs$core$IFn$_invoke$arity$1(subclause):cljs.core.reverse(metabase.mbql.normalize.normalize_mbql_clause_tokens.cljs$core$IFn$_invoke$arity$1(cljs.core.reverse(subclause)))),metabase$mbql$normalize$normalize_order_by_tokens_$_iter__63913(cljs.core.rest(s__63914__$2)));\n}\n} else {\nreturn null;\n}\nbreak;\n}\n}),null,null));\n});\nreturn iter__5523__auto__(clauses);\n})());\n});\n/**\n * Get the function that should be used to transform values for normalized key `k` in a template tag definition.\n */\nmetabase.mbql.normalize.template_tag_definition_key__GT_transform_fn = (function metabase$mbql$normalize$template_tag_definition_key__GT_transform_fn(k){\nreturn cljs.core.get.cljs$core$IFn$_invoke$arity$3(new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null,\"default\",\"default\",-1987822328),cljs.core.identity,new cljs.core.Keyword(null,\"type\",\"type\",1174270348),metabase.mbql.normalize.maybe_normalize_token,new cljs.core.Keyword(null,\"widget-type\",\"widget-type\",1836256899),metabase.mbql.normalize.maybe_normalize_token], null),k,(function (v){\nreturn cljs.core.get.cljs$core$IFn$_invoke$arity$2((function (){var G__63941 = cljs.core.PersistentArrayMap.createAsIfByAssoc([k,v]);\nvar G__63942 = new cljs.core.Keyword(null,\"ignore-path\",\"ignore-path\",944069061);\nreturn (metabase.mbql.normalize.normalize_tokens.cljs$core$IFn$_invoke$arity$2 ? metabase.mbql.normalize.normalize_tokens.cljs$core$IFn$_invoke$arity$2(G__63941,G__63942) : metabase.mbql.normalize.normalize_tokens.call(null,G__63941,G__63942));\n})(),k);\n}));\n});\n/**\n * For a template tag definition, normalize all the keys appropriately.\n */\nmetabase.mbql.normalize.normalize_template_tag_definition = (function metabase$mbql$normalize$normalize_template_tag_definition(tag_definition){\nvar tag_def = cljs.core.into.cljs$core$IFn$_invoke$arity$3(cljs.core.PersistentArrayMap.EMPTY,cljs.core.map.cljs$core$IFn$_invoke$arity$1((function (p__63957){\nvar vec__63958 = p__63957;\nvar k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__63958,(0),null);\nvar v = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__63958,(1),null);\nvar k__$1 = metabase.mbql.normalize.maybe_normalize_token(k);\nvar transform_fn = metabase.mbql.normalize.template_tag_definition_key__GT_transform_fn(k__$1);\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [k__$1,(transform_fn.cljs$core$IFn$_invoke$arity$1 ? transform_fn.cljs$core$IFn$_invoke$arity$1(v) : transform_fn.call(null,v))], null);\n})),tag_definition);\nvar G__63961 = tag_def;\nif(((cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(new cljs.core.Keyword(null,\"type\",\"type\",1174270348).cljs$core$IFn$_invoke$arity$1(tag_def),new cljs.core.Keyword(null,\"dimension\",\"dimension\",543254198))) && (cljs.core.not(new cljs.core.Keyword(null,\"widget-type\",\"widget-type\",1836256899).cljs$core$IFn$_invoke$arity$1(tag_def))))){\nreturn cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__63961,new cljs.core.Keyword(null,\"widget-type\",\"widget-type\",1836256899),new cljs.core.Keyword(null,\"category\",\"category\",-593092832));\n} else {\nreturn G__63961;\n}\n});\n/**\n * Normalize native-query template tags. Like `expressions` we want to preserve the original name rather than normalize\n *   it.\n */\nmetabase.mbql.normalize.normalize_template_tags = (function metabase$mbql$normalize$normalize_template_tags(template_tags){\nreturn cljs.core.into.cljs$core$IFn$_invoke$arity$3(cljs.core.PersistentArrayMap.EMPTY,cljs.core.map.cljs$core$IFn$_invoke$arity$1((function (p__63963){\nvar vec__63969 = p__63963;\nvar tag_name = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__63969,(0),null);\nvar tag_definition = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__63969,(1),null);\nvar tag_name__$1 = metabase.mbql.util.qualified_name(tag_name);\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [tag_name__$1,cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(metabase.mbql.normalize.normalize_template_tag_definition(tag_definition),new cljs.core.Keyword(null,\"name\",\"name\",1843675177),tag_name__$1)], null);\n})),template_tags);\n});\n/**\n * Normalize a parameter in the query `:parameters` list.\n */\nmetabase.mbql.normalize.normalize_query_parameter = (function metabase$mbql$normalize$normalize_query_parameter(p__63983){\nvar map__63984 = p__63983;\nvar map__63984__$1 = cljs.core.__destructure_map(map__63984);\nvar param = map__63984__$1;\nvar type = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__63984__$1,new cljs.core.Keyword(null,\"type\",\"type\",1174270348));\nvar target = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__63984__$1,new cljs.core.Keyword(null,\"target\",\"target\",253001721));\nvar id = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__63984__$1,new cljs.core.Keyword(null,\"id\",\"id\",-1388402092));\nvar values_source_config = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__63984__$1,new cljs.core.Keyword(null,\"values_source_config\",\"values_source_config\",-590570309));\nvar G__63987 = param;\nvar G__63987__$1 = (cljs.core.truth_(id)?cljs.core.update.cljs$core$IFn$_invoke$arity$3(G__63987,new cljs.core.Keyword(null,\"id\",\"id\",-1388402092),metabase.mbql.util.qualified_name):G__63987);\nvar G__63987__$2 = (cljs.core.truth_(type)?cljs.core.update.cljs$core$IFn$_invoke$arity$3(G__63987__$1,new cljs.core.Keyword(null,\"type\",\"type\",1174270348),metabase.mbql.normalize.maybe_normalize_token):G__63987__$1);\nvar G__63987__$3 = (cljs.core.truth_(target)?cljs.core.update.cljs$core$IFn$_invoke$arity$3(G__63987__$2,new cljs.core.Keyword(null,\"target\",\"target\",253001721),(function (p1__63978_SHARP_){\nreturn (metabase.mbql.normalize.normalize_tokens.cljs$core$IFn$_invoke$arity$2 ? metabase.mbql.normalize.normalize_tokens.cljs$core$IFn$_invoke$arity$2(p1__63978_SHARP_,new cljs.core.Keyword(null,\"ignore-path\",\"ignore-path\",944069061)) : metabase.mbql.normalize.normalize_tokens.call(null,p1__63978_SHARP_,new cljs.core.Keyword(null,\"ignore-path\",\"ignore-path\",944069061)));\n})):G__63987__$2);\nvar G__63987__$4 = (cljs.core.truth_(values_source_config)?cljs.core.update_in.cljs$core$IFn$_invoke$arity$3(G__63987__$3,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"values_source_config\",\"values_source_config\",-590570309),new cljs.core.Keyword(null,\"label_field\",\"label_field\",-1573182765)], null),(function (p1__63980_SHARP_){\nreturn (metabase.mbql.normalize.normalize_tokens.cljs$core$IFn$_invoke$arity$2 ? metabase.mbql.normalize.normalize_tokens.cljs$core$IFn$_invoke$arity$2(p1__63980_SHARP_,new cljs.core.Keyword(null,\"ignore-path\",\"ignore-path\",944069061)) : metabase.mbql.normalize.normalize_tokens.call(null,p1__63980_SHARP_,new cljs.core.Keyword(null,\"ignore-path\",\"ignore-path\",944069061)));\n})):G__63987__$3);\nif(cljs.core.truth_(values_source_config)){\nreturn cljs.core.update_in.cljs$core$IFn$_invoke$arity$3(G__63987__$4,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"values_source_config\",\"values_source_config\",-590570309),new cljs.core.Keyword(null,\"value_field\",\"value_field\",-980977878)], null),(function (p1__63981_SHARP_){\nreturn (metabase.mbql.normalize.normalize_tokens.cljs$core$IFn$_invoke$arity$2 ? metabase.mbql.normalize.normalize_tokens.cljs$core$IFn$_invoke$arity$2(p1__63981_SHARP_,new cljs.core.Keyword(null,\"ignore-path\",\"ignore-path\",944069061)) : metabase.mbql.normalize.normalize_tokens.call(null,p1__63981_SHARP_,new cljs.core.Keyword(null,\"ignore-path\",\"ignore-path\",944069061)));\n}));\n} else {\nreturn G__63987__$4;\n}\n});\nmetabase.mbql.normalize.normalize_source_query = (function metabase$mbql$normalize$normalize_source_query(source_query){\nvar map__63992 = medley.core.map_keys(metabase.mbql.normalize.maybe_normalize_token,source_query);\nvar map__63992__$1 = cljs.core.__destructure_map(map__63992);\nvar source_query__$1 = map__63992__$1;\nvar native_QMARK_ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__63992__$1,new cljs.core.Keyword(null,\"native\",\"native\",-613060878));\nif(cljs.core.truth_(native_QMARK_)){\nreturn clojure.set.rename_keys((function (){var G__63993 = clojure.set.rename_keys(source_query__$1,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"native\",\"native\",-613060878),new cljs.core.Keyword(null,\"query\",\"query\",-1288509510)], null));\nvar G__63994 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"native\",\"native\",-613060878)], null);\nreturn (metabase.mbql.normalize.normalize_tokens.cljs$core$IFn$_invoke$arity$2 ? metabase.mbql.normalize.normalize_tokens.cljs$core$IFn$_invoke$arity$2(G__63993,G__63994) : metabase.mbql.normalize.normalize_tokens.call(null,G__63993,G__63994));\n})(),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"query\",\"query\",-1288509510),new cljs.core.Keyword(null,\"native\",\"native\",-613060878)], null));\n} else {\nvar G__63997 = source_query__$1;\nvar G__63998 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"query\",\"query\",-1288509510)], null);\nreturn (metabase.mbql.normalize.normalize_tokens.cljs$core$IFn$_invoke$arity$2 ? metabase.mbql.normalize.normalize_tokens.cljs$core$IFn$_invoke$arity$2(G__63997,G__63998) : metabase.mbql.normalize.normalize_tokens.call(null,G__63997,G__63998));\n}\n});\nmetabase.mbql.normalize.normalize_join = (function metabase$mbql$normalize$normalize_join(join){\nvar map__64010 = (metabase.mbql.normalize.normalize_tokens.cljs$core$IFn$_invoke$arity$2 ? metabase.mbql.normalize.normalize_tokens.cljs$core$IFn$_invoke$arity$2(join,new cljs.core.Keyword(null,\"query\",\"query\",-1288509510)) : metabase.mbql.normalize.normalize_tokens.call(null,join,new cljs.core.Keyword(null,\"query\",\"query\",-1288509510)));\nvar map__64010__$1 = cljs.core.__destructure_map(map__64010);\nvar join__$1 = map__64010__$1;\nvar strategy = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__64010__$1,new cljs.core.Keyword(null,\"strategy\",\"strategy\",-1471631918));\nvar fields = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__64010__$1,new cljs.core.Keyword(null,\"fields\",\"fields\",-1932066230));\nvar alias = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__64010__$1,new cljs.core.Keyword(null,\"alias\",\"alias\",-2039751630));\nvar G__64011 = join__$1;\nvar G__64011__$1 = (cljs.core.truth_(strategy)?cljs.core.update.cljs$core$IFn$_invoke$arity$3(G__64011,new cljs.core.Keyword(null,\"strategy\",\"strategy\",-1471631918),metabase.mbql.normalize.maybe_normalize_token):G__64011);\nvar G__64011__$2 = (cljs.core.truth_(cljs.core.some_fn.cljs$core$IFn$_invoke$arity$2(cljs.core.keyword_QMARK_,cljs.core.string_QMARK_)(fields))?cljs.core.update.cljs$core$IFn$_invoke$arity$3(G__64011__$1,new cljs.core.Keyword(null,\"fields\",\"fields\",-1932066230),metabase.mbql.normalize.maybe_normalize_token):G__64011__$1);\nif(cljs.core.truth_(alias)){\nreturn cljs.core.update.cljs$core$IFn$_invoke$arity$3(G__64011__$2,new cljs.core.Keyword(null,\"alias\",\"alias\",-2039751630),metabase.mbql.util.qualified_name);\n} else {\nreturn G__64011__$2;\n}\n});\n/**\n * Normalize source/results metadata for a single column.\n */\nmetabase.mbql.normalize.normalize_source_metadata = (function metabase$mbql$normalize$normalize_source_metadata(metadata){\n\nreturn medley.core.update_existing.cljs$core$IFn$_invoke$arity$3(medley.core.update_existing.cljs$core$IFn$_invoke$arity$3(cljs.core.reduce.cljs$core$IFn$_invoke$arity$3((function (p1__64012_SHARP_,p2__64013_SHARP_){\nreturn medley.core.update_existing.cljs$core$IFn$_invoke$arity$3(p1__64012_SHARP_,p2__64013_SHARP_,cljs.core.keyword);\n}),metadata,new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"base_type\",\"base_type\",1908272670),new cljs.core.Keyword(null,\"effective_type\",\"effective_type\",1699478099),new cljs.core.Keyword(null,\"semantic_type\",\"semantic_type\",272485089),new cljs.core.Keyword(null,\"visibility_type\",\"visibility_type\",-508434247),new cljs.core.Keyword(null,\"source\",\"source\",-433931539),new cljs.core.Keyword(null,\"unit\",\"unit\",375175175)], null)),new cljs.core.Keyword(null,\"field_ref\",\"field_ref\",-1985640334),cljs.core.comp.cljs$core$IFn$_invoke$arity$2(metabase.mbql.normalize.canonicalize_mbql_clauses,metabase.mbql.normalize.normalize_tokens)),new cljs.core.Keyword(null,\"fingerprint\",\"fingerprint\",598613022),clojure.walk.keywordize_keys);\n});\n/**\n * For native queries, normalize the top-level keys, and template tags, but nothing else.\n */\nmetabase.mbql.normalize.normalize_native_query = (function metabase$mbql$normalize$normalize_native_query(native_query){\nvar native_query__$1 = medley.core.map_keys(metabase.mbql.normalize.maybe_normalize_token,native_query);\nvar G__64014 = native_query__$1;\nif(cljs.core.seq(new cljs.core.Keyword(null,\"template-tags\",\"template-tags\",1853115685).cljs$core$IFn$_invoke$arity$1(native_query__$1))){\nreturn cljs.core.update.cljs$core$IFn$_invoke$arity$3(G__64014,new cljs.core.Keyword(null,\"template-tags\",\"template-tags\",1853115685),metabase.mbql.normalize.normalize_template_tags);\n} else {\nreturn G__64014;\n}\n});\n/**\n * Map of special functions that should be used to perform token normalization for a given path. For example, the\n *   `:expressions` key in an MBQL query should preserve the case of the expression names; this custom behavior is\n *   defined below.\n */\nmetabase.mbql.normalize.path__GT_special_token_normalization_fn = new cljs.core.PersistentArrayMap(null, 8, [new cljs.core.Keyword(null,\"type\",\"type\",1174270348),metabase.mbql.normalize.maybe_normalize_token,new cljs.core.Keyword(null,\"native\",\"native\",-613060878),metabase.mbql.normalize.normalize_native_query,new cljs.core.Keyword(null,\"query\",\"query\",-1288509510),new cljs.core.PersistentArrayMap(null, 6, [new cljs.core.Keyword(null,\"aggregation\",\"aggregation\",1597476696),metabase.mbql.normalize.normalize_ag_clause_tokens,new cljs.core.Keyword(null,\"expressions\",\"expressions\",255689909),metabase.mbql.normalize.normalize_expressions_tokens,new cljs.core.Keyword(null,\"order-by\",\"order-by\",1527318070),metabase.mbql.normalize.normalize_order_by_tokens,new cljs.core.Keyword(null,\"source-query\",\"source-query\",198004422),metabase.mbql.normalize.normalize_source_query,new cljs.core.Keyword(null,\"source-metadata\",\"source-metadata\",-477816085),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(\"metabase.mbql.normalize\",\"sequence\",\"metabase.mbql.normalize/sequence\",-1700645683),metabase.mbql.normalize.normalize_source_metadata], null),new cljs.core.Keyword(null,\"joins\",\"joins\",1033962699),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(\"metabase.mbql.normalize\",\"sequence\",\"metabase.mbql.normalize/sequence\",-1700645683),metabase.mbql.normalize.normalize_join], null)], null),new cljs.core.Keyword(null,\"info\",\"info\",-317069002),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(\"metadata\",\"dataset-metadata\",\"metadata/dataset-metadata\",-728376469),cljs.core.identity], null),new cljs.core.Keyword(null,\"parameters\",\"parameters\",-1229919748),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(\"metabase.mbql.normalize\",\"sequence\",\"metabase.mbql.normalize/sequence\",-1700645683),metabase.mbql.normalize.normalize_query_parameter], null),new cljs.core.Keyword(null,\"context\",\"context\",-830191113),(function (p1__64015_SHARP_){\nvar G__64016 = p1__64015_SHARP_;\nif((G__64016 == null)){\nreturn null;\n} else {\nreturn metabase.mbql.normalize.maybe_normalize_token(G__64016);\n}\n}),new cljs.core.Keyword(null,\"source-metadata\",\"source-metadata\",-477816085),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(\"metabase.mbql.normalize\",\"sequence\",\"metabase.mbql.normalize/sequence\",-1700645683),metabase.mbql.normalize.normalize_source_metadata], null),new cljs.core.Keyword(null,\"viz-settings\",\"viz-settings\",256055379),metabase.mbql.normalize.maybe_normalize_token], null);\n/**\n * Recursively normalize tokens in `x`.\n * \n *   Every time this function recurses (thru a map value) it adds a new (normalized) key to key path, e.g. `path` will be\n *   `[:query :order-by]` when we're in the MBQL order-by clause. If we need to handle these top-level clauses in special\n *   ways add a function to `path->special-token-normalization-fn` above.\n * \n *   In some cases, dealing with the path isn't desirable, but we don't want to accidentally trigger normalization\n *   functions (such as accidentally normalizing the `:type` key in something other than the top-level of the query), so\n *   by convention please pass `:ignore-path` to avoid accidentally triggering path functions.\n */\nmetabase.mbql.normalize.normalize_tokens = (function metabase$mbql$normalize$normalize_tokens(var_args){\nvar args__5775__auto__ = [];\nvar len__5769__auto___64677 = arguments.length;\nvar i__5770__auto___64678 = (0);\nwhile(true){\nif((i__5770__auto___64678 < len__5769__auto___64677)){\nargs__5775__auto__.push((arguments[i__5770__auto___64678]));\n\nvar G__64679 = (i__5770__auto___64678 + (1));\ni__5770__auto___64678 = G__64679;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__5776__auto__ = ((((1) < args__5775__auto__.length))?(new cljs.core.IndexedSeq(args__5775__auto__.slice((1)),(0),null)):null);\nreturn metabase.mbql.normalize.normalize_tokens.cljs$core$IFn$_invoke$arity$variadic((arguments[(0)]),argseq__5776__auto__);\n});\n\n(metabase.mbql.normalize.normalize_tokens.cljs$core$IFn$_invoke$arity$variadic = (function (x,p__64031){\nvar vec__64032 = p__64031;\nvar path = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__64032,(0),null);\nvar path__$1 = (((path instanceof cljs.core.Keyword))?new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [path], null):cljs.core.vec(path));\nvar special_fn = ((cljs.core.seq(path__$1))?cljs.core.get_in.cljs$core$IFn$_invoke$arity$2(metabase.mbql.normalize.path__GT_special_token_normalization_fn,path__$1):null);\ntry{if(cljs.core.fn_QMARK_(special_fn)){\nreturn (special_fn.cljs$core$IFn$_invoke$arity$1 ? special_fn.cljs$core$IFn$_invoke$arity$1(x) : special_fn.call(null,x));\n} else {\nif(cljs.core.record_QMARK_(x)){\nreturn x;\n} else {\nif(cljs.core.map_QMARK_(x)){\nreturn cljs.core.into.cljs$core$IFn$_invoke$arity$2(cljs.core.PersistentArrayMap.EMPTY,(function (){var iter__5523__auto__ = (function metabase$mbql$normalize$iter__64047(s__64048){\nreturn (new cljs.core.LazySeq(null,(function (){\nvar s__64048__$1 = s__64048;\nwhile(true){\nvar temp__5804__auto__ = cljs.core.seq(s__64048__$1);\nif(temp__5804__auto__){\nvar s__64048__$2 = temp__5804__auto__;\nif(cljs.core.chunked_seq_QMARK_(s__64048__$2)){\nvar c__5521__auto__ = cljs.core.chunk_first(s__64048__$2);\nvar size__5522__auto__ = cljs.core.count(c__5521__auto__);\nvar b__64050 = cljs.core.chunk_buffer(size__5522__auto__);\nif((function (){var i__64049 = (0);\nwhile(true){\nif((i__64049 < size__5522__auto__)){\nvar vec__64052 = cljs.core._nth(c__5521__auto__,i__64049);\nvar k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__64052,(0),null);\nvar v = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__64052,(1),null);\nvar k__$1 = metabase.mbql.normalize.maybe_normalize_token(k);\ncljs.core.chunk_append(b__64050,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [k__$1,metabase.mbql.normalize.normalize_tokens.cljs$core$IFn$_invoke$arity$variadic(v,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([cljs.core.conj.cljs$core$IFn$_invoke$arity$2(cljs.core.vec(path__$1),k__$1)], 0))], null));\n\nvar G__64681 = (i__64049 + (1));\ni__64049 = G__64681;\ncontinue;\n} else {\nreturn true;\n}\nbreak;\n}\n})()){\nreturn cljs.core.chunk_cons(cljs.core.chunk(b__64050),metabase$mbql$normalize$iter__64047(cljs.core.chunk_rest(s__64048__$2)));\n} else {\nreturn cljs.core.chunk_cons(cljs.core.chunk(b__64050),null);\n}\n} else {\nvar vec__64057 = cljs.core.first(s__64048__$2);\nvar k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__64057,(0),null);\nvar v = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__64057,(1),null);\nvar k__$1 = metabase.mbql.normalize.maybe_normalize_token(k);\nreturn cljs.core.cons(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [k__$1,metabase.mbql.normalize.normalize_tokens.cljs$core$IFn$_invoke$arity$variadic(v,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([cljs.core.conj.cljs$core$IFn$_invoke$arity$2(cljs.core.vec(path__$1),k__$1)], 0))], null),metabase$mbql$normalize$iter__64047(cljs.core.rest(s__64048__$2)));\n}\n} else {\nreturn null;\n}\nbreak;\n}\n}),null,null));\n});\nreturn iter__5523__auto__(x);\n})());\n} else {\nif(cljs.core.truth_(metabase.mbql.normalize.mbql_clause_QMARK_(x))){\nreturn metabase.mbql.normalize.normalize_mbql_clause_tokens.cljs$core$IFn$_invoke$arity$1(x);\n} else {\nif(cljs.core.sequential_QMARK_(x)){\nreturn cljs.core.mapv.cljs$core$IFn$_invoke$arity$2((function (p1__64026_SHARP_){\nreturn metabase.mbql.normalize.normalize_tokens.cljs$core$IFn$_invoke$arity$variadic(p1__64026_SHARP_,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([cljs.core.conj.cljs$core$IFn$_invoke$arity$2(cljs.core.vec(path__$1),new cljs.core.Keyword(\"metabase.mbql.normalize\",\"sequence\",\"metabase.mbql.normalize/sequence\",-1700645683))], 0));\n}),x);\n} else {\nreturn x;\n\n}\n}\n}\n}\n}\n}catch (e64035){if((e64035 instanceof Error)){\nvar e = e64035;\nthrow cljs.core.ex_info.cljs$core$IFn$_invoke$arity$3(metabase.shared.util.i18n.js_i18n.cljs$core$IFn$_invoke$arity$variadic(\"Error normalizing form: {0}\",cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([cljs.core.ex_message(e)], 0)),new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null,\"form\",\"form\",-1624062471),x,new cljs.core.Keyword(null,\"path\",\"path\",-188191168),path__$1,new cljs.core.Keyword(null,\"special-fn\",\"special-fn\",1290649344),special_fn], null),e);\n} else {\nthrow e64035;\n\n}\n}}));\n\n(metabase.mbql.normalize.normalize_tokens.cljs$lang$maxFixedArity = (1));\n\n/** @this {Function} */\n(metabase.mbql.normalize.normalize_tokens.cljs$lang$applyTo = (function (seq64027){\nvar G__64028 = cljs.core.first(seq64027);\nvar seq64027__$1 = cljs.core.next(seq64027);\nvar self__5754__auto__ = this;\nreturn self__5754__auto__.cljs$core$IFn$_invoke$arity$variadic(G__64028,seq64027__$1);\n}));\n\n/**\n * Wrap raw integer Field IDs (i.e., those in an implicit 'field' position) in a `:field` clause if they're not\n *   already. Done for MBQL 95 backwards-compatibility. e.g.:\n * \n *  {:filter [:= 10 20]} ; -> {:filter [:= [:field 10 nil] 20]}\n */\nmetabase.mbql.normalize.wrap_implicit_field_id = (function metabase$mbql$normalize$wrap_implicit_field_id(field){\nif(cljs.core.integer_QMARK_(field)){\nreturn new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"field\",\"field\",-1302436500),field,null], null);\n} else {\nreturn field;\n}\n});\nmetabase.mbql.normalize.canonicalize_mbql_clause = (function (){var method_table__5642__auto__ = cljs.core.atom.cljs$core$IFn$_invoke$arity$1(cljs.core.PersistentArrayMap.EMPTY);\nvar prefer_table__5643__auto__ = cljs.core.atom.cljs$core$IFn$_invoke$arity$1(cljs.core.PersistentArrayMap.EMPTY);\nvar method_cache__5644__auto__ = cljs.core.atom.cljs$core$IFn$_invoke$arity$1(cljs.core.PersistentArrayMap.EMPTY);\nvar cached_hierarchy__5645__auto__ = cljs.core.atom.cljs$core$IFn$_invoke$arity$1(cljs.core.PersistentArrayMap.EMPTY);\nvar hierarchy__5646__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$3(cljs.core.PersistentArrayMap.EMPTY,new cljs.core.Keyword(null,\"hierarchy\",\"hierarchy\",-1053470341),(function (){var fexpr__64060 = cljs.core.get_global_hierarchy;\nreturn (fexpr__64060.cljs$core$IFn$_invoke$arity$0 ? fexpr__64060.cljs$core$IFn$_invoke$arity$0() : fexpr__64060.call(null));\n})());\nreturn (new cljs.core.MultiFn(cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(\"metabase.mbql.normalize\",\"canonicalize-mbql-clause\"),(function (clause){\nif(cljs.core.truth_(metabase.mbql.normalize.mbql_clause_QMARK_(clause))){\nreturn cljs.core.first(clause);\n} else {\nreturn null;\n}\n}),new cljs.core.Keyword(null,\"default\",\"default\",-1987822328),hierarchy__5646__auto__,method_table__5642__auto__,prefer_table__5643__auto__,method_cache__5644__auto__,cached_hierarchy__5645__auto__));\n})();\nmetabase.mbql.normalize.canonicalize_mbql_clause.cljs$core$IMultiFn$_add_method$arity$3(null,new cljs.core.Keyword(null,\"default\",\"default\",-1987822328),(function (clause){\nreturn clause;\n}));\n/**\n * If `clause` is a raw integer ID wrap it in a `:field` clause. Either way, canonicalize the resulting clause.\n */\nmetabase.mbql.normalize.canonicalize_implicit_field_id = (function metabase$mbql$normalize$canonicalize_implicit_field_id(clause){\nreturn metabase.mbql.normalize.canonicalize_mbql_clause.cljs$core$IFn$_invoke$arity$1(metabase.mbql.normalize.wrap_implicit_field_id(clause));\n});\nmetabase.mbql.normalize.canonicalize_mbql_clause.cljs$core$IMultiFn$_add_method$arity$3(null,new cljs.core.Keyword(null,\"field\",\"field\",-1302436500),(function (p__64063){\nvar vec__64070 = p__64063;\nvar _ = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__64070,(0),null);\nvar id_or_name = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__64070,(1),null);\nvar opts = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__64070,(2),null);\nif(cljs.core.truth_(metabase.mbql.normalize.is_clause_QMARK_(new cljs.core.Keyword(null,\"field\",\"field\",-1302436500),id_or_name))){\nvar vec__64073 = id_or_name;\nvar ___$1 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__64073,(0),null);\nvar nested_id_or_name = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__64073,(1),null);\nvar nested_opts = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__64073,(2),null);\nreturn metabase.mbql.normalize.canonicalize_mbql_clause.cljs$core$IFn$_invoke$arity$1(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"field\",\"field\",-1302436500),nested_id_or_name,cljs.core.not_empty(cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([nested_opts,opts], 0)))], null));\n} else {\nreturn new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"field\",\"field\",-1302436500),id_or_name,cljs.core.not_empty(opts)], null);\n}\n}));\nmetabase.mbql.normalize.canonicalize_mbql_clause.cljs$core$IMultiFn$_add_method$arity$3(null,new cljs.core.Keyword(null,\"aggregation\",\"aggregation\",1597476696),(function (p__64081){\nvar vec__64082 = p__64081;\nvar _tag = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__64082,(0),null);\nvar index = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__64082,(1),null);\nvar opts = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__64082,(2),null);\nif(cljs.core.empty_QMARK_(opts)){\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"aggregation\",\"aggregation\",1597476696),index], null);\n} else {\nreturn new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"aggregation\",\"aggregation\",1597476696),index,opts], null);\n}\n}));\nmetabase.mbql.normalize.canonicalize_mbql_clause.cljs$core$IMultiFn$_add_method$arity$3(null,new cljs.core.Keyword(null,\"field-id\",\"field-id\",-353751335),(function (p__64089){\nvar vec__64090 = p__64089;\nvar _ = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__64090,(0),null);\nvar id = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__64090,(1),null);\nif(cljs.core.truth_(metabase.mbql.normalize.mbql_clause_QMARK_(id))){\nreturn metabase.mbql.normalize.canonicalize_mbql_clause.cljs$core$IFn$_invoke$arity$1(id);\n} else {\nreturn new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"field\",\"field\",-1302436500),id,null], null);\n}\n}));\nmetabase.mbql.normalize.canonicalize_mbql_clause.cljs$core$IMultiFn$_add_method$arity$3(null,new cljs.core.Keyword(null,\"field-literal\",\"field-literal\",-1295883554),(function (p__64093){\nvar vec__64094 = p__64093;\nvar _ = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__64094,(0),null);\nvar field_name = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__64094,(1),null);\nvar base_type = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__64094,(2),null);\nreturn new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"field\",\"field\",-1302436500),field_name,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"base-type\",\"base-type\",1167971299),base_type], null)], null);\n}));\nmetabase.mbql.normalize.canonicalize_mbql_clause.cljs$core$IMultiFn$_add_method$arity$3(null,new cljs.core.Keyword(null,\"fk->\",\"fk->\",-499026738),(function (p__64097){\nvar vec__64098 = p__64097;\nvar _ = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__64098,(0),null);\nvar field_1 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__64098,(1),null);\nvar field_2 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__64098,(2),null);\nvar vec__64101 = metabase.mbql.normalize.canonicalize_implicit_field_id(field_1);\nvar ___$1 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__64101,(0),null);\nvar source = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__64101,(1),null);\nvar ___$2 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__64101,(2),null);\nvar vec__64104 = metabase.mbql.normalize.canonicalize_implicit_field_id(field_2);\nvar ___$3 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__64104,(0),null);\nvar dest = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__64104,(1),null);\nvar dest_opts = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__64104,(2),null);\nreturn new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"field\",\"field\",-1302436500),dest,cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(dest_opts,new cljs.core.Keyword(null,\"source-field\",\"source-field\",933829534),source)], null);\n}));\nmetabase.mbql.normalize.canonicalize_mbql_clause.cljs$core$IMultiFn$_add_method$arity$3(null,new cljs.core.Keyword(null,\"joined-field\",\"joined-field\",-2048778268),(function (p__64107){\nvar vec__64108 = p__64107;\nvar _ = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__64108,(0),null);\nvar join_alias = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__64108,(1),null);\nvar field = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__64108,(2),null);\nreturn metabase.mbql.util.assoc_field_options.cljs$core$IFn$_invoke$arity$variadic(metabase.mbql.normalize.canonicalize_implicit_field_id(field),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"join-alias\",\"join-alias\",1454206794),join_alias], 0));\n}));\nmetabase.mbql.normalize.canonicalize_mbql_clause.cljs$core$IMultiFn$_add_method$arity$3(null,new cljs.core.Keyword(null,\"datetime-field\",\"datetime-field\",21731696),(function (clause){\nvar G__64122 = cljs.core.count(clause);\nswitch (G__64122) {\ncase (3):\nvar vec__64127 = clause;\nvar _ = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__64127,(0),null);\nvar field = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__64127,(1),null);\nvar unit = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__64127,(2),null);\nreturn metabase.mbql.util.with_temporal_unit(metabase.mbql.normalize.canonicalize_implicit_field_id(field),unit);\n\nbreak;\ncase (4):\nvar vec__64130 = clause;\nvar _ = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__64130,(0),null);\nvar field = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__64130,(1),null);\nvar ___$1 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__64130,(2),null);\nvar unit = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__64130,(3),null);\nreturn metabase.mbql.normalize.canonicalize_mbql_clause.cljs$core$IFn$_invoke$arity$1(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"datetime-field\",\"datetime-field\",21731696),field,unit], null));\n\nbreak;\ndefault:\nthrow (new Error([\"No matching clause: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(G__64122)].join('')));\n\n}\n}));\nmetabase.mbql.normalize.canonicalize_mbql_clause.cljs$core$IMultiFn$_add_method$arity$3(null,new cljs.core.Keyword(null,\"binning-strategy\",\"binning-strategy\",2063329158),(function (p__64147){\nvar vec__64152 = p__64147;\nvar _ = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__64152,(0),null);\nvar field = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__64152,(1),null);\nvar strategy = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__64152,(2),null);\nvar param = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__64152,(3),null);\nvar binning_options = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__64152,(4),null);\nvar vec__64155 = metabase.mbql.normalize.canonicalize_implicit_field_id(field);\nvar ___$1 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__64155,(0),null);\nvar id_or_name = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__64155,(1),null);\nvar opts = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__64155,(2),null);\nreturn new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"field\",\"field\",-1302436500),id_or_name,cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(opts,new cljs.core.Keyword(null,\"binning\",\"binning\",1709835866),cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"strategy\",\"strategy\",-1471631918),strategy], null),(cljs.core.truth_(param)?cljs.core.PersistentArrayMap.createAsIfByAssoc([strategy,param]):null),binning_options], 0)))], null);\n}));\nmetabase.mbql.normalize.canonicalize_compound_filter_clause = (function metabase$mbql$normalize$canonicalize_compound_filter_clause(p__64175){\nvar vec__64176 = p__64175;\nvar seq__64177 = cljs.core.seq(vec__64176);\nvar first__64178 = cljs.core.first(seq__64177);\nvar seq__64177__$1 = cljs.core.next(seq__64177);\nvar filter_name = first__64178;\nvar args = seq__64177__$1;\nreturn metabase.mbql.util.simplify_compound_filter(cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [filter_name], null),cljs.core.map.cljs$core$IFn$_invoke$arity$2(metabase.mbql.normalize.canonicalize_mbql_clause,args)));\n});\nvar seq__64179_64708 = cljs.core.seq(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"and\",\"and\",-971899817),new cljs.core.Keyword(null,\"or\",\"or\",235744169),new cljs.core.Keyword(null,\"not\",\"not\",-595976884)], null));\nvar chunk__64180_64709 = null;\nvar count__64181_64710 = (0);\nvar i__64182_64711 = (0);\nwhile(true){\nif((i__64182_64711 < count__64181_64710)){\nvar clause_name_64714 = chunk__64180_64709.cljs$core$IIndexed$_nth$arity$2(null,i__64182_64711);\nmetabase.mbql.normalize.canonicalize_mbql_clause.cljs$core$IMultiFn$_add_method$arity$3(null,clause_name_64714,((function (seq__64179_64708,chunk__64180_64709,count__64181_64710,i__64182_64711,clause_name_64714){\nreturn (function (clause){\nreturn metabase.mbql.normalize.canonicalize_compound_filter_clause(clause);\n});})(seq__64179_64708,chunk__64180_64709,count__64181_64710,i__64182_64711,clause_name_64714))\n);\n\n\nvar G__64715 = seq__64179_64708;\nvar G__64716 = chunk__64180_64709;\nvar G__64717 = count__64181_64710;\nvar G__64718 = (i__64182_64711 + (1));\nseq__64179_64708 = G__64715;\nchunk__64180_64709 = G__64716;\ncount__64181_64710 = G__64717;\ni__64182_64711 = G__64718;\ncontinue;\n} else {\nvar temp__5804__auto___64719 = cljs.core.seq(seq__64179_64708);\nif(temp__5804__auto___64719){\nvar seq__64179_64720__$1 = temp__5804__auto___64719;\nif(cljs.core.chunked_seq_QMARK_(seq__64179_64720__$1)){\nvar c__5568__auto___64721 = cljs.core.chunk_first(seq__64179_64720__$1);\nvar G__64722 = cljs.core.chunk_rest(seq__64179_64720__$1);\nvar G__64723 = c__5568__auto___64721;\nvar G__64724 = cljs.core.count(c__5568__auto___64721);\nvar G__64725 = (0);\nseq__64179_64708 = G__64722;\nchunk__64180_64709 = G__64723;\ncount__64181_64710 = G__64724;\ni__64182_64711 = G__64725;\ncontinue;\n} else {\nvar clause_name_64727 = cljs.core.first(seq__64179_64720__$1);\nmetabase.mbql.normalize.canonicalize_mbql_clause.cljs$core$IMultiFn$_add_method$arity$3(null,clause_name_64727,((function (seq__64179_64708,chunk__64180_64709,count__64181_64710,i__64182_64711,clause_name_64727,seq__64179_64720__$1,temp__5804__auto___64719){\nreturn (function (clause){\nreturn metabase.mbql.normalize.canonicalize_compound_filter_clause(clause);\n});})(seq__64179_64708,chunk__64180_64709,count__64181_64710,i__64182_64711,clause_name_64727,seq__64179_64720__$1,temp__5804__auto___64719))\n);\n\n\nvar G__64728 = cljs.core.next(seq__64179_64720__$1);\nvar G__64729 = null;\nvar G__64730 = (0);\nvar G__64731 = (0);\nseq__64179_64708 = G__64728;\nchunk__64180_64709 = G__64729;\ncount__64181_64710 = G__64730;\ni__64182_64711 = G__64731;\ncontinue;\n}\n} else {\n}\n}\nbreak;\n}\nmetabase.mbql.normalize.canonicalize_mbql_clause.cljs$core$IMultiFn$_add_method$arity$3(null,new cljs.core.Keyword(null,\"inside\",\"inside\",1972503011),(function (p__64206){\nvar vec__64207 = p__64206;\nvar seq__64208 = cljs.core.seq(vec__64207);\nvar first__64209 = cljs.core.first(seq__64208);\nvar seq__64208__$1 = cljs.core.next(seq__64208);\nvar _ = first__64209;\nvar first__64209__$1 = cljs.core.first(seq__64208__$1);\nvar seq__64208__$2 = cljs.core.next(seq__64208__$1);\nvar field_1 = first__64209__$1;\nvar first__64209__$2 = cljs.core.first(seq__64208__$2);\nvar seq__64208__$3 = cljs.core.next(seq__64208__$2);\nvar field_2 = first__64209__$2;\nvar coordinates = seq__64208__$3;\nreturn cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"inside\",\"inside\",1972503011),metabase.mbql.normalize.canonicalize_implicit_field_id(field_1),metabase.mbql.normalize.canonicalize_implicit_field_id(field_2)], null),coordinates);\n}));\nmetabase.mbql.normalize.canonicalize_mbql_clause.cljs$core$IMultiFn$_add_method$arity$3(null,new cljs.core.Keyword(null,\"time-interval\",\"time-interval\",704622015),(function (p__64212){\nvar vec__64214 = p__64212;\nvar seq__64215 = cljs.core.seq(vec__64214);\nvar first__64216 = cljs.core.first(seq__64215);\nvar seq__64215__$1 = cljs.core.next(seq__64215);\nvar _ = first__64216;\nvar first__64216__$1 = cljs.core.first(seq__64215__$1);\nvar seq__64215__$2 = cljs.core.next(seq__64215__$1);\nvar field = first__64216__$1;\nvar args = seq__64215__$2;\nvar field__$1 = (function (){var G__64218 = metabase.mbql.normalize.canonicalize_implicit_field_id(field);\nif(cljs.core.truth_(metabase.mbql.util.is_clause_QMARK_(new cljs.core.Keyword(null,\"field\",\"field\",-1302436500),field))){\nreturn metabase.mbql.util.update_field_options.cljs$core$IFn$_invoke$arity$variadic(G__64218,cljs.core.dissoc,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"temporal-unit\",\"temporal-unit\",-1892306358)], 0));\n} else {\nreturn G__64218;\n}\n})();\nreturn cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"time-interval\",\"time-interval\",704622015),field__$1], null),args);\n}));\nmetabase.mbql.normalize.canonicalize_simple_filter_clause = (function metabase$mbql$normalize$canonicalize_simple_filter_clause(p__64246){\nvar vec__64247 = p__64246;\nvar seq__64248 = cljs.core.seq(vec__64247);\nvar first__64249 = cljs.core.first(seq__64248);\nvar seq__64248__$1 = cljs.core.next(seq__64248);\nvar filter_name = first__64249;\nvar first__64249__$1 = cljs.core.first(seq__64248__$1);\nvar seq__64248__$2 = cljs.core.next(seq__64248__$1);\nvar first_arg = first__64249__$1;\nvar other_args = seq__64248__$2;\nreturn cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [filter_name,metabase.mbql.normalize.canonicalize_implicit_field_id(first_arg)], null),cljs.core.map.cljs$core$IFn$_invoke$arity$2(metabase.mbql.normalize.canonicalize_mbql_clause,other_args));\n});\nvar seq__64250_64734 = cljs.core.seq(new cljs.core.PersistentVector(null, 15, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"starts-with\",\"starts-with\",366503009),new cljs.core.Keyword(null,\"ends-with\",\"ends-with\",-456791011),new cljs.core.Keyword(null,\"contains\",\"contains\",676899812),new cljs.core.Keyword(null,\"does-not-contain\",\"does-not-contain\",-274946853),new cljs.core.Keyword(null,\"=\",\"=\",1152933628),new cljs.core.Keyword(null,\"!=\",\"!=\",-1841737356),new cljs.core.Keyword(null,\"<\",\"<\",-646864291),new cljs.core.Keyword(null,\"<=\",\"<=\",-395636158),new cljs.core.Keyword(null,\">\",\">\",-555517146),new cljs.core.Keyword(null,\">=\",\">=\",-623615505),new cljs.core.Keyword(null,\"is-empty\",\"is-empty\",-1040302908),new cljs.core.Keyword(null,\"not-empty\",\"not-empty\",388922063),new cljs.core.Keyword(null,\"is-null\",\"is-null\",-1997050930),new cljs.core.Keyword(null,\"not-null\",\"not-null\",-1326718535),new cljs.core.Keyword(null,\"between\",\"between\",1131099276)], null));\nvar chunk__64251_64735 = null;\nvar count__64252_64736 = (0);\nvar i__64253_64737 = (0);\nwhile(true){\nif((i__64253_64737 < count__64252_64736)){\nvar clause_name_64738 = chunk__64251_64735.cljs$core$IIndexed$_nth$arity$2(null,i__64253_64737);\nmetabase.mbql.normalize.canonicalize_mbql_clause.cljs$core$IMultiFn$_add_method$arity$3(null,clause_name_64738,((function (seq__64250_64734,chunk__64251_64735,count__64252_64736,i__64253_64737,clause_name_64738){\nreturn (function (clause){\nreturn metabase.mbql.normalize.canonicalize_simple_filter_clause(clause);\n});})(seq__64250_64734,chunk__64251_64735,count__64252_64736,i__64253_64737,clause_name_64738))\n);\n\n\nvar G__64739 = seq__64250_64734;\nvar G__64740 = chunk__64251_64735;\nvar G__64741 = count__64252_64736;\nvar G__64742 = (i__64253_64737 + (1));\nseq__64250_64734 = G__64739;\nchunk__64251_64735 = G__64740;\ncount__64252_64736 = G__64741;\ni__64253_64737 = G__64742;\ncontinue;\n} else {\nvar temp__5804__auto___64743 = cljs.core.seq(seq__64250_64734);\nif(temp__5804__auto___64743){\nvar seq__64250_64745__$1 = temp__5804__auto___64743;\nif(cljs.core.chunked_seq_QMARK_(seq__64250_64745__$1)){\nvar c__5568__auto___64747 = cljs.core.chunk_first(seq__64250_64745__$1);\nvar G__64748 = cljs.core.chunk_rest(seq__64250_64745__$1);\nvar G__64749 = c__5568__auto___64747;\nvar G__64750 = cljs.core.count(c__5568__auto___64747);\nvar G__64751 = (0);\nseq__64250_64734 = G__64748;\nchunk__64251_64735 = G__64749;\ncount__64252_64736 = G__64750;\ni__64253_64737 = G__64751;\ncontinue;\n} else {\nvar clause_name_64752 = cljs.core.first(seq__64250_64745__$1);\nmetabase.mbql.normalize.canonicalize_mbql_clause.cljs$core$IMultiFn$_add_method$arity$3(null,clause_name_64752,((function (seq__64250_64734,chunk__64251_64735,count__64252_64736,i__64253_64737,clause_name_64752,seq__64250_64745__$1,temp__5804__auto___64743){\nreturn (function (clause){\nreturn metabase.mbql.normalize.canonicalize_simple_filter_clause(clause);\n});})(seq__64250_64734,chunk__64251_64735,count__64252_64736,i__64253_64737,clause_name_64752,seq__64250_64745__$1,temp__5804__auto___64743))\n);\n\n\nvar G__64756 = cljs.core.next(seq__64250_64745__$1);\nvar G__64757 = null;\nvar G__64758 = (0);\nvar G__64759 = (0);\nseq__64250_64734 = G__64756;\nchunk__64251_64735 = G__64757;\ncount__64252_64736 = G__64758;\ni__64253_64737 = G__64759;\ncontinue;\n}\n} else {\n}\n}\nbreak;\n}\nmetabase.mbql.normalize.canonicalize_mbql_clause.cljs$core$IMultiFn$_add_method$arity$3(null,new cljs.core.Keyword(null,\"rows\",\"rows\",850049680),(function (_){\nreturn null;\n}));\nmetabase.mbql.normalize.canonicalize_mbql_clause.cljs$core$IMultiFn$_add_method$arity$3(null,new cljs.core.Keyword(null,\"aggregation-options\",\"aggregation-options\",-1904917550),(function (p__64284){\nvar vec__64285 = p__64284;\nvar _ = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__64285,(0),null);\nvar wrapped_aggregation_clause = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__64285,(1),null);\nvar options = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__64285,(2),null);\nreturn new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"aggregation-options\",\"aggregation-options\",-1904917550),metabase.mbql.normalize.canonicalize_mbql_clause.cljs$core$IFn$_invoke$arity$1(wrapped_aggregation_clause),options], null);\n}));\nmetabase.mbql.normalize.canonicalize_mbql_clause.cljs$core$IMultiFn$_add_method$arity$3(null,new cljs.core.Keyword(null,\"named\",\"named\",-422393479),(function (p__64297){\nvar vec__64298 = p__64297;\nvar seq__64299 = cljs.core.seq(vec__64298);\nvar first__64300 = cljs.core.first(seq__64299);\nvar seq__64299__$1 = cljs.core.next(seq__64299);\nvar _ = first__64300;\nvar first__64300__$1 = cljs.core.first(seq__64299__$1);\nvar seq__64299__$2 = cljs.core.next(seq__64299__$1);\nvar wrapped_ag = first__64300__$1;\nvar first__64300__$2 = cljs.core.first(seq__64299__$2);\nvar seq__64299__$3 = cljs.core.next(seq__64299__$2);\nvar expr_name = first__64300__$2;\nvar more = seq__64299__$3;\nreturn metabase.mbql.normalize.canonicalize_mbql_clause.cljs$core$IFn$_invoke$arity$1(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"aggregation-options\",\"aggregation-options\",-1904917550),metabase.mbql.normalize.canonicalize_mbql_clause.cljs$core$IFn$_invoke$arity$1(wrapped_ag),(function (){var vec__64302 = more;\nvar map__64305 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__64302,(0),null);\nvar map__64305__$1 = cljs.core.__destructure_map(map__64305);\nvar use_as_display_name_QMARK_ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__64305__$1,new cljs.core.Keyword(null,\"use-as-display-name?\",\"use-as-display-name?\",686752941));\nif(use_as_display_name_QMARK_ === false){\nreturn new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"name\",\"name\",1843675177),expr_name], null);\n} else {\nreturn new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"display-name\",\"display-name\",694513143),expr_name], null);\n}\n})()], null));\n}));\nmetabase.mbql.normalize.canonicalize_count_clause = (function metabase$mbql$normalize$canonicalize_count_clause(p__64317){\nvar vec__64318 = p__64317;\nvar clause_name = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__64318,(0),null);\nvar field = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__64318,(1),null);\nif(cljs.core.truth_(field)){\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [clause_name,metabase.mbql.normalize.canonicalize_implicit_field_id(field)], null);\n} else {\nreturn new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [clause_name], null);\n}\n});\nvar seq__64323_64765 = cljs.core.seq(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"count\",\"count\",2139924085),new cljs.core.Keyword(null,\"cum-count\",\"cum-count\",-1964431543)], null));\nvar chunk__64324_64766 = null;\nvar count__64325_64767 = (0);\nvar i__64326_64768 = (0);\nwhile(true){\nif((i__64326_64768 < count__64325_64767)){\nvar clause_name_64769 = chunk__64324_64766.cljs$core$IIndexed$_nth$arity$2(null,i__64326_64768);\nmetabase.mbql.normalize.canonicalize_mbql_clause.cljs$core$IMultiFn$_add_method$arity$3(null,clause_name_64769,((function (seq__64323_64765,chunk__64324_64766,count__64325_64767,i__64326_64768,clause_name_64769){\nreturn (function (clause){\nreturn metabase.mbql.normalize.canonicalize_count_clause(clause);\n});})(seq__64323_64765,chunk__64324_64766,count__64325_64767,i__64326_64768,clause_name_64769))\n);\n\n\nvar G__64770 = seq__64323_64765;\nvar G__64771 = chunk__64324_64766;\nvar G__64772 = count__64325_64767;\nvar G__64773 = (i__64326_64768 + (1));\nseq__64323_64765 = G__64770;\nchunk__64324_64766 = G__64771;\ncount__64325_64767 = G__64772;\ni__64326_64768 = G__64773;\ncontinue;\n} else {\nvar temp__5804__auto___64775 = cljs.core.seq(seq__64323_64765);\nif(temp__5804__auto___64775){\nvar seq__64323_64776__$1 = temp__5804__auto___64775;\nif(cljs.core.chunked_seq_QMARK_(seq__64323_64776__$1)){\nvar c__5568__auto___64777 = cljs.core.chunk_first(seq__64323_64776__$1);\nvar G__64778 = cljs.core.chunk_rest(seq__64323_64776__$1);\nvar G__64779 = c__5568__auto___64777;\nvar G__64780 = cljs.core.count(c__5568__auto___64777);\nvar G__64781 = (0);\nseq__64323_64765 = G__64778;\nchunk__64324_64766 = G__64779;\ncount__64325_64767 = G__64780;\ni__64326_64768 = G__64781;\ncontinue;\n} else {\nvar clause_name_64782 = cljs.core.first(seq__64323_64776__$1);\nmetabase.mbql.normalize.canonicalize_mbql_clause.cljs$core$IMultiFn$_add_method$arity$3(null,clause_name_64782,((function (seq__64323_64765,chunk__64324_64766,count__64325_64767,i__64326_64768,clause_name_64782,seq__64323_64776__$1,temp__5804__auto___64775){\nreturn (function (clause){\nreturn metabase.mbql.normalize.canonicalize_count_clause(clause);\n});})(seq__64323_64765,chunk__64324_64766,count__64325_64767,i__64326_64768,clause_name_64782,seq__64323_64776__$1,temp__5804__auto___64775))\n);\n\n\nvar G__64783 = cljs.core.next(seq__64323_64776__$1);\nvar G__64784 = null;\nvar G__64785 = (0);\nvar G__64786 = (0);\nseq__64323_64765 = G__64783;\nchunk__64324_64766 = G__64784;\ncount__64325_64767 = G__64785;\ni__64326_64768 = G__64786;\ncontinue;\n}\n} else {\n}\n}\nbreak;\n}\nmetabase.mbql.normalize.canonicalize_simple_aggregation_with_field = (function metabase$mbql$normalize$canonicalize_simple_aggregation_with_field(p__64352){\nvar vec__64353 = p__64352;\nvar clause_name = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__64353,(0),null);\nvar field = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__64353,(1),null);\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [clause_name,metabase.mbql.normalize.canonicalize_implicit_field_id(field)], null);\n});\nvar seq__64356_64787 = cljs.core.seq(new cljs.core.PersistentVector(null, 9, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"avg\",\"avg\",197406200),new cljs.core.Keyword(null,\"cum-sum\",\"cum-sum\",2064902349),new cljs.core.Keyword(null,\"distinct\",\"distinct\",-1788879121),new cljs.core.Keyword(null,\"stddev\",\"stddev\",-865474939),new cljs.core.Keyword(null,\"sum\",\"sum\",136986814),new cljs.core.Keyword(null,\"min\",\"min\",444991522),new cljs.core.Keyword(null,\"max\",\"max\",61366548),new cljs.core.Keyword(null,\"median\",\"median\",569566131),new cljs.core.Keyword(null,\"var\",\"var\",-769682797)], null));\nvar chunk__64357_64788 = null;\nvar count__64358_64789 = (0);\nvar i__64359_64790 = (0);\nwhile(true){\nif((i__64359_64790 < count__64358_64789)){\nvar clause_name_64793 = chunk__64357_64788.cljs$core$IIndexed$_nth$arity$2(null,i__64359_64790);\nmetabase.mbql.normalize.canonicalize_mbql_clause.cljs$core$IMultiFn$_add_method$arity$3(null,clause_name_64793,((function (seq__64356_64787,chunk__64357_64788,count__64358_64789,i__64359_64790,clause_name_64793){\nreturn (function (clause){\nreturn metabase.mbql.normalize.canonicalize_simple_aggregation_with_field(clause);\n});})(seq__64356_64787,chunk__64357_64788,count__64358_64789,i__64359_64790,clause_name_64793))\n);\n\n\nvar G__64794 = seq__64356_64787;\nvar G__64795 = chunk__64357_64788;\nvar G__64796 = count__64358_64789;\nvar G__64797 = (i__64359_64790 + (1));\nseq__64356_64787 = G__64794;\nchunk__64357_64788 = G__64795;\ncount__64358_64789 = G__64796;\ni__64359_64790 = G__64797;\ncontinue;\n} else {\nvar temp__5804__auto___64798 = cljs.core.seq(seq__64356_64787);\nif(temp__5804__auto___64798){\nvar seq__64356_64799__$1 = temp__5804__auto___64798;\nif(cljs.core.chunked_seq_QMARK_(seq__64356_64799__$1)){\nvar c__5568__auto___64800 = cljs.core.chunk_first(seq__64356_64799__$1);\nvar G__64801 = cljs.core.chunk_rest(seq__64356_64799__$1);\nvar G__64802 = c__5568__auto___64800;\nvar G__64803 = cljs.core.count(c__5568__auto___64800);\nvar G__64804 = (0);\nseq__64356_64787 = G__64801;\nchunk__64357_64788 = G__64802;\ncount__64358_64789 = G__64803;\ni__64359_64790 = G__64804;\ncontinue;\n} else {\nvar clause_name_64806 = cljs.core.first(seq__64356_64799__$1);\nmetabase.mbql.normalize.canonicalize_mbql_clause.cljs$core$IMultiFn$_add_method$arity$3(null,clause_name_64806,((function (seq__64356_64787,chunk__64357_64788,count__64358_64789,i__64359_64790,clause_name_64806,seq__64356_64799__$1,temp__5804__auto___64798){\nreturn (function (clause){\nreturn metabase.mbql.normalize.canonicalize_simple_aggregation_with_field(clause);\n});})(seq__64356_64787,chunk__64357_64788,count__64358_64789,i__64359_64790,clause_name_64806,seq__64356_64799__$1,temp__5804__auto___64798))\n);\n\n\nvar G__64807 = cljs.core.next(seq__64356_64799__$1);\nvar G__64808 = null;\nvar G__64809 = (0);\nvar G__64810 = (0);\nseq__64356_64787 = G__64807;\nchunk__64357_64788 = G__64808;\ncount__64358_64789 = G__64809;\ni__64359_64790 = G__64810;\ncontinue;\n}\n} else {\n}\n}\nbreak;\n}\nmetabase.mbql.normalize.canonicalize_mbql_clause.cljs$core$IMultiFn$_add_method$arity$3(null,new cljs.core.Keyword(null,\"percentile\",\"percentile\",-601188752),(function (p__64373){\nvar vec__64377 = p__64373;\nvar _ = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__64377,(0),null);\nvar field = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__64377,(1),null);\nvar percentile = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__64377,(2),null);\nreturn new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"percentile\",\"percentile\",-601188752),metabase.mbql.normalize.canonicalize_implicit_field_id(field),percentile], null);\n}));\nmetabase.mbql.normalize.canonicalize_filtered_aggregation_clause = (function metabase$mbql$normalize$canonicalize_filtered_aggregation_clause(p__64383){\nvar vec__64384 = p__64383;\nvar clause_name = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__64384,(0),null);\nvar filter_subclause = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__64384,(1),null);\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [clause_name,metabase.mbql.normalize.canonicalize_mbql_clause.cljs$core$IFn$_invoke$arity$1(filter_subclause)], null);\n});\nvar seq__64388_64811 = cljs.core.seq(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"share\",\"share\",-589433933),new cljs.core.Keyword(null,\"count-where\",\"count-where\",385407720)], null));\nvar chunk__64389_64812 = null;\nvar count__64390_64813 = (0);\nvar i__64391_64814 = (0);\nwhile(true){\nif((i__64391_64814 < count__64390_64813)){\nvar clause_name_64815 = chunk__64389_64812.cljs$core$IIndexed$_nth$arity$2(null,i__64391_64814);\nmetabase.mbql.normalize.canonicalize_mbql_clause.cljs$core$IMultiFn$_add_method$arity$3(null,clause_name_64815,((function (seq__64388_64811,chunk__64389_64812,count__64390_64813,i__64391_64814,clause_name_64815){\nreturn (function (clause){\nreturn metabase.mbql.normalize.canonicalize_filtered_aggregation_clause(clause);\n});})(seq__64388_64811,chunk__64389_64812,count__64390_64813,i__64391_64814,clause_name_64815))\n);\n\n\nvar G__64816 = seq__64388_64811;\nvar G__64817 = chunk__64389_64812;\nvar G__64818 = count__64390_64813;\nvar G__64819 = (i__64391_64814 + (1));\nseq__64388_64811 = G__64816;\nchunk__64389_64812 = G__64817;\ncount__64390_64813 = G__64818;\ni__64391_64814 = G__64819;\ncontinue;\n} else {\nvar temp__5804__auto___64820 = cljs.core.seq(seq__64388_64811);\nif(temp__5804__auto___64820){\nvar seq__64388_64821__$1 = temp__5804__auto___64820;\nif(cljs.core.chunked_seq_QMARK_(seq__64388_64821__$1)){\nvar c__5568__auto___64822 = cljs.core.chunk_first(seq__64388_64821__$1);\nvar G__64823 = cljs.core.chunk_rest(seq__64388_64821__$1);\nvar G__64824 = c__5568__auto___64822;\nvar G__64825 = cljs.core.count(c__5568__auto___64822);\nvar G__64826 = (0);\nseq__64388_64811 = G__64823;\nchunk__64389_64812 = G__64824;\ncount__64390_64813 = G__64825;\ni__64391_64814 = G__64826;\ncontinue;\n} else {\nvar clause_name_64827 = cljs.core.first(seq__64388_64821__$1);\nmetabase.mbql.normalize.canonicalize_mbql_clause.cljs$core$IMultiFn$_add_method$arity$3(null,clause_name_64827,((function (seq__64388_64811,chunk__64389_64812,count__64390_64813,i__64391_64814,clause_name_64827,seq__64388_64821__$1,temp__5804__auto___64820){\nreturn (function (clause){\nreturn metabase.mbql.normalize.canonicalize_filtered_aggregation_clause(clause);\n});})(seq__64388_64811,chunk__64389_64812,count__64390_64813,i__64391_64814,clause_name_64827,seq__64388_64821__$1,temp__5804__auto___64820))\n);\n\n\nvar G__64832 = cljs.core.next(seq__64388_64821__$1);\nvar G__64833 = null;\nvar G__64834 = (0);\nvar G__64835 = (0);\nseq__64388_64811 = G__64832;\nchunk__64389_64812 = G__64833;\ncount__64390_64813 = G__64834;\ni__64391_64814 = G__64835;\ncontinue;\n}\n} else {\n}\n}\nbreak;\n}\nmetabase.mbql.normalize.canonicalize_mbql_clause.cljs$core$IMultiFn$_add_method$arity$3(null,new cljs.core.Keyword(null,\"sum-where\",\"sum-where\",2135348428),(function (p__64402){\nvar vec__64403 = p__64402;\nvar _ = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__64403,(0),null);\nvar field = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__64403,(1),null);\nvar filter_subclause = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__64403,(2),null);\nreturn new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"sum-where\",\"sum-where\",2135348428),metabase.mbql.normalize.canonicalize_mbql_clause.cljs$core$IFn$_invoke$arity$1(field),metabase.mbql.normalize.canonicalize_mbql_clause.cljs$core$IFn$_invoke$arity$1(filter_subclause)], null);\n}));\nmetabase.mbql.normalize.canonicalize_mbql_clause.cljs$core$IMultiFn$_add_method$arity$3(null,new cljs.core.Keyword(null,\"case\",\"case\",1143702196),(function (p__64407){\nvar vec__64409 = p__64407;\nvar _ = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__64409,(0),null);\nvar clauses = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__64409,(1),null);\nvar options = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__64409,(2),null);\nif(cljs.core.truth_(options)){\nreturn cljs.core.conj.cljs$core$IFn$_invoke$arity$2(metabase.mbql.normalize.canonicalize_mbql_clause.cljs$core$IFn$_invoke$arity$1(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"case\",\"case\",1143702196),clauses], null)),metabase.mbql.normalize.normalize_tokens.cljs$core$IFn$_invoke$arity$variadic(options,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"ignore-path\",\"ignore-path\",944069061)], 0)));\n} else {\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"case\",\"case\",1143702196),cljs.core.vec((function (){var iter__5523__auto__ = (function metabase$mbql$normalize$iter__64413(s__64414){\nreturn (new cljs.core.LazySeq(null,(function (){\nvar s__64414__$1 = s__64414;\nwhile(true){\nvar temp__5804__auto__ = cljs.core.seq(s__64414__$1);\nif(temp__5804__auto__){\nvar s__64414__$2 = temp__5804__auto__;\nif(cljs.core.chunked_seq_QMARK_(s__64414__$2)){\nvar c__5521__auto__ = cljs.core.chunk_first(s__64414__$2);\nvar size__5522__auto__ = cljs.core.count(c__5521__auto__);\nvar b__64416 = cljs.core.chunk_buffer(size__5522__auto__);\nif((function (){var i__64415 = (0);\nwhile(true){\nif((i__64415 < size__5522__auto__)){\nvar vec__64417 = cljs.core._nth(c__5521__auto__,i__64415);\nvar pred = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__64417,(0),null);\nvar expr = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__64417,(1),null);\ncljs.core.chunk_append(b__64416,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [metabase.mbql.normalize.canonicalize_mbql_clause.cljs$core$IFn$_invoke$arity$1(pred),metabase.mbql.normalize.canonicalize_mbql_clause.cljs$core$IFn$_invoke$arity$1(expr)], null));\n\nvar G__64845 = (i__64415 + (1));\ni__64415 = G__64845;\ncontinue;\n} else {\nreturn true;\n}\nbreak;\n}\n})()){\nreturn cljs.core.chunk_cons(cljs.core.chunk(b__64416),metabase$mbql$normalize$iter__64413(cljs.core.chunk_rest(s__64414__$2)));\n} else {\nreturn cljs.core.chunk_cons(cljs.core.chunk(b__64416),null);\n}\n} else {\nvar vec__64420 = cljs.core.first(s__64414__$2);\nvar pred = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__64420,(0),null);\nvar expr = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__64420,(1),null);\nreturn cljs.core.cons(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [metabase.mbql.normalize.canonicalize_mbql_clause.cljs$core$IFn$_invoke$arity$1(pred),metabase.mbql.normalize.canonicalize_mbql_clause.cljs$core$IFn$_invoke$arity$1(expr)], null),metabase$mbql$normalize$iter__64413(cljs.core.rest(s__64414__$2)));\n}\n} else {\nreturn null;\n}\nbreak;\n}\n}),null,null));\n});\nreturn iter__5523__auto__(clauses);\n})())], null);\n}\n}));\nmetabase.mbql.normalize.canonicalize_mbql_clause.cljs$core$IMultiFn$_add_method$arity$3(null,new cljs.core.Keyword(null,\"substring\",\"substring\",1140866276),(function (p__64423){\nvar vec__64425 = p__64423;\nvar seq__64426 = cljs.core.seq(vec__64425);\nvar first__64427 = cljs.core.first(seq__64426);\nvar seq__64426__$1 = cljs.core.next(seq__64426);\nvar _ = first__64427;\nvar first__64427__$1 = cljs.core.first(seq__64426__$1);\nvar seq__64426__$2 = cljs.core.next(seq__64426__$1);\nvar arg = first__64427__$1;\nvar first__64427__$2 = cljs.core.first(seq__64426__$2);\nvar seq__64426__$3 = cljs.core.next(seq__64426__$2);\nvar start = first__64427__$2;\nvar more = seq__64426__$3;\nreturn cljs.core.into.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"substring\",\"substring\",1140866276),metabase.mbql.normalize.canonicalize_mbql_clause.cljs$core$IFn$_invoke$arity$1(arg),((cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2((0),start))?(1):metabase.mbql.normalize.canonicalize_mbql_clause.cljs$core$IFn$_invoke$arity$1(start))], null),cljs.core.map.cljs$core$IFn$_invoke$arity$2(metabase.mbql.normalize.canonicalize_mbql_clause,more));\n}));\n/**\n * Walk an `mbql-query` an canonicalize non-top-level clauses like `:fk->`.\n */\nmetabase.mbql.normalize.canonicalize_mbql_clauses = (function metabase$mbql$normalize$canonicalize_mbql_clauses(mbql_query){\nreturn clojure.walk.prewalk((function (x){\nif(cljs.core.map_QMARK_(x)){\nreturn medley.core.map_vals.cljs$core$IFn$_invoke$arity$2(metabase.mbql.normalize.canonicalize_mbql_clauses,x);\n} else {\nif(cljs.core.not(metabase.mbql.normalize.mbql_clause_QMARK_(x))){\nreturn x;\n} else {\ntry{return metabase.mbql.normalize.canonicalize_mbql_clause.cljs$core$IFn$_invoke$arity$1(x);\n}catch (e64430){if((e64430 instanceof Error)){\nvar e = e64430;\nvar level__30238__auto___64854 = metabase.util.log.glogi_level(new cljs.core.Keyword(null,\"error\",\"error\",-978969032));\nvar logger__30239__auto___64855 = \"metabase.mbql.normalize\";\nif(cljs.core.truth_(metabase.util.log.is_loggable_QMARK_(logger__30239__auto___64855,level__30238__auto___64854))){\nvar x__30240__auto___64856 = metabase.shared.util.i18n.js_i18n(\"Invalid clause:\");\nif((x__30240__auto___64856 instanceof Error)){\nlambdaisland.glogi.log.cljs$core$IFn$_invoke$arity$4(logger__30239__auto___64855,level__30238__auto___64854,cljs.core.print_str.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([x], 0)),x__30240__auto___64856);\n} else {\nlambdaisland.glogi.log.cljs$core$IFn$_invoke$arity$4(logger__30239__auto___64855,level__30238__auto___64854,cljs.core.print_str.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([x__30240__auto___64856,x], 0)),null);\n}\n} else {\n}\n\nthrow cljs.core.ex_info.cljs$core$IFn$_invoke$arity$3(metabase.shared.util.i18n.js_i18n.cljs$core$IFn$_invoke$arity$variadic(\"Invalid MBQL clause: {0}\",cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([cljs.core.ex_message(e)], 0)),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"clause\",\"clause\",1479668060),x], null),e);\n} else {\nthrow e64430;\n\n}\n}\n}\n}\n}),mbql_query);\n});\n/**\n * Convert old MBQL 95 single-aggregations like `{:aggregation :count}` or `{:aggregation [:count]}` to MBQL 98+\n *   multiple-aggregation syntax (e.g. `{:aggregation [[:count]]}`).\n */\nmetabase.mbql.normalize.wrap_single_aggregations = (function metabase$mbql$normalize$wrap_single_aggregations(aggregations){\nreturn (function metabase$mbql$normalize$wrap_single_aggregations_$_replace_64433(_AMPERSAND_parents,_AMPERSAND_match){\ntry{if(cljs.core.truth_((function (){var fexpr__64477 = metabase.mbql.util.match.impl.match_with_pred_or_class(cljs.core.seq_QMARK_);\nreturn (fexpr__64477.cljs$core$IFn$_invoke$arity$1 ? fexpr__64477.cljs$core$IFn$_invoke$arity$1(_AMPERSAND_match) : fexpr__64477.call(null,_AMPERSAND_match));\n})())){\nreturn metabase$mbql$normalize$wrap_single_aggregations_$_replace_64433(_AMPERSAND_parents,cljs.core.vec(_AMPERSAND_match));\n} else {\nthrow cljs.core.match.backtrack;\n\n}\n}catch (e64453){if((e64453 instanceof Error)){\nvar e__46040__auto__ = e64453;\nif((e__46040__auto__ === cljs.core.match.backtrack)){\ntry{if(cljs.core.truth_((function (){var fexpr__64476 = metabase.mbql.util.match.impl.match_with_pred_or_class(cljs.core.keyword_QMARK_);\nreturn (fexpr__64476.cljs$core$IFn$_invoke$arity$1 ? fexpr__64476.cljs$core$IFn$_invoke$arity$1(_AMPERSAND_match) : fexpr__64476.call(null,_AMPERSAND_match));\n})())){\nreturn new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [_AMPERSAND_match], null)], null);\n} else {\nthrow cljs.core.match.backtrack;\n\n}\n}catch (e64454){if((e64454 instanceof Error)){\nvar e__46040__auto____$1 = e64454;\nif((e__46040__auto____$1 === cljs.core.match.backtrack)){\ntry{if(((cljs.core.vector_QMARK_(_AMPERSAND_match)) && ((cljs.core.count(_AMPERSAND_match) >= (2))))){\ntry{var _AMPERSAND_match_left__64446 = cljs.core.subvec.cljs$core$IFn$_invoke$arity$3(_AMPERSAND_match,(0),(2));\nif(((cljs.core.vector_QMARK_(_AMPERSAND_match_left__64446)) && ((cljs.core.count(_AMPERSAND_match_left__64446) === (2))))){\ntry{var _AMPERSAND_match_left__64446_0__64448 = cljs.core.nth.cljs$core$IFn$_invoke$arity$2(_AMPERSAND_match_left__64446,(0));\nif(cljs.core.truth_(cljs.core.every_pred.cljs$core$IFn$_invoke$arity$2(cljs.core.keyword_QMARK_,cljs.core.complement(new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,\"*\",\"*\",-1294732318),null,new cljs.core.Keyword(null,\"-\",\"-\",-2112348439),null,new cljs.core.Keyword(null,\"/\",\"/\",1282502798),null,new cljs.core.Keyword(null,\"+\",\"+\",1913524883),null,new cljs.core.Keyword(null,\"named\",\"named\",-422393479),null], null), null)))(_AMPERSAND_match_left__64446_0__64448))){\ntry{var _AMPERSAND_match_left__64446_1__64449 = cljs.core.nth.cljs$core$IFn$_invoke$arity$2(_AMPERSAND_match_left__64446,(1));\nif(cljs.core.truth_(metabase.mbql.normalize.aggregation_subclause_QMARK_(_AMPERSAND_match_left__64446_1__64449))){\nreturn cljs.core.vec(cljs.core.reduce.cljs$core$IFn$_invoke$arity$2(cljs.core.concat,cljs.core.map.cljs$core$IFn$_invoke$arity$2(metabase.mbql.normalize.wrap_single_aggregations,aggregations)));\n} else {\nthrow cljs.core.match.backtrack;\n\n}\n}catch (e64470){if((e64470 instanceof Error)){\nvar e__46040__auto____$2 = e64470;\nif((e__46040__auto____$2 === cljs.core.match.backtrack)){\nthrow cljs.core.match.backtrack;\n} else {\nthrow e__46040__auto____$2;\n}\n} else {\nthrow e64470;\n\n}\n}} else {\nthrow cljs.core.match.backtrack;\n\n}\n}catch (e64469){if((e64469 instanceof Error)){\nvar e__46040__auto____$2 = e64469;\nif((e__46040__auto____$2 === cljs.core.match.backtrack)){\nthrow cljs.core.match.backtrack;\n} else {\nthrow e__46040__auto____$2;\n}\n} else {\nthrow e64469;\n\n}\n}} else {\nthrow cljs.core.match.backtrack;\n\n}\n}catch (e64466){if((e64466 instanceof Error)){\nvar e__46040__auto____$2 = e64466;\nif((e__46040__auto____$2 === cljs.core.match.backtrack)){\nthrow cljs.core.match.backtrack;\n} else {\nthrow e__46040__auto____$2;\n}\n} else {\nthrow e64466;\n\n}\n}} else {\nthrow cljs.core.match.backtrack;\n\n}\n}catch (e64455){if((e64455 instanceof Error)){\nvar e__46040__auto____$2 = e64455;\nif((e__46040__auto____$2 === cljs.core.match.backtrack)){\ntry{if(((cljs.core.vector_QMARK_(_AMPERSAND_match)) && ((cljs.core.count(_AMPERSAND_match) >= (1))))){\ntry{var _AMPERSAND_match_left__64450 = cljs.core.subvec.cljs$core$IFn$_invoke$arity$3(_AMPERSAND_match,(0),(1));\nif(((cljs.core.vector_QMARK_(_AMPERSAND_match_left__64450)) && ((cljs.core.count(_AMPERSAND_match_left__64450) === (1))))){\ntry{var _AMPERSAND_match_left__64450_0__64452 = cljs.core.nth.cljs$core$IFn$_invoke$arity$2(_AMPERSAND_match_left__64450,(0));\nif((_AMPERSAND_match_left__64450_0__64452 instanceof cljs.core.Keyword)){\nreturn new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [_AMPERSAND_match], null);\n} else {\nthrow cljs.core.match.backtrack;\n\n}\n}catch (e64458){if((e64458 instanceof Error)){\nvar e__46040__auto____$3 = e64458;\nif((e__46040__auto____$3 === cljs.core.match.backtrack)){\nthrow cljs.core.match.backtrack;\n} else {\nthrow e__46040__auto____$3;\n}\n} else {\nthrow e64458;\n\n}\n}} else {\nthrow cljs.core.match.backtrack;\n\n}\n}catch (e64457){if((e64457 instanceof Error)){\nvar e__46040__auto____$3 = e64457;\nif((e__46040__auto____$3 === cljs.core.match.backtrack)){\nthrow cljs.core.match.backtrack;\n} else {\nthrow e__46040__auto____$3;\n}\n} else {\nthrow e64457;\n\n}\n}} else {\nthrow cljs.core.match.backtrack;\n\n}\n}catch (e64456){if((e64456 instanceof Error)){\nvar e__46040__auto____$3 = e64456;\nif((e__46040__auto____$3 === cljs.core.match.backtrack)){\nreturn _AMPERSAND_match;\n} else {\nthrow e__46040__auto____$3;\n}\n} else {\nthrow e64456;\n\n}\n}} else {\nthrow e__46040__auto____$2;\n}\n} else {\nthrow e64455;\n\n}\n}} else {\nthrow e__46040__auto____$1;\n}\n} else {\nthrow e64454;\n\n}\n}} else {\nthrow e__46040__auto__;\n}\n} else {\nthrow e64453;\n\n}\n}})(cljs.core.PersistentVector.EMPTY,aggregations);\n});\n/**\n * Canonicalize subclauses (see above) and make sure `:aggregation` is a sequence of clauses instead of a single\n *   clause.\n */\nmetabase.mbql.normalize.canonicalize_aggregations = (function metabase$mbql$normalize$canonicalize_aggregations(aggregations){\nreturn cljs.core.vec(cljs.core.keep.cljs$core$IFn$_invoke$arity$2(metabase.mbql.normalize.canonicalize_mbql_clauses,metabase.mbql.normalize.wrap_single_aggregations(aggregations)));\n});\nmetabase.mbql.normalize.canonicalize_breakouts = (function metabase$mbql$normalize$canonicalize_breakouts(breakouts){\nwhile(true){\nif(cljs.core.truth_(metabase.mbql.normalize.mbql_clause_QMARK_(breakouts))){\nvar G__64868 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [breakouts], null);\nbreakouts = G__64868;\ncontinue;\n} else {\nreturn cljs.core.not_empty(cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(metabase.mbql.normalize.wrap_implicit_field_id,breakouts));\n}\nbreak;\n}\n});\n/**\n * Make sure order by clauses like `[:asc 10]` get `:field-id` added where appropriate, e.g. `[:asc [:field-id 10]]`\n */\nmetabase.mbql.normalize.canonicalize_order_by = (function metabase$mbql$normalize$canonicalize_order_by(clauses){\nreturn (function metabase$mbql$normalize$canonicalize_order_by_$_replace_64481(_AMPERSAND_parents,_AMPERSAND_match){\ntry{if(cljs.core.truth_((function (){var fexpr__64540 = metabase.mbql.util.match.impl.match_with_pred_or_class(cljs.core.seq_QMARK_);\nreturn (fexpr__64540.cljs$core$IFn$_invoke$arity$1 ? fexpr__64540.cljs$core$IFn$_invoke$arity$1(_AMPERSAND_match) : fexpr__64540.call(null,_AMPERSAND_match));\n})())){\nreturn metabase$mbql$normalize$canonicalize_order_by_$_replace_64481(_AMPERSAND_parents,cljs.core.vec(_AMPERSAND_match));\n} else {\nthrow cljs.core.match.backtrack;\n\n}\n}catch (e64496){if((e64496 instanceof Error)){\nvar e__46040__auto__ = e64496;\nif((e__46040__auto__ === cljs.core.match.backtrack)){\ntry{if(((cljs.core.vector_QMARK_(_AMPERSAND_match)) && ((cljs.core.count(_AMPERSAND_match) === 2)))){\ntry{var _AMPERSAND_match_1__64493 = cljs.core.nth.cljs$core$IFn$_invoke$arity$2(_AMPERSAND_match,(1));\nif(cljs.core.keyword_identical_QMARK_(_AMPERSAND_match_1__64493,new cljs.core.Keyword(null,\"asc\",\"asc\",356854569))){\nvar field = cljs.core.nth.cljs$core$IFn$_invoke$arity$2(_AMPERSAND_match,(0));\nreturn metabase$mbql$normalize$canonicalize_order_by_$_replace_64481(_AMPERSAND_parents,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"asc\",\"asc\",356854569),field], null));\n} else {\nthrow cljs.core.match.backtrack;\n\n}\n}catch (e64510){if((e64510 instanceof Error)){\nvar e__46040__auto____$1 = e64510;\nif((e__46040__auto____$1 === cljs.core.match.backtrack)){\ntry{var _AMPERSAND_match_1__64493 = cljs.core.nth.cljs$core$IFn$_invoke$arity$2(_AMPERSAND_match,(1));\nif(cljs.core.keyword_identical_QMARK_(_AMPERSAND_match_1__64493,new cljs.core.Keyword(null,\"desc\",\"desc\",2093485764))){\nvar field = cljs.core.nth.cljs$core$IFn$_invoke$arity$2(_AMPERSAND_match,(0));\nreturn metabase$mbql$normalize$canonicalize_order_by_$_replace_64481(_AMPERSAND_parents,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"desc\",\"desc\",2093485764),field], null));\n} else {\nthrow cljs.core.match.backtrack;\n\n}\n}catch (e64511){if((e64511 instanceof Error)){\nvar e__46040__auto____$2 = e64511;\nif((e__46040__auto____$2 === cljs.core.match.backtrack)){\ntry{var _AMPERSAND_match_1__64493 = cljs.core.nth.cljs$core$IFn$_invoke$arity$2(_AMPERSAND_match,(1));\nif(cljs.core.keyword_identical_QMARK_(_AMPERSAND_match_1__64493,new cljs.core.Keyword(null,\"ascending\",\"ascending\",-988350486))){\nvar field = cljs.core.nth.cljs$core$IFn$_invoke$arity$2(_AMPERSAND_match,(0));\nreturn metabase$mbql$normalize$canonicalize_order_by_$_replace_64481(_AMPERSAND_parents,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"asc\",\"asc\",356854569),field], null));\n} else {\nthrow cljs.core.match.backtrack;\n\n}\n}catch (e64516){if((e64516 instanceof Error)){\nvar e__46040__auto____$3 = e64516;\nif((e__46040__auto____$3 === cljs.core.match.backtrack)){\ntry{var _AMPERSAND_match_1__64493 = cljs.core.nth.cljs$core$IFn$_invoke$arity$2(_AMPERSAND_match,(1));\nif(cljs.core.keyword_identical_QMARK_(_AMPERSAND_match_1__64493,new cljs.core.Keyword(null,\"descending\",\"descending\",-24766135))){\nvar field = cljs.core.nth.cljs$core$IFn$_invoke$arity$2(_AMPERSAND_match,(0));\nreturn metabase$mbql$normalize$canonicalize_order_by_$_replace_64481(_AMPERSAND_parents,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"desc\",\"desc\",2093485764),field], null));\n} else {\nthrow cljs.core.match.backtrack;\n\n}\n}catch (e64517){if((e64517 instanceof Error)){\nvar e__46040__auto____$4 = e64517;\nif((e__46040__auto____$4 === cljs.core.match.backtrack)){\ntry{var _AMPERSAND_match_0__64492 = cljs.core.nth.cljs$core$IFn$_invoke$arity$2(_AMPERSAND_match,(0));\nif(cljs.core.keyword_identical_QMARK_(_AMPERSAND_match_0__64492,new cljs.core.Keyword(null,\"ascending\",\"ascending\",-988350486))){\nvar field = cljs.core.nth.cljs$core$IFn$_invoke$arity$2(_AMPERSAND_match,(1));\nreturn metabase$mbql$normalize$canonicalize_order_by_$_replace_64481(_AMPERSAND_parents,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"asc\",\"asc\",356854569),field], null));\n} else {\nthrow cljs.core.match.backtrack;\n\n}\n}catch (e64519){if((e64519 instanceof Error)){\nvar e__46040__auto____$5 = e64519;\nif((e__46040__auto____$5 === cljs.core.match.backtrack)){\ntry{var _AMPERSAND_match_0__64492 = cljs.core.nth.cljs$core$IFn$_invoke$arity$2(_AMPERSAND_match,(0));\nif(cljs.core.keyword_identical_QMARK_(_AMPERSAND_match_0__64492,new cljs.core.Keyword(null,\"descending\",\"descending\",-24766135))){\nvar field = cljs.core.nth.cljs$core$IFn$_invoke$arity$2(_AMPERSAND_match,(1));\nreturn metabase$mbql$normalize$canonicalize_order_by_$_replace_64481(_AMPERSAND_parents,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"desc\",\"desc\",2093485764),field], null));\n} else {\nthrow cljs.core.match.backtrack;\n\n}\n}catch (e64520){if((e64520 instanceof Error)){\nvar e__46040__auto____$6 = e64520;\nif((e__46040__auto____$6 === cljs.core.match.backtrack)){\ntry{var _AMPERSAND_match_0__64492 = cljs.core.nth.cljs$core$IFn$_invoke$arity$2(_AMPERSAND_match,(0));\nif(cljs.core.keyword_identical_QMARK_(_AMPERSAND_match_0__64492,new cljs.core.Keyword(null,\"asc\",\"asc\",356854569))){\nvar field = cljs.core.nth.cljs$core$IFn$_invoke$arity$2(_AMPERSAND_match,(1));\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"asc\",\"asc\",356854569),metabase.mbql.normalize.canonicalize_implicit_field_id(field)], null);\n} else {\nthrow cljs.core.match.backtrack;\n\n}\n}catch (e64522){if((e64522 instanceof Error)){\nvar e__46040__auto____$7 = e64522;\nif((e__46040__auto____$7 === cljs.core.match.backtrack)){\ntry{var _AMPERSAND_match_0__64492 = cljs.core.nth.cljs$core$IFn$_invoke$arity$2(_AMPERSAND_match,(0));\nif(cljs.core.keyword_identical_QMARK_(_AMPERSAND_match_0__64492,new cljs.core.Keyword(null,\"desc\",\"desc\",2093485764))){\nvar field = cljs.core.nth.cljs$core$IFn$_invoke$arity$2(_AMPERSAND_match,(1));\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"desc\",\"desc\",2093485764),metabase.mbql.normalize.canonicalize_implicit_field_id(field)], null);\n} else {\nthrow cljs.core.match.backtrack;\n\n}\n}catch (e64523){if((e64523 instanceof Error)){\nvar e__46040__auto____$8 = e64523;\nif((e__46040__auto____$8 === cljs.core.match.backtrack)){\nthrow cljs.core.match.backtrack;\n} else {\nthrow e__46040__auto____$8;\n}\n} else {\nthrow e64523;\n\n}\n}} else {\nthrow e__46040__auto____$7;\n}\n} else {\nthrow e64522;\n\n}\n}} else {\nthrow e__46040__auto____$6;\n}\n} else {\nthrow e64520;\n\n}\n}} else {\nthrow e__46040__auto____$5;\n}\n} else {\nthrow e64519;\n\n}\n}} else {\nthrow e__46040__auto____$4;\n}\n} else {\nthrow e64517;\n\n}\n}} else {\nthrow e__46040__auto____$3;\n}\n} else {\nthrow e64516;\n\n}\n}} else {\nthrow e__46040__auto____$2;\n}\n} else {\nthrow e64511;\n\n}\n}} else {\nthrow e__46040__auto____$1;\n}\n} else {\nthrow e64510;\n\n}\n}} else {\nthrow cljs.core.match.backtrack;\n\n}\n}catch (e64497){if((e64497 instanceof Error)){\nvar e__46040__auto____$1 = e64497;\nif((e__46040__auto____$1 === cljs.core.match.backtrack)){\ntry{if(((cljs.core.vector_QMARK_(_AMPERSAND_match)) && ((cljs.core.count(_AMPERSAND_match) >= (0))))){\ntry{var _AMPERSAND_match_left__64494 = cljs.core.subvec.cljs$core$IFn$_invoke$arity$3(_AMPERSAND_match,(0),(0));\nif(((cljs.core.vector_QMARK_(_AMPERSAND_match_left__64494)) && ((cljs.core.count(_AMPERSAND_match_left__64494) === (0))))){\ntry{var _AMPERSAND_match_right__64495 = cljs.core.subvec.cljs$core$IFn$_invoke$arity$2(_AMPERSAND_match,(0));\nif(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(_AMPERSAND_match_right__64495,clauses)){\nreturn cljs.core.vec(cljs.core.distinct.cljs$core$IFn$_invoke$arity$1(cljs.core.map.cljs$core$IFn$_invoke$arity$2(metabase.mbql.normalize.canonicalize_order_by,clauses)));\n} else {\nthrow cljs.core.match.backtrack;\n\n}\n}catch (e64508){if((e64508 instanceof Error)){\nvar e__46040__auto____$2 = e64508;\nif((e__46040__auto____$2 === cljs.core.match.backtrack)){\nthrow cljs.core.match.backtrack;\n} else {\nthrow e__46040__auto____$2;\n}\n} else {\nthrow e64508;\n\n}\n}} else {\nthrow cljs.core.match.backtrack;\n\n}\n}catch (e64500){if((e64500 instanceof Error)){\nvar e__46040__auto____$2 = e64500;\nif((e__46040__auto____$2 === cljs.core.match.backtrack)){\nthrow cljs.core.match.backtrack;\n} else {\nthrow e__46040__auto____$2;\n}\n} else {\nthrow e64500;\n\n}\n}} else {\nthrow cljs.core.match.backtrack;\n\n}\n}catch (e64498){if((e64498 instanceof Error)){\nvar e__46040__auto____$2 = e64498;\nif((e__46040__auto____$2 === cljs.core.match.backtrack)){\nreturn metabase.mbql.util.match.impl.replace_in_collection(metabase$mbql$normalize$canonicalize_order_by_$_replace_64481,_AMPERSAND_parents,_AMPERSAND_match);\n} else {\nthrow e__46040__auto____$2;\n}\n} else {\nthrow e64498;\n\n}\n}} else {\nthrow e__46040__auto____$1;\n}\n} else {\nthrow e64497;\n\n}\n}} else {\nthrow e__46040__auto__;\n}\n} else {\nthrow e64496;\n\n}\n}})(cljs.core.PersistentVector.EMPTY,clauses);\n});\nmetabase.mbql.normalize.canonicalize_template_tag = (function metabase$mbql$normalize$canonicalize_template_tag(p__64547){\nvar map__64548 = p__64547;\nvar map__64548__$1 = cljs.core.__destructure_map(map__64548);\nvar tag = map__64548__$1;\nvar dimension = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__64548__$1,new cljs.core.Keyword(null,\"dimension\",\"dimension\",543254198));\nvar G__64550 = tag;\nif(cljs.core.truth_(dimension)){\nreturn cljs.core.update.cljs$core$IFn$_invoke$arity$3(G__64550,new cljs.core.Keyword(null,\"dimension\",\"dimension\",543254198),metabase.mbql.normalize.canonicalize_mbql_clause);\n} else {\nreturn G__64550;\n}\n});\nmetabase.mbql.normalize.canonicalize_template_tags = (function metabase$mbql$normalize$canonicalize_template_tags(tags){\nreturn cljs.core.into.cljs$core$IFn$_invoke$arity$2(cljs.core.PersistentArrayMap.EMPTY,(function (){var iter__5523__auto__ = (function metabase$mbql$normalize$canonicalize_template_tags_$_iter__64555(s__64556){\nreturn (new cljs.core.LazySeq(null,(function (){\nvar s__64556__$1 = s__64556;\nwhile(true){\nvar temp__5804__auto__ = cljs.core.seq(s__64556__$1);\nif(temp__5804__auto__){\nvar s__64556__$2 = temp__5804__auto__;\nif(cljs.core.chunked_seq_QMARK_(s__64556__$2)){\nvar c__5521__auto__ = cljs.core.chunk_first(s__64556__$2);\nvar size__5522__auto__ = cljs.core.count(c__5521__auto__);\nvar b__64558 = cljs.core.chunk_buffer(size__5522__auto__);\nif((function (){var i__64557 = (0);\nwhile(true){\nif((i__64557 < size__5522__auto__)){\nvar vec__64561 = cljs.core._nth(c__5521__auto__,i__64557);\nvar tag_name = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__64561,(0),null);\nvar tag = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__64561,(1),null);\ncljs.core.chunk_append(b__64558,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [tag_name,metabase.mbql.normalize.canonicalize_template_tag(tag)], null));\n\nvar G__64873 = (i__64557 + (1));\ni__64557 = G__64873;\ncontinue;\n} else {\nreturn true;\n}\nbreak;\n}\n})()){\nreturn cljs.core.chunk_cons(cljs.core.chunk(b__64558),metabase$mbql$normalize$canonicalize_template_tags_$_iter__64555(cljs.core.chunk_rest(s__64556__$2)));\n} else {\nreturn cljs.core.chunk_cons(cljs.core.chunk(b__64558),null);\n}\n} else {\nvar vec__64564 = cljs.core.first(s__64556__$2);\nvar tag_name = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__64564,(0),null);\nvar tag = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__64564,(1),null);\nreturn cljs.core.cons(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [tag_name,metabase.mbql.normalize.canonicalize_template_tag(tag)], null),metabase$mbql$normalize$canonicalize_template_tags_$_iter__64555(cljs.core.rest(s__64556__$2)));\n}\n} else {\nreturn null;\n}\nbreak;\n}\n}),null,null));\n});\nreturn iter__5523__auto__(tags);\n})());\n});\nmetabase.mbql.normalize.canonicalize_native_query = (function metabase$mbql$normalize$canonicalize_native_query(p__64568){\nvar map__64572 = p__64568;\nvar map__64572__$1 = cljs.core.__destructure_map(map__64572);\nvar native_query = map__64572__$1;\nvar template_tags = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__64572__$1,new cljs.core.Keyword(null,\"template-tags\",\"template-tags\",1853115685));\nvar G__64574 = native_query;\nif(cljs.core.truth_(template_tags)){\nreturn cljs.core.update.cljs$core$IFn$_invoke$arity$3(G__64574,new cljs.core.Keyword(null,\"template-tags\",\"template-tags\",1853115685),metabase.mbql.normalize.canonicalize_template_tags);\n} else {\nreturn G__64574;\n}\n});\nmetabase.mbql.normalize.canonicalize_source_query = (function metabase$mbql$normalize$canonicalize_source_query(p__64576){\nvar map__64577 = p__64576;\nvar map__64577__$1 = cljs.core.__destructure_map(map__64577);\nvar source_query = map__64577__$1;\nvar native_QMARK_ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__64577__$1,new cljs.core.Keyword(null,\"native\",\"native\",-613060878));\nvar G__64578 = source_query;\nvar G__64578__$1 = ((cljs.core.not(native_QMARK_))?(metabase.mbql.normalize.canonicalize_inner_mbql_query.cljs$core$IFn$_invoke$arity$1 ? metabase.mbql.normalize.canonicalize_inner_mbql_query.cljs$core$IFn$_invoke$arity$1(G__64578) : metabase.mbql.normalize.canonicalize_inner_mbql_query.call(null,G__64578)):G__64578);\nif(cljs.core.truth_(native_QMARK_)){\nreturn metabase.mbql.normalize.canonicalize_native_query(G__64578__$1);\n} else {\nreturn G__64578__$1;\n}\n});\nmetabase.mbql.normalize.non_empty_QMARK_ = (function metabase$mbql$normalize$non_empty_QMARK_(x){\nif(cljs.core.coll_QMARK_(x)){\nreturn cljs.core.seq(x);\n} else {\nreturn (!((x == null)));\n}\n});\n/**\n * Perform specific steps to canonicalize the various top-level clauses in an MBQL query.\n */\nmetabase.mbql.normalize.canonicalize_top_level_mbql_clauses = (function metabase$mbql$normalize$canonicalize_top_level_mbql_clauses(mbql_query){\nvar G__64581 = mbql_query;\nvar G__64581__$1 = ((metabase.mbql.normalize.non_empty_QMARK_(new cljs.core.Keyword(null,\"aggregation\",\"aggregation\",1597476696).cljs$core$IFn$_invoke$arity$1(mbql_query)))?cljs.core.update.cljs$core$IFn$_invoke$arity$3(G__64581,new cljs.core.Keyword(null,\"aggregation\",\"aggregation\",1597476696),metabase.mbql.normalize.canonicalize_aggregations):G__64581);\nvar G__64581__$2 = ((metabase.mbql.normalize.non_empty_QMARK_(new cljs.core.Keyword(null,\"breakout\",\"breakout\",-732419050).cljs$core$IFn$_invoke$arity$1(mbql_query)))?cljs.core.update.cljs$core$IFn$_invoke$arity$3(G__64581__$1,new cljs.core.Keyword(null,\"breakout\",\"breakout\",-732419050),metabase.mbql.normalize.canonicalize_breakouts):G__64581__$1);\nvar G__64581__$3 = ((metabase.mbql.normalize.non_empty_QMARK_(new cljs.core.Keyword(null,\"fields\",\"fields\",-1932066230).cljs$core$IFn$_invoke$arity$1(mbql_query)))?cljs.core.update.cljs$core$IFn$_invoke$arity$3(G__64581__$2,new cljs.core.Keyword(null,\"fields\",\"fields\",-1932066230),cljs.core.partial.cljs$core$IFn$_invoke$arity$2(cljs.core.mapv,metabase.mbql.normalize.wrap_implicit_field_id)):G__64581__$2);\nvar G__64581__$4 = ((metabase.mbql.normalize.non_empty_QMARK_(new cljs.core.Keyword(null,\"order-by\",\"order-by\",1527318070).cljs$core$IFn$_invoke$arity$1(mbql_query)))?cljs.core.update.cljs$core$IFn$_invoke$arity$3(G__64581__$3,new cljs.core.Keyword(null,\"order-by\",\"order-by\",1527318070),metabase.mbql.normalize.canonicalize_order_by):G__64581__$3);\nif(metabase.mbql.normalize.non_empty_QMARK_(new cljs.core.Keyword(null,\"source-query\",\"source-query\",198004422).cljs$core$IFn$_invoke$arity$1(mbql_query))){\nreturn cljs.core.update.cljs$core$IFn$_invoke$arity$3(G__64581__$4,new cljs.core.Keyword(null,\"source-query\",\"source-query\",198004422),metabase.mbql.normalize.canonicalize_source_query);\n} else {\nreturn G__64581__$4;\n}\n});\nmetabase.mbql.normalize.canonicalize_inner_mbql_query = cljs.core.comp.cljs$core$IFn$_invoke$arity$2(metabase.mbql.normalize.canonicalize_mbql_clauses,metabase.mbql.normalize.canonicalize_top_level_mbql_clauses);\n/**\n * In Dashboard 0.33.0 `:source-metadata` about resolved queries is added to the 'inner' MBQL query rather than to the\n *   top-level; if we encounter the old style, move it to the appropriate location.\n */\nmetabase.mbql.normalize.move_source_metadata_to_mbql_query = (function metabase$mbql$normalize$move_source_metadata_to_mbql_query(p__64588){\nvar map__64589 = p__64588;\nvar map__64589__$1 = cljs.core.__destructure_map(map__64589);\nvar query = map__64589__$1;\nvar source_metadata = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__64589__$1,new cljs.core.Keyword(null,\"source-metadata\",\"source-metadata\",-477816085));\nreturn cljs.core.assoc_in(cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(query,new cljs.core.Keyword(null,\"source-metadata\",\"source-metadata\",-477816085)),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"query\",\"query\",-1288509510),new cljs.core.Keyword(null,\"source-metadata\",\"source-metadata\",-477816085)], null),source_metadata);\n});\n/**\n * Canonicalize a query [MBQL query], rewriting the query as if you perfectly followed the recommended style guides for\n *   writing MBQL. Does things like removes unneeded and empty clauses, converts older MBQL '95 syntax to MBQL '98, etc.\n */\nmetabase.mbql.normalize.canonicalize = (function metabase$mbql$normalize$canonicalize(p__64590){\nvar map__64591 = p__64590;\nvar map__64591__$1 = cljs.core.__destructure_map(map__64591);\nvar outer_query = map__64591__$1;\nvar query = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__64591__$1,new cljs.core.Keyword(null,\"query\",\"query\",-1288509510));\nvar parameters = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__64591__$1,new cljs.core.Keyword(null,\"parameters\",\"parameters\",-1229919748));\nvar source_metadata = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__64591__$1,new cljs.core.Keyword(null,\"source-metadata\",\"source-metadata\",-477816085));\nvar native$ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__64591__$1,new cljs.core.Keyword(null,\"native\",\"native\",-613060878));\ntry{var G__64593 = outer_query;\nvar G__64593__$1 = (cljs.core.truth_(source_metadata)?metabase.mbql.normalize.move_source_metadata_to_mbql_query(G__64593):G__64593);\nvar G__64593__$2 = (cljs.core.truth_(query)?cljs.core.update.cljs$core$IFn$_invoke$arity$3(G__64593__$1,new cljs.core.Keyword(null,\"query\",\"query\",-1288509510),metabase.mbql.normalize.canonicalize_inner_mbql_query):G__64593__$1);\nvar G__64593__$3 = (cljs.core.truth_(parameters)?cljs.core.update.cljs$core$IFn$_invoke$arity$3(G__64593__$2,new cljs.core.Keyword(null,\"parameters\",\"parameters\",-1229919748),cljs.core.partial.cljs$core$IFn$_invoke$arity$2(cljs.core.mapv,metabase.mbql.normalize.canonicalize_mbql_clauses)):G__64593__$2);\nvar G__64593__$4 = (cljs.core.truth_(native$)?cljs.core.update.cljs$core$IFn$_invoke$arity$3(G__64593__$3,new cljs.core.Keyword(null,\"native\",\"native\",-613060878),metabase.mbql.normalize.canonicalize_native_query):G__64593__$3);\nreturn metabase.mbql.normalize.canonicalize_mbql_clauses(G__64593__$4);\n\n}catch (e64592){if((e64592 instanceof Error)){\nvar e = e64592;\nthrow cljs.core.ex_info.cljs$core$IFn$_invoke$arity$3(metabase.shared.util.i18n.js_i18n.cljs$core$IFn$_invoke$arity$variadic(\"Error canonicalizing query: {0}\",cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([cljs.core.ex_message(e)], 0)),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"query\",\"query\",-1288509510),query], null),e);\n} else {\nthrow e64592;\n\n}\n}});\n/**\n * Remove any Fields specified in both `:breakout` and `:fields` from `:fields`; it is implied that any breakout Field\n *   will be returned, specifying it in both would imply it is to be returned twice, which tends to cause confusion for\n *   the QP and drivers. (This is done to work around historic bugs with the way queries were generated on the frontend;\n *   I'm not sure this behavior makes sense, but removing it would break existing queries.)\n * \n *   We will remove either exact matches:\n * \n *  {:breakout [[:field-id 10]], :fields [[:field-id 10]]} ; -> {:breakout [[:field-id 10]]}\n * \n *   or unbucketed matches:\n * \n *  {:breakout [[:datetime-field [:field-id 10] :month]], :fields [[:field-id 10]]}\n *  ;; -> {:breakout [[:field-id 10]]}\n */\nmetabase.mbql.normalize.remove_breakout_fields_from_fields = (function metabase$mbql$normalize$remove_breakout_fields_from_fields(p__64594){\nvar map__64595 = p__64594;\nvar map__64595__$1 = cljs.core.__destructure_map(map__64595);\nvar query = map__64595__$1;\nvar map__64596 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__64595__$1,new cljs.core.Keyword(null,\"query\",\"query\",-1288509510));\nvar map__64596__$1 = cljs.core.__destructure_map(map__64596);\nvar breakout = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__64596__$1,new cljs.core.Keyword(null,\"breakout\",\"breakout\",-732419050));\nvar fields = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__64596__$1,new cljs.core.Keyword(null,\"fields\",\"fields\",-1932066230));\nif((!(((cljs.core.seq(breakout)) && (cljs.core.seq(fields)))))){\nreturn query;\n} else {\nvar breakout_fields = cljs.core.set(cljs.core.reduce.cljs$core$IFn$_invoke$arity$2(cljs.core.concat,cljs.core.seq(cljs.core.filter.cljs$core$IFn$_invoke$arity$2(cljs.core.some_QMARK_,(function metabase$mbql$normalize$remove_breakout_fields_from_fields_$_match_64598(_AMPERSAND_parents,_AMPERSAND_match){\ntry{if(((cljs.core.vector_QMARK_(_AMPERSAND_match)) && ((cljs.core.count(_AMPERSAND_match) === 3)))){\ntry{var _AMPERSAND_match_0__64600 = cljs.core.nth.cljs$core$IFn$_invoke$arity$2(_AMPERSAND_match,(0));\nif(cljs.core.keyword_identical_QMARK_(_AMPERSAND_match_0__64600,new cljs.core.Keyword(null,\"field\",\"field\",-1302436500))){\nvar id_or_name = cljs.core.nth.cljs$core$IFn$_invoke$arity$2(_AMPERSAND_match,(1));\nvar opts = cljs.core.nth.cljs$core$IFn$_invoke$arity$2(_AMPERSAND_match,(2));\nreturn new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [_AMPERSAND_match,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"field\",\"field\",-1302436500),id_or_name,cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(opts,new cljs.core.Keyword(null,\"temporal-unit\",\"temporal-unit\",-1892306358))], null)], null)], null);\n} else {\nthrow cljs.core.match.backtrack;\n\n}\n}catch (e64604){if((e64604 instanceof Error)){\nvar e__46040__auto__ = e64604;\nif((e__46040__auto__ === cljs.core.match.backtrack)){\nthrow cljs.core.match.backtrack;\n} else {\nthrow e__46040__auto__;\n}\n} else {\nthrow e64604;\n\n}\n}} else {\nthrow cljs.core.match.backtrack;\n\n}\n}catch (e64603){if((e64603 instanceof Error)){\nvar e__46040__auto__ = e64603;\nif((e__46040__auto__ === cljs.core.match.backtrack)){\nreturn metabase.mbql.util.match.impl.match_in_collection(metabase$mbql$normalize$remove_breakout_fields_from_fields_$_match_64598,_AMPERSAND_parents,_AMPERSAND_match);\n} else {\nthrow e__46040__auto__;\n}\n} else {\nthrow e64603;\n\n}\n}})(cljs.core.PersistentVector.EMPTY,breakout)))));\nreturn cljs.core.update_in.cljs$core$IFn$_invoke$arity$3(query,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"query\",\"query\",-1288509510),new cljs.core.Keyword(null,\"fields\",\"fields\",-1932066230)], null),cljs.core.comp.cljs$core$IFn$_invoke$arity$2(cljs.core.vec,cljs.core.partial.cljs$core$IFn$_invoke$arity$2(cljs.core.remove,breakout_fields)));\n}\n});\n/**\n * Perform transformations that operate on the query as a whole, making sure the structure as a whole is logical and\n *   consistent.\n */\nmetabase.mbql.normalize.perform_whole_query_transformations = (function metabase$mbql$normalize$perform_whole_query_transformations(query){\ntry{return metabase.mbql.normalize.remove_breakout_fields_from_fields(query);\n}catch (e64605){if((e64605 instanceof Error)){\nvar e = e64605;\nthrow cljs.core.ex_info.cljs$core$IFn$_invoke$arity$3(metabase.shared.util.i18n.js_i18n(\"Error performing whole query transformations\"),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"query\",\"query\",-1288509510),query], null),e);\n} else {\nthrow e64605;\n\n}\n}});\nmetabase.mbql.normalize.remove_empty_clauses_in_map = (function metabase$mbql$normalize$remove_empty_clauses_in_map(m,path){\nvar m__$1 = cljs.core.into.cljs$core$IFn$_invoke$arity$2(cljs.core.empty(m),(function (){var iter__5523__auto__ = (function metabase$mbql$normalize$remove_empty_clauses_in_map_$_iter__64607(s__64608){\nreturn (new cljs.core.LazySeq(null,(function (){\nvar s__64608__$1 = s__64608;\nwhile(true){\nvar temp__5804__auto__ = cljs.core.seq(s__64608__$1);\nif(temp__5804__auto__){\nvar s__64608__$2 = temp__5804__auto__;\nif(cljs.core.chunked_seq_QMARK_(s__64608__$2)){\nvar c__5521__auto__ = cljs.core.chunk_first(s__64608__$2);\nvar size__5522__auto__ = cljs.core.count(c__5521__auto__);\nvar b__64610 = cljs.core.chunk_buffer(size__5522__auto__);\nif((function (){var i__64609 = (0);\nwhile(true){\nif((i__64609 < size__5522__auto__)){\nvar vec__64615 = cljs.core._nth(c__5521__auto__,i__64609);\nvar k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__64615,(0),null);\nvar v = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__64615,(1),null);\nvar v__$1 = (function (){var G__64618 = v;\nvar G__64619 = cljs.core.conj.cljs$core$IFn$_invoke$arity$2(path,k);\nreturn (metabase.mbql.normalize.remove_empty_clauses.cljs$core$IFn$_invoke$arity$2 ? metabase.mbql.normalize.remove_empty_clauses.cljs$core$IFn$_invoke$arity$2(G__64618,G__64619) : metabase.mbql.normalize.remove_empty_clauses.call(null,G__64618,G__64619));\n})();\nif((!((v__$1 == null)))){\ncljs.core.chunk_append(b__64610,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [k,v__$1], null));\n\nvar G__64879 = (i__64609 + (1));\ni__64609 = G__64879;\ncontinue;\n} else {\nvar G__64880 = (i__64609 + (1));\ni__64609 = G__64880;\ncontinue;\n}\n} else {\nreturn true;\n}\nbreak;\n}\n})()){\nreturn cljs.core.chunk_cons(cljs.core.chunk(b__64610),metabase$mbql$normalize$remove_empty_clauses_in_map_$_iter__64607(cljs.core.chunk_rest(s__64608__$2)));\n} else {\nreturn cljs.core.chunk_cons(cljs.core.chunk(b__64610),null);\n}\n} else {\nvar vec__64620 = cljs.core.first(s__64608__$2);\nvar k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__64620,(0),null);\nvar v = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__64620,(1),null);\nvar v__$1 = (function (){var G__64623 = v;\nvar G__64624 = cljs.core.conj.cljs$core$IFn$_invoke$arity$2(path,k);\nreturn (metabase.mbql.normalize.remove_empty_clauses.cljs$core$IFn$_invoke$arity$2 ? metabase.mbql.normalize.remove_empty_clauses.cljs$core$IFn$_invoke$arity$2(G__64623,G__64624) : metabase.mbql.normalize.remove_empty_clauses.call(null,G__64623,G__64624));\n})();\nif((!((v__$1 == null)))){\nreturn cljs.core.cons(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [k,v__$1], null),metabase$mbql$normalize$remove_empty_clauses_in_map_$_iter__64607(cljs.core.rest(s__64608__$2)));\n} else {\nvar G__64881 = cljs.core.rest(s__64608__$2);\ns__64608__$1 = G__64881;\ncontinue;\n}\n}\n} else {\nreturn null;\n}\nbreak;\n}\n}),null,null));\n});\nreturn iter__5523__auto__(m);\n})());\nif(cljs.core.seq(m__$1)){\nreturn m__$1;\n} else {\nreturn null;\n}\n});\nmetabase.mbql.normalize.remove_empty_clauses_in_sequence = (function metabase$mbql$normalize$remove_empty_clauses_in_sequence(xs,path){\nvar xs__$1 = cljs.core.mapv.cljs$core$IFn$_invoke$arity$2((function (p1__64625_SHARP_){\nvar G__64626 = p1__64625_SHARP_;\nvar G__64627 = cljs.core.conj.cljs$core$IFn$_invoke$arity$2(path,new cljs.core.Keyword(\"metabase.mbql.normalize\",\"sequence\",\"metabase.mbql.normalize/sequence\",-1700645683));\nreturn (metabase.mbql.normalize.remove_empty_clauses.cljs$core$IFn$_invoke$arity$2 ? metabase.mbql.normalize.remove_empty_clauses.cljs$core$IFn$_invoke$arity$2(G__64626,G__64627) : metabase.mbql.normalize.remove_empty_clauses.call(null,G__64626,G__64627));\n}),xs);\nif(cljs.core.truth_(cljs.core.some(cljs.core.some_QMARK_,xs__$1))){\nreturn xs__$1;\n} else {\nreturn null;\n}\n});\nmetabase.mbql.normalize.remove_empty_clauses_in_join = (function metabase$mbql$normalize$remove_empty_clauses_in_join(join){\nvar G__64628 = join;\nvar G__64629 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"query\",\"query\",-1288509510)], null);\nreturn (metabase.mbql.normalize.remove_empty_clauses.cljs$core$IFn$_invoke$arity$2 ? metabase.mbql.normalize.remove_empty_clauses.cljs$core$IFn$_invoke$arity$2(G__64628,G__64629) : metabase.mbql.normalize.remove_empty_clauses.call(null,G__64628,G__64629));\n});\nmetabase.mbql.normalize.remove_empty_clauses_in_source_query = (function metabase$mbql$normalize$remove_empty_clauses_in_source_query(p__64630){\nvar map__64631 = p__64630;\nvar map__64631__$1 = cljs.core.__destructure_map(map__64631);\nvar source_query = map__64631__$1;\nvar native_QMARK_ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__64631__$1,new cljs.core.Keyword(null,\"native\",\"native\",-613060878));\nif(cljs.core.truth_(native_QMARK_)){\nreturn clojure.set.rename_keys((function (){var G__64632 = clojure.set.rename_keys(source_query,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"native\",\"native\",-613060878),new cljs.core.Keyword(null,\"query\",\"query\",-1288509510)], null));\nvar G__64633 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"native\",\"native\",-613060878)], null);\nreturn (metabase.mbql.normalize.remove_empty_clauses.cljs$core$IFn$_invoke$arity$2 ? metabase.mbql.normalize.remove_empty_clauses.cljs$core$IFn$_invoke$arity$2(G__64632,G__64633) : metabase.mbql.normalize.remove_empty_clauses.call(null,G__64632,G__64633));\n})(),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"query\",\"query\",-1288509510),new cljs.core.Keyword(null,\"native\",\"native\",-613060878)], null));\n} else {\nvar G__64634 = source_query;\nvar G__64635 = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"query\",\"query\",-1288509510)], null);\nreturn (metabase.mbql.normalize.remove_empty_clauses.cljs$core$IFn$_invoke$arity$2 ? metabase.mbql.normalize.remove_empty_clauses.cljs$core$IFn$_invoke$arity$2(G__64634,G__64635) : metabase.mbql.normalize.remove_empty_clauses.call(null,G__64634,G__64635));\n}\n});\nmetabase.mbql.normalize.path__GT_special_remove_empty_clauses_fn = new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null,\"native\",\"native\",-613060878),cljs.core.identity,new cljs.core.Keyword(null,\"query\",\"query\",-1288509510),new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"source-query\",\"source-query\",198004422),metabase.mbql.normalize.remove_empty_clauses_in_source_query,new cljs.core.Keyword(null,\"joins\",\"joins\",1033962699),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(\"metabase.mbql.normalize\",\"sequence\",\"metabase.mbql.normalize/sequence\",-1700645683),metabase.mbql.normalize.remove_empty_clauses_in_join], null)], null),new cljs.core.Keyword(null,\"viz-settings\",\"viz-settings\",256055379),cljs.core.identity], null);\n/**\n * Remove any empty or `nil` clauses in a query.\n */\nmetabase.mbql.normalize.remove_empty_clauses = (function metabase$mbql$normalize$remove_empty_clauses(var_args){\nvar G__64638 = arguments.length;\nswitch (G__64638) {\ncase 1:\nreturn metabase.mbql.normalize.remove_empty_clauses.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\n\nbreak;\ncase 2:\nreturn metabase.mbql.normalize.remove_empty_clauses.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\n(metabase.mbql.normalize.remove_empty_clauses.cljs$core$IFn$_invoke$arity$1 = (function (query){\nreturn metabase.mbql.normalize.remove_empty_clauses.cljs$core$IFn$_invoke$arity$2(query,cljs.core.PersistentVector.EMPTY);\n}));\n\n(metabase.mbql.normalize.remove_empty_clauses.cljs$core$IFn$_invoke$arity$2 = (function (x,path){\ntry{var special_fn = ((cljs.core.seq(path))?cljs.core.get_in.cljs$core$IFn$_invoke$arity$2(metabase.mbql.normalize.path__GT_special_remove_empty_clauses_fn,path):null);\nif(cljs.core.fn_QMARK_(special_fn)){\nreturn (special_fn.cljs$core$IFn$_invoke$arity$1 ? special_fn.cljs$core$IFn$_invoke$arity$1(x) : special_fn.call(null,x));\n} else {\nif(cljs.core.record_QMARK_(x)){\nreturn x;\n} else {\nif(cljs.core.map_QMARK_(x)){\nreturn metabase.mbql.normalize.remove_empty_clauses_in_map(x,path);\n} else {\nif(cljs.core.sequential_QMARK_(x)){\nreturn metabase.mbql.normalize.remove_empty_clauses_in_sequence(x,path);\n} else {\nreturn x;\n\n}\n}\n}\n}\n}catch (e64640){if((e64640 instanceof Error)){\nvar e = e64640;\nthrow cljs.core.ex_info.cljs$core$IFn$_invoke$arity$3(\"Error removing empty clauses from form.\",new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"form\",\"form\",-1624062471),x,new cljs.core.Keyword(null,\"path\",\"path\",-188191168),path], null),e);\n} else {\nthrow e64640;\n\n}\n}}));\n\n(metabase.mbql.normalize.remove_empty_clauses.cljs$lang$maxFixedArity = 2);\n\n/**\n * Normalize the tokens in a Dashboard query (i.e., make them all `lisp-case` keywords), rewrite deprecated clauses as\n *   up-to-date MBQL 2000, and remove empty clauses.\n */\nmetabase.mbql.normalize.normalize = (function (){var normalize_STAR_ = cljs.core.comp.cljs$core$IFn$_invoke$arity$variadic(metabase.mbql.normalize.remove_empty_clauses,metabase.mbql.normalize.perform_whole_query_transformations,metabase.mbql.normalize.canonicalize,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([metabase.mbql.normalize.normalize_tokens], 0));\nreturn (function (query){\ntry{return normalize_STAR_(query);\n}catch (e64642){if((e64642 instanceof Error)){\nvar e = e64642;\nthrow cljs.core.ex_info.cljs$core$IFn$_invoke$arity$3(metabase.shared.util.i18n.js_i18n.cljs$core$IFn$_invoke$arity$variadic(\"Error normalizing query: {0}\",cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([cljs.core.ex_message(e)], 0)),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"query\",\"query\",-1288509510),query], null),e);\n} else {\nthrow e64642;\n\n}\n}});\n})();\n/**\n * Normalize just a specific fragment of a query, such as just the inner MBQL part or just a filter clause. `path` is\n *   where this fragment would normally live in a full query.\n * \n *  (normalize-fragment [:query :filter] [\"=\" 100 200])\n *  ;;-> [:= [:field-id 100] 200]\n */\nmetabase.mbql.normalize.normalize_fragment = (function metabase$mbql$normalize$normalize_fragment(path,x){\nif(cljs.core.not(cljs.core.seq(path))){\nreturn metabase.mbql.normalize.normalize(x);\n} else {\nreturn cljs.core.get.cljs$core$IFn$_invoke$arity$2((function (){var G__64647 = cljs.core.butlast(path);\nvar G__64648 = cljs.core.PersistentArrayMap.createAsIfByAssoc([cljs.core.last(path),x]);\nreturn (metabase.mbql.normalize.normalize_fragment.cljs$core$IFn$_invoke$arity$2 ? metabase.mbql.normalize.normalize_fragment.cljs$core$IFn$_invoke$arity$2(G__64647,G__64648) : metabase.mbql.normalize.normalize_fragment.call(null,G__64647,G__64648));\n})(),cljs.core.last(path));\n}\n});\n","~:ns-info",["^ ","~:rename-macros",null,"~:renames",["^ "],"~:meta",["^ ","~:doc","Logic for taking any sort of weird MBQL query and normalizing it into a standardized, canonical form. You can think\n  of this like taking any 'valid' MBQL query and rewriting it as-if it was written in perfect up-to-date MBQL in the\n  latest version. There are four main things done here, done as four separate steps:\n\n  #### NORMALIZING TOKENS\n\n  Converting all identifiers to lower-case, lisp-case keywords. e.g. `{\"SOURCE_TABLE\" 10}` becomes `{:source-table\n  10}`.\n\n  #### CANONICALIZING THE QUERY\n\n  Rewriting deprecated MBQL 95/98 syntax and other things that are still supported for backwards-compatibility in\n  canonical modern MBQL syntax. For example `{:breakout [:count 10]}` becomes `{:breakout [[:count [:field 10 nil]]]}`.\n\n  #### WHOLE-QUERY TRANSFORMATIONS\n\n  Transformations and cleanup of the query structure as a whole to fix inconsistencies. Whereas the canonicalization\n  phase operates on a lower-level, transforming invidual clauses, this phase focuses on transformations that affect\n  multiple clauses, such as removing duplicate references to Fields if they are specified in both the `:breakout` and\n  `:fields` clauses.\n\n  This is not the only place that does such transformations; several pieces of QP middleware perform similar\n  individual transformations, such as `reconcile-breakout-and-order-by-bucketing`.\n\n  #### REMOVING EMPTY CLAUSES\n\n  Removing empty clauses like `{:aggregation nil}` or `{:breakout []}`.\n\n  Token normalization occurs first, followed by canonicalization, followed by removing empty clauses.","~:file","metabase/mbql/normalize.cljc","~:line",1,"~:column",5,"~:end-line",1,"~:end-column",28],"~:ns-aliases",["^ ","~$cljs.loader","~$shadow.loader","~$clojure.core","~$cljs.core","~$clojure.spec.gen.alpha","~$cljs.spec.gen.alpha","~$clojure.pprint","~$cljs.pprint","~$clojure.core.match","~$cljs.core.match"],"~:use-macros",null,"~:excludes",["~#set",[]],"~:name","~$metabase.mbql.normalize","~:reader-aliases",["^ "],"~:op","~:ns","~:imports",null,"~:requires",["^ ","~$set","~$clojure.set","~$log","~$metabase.util.log","~$i18n","~$metabase.shared.util.i18n","~$metabase.mbql.util.match","^W","~$mbql.match","^W","~$metabase.mbql.util","^Y","~$mbql.u","^Y","^@","^@","~$goog","^[","~$walk","~$clojure.walk","^R","^R","~$m","~$medley.core","^V","^V","^T","^T","^11","^11","^12","^12"],"~:seen",["^I",["~:require"]],"~:uses",null,"~:require-macros",["^ ","^@","^@","^S","^T","^U","^V","^W","^W","^X","^W","^V","^V","^T","^T"],"~:form",["~#list",["~$ns","^K","Logic for taking any sort of weird MBQL query and normalizing it into a standardized, canonical form. You can think\n  of this like taking any 'valid' MBQL query and rewriting it as-if it was written in perfect up-to-date MBQL in the\n  latest version. There are four main things done here, done as four separate steps:\n\n  #### NORMALIZING TOKENS\n\n  Converting all identifiers to lower-case, lisp-case keywords. e.g. `{\"SOURCE_TABLE\" 10}` becomes `{:source-table\n  10}`.\n\n  #### CANONICALIZING THE QUERY\n\n  Rewriting deprecated MBQL 95/98 syntax and other things that are still supported for backwards-compatibility in\n  canonical modern MBQL syntax. For example `{:breakout [:count 10]}` becomes `{:breakout [[:count [:field 10 nil]]]}`.\n\n  #### WHOLE-QUERY TRANSFORMATIONS\n\n  Transformations and cleanup of the query structure as a whole to fix inconsistencies. Whereas the canonicalization\n  phase operates on a lower-level, transforming invidual clauses, this phase focuses on transformations that affect\n  multiple clauses, such as removing duplicate references to Fields if they are specified in both the `:breakout` and\n  `:fields` clauses.\n\n  This is not the only place that does such transformations; several pieces of QP middleware perform similar\n  individual transformations, such as `reconcile-breakout-and-order-by-bucketing`.\n\n  #### REMOVING EMPTY CLAUSES\n\n  Removing empty clauses like `{:aggregation nil}` or `{:breakout []}`.\n\n  Token normalization occurs first, followed by canonicalization, followed by removing empty clauses.",["^18",["^14",["^R","~:as","^Q"],["^11","^1:","^10"],["^12","^1:","~$m"],["^Y","^1:","^Z"],["^W","^1:","^X"],["^V","^1:","^U"],["^T","^1:","^S"]]]]],"~:flags",["^ ","^14",["^I",[]]],"~:js-deps",["^ "],"~:deps",["^[","^@","^R","^11","^12","^Y","^W","^V","^T"]],"^N","^K","~:resource-id",["~:shadow.build.classpath/resource","metabase/mbql/normalize.cljc"],"~:compiled-at",1692612548092,"^L",["^ ","^Q","^R","^S","^T","^U","^V","^W","^W","^X","^W","^Y","^Y","^Z","^Y","^@","^@","^[","^[","^10","^11","^R","^R","~$m","^12","^V","^V","^T","^T","^11","^11","^12","^12"],"~:resource-name","metabase/mbql/normalize.cljc","~:warnings",[],"~:source","(ns metabase.mbql.normalize\n  \"Logic for taking any sort of weird MBQL query and normalizing it into a standardized, canonical form. You can think\n  of this like taking any 'valid' MBQL query and rewriting it as-if it was written in perfect up-to-date MBQL in the\n  latest version. There are four main things done here, done as four separate steps:\n\n  #### NORMALIZING TOKENS\n\n  Converting all identifiers to lower-case, lisp-case keywords. e.g. `{\\\"SOURCE_TABLE\\\" 10}` becomes `{:source-table\n  10}`.\n\n  #### CANONICALIZING THE QUERY\n\n  Rewriting deprecated MBQL 95/98 syntax and other things that are still supported for backwards-compatibility in\n  canonical modern MBQL syntax. For example `{:breakout [:count 10]}` becomes `{:breakout [[:count [:field 10 nil]]]}`.\n\n  #### WHOLE-QUERY TRANSFORMATIONS\n\n  Transformations and cleanup of the query structure as a whole to fix inconsistencies. Whereas the canonicalization\n  phase operates on a lower-level, transforming invidual clauses, this phase focuses on transformations that affect\n  multiple clauses, such as removing duplicate references to Fields if they are specified in both the `:breakout` and\n  `:fields` clauses.\n\n  This is not the only place that does such transformations; several pieces of QP middleware perform similar\n  individual transformations, such as `reconcile-breakout-and-order-by-bucketing`.\n\n  #### REMOVING EMPTY CLAUSES\n\n  Removing empty clauses like `{:aggregation nil}` or `{:breakout []}`.\n\n  Token normalization occurs first, followed by canonicalization, followed by removing empty clauses.\"\n  (:require\n   [clojure.set :as set]\n   [clojure.walk :as walk]\n   [medley.core :as m]\n   [metabase.mbql.util :as mbql.u]\n   [metabase.mbql.util.match :as mbql.match]\n   [metabase.shared.util.i18n :as i18n]\n   [metabase.util.log :as log]))\n\n(defn- mbql-clause?\n  \"True if `x` is an MBQL clause (a sequence with a token as its first arg). (This is different from the implementation\n  in `mbql.u` because it also supports un-normalized clauses. You shouldn't need to use this outside of this\n  namespace.)\"\n  [x]\n  (and (sequential? x)\n       (not (map-entry? x))\n       ((some-fn keyword? string?) (first x))))\n\n(defn- maybe-normalize-token\n  \"Normalize token `x`, but only if it's a keyword or string.\"\n  [x]\n  (if ((some-fn keyword? string?) x)\n    (mbql.u/normalize-token x)\n    x))\n\n(defn is-clause?\n  \"If `x` an MBQL clause, and an instance of clauses defined by keyword(s) `k-or-ks`?\n\n    (is-clause? :count [:count 10])        ; -> true\n    (is-clause? #{:+ :- :* :/} [:+ 10 20]) ; -> true\n\n  (This is different from the implementation in `mbql.u` because it also supports un-normalized clauses. You shouldn't\n  need to use this outside of this namespace.)\"\n  [k-or-ks x]\n  (and\n   (mbql-clause? x)\n   (let [clause-name (maybe-normalize-token (first x))]\n     (if (coll? k-or-ks)\n       ((set k-or-ks) clause-name)\n       (= k-or-ks clause-name)))))\n\n\n;;; +----------------------------------------------------------------------------------------------------------------+\n;;; |                                                NORMALIZE TOKENS                                                |\n;;; +----------------------------------------------------------------------------------------------------------------+\n\n(declare normalize-tokens)\n\n(defmulti ^:private normalize-mbql-clause-tokens\n  (comp maybe-normalize-token first))\n\n(defmethod normalize-mbql-clause-tokens :aggregation\n  ;; nil options should be removed from aggregation references (`[:aggregation 0]`).\n  [[_ aggregation-index option]]\n  (cond-> [:aggregation aggregation-index]\n    (some? option) (conj option)))\n\n(defmethod normalize-mbql-clause-tokens :expression\n  ;; For expression references (`[:expression \\\"my_expression\\\"]`) keep the arg as is but make sure it is a string.\n  [[_ expression-name]]\n  [:expression (if (keyword? expression-name)\n                 (mbql.u/qualified-name expression-name)\n                 expression-name)])\n\n(defmethod normalize-mbql-clause-tokens :binning-strategy\n  ;; For `:binning-strategy` clauses (which wrap other Field clauses) normalize the strategy-name and recursively\n  ;; normalize the Field it bins.\n  [[_ field strategy-name strategy-param]]\n  (if strategy-param\n    (conj (normalize-mbql-clause-tokens [:binning-strategy field strategy-name]) strategy-param)\n    [:binning-strategy (normalize-tokens field :ignore-path) (maybe-normalize-token strategy-name)]))\n\n(defmethod normalize-mbql-clause-tokens :field\n  [[_ id-or-name opts]]\n  (let [opts (normalize-tokens opts :ignore-path)]\n    [:field\n     id-or-name\n     (cond-> opts\n       (:base-type opts)     (update :base-type keyword)\n       (:temporal-unit opts) (update :temporal-unit keyword)\n       (:binning opts)       (update :binning (fn [binning]\n                                                (cond-> binning\n                                                  (:strategy binning) (update :strategy keyword)))))]))\n\n(defmethod normalize-mbql-clause-tokens :field-literal\n  ;; Similarly, for Field literals, keep the arg as-is, but make sure it is a string.\"\n  [[_ field-name field-type]]\n  [:field-literal\n   (if (keyword? field-name)\n     (mbql.u/qualified-name field-name)\n     field-name)\n   (keyword field-type)])\n\n(defmethod normalize-mbql-clause-tokens :datetime-field\n  ;; Datetime fields look like `[:datetime-field <field> <unit>]` or `[:datetime-field <field> :as <unit>]`\n  ;; normalize the unit, and `:as` (if present) tokens, and the Field.\"\n  [[_ field as-or-unit maybe-unit]]\n  (if maybe-unit\n    [:datetime-field (normalize-tokens field :ignore-path) :as (maybe-normalize-token maybe-unit)]\n    [:datetime-field (normalize-tokens field :ignore-path) (maybe-normalize-token as-or-unit)]))\n\n(defmethod normalize-mbql-clause-tokens :time-interval\n  ;; `time-interval`'s `unit` should get normalized, and `amount` if it's not an integer.\"\n  [[_ field amount unit options]]\n  (if options\n    (conj (normalize-mbql-clause-tokens [:time-interval field amount unit])\n          (normalize-tokens options :ignore-path))\n    [:time-interval\n     (normalize-tokens field :ignore-path)\n     (if (integer? amount)\n       amount\n       (maybe-normalize-token amount))\n     (maybe-normalize-token unit)]))\n\n(defmethod normalize-mbql-clause-tokens :relative-datetime\n  ;; Normalize a `relative-datetime` clause. `relative-datetime` comes in two flavors:\n  ;;\n  ;;   [:relative-datetime :current]\n  ;;   [:relative-datetime -10 :day] ; amount & unit\"\n  [[_ amount unit]]\n  (if unit\n    [:relative-datetime amount (maybe-normalize-token unit)]\n    [:relative-datetime :current]))\n\n(defmethod normalize-mbql-clause-tokens :interval\n  [[_ amount unit]]\n  [:interval amount (maybe-normalize-token unit)])\n\n(defmethod normalize-mbql-clause-tokens :datetime-add\n  [[_ field amount unit]]\n  [:datetime-add (normalize-tokens field :ignore-path) amount (maybe-normalize-token unit)])\n\n(defmethod normalize-mbql-clause-tokens :datetime-subtract\n  [[_ field amount unit]]\n  [:datetime-subtract (normalize-tokens field :ignore-path) amount (maybe-normalize-token unit)])\n\n(defmethod normalize-mbql-clause-tokens :get-week\n  [[_ field mode]]\n  (if mode\n    [:get-week (normalize-tokens field :ignore-path) (maybe-normalize-token mode)]\n    [:get-week (normalize-tokens field :ignore-path)]))\n\n(defmethod normalize-mbql-clause-tokens :temporal-extract\n  [[_ field unit mode]]\n  (if mode\n    [:temporal-extract (normalize-tokens field :ignore-path) (maybe-normalize-token unit) (maybe-normalize-token mode)]\n    [:temporal-extract (normalize-tokens field :ignore-path) (maybe-normalize-token unit)]))\n\n(defmethod normalize-mbql-clause-tokens :datetime-diff\n  [[_ x y unit]]\n  [:datetime-diff\n   (normalize-tokens x :ignore-path)\n   (normalize-tokens y :ignore-path)\n   (maybe-normalize-token unit)])\n\n(defmethod normalize-mbql-clause-tokens :value\n  ;; The args of a `value` clause shouldn't be normalized.\n  ;; See https://github.com/metabase/metabase/issues/23354 for details\n  [[_ value info]]\n  [:value value info])\n\n(defmethod normalize-mbql-clause-tokens :default\n  ;; MBQL clauses by default are recursively normalized.\n  ;; This includes the clause name (e.g. `[\\\"COUNT\\\" ...]` becomes `[:count ...]`) and args.\n  [[clause-name & args]]\n  (into [(maybe-normalize-token clause-name)] (map #(normalize-tokens % :ignore-path)) args))\n\n(defn- aggregation-subclause?\n  [x]\n  (or (when ((some-fn keyword? string?) x)\n        (#{:avg :count :cum-count :distinct :stddev :sum :min :max :+ :- :/ :*\n           :sum-where :count-where :share :var :median :percentile}\n         (maybe-normalize-token x)))\n      (when (mbql-clause? x)\n        (aggregation-subclause? (first x)))))\n\n(defn- normalize-ag-clause-tokens\n  \"For old-style aggregations like `{:aggregation :count}` make sure we normalize the ag type (`:count`). Other wacky\n  clauses like `{:aggregation [:count :count]}` need to be handled as well :(\"\n  [ag-clause]\n  (cond\n    ;; something like {:aggregations :count}\n    ((some-fn keyword? string?) ag-clause)\n    (maybe-normalize-token ag-clause)\n\n    ;; named aggregation ([:named <ag> <name>])\n    (is-clause? :named ag-clause)\n    (let [[_ wrapped-ag & more] ag-clause]\n      (into [:named (normalize-ag-clause-tokens wrapped-ag)] more))\n\n    ;; something wack like {:aggregations [:count [:sum 10]]} or {:aggregations [:count :count]}\n    (when (mbql-clause? ag-clause)\n      (aggregation-subclause? (second ag-clause)))\n    (mapv normalize-ag-clause-tokens ag-clause)\n\n    :else\n    (normalize-tokens ag-clause :ignore-path)))\n\n(defn- normalize-expressions-tokens\n  \"For expressions, we don't want to normalize the name of the expression; keep that as is, and make it a string;\n   normalize the definitions as normal.\"\n  [expressions-clause]\n  (into {} (for [[expression-name definition] expressions-clause]\n             [(mbql.u/qualified-name expression-name)\n              (normalize-tokens definition :ignore-path)])))\n\n(defn- normalize-order-by-tokens\n  \"Normalize tokens in the order-by clause, which can have different syntax when using MBQL 95 or 98\n  rules (`[<field> :asc]` vs `[:asc <field>]`, for example).\"\n  [clauses]\n  (vec (for [subclause clauses]\n         (if (mbql-clause? subclause)\n           ;; MBQL 98+ [direction field] style: normalize as normal\n           (normalize-mbql-clause-tokens subclause)\n           ;; otherwise it's MBQL 95 [field direction] style: flip the args and *then* normalize the clause. And then\n           ;; flip it back to put it back the way we found it.\n           (reverse (normalize-mbql-clause-tokens (reverse subclause)))))))\n\n(defn- template-tag-definition-key->transform-fn\n  \"Get the function that should be used to transform values for normalized key `k` in a template tag definition.\"\n  [k]\n  (get {:default     identity\n        :type        maybe-normalize-token\n        :widget-type maybe-normalize-token}\n       k\n       ;; if there's not a special transform function for the key in the map above, just wrap the key-value\n       ;; pair in a dummy map and let [[normalize-tokens]] take care of it. Then unwrap\n       (fn [v]\n         (-> (normalize-tokens {k v} :ignore-path)\n             (get k)))))\n\n(defn- normalize-template-tag-definition\n  \"For a template tag definition, normalize all the keys appropriately.\"\n  [tag-definition]\n  (let [tag-def (into\n                 {}\n                 (map (fn [[k v]]\n                        (let [k            (maybe-normalize-token k)\n                              transform-fn (template-tag-definition-key->transform-fn k)]\n                          [k (transform-fn v)])))\n                 tag-definition)]\n    ;; `:widget-type` is a required key for Field Filter (dimension) template tags -- see\n    ;; [[metabase.mbql.schema/TemplateTag:FieldFilter]] -- but prior to v42 it wasn't usually included by the\n    ;; frontend. See #20643. If it's not present, just add in `:category` which will make things work they way they\n    ;; did in the past.\n    (cond-> tag-def\n      (and (= (:type tag-def) :dimension)\n           (not (:widget-type tag-def)))\n      (assoc :widget-type :category))))\n\n(defn- normalize-template-tags\n  \"Normalize native-query template tags. Like `expressions` we want to preserve the original name rather than normalize\n  it.\"\n  [template-tags]\n  (into\n   {}\n   (map (fn [[tag-name tag-definition]]\n          (let [tag-name (mbql.u/qualified-name tag-name)]\n            [tag-name\n             (-> (normalize-template-tag-definition tag-definition)\n                 (assoc :name tag-name))])))\n   template-tags))\n\n(defn normalize-query-parameter\n  \"Normalize a parameter in the query `:parameters` list.\"\n  [{:keys [type target id values_source_config], :as param}]\n  (cond-> param\n    id                   (update :id mbql.u/qualified-name)\n    ;; some things that get ran thru here, like dashcard param targets, do not have :type\n    type                 (update :type maybe-normalize-token)\n    target               (update :target #(normalize-tokens % :ignore-path))\n    values_source_config (update-in [:values_source_config :label_field] #(normalize-tokens % :ignore-path))\n    values_source_config (update-in [:values_source_config :value_field] #(normalize-tokens % :ignore-path))))\n\n(defn- normalize-source-query [source-query]\n  (let [{native? :native, :as source-query} (m/map-keys maybe-normalize-token source-query)]\n    (if native?\n      (-> source-query\n          (set/rename-keys {:native :query})\n          (normalize-tokens [:native])\n          (set/rename-keys {:query :native}))\n      (normalize-tokens source-query [:query]))))\n\n(defn- normalize-join [join]\n  ;; path in call to `normalize-tokens` is [:query] so it will normalize `:source-query` as appropriate\n  (let [{:keys [strategy fields alias], :as join} (normalize-tokens join :query)]\n    (cond-> join\n      strategy\n      (update :strategy maybe-normalize-token)\n\n      ((some-fn keyword? string?) fields)\n      (update :fields maybe-normalize-token)\n\n      alias\n      (update :alias mbql.u/qualified-name))))\n\n(declare canonicalize-mbql-clauses)\n\n(defn normalize-source-metadata\n  \"Normalize source/results metadata for a single column.\"\n  [metadata]\n  {:pre [(map? metadata)]}\n  (-> (reduce #(m/update-existing %1 %2 keyword) metadata [:base_type :effective_type :semantic_type :visibility_type :source :unit])\n      (m/update-existing :field_ref (comp canonicalize-mbql-clauses normalize-tokens))\n      (m/update-existing :fingerprint walk/keywordize-keys)))\n\n(defn- normalize-native-query\n  \"For native queries, normalize the top-level keys, and template tags, but nothing else.\"\n  [native-query]\n  (let [native-query (m/map-keys maybe-normalize-token native-query)]\n    (cond-> native-query\n      (seq (:template-tags native-query)) (update :template-tags normalize-template-tags))))\n\n;; TODO - why not make this a multimethod of some sort?\n(def ^:private path->special-token-normalization-fn\n  \"Map of special functions that should be used to perform token normalization for a given path. For example, the\n  `:expressions` key in an MBQL query should preserve the case of the expression names; this custom behavior is\n  defined below.\"\n  {:type            maybe-normalize-token\n   ;; don't normalize native queries\n   :native          normalize-native-query\n   :query           {:aggregation     normalize-ag-clause-tokens\n                     :expressions     normalize-expressions-tokens\n                     :order-by        normalize-order-by-tokens\n                     :source-query    normalize-source-query\n                     :source-metadata {::sequence normalize-source-metadata}\n                     :joins           {::sequence normalize-join}}\n   ;; we smuggle metadata for datasets and want to preserve their \"database\" form vs a normalized form so it matches\n   ;; the style in annotate.clj\n   :info            {:metadata/dataset-metadata identity}\n   :parameters      {::sequence normalize-query-parameter}\n   :context         #(some-> % maybe-normalize-token)\n   :source-metadata {::sequence normalize-source-metadata}\n   :viz-settings    maybe-normalize-token})\n\n(defn normalize-tokens\n  \"Recursively normalize tokens in `x`.\n\n  Every time this function recurses (thru a map value) it adds a new (normalized) key to key path, e.g. `path` will be\n  `[:query :order-by]` when we're in the MBQL order-by clause. If we need to handle these top-level clauses in special\n  ways add a function to `path->special-token-normalization-fn` above.\n\n  In some cases, dealing with the path isn't desirable, but we don't want to accidentally trigger normalization\n  functions (such as accidentally normalizing the `:type` key in something other than the top-level of the query), so\n  by convention please pass `:ignore-path` to avoid accidentally triggering path functions.\"\n  [x & [path]]\n  (let [path       (if (keyword? path)\n                     [path]\n                     (vec path))\n        special-fn (when (seq path)\n                     (get-in path->special-token-normalization-fn path))]\n    (try\n      (cond\n        (fn? special-fn)\n        (special-fn x)\n\n        ;; Skip record types because this query is an `expanded` query, which is not going to play nice here. Hopefully we\n        ;; can remove expanded queries entirely soon.\n        (record? x)\n        x\n\n        ;; maps should just get the keys normalized and then recursively call normalize-tokens on the values.\n        ;; Each recursive call appends to the keypath above so we can handle top-level clauses in a special way if needed\n        (map? x)\n        (into {} (for [[k v] x\n                       :let  [k (maybe-normalize-token k)]]\n                   [k (normalize-tokens v (conj (vec path) k))]))\n\n        ;; MBQL clauses handled above because of special cases\n        (mbql-clause? x)\n        (normalize-mbql-clause-tokens x)\n\n        ;; for non-mbql sequential collections (probably something like the subclauses of :order-by or something like\n        ;; that) recurse on all the args.\n        ;;\n        ;; To signify that we're recursing into a sequential collection, this appends `::sequence` to path\n        (sequential? x)\n        (mapv #(normalize-tokens % (conj (vec path) ::sequence)) x)\n\n        :else\n        x)\n      (catch #?(:clj Throwable :cljs js/Error) e\n        (throw (ex-info (i18n/tru \"Error normalizing form: {0}\" (ex-message e))\n                        {:form x, :path path, :special-fn special-fn}\n                        e))))))\n\n\n;;; +----------------------------------------------------------------------------------------------------------------+\n;;; |                                                  CANONICALIZE                                                  |\n;;; +----------------------------------------------------------------------------------------------------------------+\n\n(defn- wrap-implicit-field-id\n  \"Wrap raw integer Field IDs (i.e., those in an implicit 'field' position) in a `:field` clause if they're not\n  already. Done for MBQL 95 backwards-compatibility. e.g.:\n\n    {:filter [:= 10 20]} ; -> {:filter [:= [:field 10 nil] 20]}\"\n  [field]\n  (if (integer? field)\n    [:field field nil]\n    field))\n\n(defmulti ^:private canonicalize-mbql-clause\n  {:arglists '([clause])}\n  (fn [clause]\n    (when (mbql-clause? clause)\n      (first clause))))\n\n(defmethod canonicalize-mbql-clause :default\n  [clause]\n  clause)\n\n(defn- canonicalize-implicit-field-id\n  \"If `clause` is a raw integer ID wrap it in a `:field` clause. Either way, canonicalize the resulting clause.\"\n  [clause]\n  (canonicalize-mbql-clause (wrap-implicit-field-id clause)))\n\n(defmethod canonicalize-mbql-clause :field\n  [[_ id-or-name opts]]\n  (if (is-clause? :field id-or-name)\n    (let [[_ nested-id-or-name nested-opts] id-or-name]\n      (canonicalize-mbql-clause [:field nested-id-or-name (not-empty (merge nested-opts opts))]))\n    ;; remove empty stuff from the options map. The `remove-empty-clauses` step will further remove empty stuff\n    ;; afterwards\n    [:field id-or-name (not-empty opts)]))\n\n(defmethod canonicalize-mbql-clause :aggregation\n  [[_tag index opts]]\n  (if (empty? opts)\n    [:aggregation index]\n    [:aggregation index opts]))\n\n;;; legacy Field clauses\n\n(defmethod canonicalize-mbql-clause :field-id\n  [[_ id]]\n  ;; if someone is dumb and does something like [:field-id [:field-literal ...]] be nice and fix it for them.\n  (if (mbql-clause? id)\n    (canonicalize-mbql-clause id)\n    [:field id nil]))\n\n(defmethod canonicalize-mbql-clause :field-literal\n  [[_ field-name base-type]]\n  [:field field-name {:base-type base-type}])\n\n(defmethod canonicalize-mbql-clause :fk->\n  [[_ field-1 field-2]]\n  (let [[_ source _]       (canonicalize-implicit-field-id field-1)\n        [_ dest dest-opts] (canonicalize-implicit-field-id field-2)]\n    [:field dest (assoc dest-opts :source-field source)]))\n\n(defmethod canonicalize-mbql-clause :joined-field\n  [[_ join-alias field]]\n  (-> (canonicalize-implicit-field-id field)\n      (mbql.u/assoc-field-options :join-alias join-alias)))\n\n(defmethod canonicalize-mbql-clause :datetime-field\n  [clause]\n  (case (count clause)\n    3\n    (let [[_ field unit] clause]\n      (-> (canonicalize-implicit-field-id field)\n          (mbql.u/with-temporal-unit unit)))\n\n    4\n    (let [[_ field _ unit] clause]\n      (canonicalize-mbql-clause [:datetime-field field unit]))))\n\n(defmethod canonicalize-mbql-clause :binning-strategy\n  [[_ field strategy param binning-options]]\n  (let [[_ id-or-name opts] (canonicalize-implicit-field-id field)]\n    [:field\n     id-or-name\n     (assoc opts :binning (merge {:strategy strategy}\n                                 (when param\n                                   {strategy param})\n                                 binning-options))]))\n\n;;; filter clauses\n\n;; For `and`/`or`/`not` compound filters, recurse on the arg(s), then simplify the whole thing.\n(defn- canonicalize-compound-filter-clause [[filter-name & args]]\n  (mbql.u/simplify-compound-filter\n   (into [filter-name]\n         ;; we need to canonicalize any other mbql clauses that might show up in args here because\n         ;; simplify-compund-filter validates its output :(\n         (map canonicalize-mbql-clause args))))\n\n(doseq [clause-name [:and :or :not]]\n  (defmethod canonicalize-mbql-clause clause-name\n    [clause]\n    (canonicalize-compound-filter-clause clause)))\n\n(defmethod canonicalize-mbql-clause :inside\n  [[_ field-1 field-2 & coordinates]]\n  (into [:inside\n         (canonicalize-implicit-field-id field-1)\n         (canonicalize-implicit-field-id field-2)]\n        coordinates))\n\n(defmethod canonicalize-mbql-clause :time-interval\n  [[_ field & args]]\n  ;; if you specify a `:temporal-unit` for the Field inside a `:time-interval`, remove it. The unit in\n  ;; `:time-interval` takes precedence.\n  (let [field (cond-> (canonicalize-implicit-field-id field)\n                (mbql.u/is-clause? :field field) (mbql.u/update-field-options dissoc :temporal-unit))]\n    (into [:time-interval field] args)))\n\n;; all the other filter types have an implict field ID for the first arg\n;; (e.g. [:= 10 20] gets canonicalized to [:= [:field-id 10] 20]\n(defn- canonicalize-simple-filter-clause\n  [[filter-name first-arg & other-args]]\n  ;; Support legacy expressions like [:> 1 25] where 1 is a field id.\n  (into [filter-name (canonicalize-implicit-field-id first-arg)]\n        (map canonicalize-mbql-clause other-args)))\n\n(doseq [clause-name [:starts-with :ends-with :contains :does-not-contain\n                     := :!= :< :<= :> :>=\n                     :is-empty :not-empty :is-null :not-null\n                     :between]]\n  (defmethod canonicalize-mbql-clause clause-name\n    [clause]\n    (canonicalize-simple-filter-clause clause)))\n\n;;; aggregations/expression subclauses\n\n;; Remove `:rows` type aggregation (long-since deprecated; simpliy means no aggregation) if present\n(defmethod canonicalize-mbql-clause :rows\n  [_]\n  nil)\n\n;; TODO -- if options is empty, should we just unwrap the clause?\n(defmethod canonicalize-mbql-clause :aggregation-options\n  [[_ wrapped-aggregation-clause options]]\n  [:aggregation-options (canonicalize-mbql-clause wrapped-aggregation-clause) options])\n\n;; for legacy `:named` aggregations convert them to a new-style `:aggregation-options` clause.\n;;\n;; 99.99% of clauses should have no options, however if they do and `:use-as-display-name?` is false (default is\n;; true) then generate options to change `:name` rather than `:display-name`\n(defmethod canonicalize-mbql-clause :named\n  [[_ wrapped-ag expr-name & more]]\n  (canonicalize-mbql-clause\n   [:aggregation-options\n    (canonicalize-mbql-clause wrapped-ag)\n    (let [[{:keys [use-as-display-name?]}] more]\n      (if (false? use-as-display-name?)\n        {:name expr-name}\n        {:display-name expr-name}))]))\n\n(defn- canonicalize-count-clause [[clause-name field]]\n  (if field\n    [clause-name (canonicalize-implicit-field-id field)]\n    [clause-name]))\n\n(doseq [clause-name [:count :cum-count]]\n  (defmethod canonicalize-mbql-clause clause-name\n    [clause]\n    (canonicalize-count-clause clause)))\n\n(defn- canonicalize-simple-aggregation-with-field\n  [[clause-name field]]\n  [clause-name (canonicalize-implicit-field-id field)])\n\n(doseq [clause-name [:avg :cum-sum :distinct :stddev :sum :min :max :median :var]]\n  (defmethod canonicalize-mbql-clause clause-name\n    [clause]\n    (canonicalize-simple-aggregation-with-field clause)))\n\n(defmethod canonicalize-mbql-clause :percentile\n  [[_ field percentile]]\n  [:percentile (canonicalize-implicit-field-id field) percentile])\n\n(defn- canonicalize-filtered-aggregation-clause\n  [[clause-name filter-subclause]]\n  [clause-name (canonicalize-mbql-clause filter-subclause)])\n\n(doseq [clause-name [:share :count-where]]\n  (defmethod canonicalize-mbql-clause clause-name\n    [clause]\n    (canonicalize-filtered-aggregation-clause clause)))\n\n(defmethod canonicalize-mbql-clause :sum-where\n  [[_ field filter-subclause]]\n  [:sum-where (canonicalize-mbql-clause field) (canonicalize-mbql-clause filter-subclause)])\n\n(defmethod canonicalize-mbql-clause :case\n  [[_ clauses options]]\n  (if options\n    (conj (canonicalize-mbql-clause [:case clauses])\n          (normalize-tokens options :ignore-path))\n    [:case (vec (for [[pred expr] clauses]\n                  [(canonicalize-mbql-clause pred) (canonicalize-mbql-clause expr)]))]))\n\n(defmethod canonicalize-mbql-clause :substring\n  [[_ arg start & more]]\n  (into [:substring\n         (canonicalize-mbql-clause arg)\n         ;; 0 indexes were allowed in the past but we are now enforcing this rule in MBQL.\n         ;; This allows stored queries with literal 0 in the index to work.\n         (if (= 0 start) 1 (canonicalize-mbql-clause start))]\n        (map canonicalize-mbql-clause more)))\n\n;;; top-level key canonicalization\n\n(defn- canonicalize-mbql-clauses\n  \"Walk an `mbql-query` an canonicalize non-top-level clauses like `:fk->`.\"\n  [mbql-query]\n  (walk/prewalk\n   (fn [x]\n     (cond\n       (map? x)\n       (m/map-vals canonicalize-mbql-clauses x)\n\n       (not (mbql-clause? x))\n       x\n\n       :else\n       (try\n         (canonicalize-mbql-clause x)\n         (catch #?(:clj Throwable :cljs js/Error) e\n           (log/error (i18n/tru \"Invalid clause:\") x)\n           (throw (ex-info (i18n/tru \"Invalid MBQL clause: {0}\" (ex-message e))\n                           {:clause x}\n                           e))))))\n   mbql-query))\n\n(defn- wrap-single-aggregations\n  \"Convert old MBQL 95 single-aggregations like `{:aggregation :count}` or `{:aggregation [:count]}` to MBQL 98+\n  multiple-aggregation syntax (e.g. `{:aggregation [[:count]]}`).\"\n  [aggregations]\n  (mbql.match/replace aggregations\n    seq? (recur (vec &match))\n\n    ;; something like {:aggregations :count} -- MBQL 95 single aggregation\n    keyword?\n    [[&match]]\n\n    ;; special-case: MBQL 98 multiple aggregations using unwrapped :count or :rows\n    ;; e.g. {:aggregations [:count [:sum 10]]} or {:aggregations [:count :count]}\n    [(_ :guard (every-pred keyword? (complement #{:named :+ :- :* :/})))\n     (_ :guard aggregation-subclause?)\n     & _]\n    (vec (reduce concat (map wrap-single-aggregations aggregations)))\n\n    ;; something like {:aggregations [:sum 10]} -- MBQL 95 single aggregation\n    [(_ :guard keyword?) & _]\n    [&match]\n\n    _\n    &match))\n\n(defn- canonicalize-aggregations\n  \"Canonicalize subclauses (see above) and make sure `:aggregation` is a sequence of clauses instead of a single\n  clause.\"\n  [aggregations]\n  (->> (wrap-single-aggregations aggregations)\n       (keep canonicalize-mbql-clauses)\n       vec))\n\n(defn- canonicalize-breakouts [breakouts]\n  (if (mbql-clause? breakouts)\n    (recur [breakouts])\n    (not-empty (mapv wrap-implicit-field-id breakouts))))\n\n(defn- canonicalize-order-by\n  \"Make sure order by clauses like `[:asc 10]` get `:field-id` added where appropriate, e.g. `[:asc [:field-id 10]]`\"\n  [clauses]\n  (mbql.match/replace clauses\n    seq? (recur (vec &match))\n\n    ;; MBQL 95 reversed [<field> <direction>] clause\n    [field :asc]        (recur [:asc field])\n    [field :desc]       (recur [:desc field])\n    [field :ascending]  (recur [:asc field])\n    [field :descending] (recur [:desc field])\n\n    ;; MBQL 95 names but MBQL 98+ reversed syntax\n    [:ascending field]  (recur [:asc field])\n    [:descending field] (recur [:desc field])\n\n    [:asc field]  [:asc  (canonicalize-implicit-field-id field)]\n    [:desc field] [:desc (canonicalize-implicit-field-id field)]\n\n    ;; this case should be the first one hit when we come in with a vector of clauses e.g. [[:asc 1] [:desc 2]]\n    [& clauses] (vec (distinct (map canonicalize-order-by clauses)))))\n\n(declare canonicalize-inner-mbql-query)\n\n(defn- canonicalize-template-tag [{:keys [dimension], :as tag}]\n  (cond-> tag\n    dimension (update :dimension canonicalize-mbql-clause)))\n\n(defn- canonicalize-template-tags [tags]\n  (into {} (for [[tag-name tag] tags]\n             [tag-name (canonicalize-template-tag tag)])))\n\n(defn- canonicalize-native-query [{:keys [template-tags], :as native-query}]\n  (cond-> native-query\n    template-tags (update :template-tags canonicalize-template-tags)))\n\n(defn- canonicalize-source-query [{native? :native, :as source-query}]\n  (cond-> source-query\n    (not native?) canonicalize-inner-mbql-query\n    native?       canonicalize-native-query))\n\n(defn- non-empty? [x]\n  (if (coll? x)\n    (seq x)\n    (some? x)))\n\n(defn- canonicalize-top-level-mbql-clauses\n  \"Perform specific steps to canonicalize the various top-level clauses in an MBQL query.\"\n  [mbql-query]\n  (cond-> mbql-query\n    (non-empty? (:aggregation  mbql-query)) (update :aggregation  canonicalize-aggregations)\n    (non-empty? (:breakout     mbql-query)) (update :breakout     canonicalize-breakouts)\n    (non-empty? (:fields       mbql-query)) (update :fields       (partial mapv wrap-implicit-field-id))\n    (non-empty? (:order-by     mbql-query)) (update :order-by     canonicalize-order-by)\n    (non-empty? (:source-query mbql-query)) (update :source-query canonicalize-source-query)))\n\n(def ^:private ^{:arglists '([query])} canonicalize-inner-mbql-query\n  (comp canonicalize-mbql-clauses canonicalize-top-level-mbql-clauses))\n\n(defn- move-source-metadata-to-mbql-query\n  \"In Dashboard 0.33.0 `:source-metadata` about resolved queries is added to the 'inner' MBQL query rather than to the\n  top-level; if we encounter the old style, move it to the appropriate location.\"\n  [{:keys [source-metadata], :as query}]\n  (-> query\n      (dissoc :source-metadata)\n      (assoc-in [:query :source-metadata] source-metadata)))\n\n(defn- canonicalize\n  \"Canonicalize a query [MBQL query], rewriting the query as if you perfectly followed the recommended style guides for\n  writing MBQL. Does things like removes unneeded and empty clauses, converts older MBQL '95 syntax to MBQL '98, etc.\"\n  [{:keys [query parameters source-metadata native], :as outer-query}]\n  (try\n    (cond-> outer-query\n      source-metadata move-source-metadata-to-mbql-query\n      query           (update :query canonicalize-inner-mbql-query)\n      parameters      (update :parameters (partial mapv canonicalize-mbql-clauses))\n      native          (update :native canonicalize-native-query)\n      true            canonicalize-mbql-clauses)\n    (catch #?(:clj Throwable :cljs js/Error) e\n      (throw (ex-info (i18n/tru \"Error canonicalizing query: {0}\" (ex-message e))\n                      {:query query}\n                      e)))))\n\n\n;;; +----------------------------------------------------------------------------------------------------------------+\n;;; |                                          WHOLE-QUERY TRANSFORMATIONS                                           |\n;;; +----------------------------------------------------------------------------------------------------------------+\n\n(defn- remove-breakout-fields-from-fields\n  \"Remove any Fields specified in both `:breakout` and `:fields` from `:fields`; it is implied that any breakout Field\n  will be returned, specifying it in both would imply it is to be returned twice, which tends to cause confusion for\n  the QP and drivers. (This is done to work around historic bugs with the way queries were generated on the frontend;\n  I'm not sure this behavior makes sense, but removing it would break existing queries.)\n\n  We will remove either exact matches:\n\n    {:breakout [[:field-id 10]], :fields [[:field-id 10]]} ; -> {:breakout [[:field-id 10]]}\n\n  or unbucketed matches:\n\n    {:breakout [[:datetime-field [:field-id 10] :month]], :fields [[:field-id 10]]}\n    ;; -> {:breakout [[:field-id 10]]}\"\n  [{{:keys [breakout fields]} :query, :as query}]\n  (if-not (and (seq breakout) (seq fields))\n    query\n    ;; get a set of all Field clauses (of any type) in the breakout. For temporal-bucketed fields, we'll include both\n    ;; the bucketed `[:datetime-field <field> ...]` clause and the `<field>` clause it wraps\n    (let [breakout-fields (set (reduce concat (mbql.match/match breakout\n                                                [:field id-or-name opts]\n                                                [&match\n                                                 [:field id-or-name (dissoc opts :temporal-unit)]])))]\n      ;; now remove all the Fields in `:fields` that match the ones in the set\n      (update-in query [:query :fields] (comp vec (partial remove breakout-fields))))))\n\n(defn- perform-whole-query-transformations\n  \"Perform transformations that operate on the query as a whole, making sure the structure as a whole is logical and\n  consistent.\"\n  [query]\n  (try\n    (remove-breakout-fields-from-fields query)\n    (catch #?(:clj Throwable :cljs js/Error) e\n      (throw (ex-info (i18n/tru \"Error performing whole query transformations\")\n                      {:query query}\n                      e)))))\n\n;;; +----------------------------------------------------------------------------------------------------------------+\n;;; |                                             REMOVING EMPTY CLAUSES                                             |\n;;; +----------------------------------------------------------------------------------------------------------------+\n\n(declare remove-empty-clauses)\n\n(defn- remove-empty-clauses-in-map [m path]\n  (let [m (into (empty m) (for [[k v] m\n                                :let  [v (remove-empty-clauses v (conj path k))]\n                                :when (some? v)]\n                            [k v]))]\n    (when (seq m)\n      m)))\n\n(defn- remove-empty-clauses-in-sequence [xs path]\n  (let [xs (mapv #(remove-empty-clauses % (conj path ::sequence))\n                 xs)]\n    (when (some some? xs)\n      xs)))\n\n(defn- remove-empty-clauses-in-join [join]\n  (remove-empty-clauses join [:query]))\n\n(defn- remove-empty-clauses-in-source-query [{native? :native, :as source-query}]\n  (if native?\n    (-> source-query\n        (set/rename-keys {:native :query})\n        (remove-empty-clauses [:native])\n        (set/rename-keys {:query :native}))\n    (remove-empty-clauses source-query [:query])))\n\n(def ^:private path->special-remove-empty-clauses-fn\n  {:native identity\n   :query  {:source-query remove-empty-clauses-in-source-query\n            :joins        {::sequence remove-empty-clauses-in-join}}\n   :viz-settings identity})\n\n(defn- remove-empty-clauses\n  \"Remove any empty or `nil` clauses in a query.\"\n  ([query]\n   (remove-empty-clauses query []))\n\n  ([x path]\n   (try\n     (let [special-fn (when (seq path)\n                        (get-in path->special-remove-empty-clauses-fn path))]\n       (cond\n         (fn? special-fn) (special-fn x)\n         (record? x)      x\n         (map? x)         (remove-empty-clauses-in-map x path)\n         (sequential? x)  (remove-empty-clauses-in-sequence x path)\n         :else            x))\n     (catch #?(:clj Throwable :cljs js/Error) e\n       (throw (ex-info \"Error removing empty clauses from form.\"\n                       {:form x, :path path}\n                       e))))))\n\n\n;;; +----------------------------------------------------------------------------------------------------------------+\n;;; |                                            PUTTING IT ALL TOGETHER                                             |\n;;; +----------------------------------------------------------------------------------------------------------------+\n\n(def ^{:arglists '([outer-query])} normalize\n  \"Normalize the tokens in a Dashboard query (i.e., make them all `lisp-case` keywords), rewrite deprecated clauses as\n  up-to-date MBQL 2000, and remove empty clauses.\"\n  (let [normalize* (comp remove-empty-clauses\n                         perform-whole-query-transformations\n                         canonicalize\n                         normalize-tokens)]\n    (fn [query]\n      (try\n        (normalize* query)\n        (catch #?(:clj Throwable :cljs js/Error) e\n          (throw (ex-info (i18n/tru \"Error normalizing query: {0}\" (ex-message e))\n                          {:query query}\n                          e)))))))\n\n(defn normalize-fragment\n  \"Normalize just a specific fragment of a query, such as just the inner MBQL part or just a filter clause. `path` is\n  where this fragment would normally live in a full query.\n\n    (normalize-fragment [:query :filter] [\\\"=\\\" 100 200])\n    ;;-> [:= [:field-id 100] 200]\"\n  {:style/indent 1}\n  [path x]\n  (if-not (seq path)\n    (normalize x)\n    (get (normalize-fragment (butlast path) {(last path) x}) (last path))))\n","~:reader-features",["^I",["~:cljs-release","~:cljs"]],"~:cljc",true,"~:source-map-compact",["^ ","mappings","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","names",["metabase.mbql.normalize/mbql-clause?","x","and__5043__auto__","cljs.core/sequential?","cljs.core/map-entry?","cljs.core.some_fn","cljs.core/keyword?","cljs.core/string?","cljs.core/first","metabase.mbql.normalize/maybe-normalize-token","metabase.mbql.util/normalize-token","metabase.mbql.normalize/is-clause?","k-or-ks","clause-name","cljs.core/coll?","fexpr__63610","cljs.core/set","cljs.core._EQ_","method-table__5642__auto__","cljs.core.atom","prefer-table__5643__auto__","method-cache__5644__auto__","cached-hierarchy__5645__auto__","hierarchy__5646__auto__","cljs.core.get","fexpr__63633","cljs.core/MultiFn","cljs.core.symbol","metabase.mbql.normalize/normalize-mbql-clause-tokens","cljs.core.comp","p__63636","vec__63641","cljs.core.nth","_","aggregation-index","option","G__63649","cljs.core.conj","p__63660","vec__63666","expression-name","cljs.core/Keyword","metabase.mbql.util/qualified-name","p__63689","vec__63691","field","strategy-name","strategy-param","metabase.mbql.normalize/normalize-tokens","p__63702","vec__63703","id-or-name","opts","G__63712","cljs.core.update","cljs.core/keyword","binning","G__63720","p__63730","vec__63731","field-name","field-type","cljs.core.keyword","p__63741","vec__63742","as-or-unit","maybe-unit","p__63767","vec__63770","amount","unit","options","cljs.core/integer?","p__63782","vec__63783","p__63791","vec__63792","p__63799","vec__63803","p__63813","vec__63816","p__63831","vec__63833","mode","p__63842","vec__63843","p__63848","vec__63851","y","p__63859","vec__63863","value","info","p__63870","vec__63871","seq__63872","cljs.core/seq","first__63873","cljs.core/next","args","cljs.core.into","p1__63869#","cljs.core.map","metabase.mbql.normalize/aggregation-subclause?","or__5045__auto__","G__63881","fexpr__63880","G__63883","metabase.mbql.normalize/normalize-ag-clause-tokens","ag-clause","vec__63888","seq__63889","first__63890","wrapped-ag","more","cljs.core/second","cljs.core.mapv","metabase.mbql.normalize/normalize-expressions-tokens","expressions-clause","iter__5523__auto__","s__63895","cljs.core/LazySeq","temp__5804__auto__","cljs.core/chunked-seq?","c__5521__auto__","size__5522__auto__","cljs.core/count","b__63897","cljs.core/chunk-buffer","i__63896","vec__63900","cljs.core/-nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__63894","cljs.core/chunk-rest","vec__63904","cljs.core/cons","cljs.core/rest","definition","metabase.mbql.normalize/normalize-order-by-tokens","clauses","cljs.core/vec","s__63914","b__63916","i__63915","iter__63913","subclause","cljs.core/reverse","metabase.mbql.normalize/template-tag-definition-key->transform-fn","k","cljs.core/identity","v","G__63941","G__63942","metabase.mbql.normalize/normalize-template-tag-definition","tag-definition","tag-def","p__63957","vec__63958","transform-fn","G__63961","cljs.core/not","cljs.core.assoc","metabase.mbql.normalize/normalize-template-tags","template-tags","p__63963","vec__63969","tag-name","p__63983","map__63984","cljs.core/--destructure-map","metabase.mbql.normalize/normalize-query-parameter","type","target","id","values_source_config","param","G__63987","p1__63978#","p1__63980#","cljs.core.update_in","p1__63981#","metabase.mbql.normalize/normalize-source-query","source-query","map__63992","native?","medley.core/map-keys","clojure.set/rename-keys","G__63993","G__63994","G__63997","G__63998","metabase.mbql.normalize/normalize-join","join","map__64010","strategy","fields","alias","G__64011","metabase.mbql.normalize/normalize-source-metadata","metadata","p1__64012#","p2__64013#","cljs.core.reduce","medley.core.update_existing","metabase.mbql.normalize/canonicalize-mbql-clauses","clojure.walk/keywordize-keys","metabase.mbql.normalize/normalize-native-query","native-query","G__64014","p1__64015#","metabase.mbql.normalize/path->special-token-normalization-fn","G__64016","var_args","args__5775__auto__","len__5769__auto__","i__5770__auto__","argseq__5776__auto__","cljs.core/IndexedSeq","p__64031","vec__64032","seq64027","G__64028","self__5754__auto__","path","special-fn","cljs.core.get_in","e64035","cljs.core/fn?","cljs.core/record?","cljs.core/map?","s__64048","b__64050","i__64049","vec__64052","iter__64047","vec__64057","metabase.mbql.normalize.normalize_tokens","p1__64026#","js/Error","e","cljs.core.ex_info","metabase.shared.util.i18n.js_i18n","cljs.core/ex-message","metabase.mbql.normalize/wrap-implicit-field-id","fexpr__64060","metabase.mbql.normalize/canonicalize-mbql-clause","clause","metabase.mbql.normalize/canonicalize-implicit-field-id","p__64063","vec__64070","vec__64073","nested-id-or-name","nested-opts","cljs.core/not-empty","cljs.core.merge","p__64081","vec__64082","_tag","index","cljs.core/empty?","p__64089","vec__64090","p__64093","vec__64094","base-type","p__64097","vec__64098","field-1","field-2","vec__64101","vec__64104","source","dest","dest-opts","p__64107","vec__64108","join-alias","metabase.mbql.util.assoc_field_options","G__64122","vec__64127","metabase.mbql.util/with-temporal-unit","vec__64130","p__64147","vec__64152","binning-options","vec__64155","p__64175","vec__64176","seq__64177","first__64178","metabase.mbql.normalize/canonicalize-compound-filter-clause","filter-name","metabase.mbql.util/simplify-compound-filter","seq__64179","chunk__64180","count__64181","i__64182","c__5568__auto__","cljs.core/chunk-first","p__64206","vec__64207","seq__64208","first__64209","coordinates","p__64212","vec__64214","seq__64215","first__64216","G__64218","metabase.mbql.util/is-clause?","metabase.mbql.util.update_field_options","cljs.core/dissoc","p__64246","vec__64247","seq__64248","first__64249","metabase.mbql.normalize/canonicalize-simple-filter-clause","first-arg","other-args","seq__64250","chunk__64251","count__64252","i__64253","p__64284","vec__64285","wrapped-aggregation-clause","p__64297","vec__64298","seq__64299","first__64300","expr-name","vec__64302","map__64305","use-as-display-name?","p__64317","vec__64318","metabase.mbql.normalize/canonicalize-count-clause","seq__64323","chunk__64324","count__64325","i__64326","p__64352","vec__64353","metabase.mbql.normalize/canonicalize-simple-aggregation-with-field","seq__64356","chunk__64357","count__64358","i__64359","p__64373","vec__64377","percentile","p__64383","vec__64384","metabase.mbql.normalize/canonicalize-filtered-aggregation-clause","filter-subclause","seq__64388","chunk__64389","count__64390","i__64391","p__64402","vec__64403","p__64407","vec__64409","s__64414","b__64416","i__64415","vec__64417","iter__64413","vec__64420","pred","expr","p__64423","vec__64425","seq__64426","first__64427","arg","start","mbql-query","clojure.walk/prewalk","medley.core.map_vals","e64430","level__30238__auto__","metabase.util.log/glogi-level","logger__30239__auto__","metabase.util.log/is-loggable?","x__30240__auto__","lambdaisland.glogi.log","cljs.core.print_str","metabase.shared.util.i18n/js-i18n","metabase.mbql.normalize/wrap-single-aggregations","aggregations","&parents","&match","fexpr__64477","metabase.mbql.util.match.impl/match-with-pred-or-class","replace-64433","cljs.core.match/backtrack","e64453","e__46040__auto__","fexpr__64476","e64454","cljs.core/vector?","&match_left__64446","cljs.core.subvec","&match_left__64446_0__64448","&match_left__64446_1__64449","e64470","e64469","e64466","e64455","&match_left__64450","&match_left__64450_0__64452","e64458","e64457","e64456","cljs.core/seq?","cljs.core.every_pred","cljs.core/complement","cljs.core/concat","metabase.mbql.normalize/canonicalize-aggregations","cljs.core.keep","metabase.mbql.normalize/canonicalize-breakouts","breakouts","metabase.mbql.normalize/canonicalize-order-by","fexpr__64540","replace-64481","e64496","&match_1__64493","cljs.core/keyword-identical?","e64510","e64511","e64516","e64517","&match_0__64492","e64519","e64520","e64522","e64523","e64497","&match_left__64494","&match_right__64495","e64508","e64500","e64498","metabase.mbql.util.match.impl/replace-in-collection","cljs.core.distinct","p__64547","map__64548","metabase.mbql.normalize/canonicalize-template-tag","dimension","tag","G__64550","metabase.mbql.normalize/canonicalize-template-tags","tags","s__64556","b__64558","i__64557","vec__64561","iter__64555","vec__64564","p__64568","map__64572","metabase.mbql.normalize/canonicalize-native-query","G__64574","p__64576","map__64577","metabase.mbql.normalize/canonicalize-source-query","G__64578","metabase.mbql.normalize/canonicalize-inner-mbql-query","metabase.mbql.normalize/non-empty?","metabase.mbql.normalize/canonicalize-top-level-mbql-clauses","G__64581","cljs.core.partial","cljs.core/mapv","p__64588","map__64589","metabase.mbql.normalize/move-source-metadata-to-mbql-query","source-metadata","query","cljs.core.dissoc","cljs.core/assoc-in","p__64590","map__64591","metabase.mbql.normalize/canonicalize","parameters","native","outer-query","e64592","G__64593","p__64594","map__64595","map__64596","metabase.mbql.normalize/remove-breakout-fields-from-fields","breakout","breakout-fields","cljs.core.filter","cljs.core/some?","&match_0__64600","e64604","e64603","metabase.mbql.util.match.impl/match-in-collection","match-64598","cljs.core/remove","metabase.mbql.normalize/perform-whole-query-transformations","e64605","metabase.mbql.normalize/remove-empty-clauses-in-map","m","cljs.core/empty","s__64608","b__64610","i__64609","vec__64615","iter__64607","vec__64620","G__64618","G__64619","G__64623","G__64624","metabase.mbql.normalize/remove-empty-clauses","metabase.mbql.normalize/remove-empty-clauses-in-sequence","xs","p1__64625#","G__64626","G__64627","cljs.core/some","metabase.mbql.normalize/remove-empty-clauses-in-join","G__64628","G__64629","p__64630","map__64631","metabase.mbql.normalize/remove-empty-clauses-in-source-query","G__64632","G__64633","G__64634","G__64635","metabase.mbql.normalize/path->special-remove-empty-clauses-fn","G__64638","metabase.mbql.normalize.remove_empty_clauses","e64640","metabase.mbql.normalize/normalize","normalize*","e64642","metabase.mbql.normalize/normalize-fragment","G__64647","G__64648","cljs.core/butlast","cljs.core/last"]],"~:used-vars",["^I",["~$metabase.mbql.normalize/canonicalize-filtered-aggregation-clause","~$cljs.core/--destructure-map","~$metabase.mbql.normalize/canonicalize-mbql-clause","~$cljs.core/keep","~$metabase.mbql.normalize/normalize-source-metadata","~$cljs.core/some?","~$metabase.mbql.normalize/remove-empty-clauses-in-sequence","~$cljs.core.match/backtrack","~$metabase.mbql.normalize/normalize-mbql-clause-tokens","~$cljs.core/comp","~$cljs.core/rest","~$metabase.mbql.normalize/canonicalize","~$metabase.mbql.normalize/normalize-order-by-tokens","~$cljs.core/keyword","~$metabase.mbql.util/with-temporal-unit","~$cljs.core/ex-message","~$metabase.mbql.normalize/normalize-tokens","~$cljs.core/MultiFn","~$cljs.core/sequential?","~$cljs.core/keyword?","~$metabase.mbql.normalize/wrap-implicit-field-id","~$metabase.mbql.util/simplify-compound-filter","~$metabase.mbql.normalize/remove-empty-clauses","~$metabase.mbql.normalize/canonicalize-mbql-clauses","~$metabase.mbql.normalize/perform-whole-query-transformations","~$cljs.core/vector?","~$metabase.mbql.util/assoc-field-options","~$metabase.mbql.normalize/remove-empty-clauses-in-map","~$cljs.core/filter","~$cljs.core/=","~$metabase.mbql.normalize/move-source-metadata-to-mbql-query","~$cljs.core/partial","~$clojure.walk/prewalk","~$cljs.core/IndexedSeq","~$metabase.mbql.normalize/remove-empty-clauses-in-source-query","~$metabase.mbql.normalize/canonicalize-template-tags","~$metabase.mbql.normalize/canonicalize-compound-filter-clause","~$cljs.core/count","~$metabase.mbql.normalize/canonicalize-aggregations","~$cljs.core/reduce","~$cljs.core/seq","~$metabase.mbql.normalize/maybe-normalize-token","~$cljs.core/chunk-first","~$cljs.core/identity","~$cljs.core/Keyword","~$metabase.mbql.normalize/normalize-native-query","~$metabase.mbql.normalize/is-clause?","~$medley.core/map-keys","~$cljs.core/map-entry?","~$cljs.core/last","~$cljs.core/chunk","~$cljs.core/mapv","~$metabase.mbql.normalize/normalize-template-tag-definition","~$metabase.mbql.util/is-clause?","~$cljs.core/distinct","~$cljs.core/string?","~$cljs.core/dissoc","~$cljs.core/keyword-identical?","~$cljs.core/LazySeq","~$cljs.core/chunk-rest","~$lambdaisland.glogi/log","~$cljs.core/atom","~$metabase.mbql.util.match.impl/replace-in-collection","~$metabase.mbql.normalize/path->special-token-normalization-fn","~$cljs.core/concat","~$metabase.util.log/is-loggable?","~$cljs.core/set","~$cljs.core/empty?","~$cljs.core/into","~$cljs.core/map?","~$metabase.mbql.normalize/canonicalize-top-level-mbql-clauses","~$cljs.core/conj","~$metabase.mbql.normalize/mbql-clause?","~$cljs.core/update","~$cljs.core/map","~$metabase.mbql.normalize/canonicalize-simple-filter-clause","~$metabase.mbql.normalize/normalize","~$metabase.mbql.normalize/canonicalize-template-tag","~$cljs.core/fn?","~$metabase.mbql.normalize/normalize-expressions-tokens","~$medley.core/update-existing","~$cljs.core/get-in","~$metabase.mbql.normalize/normalize-fragment","~$metabase.mbql.normalize/canonicalize-simple-aggregation-with-field","~$cljs.core/empty","~$clojure.set/rename-keys","~$metabase.mbql.normalize/canonicalize-breakouts","~$cljs.core/-add-method","~$medley.core/map-vals","~$cljs.core/get","~$metabase.mbql.normalize/remove-empty-clauses-in-join","~$cljs.core/integer?","~$cljs.core/chunk-append","~$cljs.core/-nth","~$cljs.core/remove","~$metabase.mbql.normalize/canonicalize-native-query","~$cljs.core/not-empty","~$metabase.util.log/glogi-level","~$metabase.mbql.normalize/non-empty?","~$cljs.core/symbol","~$metabase.mbql.util/normalize-token","~$metabase.mbql.normalize/template-tag-definition-key->transform-fn","~$cljs.core/record?","~$metabase.mbql.util/qualified-name","~$cljs.core/subvec","~$metabase.shared.util.i18n/js-i18n","~$metabase.mbql.util/update-field-options","~$cljs.core/nth","~$cljs.core/ex-info","~$cljs.core/second","~$cljs.core/next","~$cljs.core/vec","~$metabase.mbql.normalize/path->special-remove-empty-clauses-fn","~$cljs.core/chunk-cons","~$cljs.core/not","~$cljs.core/complement","~$cljs.core/cons","~$cljs.core/assoc","~$metabase.mbql.util.match.impl/match-with-pred-or-class","~$cljs.core/assoc-in","~$cljs.core/reverse","~$metabase.mbql.normalize/canonicalize-count-clause","~$metabase.mbql.normalize/canonicalize-order-by","~$cljs.core/chunk-buffer","~$metabase.mbql.normalize/canonicalize-implicit-field-id","~$cljs.core/coll?","~$metabase.mbql.normalize/normalize-join","~$metabase.mbql.normalize/normalize-ag-clause-tokens","~$cljs.core/print-str","~$metabase.mbql.normalize/wrap-single-aggregations","~$cljs.core/some-fn","~$clojure.walk/keywordize-keys","~$cljs.core/first","~$cljs.core/butlast","~$cljs.core/seq?","~$metabase.mbql.normalize/canonicalize-inner-mbql-query","~$metabase.mbql.normalize/remove-breakout-fields-from-fields","~$cljs.core/merge","~$cljs.core/update-in","~$cljs.core/every-pred","~$metabase.mbql.normalize/normalize-template-tags","~$js/Error","~$metabase.mbql.normalize/canonicalize-source-query","~$metabase.mbql.util.match.impl/match-in-collection","~$cljs.core/some","~$metabase.mbql.normalize/aggregation-subclause?","~$cljs.core/chunked-seq?","~$metabase.mbql.normalize/normalize-query-parameter","~$metabase.mbql.normalize/normalize-source-query"]]],"~:cache-keys",["~#cmap",[["^1?","camel_snake_kebab/internals/misc.cljc"],["5ae08f83ceb8959971e6334596bff0214bf6fdf2","~:shadow.build.compiler/resolve",["^ ","~:require-id",null,"~:deps-ids",["^I",[]],"~:deps-syms",["^[","^@","~$camel-snake-kebab.internals.string-separator","~$clojure.string"]]],["^1?","goog/dom/tagname.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^53",["^ ","^54",null,"^55",["^I",[]],"^56",["^[","~$goog.dom.HtmlElement"]]],["^1?","metabase/shared/util/i18n.cljs"],["6c3c8615004b349dae9851ed547d516d45e04bd0","^53",["^ ","^54",null,"^55",["^I",[]],"^56",["^[","^@","~$shadow.js.shim.module$ttag","^58"]]],["^1?","goog/labs/useragent/platform.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^53",["^ ","^54",null,"^55",["^I",[]],"^56",["^[","~$goog.string.internal","~$goog.labs.userAgent.util","~$goog.labs.userAgent.highEntropy.highEntropyValue","~$goog.labs.userAgent.highEntropy.highEntropyData","~$goog.labs.userAgent"]]],["^1?","metabase/types.cljc"],["00232bf78b259e26a21c218c8f2d746ba7003a15","^53",["^ ","^54",null,"^55",["^I",[]],"^56",["^[","^@","^R","~$metabase.types.coercion-hierarchies","~$metabase.util"]]],["^1?","lambdaisland/glogi.cljs"],["76286836d4172602aa08006b2a754dda736ffe09","^53",["^ ","^54",null,"^55",["^I",[]],"^56",["^[","^@","~$goog.log","~$goog.debug.Console","~$goog.array","^58","~$goog.object","~$goog.debug.FancyWindow","~$goog.debug.DivConsole"]]],["^1?","goog/math/math.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^53",["^ ","^54",null,"^55",["^I",[]],"^56",["^[","~$goog.asserts"]]],["^1?","goog/html/trustedtypes.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^53",["^ ","^54",null,"^55",["^I",[]],"^56",["^["]]],["^1?","goog/string/stringformat.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^53",["^ ","^54",null,"^55",["^I",[]],"^56",["^[","~$goog.string"]]],["^1?","goog/labs/useragent/browser.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^53",["^ ","^54",null,"^55",["^I",[]],"^56",["^[","^5<","^5=","^5H","^5;","^5>","^5?"]]],["^1?","goog/html/safeurl.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^53",["^ ","^54",null,"^55",["^I",[]],"^56",["^[","^5H","~$goog.fs.url","~$goog.html.TrustedResourceUrl","~$goog.string.Const","~$goog.string.TypedString","^5;"]]],["^1?","goog/style/style.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^53",["^ ","^54",null,"^55",["^I",[]],"^56",["^[","^5H","~$goog.dom","~$goog.dom.NodeType","~$goog.dom.TagName","~$goog.dom.safe","~$goog.dom.vendor","~$goog.html.SafeStyleSheet","~$goog.math.Box","~$goog.math.Coordinate","~$goog.math.Rect","~$goog.math.Size","^5E","~$goog.reflect","^5I","~$goog.userAgent"]]],["^1?","goog/array/array.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^53",["^ ","^54",null,"^55",["^I",[]],"^56",["^[","^5H"]]],["~:shadow.build.js-support/require","moment"],["~$shadow.js.shim.module$moment","shadow.js.shim.module$moment.js","require","^53",["^ ","^54",null,"^55",["^I",[]],"^56",["^["]]],["^5Z","moment-timezone"],["~$shadow.js.shim.module$moment_timezone","shadow.js.shim.module$moment_timezone.js","require","^53",["^ ","^54",null,"^55",["^I",[]],"^56",["^["]]],["^1?","metabase/mbql/schema/macros.cljs"],["2af09bd42ffb1e15b66723cf7ba15db7dc75d10b","^53",["^ ","^54",null,"^55",["^I",[]],"^56",["^[","^@"]]],["^1?","goog/useragent/useragent.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^53",["^ ","^54",null,"^55",["^I",[]],"^56",["^[","~$goog.labs.userAgent.browser","~$goog.labs.userAgent.engine","~$goog.labs.userAgent.platform","^5<","^5X","^5;"]]],["^1?","goog/debug/error.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^53",["^ ","^54",null,"^55",["^I",[]],"^56",["^["]]],["^1?","goog/flags/flags.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^53",["^ ","^54",null,"^55",["^I",[]],"^56",["^["]]],["^1?","net/cgrand/macrovich.cljc"],["abcb26cbfe0f8eef363b25525210c0fe1eb1f693","^53",["^ ","^54",null,"^55",["^I",[]],"^56",["^[","^@"]]],["^1?","schema/spec/variant.cljc"],["0dacc3066a87f33088c9a332b6c21e8b0560011c","^53",["^ ","^54",null,"^55",["^I",[]],"^56",["^[","^@","~$schema.utils","~$schema.spec.core"]]],["^1?","goog/structs/circularbuffer.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^53",["^ ","^54",null,"^55",["^I",[]],"^56",["^["]]],["^1?","weavejester/dependency.cljc"],["7fd7f8879313f6a7e295f7447e668bdf492c42c1","^53",["^ ","^54",null,"^55",["^I",[]],"^56",["^[","^@","^R"]]],["^1?","goog/dom/nodetype.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^53",["^ ","^54",null,"^55",["^I",[]],"^56",["^["]]],["^1?","goog/labs/useragent/highentropy/highentropyvalue.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^53",["^ ","^54",null,"^55",["^I",[]],"^56",["^[","^5<","^5;"]]],["^1?","cljs/pprint.cljs"],["bc14df6666853ed869d7b88aaa864111c65d0c7f","^53",["^ ","^54",null,"^55",["^I",[]],"^56",["^[","^@","^58","^5I","~$goog.string.StringBuffer"]]],["^1?","camel_snake_kebab/internals/string_separator.cljc"],["5ae08f83ceb8959971e6334596bff0214bf6fdf2","^53",["^ ","^54",null,"^55",["^I",[]],"^56",["^[","^@","^58"]]],["^1?","goog/string/typedstring.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^53",["^ ","^54",null,"^55",["^I",[]],"^56",["^["]]],["^1?","goog/object/object.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^53",["^ ","^54",null,"^55",["^I",[]],"^56",["^["]]],["^1?","goog/dom/asserts.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^53",["^ ","^54",null,"^55",["^I",[]],"^56",["^[","^5H"]]],"~:SHADOW-TIMESTAMP",[1689947046000,1689947046000,1689947050000],["^1?","goog/math/long.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^53",["^ ","^54",null,"^55",["^I",[]],"^56",["^[","^5H","^5X"]]],["^1?","goog/html/trustedresourceurl.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^53",["^ ","^54",null,"^55",["^I",[]],"^56",["^[","^5H","~$goog.fs.blob","^5J","~$goog.html.SafeScript","~$goog.html.trustedtypes","^5L","^5M"]]],["^1?","schema/spec/leaf.cljc"],["0dacc3066a87f33088c9a332b6c21e8b0560011c","^53",["^ ","^54",null,"^55",["^I",[]],"^56",["^[","^@","^65"]]],["^1?","metabase/util/format.cljc"],["875f86a08288cb3ad5a6f15df988897eaf8613af","^53",["^ ","^54",null,"^55",["^I",[]],"^56",["^[","^@","^5I"]]],["^1?","goog/math/irect.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^53",["^ ","^54",null,"^55",["^I",[]],"^56",["^["]]],["^1?","goog/math/box.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^53",["^ ","^54",null,"^55",["^I",[]],"^56",["^[","^5H","^5U"]]],["^1?","goog/string/internal.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^53",["^ ","^54",null,"^55",["^I",[]],"^56",["^["]]],["^1?","goog/functions/functions.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^53",["^ ","^54",null,"^55",["^I",[]],"^56",["^["]]],["^1?","goog/html/safestyle.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^53",["^ ","^54",null,"^55",["^I",[]],"^56",["^[","^5L","~$goog.html.SafeUrl","^5M","^5H","^5;"]]],["^1?","goog/dom/safe.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^53",["^ ","^54",null,"^55",["^I",[]],"^56",["^[","^5H","~$goog.asserts.dom","~$goog.dom.asserts","~$goog.functions","~$goog.html.SafeHtml","^69","~$goog.html.SafeStyle","^6;","^5K","~$goog.html.uncheckedconversions","^5L","^5;"]]],["^1?","goog/asserts/dom.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^53",["^ ","^54",null,"^55",["^I",[]],"^56",["^[","^5P","^5H","~$goog.dom.element"]]],["^1?","medley/core.cljc"],["f5117fa4c15ff14c4a0ab7db414b0f102afb0b8a","^53",["^ ","^54",null,"^55",["^I",[]],"^56",["^[","^@"]]],["^1?","clojure/walk.cljs"],["bc14df6666853ed869d7b88aaa864111c65d0c7f","^53",["^ ","^54",null,"^55",["^I",[]],"^56",["^[","^@"]]],["^1?","lambdaisland/glogi/console.cljs"],["76286836d4172602aa08006b2a754dda736ffe09","^53",["^ ","^54",null,"^55",["^I",[]],"^56",["^[","^@","~$lambdaisland.glogi","~$lambdaisland.glogi.print","^5E","^5C"]]],["^1?","goog/html/safehtml.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^53",["^ ","^54",null,"^55",["^I",[]],"^56",["^[","^5L","^69","^6@","^5S","^6;","^5P","^5K","^5M","^5H","^61","^5D","^5E","^5;","~$goog.dom.tags","^6:"]]],["^1?","goog/dom/tags.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^53",["^ ","^54",null,"^55",["^I",[]],"^56",["^[","^5E"]]],["^1?","goog/math/size.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^53",["^ ","^54",null,"^55",["^I",[]],"^56",["^["]]],["^1?","goog/labs/useragent/engine.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^53",["^ ","^54",null,"^55",["^I",[]],"^56",["^[","^5D","^5;","^5<"]]],["^1?","goog/fs/blob.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^53",["^ ","^54",null,"^55",["^I",[]],"^56",["^["]]],["^1?","metabase/mbql/schema/helpers.cljc"],["b1f6002b97b59423b504abb666e13c9b0228b768","^53",["^ ","^54",null,"^55",["^I",[]],"^56",["^[","^@","^58","~$metabase.types","~$schema.core"]]],["^1?","goog/dom/dom.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^53",["^ ","^54",null,"^55",["^I",[]],"^56",["^[","^5D","^5H","^6<","~$goog.dom.BrowserFeature","^5O","^5P","^5Q","^6?","^6A","^5U","^5W","^5E","^5I","^5L","~$goog.string.Unicode","^5Y"]]],["^1?","metabase/util/log.cljs"],["7d8a3bf01eb27c2ba7269dc90dc218e46bcc1d3a","^53",["^ ","^54",null,"^55",["^I",[]],"^56",["^[","^@","^5B","^5I","~$goog.string.format","^6C","~$lambdaisland.glogi.console"]]],["^1?","goog/asserts/asserts.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^53",["^ ","^54",null,"^55",["^I",[]],"^56",["^[","~$goog.debug.Error","^5O"]]],["^1?","goog/debug/relativetimeprovider.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^53",["^ ","^54",null,"^55",["^I",[]],"^56",["^["]]],["^1?","goog/math/rect.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^53",["^ ","^54",null,"^55",["^I",[]],"^56",["^[","^5H","^5T","^5U","~$goog.math.IRect","^5W"]]],["^1?","flatland/ordered/map.cljs"],["3a9cb9d79e47d77ecd4f4d550371ecf01464c461","^53",["^ ","^54",null,"^55",["^I",[]],"^56",["^[","^@"]]],["^1?","goog/uri/uri.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^53",["^ ","^54",null,"^55",["^I",[]],"^56",["^[","^5D","^5H","~$goog.collections.maps","^5I","~$goog.structs","~$goog.uri.utils","~$goog.uri.utils.ComponentIndex","~$goog.uri.utils.StandardQueryParam"]]],["^1?","goog/labs/useragent/highentropy/highentropydata.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^53",["^ ","^54",null,"^55",["^I",[]],"^56",["^[","^5="]]],["^1?","metabase/types/coercion_hierarchies.cljc"],["c3d70ef6080e044d61f13ff6bfd76490e2dcd0ac","^53",["^ ","^54",null,"^55",["^I",[]],"^56",["^[","^@","^R"]]],["^1?","goog/collections/maps.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^53",["^ ","^54",null,"^55",["^I",[]],"^56",["^["]]],["^1?","goog/debug/divconsole.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^53",["^ ","^54",null,"^55",["^I",[]],"^56",["^[","~$goog.debug.HtmlFormatter","~$goog.dom.DomHelper","^5P","^5Q","^6?","^5S","^5B","^5L","~$goog.style"]]],["^1?","schema/spec/collection.cljc"],["0dacc3066a87f33088c9a332b6c21e8b0560011c","^53",["^ ","^54",null,"^55",["^I",[]],"^56",["^[","^@","^64","^65"]]],["^1?","schema/utils.cljc"],["0dacc3066a87f33088c9a332b6c21e8b0560011c","^53",["^ ","^54",null,"^55",["^I",[]],"^56",["^[","^@","^6J","^5E","^5I","^58"]]],["^1?","cljs/core/match.cljs"],["f419c02deee501e9f4b29f81215ba81ffcefe9b6","^53",["^ ","^54",null,"^55",["^I",[]],"^56",["^[","^@"]]],["^1?","goog/debug/fancywindow.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^53",["^ ","^54",null,"^55",["^I",[]],"^56",["^[","^5D","^5H","~$goog.debug.DebugWindow","^6T","^5P","^5Q","^6?","^5S","^5B","^5E","^5I","^5L","^5Y"]]],["^1?","goog/debug/formatter.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^53",["^ ","^54",null,"^55",["^I",[]],"^56",["^[","~$goog.debug","~$goog.debug.RelativeTimeProvider","^6?","^6;","^6A","^5B","^5L"]]],["^1?","metabase/shared/util/namespaces.cljs"],["00687008abd6eb291bc9d5ff1fff73210e0bbe6e","^53",["^ ","^54",null,"^55",["^I",[]],"^56",["^[","^@"]]],["^1?","metabase/mbql/util/match/impl.cljc"],["4150e01975339d308f5cfedda77875eda19c030d","^53",["^ ","^54",null,"^55",["^I",[]],"^56",["^[","^@"]]],["^1?","goog/fs/url.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^53",["^ ","^54",null,"^55",["^I",[]],"^56",["^["]]],["^1?","goog/base.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^53",["^ ","^54",null,"^55",["^I",[]],"^56",[]]],["^1?","goog/structs/structs.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^53",["^ ","^54",null,"^55",["^I",[]],"^56",["^[","^5D","^5E"]]],["^1?","clojure/string.cljs"],["bc14df6666853ed869d7b88aaa864111c65d0c7f","^53",["^ ","^54",null,"^55",["^I",[]],"^56",["^[","^@","^5I","^66"]]],["^1?","metabase/util.cljc"],["2eb945a6741f1450ecac08a9087b862ce52b9e3a","^53",["^ ","^54",null,"^55",["^I",[]],"^56",["^[","^@","~$camel-snake-kebab.internals.macros","~$clojure.data","^D","^R","^58","^11","~$flatland.ordered.map","^12","^V","~$metabase.shared.util.namespaces","~$metabase.util.format","^T","~$net.cgrand.macrovich","~$weavejester.dependency"]]],["^1?","camel_snake_kebab/internals/macros.cljc"],["5ae08f83ceb8959971e6334596bff0214bf6fdf2","^53",["^ ","^54",null,"^55",["^I",[]],"^56",["^[","^@","~$camel-snake-kebab.internals.alter-name","~$camel-snake-kebab.internals.misc"]]],["^1?","goog/string/string.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^53",["^ ","^54",null,"^55",["^I",[]],"^56",["^[","^5Q","^6A","^5L","^5;"]]],["^1?","schema/core.cljc"],["0dacc3066a87f33088c9a332b6c21e8b0560011c","^53",["^ ","^54",null,"^55",["^I",[]],"^56",["^[","^@","^58","^64","^65","~$schema.spec.leaf","~$schema.spec.variant","~$schema.spec.collection"]]],["^1?","metabase/mbql/schema.cljc"],["c51bf2a180ecbc12d6a1cd42a4049323f46a0085","^53",["^ ","^54",null,"^55",["^I",[]],"^56",["^[","^@","^5[","^60","^@","^R","~$metabase.mbql.schema.helpers","~$metabase.mbql.schema.macros","^6G"]]],["^1?","metabase/mbql/util/match.cljs"],["d65aaa9fbcb7960b90ba7ca97258b1dc8a40be2b","^53",["^ ","^54",null,"^55",["^I",[]],"^56",["^[","^@","^F","~$metabase.mbql.util.match.impl"]]],["^1?","clojure/data.cljs"],["bc14df6666853ed869d7b88aaa864111c65d0c7f","^53",["^ ","^54",null,"^55",["^I",[]],"^56",["^[","^@","^R"]]],["^1?","goog/reflect/reflect.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^53",["^ ","^54",null,"^55",["^I",[]],"^56",["^["]]],["^1?","goog/labs/useragent/util.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^53",["^ ","^54",null,"^55",["^I",[]],"^56",["^[","^5;","^5?"]]],["^1?","goog/debug/debug.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^53",["^ ","^54",null,"^55",["^I",[]],"^56",["^[","^5D","~$goog.debug.errorcontext"]]],["^1?","goog/string/stringbuffer.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^53",["^ ","^54",null,"^55",["^I",[]],"^56",["^["]]],["^1?","schema/spec/core.cljc"],["0dacc3066a87f33088c9a332b6c21e8b0560011c","^53",["^ ","^54",null,"^55",["^I",[]],"^56",["^[","^@","^64"]]],["^5Z","ttag"],["^5:","shadow.js.shim.module$ttag.js","require","^53",["^ ","^54",null,"^55",["^I",[]],"^56",["^["]]],["^1?","goog/math/coordinate.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^53",["^ ","^54",null,"^55",["^I",[]],"^56",["^[","~$goog.math"]]],["^1?","goog/debug/errorcontext.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^53",["^ ","^54",null,"^55",["^I",[]],"^56",["^["]]],["^1?","goog/labs/useragent/useragent.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^53",["^ ","^54",null,"^55",["^I",[]],"^56",["^[","~$goog.flags"]]],["^1?","goog/dom/element.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^53",["^ ","^54",null,"^55",["^I",[]],"^56",["^[","^5O","^5P"]]],["^1?","goog/html/uncheckedconversions.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^53",["^ ","^54",null,"^55",["^I",[]],"^56",["^[","^5H","^6?","^69","^6@","^5S","^6;","^5K","^5L","^5;"]]],["^1?","goog/debug/debugwindow.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^53",["^ ","^54",null,"^55",["^I",[]],"^56",["^[","^6S","^5Q","^6?","^5S","^5B","^5L","~$goog.structs.CircularBuffer","^5Y"]]],["^1?","metabase/mbql/util.cljc"],["2532d5faa94d2a89dd06e529c641d594e298e2aa","^53",["^ ","^54",null,"^55",["^I",[]],"^56",["^[","^@","^58","~$metabase.mbql.predicates","~$metabase.mbql.schema","^79","^W","^V","^6G"]]],["^1?","goog/dom/htmlelement.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^53",["^ ","^54",null,"^55",["^I",[]],"^56",["^["]]],["^1?","cljs/core.cljs"],["bc14df6666853ed869d7b88aaa864111c65d0c7f","^53",["^ ","^54",null,"^55",["^I",[]],"^56",["^[","~$goog.math.Long","~$goog.math.Integer","^5I","^5E","^5D","~$goog.Uri","^66"]]],["^1?","goog/html/safescript.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^53",["^ ","^54",null,"^55",["^I",[]],"^56",["^[","^5L","^5M","^6:","^5H"]]],["^1?","goog/log/log.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^53",["^ ","^54",null,"^55",["^I",[]],"^56",["^[","^5H","^6W"]]],["^1?","camel_snake_kebab/internals/alter_name.cljc"],["5ae08f83ceb8959971e6334596bff0214bf6fdf2","^53",["^ ","^54",null,"^55",["^I",[]],"^56",["^[","^@"]]],["^1?","metabase/mbql/normalize.cljc"],["04b18b0536de1d93ec656a5ad86e2fe4fdee0540","^53",["^ ","^54",null,"^55",["^I",[]],"^56",["^[","^@","^R","^11","^12","^Y","^W","^V","^T"]]],["^1?","goog/html/safestylesheet.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^53",["^ ","^54",null,"^55",["^I",[]],"^56",["^[","^5L","^6@","^5M","^5E","^5H","^5;"]]],["^1?","goog/math/integer.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^53",["^ ","^54",null,"^55",["^I",[]],"^56",["^[","^5X"]]],["^1?","goog/debug/console.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^53",["^ ","^54",null,"^55",["^I",[]],"^56",["^[","~$goog.debug.TextFormatter","^5B"]]],["^1?","lambdaisland/glogi/print.cljs"],["76286836d4172602aa08006b2a754dda736ffe09","^53",["^ ","^54",null,"^55",["^I",[]],"^56",["^[","^@","^6C","^5E"]]],["^1?","goog/dom/browserfeature.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^53",["^ ","^54",null,"^55",["^I",[]],"^56",["^[","^5Y"]]],["^1?","clojure/set.cljs"],["bc14df6666853ed869d7b88aaa864111c65d0c7f","^53",["^ ","^54",null,"^55",["^I",[]],"^56",["^[","^@"]]],["^1?","goog/uri/utils.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^53",["^ ","^54",null,"^55",["^I",[]],"^56",["^[","^5H","^5I"]]],["^1?","goog/string/const.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^53",["^ ","^54",null,"^55",["^I",[]],"^56",["^[","^5H","^5M"]]],["^1?","goog/dom/vendor.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^53",["^ ","^54",null,"^55",["^I",[]],"^56",["^[","^5I","^5Y"]]],["^1?","metabase/mbql/predicates.cljc"],["20ab1a5ccd943c35c646c5f7396ea40f9bfa7ac4","^53",["^ ","^54",null,"^55",["^I",[]],"^56",["^[","^@","^7A","^6G"]]]]],"~:clj-info",["^ ","jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/analyzer/impl.cljc",1689947050000,"jar:file:/root/.m2/repository/instaparse/instaparse/1.4.12/instaparse-1.4.12.jar!/instaparse/line_col.clj",1689946146000,"jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/source_map/base64_vlq.clj",1689947050000,"jar:file:/root/.m2/repository/instaparse/instaparse/1.4.12/instaparse-1.4.12.jar!/instaparse/viz.clj",1689946146000,"jar:file:/root/.m2/repository/org/clojure/tools.namespace/1.4.4/tools.namespace-1.4.4.jar!/clojure/tools/namespace/parse.cljc",1689946139000,"jar:file:/root/.m2/repository/weavejester/dependency/0.2.1/dependency-0.2.1.jar!/weavejester/dependency.cljc",1689946093000,"jar:file:/root/.m2/repository/instaparse/instaparse/1.4.12/instaparse-1.4.12.jar!/instaparse/transform.clj",1689946146000,"jar:file:/root/.m2/repository/ring/ring-codec/1.2.0/ring-codec-1.2.0.jar!/ring/util/codec.clj",1689946172000,"jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/instant.clj",1689947050000,"jar:file:/root/.m2/repository/org/clojure/tools.reader/1.3.6/tools.reader-1.3.6.jar!/clojure/tools/reader/default_data_readers.clj",1689946174000,"jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/pprint.cljc",1689947050000,"jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/externs.clj",1689947050000,"file:/home/gmrworkspace/dashboard/shared/src/metabase/mbql/util/match.clj",1690286812000,"jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/vendor/clojure/tools/reader/default_data_readers.clj",1689947050000,"file:/home/gmrworkspace/dashboard/shared/src/metabase/mbql/schema/helpers.cljc",1692013156305,"jar:file:/root/.m2/repository/prismatic/schema/1.4.1/schema-1.4.1.jar!/schema/core.cljc",1689946172000,"file:/home/gmrworkspace/dashboard/shared/src/metabase/shared/util/i18n.clj",1690286812000,"jar:file:/root/.m2/repository/org/clojure/tools.reader/1.3.6/tools.reader-1.3.6.jar!/clojure/tools/reader/edn.clj",1689946174000,"jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/compiler.cljc",1689947050000,"jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/env.cljc",1689947050000,"jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/analyzer/impl/namespaces.cljc",1689947050000,"jar:file:/root/.m2/repository/prismatic/schema/1.4.1/schema-1.4.1.jar!/schema/macros.clj",1689946172000,"file:/home/gmrworkspace/dashboard/src/metabase/util/i18n/plural.clj",1690286813000,"jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/source_map.clj",1689947050000,"jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/util.cljc",1689947050000,"file:/home/gmrworkspace/dashboard/src/metabase/util.cljc",1690286813000,"jar:file:/root/.m2/repository/nano-id/nano-id/1.0.0/nano-id-1.0.0.jar!/nano_id/core.cljc",1689946171000,"file:/home/gmrworkspace/dashboard/src/metabase/plugins/classloader.clj",1692013156125,"jar:file:/root/.m2/repository/medley/medley/1.4.0/medley-1.4.0.jar!/medley/core.cljc",1689946185000,"jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/analyzer.cljc",1689947050000,"jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/analyzer/passes.cljc",1689947050000,"jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/vendor/clojure/data/json.clj",1689947050000,"file:/home/gmrworkspace/dashboard/src/metabase/util/format.cljc",1690286813000,"jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/source_map/base64.clj",1689947050000,"jar:file:/root/.m2/repository/riddley/riddley/0.2.0/riddley-0.2.0.jar!/riddley/walk.clj",1689946160000,"jar:file:/root/.m2/repository/instaparse/instaparse/1.4.12/instaparse-1.4.12.jar!/instaparse/reduction.clj",1689946146000,"jar:file:/root/.m2/repository/org/tcrawley/dynapath/1.1.0/dynapath-1.1.0.jar!/dynapath/util.clj",1689946174000,"jar:file:/root/.m2/repository/camel-snake-kebab/camel-snake-kebab/0.4.3/camel-snake-kebab-0.4.3.jar!/camel_snake_kebab/internals/macros.cljc",1689946178000,"file:/home/gmrworkspace/dashboard/shared/src/metabase/mbql/util/match/impl.cljc",1690286812000,"jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/vendor/clojure/tools/reader/reader_types.clj",1689947050000,"jar:file:/root/.m2/repository/instaparse/instaparse/1.4.12/instaparse-1.4.12.jar!/instaparse/auto_flatten_seq.clj",1689946146000,"jar:file:/root/.m2/repository/instaparse/instaparse/1.4.12/instaparse-1.4.12.jar!/instaparse/core.clj",1689946146000,"jar:file:/root/.m2/repository/org/clojure/core.cache/1.0.225/core.cache-1.0.225.jar!/clojure/core/cache.clj",1689946183000,"jar:file:/root/.m2/repository/potemkin/potemkin/0.4.6/potemkin-0.4.6.jar!/potemkin/types.clj",1689946176000,"jar:file:/root/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/set.clj",1689946092000,"jar:file:/root/.m2/repository/org/clojure/math.numeric-tower/0.0.5/math.numeric-tower-0.0.5.jar!/clojure/math/numeric_tower.clj",1689946148000,"jar:file:/root/.m2/repository/net/cgrand/macrovich/0.2.1/macrovich-0.2.1.jar!/net/cgrand/macrovich.cljc",1689946165000,"jar:file:/root/.m2/repository/colorize/colorize/0.1.1/colorize-0.1.1.jar!/colorize/core.clj",1689946104000,"jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/vendor/clojure/tools/reader/impl/inspect.clj",1689947050000,"jar:file:/root/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/string.clj",1689946092000,"jar:file:/root/.m2/repository/potemkin/potemkin/0.4.6/potemkin-0.4.6.jar!/potemkin.clj",1689946176000,"jar:file:/root/.m2/repository/instaparse/instaparse/1.4.12/instaparse-1.4.12.jar!/instaparse/failure.clj",1689946146000,"jar:file:/root/.m2/repository/prismatic/schema/1.4.1/schema-1.4.1.jar!/schema/spec/variant.cljc",1689946172000,"jar:file:/root/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/core.clj",1689946092000,"file:/home/gmrworkspace/dashboard/src/metabase/util/i18n/impl.clj",1692013156125,"jar:file:/root/.m2/repository/org/clojure/tools.namespace/1.4.4/tools.namespace-1.4.4.jar!/clojure/tools/namespace/dependency.cljc",1689946139000,"jar:file:/root/.m2/repository/prismatic/schema/1.4.1/schema-1.4.1.jar!/schema/spec/leaf.cljc",1689946172000,"jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/analyzer/passes/and_or.cljc",1689947050000,"jar:file:/root/.m2/repository/riddley/riddley/0.2.0/riddley-0.2.0.jar!/riddley/compiler.clj",1689946160000,"jar:file:/root/.m2/repository/org/clojure/core.memoize/1.0.257/core.memoize-1.0.257.jar!/clojure/core/memoize.clj",1689946178000,"jar:file:/root/.m2/repository/instaparse/instaparse/1.4.12/instaparse-1.4.12.jar!/instaparse/print.clj",1689946146000,"jar:file:/root/.m2/repository/org/clojure/tools.namespace/1.4.4/tools.namespace-1.4.4.jar!/clojure/tools/namespace/track.cljc",1689946139000,"jar:file:/root/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/pprint.clj",1689946092000,"jar:file:/root/.m2/repository/org/clojure/java.classpath/1.0.0/java.classpath-1.0.0.jar!/clojure/java/classpath.clj",1689946162000,"jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/js_deps.cljc",1689947050000,"jar:file:/root/.m2/repository/cheshire/cheshire/5.11.0/cheshire-5.11.0.jar!/cheshire/factory.clj",1689946173000,"jar:file:/root/.m2/repository/org/clojure/tools.reader/1.3.6/tools.reader-1.3.6.jar!/clojure/tools/reader/impl/errors.clj",1689946174000,"jar:file:/root/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/walk.clj",1689946092000,"jar:file:/root/.m2/repository/org/clojure/tools.reader/1.3.6/tools.reader-1.3.6.jar!/clojure/tools/reader.clj",1689946174000,"jar:file:/root/.m2/repository/prismatic/schema/1.4.1/schema-1.4.1.jar!/schema/spec/core.cljc",1689946172000,"jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/core.cljc",1689947050000,"jar:file:/root/.m2/repository/cheshire/cheshire/5.11.0/cheshire-5.11.0.jar!/cheshire/generate.clj",1689946173000,"jar:file:/root/.m2/repository/org/clojure/tools.reader/1.3.6/tools.reader-1.3.6.jar!/clojure/tools/reader/reader_types.clj",1689946174000,"jar:file:/root/.m2/repository/cheshire/cheshire/5.11.0/cheshire-5.11.0.jar!/cheshire/parse.clj",1689946173000,"file:/home/gmrworkspace/dashboard/src/metabase/util/i18n.clj",1692013156125,"jar:file:/root/.m2/repository/instaparse/instaparse/1.4.12/instaparse-1.4.12.jar!/instaparse/cfg.clj",1689946146000,"jar:file:/root/.m2/repository/cheshire/cheshire/5.11.0/cheshire-5.11.0.jar!/cheshire/core.clj",1689946173000,"jar:file:/root/.m2/repository/instaparse/instaparse/1.4.12/instaparse-1.4.12.jar!/instaparse/gll.clj",1689946146000,"jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/vendor/clojure/tools/reader.clj",1689947050000,"jar:file:/root/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/edn.clj",1689946092000,"jar:file:/root/.m2/repository/nano-id/nano-id/1.0.0/nano-id-1.0.0.jar!/nano_id/random.cljc",1689946171000,"jar:file:/root/.m2/repository/environ/environ/1.2.0/environ-1.2.0.jar!/environ/core.cljc",1689946163000,"jar:file:/root/.m2/repository/prismatic/schema/1.4.1/schema-1.4.1.jar!/schema/spec/collection.cljc",1689946172000,"jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/vendor/clojure/tools/reader/impl/errors.clj",1689947050000,"jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/tagged_literals.cljc",1689947050000,"jar:file:/root/.m2/repository/instaparse/instaparse/1.4.12/instaparse-1.4.12.jar!/instaparse/repeat.clj",1689946146000,"jar:file:/root/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/java/io.clj",1689946092000,"jar:file:/root/.m2/repository/com/lambdaisland/glogi/1.2.164/glogi-1.2.164.jar!/lambdaisland/glogi.clj",1689947043000,"jar:file:/root/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/instant.clj",1689946092000,"file:/home/gmrworkspace/dashboard/shared/src/metabase/shared/util/namespaces.clj",1690286812000,"jar:file:/root/.m2/repository/org/clojure/tools.namespace/1.4.4/tools.namespace-1.4.4.jar!/clojure/tools/namespace/file.clj",1689946139000,"jar:file:/root/.m2/repository/org/clojure/core.match/1.0.1/core.match-1.0.1.jar!/cljs/core/match.clj",1689946174000,"file:/home/gmrworkspace/dashboard/shared/src/metabase/mbql/schema/macros.clj",1690286812000,"jar:file:/root/.m2/repository/prismatic/schema/1.4.1/schema-1.4.1.jar!/schema/utils.cljc",1689946172000,"file:/home/gmrworkspace/dashboard/src/metabase/config.clj",1692013154929,"file:/home/gmrworkspace/dashboard/src/metabase/util/log.clj",1690286813000,"jar:file:/root/.m2/repository/org/clojure/tools.reader/1.3.6/tools.reader-1.3.6.jar!/clojure/tools/reader/impl/inspect.clj",1689946174000,"jar:file:/root/.m2/repository/instaparse/instaparse/1.4.12/instaparse-1.4.12.jar!/instaparse/combinators_source.clj",1689946146000,"jar:file:/root/.m2/repository/instaparse/instaparse/1.4.12/instaparse-1.4.12.jar!/instaparse/abnf.clj",1689946146000,"jar:file:/root/.m2/repository/org/clojure/tools.namespace/1.4.4/tools.namespace-1.4.4.jar!/clojure/tools/namespace/find.clj",1689946139000,"jar:file:/root/.m2/repository/org/tcrawley/dynapath/1.1.0/dynapath-1.1.0.jar!/dynapath/dynamic_classpath.clj",1689946174000,"jar:file:/root/.m2/repository/cheshire/cheshire/5.11.0/cheshire-5.11.0.jar!/cheshire/generate_seq.clj",1689946173000,"file:/home/gmrworkspace/dashboard/src/metabase/util/jvm.clj",1692013156125],"~:analyzer",["^ ","^3",null,"^4",["^ "],"^5",["^ ","^6","Logic for taking any sort of weird MBQL query and normalizing it into a standardized, canonical form. You can think\n  of this like taking any 'valid' MBQL query and rewriting it as-if it was written in perfect up-to-date MBQL in the\n  latest version. There are four main things done here, done as four separate steps:\n\n  #### NORMALIZING TOKENS\n\n  Converting all identifiers to lower-case, lisp-case keywords. e.g. `{\"SOURCE_TABLE\" 10}` becomes `{:source-table\n  10}`.\n\n  #### CANONICALIZING THE QUERY\n\n  Rewriting deprecated MBQL 95/98 syntax and other things that are still supported for backwards-compatibility in\n  canonical modern MBQL syntax. For example `{:breakout [:count 10]}` becomes `{:breakout [[:count [:field 10 nil]]]}`.\n\n  #### WHOLE-QUERY TRANSFORMATIONS\n\n  Transformations and cleanup of the query structure as a whole to fix inconsistencies. Whereas the canonicalization\n  phase operates on a lower-level, transforming invidual clauses, this phase focuses on transformations that affect\n  multiple clauses, such as removing duplicate references to Fields if they are specified in both the `:breakout` and\n  `:fields` clauses.\n\n  This is not the only place that does such transformations; several pieces of QP middleware perform similar\n  individual transformations, such as `reconcile-breakout-and-order-by-bucketing`.\n\n  #### REMOVING EMPTY CLAUSES\n\n  Removing empty clauses like `{:aggregation nil}` or `{:breakout []}`.\n\n  Token normalization occurs first, followed by canonicalization, followed by removing empty clauses.","^7","metabase/mbql/normalize.cljc","^8",1,"^9",5,"^:",1,"^;",28],"^<",["^ ","^=","^>","^?","^@","^A","^B","^C","^D","^E","^F"],"^G",null,"^H",["^I",[]],"^J","^K","^L",["^ "],"^O",null,"^P",["^ ","^Q","^R","^S","^T","^U","^V","^W","^W","^X","^W","^Y","^Y","^Z","^Y","^@","^@","^[","^[","^10","^11","^R","^R","~$m","^12","^V","^V","^T","^T","^11","^11","^12","^12"],"^13",["^I",["^14"]],"~:shadow/js-access-global",["^I",["Error"]],"^15",null,"~:defs",["^ ","~$normalize-native-query",["^ ","~:protocol-inline",null,"^5",["^ ","^7","metabase/mbql/normalize.cljc","^8",337,"^9",8,"^:",337,"^;",30,"~:private",true,"~:arglists",["^18",["~$quote",["^18",[["~$native-query"]]]]],"^6","For native queries, normalize the top-level keys, and template tags, but nothing else."],"^9[",true,"^J","^2M","^7","metabase/mbql/normalize.cljc","^;",30,"~:method-params",["^18",[["^:2"]]],"~:protocol-impl",null,"~:arglists-meta",["^18",[null,null]],"^9",1,"~:variadic?",false,"^8",337,"~:ret-tag",["^I",[null,"~$clj","~$any"]],"^:",337,"~:max-fixed-arity",1,"~:fn-var",true,"^:0",["^18",["^:1",["^18",[["^:2"]]]]],"^6","For native queries, normalize the top-level keys, and template tags, but nothing else."],"~$canonicalize-count-clause",["^ ","^9Z",null,"^5",["^ ","^7","metabase/mbql/normalize.cljc","^8",580,"^9",8,"^:",580,"^;",33,"^9[",true,"^:0",["^18",["^:1",["^18",[[["~$clause-name","~$field"]]]]]]],"^9[",true,"^J","^4A","^7","metabase/mbql/normalize.cljc","^;",33,"^:3",["^18",[["~$p__64317"]]],"^:4",null,"^:5",["^18",[null,null]],"^9",1,"^:6",false,"^8",580,"^:7","~$cljs.core/IVector","^:",580,"^::",1,"^:;",true,"^:0",["^18",["^:1",["^18",[[["^:=","^:>"]]]]]]],"~$canonicalize-implicit-field-id",["^ ","^9Z",null,"^5",["^ ","^7","metabase/mbql/normalize.cljc","^8",442,"^9",8,"^:",442,"^;",38,"^9[",true,"^:0",["^18",["^:1",["^18",[["~$clause"]]]]],"^6","If `clause` is a raw integer ID wrap it in a `:field` clause. Either way, canonicalize the resulting clause."],"^9[",true,"^J","^4D","^7","metabase/mbql/normalize.cljc","^;",38,"^:3",["^18",[["^:B"]]],"^:4",null,"^:5",["^18",[null,null]],"^9",1,"^:6",false,"^8",442,"^:7","^:9","^:",442,"^::",1,"^:;",true,"^:0",["^18",["^:1",["^18",[["^:B"]]]]],"^6","If `clause` is a raw integer ID wrap it in a `:field` clause. Either way, canonicalize the resulting clause."],"~$normalize-join",["^ ","^9Z",null,"^5",["^ ","^7","metabase/mbql/normalize.cljc","^8",314,"^9",8,"^:",314,"^;",22,"^9[",true,"^:0",["^18",["^:1",["^18",[["~$join"]]]]]],"^9[",true,"^J","^4F","^7","metabase/mbql/normalize.cljc","^;",22,"^:3",["^18",[["^:D"]]],"^:4",null,"^:5",["^18",[null,null]],"^9",1,"^:6",false,"^8",314,"^:7",["^I",[null,"^:8","^:9","~$clj-nil"]],"^:",314,"^::",1,"^:;",true,"^:0",["^18",["^:1",["^18",[["^:D"]]]]]],"~$remove-breakout-fields-from-fields",["^ ","^9Z",null,"^5",["^ ","^7","metabase/mbql/normalize.cljc","^8",783,"^9",8,"^:",783,"^;",42,"^9[",true,"^:0",["^18",["^:1",["^18",[[["^52",[["^ ","~:keys",["~$breakout","~$fields"]],"~:query","^1:","~$query"]]]]]]],"^6","Remove any Fields specified in both `:breakout` and `:fields` from `:fields`; it is implied that any breakout Field\n  will be returned, specifying it in both would imply it is to be returned twice, which tends to cause confusion for\n  the QP and drivers. (This is done to work around historic bugs with the way queries were generated on the frontend;\n  I'm not sure this behavior makes sense, but removing it would break existing queries.)\n\n  We will remove either exact matches:\n\n    {:breakout [[:field-id 10]], :fields [[:field-id 10]]} ; -> {:breakout [[:field-id 10]]}\n\n  or unbucketed matches:\n\n    {:breakout [[:datetime-field [:field-id 10] :month]], :fields [[:field-id 10]]}\n    ;; -> {:breakout [[:field-id 10]]}"],"^9[",true,"^J","^4P","^7","metabase/mbql/normalize.cljc","^;",42,"^:3",["^18",[["~$p__64594"]]],"^:4",null,"^:5",["^18",[null,null]],"^9",1,"^:6",false,"^8",783,"^:7",["^I",[null,"^:8","^:9","^:E"]],"^:",783,"^::",1,"^:;",true,"^:0",["^18",["^:1",["^18",[[["^52",[["^ ","^:G",["^:H","^:I"]],"^:J","^1:","^:K"]]]]]]],"^6","Remove any Fields specified in both `:breakout` and `:fields` from `:fields`; it is implied that any breakout Field\n  will be returned, specifying it in both would imply it is to be returned twice, which tends to cause confusion for\n  the QP and drivers. (This is done to work around historic bugs with the way queries were generated on the frontend;\n  I'm not sure this behavior makes sense, but removing it would break existing queries.)\n\n  We will remove either exact matches:\n\n    {:breakout [[:field-id 10]], :fields [[:field-id 10]]} ; -> {:breakout [[:field-id 10]]}\n\n  or unbucketed matches:\n\n    {:breakout [[:datetime-field [:field-id 10] :month]], :fields [[:field-id 10]]}\n    ;; -> {:breakout [[:field-id 10]]}"],"~$normalize",["^ ","^5",["^ ","^7","metabase/mbql/normalize.cljc","^8",882,"^9",36,"^:",882,"^;",45,"^:0",["^18",["^:1",["^18",[["~$outer-query"]]]]]],"^J","^3@","^7","metabase/mbql/normalize.cljc","^;",45,"^9",1,"^8",882,"^:",882,"~:tag","~$function","^:0",["^18",["^:1",["^18",[["^:N"]]]]],"^6","Normalize the tokens in a Dashboard query (i.e., make them all `lisp-case` keywords), rewrite deprecated clauses as\n  up-to-date MBQL 2000, and remove empty clauses."],"~$canonicalize-top-level-mbql-clauses",["^ ","^9Z",null,"^5",["^ ","^7","metabase/mbql/normalize.cljc","^8",741,"^9",8,"^:",741,"^;",43,"^9[",true,"^:0",["^18",["^:1",["^18",[["~$mbql-query"]]]]],"^6","Perform specific steps to canonicalize the various top-level clauses in an MBQL query."],"^9[",true,"^J","^3:","^7","metabase/mbql/normalize.cljc","^;",43,"^:3",["^18",[["^:R"]]],"^:4",null,"^:5",["^18",[null,null]],"^9",1,"^:6",false,"^8",741,"^:7",["^I",[null,"^:8","^:9"]],"^:",741,"^::",1,"^:;",true,"^:0",["^18",["^:1",["^18",[["^:R"]]]]],"^6","Perform specific steps to canonicalize the various top-level clauses in an MBQL query."],"~$mbql-clause?",["^ ","^9Z",null,"^5",["^ ","^7","metabase/mbql/normalize.cljc","^8",40,"^9",8,"^:",40,"^;",20,"^9[",true,"^:0",["^18",["^:1",["^18",[["~$x"]]]]],"^6","True if `x` is an MBQL clause (a sequence with a token as its first arg). (This is different from the implementation\n  in `mbql.u` because it also supports un-normalized clauses. You shouldn't need to use this outside of this\n  namespace.)"],"^9[",true,"^J","^3<","^7","metabase/mbql/normalize.cljc","^;",20,"^:3",["^18",[["~$x"]]],"^:4",null,"^:5",["^18",[null,null]],"^9",1,"^:6",false,"^8",40,"^:7",["^I",["~$boolean","^:9"]],"^:",40,"^::",1,"^:;",true,"^:0",["^18",["^:1",["^18",[["~$x"]]]]],"^6","True if `x` is an MBQL clause (a sequence with a token as its first arg). (This is different from the implementation\n  in `mbql.u` because it also supports un-normalized clauses. You shouldn't need to use this outside of this\n  namespace.)"],"~$canonicalize-simple-filter-clause",["^ ","^9Z",null,"^5",["^ ","^7","metabase/mbql/normalize.cljc","^8",540,"^9",8,"^:",540,"^;",41,"^9[",true,"^:0",["^18",["^:1",["^18",[[["~$filter-name","~$first-arg","~$&","~$other-args"]]]]]]],"^9[",true,"^J","^3?","^7","metabase/mbql/normalize.cljc","^;",41,"^:3",["^18",[["~$p__64246"]]],"^:4",null,"^:5",["^18",[null,null]],"^9",1,"^:6",false,"^8",540,"^:7",["^I",[null,"^:8","^:9"]],"^:",540,"^::",1,"^:;",true,"^:0",["^18",["^:1",["^18",[[["^:V","^:W","~$&","^:X"]]]]]]],"~$normalize-template-tags",["^ ","^9Z",null,"^5",["^ ","^7","metabase/mbql/normalize.cljc","^8",281,"^9",8,"^:",281,"^;",31,"^9[",true,"^:0",["^18",["^:1",["^18",[["~$template-tags"]]]]],"^6","Normalize native-query template tags. Like `expressions` we want to preserve the original name rather than normalize\n  it."],"^9[",true,"^J","^4T","^7","metabase/mbql/normalize.cljc","^;",31,"^:3",["^18",[["^:["]]],"^:4",null,"^:5",["^18",[null,null]],"^9",1,"^:6",false,"^8",281,"^:7","^:9","^:",281,"^::",1,"^:;",true,"^:0",["^18",["^:1",["^18",[["^:["]]]]],"^6","Normalize native-query template tags. Like `expressions` we want to preserve the original name rather than normalize\n  it."],"~$normalize-source-metadata",["^ ","^9Z",null,"^5",["^ ","^7","metabase/mbql/normalize.cljc","^8",329,"^9",7,"^:",329,"^;",32,"^:0",["^18",["^:1",["^18",[["~$metadata"]]]]],"^6","Normalize source/results metadata for a single column."],"^J","^1P","^7","metabase/mbql/normalize.cljc","^;",32,"^:3",["^18",[["^;1"]]],"^:4",null,"^:5",["^18",[null,null]],"^9",1,"^:6",false,"^8",329,"^:7",["^I",[null,"^:8","^:9"]],"^:",329,"^::",1,"^:;",true,"^:0",["^18",["^:1",["^18",[["^;1"]]]]],"^6","Normalize source/results metadata for a single column."],"~$normalize-order-by-tokens",["^ ","^9Z",null,"^5",["^ ","^7","metabase/mbql/normalize.cljc","^8",237,"^9",8,"^:",237,"^;",33,"^9[",true,"^:0",["^18",["^:1",["^18",[["~$clauses"]]]]],"^6","Normalize tokens in the order-by clause, which can have different syntax when using MBQL 95 or 98\n  rules (`[<field> :asc]` vs `[:asc <field>]`, for example)."],"^9[",true,"^J","^1X","^7","metabase/mbql/normalize.cljc","^;",33,"^:3",["^18",[["^;3"]]],"^:4",null,"^:5",["^18",[null,null]],"^9",1,"^:6",false,"^8",237,"^:7",["^I",["^:8","^:@","^:9","~$cljs.core/MetaFn","^:E"]],"^:",237,"^::",1,"^:;",true,"^:0",["^18",["^:1",["^18",[["^;3"]]]]],"^6","Normalize tokens in the order-by clause, which can have different syntax when using MBQL 95 or 98\n  rules (`[<field> :asc]` vs `[:asc <field>]`, for example)."],"~$canonicalize-native-query",["^ ","^9Z",null,"^5",["^ ","^7","metabase/mbql/normalize.cljc","^8",727,"^9",8,"^:",727,"^;",33,"^9[",true,"^:0",["^18",["^:1",["^18",[[["^ ","^:G",["^:["],"^1:","^:2"]]]]]]],"^9[",true,"^J","^3S","^7","metabase/mbql/normalize.cljc","^;",33,"^:3",["^18",[["~$p__64568"]]],"^:4",null,"^:5",["^18",[null,null]],"^9",1,"^:6",false,"^8",727,"^:7",["^I",[null,"^:8","^:9","^:E"]],"^:",727,"^::",1,"^:;",true,"^:0",["^18",["^:1",["^18",[[["^ ","^:G",["^:["],"^1:","^:2"]]]]]]],"~$non-empty?",["^ ","^9Z",null,"^5",["^ ","^7","metabase/mbql/normalize.cljc","^8",736,"^9",8,"^:",736,"^;",18,"^9[",true,"^:0",["^18",["^:1",["^18",[["~$x"]]]]]],"^9[",true,"^J","^3V","^7","metabase/mbql/normalize.cljc","^;",18,"^:3",["^18",[["~$x"]]],"^:4",null,"^:5",["^18",[null,null]],"^9",1,"^:6",false,"^8",736,"^:7","~$seq","^:",736,"^::",1,"^:;",true,"^:0",["^18",["^:1",["^18",[["~$x"]]]]]],"~$remove-empty-clauses-in-join",["^ ","^9Z",null,"^5",["^ ","^7","metabase/mbql/normalize.cljc","^8",840,"^9",8,"^:",840,"^;",36,"^9[",true,"^:0",["^18",["^:1",["^18",[["^:D"]]]]]],"^9[",true,"^J","^3N","^7","metabase/mbql/normalize.cljc","^;",36,"^:3",["^18",[["^:D"]]],"^:4",null,"^:5",["^18",[null,null]],"^9",1,"^:6",false,"^8",840,"^:7","^:9","^:",840,"^::",1,"^:;",true,"^:0",["^18",["^:1",["^18",[["^:D"]]]]]],"~$remove-empty-clauses-in-sequence",["^ ","^9Z",null,"^5",["^ ","^7","metabase/mbql/normalize.cljc","^8",834,"^9",8,"^:",834,"^;",40,"^9[",true,"^:0",["^18",["^:1",["^18",[["~$xs","~$path"]]]]]],"^9[",true,"^J","^1R","^7","metabase/mbql/normalize.cljc","^;",40,"^:3",["^18",[["^;;","^;<"]]],"^:4",null,"^:5",["^18",[null,null]],"^9",1,"^:6",false,"^8",834,"^:7",["^I",["^:8","^:E"]],"^:",834,"^::",2,"^:;",true,"^:0",["^18",["^:1",["^18",[["^;;","^;<"]]]]]],"~$remove-empty-clauses",["^ ","^9Z",null,"^5",["^ ","^9[",true,"^7","metabase/mbql/normalize.cljc","^;",28,"~:top-fn",["^ ","^:6",false,"~:fixed-arity",2,"^::",2,"^:3",[["^:K"],["~$x","^;<"]],"^:0",["^18",[["^:K"],["~$x","^;<"]]],"^:5",["^18",[null,null]]],"^9",8,"^8",857,"^:",857,"^:0",["^18",["^:1",["^18",[["^:K"],["~$x","^;<"]]]]],"^6","Remove any empty or `nil` clauses in a query."],"^9[",true,"^J","^26","^7","metabase/mbql/normalize.cljc","^;",28,"^;>",["^ ","^:6",false,"^;?",2,"^::",2,"^:3",[["^:K"],["~$x","^;<"]],"^:0",["^18",[["^:K"],["~$x","^;<"]]],"^:5",["^18",[null,null]]],"^:3",[["^:K"],["~$x","^;<"]],"^:4",null,"^;?",2,"^:5",["^18",[null,null]],"^9",1,"^:6",false,"~:methods",[["^ ","^;?",1,"^:6",false,"^:O","^:9"],["^ ","^;?",2,"^:6",false]],"^8",857,"^:",857,"^::",2,"^:;",true,"^:0",["^18",[["^:K"],["~$x","^;<"]]],"^6","Remove any empty or `nil` clauses in a query."],"~$normalize-expressions-tokens",["^ ","^9Z",null,"^5",["^ ","^7","metabase/mbql/normalize.cljc","^8",229,"^9",8,"^:",229,"^;",36,"^9[",true,"^:0",["^18",["^:1",["^18",[["~$expressions-clause"]]]]],"^6","For expressions, we don't want to normalize the name of the expression; keep that as is, and make it a string;\n   normalize the definitions as normal."],"^9[",true,"^J","^3C","^7","metabase/mbql/normalize.cljc","^;",36,"^:3",["^18",[["^;B"]]],"^:4",null,"^:5",["^18",[null,null]],"^9",1,"^:6",false,"^8",229,"^:7",["^I",[null,"^:8","^:9"]],"^:",229,"^::",1,"^:;",true,"^:0",["^18",["^:1",["^18",[["^;B"]]]]],"^6","For expressions, we don't want to normalize the name of the expression; keep that as is, and make it a string;\n   normalize the definitions as normal."],"~$canonicalize-breakouts",["^ ","^9Z",null,"^5",["^ ","^7","metabase/mbql/normalize.cljc","^8",690,"^9",8,"^:",690,"^;",30,"^9[",true,"^:0",["^18",["^:1",["^18",[["~$breakouts"]]]]]],"^9[",true,"^J","^3J","^7","metabase/mbql/normalize.cljc","^;",30,"^:3",["^18",[["^;D"]]],"^:4",null,"^:5",["^18",[null,null]],"^9",1,"^:6",false,"^8",690,"^:7",["^I",[null,"^:E"]],"^:",690,"^::",1,"^:;",true,"^:0",["^18",["^:1",["^18",[["^;D"]]]]]],"~$normalize-fragment",["^ ","^9Z",null,"^5",["^ ","^7","metabase/mbql/normalize.cljc","^8",897,"^9",7,"^:",897,"^;",25,"^:0",["^18",["^:1",["^18",[["^;<","~$x"]]]]],"^6","Normalize just a specific fragment of a query, such as just the inner MBQL part or just a filter clause. `path` is\n  where this fragment would normally live in a full query.\n\n    (normalize-fragment [:query :filter] [\"=\" 100 200])\n    ;;-> [:= [:field-id 100] 200]","~:style/indent",1],"^J","^3F","^7","metabase/mbql/normalize.cljc","^;",25,"^:3",["^18",[["^;<","~$x"]]],"^:4",null,"^:5",["^18",[null,null]],"^9",1,"^:6",false,"^8",897,"^:7",["^I",["^:9","^:E"]],"^;F",1,"^:",897,"^::",2,"^:;",true,"^:0",["^18",["^:1",["^18",[["^;<","~$x"]]]]],"^6","Normalize just a specific fragment of a query, such as just the inner MBQL part or just a filter clause. `path` is\n  where this fragment would normally live in a full query.\n\n    (normalize-fragment [:query :filter] [\"=\" 100 200])\n    ;;-> [:= [:field-id 100] 200]"],"~$template-tag-definition-key->transform-fn",["^ ","^9Z",null,"^5",["^ ","^7","metabase/mbql/normalize.cljc","^8",249,"^9",8,"^:",249,"^;",49,"^9[",true,"^:0",["^18",["^:1",["^18",[["~$k"]]]]],"^6","Get the function that should be used to transform values for normalized key `k` in a template tag definition."],"^9[",true,"^J","^3Y","^7","metabase/mbql/normalize.cljc","^;",49,"^:3",["^18",[["~$k"]]],"^:4",null,"^:5",["^18",[null,null]],"^9",1,"^:6",false,"^8",249,"^:7",["^I",[null,"^:9"]],"^:",249,"^::",1,"^:;",true,"^:0",["^18",["^:1",["^18",[["~$k"]]]]],"^6","Get the function that should be used to transform values for normalized key `k` in a template tag definition."],"~$path->special-token-normalization-fn",["^ ","^5",["^ ","^7","metabase/mbql/normalize.cljc","^8",345,"^9",16,"^:",345,"^;",52,"^9[",true],"^9[",true,"^J","^33","^7","metabase/mbql/normalize.cljc","^;",52,"^9",1,"^8",345,"^:",345,"^:O","~$cljs.core/IMap","^6","Map of special functions that should be used to perform token normalization for a given path. For example, the\n  `:expressions` key in an MBQL query should preserve the case of the expression names; this custom behavior is\n  defined below."],"~$canonicalize-compound-filter-clause",["^ ","^9Z",null,"^5",["^ ","^7","metabase/mbql/normalize.cljc","^8",511,"^9",8,"^:",511,"^;",43,"^9[",true,"^:0",["^18",["^:1",["^18",[[["^:V","~$&","~$args"]]]]]]],"^9[",true,"^J","^2D","^7","metabase/mbql/normalize.cljc","^;",43,"^:3",["^18",[["~$p__64175"]]],"^:4",null,"^:5",["^18",[null,null]],"^9",1,"^:6",false,"^8",511,"^:7","^:9","^:",511,"^::",1,"^:;",true,"^:0",["^18",["^:1",["^18",[[["^:V","~$&","^;K"]]]]]]],"~$normalize-template-tag-definition",["^ ","^9Z",null,"^5",["^ ","^7","metabase/mbql/normalize.cljc","^8",262,"^9",8,"^:",262,"^;",41,"^9[",true,"^:0",["^18",["^:1",["^18",[["~$tag-definition"]]]]],"^6","For a template tag definition, normalize all the keys appropriately."],"^9[",true,"^J","^2T","^7","metabase/mbql/normalize.cljc","^;",41,"^:3",["^18",[["^;N"]]],"^:4",null,"^:5",["^18",[null,null]],"^9",1,"^:6",false,"^8",262,"^:7",["^I",["^:8","^:9"]],"^:",262,"^::",1,"^:;",true,"^:0",["^18",["^:1",["^18",[["^;N"]]]]],"^6","For a template tag definition, normalize all the keys appropriately."],"~$is-clause?",["^ ","^9Z",null,"^5",["^ ","^7","metabase/mbql/normalize.cljc","^8",56,"^9",7,"^:",56,"^;",17,"^:0",["^18",["^:1",["^18",[["~$k-or-ks","~$x"]]]]],"^6","If `x` an MBQL clause, and an instance of clauses defined by keyword(s) `k-or-ks`?\n\n    (is-clause? :count [:count 10])        ; -> true\n    (is-clause? #{:+ :- :* :/} [:+ 10 20]) ; -> true\n\n  (This is different from the implementation in `mbql.u` because it also supports un-normalized clauses. You shouldn't\n  need to use this outside of this namespace.)"],"^J","^2N","^7","metabase/mbql/normalize.cljc","^;",17,"^:3",["^18",[["^;P","~$x"]]],"^:4",null,"^:5",["^18",[null,null]],"^9",1,"^:6",false,"^8",56,"^:7",["^I",["^:T","^:9"]],"^:",56,"^::",2,"^:;",true,"^:0",["^18",["^:1",["^18",[["^;P","~$x"]]]]],"^6","If `x` an MBQL clause, and an instance of clauses defined by keyword(s) `k-or-ks`?\n\n    (is-clause? :count [:count 10])        ; -> true\n    (is-clause? #{:+ :- :* :/} [:+ 10 20]) ; -> true\n\n  (This is different from the implementation in `mbql.u` because it also supports un-normalized clauses. You shouldn't\n  need to use this outside of this namespace.)"],"~$normalize-ag-clause-tokens",["^ ","^9Z",null,"^5",["^ ","^7","metabase/mbql/normalize.cljc","^8",207,"^9",8,"^:",207,"^;",34,"^9[",true,"^:0",["^18",["^:1",["^18",[["~$ag-clause"]]]]],"^6","For old-style aggregations like `{:aggregation :count}` make sure we normalize the ag type (`:count`). Other wacky\n  clauses like `{:aggregation [:count :count]}` need to be handled as well :("],"^9[",true,"^J","^4G","^7","metabase/mbql/normalize.cljc","^;",34,"^:3",["^18",[["^;R"]]],"^:4",null,"^:5",["^18",[null,null]],"^9",1,"^:6",false,"^8",207,"^:7",["^I",[null,"^:8","^:9","^2L","^:E"]],"^:",207,"^::",1,"^:;",true,"^:0",["^18",["^:1",["^18",[["^;R"]]]]],"^6","For old-style aggregations like `{:aggregation :count}` make sure we normalize the ag type (`:count`). Other wacky\n  clauses like `{:aggregation [:count :count]}` need to be handled as well :("],"~$canonicalize-order-by",["^ ","^9Z",null,"^5",["^ ","^7","metabase/mbql/normalize.cljc","^8",695,"^9",8,"^:",695,"^;",29,"^9[",true,"^:0",["^18",["^:1",["^18",[["^;3"]]]]],"^6","Make sure order by clauses like `[:asc 10]` get `:field-id` added where appropriate, e.g. `[:asc [:field-id 10]]`"],"^9[",true,"^J","^4B","^7","metabase/mbql/normalize.cljc","^;",29,"^:3",["^18",[["^;3"]]],"^:4",null,"^:5",["^18",[null,null]],"^9",1,"^:6",false,"^8",695,"^:7","^:9","^:",695,"^::",1,"^:;",true,"^:0",["^18",["^:1",["^18",[["^;3"]]]]],"^6","Make sure order by clauses like `[:asc 10]` get `:field-id` added where appropriate, e.g. `[:asc [:field-id 10]]`"],"~$canonicalize-source-query",["^ ","^9Z",null,"^5",["^ ","^7","metabase/mbql/normalize.cljc","^8",731,"^9",8,"^:",731,"^;",33,"^9[",true,"^:0",["^18",["^:1",["^18",[[["^ ","~$native?","~:native","^1:","~$source-query"]]]]]]],"^9[",true,"^J","^4V","^7","metabase/mbql/normalize.cljc","^;",33,"^:3",["^18",[["~$p__64576"]]],"^:4",null,"^:5",["^18",[null,null]],"^9",1,"^:6",false,"^8",731,"^:7",["^I",[null,"^:8","^:9","^:E"]],"^:",731,"^::",1,"^:;",true,"^:0",["^18",["^:1",["^18",[[["^ ","^;U","^;V","^1:","^;W"]]]]]]],"~$canonicalize-inner-mbql-query",["^ ","^5",["^ ","^7","metabase/mbql/normalize.cljc","^8",751,"^9",40,"^:",751,"^;",69,"^:0",["^18",["^:1",["^18",[["^:K"]]]]],"^9[",true],"^9[",true,"^J","^4O","^7","metabase/mbql/normalize.cljc","^;",69,"^9",1,"^8",751,"^:",751,"^:O","^:P","^:0",["^18",["^:1",["^18",[["^:K"]]]]]],"~$normalize-source-query",["^ ","^9Z",null,"^5",["^ ","^7","metabase/mbql/normalize.cljc","^8",305,"^9",8,"^:",305,"^;",30,"^9[",true,"^:0",["^18",["^:1",["^18",[["^;W"]]]]]],"^9[",true,"^J","^50","^7","metabase/mbql/normalize.cljc","^;",30,"^:3",["^18",[["^;W"]]],"^:4",null,"^:5",["^18",[null,null]],"^9",1,"^:6",false,"^8",305,"^:7",["^I",[null,"^:9"]],"^:",305,"^::",1,"^:;",true,"^:0",["^18",["^:1",["^18",[["^;W"]]]]]],"~$aggregation-subclause?",["^ ","^9Z",null,"^5",["^ ","^7","metabase/mbql/normalize.cljc","^8",198,"^9",8,"^:",198,"^;",30,"^9[",true,"^:0",["^18",["^:1",["^18",[["~$x"]]]]]],"^9[",true,"^J","^4Y","^7","metabase/mbql/normalize.cljc","^;",30,"^:3",["^18",[["~$x"]]],"^:4",null,"^:5",["^18",[null,null]],"^9",1,"^:6",false,"^8",198,"^:7",["^I",["^:9","^:E"]],"^:",198,"^::",1,"^:;",true,"^:0",["^18",["^:1",["^18",[["~$x"]]]]]],"~$canonicalize-template-tag",["^ ","^9Z",null,"^5",["^ ","^7","metabase/mbql/normalize.cljc","^8",719,"^9",8,"^:",719,"^;",33,"^9[",true,"^:0",["^18",["^:1",["^18",[[["^ ","^:G",["~$dimension"],"^1:","~$tag"]]]]]]],"^9[",true,"^J","^3A","^7","metabase/mbql/normalize.cljc","^;",33,"^:3",["^18",[["~$p__64547"]]],"^:4",null,"^:5",["^18",[null,null]],"^9",1,"^:6",false,"^8",719,"^:7",["^I",[null,"^:8","^:9","^:E"]],"^:",719,"^::",1,"^:;",true,"^:0",["^18",["^:1",["^18",[[["^ ","^:G",["^<1"],"^1:","^<2"]]]]]]],"~$normalize-query-parameter",["^ ","^9Z",null,"^5",["^ ","^7","metabase/mbql/normalize.cljc","^8",294,"^9",7,"^:",294,"^;",32,"^:0",["^18",["^:1",["^18",[[["^ ","^:G",["~$type","~$target","~$id","~$values_source_config"],"^1:","~$param"]]]]]],"^6","Normalize a parameter in the query `:parameters` list."],"^J","^4[","^7","metabase/mbql/normalize.cljc","^;",32,"^:3",["^18",[["~$p__63983"]]],"^:4",null,"^:5",["^18",[null,null]],"^9",1,"^:6",false,"^8",294,"^:7",["^I",[null,"^:8","^:9","^:E"]],"^:",294,"^::",1,"^:;",true,"^:0",["^18",["^:1",["^18",[[["^ ","^:G",["^<5","^<6","^<7","^<8"],"^1:","^<9"]]]]]],"^6","Normalize a parameter in the query `:parameters` list."],"~$canonicalize-simple-aggregation-with-field",["^ ","^9Z",null,"^5",["^ ","^7","metabase/mbql/normalize.cljc","^8",590,"^9",8,"^:",590,"^;",50,"^9[",true,"^:0",["^18",["^:1",["^18",[[["^:=","^:>"]]]]]]],"^9[",true,"^J","^3G","^7","metabase/mbql/normalize.cljc","^;",50,"^:3",["^18",[["~$p__64352"]]],"^:4",null,"^:5",["^18",[null,null]],"^9",1,"^:6",false,"^8",590,"^:7","^:@","^:",590,"^::",1,"^:;",true,"^:0",["^18",["^:1",["^18",[[["^:=","^:>"]]]]]]],"~$path->special-remove-empty-clauses-fn",["^ ","^5",["^ ","^7","metabase/mbql/normalize.cljc","^8",851,"^9",16,"^:",851,"^;",53,"^9[",true],"^9[",true,"^J","^48","^7","metabase/mbql/normalize.cljc","^;",53,"^9",1,"^8",851,"^:",851,"^:O","^;I"],"~$normalize-tokens",["^ ","^9Z",null,"^5",["^ ","^7","metabase/mbql/normalize.cljc","^8",366,"^9",7,"^:",366,"^;",23,"^:0",["^18",["^:1",["^18",[["~$x","~$&",["^;<"]]]]]],"^6","Recursively normalize tokens in `x`.\n\n  Every time this function recurses (thru a map value) it adds a new (normalized) key to key path, e.g. `path` will be\n  `[:query :order-by]` when we're in the MBQL order-by clause. If we need to handle these top-level clauses in special\n  ways add a function to `path->special-token-normalization-fn` above.\n\n  In some cases, dealing with the path isn't desirable, but we don't want to accidentally trigger normalization\n  functions (such as accidentally normalizing the `:type` key in something other than the top-level of the query), so\n  by convention please pass `:ignore-path` to avoid accidentally triggering path functions.","^;>",["^ ","^:6",true,"^;?",1,"^::",1,"^:3",[["^18",["~$x",["^;<"]]]],"^:0",["^18",[["~$x","~$&",["^;<"]]]],"^:5",["^18",[null]]]],"^J","^20","^7","metabase/mbql/normalize.cljc","^;",23,"^;>",["^ ","^:6",true,"^;?",1,"^::",1,"^:3",[["^18",["~$x",["^;<"]]]],"^:0",["^18",[["~$x","~$&",["^;<"]]]],"^:5",["^18",[null]]],"^:3",[["^18",["~$x",["^;<"]]]],"^:4",null,"^;?",1,"^:5",["^18",[null]],"^9",1,"^:6",true,"^;@",[["^ ","^;?",1,"^:6",true]],"^8",366,"^:7","^:9","^:",366,"^::",1,"^:;",true,"^:0",["^18",[["~$x","~$&",["^;<"]]]],"^6","Recursively normalize tokens in `x`.\n\n  Every time this function recurses (thru a map value) it adds a new (normalized) key to key path, e.g. `path` will be\n  `[:query :order-by]` when we're in the MBQL order-by clause. If we need to handle these top-level clauses in special\n  ways add a function to `path->special-token-normalization-fn` above.\n\n  In some cases, dealing with the path isn't desirable, but we don't want to accidentally trigger normalization\n  functions (such as accidentally normalizing the `:type` key in something other than the top-level of the query), so\n  by convention please pass `:ignore-path` to avoid accidentally triggering path functions."],"~$normalize-mbql-clause-tokens",["^ ","^5",["^ ","^7","metabase/mbql/normalize.cljc","^8",79,"^9",21,"^:",79,"^;",49,"^9[",true],"^9[",true,"^J","^1T","^7","metabase/mbql/normalize.cljc","^;",49,"^9",1,"^8",79,"^:",79,"^:O","^21"],"~$canonicalize",["^ ","^9Z",null,"^5",["^ ","^7","metabase/mbql/normalize.cljc","^8",762,"^9",8,"^:",762,"^;",20,"^9[",true,"^:0",["^18",["^:1",["^18",[[["^ ","^:G",["^:K","~$parameters","~$source-metadata","~$native"],"^1:","^:N"]]]]]],"^6","Canonicalize a query [MBQL query], rewriting the query as if you perfectly followed the recommended style guides for\n  writing MBQL. Does things like removes unneeded and empty clauses, converts older MBQL '95 syntax to MBQL '98, etc."],"^9[",true,"^J","^1W","^7","metabase/mbql/normalize.cljc","^;",20,"^:3",["^18",[["~$p__64590"]]],"^:4",null,"^:5",["^18",[null,null]],"^9",1,"^:6",false,"^8",762,"^:",762,"^::",1,"^:;",true,"^:0",["^18",["^:1",["^18",[[["^ ","^:G",["^:K","^<A","^<B","^<C"],"^1:","^:N"]]]]]],"^6","Canonicalize a query [MBQL query], rewriting the query as if you perfectly followed the recommended style guides for\n  writing MBQL. Does things like removes unneeded and empty clauses, converts older MBQL '95 syntax to MBQL '98, etc."],"~$canonicalize-mbql-clauses",["^ ","^9Z",null,"^5",["^ ","^7","metabase/mbql/normalize.cljc","^8",635,"^9",8,"^:",635,"^;",33,"^9[",true,"^:0",["^18",["^:1",["^18",[["^:R"]]]]],"^6","Walk an `mbql-query` an canonicalize non-top-level clauses like `:fk->`."],"^9[",true,"^J","^27","^7","metabase/mbql/normalize.cljc","^;",33,"^:3",["^18",[["^:R"]]],"^:4",null,"^:5",["^18",[null,null]],"^9",1,"^:6",false,"^8",635,"^:7","^:9","^:",635,"^::",1,"^:;",true,"^:0",["^18",["^:1",["^18",[["^:R"]]]]],"^6","Walk an `mbql-query` an canonicalize non-top-level clauses like `:fk->`."],"~$wrap-implicit-field-id",["^ ","^9Z",null,"^5",["^ ","^7","metabase/mbql/normalize.cljc","^8",422,"^9",8,"^:",422,"^;",30,"^9[",true,"^:0",["^18",["^:1",["^18",[["^:>"]]]]],"^6","Wrap raw integer Field IDs (i.e., those in an implicit 'field' position) in a `:field` clause if they're not\n  already. Done for MBQL 95 backwards-compatibility. e.g.:\n\n    {:filter [:= 10 20]} ; -> {:filter [:= [:field 10 nil] 20]}"],"^9[",true,"^J","^24","^7","metabase/mbql/normalize.cljc","^;",30,"^:3",["^18",[["^:>"]]],"^:4",null,"^:5",["^18",[null,null]],"^9",1,"^:6",false,"^8",422,"^:7",["^I",[null,"^:@"]],"^:",422,"^::",1,"^:;",true,"^:0",["^18",["^:1",["^18",[["^:>"]]]]],"^6","Wrap raw integer Field IDs (i.e., those in an implicit 'field' position) in a `:field` clause if they're not\n  already. Done for MBQL 95 backwards-compatibility. e.g.:\n\n    {:filter [:= 10 20]} ; -> {:filter [:= [:field 10 nil] 20]}"],"~$canonicalize-filtered-aggregation-clause",["^ ","^9Z",null,"^5",["^ ","^7","metabase/mbql/normalize.cljc","^8",603,"^9",8,"^:",603,"^;",48,"^9[",true,"^:0",["^18",["^:1",["^18",[[["^:=","~$filter-subclause"]]]]]]],"^9[",true,"^J","^1L","^7","metabase/mbql/normalize.cljc","^;",48,"^:3",["^18",[["~$p__64383"]]],"^:4",null,"^:5",["^18",[null,null]],"^9",1,"^:6",false,"^8",603,"^:7","^:@","^:",603,"^::",1,"^:;",true,"^:0",["^18",["^:1",["^18",[[["^:=","^<H"]]]]]]],"~$canonicalize-mbql-clause",["^ ","^5",["^ ","^7","metabase/mbql/normalize.cljc","^8",432,"^9",21,"^:",432,"^;",45,"^9[",true,"^:0",["^18",["^:1",["^18",[["^:B"]]]]]],"^9[",true,"^J","^1N","^7","metabase/mbql/normalize.cljc","^;",45,"^9",1,"^8",432,"^:",432,"^:O","^21","^:0",["^18",["^:1",["^18",[["^:B"]]]]]],"~$wrap-single-aggregations",["^ ","^9Z",null,"^5",["^ ","^7","metabase/mbql/normalize.cljc","^8",657,"^9",8,"^:",657,"^;",32,"^9[",true,"^:0",["^18",["^:1",["^18",[["~$aggregations"]]]]],"^6","Convert old MBQL 95 single-aggregations like `{:aggregation :count}` or `{:aggregation [:count]}` to MBQL 98+\n  multiple-aggregation syntax (e.g. `{:aggregation [[:count]]}`)."],"^9[",true,"^J","^4I","^7","metabase/mbql/normalize.cljc","^;",32,"^:3",["^18",[["^<L"]]],"^:4",null,"^:5",["^18",[null,null]],"^9",1,"^:6",false,"^8",657,"^:7","^:9","^:",657,"^::",1,"^:;",true,"^:0",["^18",["^:1",["^18",[["^<L"]]]]],"^6","Convert old MBQL 95 single-aggregations like `{:aggregation :count}` or `{:aggregation [:count]}` to MBQL 98+\n  multiple-aggregation syntax (e.g. `{:aggregation [[:count]]}`)."],"~$perform-whole-query-transformations",["^ ","^9Z",null,"^5",["^ ","^7","metabase/mbql/normalize.cljc","^8",809,"^9",8,"^:",809,"^;",43,"^9[",true,"^:0",["^18",["^:1",["^18",[["^:K"]]]]],"^6","Perform transformations that operate on the query as a whole, making sure the structure as a whole is logical and\n  consistent."],"^9[",true,"^J","^28","^7","metabase/mbql/normalize.cljc","^;",43,"^:3",["^18",[["^:K"]]],"^:4",null,"^:5",["^18",[null,null]],"^9",1,"^:6",false,"^8",809,"^:",809,"^::",1,"^:;",true,"^:0",["^18",["^:1",["^18",[["^:K"]]]]],"^6","Perform transformations that operate on the query as a whole, making sure the structure as a whole is logical and\n  consistent."],"~$remove-empty-clauses-in-source-query",["^ ","^9Z",null,"^5",["^ ","^7","metabase/mbql/normalize.cljc","^8",843,"^9",8,"^:",843,"^;",44,"^9[",true,"^:0",["^18",["^:1",["^18",[[["^ ","^;U","^;V","^1:","^;W"]]]]]]],"^9[",true,"^J","^2B","^7","metabase/mbql/normalize.cljc","^;",44,"^:3",["^18",[["~$p__64630"]]],"^:4",null,"^:5",["^18",[null,null]],"^9",1,"^:6",false,"^8",843,"^:7",["^I",[null,"^:9"]],"^:",843,"^::",1,"^:;",true,"^:0",["^18",["^:1",["^18",[[["^ ","^;U","^;V","^1:","^;W"]]]]]]],"~$remove-empty-clauses-in-map",["^ ","^9Z",null,"^5",["^ ","^7","metabase/mbql/normalize.cljc","^8",826,"^9",8,"^:",826,"^;",35,"^9[",true,"^:0",["^18",["^:1",["^18",[["~$m","^;<"]]]]]],"^9[",true,"^J","^2;","^7","metabase/mbql/normalize.cljc","^;",35,"^:3",["^18",[["~$m","^;<"]]],"^:4",null,"^:5",["^18",[null,null]],"^9",1,"^:6",false,"^8",826,"^:7",["^I",[null,"^:8","^:9","^:E"]],"^:",826,"^::",2,"^:;",true,"^:0",["^18",["^:1",["^18",[["~$m","^;<"]]]]]],"~$maybe-normalize-token",["^ ","^9Z",null,"^5",["^ ","^7","metabase/mbql/normalize.cljc","^8",49,"^9",8,"^:",49,"^;",29,"^9[",true,"^:0",["^18",["^:1",["^18",[["~$x"]]]]],"^6","Normalize token `x`, but only if it's a keyword or string."],"^9[",true,"^J","^2I","^7","metabase/mbql/normalize.cljc","^;",29,"^:3",["^18",[["~$x"]]],"^:4",null,"^:5",["^18",[null,null]],"^9",1,"^:6",false,"^8",49,"^:7",["^I",[null,"^2L","^:E"]],"^:",49,"^::",1,"^:;",true,"^:0",["^18",["^:1",["^18",[["~$x"]]]]],"^6","Normalize token `x`, but only if it's a keyword or string."],"~$canonicalize-aggregations",["^ ","^9Z",null,"^5",["^ ","^7","metabase/mbql/normalize.cljc","^8",682,"^9",8,"^:",682,"^;",33,"^9[",true,"^:0",["^18",["^:1",["^18",[["^<L"]]]]],"^6","Canonicalize subclauses (see above) and make sure `:aggregation` is a sequence of clauses instead of a single\n  clause."],"^9[",true,"^J","^2F","^7","metabase/mbql/normalize.cljc","^;",33,"^:3",["^18",[["^<L"]]],"^:4",null,"^:5",["^18",[null,null]],"^9",1,"^:6",false,"^8",682,"^:7",["^I",["^:8","^:@","^:9","^;4","^:E"]],"^:",682,"^::",1,"^:;",true,"^:0",["^18",["^:1",["^18",[["^<L"]]]]],"^6","Canonicalize subclauses (see above) and make sure `:aggregation` is a sequence of clauses instead of a single\n  clause."],"~$canonicalize-template-tags",["^ ","^9Z",null,"^5",["^ ","^7","metabase/mbql/normalize.cljc","^8",723,"^9",8,"^:",723,"^;",34,"^9[",true,"^:0",["^18",["^:1",["^18",[["~$tags"]]]]]],"^9[",true,"^J","^2C","^7","metabase/mbql/normalize.cljc","^;",34,"^:3",["^18",[["^<T"]]],"^:4",null,"^:5",["^18",[null,null]],"^9",1,"^:6",false,"^8",723,"^:7",["^I",[null,"^:8","^:9"]],"^:",723,"^::",1,"^:;",true,"^:0",["^18",["^:1",["^18",[["^<T"]]]]]],"~$move-source-metadata-to-mbql-query",["^ ","^9Z",null,"^5",["^ ","^7","metabase/mbql/normalize.cljc","^8",754,"^9",8,"^:",754,"^;",42,"^9[",true,"^:0",["^18",["^:1",["^18",[[["^ ","^:G",["^<B"],"^1:","^:K"]]]]]],"^6","In Dashboard 0.33.0 `:source-metadata` about resolved queries is added to the 'inner' MBQL query rather than to the\n  top-level; if we encounter the old style, move it to the appropriate location."],"^9[",true,"^J","^2>","^7","metabase/mbql/normalize.cljc","^;",42,"^:3",["^18",[["~$p__64588"]]],"^:4",null,"^:5",["^18",[null,null]],"^9",1,"^:6",false,"^8",754,"^:7",["^I",["^:8","^:9"]],"^:",754,"^::",1,"^:;",true,"^:0",["^18",["^:1",["^18",[[["^ ","^:G",["^<B"],"^1:","^:K"]]]]]],"^6","In Dashboard 0.33.0 `:source-metadata` about resolved queries is added to the 'inner' MBQL query rather than to the\n  top-level; if we encounter the old style, move it to the appropriate location."]],"^16",["^ ","^@","^@","^S","^T","^U","^V","^W","^W","^X","^W","^V","^V","^T","^T"],"~:cljs.analyzer/constants",["^ ","^13",["^I",["~:path","~:special-fn","~:category","~:starts-with","~:semantic_type","~:min","~:<=","~:*","~:inside","~:widget-type","~:base-type","~:expression","~:is-empty","~:substring","~:desc","~:joined-field","~:contains","~:temporal-extract","~:template-tags","~:ignore-path","~:stddev","~:else","~:source-query","~:>","~:binning-strategy","~:unit","~:default","~:count-where","^J","^1:","~:descending","~:-","~:asc","~:cum-count","~:value","~:or","~:fields","~:temporal-unit","~:value_field","~:join-alias","~:ascending","~:joins","~:get-week","~:source-metadata","~:metadata/dataset-metadata","~:between","~:sum-where","~:not","~:field","~:type","~:use-as-display-name?","~:metabase.mbql.normalize/sequence","~:cum-sum","^1C","~:/","~:fk->","~:is-null","~:>=","~:not-empty","~:distinct","~:datetime-field","~:percentile","~:rows","~:datetime-subtract","~:alias","~:field_ref","~:strategy","^;V","~:aggregation-options","~:viz-settings","~:effective_type","~:+","~:var","~:label_field","~:datetime-add","~:median","~:share","~:max","~:!=","~:id","~:case","~:expressions","~:current","~:count","~:breakout","~:info","~:order-by","~:dimension","~:and","~:context","~:display-name","~:avg","~:error","~:aggregation","~:visibility_type","~:named","~:not-null","^17","~:interval","~:field-id","~:target","~:binning","^:J","~:values_source_config","~:does-not-contain","~:hierarchy","~:datetime-diff","~:clause","~:parameters","~:=","~:ends-with","~:<","~:fingerprint","~:relative-datetime","~:sum","~:base_type","~:field-literal","~:source-field","~:time-interval"]],"~:order",["^?2","^=D","^>T","^=6","^=B","^=>","^=W","^=5","^=L","^>[","^>;","^?;","^>5","^1:","^?=","^?8","^>I","^>X","^>A","^>8","^=Q","^=<","^?3","^=I","^=1","~:*","^=?","^=E","~:-","^=H","^=U","~:/","^>4","^>6","~:+","^>?","^>B","^>C","^>D","^>J","^>R","^?9","^>V","^=@","^=X","^=4","^>N","^<Z","^J","^>Z","^>F","^?0","^>@","^=M","^;V","^:J","^=K","^>9","^?:","^>>","^=0","^>U","^1C","^=C","^>:","^?7","^==","^>L","^?5","^>P","^=R","^>=","^>H","^>M","^=A","^=P","^=Z","^=S","^17","^<X","^<Y","^>Y","^>0","^?<","^=:","^=N","^>O","^=J","^=V","^=3","^<[","^?6","^=;","^?1","~:=","^>E","~:<","^=2","~:>","^>2","^=7","^>3","^>1","^>W","^=T","^>7","^><","^=Y","^>Q","^=[","^>G","^=8","^>S","^?4","^=9","^=G","^=F","^=O","^>K"]],"^1;",["^ ","^14",["^I",[]]],"^1<",["^ "],"^1=",["^[","^@","^R","^11","^12","^Y","^W","^V","^T"]],"^N","^K","~:ns-specs",["^ "],"~:ns-spec-vars",["^I",[]],"~:compiler-options",["^52",[["^?A","~:static-fns"],true,["^?A","~:shadow-tweaks"],null,["^?A","~:source-map-inline"],null,["^?A","~:elide-asserts"],true,["^?A","~:optimize-constants"],null,["^?A","^1B"],null,["^?A","~:external-config"],null,["^?A","~:tooling-config"],null,["^?A","~:emit-constants"],null,["^?A","~:load-tests"],false,["^?A","~:form-size-threshold"],null,["^?A","~:global-goog-object&array"],null,["^?A","~:data-readers"],null,["^?A","~:infer-externs"],"~:auto",["^?A","^1D"],["^I",["^1E"]],["~:js-options","~:js-provider"],"^14",["~:mode"],"~:release",["^?A","~:fn-invoke-direct"],null,["^?A","~:source-map"],null]]]