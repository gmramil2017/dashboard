["^ ","~:output",["^ ","~:js","goog.provide('metabase.mbql.schema');\n/**\n * Set of valid units for bucketing or comparing against a *date* Field.\n */\nmetabase.mbql.schema.date_bucketing_units = new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 12, [new cljs.core.Keyword(null,\"quarter\",\"quarter\",-508147616),null,new cljs.core.Keyword(null,\"day\",\"day\",-274800446),null,new cljs.core.Keyword(null,\"week\",\"week\",-1326473278),null,new cljs.core.Keyword(null,\"default\",\"default\",-1987822328),null,new cljs.core.Keyword(null,\"day-of-week\",\"day-of-week\",1639326729),null,new cljs.core.Keyword(null,\"month\",\"month\",-1960248533),null,new cljs.core.Keyword(null,\"month-of-year\",\"month-of-year\",760756492),null,new cljs.core.Keyword(null,\"day-of-month\",\"day-of-month\",-1096650288),null,new cljs.core.Keyword(null,\"year\",\"year\",335913393),null,new cljs.core.Keyword(null,\"day-of-year\",\"day-of-year\",478600113),null,new cljs.core.Keyword(null,\"week-of-year\",\"week-of-year\",-910114435),null,new cljs.core.Keyword(null,\"quarter-of-year\",\"quarter-of-year\",-472803491),null], null), null);\n/**\n * Set of valid units for bucketing or comparing against a *time* Field.\n */\nmetabase.mbql.schema.time_bucketing_units = new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 7, [new cljs.core.Keyword(null,\"hour\",\"hour\",-555989214),null,new cljs.core.Keyword(null,\"second\",\"second\",-444702010),null,new cljs.core.Keyword(null,\"default\",\"default\",-1987822328),null,new cljs.core.Keyword(null,\"hour-of-day\",\"hour-of-day\",2086777099),null,new cljs.core.Keyword(null,\"millisecond\",\"millisecond\",-540123566),null,new cljs.core.Keyword(null,\"minute-of-hour\",\"minute-of-hour\",1903220478),null,new cljs.core.Keyword(null,\"minute\",\"minute\",-642875969),null], null), null);\n/**\n * Set of valid units for bucketing or comparing against a *datetime* Field.\n */\nmetabase.mbql.schema.datetime_bucketing_units = clojure.set.union.cljs$core$IFn$_invoke$arity$2(metabase.mbql.schema.date_bucketing_units,metabase.mbql.schema.time_bucketing_units);\n/**\n * Valid unit for *date* bucketing.\n */\nmetabase.mbql.schema.DateUnit = schema.core.named(cljs.core.apply.cljs$core$IFn$_invoke$arity$2(schema.core.enum$,metabase.mbql.schema.date_bucketing_units),\"date-bucketing-unit\");\n/**\n * Valid unit for *time* bucketing.\n */\nmetabase.mbql.schema.TimeUnit = schema.core.named(cljs.core.apply.cljs$core$IFn$_invoke$arity$2(schema.core.enum$,metabase.mbql.schema.time_bucketing_units),\"time-bucketing-unit\");\n/**\n * Valid unit for *datetime* bucketing.\n */\nmetabase.mbql.schema.DateTimeUnit = schema.core.named(cljs.core.apply.cljs$core$IFn$_invoke$arity$2(schema.core.enum$,metabase.mbql.schema.datetime_bucketing_units),\"datetime-bucketing-unit\");\n/**\n * Valid timezone id.\n */\nmetabase.mbql.schema.TimezoneId = schema.core.named(cljs.core.apply.cljs$core$IFn$_invoke$arity$2(schema.core.enum$,shadow.js.shim.module$moment.tz.names()),\"timezone-id\");\n/**\n * Valid units to extract from a temporal.\n */\nmetabase.mbql.schema.TemporalExtractUnits = schema.core.named(cljs.core.apply.cljs$core$IFn$_invoke$arity$2(schema.core.enum$,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 11, [new cljs.core.Keyword(null,\"week-of-year-instance\",\"week-of-year-instance\",2047974624),null,new cljs.core.Keyword(null,\"day-of-week\",\"day-of-week\",1639326729),null,new cljs.core.Keyword(null,\"hour-of-day\",\"hour-of-day\",2086777099),null,new cljs.core.Keyword(null,\"month-of-year\",\"month-of-year\",760756492),null,new cljs.core.Keyword(null,\"day-of-month\",\"day-of-month\",-1096650288),null,new cljs.core.Keyword(null,\"year-of-era\",\"year-of-era\",682445876),null,new cljs.core.Keyword(null,\"second-of-minute\",\"second-of-minute\",222734326),null,new cljs.core.Keyword(null,\"week-of-year-us\",\"week-of-year-us\",849423511),null,new cljs.core.Keyword(null,\"week-of-year-iso\",\"week-of-year-iso\",-1827744293),null,new cljs.core.Keyword(null,\"quarter-of-year\",\"quarter-of-year\",-472803491),null,new cljs.core.Keyword(null,\"minute-of-hour\",\"minute-of-hour\",1903220478),null], null), null)),\"temporal-extract-units\");\n/**\n * Valid units for a datetime-diff clause.\n */\nmetabase.mbql.schema.DatetimeDiffUnits = schema.core.named(cljs.core.apply.cljs$core$IFn$_invoke$arity$2(schema.core.enum$,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 8, [new cljs.core.Keyword(null,\"quarter\",\"quarter\",-508147616),null,new cljs.core.Keyword(null,\"day\",\"day\",-274800446),null,new cljs.core.Keyword(null,\"hour\",\"hour\",-555989214),null,new cljs.core.Keyword(null,\"week\",\"week\",-1326473278),null,new cljs.core.Keyword(null,\"second\",\"second\",-444702010),null,new cljs.core.Keyword(null,\"month\",\"month\",-1960248533),null,new cljs.core.Keyword(null,\"year\",\"year\",335913393),null,new cljs.core.Keyword(null,\"minute\",\"minute\",-642875969),null], null), null)),\"datetime-diff-units\");\n/**\n * Valid modes to extract weeks.\n */\nmetabase.mbql.schema.ExtractWeekModes = schema.core.named(cljs.core.apply.cljs$core$IFn$_invoke$arity$2(schema.core.enum$,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null,\"instance\",\"instance\",-2121349050),null,new cljs.core.Keyword(null,\"iso\",\"iso\",-1366207543),null,new cljs.core.Keyword(null,\"us\",\"us\",746429226),null], null), null)),\"extract-week-modes\");\nmetabase.mbql.schema.RelativeDatetimeUnit = schema.core.named(cljs.core.apply.cljs$core$IFn$_invoke$arity$2(schema.core.enum$,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 8, [new cljs.core.Keyword(null,\"quarter\",\"quarter\",-508147616),null,new cljs.core.Keyword(null,\"day\",\"day\",-274800446),null,new cljs.core.Keyword(null,\"hour\",\"hour\",-555989214),null,new cljs.core.Keyword(null,\"week\",\"week\",-1326473278),null,new cljs.core.Keyword(null,\"default\",\"default\",-1987822328),null,new cljs.core.Keyword(null,\"month\",\"month\",-1960248533),null,new cljs.core.Keyword(null,\"year\",\"year\",335913393),null,new cljs.core.Keyword(null,\"minute\",\"minute\",-642875969),null], null), null)),\"relative-datetime-unit\");\nmetabase.mbql.schema.can_parse_iso_8601_QMARK_ = (function metabase$mbql$schema$can_parse_iso_8601_QMARK_(s){\nif(typeof s === 'string'){\nreturn cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2(Date.parse(s),NaN);\n} else {\nreturn null;\n}\n});\n/**\n * Returns whether a string can be parsed to an ISO 8601 date or not.\n */\nmetabase.mbql.schema.can_parse_date_QMARK_ = metabase.mbql.schema.can_parse_iso_8601_QMARK_;\n/**\n * Returns whether a string can be parsed to an ISO 8601 datetime or not.\n */\nmetabase.mbql.schema.can_parse_datetime_QMARK_ = metabase.mbql.schema.can_parse_iso_8601_QMARK_;\n/**\n * Returns whether a string can be parsed to an ISO 8601 time or not.\n */\nmetabase.mbql.schema.can_parse_time_QMARK_ = metabase.mbql.schema.can_parse_iso_8601_QMARK_;\n/**\n * Schema for an ISO-8601-formatted date string literal.\n */\nmetabase.mbql.schema.LiteralDateString = schema.core.constrained.cljs$core$IFn$_invoke$arity$3(metabase.mbql.schema.helpers.NonBlankString,metabase.mbql.schema.can_parse_date_QMARK_,\"valid ISO-8601 datetime string literal\");\n/**\n * Schema for an ISO-8601-formattedor datetime string literal.\n */\nmetabase.mbql.schema.LiteralDatetimeString = schema.core.constrained.cljs$core$IFn$_invoke$arity$3(metabase.mbql.schema.helpers.NonBlankString,metabase.mbql.schema.can_parse_datetime_QMARK_,\"valid ISO-8601 datetime string literal\");\n/**\n * Schema for an ISO-8601-formatted time string literal.\n */\nmetabase.mbql.schema.LiteralTimeString = schema.core.constrained.cljs$core$IFn$_invoke$arity$3(metabase.mbql.schema.helpers.NonBlankString,metabase.mbql.schema.can_parse_time_QMARK_,\"valid ISO-8601 time string literal\");\n/**\n * Schema for a valid relative-datetime clause.\n */\nmetabase.mbql.schema.relative_datetime = metabase.mbql.schema.helpers.clause.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,\"relative-datetime\",\"relative-datetime\",1285169278),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([\"n\",schema.core.cond_pre.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([schema.core.eq(new cljs.core.Keyword(null,\"current\",\"current\",-1088038603)),schema.core.Int], 0)),\"unit\",new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"optional\",\"optional\",2053951509),metabase.mbql.schema.RelativeDatetimeUnit], null)], 0));\n/**\n * Schema for a valid interval clause.\n */\nmetabase.mbql.schema.interval = metabase.mbql.schema.helpers.clause.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,\"interval\",\"interval\",1708495417),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([\"n\",schema.core.Int,\"unit\",metabase.mbql.schema.RelativeDatetimeUnit], 0));\n/**\n * Schema for an `:absolute-datetime` clause.\n */\nmetabase.mbql.schema.absolute_datetime = schema.core.conditional.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([(function (p1__45218_SHARP_){\nreturn cljs.core.not(metabase.mbql.schema.helpers.is_clause_QMARK_(new cljs.core.Keyword(null,\"absolute-datetime\",\"absolute-datetime\",-560340465),p1__45218_SHARP_));\n}),metabase.mbql.schema.helpers.clause.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,\"absolute-datetime\",\"absolute-datetime\",-560340465),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([\"t\",Date,\"unit\",metabase.mbql.schema.DateTimeUnit], 0)),(function (p1__45219_SHARP_){\nreturn (cljs.core.second(p1__45219_SHARP_) instanceof Date);\n}),metabase.mbql.schema.helpers.clause.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,\"absolute-datetime\",\"absolute-datetime\",-560340465),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([\"date\",Date,\"unit\",metabase.mbql.schema.DateUnit], 0)),new cljs.core.Keyword(null,\"else\",\"else\",-1508377146),metabase.mbql.schema.helpers.clause.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,\"absolute-datetime\",\"absolute-datetime\",-560340465),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([\"datetime\",Date,\"unit\",metabase.mbql.schema.DateTimeUnit], 0))], 0));\n/**\n * Schema for a valid time clause.\n */\nmetabase.mbql.schema.time = metabase.mbql.schema.helpers.clause.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,\"time\",\"time\",1385887882),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([\"time\",Date,\"unit\",metabase.mbql.schema.TimeUnit], 0));\n/**\n * Schema for a valid date or datetime literal.\n */\nmetabase.mbql.schema.DateOrDatetimeLiteral = schema.core.conditional.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([cljs.core.partial.cljs$core$IFn$_invoke$arity$2(metabase.mbql.schema.helpers.is_clause_QMARK_,new cljs.core.Keyword(null,\"absolute-datetime\",\"absolute-datetime\",-560340465)),metabase.mbql.schema.absolute_datetime,metabase.mbql.schema.can_parse_datetime_QMARK_,metabase.mbql.schema.LiteralDatetimeString,metabase.mbql.schema.can_parse_date_QMARK_,metabase.mbql.schema.LiteralDateString,new cljs.core.Keyword(null,\"else\",\"else\",-1508377146),schema.core.cond_pre.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([Date], 0))], 0));\n/**\n * Schema for valid time literals.\n */\nmetabase.mbql.schema.TimeLiteral = schema.core.conditional.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([cljs.core.partial.cljs$core$IFn$_invoke$arity$2(metabase.mbql.schema.helpers.is_clause_QMARK_,new cljs.core.Keyword(null,\"time\",\"time\",1385887882)),metabase.mbql.schema.time,metabase.mbql.schema.can_parse_time_QMARK_,metabase.mbql.schema.LiteralTimeString,new cljs.core.Keyword(null,\"else\",\"else\",-1508377146),schema.core.cond_pre.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([Date], 0))], 0));\n/**\n * Schema for valid temporal literals.\n */\nmetabase.mbql.schema.TemporalLiteral = schema.core.cond_pre.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([metabase.mbql.schema.TimeLiteral,metabase.mbql.schema.DateOrDatetimeLiteral], 0));\n/**\n * Schema for a datetime value drivers will personally have to handle, either an `absolute-datetime` form or a\n *   `relative-datetime` form.\n */\nmetabase.mbql.schema.DateTimeValue = metabase.mbql.schema.helpers.one_of_STAR_.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var or__5045__auto__ = new cljs.core.Keyword(null,\"clause-name\",\"clause-name\",-996419059).cljs$core$IFn$_invoke$arity$1(cljs.core.meta((((typeof metabase !== 'undefined') && (typeof metabase.mbql !== 'undefined') && (typeof metabase.mbql.schema !== 'undefined') && (typeof metabase.mbql.schema.absolute_datetime !== 'undefined'))?(new cljs.core.Var((function (){\nreturn metabase.mbql.schema.absolute_datetime;\n}),cljs.core.with_meta(new cljs.core.Symbol(\"metabase.mbql.schema\",\"absolute-datetime\",\"metabase.mbql.schema/absolute-datetime\",-1180642019,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(\"cljs.analyzer\",\"no-resolve\",\"cljs.analyzer/no-resolve\",-1872351017),true], null)),cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null,\"ns\",\"ns\",441598760),new cljs.core.Keyword(null,\"name\",\"name\",1843675177),new cljs.core.Keyword(null,\"file\",\"file\",-1269645878),new cljs.core.Keyword(null,\"end-column\",\"end-column\",1425389514),new cljs.core.Keyword(null,\"clause-name\",\"clause-name\",-996419059),new cljs.core.Keyword(null,\"column\",\"column\",2078222095),new cljs.core.Keyword(null,\"internal\",\"internal\",-854870097),new cljs.core.Keyword(null,\"line\",\"line\",212345235),new cljs.core.Keyword(null,\"end-line\",\"end-line\",1837326455),new cljs.core.Keyword(null,\"arglists\",\"arglists\",1661989754),new cljs.core.Keyword(null,\"doc\",\"doc\",1913296891),new cljs.core.Keyword(null,\"test\",\"test\",577538877)],[cljs.core.with_meta(new cljs.core.Symbol(null,\"metabase.mbql.schema\",\"metabase.mbql.schema\",-408168902,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"doc\",\"doc\",1913296891),\"Schema for validating a *normalized* MBQL query. This is also the definitive grammar for MBQL, wow!\"], null)),new cljs.core.Symbol(null,\"absolute-datetime\",\"absolute-datetime\",1080191062,null),\"metabase/mbql/schema.cljc\",69,new cljs.core.Keyword(null,\"absolute-datetime\",\"absolute-datetime\",-560340465),1,true,192,192,cljs.core.List.EMPTY,\"Schema for an `:absolute-datetime` clause.\",(cljs.core.truth_(metabase.mbql.schema.absolute_datetime)?metabase.mbql.schema.absolute_datetime.cljs$lang$test:null)]))):null)));\nif(cljs.core.truth_(or__5045__auto__)){\nreturn or__5045__auto__;\n} else {\nreturn new cljs.core.Symbol(null,\"absolute-datetime\",\"absolute-datetime\",1080191062,null);\n}\n})(),metabase.mbql.schema.absolute_datetime], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var or__5045__auto__ = new cljs.core.Keyword(null,\"clause-name\",\"clause-name\",-996419059).cljs$core$IFn$_invoke$arity$1(cljs.core.meta((((typeof metabase !== 'undefined') && (typeof metabase.mbql !== 'undefined') && (typeof metabase.mbql.schema !== 'undefined') && (typeof metabase.mbql.schema.relative_datetime !== 'undefined'))?(new cljs.core.Var((function (){\nreturn metabase.mbql.schema.relative_datetime;\n}),cljs.core.with_meta(new cljs.core.Symbol(\"metabase.mbql.schema\",\"relative-datetime\",\"metabase.mbql.schema/relative-datetime\",1965492610,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(\"cljs.analyzer\",\"no-resolve\",\"cljs.analyzer/no-resolve\",-1872351017),true], null)),cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null,\"ns\",\"ns\",441598760),new cljs.core.Keyword(null,\"name\",\"name\",1843675177),new cljs.core.Keyword(null,\"file\",\"file\",-1269645878),new cljs.core.Keyword(null,\"end-column\",\"end-column\",1425389514),new cljs.core.Keyword(null,\"clause-name\",\"clause-name\",-996419059),new cljs.core.Keyword(null,\"column\",\"column\",2078222095),new cljs.core.Keyword(null,\"line\",\"line\",212345235),new cljs.core.Keyword(null,\"end-line\",\"end-line\",1837326455),new cljs.core.Keyword(null,\"clause-form\",\"clause-form\",1820463737),new cljs.core.Keyword(null,\"arglists\",\"arglists\",1661989754),new cljs.core.Keyword(null,\"doc\",\"doc\",1913296891),new cljs.core.Keyword(null,\"test\",\"test\",577538877)],[cljs.core.with_meta(new cljs.core.Symbol(null,\"metabase.mbql.schema\",\"metabase.mbql.schema\",-408168902,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"doc\",\"doc\",1913296891),\"Schema for validating a *normalized* MBQL query. This is also the definitive grammar for MBQL, wow!\"], null)),new cljs.core.Symbol(null,\"relative-datetime\",\"relative-datetime\",-1369266491,null),\"metabase/mbql/schema.cljc\",29,new cljs.core.Keyword(null,\"relative-datetime\",\"relative-datetime\",1285169278),1,174,174,new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"relative-datetime\",\"relative-datetime\",1285169278),new cljs.core.Keyword(null,\"n\",\"n\",562130025),cljs.core.list(new cljs.core.Symbol(null,\"quote\",\"quote\",1377916282,null),cljs.core.list(new cljs.core.Symbol(\"s\",\"cond-pre\",\"s/cond-pre\",-923707600,null),cljs.core.list(new cljs.core.Symbol(\"s\",\"eq\",\"s/eq\",1021992833,null),new cljs.core.Keyword(null,\"current\",\"current\",-1088038603)),new cljs.core.Symbol(\"s\",\"Int\",\"s/Int\",-2116888657,null))),new cljs.core.Keyword(null,\"unit\",\"unit\",375175175),cljs.core.list(new cljs.core.Symbol(null,\"quote\",\"quote\",1377916282,null),cljs.core.list(new cljs.core.Symbol(null,\"optional\",\"optional\",-600484260,null),new cljs.core.Symbol(null,\"RelativeDatetimeUnit\",\"RelativeDatetimeUnit\",-1157637501,null)))], null),cljs.core.List.EMPTY,\"Schema for a valid relative-datetime clause.\",(cljs.core.truth_(metabase.mbql.schema.relative_datetime)?metabase.mbql.schema.relative_datetime.cljs$lang$test:null)]))):null)));\nif(cljs.core.truth_(or__5045__auto__)){\nreturn or__5045__auto__;\n} else {\nreturn new cljs.core.Symbol(null,\"relative-datetime\",\"relative-datetime\",-1369266491,null);\n}\n})(),metabase.mbql.schema.relative_datetime], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var or__5045__auto__ = new cljs.core.Keyword(null,\"clause-name\",\"clause-name\",-996419059).cljs$core$IFn$_invoke$arity$1(cljs.core.meta((((typeof metabase !== 'undefined') && (typeof metabase.mbql !== 'undefined') && (typeof metabase.mbql.schema !== 'undefined') && (typeof metabase.mbql.schema.time !== 'undefined'))?(new cljs.core.Var((function (){\nreturn metabase.mbql.schema.time;\n}),cljs.core.with_meta(new cljs.core.Symbol(\"metabase.mbql.schema\",\"time\",\"metabase.mbql.schema/time\",-1927273576,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(\"cljs.analyzer\",\"no-resolve\",\"cljs.analyzer/no-resolve\",-1872351017),true], null)),cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null,\"ns\",\"ns\",441598760),new cljs.core.Keyword(null,\"name\",\"name\",1843675177),new cljs.core.Keyword(null,\"file\",\"file\",-1269645878),new cljs.core.Keyword(null,\"end-column\",\"end-column\",1425389514),new cljs.core.Keyword(null,\"clause-name\",\"clause-name\",-996419059),new cljs.core.Keyword(null,\"column\",\"column\",2078222095),new cljs.core.Keyword(null,\"internal\",\"internal\",-854870097),new cljs.core.Keyword(null,\"line\",\"line\",212345235),new cljs.core.Keyword(null,\"end-line\",\"end-line\",1837326455),new cljs.core.Keyword(null,\"clause-form\",\"clause-form\",1820463737),new cljs.core.Keyword(null,\"arglists\",\"arglists\",1661989754),new cljs.core.Keyword(null,\"doc\",\"doc\",1913296891),new cljs.core.Keyword(null,\"test\",\"test\",577538877)],[cljs.core.with_meta(new cljs.core.Symbol(null,\"metabase.mbql.schema\",\"metabase.mbql.schema\",-408168902,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"doc\",\"doc\",1913296891),\"Schema for validating a *normalized* MBQL query. This is also the definitive grammar for MBQL, wow!\"], null)),new cljs.core.Symbol(null,\"time\",\"time\",-1268547887,null),\"metabase/mbql/schema.cljc\",27,new cljs.core.Keyword(null,\"time\",\"time\",1385887882),1,true,225,225,new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"time\",\"time\",1385887882),new cljs.core.Keyword(null,\"time\",\"time\",1385887882),cljs.core.list(new cljs.core.Symbol(null,\"quote\",\"quote\",1377916282,null),new cljs.core.Symbol(\"js\",\"Date\",\"js/Date\",946858373,null)),new cljs.core.Keyword(null,\"unit\",\"unit\",375175175),cljs.core.list(new cljs.core.Symbol(null,\"quote\",\"quote\",1377916282,null),new cljs.core.Symbol(null,\"TimeUnit\",\"TimeUnit\",1200517789,null))], null),cljs.core.List.EMPTY,\"Schema for a valid time clause.\",(cljs.core.truth_(metabase.mbql.schema.time)?metabase.mbql.schema.time.cljs$lang$test:null)]))):null)));\nif(cljs.core.truth_(or__5045__auto__)){\nreturn or__5045__auto__;\n} else {\nreturn new cljs.core.Symbol(null,\"time\",\"time\",-1268547887,null);\n}\n})(),metabase.mbql.schema.time], null)], 0));\n/**\n * Type info about a value in a `:value` clause. Added automatically by `wrap-value-literals` middleware to values in\n *   filter clauses based on the Field in the clause.\n */\nmetabase.mbql.schema.ValueTypeInfo = cljs.core.PersistentArrayMap.createAsIfByAssoc([schema.core.optional_key(new cljs.core.Keyword(null,\"database_type\",\"database_type\",-54700895)),schema.core.maybe(metabase.mbql.schema.helpers.NonBlankString),schema.core.optional_key(new cljs.core.Keyword(null,\"base_type\",\"base_type\",1908272670)),schema.core.maybe(metabase.mbql.schema.helpers.FieldType),schema.core.optional_key(new cljs.core.Keyword(null,\"semantic_type\",\"semantic_type\",272485089)),schema.core.maybe(metabase.mbql.schema.helpers.FieldSemanticOrRelationType),schema.core.optional_key(new cljs.core.Keyword(null,\"unit\",\"unit\",375175175)),schema.core.maybe(metabase.mbql.schema.DateTimeUnit),schema.core.optional_key(new cljs.core.Keyword(null,\"name\",\"name\",1843675177)),schema.core.maybe(metabase.mbql.schema.helpers.NonBlankString),schema.core.Keyword,schema.core.Any]);\n/**\n * Schema for a valid value clause.\n */\nmetabase.mbql.schema.value = metabase.mbql.schema.helpers.clause.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,\"value\",\"value\",305978217),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([\"value\",schema.core.Any,\"type-info\",schema.core.maybe(metabase.mbql.schema.ValueTypeInfo)], 0));\n/**\n * Schema for a valid expression clause.\n */\nmetabase.mbql.schema.expression = metabase.mbql.schema.helpers.clause.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,\"expression\",\"expression\",202311876),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([\"expression-name\",metabase.mbql.schema.helpers.NonBlankString,\"options\",new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"optional\",\"optional\",2053951509),schema.core.pred.cljs$core$IFn$_invoke$arity$2(cljs.core.map_QMARK_,\"map\")], null)], 0));\n/**\n * Schema for a valid value for the `strategy-name` param of a [[field]] clause with `:binning` information.\n */\nmetabase.mbql.schema.BinningStrategyName = schema.core.enum$.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"num-bins\",\"num-bins\",847672055),new cljs.core.Keyword(null,\"bin-width\",\"bin-width\",1377922579),new cljs.core.Keyword(null,\"default\",\"default\",-1987822328)], 0));\nmetabase.mbql.schema.validate_bin_width = (function metabase$mbql$schema$validate_bin_width(schema__$1){\nreturn schema.core.constrained.cljs$core$IFn$_invoke$arity$3(schema__$1,(function (p__45225){\nvar map__45226 = p__45225;\nvar map__45226__$1 = cljs.core.__destructure_map(map__45226);\nvar strategy = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__45226__$1,new cljs.core.Keyword(null,\"strategy\",\"strategy\",-1471631918));\nvar bin_width = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__45226__$1,new cljs.core.Keyword(null,\"bin-width\",\"bin-width\",1377922579));\nif(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(strategy,new cljs.core.Keyword(null,\"bin-width\",\"bin-width\",1377922579))){\nreturn bin_width;\n} else {\nreturn true;\n}\n}),\"You must specify :bin-width when using the :bin-width strategy.\");\n});\nmetabase.mbql.schema.validate_num_bins = (function metabase$mbql$schema$validate_num_bins(schema__$1){\nreturn schema.core.constrained.cljs$core$IFn$_invoke$arity$3(schema__$1,(function (p__45228){\nvar map__45229 = p__45228;\nvar map__45229__$1 = cljs.core.__destructure_map(map__45229);\nvar strategy = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__45229__$1,new cljs.core.Keyword(null,\"strategy\",\"strategy\",-1471631918));\nvar num_bins = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__45229__$1,new cljs.core.Keyword(null,\"num-bins\",\"num-bins\",847672055));\nif(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(strategy,new cljs.core.Keyword(null,\"num-bins\",\"num-bins\",847672055))){\nreturn num_bins;\n} else {\nreturn true;\n}\n}),\"You must specify :num-bins when using the :num-bins strategy.\");\n});\n/**\n * Schema for `:binning` options passed to a `:field` clause.\n */\nmetabase.mbql.schema.FieldBinningOptions = metabase.mbql.schema.validate_num_bins(metabase.mbql.schema.validate_bin_width(cljs.core.PersistentArrayMap.createAsIfByAssoc([new cljs.core.Keyword(null,\"strategy\",\"strategy\",-1471631918),metabase.mbql.schema.BinningStrategyName,schema.core.optional_key(new cljs.core.Keyword(null,\"num-bins\",\"num-bins\",847672055)),metabase.mbql.schema.helpers.IntGreaterThanZero,schema.core.optional_key(new cljs.core.Keyword(null,\"bin-width\",\"bin-width\",1377922579)),schema.core.constrained.cljs$core$IFn$_invoke$arity$3(schema.core.Num,cljs.core.complement(cljs.core.neg_QMARK_),\"bin width must be >= 0.\"),schema.core.Keyword,schema.core.Any])));\n/**\n * Whether `temporal-unit` (e.g. `:day`) is valid for the given `base-type` (e.g. `:type/Date`). If either is `nil` this\n *   will return truthy. Accepts either map of `field-options` or `base-type` and `temporal-unit` passed separately.\n */\nmetabase.mbql.schema.valid_temporal_unit_for_base_type_QMARK_ = (function metabase$mbql$schema$valid_temporal_unit_for_base_type_QMARK_(var_args){\nvar G__45234 = arguments.length;\nswitch (G__45234) {\ncase 1:\nreturn metabase.mbql.schema.valid_temporal_unit_for_base_type_QMARK_.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\n\nbreak;\ncase 2:\nreturn metabase.mbql.schema.valid_temporal_unit_for_base_type_QMARK_.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\n(metabase.mbql.schema.valid_temporal_unit_for_base_type_QMARK_.cljs$core$IFn$_invoke$arity$1 = (function (p__45236){\nvar map__45237 = p__45236;\nvar map__45237__$1 = cljs.core.__destructure_map(map__45237);\nvar _field_options = map__45237__$1;\nvar base_type = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__45237__$1,new cljs.core.Keyword(null,\"base-type\",\"base-type\",1167971299));\nvar temporal_unit = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__45237__$1,new cljs.core.Keyword(null,\"temporal-unit\",\"temporal-unit\",-1892306358));\nreturn metabase.mbql.schema.valid_temporal_unit_for_base_type_QMARK_.cljs$core$IFn$_invoke$arity$2(base_type,temporal_unit);\n}));\n\n(metabase.mbql.schema.valid_temporal_unit_for_base_type_QMARK_.cljs$core$IFn$_invoke$arity$2 = (function (base_type,temporal_unit){\nvar temp__5802__auto__ = (cljs.core.truth_((function (){var and__5043__auto__ = temporal_unit;\nif(cljs.core.truth_(and__5043__auto__)){\nreturn base_type;\n} else {\nreturn and__5043__auto__;\n}\n})())?(function (){var pred__45238 = (function (p1__45232_SHARP_,p2__45231_SHARP_){\nreturn cljs.core.isa_QMARK_.cljs$core$IFn$_invoke$arity$2(p2__45231_SHARP_,p1__45232_SHARP_);\n});\nvar expr__45239 = base_type;\nif(pred__45238(new cljs.core.Keyword(\"type\",\"Date\",\"type/Date\",-690428629),expr__45239)){\nreturn metabase.mbql.schema.date_bucketing_units;\n} else {\nif(pred__45238(new cljs.core.Keyword(\"type\",\"Time\",\"type/Time\",-814852413),expr__45239)){\nreturn metabase.mbql.schema.time_bucketing_units;\n} else {\nif(pred__45238(new cljs.core.Keyword(\"type\",\"DateTime\",\"type/DateTime\",352113310),expr__45239)){\nreturn metabase.mbql.schema.datetime_bucketing_units;\n} else {\nreturn null;\n}\n}\n}\n})():null);\nif(cljs.core.truth_(temp__5802__auto__)){\nvar units = temp__5802__auto__;\nreturn cljs.core.contains_QMARK_(units,temporal_unit);\n} else {\nreturn true;\n}\n}));\n\n(metabase.mbql.schema.valid_temporal_unit_for_base_type_QMARK_.cljs$lang$maxFixedArity = 2);\n\nmetabase.mbql.schema.validate_temporal_unit = (function metabase$mbql$schema$validate_temporal_unit(schema__$1){\nreturn schema.core.constrained.cljs$core$IFn$_invoke$arity$3(schema__$1,metabase.mbql.schema.valid_temporal_unit_for_base_type_QMARK_,\"Invalid :temporal-unit for the specified :base-type.\");\n});\nmetabase.mbql.schema.no_binning_options_at_top_level = (function metabase$mbql$schema$no_binning_options_at_top_level(schema__$1){\nreturn schema.core.constrained.cljs$core$IFn$_invoke$arity$3(schema__$1,cljs.core.complement(new cljs.core.Keyword(null,\"strategy\",\"strategy\",-1471631918)),\"Found :binning keys at the top level of :field options. binning-related options belong under the :binning key.\");\n});\nmetabase.mbql.schema.FieldOptions = metabase.mbql.schema.no_binning_options_at_top_level(metabase.mbql.schema.validate_temporal_unit(cljs.core.PersistentArrayMap.createAsIfByAssoc([schema.core.optional_key(new cljs.core.Keyword(null,\"base-type\",\"base-type\",1167971299)),schema.core.maybe(metabase.mbql.schema.helpers.FieldType),schema.core.optional_key(new cljs.core.Keyword(null,\"source-field\",\"source-field\",933829534)),schema.core.maybe(schema.core.cond_pre.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([metabase.mbql.schema.helpers.IntGreaterThanZero,metabase.mbql.schema.helpers.NonBlankString], 0))),schema.core.optional_key(new cljs.core.Keyword(null,\"temporal-unit\",\"temporal-unit\",-1892306358)),schema.core.maybe(metabase.mbql.schema.DateTimeUnit),schema.core.optional_key(new cljs.core.Keyword(null,\"join-alias\",\"join-alias\",1454206794)),schema.core.maybe(metabase.mbql.schema.helpers.NonBlankString),schema.core.optional_key(new cljs.core.Keyword(null,\"binning\",\"binning\",1709835866)),schema.core.maybe(metabase.mbql.schema.FieldBinningOptions),schema.core.Keyword,schema.core.Any])));\nmetabase.mbql.schema.require_base_type_for_field_name = (function metabase$mbql$schema$require_base_type_for_field_name(schema__$1){\nreturn schema.core.constrained.cljs$core$IFn$_invoke$arity$3(schema__$1,(function (p__45243){\nvar vec__45244 = p__45243;\nvar _ = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__45244,(0),null);\nvar id_or_name = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__45244,(1),null);\nvar map__45247 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__45244,(2),null);\nvar map__45247__$1 = cljs.core.__destructure_map(map__45247);\nvar base_type = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__45247__$1,new cljs.core.Keyword(null,\"base-type\",\"base-type\",1167971299));\nif(typeof id_or_name === 'string'){\nreturn base_type;\n} else {\nreturn true;\n}\n}),\":field clauses using a string field name must specify :base-type.\");\n});\n/**\n * Schema for a `:field` clause.\n */\nmetabase.mbql.schema.field = metabase.mbql.schema.require_base_type_for_field_name(metabase.mbql.schema.helpers.clause.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,\"field\",\"field\",-1302436500),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([\"id-or-name\",schema.core.cond_pre.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([metabase.mbql.schema.helpers.IntGreaterThanZero,metabase.mbql.schema.helpers.NonBlankString], 0)),\"options\",schema.core.maybe(schema.core.recursive(new cljs.core.Var(function(){return metabase.mbql.schema.FieldOptions;},new cljs.core.Symbol(\"metabase.mbql.schema\",\"FieldOptions\",\"metabase.mbql.schema/FieldOptions\",-475072702,null),cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null,\"private\",\"private\",-558947994),new cljs.core.Keyword(null,\"ns\",\"ns\",441598760),new cljs.core.Keyword(null,\"name\",\"name\",1843675177),new cljs.core.Keyword(null,\"file\",\"file\",-1269645878),new cljs.core.Keyword(null,\"end-column\",\"end-column\",1425389514),new cljs.core.Keyword(null,\"column\",\"column\",2078222095),new cljs.core.Keyword(null,\"line\",\"line\",212345235),new cljs.core.Keyword(null,\"end-line\",\"end-line\",1837326455),new cljs.core.Keyword(null,\"arglists\",\"arglists\",1661989754),new cljs.core.Keyword(null,\"doc\",\"doc\",1913296891),new cljs.core.Keyword(null,\"test\",\"test\",577538877)],[true,cljs.core.with_meta(new cljs.core.Symbol(null,\"metabase.mbql.schema\",\"metabase.mbql.schema\",-408168902,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"doc\",\"doc\",1913296891),\"Schema for validating a *normalized* MBQL query. This is also the definitive grammar for MBQL, wow!\"], null)),new cljs.core.Symbol(null,\"FieldOptions\",\"FieldOptions\",-1536320891,null),\"metabase/mbql/schema.cljc\",28,1,383,383,cljs.core.List.EMPTY,null,(cljs.core.truth_(metabase.mbql.schema.FieldOptions)?metabase.mbql.schema.FieldOptions.cljs$lang$test:null)]))))], 0)));\n/**\n * Schema for a `:field` clause, with the added constraint that it must use an integer Field ID.\n */\nmetabase.mbql.schema.field_COLON_id = schema.core.constrained.cljs$core$IFn$_invoke$arity$3(metabase.mbql.schema.field,(function (p__45248){\nvar vec__45249 = p__45248;\nvar _ = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__45249,(0),null);\nvar id_or_name = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__45249,(1),null);\nreturn cljs.core.integer_QMARK_(id_or_name);\n}),\"Must be a :field with an integer Field ID.\");\nmetabase.mbql.schema.Field_STAR_ = metabase.mbql.schema.helpers.one_of_STAR_.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var or__5045__auto__ = new cljs.core.Keyword(null,\"clause-name\",\"clause-name\",-996419059).cljs$core$IFn$_invoke$arity$1(cljs.core.meta((((typeof metabase !== 'undefined') && (typeof metabase.mbql !== 'undefined') && (typeof metabase.mbql.schema !== 'undefined') && (typeof metabase.mbql.schema.expression !== 'undefined'))?(new cljs.core.Var((function (){\nreturn metabase.mbql.schema.expression;\n}),cljs.core.with_meta(new cljs.core.Symbol(\"metabase.mbql.schema\",\"expression\",\"metabase.mbql.schema/expression\",370334320,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(\"cljs.analyzer\",\"no-resolve\",\"cljs.analyzer/no-resolve\",-1872351017),true], null)),cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null,\"requires-features\",\"requires-features\",-101116256),new cljs.core.Keyword(null,\"ns\",\"ns\",441598760),new cljs.core.Keyword(null,\"name\",\"name\",1843675177),new cljs.core.Keyword(null,\"file\",\"file\",-1269645878),new cljs.core.Keyword(null,\"end-column\",\"end-column\",1425389514),new cljs.core.Keyword(null,\"clause-name\",\"clause-name\",-996419059),new cljs.core.Keyword(null,\"column\",\"column\",2078222095),new cljs.core.Keyword(null,\"line\",\"line\",212345235),new cljs.core.Keyword(null,\"end-line\",\"end-line\",1837326455),new cljs.core.Keyword(null,\"clause-form\",\"clause-form\",1820463737),new cljs.core.Keyword(null,\"arglists\",\"arglists\",1661989754),new cljs.core.Keyword(null,\"doc\",\"doc\",1913296891),new cljs.core.Keyword(null,\"test\",\"test\",577538877)],[new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"expressions\",\"expressions\",255689909),\"null\"], null), null),cljs.core.with_meta(new cljs.core.Symbol(null,\"metabase.mbql.schema\",\"metabase.mbql.schema\",-408168902,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"doc\",\"doc\",1913296891),\"Schema for validating a *normalized* MBQL query. This is also the definitive grammar for MBQL, wow!\"], null)),new cljs.core.Symbol(null,\"expression\",\"expression\",1842843403,null),\"metabase/mbql/schema.cljc\",60,new cljs.core.Keyword(null,\"expression\",\"expression\",202311876),1,318,318,new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"expression\",\"expression\",202311876),new cljs.core.Keyword(null,\"expression-name\",\"expression-name\",-1798450709),cljs.core.list(new cljs.core.Symbol(null,\"quote\",\"quote\",1377916282,null),new cljs.core.Symbol(\"helpers\",\"NonBlankString\",\"helpers/NonBlankString\",-2060904596,null)),new cljs.core.Keyword(null,\"options\",\"options\",99638489),cljs.core.list(new cljs.core.Symbol(null,\"quote\",\"quote\",1377916282,null),cljs.core.list(new cljs.core.Symbol(null,\"optional\",\"optional\",-600484260,null),cljs.core.list(new cljs.core.Symbol(\"s\",\"pred\",\"s/pred\",-727014287,null),new cljs.core.Symbol(null,\"map?\",\"map?\",-1780568534,null),\"map\")))], null),cljs.core.List.EMPTY,\"Schema for a valid expression clause.\",(cljs.core.truth_(metabase.mbql.schema.expression)?metabase.mbql.schema.expression.cljs$lang$test:null)]))):null)));\nif(cljs.core.truth_(or__5045__auto__)){\nreturn or__5045__auto__;\n} else {\nreturn new cljs.core.Symbol(null,\"expression\",\"expression\",1842843403,null);\n}\n})(),metabase.mbql.schema.expression], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var or__5045__auto__ = new cljs.core.Keyword(null,\"clause-name\",\"clause-name\",-996419059).cljs$core$IFn$_invoke$arity$1(cljs.core.meta((((typeof metabase !== 'undefined') && (typeof metabase.mbql !== 'undefined') && (typeof metabase.mbql.schema !== 'undefined') && (typeof metabase.mbql.schema.field !== 'undefined'))?(new cljs.core.Var((function (){\nreturn metabase.mbql.schema.field;\n}),cljs.core.with_meta(new cljs.core.Symbol(\"metabase.mbql.schema\",\"field\",\"metabase.mbql.schema/field\",1566852856,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(\"cljs.analyzer\",\"no-resolve\",\"cljs.analyzer/no-resolve\",-1872351017),true], null)),cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null,\"added\",\"added\",2057651688),new cljs.core.Keyword(null,\"ns\",\"ns\",441598760),new cljs.core.Keyword(null,\"name\",\"name\",1843675177),new cljs.core.Keyword(null,\"file\",\"file\",-1269645878),new cljs.core.Keyword(null,\"end-column\",\"end-column\",1425389514),new cljs.core.Keyword(null,\"clause-name\",\"clause-name\",-996419059),new cljs.core.Keyword(null,\"column\",\"column\",2078222095),new cljs.core.Keyword(null,\"line\",\"line\",212345235),new cljs.core.Keyword(null,\"end-line\",\"end-line\",1837326455),new cljs.core.Keyword(null,\"arglists\",\"arglists\",1661989754),new cljs.core.Keyword(null,\"doc\",\"doc\",1913296891),new cljs.core.Keyword(null,\"test\",\"test\",577538877)],[\"0.39.0\",cljs.core.with_meta(new cljs.core.Symbol(null,\"metabase.mbql.schema\",\"metabase.mbql.schema\",-408168902,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"doc\",\"doc\",1913296891),\"Schema for validating a *normalized* MBQL query. This is also the definitive grammar for MBQL, wow!\"], null)),new cljs.core.Symbol(null,\"field\",\"field\",338095027,null),\"metabase/mbql/schema.cljc\",51,new cljs.core.Keyword(null,\"field\",\"field\",-1302436500),1,429,429,cljs.core.List.EMPTY,\"Schema for a `:field` clause.\",(cljs.core.truth_(metabase.mbql.schema.field)?metabase.mbql.schema.field.cljs$lang$test:null)]))):null)));\nif(cljs.core.truth_(or__5045__auto__)){\nreturn or__5045__auto__;\n} else {\nreturn new cljs.core.Symbol(null,\"field\",\"field\",338095027,null);\n}\n})(),metabase.mbql.schema.field], null)], 0));\n/**\n * Schema for either a `:field` clause (reference to a Field) or an `:expression` clause (reference to an expression).\n */\nmetabase.mbql.schema.Field = schema.core.recursive(new cljs.core.Var(function(){return metabase.mbql.schema.Field_STAR_;},new cljs.core.Symbol(\"metabase.mbql.schema\",\"Field*\",\"metabase.mbql.schema/Field*\",-1168278623,null),cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null,\"private\",\"private\",-558947994),new cljs.core.Keyword(null,\"ns\",\"ns\",441598760),new cljs.core.Keyword(null,\"name\",\"name\",1843675177),new cljs.core.Keyword(null,\"file\",\"file\",-1269645878),new cljs.core.Keyword(null,\"end-column\",\"end-column\",1425389514),new cljs.core.Keyword(null,\"column\",\"column\",2078222095),new cljs.core.Keyword(null,\"line\",\"line\",212345235),new cljs.core.Keyword(null,\"end-line\",\"end-line\",1837326455),new cljs.core.Keyword(null,\"arglists\",\"arglists\",1661989754),new cljs.core.Keyword(null,\"doc\",\"doc\",1913296891),new cljs.core.Keyword(null,\"test\",\"test\",577538877)],[true,cljs.core.with_meta(new cljs.core.Symbol(null,\"metabase.mbql.schema\",\"metabase.mbql.schema\",-408168902,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"doc\",\"doc\",1913296891),\"Schema for validating a *normalized* MBQL query. This is also the definitive grammar for MBQL, wow!\"], null)),new cljs.core.Symbol(null,\"Field*\",\"Field*\",-2104480026,null),\"metabase/mbql/schema.cljc\",22,1,445,445,cljs.core.List.EMPTY,null,(cljs.core.truth_(metabase.mbql.schema.Field_STAR_)?metabase.mbql.schema.Field_STAR_.cljs$lang$test:null)])));\n/**\n * Schema for a valid aggregation clause.\n */\nmetabase.mbql.schema.aggregation = metabase.mbql.schema.helpers.clause.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,\"aggregation\",\"aggregation\",1597476696),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([\"aggregation-clause-index\",schema.core.Int,\"options\",new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"optional\",\"optional\",2053951509),schema.core.pred.cljs$core$IFn$_invoke$arity$2(cljs.core.map_QMARK_,\"map\")], null)], 0));\n/**\n * Schema for any type of valid Field clause, or for an indexed reference to an aggregation clause.\n */\nmetabase.mbql.schema.FieldOrAggregationReference = schema.core.if$(cljs.core.partial.cljs$core$IFn$_invoke$arity$2(metabase.mbql.schema.helpers.is_clause_QMARK_,new cljs.core.Keyword(null,\"aggregation\",\"aggregation\",1597476696)),metabase.mbql.schema.aggregation,metabase.mbql.schema.Field);\n/**\n * Functions that return string values. Should match [[StringExpression]].\n */\nmetabase.mbql.schema.string_functions = new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 11, [new cljs.core.Keyword(null,\"upper\",\"upper\",246243906),null,new cljs.core.Keyword(null,\"ltrim\",\"ltrim\",1654269283),null,new cljs.core.Keyword(null,\"substring\",\"substring\",1140866276),null,new cljs.core.Keyword(null,\"replace\",\"replace\",-786587770),null,new cljs.core.Keyword(null,\"concat\",\"concat\",-2108183992),null,new cljs.core.Keyword(null,\"coalesce\",\"coalesce\",654622029),null,new cljs.core.Keyword(null,\"case\",\"case\",1143702196),null,new cljs.core.Keyword(null,\"lower\",\"lower\",1120320821),null,new cljs.core.Keyword(null,\"trim\",\"trim\",774319767),null,new cljs.core.Keyword(null,\"regex-match-first\",\"regex-match-first\",-657299718),null,new cljs.core.Keyword(null,\"rtrim\",\"rtrim\",-661336449),null], null), null);\nmetabase.mbql.schema.StringExpressionArg = schema.core.conditional.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([cljs.core.string_QMARK_,schema.core.Str,cljs.core.partial.cljs$core$IFn$_invoke$arity$2(metabase.mbql.schema.helpers.is_clause_QMARK_,metabase.mbql.schema.string_functions),schema.core.recursive(new cljs.core.Var(function(){return metabase.mbql.schema.StringExpression;},new cljs.core.Symbol(\"metabase.mbql.schema\",\"StringExpression\",\"metabase.mbql.schema/StringExpression\",970196104,null),cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null,\"ns\",\"ns\",441598760),new cljs.core.Keyword(null,\"name\",\"name\",1843675177),new cljs.core.Keyword(null,\"file\",\"file\",-1269645878),new cljs.core.Keyword(null,\"end-column\",\"end-column\",1425389514),new cljs.core.Keyword(null,\"column\",\"column\",2078222095),new cljs.core.Keyword(null,\"line\",\"line\",212345235),new cljs.core.Keyword(null,\"declared\",\"declared\",92336021),new cljs.core.Keyword(null,\"end-line\",\"end-line\",1837326455),new cljs.core.Keyword(null,\"arglists\",\"arglists\",1661989754),new cljs.core.Keyword(null,\"doc\",\"doc\",1913296891),new cljs.core.Keyword(null,\"test\",\"test\",577538877)],[cljs.core.with_meta(new cljs.core.Symbol(null,\"metabase.mbql.schema\",\"metabase.mbql.schema\",-408168902,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"doc\",\"doc\",1913296891),\"Schema for validating a *normalized* MBQL query. This is also the definitive grammar for MBQL, wow!\"], null)),new cljs.core.Symbol(null,\"StringExpression\",\"StringExpression\",-233088561,null),\"metabase/mbql/schema.cljc\",26,1,488,true,488,cljs.core.List.EMPTY,null,(cljs.core.truth_(metabase.mbql.schema.StringExpression)?metabase.mbql.schema.StringExpression.cljs$lang$test:null)]))),cljs.core.partial.cljs$core$IFn$_invoke$arity$2(metabase.mbql.schema.helpers.is_clause_QMARK_,new cljs.core.Keyword(null,\"value\",\"value\",305978217)),metabase.mbql.schema.value,new cljs.core.Keyword(null,\"else\",\"else\",-1508377146),metabase.mbql.schema.Field], 0));\n/**\n * Functions that return numeric values. Should match [[NumericExpression]].\n */\nmetabase.mbql.schema.numeric_functions = new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 26, [new cljs.core.Keyword(null,\"ceil\",\"ceil\",-1824929952),null,new cljs.core.Keyword(null,\"get-quarter\",\"get-quarter\",1327778593),null,new cljs.core.Keyword(null,\"*\",\"*\",-1294732318),null,new cljs.core.Keyword(null,\"temporal-extract\",\"temporal-extract\",1781686405),null,new cljs.core.Keyword(null,\"get-minute\",\"get-minute\",1468086343),null,new cljs.core.Keyword(null,\"sqrt\",\"sqrt\",-1270051929),null,new cljs.core.Keyword(null,\"-\",\"-\",-2112348439),null,new cljs.core.Keyword(null,\"exp\",\"exp\",-261706262),null,new cljs.core.Keyword(null,\"get-hour\",\"get-hour\",622714059),null,new cljs.core.Keyword(null,\"get-week\",\"get-week\",-888059349),null,new cljs.core.Keyword(null,\"coalesce\",\"coalesce\",654622029),null,new cljs.core.Keyword(null,\"/\",\"/\",1282502798),null,new cljs.core.Keyword(null,\"get-day-of-week\",\"get-day-of-week\",2010140752),null,new cljs.core.Keyword(null,\"round\",\"round\",2009433328),null,new cljs.core.Keyword(null,\"power\",\"power\",-937852079),null,new cljs.core.Keyword(null,\"get-second\",\"get-second\",-2065946318),null,new cljs.core.Keyword(null,\"+\",\"+\",1913524883),null,new cljs.core.Keyword(null,\"abs\",\"abs\",-246026477),null,new cljs.core.Keyword(null,\"case\",\"case\",1143702196),null,new cljs.core.Keyword(null,\"get-month\",\"get-month\",-369374731),null,new cljs.core.Keyword(null,\"length\",\"length\",588987862),null,new cljs.core.Keyword(null,\"get-year\",\"get-year\",-936011274),null,new cljs.core.Keyword(null,\"get-day\",\"get-day\",127568857),null,new cljs.core.Keyword(null,\"datetime-diff\",\"datetime-diff\",1133112155),null,new cljs.core.Keyword(null,\"log\",\"log\",-1595516004),null,new cljs.core.Keyword(null,\"floor\",\"floor\",1882041021),null], null), null);\n/**\n * Functions that return boolean values. Should match [[BooleanExpression]].\n */\nmetabase.mbql.schema.boolean_functions = new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 9, [new cljs.core.Keyword(null,\"<=\",\"<=\",-395636158),null,new cljs.core.Keyword(null,\">\",\">\",-555517146),null,new cljs.core.Keyword(null,\"or\",\"or\",235744169),null,new cljs.core.Keyword(null,\"not\",\"not\",-595976884),null,new cljs.core.Keyword(null,\">=\",\">=\",-623615505),null,new cljs.core.Keyword(null,\"!=\",\"!=\",-1841737356),null,new cljs.core.Keyword(null,\"and\",\"and\",-971899817),null,new cljs.core.Keyword(null,\"=\",\"=\",1152933628),null,new cljs.core.Keyword(null,\"<\",\"<\",-646864291),null], null), null);\nmetabase.mbql.schema.aggregations = new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 17, [new cljs.core.Keyword(null,\"min\",\"min\",444991522),null,new cljs.core.Keyword(null,\"stddev\",\"stddev\",-865474939),null,new cljs.core.Keyword(null,\"count-where\",\"count-where\",385407720),null,new cljs.core.Keyword(null,\"cum-count\",\"cum-count\",-1964431543),null,new cljs.core.Keyword(null,\"sum-where\",\"sum-where\",2135348428),null,new cljs.core.Keyword(null,\"cum-sum\",\"cum-sum\",2064902349),null,new cljs.core.Keyword(null,\"distinct\",\"distinct\",-1788879121),null,new cljs.core.Keyword(null,\"percentile\",\"percentile\",-601188752),null,new cljs.core.Keyword(null,\"aggregation-options\",\"aggregation-options\",-1904917550),null,new cljs.core.Keyword(null,\"var\",\"var\",-769682797),null,new cljs.core.Keyword(null,\"median\",\"median\",569566131),null,new cljs.core.Keyword(null,\"share\",\"share\",-589433933),null,new cljs.core.Keyword(null,\"max\",\"max\",61366548),null,new cljs.core.Keyword(null,\"count\",\"count\",2139924085),null,new cljs.core.Keyword(null,\"avg\",\"avg\",197406200),null,new cljs.core.Keyword(null,\"metric\",\"metric\",408798077),null,new cljs.core.Keyword(null,\"sum\",\"sum\",136986814),null], null), null);\n/**\n * Functions that return Date or DateTime values. Should match [[DatetimeExpression]].\n */\nmetabase.mbql.schema.datetime_functions = new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,\"now\",\"now\",-1650525531),null,new cljs.core.Keyword(null,\"convert-timezone\",\"convert-timezone\",-124803001),null,new cljs.core.Keyword(null,\"datetime-subtract\",\"datetime-subtract\",275307697),null,new cljs.core.Keyword(null,\"+\",\"+\",1913524883),null,new cljs.core.Keyword(null,\"datetime-add\",\"datetime-add\",209603411),null], null), null);\nmetabase.mbql.schema.NumericExpressionArg = schema.core.conditional.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([cljs.core.number_QMARK_,schema.core.Num,cljs.core.partial.cljs$core$IFn$_invoke$arity$2(metabase.mbql.schema.helpers.is_clause_QMARK_,metabase.mbql.schema.numeric_functions),schema.core.recursive(new cljs.core.Var(function(){return metabase.mbql.schema.NumericExpression;},new cljs.core.Symbol(\"metabase.mbql.schema\",\"NumericExpression\",\"metabase.mbql.schema/NumericExpression\",-859895030,null),cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null,\"ns\",\"ns\",441598760),new cljs.core.Keyword(null,\"name\",\"name\",1843675177),new cljs.core.Keyword(null,\"file\",\"file\",-1269645878),new cljs.core.Keyword(null,\"end-column\",\"end-column\",1425389514),new cljs.core.Keyword(null,\"column\",\"column\",2078222095),new cljs.core.Keyword(null,\"line\",\"line\",212345235),new cljs.core.Keyword(null,\"declared\",\"declared\",92336021),new cljs.core.Keyword(null,\"end-line\",\"end-line\",1837326455),new cljs.core.Keyword(null,\"arglists\",\"arglists\",1661989754),new cljs.core.Keyword(null,\"doc\",\"doc\",1913296891),new cljs.core.Keyword(null,\"test\",\"test\",577538877)],[cljs.core.with_meta(new cljs.core.Symbol(null,\"metabase.mbql.schema\",\"metabase.mbql.schema\",-408168902,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"doc\",\"doc\",1913296891),\"Schema for validating a *normalized* MBQL query. This is also the definitive grammar for MBQL, wow!\"], null)),new cljs.core.Symbol(null,\"NumericExpression\",\"NumericExpression\",-2082340941,null),\"metabase/mbql/schema.cljc\",27,1,522,true,522,cljs.core.List.EMPTY,null,(cljs.core.truth_(metabase.mbql.schema.NumericExpression)?metabase.mbql.schema.NumericExpression.cljs$lang$test:null)]))),cljs.core.partial.cljs$core$IFn$_invoke$arity$2(metabase.mbql.schema.helpers.is_clause_QMARK_,metabase.mbql.schema.aggregations),schema.core.recursive(new cljs.core.Var(function(){return metabase.mbql.schema.Aggregation;},new cljs.core.Symbol(\"metabase.mbql.schema\",\"Aggregation\",\"metabase.mbql.schema/Aggregation\",-1908264889,null),cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null,\"ns\",\"ns\",441598760),new cljs.core.Keyword(null,\"name\",\"name\",1843675177),new cljs.core.Keyword(null,\"file\",\"file\",-1269645878),new cljs.core.Keyword(null,\"end-column\",\"end-column\",1425389514),new cljs.core.Keyword(null,\"column\",\"column\",2078222095),new cljs.core.Keyword(null,\"line\",\"line\",212345235),new cljs.core.Keyword(null,\"declared\",\"declared\",92336021),new cljs.core.Keyword(null,\"end-line\",\"end-line\",1837326455),new cljs.core.Keyword(null,\"arglists\",\"arglists\",1661989754),new cljs.core.Keyword(null,\"doc\",\"doc\",1913296891),new cljs.core.Keyword(null,\"test\",\"test\",577538877)],[cljs.core.with_meta(new cljs.core.Symbol(null,\"metabase.mbql.schema\",\"metabase.mbql.schema\",-408168902,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"doc\",\"doc\",1913296891),\"Schema for validating a *normalized* MBQL query. This is also the definitive grammar for MBQL, wow!\"], null)),new cljs.core.Symbol(null,\"Aggregation\",\"Aggregation\",-955933538,null),\"metabase/mbql/schema.cljc\",21,1,525,true,525,cljs.core.List.EMPTY,null,(cljs.core.truth_(metabase.mbql.schema.Aggregation)?metabase.mbql.schema.Aggregation.cljs$lang$test:null)]))),cljs.core.partial.cljs$core$IFn$_invoke$arity$2(metabase.mbql.schema.helpers.is_clause_QMARK_,new cljs.core.Keyword(null,\"value\",\"value\",305978217)),metabase.mbql.schema.value,new cljs.core.Keyword(null,\"else\",\"else\",-1508377146),metabase.mbql.schema.Field], 0));\nmetabase.mbql.schema.DateTimeExpressionArg = schema.core.conditional.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([cljs.core.partial.cljs$core$IFn$_invoke$arity$2(metabase.mbql.schema.helpers.is_clause_QMARK_,metabase.mbql.schema.aggregations),schema.core.recursive(new cljs.core.Var(function(){return metabase.mbql.schema.Aggregation;},new cljs.core.Symbol(\"metabase.mbql.schema\",\"Aggregation\",\"metabase.mbql.schema/Aggregation\",-1908264889,null),cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null,\"ns\",\"ns\",441598760),new cljs.core.Keyword(null,\"name\",\"name\",1843675177),new cljs.core.Keyword(null,\"file\",\"file\",-1269645878),new cljs.core.Keyword(null,\"end-column\",\"end-column\",1425389514),new cljs.core.Keyword(null,\"column\",\"column\",2078222095),new cljs.core.Keyword(null,\"line\",\"line\",212345235),new cljs.core.Keyword(null,\"declared\",\"declared\",92336021),new cljs.core.Keyword(null,\"end-line\",\"end-line\",1837326455),new cljs.core.Keyword(null,\"arglists\",\"arglists\",1661989754),new cljs.core.Keyword(null,\"doc\",\"doc\",1913296891),new cljs.core.Keyword(null,\"test\",\"test\",577538877)],[cljs.core.with_meta(new cljs.core.Symbol(null,\"metabase.mbql.schema\",\"metabase.mbql.schema\",-408168902,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"doc\",\"doc\",1913296891),\"Schema for validating a *normalized* MBQL query. This is also the definitive grammar for MBQL, wow!\"], null)),new cljs.core.Symbol(null,\"Aggregation\",\"Aggregation\",-955933538,null),\"metabase/mbql/schema.cljc\",21,1,525,true,525,cljs.core.List.EMPTY,null,(cljs.core.truth_(metabase.mbql.schema.Aggregation)?metabase.mbql.schema.Aggregation.cljs$lang$test:null)]))),cljs.core.partial.cljs$core$IFn$_invoke$arity$2(metabase.mbql.schema.helpers.is_clause_QMARK_,new cljs.core.Keyword(null,\"value\",\"value\",305978217)),metabase.mbql.schema.value,cljs.core.partial.cljs$core$IFn$_invoke$arity$2(metabase.mbql.schema.helpers.is_clause_QMARK_,metabase.mbql.schema.datetime_functions),schema.core.recursive(new cljs.core.Var(function(){return metabase.mbql.schema.DatetimeExpression;},new cljs.core.Symbol(\"metabase.mbql.schema\",\"DatetimeExpression\",\"metabase.mbql.schema/DatetimeExpression\",-1440012226,null),cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null,\"ns\",\"ns\",441598760),new cljs.core.Keyword(null,\"name\",\"name\",1843675177),new cljs.core.Keyword(null,\"file\",\"file\",-1269645878),new cljs.core.Keyword(null,\"end-column\",\"end-column\",1425389514),new cljs.core.Keyword(null,\"column\",\"column\",2078222095),new cljs.core.Keyword(null,\"line\",\"line\",212345235),new cljs.core.Keyword(null,\"declared\",\"declared\",92336021),new cljs.core.Keyword(null,\"end-line\",\"end-line\",1837326455),new cljs.core.Keyword(null,\"arglists\",\"arglists\",1661989754),new cljs.core.Keyword(null,\"doc\",\"doc\",1913296891),new cljs.core.Keyword(null,\"test\",\"test\",577538877)],[cljs.core.with_meta(new cljs.core.Symbol(null,\"metabase.mbql.schema\",\"metabase.mbql.schema\",-408168902,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"doc\",\"doc\",1913296891),\"Schema for validating a *normalized* MBQL query. This is also the definitive grammar for MBQL, wow!\"], null)),new cljs.core.Symbol(null,\"DatetimeExpression\",\"DatetimeExpression\",1944354145,null),\"metabase/mbql/schema.cljc\",28,1,524,true,524,cljs.core.List.EMPTY,null,(cljs.core.truth_(metabase.mbql.schema.DatetimeExpression)?metabase.mbql.schema.DatetimeExpression.cljs$lang$test:null)]))),new cljs.core.Keyword(null,\"else\",\"else\",-1508377146),schema.core.cond_pre.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([metabase.mbql.schema.DateOrDatetimeLiteral,metabase.mbql.schema.Field], 0))], 0));\nmetabase.mbql.schema.ExpressionArg = schema.core.conditional.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([cljs.core.number_QMARK_,schema.core.Num,cljs.core.boolean_QMARK_,schema.core.Bool,cljs.core.partial.cljs$core$IFn$_invoke$arity$2(metabase.mbql.schema.helpers.is_clause_QMARK_,metabase.mbql.schema.boolean_functions),schema.core.recursive(new cljs.core.Var(function(){return metabase.mbql.schema.BooleanExpression;},new cljs.core.Symbol(\"metabase.mbql.schema\",\"BooleanExpression\",\"metabase.mbql.schema/BooleanExpression\",-469303836,null),cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null,\"ns\",\"ns\",441598760),new cljs.core.Keyword(null,\"name\",\"name\",1843675177),new cljs.core.Keyword(null,\"file\",\"file\",-1269645878),new cljs.core.Keyword(null,\"end-column\",\"end-column\",1425389514),new cljs.core.Keyword(null,\"column\",\"column\",2078222095),new cljs.core.Keyword(null,\"line\",\"line\",212345235),new cljs.core.Keyword(null,\"declared\",\"declared\",92336021),new cljs.core.Keyword(null,\"end-line\",\"end-line\",1837326455),new cljs.core.Keyword(null,\"arglists\",\"arglists\",1661989754),new cljs.core.Keyword(null,\"doc\",\"doc\",1913296891),new cljs.core.Keyword(null,\"test\",\"test\",577538877)],[cljs.core.with_meta(new cljs.core.Symbol(null,\"metabase.mbql.schema\",\"metabase.mbql.schema\",-408168902,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"doc\",\"doc\",1913296891),\"Schema for validating a *normalized* MBQL query. This is also the definitive grammar for MBQL, wow!\"], null)),new cljs.core.Symbol(null,\"BooleanExpression\",\"BooleanExpression\",1027887421,null),\"metabase/mbql/schema.cljc\",27,1,523,true,523,cljs.core.List.EMPTY,null,(cljs.core.truth_(metabase.mbql.schema.BooleanExpression)?metabase.mbql.schema.BooleanExpression.cljs$lang$test:null)]))),cljs.core.partial.cljs$core$IFn$_invoke$arity$2(metabase.mbql.schema.helpers.is_clause_QMARK_,metabase.mbql.schema.numeric_functions),schema.core.recursive(new cljs.core.Var(function(){return metabase.mbql.schema.NumericExpression;},new cljs.core.Symbol(\"metabase.mbql.schema\",\"NumericExpression\",\"metabase.mbql.schema/NumericExpression\",-859895030,null),cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null,\"ns\",\"ns\",441598760),new cljs.core.Keyword(null,\"name\",\"name\",1843675177),new cljs.core.Keyword(null,\"file\",\"file\",-1269645878),new cljs.core.Keyword(null,\"end-column\",\"end-column\",1425389514),new cljs.core.Keyword(null,\"column\",\"column\",2078222095),new cljs.core.Keyword(null,\"line\",\"line\",212345235),new cljs.core.Keyword(null,\"declared\",\"declared\",92336021),new cljs.core.Keyword(null,\"end-line\",\"end-line\",1837326455),new cljs.core.Keyword(null,\"arglists\",\"arglists\",1661989754),new cljs.core.Keyword(null,\"doc\",\"doc\",1913296891),new cljs.core.Keyword(null,\"test\",\"test\",577538877)],[cljs.core.with_meta(new cljs.core.Symbol(null,\"metabase.mbql.schema\",\"metabase.mbql.schema\",-408168902,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"doc\",\"doc\",1913296891),\"Schema for validating a *normalized* MBQL query. This is also the definitive grammar for MBQL, wow!\"], null)),new cljs.core.Symbol(null,\"NumericExpression\",\"NumericExpression\",-2082340941,null),\"metabase/mbql/schema.cljc\",27,1,522,true,522,cljs.core.List.EMPTY,null,(cljs.core.truth_(metabase.mbql.schema.NumericExpression)?metabase.mbql.schema.NumericExpression.cljs$lang$test:null)]))),cljs.core.partial.cljs$core$IFn$_invoke$arity$2(metabase.mbql.schema.helpers.is_clause_QMARK_,metabase.mbql.schema.datetime_functions),schema.core.recursive(new cljs.core.Var(function(){return metabase.mbql.schema.DatetimeExpression;},new cljs.core.Symbol(\"metabase.mbql.schema\",\"DatetimeExpression\",\"metabase.mbql.schema/DatetimeExpression\",-1440012226,null),cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null,\"ns\",\"ns\",441598760),new cljs.core.Keyword(null,\"name\",\"name\",1843675177),new cljs.core.Keyword(null,\"file\",\"file\",-1269645878),new cljs.core.Keyword(null,\"end-column\",\"end-column\",1425389514),new cljs.core.Keyword(null,\"column\",\"column\",2078222095),new cljs.core.Keyword(null,\"line\",\"line\",212345235),new cljs.core.Keyword(null,\"declared\",\"declared\",92336021),new cljs.core.Keyword(null,\"end-line\",\"end-line\",1837326455),new cljs.core.Keyword(null,\"arglists\",\"arglists\",1661989754),new cljs.core.Keyword(null,\"doc\",\"doc\",1913296891),new cljs.core.Keyword(null,\"test\",\"test\",577538877)],[cljs.core.with_meta(new cljs.core.Symbol(null,\"metabase.mbql.schema\",\"metabase.mbql.schema\",-408168902,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"doc\",\"doc\",1913296891),\"Schema for validating a *normalized* MBQL query. This is also the definitive grammar for MBQL, wow!\"], null)),new cljs.core.Symbol(null,\"DatetimeExpression\",\"DatetimeExpression\",1944354145,null),\"metabase/mbql/schema.cljc\",28,1,524,true,524,cljs.core.List.EMPTY,null,(cljs.core.truth_(metabase.mbql.schema.DatetimeExpression)?metabase.mbql.schema.DatetimeExpression.cljs$lang$test:null)]))),cljs.core.string_QMARK_,schema.core.Str,cljs.core.partial.cljs$core$IFn$_invoke$arity$2(metabase.mbql.schema.helpers.is_clause_QMARK_,metabase.mbql.schema.string_functions),schema.core.recursive(new cljs.core.Var(function(){return metabase.mbql.schema.StringExpression;},new cljs.core.Symbol(\"metabase.mbql.schema\",\"StringExpression\",\"metabase.mbql.schema/StringExpression\",970196104,null),cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null,\"ns\",\"ns\",441598760),new cljs.core.Keyword(null,\"name\",\"name\",1843675177),new cljs.core.Keyword(null,\"file\",\"file\",-1269645878),new cljs.core.Keyword(null,\"end-column\",\"end-column\",1425389514),new cljs.core.Keyword(null,\"column\",\"column\",2078222095),new cljs.core.Keyword(null,\"line\",\"line\",212345235),new cljs.core.Keyword(null,\"declared\",\"declared\",92336021),new cljs.core.Keyword(null,\"end-line\",\"end-line\",1837326455),new cljs.core.Keyword(null,\"arglists\",\"arglists\",1661989754),new cljs.core.Keyword(null,\"doc\",\"doc\",1913296891),new cljs.core.Keyword(null,\"test\",\"test\",577538877)],[cljs.core.with_meta(new cljs.core.Symbol(null,\"metabase.mbql.schema\",\"metabase.mbql.schema\",-408168902,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"doc\",\"doc\",1913296891),\"Schema for validating a *normalized* MBQL query. This is also the definitive grammar for MBQL, wow!\"], null)),new cljs.core.Symbol(null,\"StringExpression\",\"StringExpression\",-233088561,null),\"metabase/mbql/schema.cljc\",26,1,488,true,488,cljs.core.List.EMPTY,null,(cljs.core.truth_(metabase.mbql.schema.StringExpression)?metabase.mbql.schema.StringExpression.cljs$lang$test:null)]))),cljs.core.partial.cljs$core$IFn$_invoke$arity$2(metabase.mbql.schema.helpers.is_clause_QMARK_,new cljs.core.Keyword(null,\"value\",\"value\",305978217)),metabase.mbql.schema.value,new cljs.core.Keyword(null,\"else\",\"else\",-1508377146),metabase.mbql.schema.Field], 0));\nmetabase.mbql.schema.NumericExpressionArgOrInterval = schema.core.if$(cljs.core.partial.cljs$core$IFn$_invoke$arity$2(metabase.mbql.schema.helpers.is_clause_QMARK_,new cljs.core.Keyword(null,\"interval\",\"interval\",1708495417)),metabase.mbql.schema.interval,metabase.mbql.schema.NumericExpressionArg);\nmetabase.mbql.schema.IntGreaterThanZeroOrNumericExpression = schema.core.if$(cljs.core.number_QMARK_,metabase.mbql.schema.helpers.IntGreaterThanZero,metabase.mbql.schema.NumericExpressionArg);\n/**\n * Schema for a valid coalesce clause.\n */\nmetabase.mbql.schema.coalesce = metabase.mbql.schema.helpers.clause.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,\"coalesce\",\"coalesce\",654622029),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([\"a\",metabase.mbql.schema.ExpressionArg,\"b\",metabase.mbql.schema.ExpressionArg,\"more\",new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"rest\",\"rest\",-1241696419),metabase.mbql.schema.ExpressionArg], null)], 0));\n/**\n * Schema for a valid substring clause.\n */\nmetabase.mbql.schema.substring = metabase.mbql.schema.helpers.clause.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,\"substring\",\"substring\",1140866276),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([\"s\",metabase.mbql.schema.StringExpressionArg,\"start\",metabase.mbql.schema.IntGreaterThanZeroOrNumericExpression,\"length\",new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"optional\",\"optional\",2053951509),metabase.mbql.schema.NumericExpressionArg], null)], 0));\n/**\n * Schema for a valid length clause.\n */\nmetabase.mbql.schema.length = metabase.mbql.schema.helpers.clause.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,\"length\",\"length\",588987862),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([\"s\",metabase.mbql.schema.StringExpressionArg], 0));\n/**\n * Schema for a valid trim clause.\n */\nmetabase.mbql.schema.trim = metabase.mbql.schema.helpers.clause.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,\"trim\",\"trim\",774319767),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([\"s\",metabase.mbql.schema.StringExpressionArg], 0));\n/**\n * Schema for a valid rtrim clause.\n */\nmetabase.mbql.schema.rtrim = metabase.mbql.schema.helpers.clause.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,\"rtrim\",\"rtrim\",-661336449),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([\"s\",metabase.mbql.schema.StringExpressionArg], 0));\n/**\n * Schema for a valid ltrim clause.\n */\nmetabase.mbql.schema.ltrim = metabase.mbql.schema.helpers.clause.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,\"ltrim\",\"ltrim\",1654269283),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([\"s\",metabase.mbql.schema.StringExpressionArg], 0));\n/**\n * Schema for a valid upper clause.\n */\nmetabase.mbql.schema.upper = metabase.mbql.schema.helpers.clause.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,\"upper\",\"upper\",246243906),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([\"s\",metabase.mbql.schema.StringExpressionArg], 0));\n/**\n * Schema for a valid lower clause.\n */\nmetabase.mbql.schema.lower = metabase.mbql.schema.helpers.clause.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,\"lower\",\"lower\",1120320821),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([\"s\",metabase.mbql.schema.StringExpressionArg], 0));\n/**\n * Schema for a valid replace clause.\n */\nmetabase.mbql.schema.replace = metabase.mbql.schema.helpers.clause.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,\"replace\",\"replace\",-786587770),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([\"s\",metabase.mbql.schema.StringExpressionArg,\"match\",schema.core.Str,\"replacement\",schema.core.Str], 0));\n/**\n * Schema for a valid concat clause.\n */\nmetabase.mbql.schema.concat = metabase.mbql.schema.helpers.clause.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,\"concat\",\"concat\",-2108183992),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([\"a\",metabase.mbql.schema.StringExpressionArg,\"b\",metabase.mbql.schema.StringExpressionArg,\"more\",new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"rest\",\"rest\",-1241696419),metabase.mbql.schema.StringExpressionArg], null)], 0));\n/**\n * Schema for a valid regex-match-first clause.\n */\nmetabase.mbql.schema.regex_match_first = metabase.mbql.schema.helpers.clause.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,\"regex-match-first\",\"regex-match-first\",-657299718),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([\"s\",metabase.mbql.schema.StringExpressionArg,\"pattern\",schema.core.Str], 0));\n/**\n * Schema for a valid + clause.\n */\nmetabase.mbql.schema._PLUS_ = metabase.mbql.schema.helpers.clause.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,\"+\",\"+\",1913524883),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([\"x\",metabase.mbql.schema.NumericExpressionArgOrInterval,\"y\",metabase.mbql.schema.NumericExpressionArgOrInterval,\"more\",new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"rest\",\"rest\",-1241696419),metabase.mbql.schema.NumericExpressionArgOrInterval], null)], 0));\n/**\n * Schema for a valid - clause.\n */\nmetabase.mbql.schema._ = metabase.mbql.schema.helpers.clause.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,\"-\",\"-\",-2112348439),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([\"x\",metabase.mbql.schema.NumericExpressionArg,\"y\",metabase.mbql.schema.NumericExpressionArgOrInterval,\"more\",new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"rest\",\"rest\",-1241696419),metabase.mbql.schema.NumericExpressionArgOrInterval], null)], 0));\n/**\n * Schema for a valid / clause.\n */\nmetabase.mbql.schema._SLASH_ = metabase.mbql.schema.helpers.clause.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,\"/\",\"/\",1282502798),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([\"x\",metabase.mbql.schema.NumericExpressionArg,\"y\",metabase.mbql.schema.NumericExpressionArg,\"more\",new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"rest\",\"rest\",-1241696419),metabase.mbql.schema.NumericExpressionArg], null)], 0));\n/**\n * Schema for a valid * clause.\n */\nmetabase.mbql.schema._STAR_ = metabase.mbql.schema.helpers.clause.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,\"*\",\"*\",-1294732318),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([\"x\",metabase.mbql.schema.NumericExpressionArg,\"y\",metabase.mbql.schema.NumericExpressionArg,\"more\",new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"rest\",\"rest\",-1241696419),metabase.mbql.schema.NumericExpressionArg], null)], 0));\n/**\n * Schema for a valid floor clause.\n */\nmetabase.mbql.schema.floor = metabase.mbql.schema.helpers.clause.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,\"floor\",\"floor\",1882041021),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([\"x\",metabase.mbql.schema.NumericExpressionArg], 0));\n/**\n * Schema for a valid ceil clause.\n */\nmetabase.mbql.schema.ceil = metabase.mbql.schema.helpers.clause.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,\"ceil\",\"ceil\",-1824929952),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([\"x\",metabase.mbql.schema.NumericExpressionArg], 0));\n/**\n * Schema for a valid round clause.\n */\nmetabase.mbql.schema.round = metabase.mbql.schema.helpers.clause.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,\"round\",\"round\",2009433328),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([\"x\",metabase.mbql.schema.NumericExpressionArg], 0));\n/**\n * Schema for a valid abs clause.\n */\nmetabase.mbql.schema.abs = metabase.mbql.schema.helpers.clause.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,\"abs\",\"abs\",-246026477),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([\"x\",metabase.mbql.schema.NumericExpressionArg], 0));\n/**\n * Schema for a valid power clause.\n */\nmetabase.mbql.schema.power = metabase.mbql.schema.helpers.clause.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,\"power\",\"power\",-937852079),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([\"x\",metabase.mbql.schema.NumericExpressionArg,\"y\",metabase.mbql.schema.NumericExpressionArg], 0));\n/**\n * Schema for a valid sqrt clause.\n */\nmetabase.mbql.schema.sqrt = metabase.mbql.schema.helpers.clause.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,\"sqrt\",\"sqrt\",-1270051929),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([\"x\",metabase.mbql.schema.NumericExpressionArg], 0));\n/**\n * Schema for a valid exp clause.\n */\nmetabase.mbql.schema.exp = metabase.mbql.schema.helpers.clause.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,\"exp\",\"exp\",-261706262),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([\"x\",metabase.mbql.schema.NumericExpressionArg], 0));\n/**\n * Schema for a valid log clause.\n */\nmetabase.mbql.schema.log = metabase.mbql.schema.helpers.clause.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,\"log\",\"log\",-1595516004),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([\"x\",metabase.mbql.schema.NumericExpressionArg], 0));\n/**\n * Schema for the definition of a numeric expression. All numeric expressions evaluate to numeric values.\n */\nmetabase.mbql.schema.NumericExpression = schema.core.recursive(new cljs.core.Var(function(){return metabase.mbql.schema.NumericExpression_STAR_;},new cljs.core.Symbol(\"metabase.mbql.schema\",\"NumericExpression*\",\"metabase.mbql.schema/NumericExpression*\",-254856038,null),cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null,\"ns\",\"ns\",441598760),new cljs.core.Keyword(null,\"name\",\"name\",1843675177),new cljs.core.Keyword(null,\"file\",\"file\",-1269645878),new cljs.core.Keyword(null,\"end-column\",\"end-column\",1425389514),new cljs.core.Keyword(null,\"column\",\"column\",2078222095),new cljs.core.Keyword(null,\"line\",\"line\",212345235),new cljs.core.Keyword(null,\"declared\",\"declared\",92336021),new cljs.core.Keyword(null,\"end-line\",\"end-line\",1837326455),new cljs.core.Keyword(null,\"arglists\",\"arglists\",1661989754),new cljs.core.Keyword(null,\"doc\",\"doc\",1913296891),new cljs.core.Keyword(null,\"test\",\"test\",577538877)],[cljs.core.with_meta(new cljs.core.Symbol(null,\"metabase.mbql.schema\",\"metabase.mbql.schema\",-408168902,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"doc\",\"doc\",1913296891),\"Schema for validating a *normalized* MBQL query. This is also the definitive grammar for MBQL, wow!\"], null)),new cljs.core.Symbol(null,\"NumericExpression*\",\"NumericExpression*\",-1459070895,null),\"metabase/mbql/schema.cljc\",28,1,664,true,664,cljs.core.List.EMPTY,null,(cljs.core.truth_(metabase.mbql.schema.NumericExpression_STAR_)?metabase.mbql.schema.NumericExpression_STAR_.cljs$lang$test:null)])));\n/**\n * Schema for a valid datetime-diff clause.\n */\nmetabase.mbql.schema.datetime_diff = metabase.mbql.schema.helpers.clause.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,\"datetime-diff\",\"datetime-diff\",1133112155),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([\"datetime-x\",metabase.mbql.schema.DateTimeExpressionArg,\"datetime-y\",metabase.mbql.schema.DateTimeExpressionArg,\"unit\",metabase.mbql.schema.DatetimeDiffUnits], 0));\n/**\n * Schema for a valid temporal-extract clause.\n */\nmetabase.mbql.schema.temporal_extract = metabase.mbql.schema.helpers.clause.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,\"temporal-extract\",\"temporal-extract\",1781686405),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([\"datetime\",metabase.mbql.schema.DateTimeExpressionArg,\"unit\",metabase.mbql.schema.TemporalExtractUnits,\"mode\",new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"optional\",\"optional\",2053951509),metabase.mbql.schema.ExtractWeekModes], null)], 0));\n/**\n * Schema for a valid get-year clause.\n */\nmetabase.mbql.schema.get_year = metabase.mbql.schema.helpers.clause.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,\"get-year\",\"get-year\",-936011274),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([\"date\",metabase.mbql.schema.DateTimeExpressionArg], 0));\n/**\n * Schema for a valid get-quarter clause.\n */\nmetabase.mbql.schema.get_quarter = metabase.mbql.schema.helpers.clause.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,\"get-quarter\",\"get-quarter\",1327778593),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([\"date\",metabase.mbql.schema.DateTimeExpressionArg], 0));\n/**\n * Schema for a valid get-month clause.\n */\nmetabase.mbql.schema.get_month = metabase.mbql.schema.helpers.clause.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,\"get-month\",\"get-month\",-369374731),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([\"date\",metabase.mbql.schema.DateTimeExpressionArg], 0));\n/**\n * Schema for a valid get-week clause.\n */\nmetabase.mbql.schema.get_week = metabase.mbql.schema.helpers.clause.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,\"get-week\",\"get-week\",-888059349),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([\"date\",metabase.mbql.schema.DateTimeExpressionArg,\"mode\",new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"optional\",\"optional\",2053951509),metabase.mbql.schema.ExtractWeekModes], null)], 0));\n/**\n * Schema for a valid get-day clause.\n */\nmetabase.mbql.schema.get_day = metabase.mbql.schema.helpers.clause.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,\"get-day\",\"get-day\",127568857),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([\"date\",metabase.mbql.schema.DateTimeExpressionArg], 0));\n/**\n * Schema for a valid get-day-of-week clause.\n */\nmetabase.mbql.schema.get_day_of_week = metabase.mbql.schema.helpers.clause.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,\"get-day-of-week\",\"get-day-of-week\",2010140752),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([\"date\",metabase.mbql.schema.DateTimeExpressionArg], 0));\n/**\n * Schema for a valid get-hour clause.\n */\nmetabase.mbql.schema.get_hour = metabase.mbql.schema.helpers.clause.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,\"get-hour\",\"get-hour\",622714059),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([\"datetime\",metabase.mbql.schema.DateTimeExpressionArg], 0));\n/**\n * Schema for a valid get-minute clause.\n */\nmetabase.mbql.schema.get_minute = metabase.mbql.schema.helpers.clause.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,\"get-minute\",\"get-minute\",1468086343),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([\"datetime\",metabase.mbql.schema.DateTimeExpressionArg], 0));\n/**\n * Schema for a valid get-second clause.\n */\nmetabase.mbql.schema.get_second = metabase.mbql.schema.helpers.clause.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,\"get-second\",\"get-second\",-2065946318),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([\"datetime\",metabase.mbql.schema.DateTimeExpressionArg], 0));\n/**\n * Schema for a valid convert-timezone clause.\n */\nmetabase.mbql.schema.convert_timezone = metabase.mbql.schema.helpers.clause.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,\"convert-timezone\",\"convert-timezone\",-124803001),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([\"datetime\",metabase.mbql.schema.DateTimeExpressionArg,\"to\",metabase.mbql.schema.TimezoneId,\"from\",new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"optional\",\"optional\",2053951509),metabase.mbql.schema.TimezoneId], null)], 0));\nmetabase.mbql.schema.ArithmeticDateTimeUnit = schema.core.named(cljs.core.apply.cljs$core$IFn$_invoke$arity$2(schema.core.enum$,new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 9, [new cljs.core.Keyword(null,\"quarter\",\"quarter\",-508147616),null,new cljs.core.Keyword(null,\"day\",\"day\",-274800446),null,new cljs.core.Keyword(null,\"hour\",\"hour\",-555989214),null,new cljs.core.Keyword(null,\"week\",\"week\",-1326473278),null,new cljs.core.Keyword(null,\"second\",\"second\",-444702010),null,new cljs.core.Keyword(null,\"month\",\"month\",-1960248533),null,new cljs.core.Keyword(null,\"year\",\"year\",335913393),null,new cljs.core.Keyword(null,\"millisecond\",\"millisecond\",-540123566),null,new cljs.core.Keyword(null,\"minute\",\"minute\",-642875969),null], null), null)),\"arithmetic-datetime-unit\");\n/**\n * Schema for a valid datetime-add clause.\n */\nmetabase.mbql.schema.datetime_add = metabase.mbql.schema.helpers.clause.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,\"datetime-add\",\"datetime-add\",209603411),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([\"datetime\",metabase.mbql.schema.DateTimeExpressionArg,\"amount\",metabase.mbql.schema.NumericExpressionArg,\"unit\",metabase.mbql.schema.ArithmeticDateTimeUnit], 0));\n/**\n * Schema for a valid now clause.\n */\nmetabase.mbql.schema.now = metabase.mbql.schema.helpers.clause(new cljs.core.Keyword(null,\"now\",\"now\",-1650525531));\n/**\n * Schema for a valid datetime-subtract clause.\n */\nmetabase.mbql.schema.datetime_subtract = metabase.mbql.schema.helpers.clause.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,\"datetime-subtract\",\"datetime-subtract\",275307697),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([\"datetime\",metabase.mbql.schema.DateTimeExpressionArg,\"amount\",metabase.mbql.schema.NumericExpressionArg,\"unit\",metabase.mbql.schema.ArithmeticDateTimeUnit], 0));\nmetabase.mbql.schema.DatetimeExpression_STAR_ = metabase.mbql.schema.helpers.one_of_STAR_.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var or__5045__auto__ = new cljs.core.Keyword(null,\"clause-name\",\"clause-name\",-996419059).cljs$core$IFn$_invoke$arity$1(cljs.core.meta((((typeof metabase !== 'undefined') && (typeof metabase.mbql !== 'undefined') && (typeof metabase.mbql.schema !== 'undefined') && (typeof metabase.mbql.schema._PLUS_ !== 'undefined'))?(new cljs.core.Var((function (){\nreturn metabase.mbql.schema._PLUS_;\n}),cljs.core.with_meta(new cljs.core.Symbol(\"metabase.mbql.schema\",\"+\",\"metabase.mbql.schema/+\",-1802115711,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(\"cljs.analyzer\",\"no-resolve\",\"cljs.analyzer/no-resolve\",-1872351017),true], null)),cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null,\"requires-features\",\"requires-features\",-101116256),new cljs.core.Keyword(null,\"ns\",\"ns\",441598760),new cljs.core.Keyword(null,\"name\",\"name\",1843675177),new cljs.core.Keyword(null,\"file\",\"file\",-1269645878),new cljs.core.Keyword(null,\"end-column\",\"end-column\",1425389514),new cljs.core.Keyword(null,\"clause-name\",\"clause-name\",-996419059),new cljs.core.Keyword(null,\"column\",\"column\",2078222095),new cljs.core.Keyword(null,\"line\",\"line\",212345235),new cljs.core.Keyword(null,\"end-line\",\"end-line\",1837326455),new cljs.core.Keyword(null,\"clause-form\",\"clause-form\",1820463737),new cljs.core.Keyword(null,\"arglists\",\"arglists\",1661989754),new cljs.core.Keyword(null,\"doc\",\"doc\",1913296891),new cljs.core.Keyword(null,\"test\",\"test\",577538877)],[new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"expressions\",\"expressions\",255689909),\"null\"], null), null),cljs.core.with_meta(new cljs.core.Symbol(null,\"metabase.mbql.schema\",\"metabase.mbql.schema\",-408168902,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"doc\",\"doc\",1913296891),\"Schema for validating a *normalized* MBQL query. This is also the definitive grammar for MBQL, wow!\"], null)),new cljs.core.Symbol(null,\"+\",\"+\",-740910886,null),\"metabase/mbql/schema.cljc\",51,new cljs.core.Keyword(null,\"+\",\"+\",1913524883),1,630,630,new cljs.core.PersistentVector(null, 7, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"+\",\"+\",1913524883),new cljs.core.Keyword(null,\"x\",\"x\",2099068185),cljs.core.list(new cljs.core.Symbol(null,\"quote\",\"quote\",1377916282,null),new cljs.core.Symbol(null,\"NumericExpressionArgOrInterval\",\"NumericExpressionArgOrInterval\",-151709337,null)),new cljs.core.Keyword(null,\"y\",\"y\",-1757859776),cljs.core.list(new cljs.core.Symbol(null,\"quote\",\"quote\",1377916282,null),new cljs.core.Symbol(null,\"NumericExpressionArgOrInterval\",\"NumericExpressionArgOrInterval\",-151709337,null)),new cljs.core.Keyword(null,\"more\",\"more\",-2058821800),cljs.core.list(new cljs.core.Symbol(null,\"quote\",\"quote\",1377916282,null),cljs.core.list(new cljs.core.Symbol(null,\"rest\",\"rest\",398835108,null),new cljs.core.Symbol(null,\"NumericExpressionArgOrInterval\",\"NumericExpressionArgOrInterval\",-151709337,null)))], null),cljs.core.List.EMPTY,\"Schema for a valid + clause.\",(cljs.core.truth_(metabase.mbql.schema._PLUS_)?metabase.mbql.schema._PLUS_.cljs$lang$test:null)]))):null)));\nif(cljs.core.truth_(or__5045__auto__)){\nreturn or__5045__auto__;\n} else {\nreturn new cljs.core.Symbol(null,\"+\",\"+\",-740910886,null);\n}\n})(),metabase.mbql.schema._PLUS_], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var or__5045__auto__ = new cljs.core.Keyword(null,\"clause-name\",\"clause-name\",-996419059).cljs$core$IFn$_invoke$arity$1(cljs.core.meta((((typeof metabase !== 'undefined') && (typeof metabase.mbql !== 'undefined') && (typeof metabase.mbql.schema !== 'undefined') && (typeof metabase.mbql.schema.datetime_add !== 'undefined'))?(new cljs.core.Var((function (){\nreturn metabase.mbql.schema.datetime_add;\n}),cljs.core.with_meta(new cljs.core.Symbol(\"metabase.mbql.schema\",\"datetime-add\",\"metabase.mbql.schema/datetime-add\",654654691,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(\"cljs.analyzer\",\"no-resolve\",\"cljs.analyzer/no-resolve\",-1872351017),true], null)),cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null,\"requires-features\",\"requires-features\",-101116256),new cljs.core.Keyword(null,\"ns\",\"ns\",441598760),new cljs.core.Keyword(null,\"name\",\"name\",1843675177),new cljs.core.Keyword(null,\"file\",\"file\",-1269645878),new cljs.core.Keyword(null,\"end-column\",\"end-column\",1425389514),new cljs.core.Keyword(null,\"clause-name\",\"clause-name\",-996419059),new cljs.core.Keyword(null,\"column\",\"column\",2078222095),new cljs.core.Keyword(null,\"line\",\"line\",212345235),new cljs.core.Keyword(null,\"end-line\",\"end-line\",1837326455),new cljs.core.Keyword(null,\"clause-form\",\"clause-form\",1820463737),new cljs.core.Keyword(null,\"arglists\",\"arglists\",1661989754),new cljs.core.Keyword(null,\"doc\",\"doc\",1913296891),new cljs.core.Keyword(null,\"test\",\"test\",577538877)],[new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"date-arithmetics\",\"date-arithmetics\",-1832808309),\"null\"], null), null),cljs.core.with_meta(new cljs.core.Symbol(null,\"metabase.mbql.schema\",\"metabase.mbql.schema\",-408168902,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"doc\",\"doc\",1913296891),\"Schema for validating a *normalized* MBQL query. This is also the definitive grammar for MBQL, wow!\"], null)),new cljs.core.Symbol(null,\"datetime-add\",\"datetime-add\",1850134938,null),\"metabase/mbql/schema.cljc\",67,new cljs.core.Keyword(null,\"datetime-add\",\"datetime-add\",209603411),1,729,729,new cljs.core.PersistentVector(null, 7, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"datetime-add\",\"datetime-add\",209603411),new cljs.core.Keyword(null,\"datetime\",\"datetime\",494675702),cljs.core.list(new cljs.core.Symbol(null,\"quote\",\"quote\",1377916282,null),new cljs.core.Symbol(null,\"DateTimeExpressionArg\",\"DateTimeExpressionArg\",-1507653823,null)),new cljs.core.Keyword(null,\"amount\",\"amount\",364489504),cljs.core.list(new cljs.core.Symbol(null,\"quote\",\"quote\",1377916282,null),new cljs.core.Symbol(null,\"NumericExpressionArg\",\"NumericExpressionArg\",-1537445195,null)),new cljs.core.Keyword(null,\"unit\",\"unit\",375175175),cljs.core.list(new cljs.core.Symbol(null,\"quote\",\"quote\",1377916282,null),new cljs.core.Symbol(null,\"ArithmeticDateTimeUnit\",\"ArithmeticDateTimeUnit\",-838492507,null))], null),cljs.core.List.EMPTY,\"Schema for a valid datetime-add clause.\",(cljs.core.truth_(metabase.mbql.schema.datetime_add)?metabase.mbql.schema.datetime_add.cljs$lang$test:null)]))):null)));\nif(cljs.core.truth_(or__5045__auto__)){\nreturn or__5045__auto__;\n} else {\nreturn new cljs.core.Symbol(null,\"datetime-add\",\"datetime-add\",1850134938,null);\n}\n})(),metabase.mbql.schema.datetime_add], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var or__5045__auto__ = new cljs.core.Keyword(null,\"clause-name\",\"clause-name\",-996419059).cljs$core$IFn$_invoke$arity$1(cljs.core.meta((((typeof metabase !== 'undefined') && (typeof metabase.mbql !== 'undefined') && (typeof metabase.mbql.schema !== 'undefined') && (typeof metabase.mbql.schema.datetime_subtract !== 'undefined'))?(new cljs.core.Var((function (){\nreturn metabase.mbql.schema.datetime_subtract;\n}),cljs.core.with_meta(new cljs.core.Symbol(\"metabase.mbql.schema\",\"datetime-subtract\",\"metabase.mbql.schema/datetime-subtract\",-1242286173,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(\"cljs.analyzer\",\"no-resolve\",\"cljs.analyzer/no-resolve\",-1872351017),true], null)),cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null,\"requires-features\",\"requires-features\",-101116256),new cljs.core.Keyword(null,\"ns\",\"ns\",441598760),new cljs.core.Keyword(null,\"name\",\"name\",1843675177),new cljs.core.Keyword(null,\"file\",\"file\",-1269645878),new cljs.core.Keyword(null,\"end-column\",\"end-column\",1425389514),new cljs.core.Keyword(null,\"clause-name\",\"clause-name\",-996419059),new cljs.core.Keyword(null,\"column\",\"column\",2078222095),new cljs.core.Keyword(null,\"line\",\"line\",212345235),new cljs.core.Keyword(null,\"end-line\",\"end-line\",1837326455),new cljs.core.Keyword(null,\"clause-form\",\"clause-form\",1820463737),new cljs.core.Keyword(null,\"arglists\",\"arglists\",1661989754),new cljs.core.Keyword(null,\"doc\",\"doc\",1913296891),new cljs.core.Keyword(null,\"test\",\"test\",577538877)],[new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"date-arithmetics\",\"date-arithmetics\",-1832808309),\"null\"], null), null),cljs.core.with_meta(new cljs.core.Symbol(null,\"metabase.mbql.schema\",\"metabase.mbql.schema\",-408168902,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"doc\",\"doc\",1913296891),\"Schema for validating a *normalized* MBQL query. This is also the definitive grammar for MBQL, wow!\"], null)),new cljs.core.Symbol(null,\"datetime-subtract\",\"datetime-subtract\",1915839224,null),\"metabase/mbql/schema.cljc\",72,new cljs.core.Keyword(null,\"datetime-subtract\",\"datetime-subtract\",275307697),1,736,736,new cljs.core.PersistentVector(null, 7, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"datetime-subtract\",\"datetime-subtract\",275307697),new cljs.core.Keyword(null,\"datetime\",\"datetime\",494675702),cljs.core.list(new cljs.core.Symbol(null,\"quote\",\"quote\",1377916282,null),new cljs.core.Symbol(null,\"DateTimeExpressionArg\",\"DateTimeExpressionArg\",-1507653823,null)),new cljs.core.Keyword(null,\"amount\",\"amount\",364489504),cljs.core.list(new cljs.core.Symbol(null,\"quote\",\"quote\",1377916282,null),new cljs.core.Symbol(null,\"NumericExpressionArg\",\"NumericExpressionArg\",-1537445195,null)),new cljs.core.Keyword(null,\"unit\",\"unit\",375175175),cljs.core.list(new cljs.core.Symbol(null,\"quote\",\"quote\",1377916282,null),new cljs.core.Symbol(null,\"ArithmeticDateTimeUnit\",\"ArithmeticDateTimeUnit\",-838492507,null))], null),cljs.core.List.EMPTY,\"Schema for a valid datetime-subtract clause.\",(cljs.core.truth_(metabase.mbql.schema.datetime_subtract)?metabase.mbql.schema.datetime_subtract.cljs$lang$test:null)]))):null)));\nif(cljs.core.truth_(or__5045__auto__)){\nreturn or__5045__auto__;\n} else {\nreturn new cljs.core.Symbol(null,\"datetime-subtract\",\"datetime-subtract\",1915839224,null);\n}\n})(),metabase.mbql.schema.datetime_subtract], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var or__5045__auto__ = new cljs.core.Keyword(null,\"clause-name\",\"clause-name\",-996419059).cljs$core$IFn$_invoke$arity$1(cljs.core.meta((((typeof metabase !== 'undefined') && (typeof metabase.mbql !== 'undefined') && (typeof metabase.mbql.schema !== 'undefined') && (typeof metabase.mbql.schema.convert_timezone !== 'undefined'))?(new cljs.core.Var((function (){\nreturn metabase.mbql.schema.convert_timezone;\n}),cljs.core.with_meta(new cljs.core.Symbol(\"metabase.mbql.schema\",\"convert-timezone\",\"metabase.mbql.schema/convert-timezone\",1628930633,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(\"cljs.analyzer\",\"no-resolve\",\"cljs.analyzer/no-resolve\",-1872351017),true], null)),cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null,\"requires-features\",\"requires-features\",-101116256),new cljs.core.Keyword(null,\"ns\",\"ns\",441598760),new cljs.core.Keyword(null,\"name\",\"name\",1843675177),new cljs.core.Keyword(null,\"file\",\"file\",-1269645878),new cljs.core.Keyword(null,\"end-column\",\"end-column\",1425389514),new cljs.core.Keyword(null,\"clause-name\",\"clause-name\",-996419059),new cljs.core.Keyword(null,\"column\",\"column\",2078222095),new cljs.core.Keyword(null,\"line\",\"line\",212345235),new cljs.core.Keyword(null,\"end-line\",\"end-line\",1837326455),new cljs.core.Keyword(null,\"clause-form\",\"clause-form\",1820463737),new cljs.core.Keyword(null,\"arglists\",\"arglists\",1661989754),new cljs.core.Keyword(null,\"doc\",\"doc\",1913296891),new cljs.core.Keyword(null,\"test\",\"test\",577538877)],[new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"convert-timezone\",\"convert-timezone\",-124803001),\"null\"], null), null),cljs.core.with_meta(new cljs.core.Symbol(null,\"metabase.mbql.schema\",\"metabase.mbql.schema\",-408168902,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"doc\",\"doc\",1913296891),\"Schema for validating a *normalized* MBQL query. This is also the definitive grammar for MBQL, wow!\"], null)),new cljs.core.Symbol(null,\"convert-timezone\",\"convert-timezone\",1515728526,null),\"metabase/mbql/schema.cljc\",71,new cljs.core.Keyword(null,\"convert-timezone\",\"convert-timezone\",-124803001),1,719,719,new cljs.core.PersistentVector(null, 7, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"convert-timezone\",\"convert-timezone\",-124803001),new cljs.core.Keyword(null,\"datetime\",\"datetime\",494675702),cljs.core.list(new cljs.core.Symbol(null,\"quote\",\"quote\",1377916282,null),new cljs.core.Symbol(null,\"DateTimeExpressionArg\",\"DateTimeExpressionArg\",-1507653823,null)),new cljs.core.Keyword(null,\"to\",\"to\",192099007),cljs.core.list(new cljs.core.Symbol(null,\"quote\",\"quote\",1377916282,null),new cljs.core.Symbol(null,\"TimezoneId\",\"TimezoneId\",-1406242397,null)),new cljs.core.Keyword(null,\"from\",\"from\",1815293044),cljs.core.list(new cljs.core.Symbol(null,\"quote\",\"quote\",1377916282,null),cljs.core.list(new cljs.core.Symbol(null,\"optional\",\"optional\",-600484260,null),new cljs.core.Symbol(null,\"TimezoneId\",\"TimezoneId\",-1406242397,null)))], null),cljs.core.List.EMPTY,\"Schema for a valid convert-timezone clause.\",(cljs.core.truth_(metabase.mbql.schema.convert_timezone)?metabase.mbql.schema.convert_timezone.cljs$lang$test:null)]))):null)));\nif(cljs.core.truth_(or__5045__auto__)){\nreturn or__5045__auto__;\n} else {\nreturn new cljs.core.Symbol(null,\"convert-timezone\",\"convert-timezone\",1515728526,null);\n}\n})(),metabase.mbql.schema.convert_timezone], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var or__5045__auto__ = new cljs.core.Keyword(null,\"clause-name\",\"clause-name\",-996419059).cljs$core$IFn$_invoke$arity$1(cljs.core.meta((((typeof metabase !== 'undefined') && (typeof metabase.mbql !== 'undefined') && (typeof metabase.mbql.schema !== 'undefined') && (typeof metabase.mbql.schema.now !== 'undefined'))?(new cljs.core.Var((function (){\nreturn metabase.mbql.schema.now;\n}),cljs.core.with_meta(new cljs.core.Symbol(\"metabase.mbql.schema\",\"now\",\"metabase.mbql.schema/now\",665138615,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(\"cljs.analyzer\",\"no-resolve\",\"cljs.analyzer/no-resolve\",-1872351017),true], null)),cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null,\"requires-features\",\"requires-features\",-101116256),new cljs.core.Keyword(null,\"ns\",\"ns\",441598760),new cljs.core.Keyword(null,\"name\",\"name\",1843675177),new cljs.core.Keyword(null,\"file\",\"file\",-1269645878),new cljs.core.Keyword(null,\"end-column\",\"end-column\",1425389514),new cljs.core.Keyword(null,\"clause-name\",\"clause-name\",-996419059),new cljs.core.Keyword(null,\"column\",\"column\",2078222095),new cljs.core.Keyword(null,\"line\",\"line\",212345235),new cljs.core.Keyword(null,\"end-line\",\"end-line\",1837326455),new cljs.core.Keyword(null,\"clause-form\",\"clause-form\",1820463737),new cljs.core.Keyword(null,\"arglists\",\"arglists\",1661989754),new cljs.core.Keyword(null,\"doc\",\"doc\",1913296891),new cljs.core.Keyword(null,\"test\",\"test\",577538877)],[new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"now\",\"now\",-1650525531),\"null\"], null), null),cljs.core.with_meta(new cljs.core.Symbol(null,\"metabase.mbql.schema\",\"metabase.mbql.schema\",-408168902,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"doc\",\"doc\",1913296891),\"Schema for validating a *normalized* MBQL query. This is also the definitive grammar for MBQL, wow!\"], null)),new cljs.core.Symbol(null,\"now\",\"now\",-9994004,null),\"metabase/mbql/schema.cljc\",45,new cljs.core.Keyword(null,\"now\",\"now\",-1650525531),1,734,734,new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"now\",\"now\",-1650525531)], null),cljs.core.List.EMPTY,\"Schema for a valid now clause.\",(cljs.core.truth_(metabase.mbql.schema.now)?metabase.mbql.schema.now.cljs$lang$test:null)]))):null)));\nif(cljs.core.truth_(or__5045__auto__)){\nreturn or__5045__auto__;\n} else {\nreturn new cljs.core.Symbol(null,\"now\",\"now\",-9994004,null);\n}\n})(),metabase.mbql.schema.now], null)], 0));\n/**\n * Schema for the definition of a date function expression.\n */\nmetabase.mbql.schema.DatetimeExpression = schema.core.recursive(new cljs.core.Var(function(){return metabase.mbql.schema.DatetimeExpression_STAR_;},new cljs.core.Symbol(\"metabase.mbql.schema\",\"DatetimeExpression*\",\"metabase.mbql.schema/DatetimeExpression*\",-1766428848,null),cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null,\"private\",\"private\",-558947994),new cljs.core.Keyword(null,\"ns\",\"ns\",441598760),new cljs.core.Keyword(null,\"name\",\"name\",1843675177),new cljs.core.Keyword(null,\"file\",\"file\",-1269645878),new cljs.core.Keyword(null,\"end-column\",\"end-column\",1425389514),new cljs.core.Keyword(null,\"column\",\"column\",2078222095),new cljs.core.Keyword(null,\"line\",\"line\",212345235),new cljs.core.Keyword(null,\"end-line\",\"end-line\",1837326455),new cljs.core.Keyword(null,\"arglists\",\"arglists\",1661989754),new cljs.core.Keyword(null,\"doc\",\"doc\",1913296891),new cljs.core.Keyword(null,\"test\",\"test\",577538877)],[true,cljs.core.with_meta(new cljs.core.Symbol(null,\"metabase.mbql.schema\",\"metabase.mbql.schema\",-408168902,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"doc\",\"doc\",1913296891),\"Schema for validating a *normalized* MBQL query. This is also the definitive grammar for MBQL, wow!\"], null)),new cljs.core.Symbol(null,\"DatetimeExpression*\",\"DatetimeExpression*\",1609939947,null),\"metabase/mbql/schema.cljc\",35,1,741,741,cljs.core.List.EMPTY,null,(cljs.core.truth_(metabase.mbql.schema.DatetimeExpression_STAR_)?metabase.mbql.schema.DatetimeExpression_STAR_.cljs$lang$test:null)])));\n/**\n * Schema for the definition of an string expression.\n */\nmetabase.mbql.schema.StringExpression = schema.core.recursive(new cljs.core.Var(function(){return metabase.mbql.schema.StringExpression_STAR_;},new cljs.core.Symbol(\"metabase.mbql.schema\",\"StringExpression*\",\"metabase.mbql.schema/StringExpression*\",224546636,null),cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null,\"ns\",\"ns\",441598760),new cljs.core.Keyword(null,\"name\",\"name\",1843675177),new cljs.core.Keyword(null,\"file\",\"file\",-1269645878),new cljs.core.Keyword(null,\"end-column\",\"end-column\",1425389514),new cljs.core.Keyword(null,\"column\",\"column\",2078222095),new cljs.core.Keyword(null,\"line\",\"line\",212345235),new cljs.core.Keyword(null,\"declared\",\"declared\",92336021),new cljs.core.Keyword(null,\"end-line\",\"end-line\",1837326455),new cljs.core.Keyword(null,\"arglists\",\"arglists\",1661989754),new cljs.core.Keyword(null,\"doc\",\"doc\",1913296891),new cljs.core.Keyword(null,\"test\",\"test\",577538877)],[cljs.core.with_meta(new cljs.core.Symbol(null,\"metabase.mbql.schema\",\"metabase.mbql.schema\",-408168902,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"doc\",\"doc\",1913296891),\"Schema for validating a *normalized* MBQL query. This is also the definitive grammar for MBQL, wow!\"], null)),new cljs.core.Symbol(null,\"StringExpression*\",\"StringExpression*\",1110382599,null),\"metabase/mbql/schema.cljc\",27,1,748,true,748,cljs.core.List.EMPTY,null,(cljs.core.truth_(metabase.mbql.schema.StringExpression_STAR_)?metabase.mbql.schema.StringExpression_STAR_.cljs$lang$test:null)])));\n/**\n * Schema for a valid and clause.\n */\nmetabase.mbql.schema.and = metabase.mbql.schema.helpers.clause.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,\"and\",\"and\",-971899817),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([\"first-clause\",schema.core.recursive(new cljs.core.Var(function(){return metabase.mbql.schema.Filter;},new cljs.core.Symbol(\"metabase.mbql.schema\",\"Filter\",\"metabase.mbql.schema/Filter\",-1444327113,null),cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null,\"ns\",\"ns\",441598760),new cljs.core.Keyword(null,\"name\",\"name\",1843675177),new cljs.core.Keyword(null,\"file\",\"file\",-1269645878),new cljs.core.Keyword(null,\"end-column\",\"end-column\",1425389514),new cljs.core.Keyword(null,\"column\",\"column\",2078222095),new cljs.core.Keyword(null,\"line\",\"line\",212345235),new cljs.core.Keyword(null,\"declared\",\"declared\",92336021),new cljs.core.Keyword(null,\"end-line\",\"end-line\",1837326455),new cljs.core.Keyword(null,\"arglists\",\"arglists\",1661989754),new cljs.core.Keyword(null,\"doc\",\"doc\",1913296891),new cljs.core.Keyword(null,\"test\",\"test\",577538877)],[cljs.core.with_meta(new cljs.core.Symbol(null,\"metabase.mbql.schema\",\"metabase.mbql.schema\",-408168902,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"doc\",\"doc\",1913296891),\"Schema for validating a *normalized* MBQL query. This is also the definitive grammar for MBQL, wow!\"], null)),new cljs.core.Symbol(null,\"Filter\",\"Filter\",-424893332,null),\"metabase/mbql/schema.cljc\",16,1,756,true,756,cljs.core.List.EMPTY,null,(cljs.core.truth_(metabase.mbql.schema.Filter)?metabase.mbql.schema.Filter.cljs$lang$test:null)]))),\"second-clause\",schema.core.recursive(new cljs.core.Var(function(){return metabase.mbql.schema.Filter;},new cljs.core.Symbol(\"metabase.mbql.schema\",\"Filter\",\"metabase.mbql.schema/Filter\",-1444327113,null),cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null,\"ns\",\"ns\",441598760),new cljs.core.Keyword(null,\"name\",\"name\",1843675177),new cljs.core.Keyword(null,\"file\",\"file\",-1269645878),new cljs.core.Keyword(null,\"end-column\",\"end-column\",1425389514),new cljs.core.Keyword(null,\"column\",\"column\",2078222095),new cljs.core.Keyword(null,\"line\",\"line\",212345235),new cljs.core.Keyword(null,\"declared\",\"declared\",92336021),new cljs.core.Keyword(null,\"end-line\",\"end-line\",1837326455),new cljs.core.Keyword(null,\"arglists\",\"arglists\",1661989754),new cljs.core.Keyword(null,\"doc\",\"doc\",1913296891),new cljs.core.Keyword(null,\"test\",\"test\",577538877)],[cljs.core.with_meta(new cljs.core.Symbol(null,\"metabase.mbql.schema\",\"metabase.mbql.schema\",-408168902,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"doc\",\"doc\",1913296891),\"Schema for validating a *normalized* MBQL query. This is also the definitive grammar for MBQL, wow!\"], null)),new cljs.core.Symbol(null,\"Filter\",\"Filter\",-424893332,null),\"metabase/mbql/schema.cljc\",16,1,756,true,756,cljs.core.List.EMPTY,null,(cljs.core.truth_(metabase.mbql.schema.Filter)?metabase.mbql.schema.Filter.cljs$lang$test:null)]))),\"other-clauses\",new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"rest\",\"rest\",-1241696419),schema.core.recursive(new cljs.core.Var(function(){return metabase.mbql.schema.Filter;},new cljs.core.Symbol(\"metabase.mbql.schema\",\"Filter\",\"metabase.mbql.schema/Filter\",-1444327113,null),cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null,\"ns\",\"ns\",441598760),new cljs.core.Keyword(null,\"name\",\"name\",1843675177),new cljs.core.Keyword(null,\"file\",\"file\",-1269645878),new cljs.core.Keyword(null,\"end-column\",\"end-column\",1425389514),new cljs.core.Keyword(null,\"column\",\"column\",2078222095),new cljs.core.Keyword(null,\"line\",\"line\",212345235),new cljs.core.Keyword(null,\"declared\",\"declared\",92336021),new cljs.core.Keyword(null,\"end-line\",\"end-line\",1837326455),new cljs.core.Keyword(null,\"arglists\",\"arglists\",1661989754),new cljs.core.Keyword(null,\"doc\",\"doc\",1913296891),new cljs.core.Keyword(null,\"test\",\"test\",577538877)],[cljs.core.with_meta(new cljs.core.Symbol(null,\"metabase.mbql.schema\",\"metabase.mbql.schema\",-408168902,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"doc\",\"doc\",1913296891),\"Schema for validating a *normalized* MBQL query. This is also the definitive grammar for MBQL, wow!\"], null)),new cljs.core.Symbol(null,\"Filter\",\"Filter\",-424893332,null),\"metabase/mbql/schema.cljc\",16,1,756,true,756,cljs.core.List.EMPTY,null,(cljs.core.truth_(metabase.mbql.schema.Filter)?metabase.mbql.schema.Filter.cljs$lang$test:null)])))], null)], 0));\n/**\n * Schema for a valid or clause.\n */\nmetabase.mbql.schema.or = metabase.mbql.schema.helpers.clause.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,\"or\",\"or\",235744169),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([\"first-clause\",schema.core.recursive(new cljs.core.Var(function(){return metabase.mbql.schema.Filter;},new cljs.core.Symbol(\"metabase.mbql.schema\",\"Filter\",\"metabase.mbql.schema/Filter\",-1444327113,null),cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null,\"ns\",\"ns\",441598760),new cljs.core.Keyword(null,\"name\",\"name\",1843675177),new cljs.core.Keyword(null,\"file\",\"file\",-1269645878),new cljs.core.Keyword(null,\"end-column\",\"end-column\",1425389514),new cljs.core.Keyword(null,\"column\",\"column\",2078222095),new cljs.core.Keyword(null,\"line\",\"line\",212345235),new cljs.core.Keyword(null,\"declared\",\"declared\",92336021),new cljs.core.Keyword(null,\"end-line\",\"end-line\",1837326455),new cljs.core.Keyword(null,\"arglists\",\"arglists\",1661989754),new cljs.core.Keyword(null,\"doc\",\"doc\",1913296891),new cljs.core.Keyword(null,\"test\",\"test\",577538877)],[cljs.core.with_meta(new cljs.core.Symbol(null,\"metabase.mbql.schema\",\"metabase.mbql.schema\",-408168902,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"doc\",\"doc\",1913296891),\"Schema for validating a *normalized* MBQL query. This is also the definitive grammar for MBQL, wow!\"], null)),new cljs.core.Symbol(null,\"Filter\",\"Filter\",-424893332,null),\"metabase/mbql/schema.cljc\",16,1,756,true,756,cljs.core.List.EMPTY,null,(cljs.core.truth_(metabase.mbql.schema.Filter)?metabase.mbql.schema.Filter.cljs$lang$test:null)]))),\"second-clause\",schema.core.recursive(new cljs.core.Var(function(){return metabase.mbql.schema.Filter;},new cljs.core.Symbol(\"metabase.mbql.schema\",\"Filter\",\"metabase.mbql.schema/Filter\",-1444327113,null),cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null,\"ns\",\"ns\",441598760),new cljs.core.Keyword(null,\"name\",\"name\",1843675177),new cljs.core.Keyword(null,\"file\",\"file\",-1269645878),new cljs.core.Keyword(null,\"end-column\",\"end-column\",1425389514),new cljs.core.Keyword(null,\"column\",\"column\",2078222095),new cljs.core.Keyword(null,\"line\",\"line\",212345235),new cljs.core.Keyword(null,\"declared\",\"declared\",92336021),new cljs.core.Keyword(null,\"end-line\",\"end-line\",1837326455),new cljs.core.Keyword(null,\"arglists\",\"arglists\",1661989754),new cljs.core.Keyword(null,\"doc\",\"doc\",1913296891),new cljs.core.Keyword(null,\"test\",\"test\",577538877)],[cljs.core.with_meta(new cljs.core.Symbol(null,\"metabase.mbql.schema\",\"metabase.mbql.schema\",-408168902,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"doc\",\"doc\",1913296891),\"Schema for validating a *normalized* MBQL query. This is also the definitive grammar for MBQL, wow!\"], null)),new cljs.core.Symbol(null,\"Filter\",\"Filter\",-424893332,null),\"metabase/mbql/schema.cljc\",16,1,756,true,756,cljs.core.List.EMPTY,null,(cljs.core.truth_(metabase.mbql.schema.Filter)?metabase.mbql.schema.Filter.cljs$lang$test:null)]))),\"other-clauses\",new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"rest\",\"rest\",-1241696419),schema.core.recursive(new cljs.core.Var(function(){return metabase.mbql.schema.Filter;},new cljs.core.Symbol(\"metabase.mbql.schema\",\"Filter\",\"metabase.mbql.schema/Filter\",-1444327113,null),cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null,\"ns\",\"ns\",441598760),new cljs.core.Keyword(null,\"name\",\"name\",1843675177),new cljs.core.Keyword(null,\"file\",\"file\",-1269645878),new cljs.core.Keyword(null,\"end-column\",\"end-column\",1425389514),new cljs.core.Keyword(null,\"column\",\"column\",2078222095),new cljs.core.Keyword(null,\"line\",\"line\",212345235),new cljs.core.Keyword(null,\"declared\",\"declared\",92336021),new cljs.core.Keyword(null,\"end-line\",\"end-line\",1837326455),new cljs.core.Keyword(null,\"arglists\",\"arglists\",1661989754),new cljs.core.Keyword(null,\"doc\",\"doc\",1913296891),new cljs.core.Keyword(null,\"test\",\"test\",577538877)],[cljs.core.with_meta(new cljs.core.Symbol(null,\"metabase.mbql.schema\",\"metabase.mbql.schema\",-408168902,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"doc\",\"doc\",1913296891),\"Schema for validating a *normalized* MBQL query. This is also the definitive grammar for MBQL, wow!\"], null)),new cljs.core.Symbol(null,\"Filter\",\"Filter\",-424893332,null),\"metabase/mbql/schema.cljc\",16,1,756,true,756,cljs.core.List.EMPTY,null,(cljs.core.truth_(metabase.mbql.schema.Filter)?metabase.mbql.schema.Filter.cljs$lang$test:null)])))], null)], 0));\n/**\n * Schema for a valid not clause.\n */\nmetabase.mbql.schema.not = metabase.mbql.schema.helpers.clause.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,\"not\",\"not\",-595976884),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([\"clause\",schema.core.recursive(new cljs.core.Var(function(){return metabase.mbql.schema.Filter;},new cljs.core.Symbol(\"metabase.mbql.schema\",\"Filter\",\"metabase.mbql.schema/Filter\",-1444327113,null),cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null,\"ns\",\"ns\",441598760),new cljs.core.Keyword(null,\"name\",\"name\",1843675177),new cljs.core.Keyword(null,\"file\",\"file\",-1269645878),new cljs.core.Keyword(null,\"end-column\",\"end-column\",1425389514),new cljs.core.Keyword(null,\"column\",\"column\",2078222095),new cljs.core.Keyword(null,\"line\",\"line\",212345235),new cljs.core.Keyword(null,\"declared\",\"declared\",92336021),new cljs.core.Keyword(null,\"end-line\",\"end-line\",1837326455),new cljs.core.Keyword(null,\"arglists\",\"arglists\",1661989754),new cljs.core.Keyword(null,\"doc\",\"doc\",1913296891),new cljs.core.Keyword(null,\"test\",\"test\",577538877)],[cljs.core.with_meta(new cljs.core.Symbol(null,\"metabase.mbql.schema\",\"metabase.mbql.schema\",-408168902,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"doc\",\"doc\",1913296891),\"Schema for validating a *normalized* MBQL query. This is also the definitive grammar for MBQL, wow!\"], null)),new cljs.core.Symbol(null,\"Filter\",\"Filter\",-424893332,null),\"metabase/mbql/schema.cljc\",16,1,756,true,756,cljs.core.List.EMPTY,null,(cljs.core.truth_(metabase.mbql.schema.Filter)?metabase.mbql.schema.Filter.cljs$lang$test:null)])))], 0));\nmetabase.mbql.schema.FieldOrRelativeDatetime = schema.core.if$(cljs.core.partial.cljs$core$IFn$_invoke$arity$2(metabase.mbql.schema.helpers.is_clause_QMARK_,new cljs.core.Keyword(null,\"relative-datetime\",\"relative-datetime\",1285169278)),metabase.mbql.schema.relative_datetime,metabase.mbql.schema.Field);\n/**\n * Schema for things that make sense in a `=` or `!=` filter, i.e. things that can be compared for equality.\n */\nmetabase.mbql.schema.EqualityComparable = schema.core.maybe(schema.core.cond_pre.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([schema.core.Bool,schema.core.Num,schema.core.Str,metabase.mbql.schema.TemporalLiteral,metabase.mbql.schema.FieldOrRelativeDatetime,metabase.mbql.schema.ExpressionArg,metabase.mbql.schema.value], 0)));\n/**\n * Schema for things that make sense in a filter like `>` or `<`, i.e. things that can be sorted.\n */\nmetabase.mbql.schema.OrderComparable = schema.core.if$(cljs.core.partial.cljs$core$IFn$_invoke$arity$2(metabase.mbql.schema.helpers.is_clause_QMARK_,new cljs.core.Keyword(null,\"value\",\"value\",305978217)),metabase.mbql.schema.value,schema.core.cond_pre.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([schema.core.Num,schema.core.Str,metabase.mbql.schema.TemporalLiteral,metabase.mbql.schema.ExpressionArg,metabase.mbql.schema.FieldOrRelativeDatetime], 0)));\n/**\n * Schema for a valid = clause.\n */\nmetabase.mbql.schema._EQ_ = metabase.mbql.schema.helpers.clause.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,\"=\",\"=\",1152933628),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([\"field\",metabase.mbql.schema.EqualityComparable,\"value-or-field\",metabase.mbql.schema.EqualityComparable,\"more-values-or-fields\",new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"rest\",\"rest\",-1241696419),metabase.mbql.schema.EqualityComparable], null)], 0));\n/**\n * Schema for a valid != clause.\n */\nmetabase.mbql.schema._BANG__EQ_ = metabase.mbql.schema.helpers.clause.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,\"!=\",\"!=\",-1841737356),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([\"field\",metabase.mbql.schema.EqualityComparable,\"value-or-field\",metabase.mbql.schema.EqualityComparable,\"more-values-or-fields\",new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"rest\",\"rest\",-1241696419),metabase.mbql.schema.EqualityComparable], null)], 0));\n/**\n * Schema for a valid < clause.\n */\nmetabase.mbql.schema._LT_ = metabase.mbql.schema.helpers.clause.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,\"<\",\"<\",-646864291),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([\"field\",metabase.mbql.schema.OrderComparable,\"value-or-field\",metabase.mbql.schema.OrderComparable], 0));\n/**\n * Schema for a valid > clause.\n */\nmetabase.mbql.schema._GT_ = metabase.mbql.schema.helpers.clause.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,\">\",\">\",-555517146),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([\"field\",metabase.mbql.schema.OrderComparable,\"value-or-field\",metabase.mbql.schema.OrderComparable], 0));\n/**\n * Schema for a valid <= clause.\n */\nmetabase.mbql.schema._LT__EQ_ = metabase.mbql.schema.helpers.clause.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,\"<=\",\"<=\",-395636158),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([\"field\",metabase.mbql.schema.OrderComparable,\"value-or-field\",metabase.mbql.schema.OrderComparable], 0));\n/**\n * Schema for a valid >= clause.\n */\nmetabase.mbql.schema._GT__EQ_ = metabase.mbql.schema.helpers.clause.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,\">=\",\">=\",-623615505),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([\"field\",metabase.mbql.schema.OrderComparable,\"value-or-field\",metabase.mbql.schema.OrderComparable], 0));\n/**\n * Schema for a valid between clause.\n */\nmetabase.mbql.schema.between = metabase.mbql.schema.helpers.clause.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,\"between\",\"between\",1131099276),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([\"field\",metabase.mbql.schema.OrderComparable,\"min\",metabase.mbql.schema.OrderComparable,\"max\",metabase.mbql.schema.OrderComparable], 0));\n/**\n * Schema for a valid inside clause.\n */\nmetabase.mbql.schema.inside = metabase.mbql.schema.helpers.clause.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,\"inside\",\"inside\",1972503011),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([\"lat-field\",metabase.mbql.schema.OrderComparable,\"lon-field\",metabase.mbql.schema.OrderComparable,\"lat-max\",metabase.mbql.schema.OrderComparable,\"lon-min\",metabase.mbql.schema.OrderComparable,\"lat-min\",metabase.mbql.schema.OrderComparable,\"lon-max\",metabase.mbql.schema.OrderComparable], 0));\n/**\n * Schema for a valid is-null clause.\n */\nmetabase.mbql.schema.is_null = metabase.mbql.schema.helpers.clause.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,\"is-null\",\"is-null\",-1997050930),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([\"field\",metabase.mbql.schema.Field], 0));\n/**\n * Schema for a valid not-null clause.\n */\nmetabase.mbql.schema.not_null = metabase.mbql.schema.helpers.clause.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,\"not-null\",\"not-null\",-1326718535),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([\"field\",metabase.mbql.schema.Field], 0));\n/**\n * Schema for a valid is-empty clause.\n */\nmetabase.mbql.schema.is_empty = metabase.mbql.schema.helpers.clause.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,\"is-empty\",\"is-empty\",-1040302908),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([\"field\",metabase.mbql.schema.Field], 0));\n/**\n * Schema for a valid not-empty clause.\n */\nmetabase.mbql.schema.not_empty = metabase.mbql.schema.helpers.clause.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,\"not-empty\",\"not-empty\",388922063),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([\"field\",metabase.mbql.schema.Field], 0));\nmetabase.mbql.schema.StringFilterOptions = cljs.core.PersistentArrayMap.createAsIfByAssoc([schema.core.optional_key(new cljs.core.Keyword(null,\"case-sensitive\",\"case-sensitive\",-1005239404)),schema.core.Bool]);\n/**\n * Schema for a valid starts-with clause.\n */\nmetabase.mbql.schema.starts_with = metabase.mbql.schema.helpers.clause.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,\"starts-with\",\"starts-with\",366503009),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([\"field\",metabase.mbql.schema.StringExpressionArg,\"string-or-field\",metabase.mbql.schema.StringExpressionArg,\"options\",new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"optional\",\"optional\",2053951509),metabase.mbql.schema.StringFilterOptions], null)], 0));\n/**\n * Schema for a valid ends-with clause.\n */\nmetabase.mbql.schema.ends_with = metabase.mbql.schema.helpers.clause.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,\"ends-with\",\"ends-with\",-456791011),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([\"field\",metabase.mbql.schema.StringExpressionArg,\"string-or-field\",metabase.mbql.schema.StringExpressionArg,\"options\",new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"optional\",\"optional\",2053951509),metabase.mbql.schema.StringFilterOptions], null)], 0));\n/**\n * Schema for a valid contains clause.\n */\nmetabase.mbql.schema.contains = metabase.mbql.schema.helpers.clause.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,\"contains\",\"contains\",676899812),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([\"field\",metabase.mbql.schema.StringExpressionArg,\"string-or-field\",metabase.mbql.schema.StringExpressionArg,\"options\",new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"optional\",\"optional\",2053951509),metabase.mbql.schema.StringFilterOptions], null)], 0));\n/**\n * Schema for a valid does-not-contain clause.\n */\nmetabase.mbql.schema.does_not_contain = metabase.mbql.schema.helpers.clause.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,\"does-not-contain\",\"does-not-contain\",-274946853),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([\"field\",metabase.mbql.schema.StringExpressionArg,\"string-or-field\",metabase.mbql.schema.StringExpressionArg,\"options\",new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"optional\",\"optional\",2053951509),metabase.mbql.schema.StringFilterOptions], null)], 0));\nmetabase.mbql.schema.TimeIntervalOptions = cljs.core.PersistentArrayMap.createAsIfByAssoc([schema.core.optional_key(new cljs.core.Keyword(null,\"include-current\",\"include-current\",-1602371981)),schema.core.Bool]);\n/**\n * Schema for a valid time-interval clause.\n */\nmetabase.mbql.schema.time_interval = metabase.mbql.schema.helpers.clause.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,\"time-interval\",\"time-interval\",704622015),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([\"field\",metabase.mbql.schema.Field,\"n\",schema.core.cond_pre.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([schema.core.Int,schema.core.enum$.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"current\",\"current\",-1088038603),new cljs.core.Keyword(null,\"last\",\"last\",1105735132),new cljs.core.Keyword(null,\"next\",\"next\",-117701485)], 0))], 0)),\"unit\",metabase.mbql.schema.RelativeDatetimeUnit,\"options\",new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"optional\",\"optional\",2053951509),metabase.mbql.schema.TimeIntervalOptions], null)], 0));\n/**\n * Schema for a valid segment clause.\n */\nmetabase.mbql.schema.segment = metabase.mbql.schema.helpers.clause.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,\"segment\",\"segment\",-964921196),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([\"segment-id\",schema.core.cond_pre.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([metabase.mbql.schema.helpers.IntGreaterThanZero,metabase.mbql.schema.helpers.NonBlankString], 0))], 0));\n/**\n * Schema for the definition of an arithmetic expression.\n */\nmetabase.mbql.schema.BooleanExpression = schema.core.recursive(new cljs.core.Var(function(){return metabase.mbql.schema.BooleanExpression_STAR_;},new cljs.core.Symbol(\"metabase.mbql.schema\",\"BooleanExpression*\",\"metabase.mbql.schema/BooleanExpression*\",-630544184,null),cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null,\"ns\",\"ns\",441598760),new cljs.core.Keyword(null,\"name\",\"name\",1843675177),new cljs.core.Keyword(null,\"file\",\"file\",-1269645878),new cljs.core.Keyword(null,\"end-column\",\"end-column\",1425389514),new cljs.core.Keyword(null,\"column\",\"column\",2078222095),new cljs.core.Keyword(null,\"line\",\"line\",212345235),new cljs.core.Keyword(null,\"declared\",\"declared\",92336021),new cljs.core.Keyword(null,\"end-line\",\"end-line\",1837326455),new cljs.core.Keyword(null,\"arglists\",\"arglists\",1661989754),new cljs.core.Keyword(null,\"doc\",\"doc\",1913296891),new cljs.core.Keyword(null,\"test\",\"test\",577538877)],[cljs.core.with_meta(new cljs.core.Symbol(null,\"metabase.mbql.schema\",\"metabase.mbql.schema\",-408168902,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"doc\",\"doc\",1913296891),\"Schema for validating a *normalized* MBQL query. This is also the definitive grammar for MBQL, wow!\"], null)),new cljs.core.Symbol(null,\"BooleanExpression*\",\"BooleanExpression*\",623370113,null),\"metabase/mbql/schema.cljc\",28,1,883,true,883,cljs.core.List.EMPTY,null,(cljs.core.truth_(metabase.mbql.schema.BooleanExpression_STAR_)?metabase.mbql.schema.BooleanExpression_STAR_.cljs$lang$test:null)])));\nmetabase.mbql.schema.BooleanExpression_STAR_ = metabase.mbql.schema.helpers.one_of_STAR_.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var or__5045__auto__ = new cljs.core.Keyword(null,\"clause-name\",\"clause-name\",-996419059).cljs$core$IFn$_invoke$arity$1(cljs.core.meta((((typeof metabase !== 'undefined') && (typeof metabase.mbql !== 'undefined') && (typeof metabase.mbql.schema !== 'undefined') && (typeof metabase.mbql.schema.and !== 'undefined'))?(new cljs.core.Var((function (){\nreturn metabase.mbql.schema.and;\n}),cljs.core.with_meta(new cljs.core.Symbol(\"metabase.mbql.schema\",\"and\",\"metabase.mbql.schema/and\",1553856071,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(\"cljs.analyzer\",\"no-resolve\",\"cljs.analyzer/no-resolve\",-1872351017),true], null)),cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null,\"ns\",\"ns\",441598760),new cljs.core.Keyword(null,\"name\",\"name\",1843675177),new cljs.core.Keyword(null,\"file\",\"file\",-1269645878),new cljs.core.Keyword(null,\"end-column\",\"end-column\",1425389514),new cljs.core.Keyword(null,\"clause-name\",\"clause-name\",-996419059),new cljs.core.Keyword(null,\"column\",\"column\",2078222095),new cljs.core.Keyword(null,\"line\",\"line\",212345235),new cljs.core.Keyword(null,\"end-line\",\"end-line\",1837326455),new cljs.core.Keyword(null,\"clause-form\",\"clause-form\",1820463737),new cljs.core.Keyword(null,\"arglists\",\"arglists\",1661989754),new cljs.core.Keyword(null,\"doc\",\"doc\",1913296891),new cljs.core.Keyword(null,\"test\",\"test\",577538877)],[cljs.core.with_meta(new cljs.core.Symbol(null,\"metabase.mbql.schema\",\"metabase.mbql.schema\",-408168902,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"doc\",\"doc\",1913296891),\"Schema for validating a *normalized* MBQL query. This is also the definitive grammar for MBQL, wow!\"], null)),new cljs.core.Symbol(null,\"and\",\"and\",668631710,null),\"metabase/mbql/schema.cljc\",15,new cljs.core.Keyword(null,\"and\",\"and\",-971899817),1,758,758,new cljs.core.PersistentVector(null, 7, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"and\",\"and\",-971899817),new cljs.core.Keyword(null,\"first-clause\",\"first-clause\",-20953491),cljs.core.list(new cljs.core.Symbol(null,\"quote\",\"quote\",1377916282,null),cljs.core.list(new cljs.core.Symbol(\"s\",\"recursive\",\"s/recursive\",-1935549792,null),cljs.core.list(new cljs.core.Symbol(null,\"var\",\"var\",870848730,null),new cljs.core.Symbol(null,\"Filter\",\"Filter\",-424893332,null)))),new cljs.core.Keyword(null,\"second-clause\",\"second-clause\",-461435645),cljs.core.list(new cljs.core.Symbol(null,\"quote\",\"quote\",1377916282,null),cljs.core.list(new cljs.core.Symbol(\"s\",\"recursive\",\"s/recursive\",-1935549792,null),cljs.core.list(new cljs.core.Symbol(null,\"var\",\"var\",870848730,null),new cljs.core.Symbol(null,\"Filter\",\"Filter\",-424893332,null)))),new cljs.core.Keyword(null,\"other-clauses\",\"other-clauses\",1570511021),cljs.core.list(new cljs.core.Symbol(null,\"quote\",\"quote\",1377916282,null),cljs.core.list(new cljs.core.Symbol(null,\"rest\",\"rest\",398835108,null),cljs.core.list(new cljs.core.Symbol(\"s\",\"recursive\",\"s/recursive\",-1935549792,null),cljs.core.list(new cljs.core.Symbol(null,\"var\",\"var\",870848730,null),new cljs.core.Symbol(null,\"Filter\",\"Filter\",-424893332,null)))))], null),cljs.core.List.EMPTY,\"Schema for a valid and clause.\",(cljs.core.truth_(metabase.mbql.schema.and)?metabase.mbql.schema.and.cljs$lang$test:null)]))):null)));\nif(cljs.core.truth_(or__5045__auto__)){\nreturn or__5045__auto__;\n} else {\nreturn new cljs.core.Symbol(null,\"and\",\"and\",668631710,null);\n}\n})(),metabase.mbql.schema.and], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var or__5045__auto__ = new cljs.core.Keyword(null,\"clause-name\",\"clause-name\",-996419059).cljs$core$IFn$_invoke$arity$1(cljs.core.meta((((typeof metabase !== 'undefined') && (typeof metabase.mbql !== 'undefined') && (typeof metabase.mbql.schema !== 'undefined') && (typeof metabase.mbql.schema.or !== 'undefined'))?(new cljs.core.Var((function (){\nreturn metabase.mbql.schema.or;\n}),cljs.core.with_meta(new cljs.core.Symbol(\"metabase.mbql.schema\",\"or\",\"metabase.mbql.schema/or\",-1500355255,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(\"cljs.analyzer\",\"no-resolve\",\"cljs.analyzer/no-resolve\",-1872351017),true], null)),cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null,\"ns\",\"ns\",441598760),new cljs.core.Keyword(null,\"name\",\"name\",1843675177),new cljs.core.Keyword(null,\"file\",\"file\",-1269645878),new cljs.core.Keyword(null,\"end-column\",\"end-column\",1425389514),new cljs.core.Keyword(null,\"clause-name\",\"clause-name\",-996419059),new cljs.core.Keyword(null,\"column\",\"column\",2078222095),new cljs.core.Keyword(null,\"line\",\"line\",212345235),new cljs.core.Keyword(null,\"end-line\",\"end-line\",1837326455),new cljs.core.Keyword(null,\"clause-form\",\"clause-form\",1820463737),new cljs.core.Keyword(null,\"arglists\",\"arglists\",1661989754),new cljs.core.Keyword(null,\"doc\",\"doc\",1913296891),new cljs.core.Keyword(null,\"test\",\"test\",577538877)],[cljs.core.with_meta(new cljs.core.Symbol(null,\"metabase.mbql.schema\",\"metabase.mbql.schema\",-408168902,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"doc\",\"doc\",1913296891),\"Schema for validating a *normalized* MBQL query. This is also the definitive grammar for MBQL, wow!\"], null)),new cljs.core.Symbol(null,\"or\",\"or\",1876275696,null),\"metabase/mbql/schema.cljc\",14,new cljs.core.Keyword(null,\"or\",\"or\",235744169),1,763,763,new cljs.core.PersistentVector(null, 7, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"or\",\"or\",235744169),new cljs.core.Keyword(null,\"first-clause\",\"first-clause\",-20953491),cljs.core.list(new cljs.core.Symbol(null,\"quote\",\"quote\",1377916282,null),cljs.core.list(new cljs.core.Symbol(\"s\",\"recursive\",\"s/recursive\",-1935549792,null),cljs.core.list(new cljs.core.Symbol(null,\"var\",\"var\",870848730,null),new cljs.core.Symbol(null,\"Filter\",\"Filter\",-424893332,null)))),new cljs.core.Keyword(null,\"second-clause\",\"second-clause\",-461435645),cljs.core.list(new cljs.core.Symbol(null,\"quote\",\"quote\",1377916282,null),cljs.core.list(new cljs.core.Symbol(\"s\",\"recursive\",\"s/recursive\",-1935549792,null),cljs.core.list(new cljs.core.Symbol(null,\"var\",\"var\",870848730,null),new cljs.core.Symbol(null,\"Filter\",\"Filter\",-424893332,null)))),new cljs.core.Keyword(null,\"other-clauses\",\"other-clauses\",1570511021),cljs.core.list(new cljs.core.Symbol(null,\"quote\",\"quote\",1377916282,null),cljs.core.list(new cljs.core.Symbol(null,\"rest\",\"rest\",398835108,null),cljs.core.list(new cljs.core.Symbol(\"s\",\"recursive\",\"s/recursive\",-1935549792,null),cljs.core.list(new cljs.core.Symbol(null,\"var\",\"var\",870848730,null),new cljs.core.Symbol(null,\"Filter\",\"Filter\",-424893332,null)))))], null),cljs.core.List.EMPTY,\"Schema for a valid or clause.\",(cljs.core.truth_(metabase.mbql.schema.or)?metabase.mbql.schema.or.cljs$lang$test:null)]))):null)));\nif(cljs.core.truth_(or__5045__auto__)){\nreturn or__5045__auto__;\n} else {\nreturn new cljs.core.Symbol(null,\"or\",\"or\",1876275696,null);\n}\n})(),metabase.mbql.schema.or], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var or__5045__auto__ = new cljs.core.Keyword(null,\"clause-name\",\"clause-name\",-996419059).cljs$core$IFn$_invoke$arity$1(cljs.core.meta((((typeof metabase !== 'undefined') && (typeof metabase.mbql !== 'undefined') && (typeof metabase.mbql.schema !== 'undefined') && (typeof metabase.mbql.schema.not !== 'undefined'))?(new cljs.core.Var((function (){\nreturn metabase.mbql.schema.not;\n}),cljs.core.with_meta(new cljs.core.Symbol(\"metabase.mbql.schema\",\"not\",\"metabase.mbql.schema/not\",-113379604,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(\"cljs.analyzer\",\"no-resolve\",\"cljs.analyzer/no-resolve\",-1872351017),true], null)),cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null,\"ns\",\"ns\",441598760),new cljs.core.Keyword(null,\"name\",\"name\",1843675177),new cljs.core.Keyword(null,\"file\",\"file\",-1269645878),new cljs.core.Keyword(null,\"end-column\",\"end-column\",1425389514),new cljs.core.Keyword(null,\"clause-name\",\"clause-name\",-996419059),new cljs.core.Keyword(null,\"column\",\"column\",2078222095),new cljs.core.Keyword(null,\"line\",\"line\",212345235),new cljs.core.Keyword(null,\"end-line\",\"end-line\",1837326455),new cljs.core.Keyword(null,\"clause-form\",\"clause-form\",1820463737),new cljs.core.Keyword(null,\"arglists\",\"arglists\",1661989754),new cljs.core.Keyword(null,\"doc\",\"doc\",1913296891),new cljs.core.Keyword(null,\"test\",\"test\",577538877)],[cljs.core.with_meta(new cljs.core.Symbol(null,\"metabase.mbql.schema\",\"metabase.mbql.schema\",-408168902,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"doc\",\"doc\",1913296891),\"Schema for validating a *normalized* MBQL query. This is also the definitive grammar for MBQL, wow!\"], null)),new cljs.core.Symbol(null,\"not\",\"not\",1044554643,null),\"metabase/mbql/schema.cljc\",15,new cljs.core.Keyword(null,\"not\",\"not\",-595976884),1,768,768,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"not\",\"not\",-595976884),new cljs.core.Keyword(null,\"clause\",\"clause\",1479668060),cljs.core.list(new cljs.core.Symbol(null,\"quote\",\"quote\",1377916282,null),cljs.core.list(new cljs.core.Symbol(\"s\",\"recursive\",\"s/recursive\",-1935549792,null),cljs.core.list(new cljs.core.Symbol(null,\"var\",\"var\",870848730,null),new cljs.core.Symbol(null,\"Filter\",\"Filter\",-424893332,null))))], null),cljs.core.List.EMPTY,\"Schema for a valid not clause.\",(cljs.core.truth_(metabase.mbql.schema.not)?metabase.mbql.schema.not.cljs$lang$test:null)]))):null)));\nif(cljs.core.truth_(or__5045__auto__)){\nreturn or__5045__auto__;\n} else {\nreturn new cljs.core.Symbol(null,\"not\",\"not\",1044554643,null);\n}\n})(),metabase.mbql.schema.not], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var or__5045__auto__ = new cljs.core.Keyword(null,\"clause-name\",\"clause-name\",-996419059).cljs$core$IFn$_invoke$arity$1(cljs.core.meta((((typeof metabase !== 'undefined') && (typeof metabase.mbql !== 'undefined') && (typeof metabase.mbql.schema !== 'undefined') && (typeof metabase.mbql.schema._LT_ !== 'undefined'))?(new cljs.core.Var((function (){\nreturn metabase.mbql.schema._LT_;\n}),cljs.core.with_meta(new cljs.core.Symbol(\"metabase.mbql.schema\",\"<\",\"metabase.mbql.schema/<\",-1057391587,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(\"cljs.analyzer\",\"no-resolve\",\"cljs.analyzer/no-resolve\",-1872351017),true], null)),cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null,\"ns\",\"ns\",441598760),new cljs.core.Keyword(null,\"name\",\"name\",1843675177),new cljs.core.Keyword(null,\"file\",\"file\",-1269645878),new cljs.core.Keyword(null,\"end-column\",\"end-column\",1425389514),new cljs.core.Keyword(null,\"clause-name\",\"clause-name\",-996419059),new cljs.core.Keyword(null,\"column\",\"column\",2078222095),new cljs.core.Keyword(null,\"line\",\"line\",212345235),new cljs.core.Keyword(null,\"end-line\",\"end-line\",1837326455),new cljs.core.Keyword(null,\"clause-form\",\"clause-form\",1820463737),new cljs.core.Keyword(null,\"arglists\",\"arglists\",1661989754),new cljs.core.Keyword(null,\"doc\",\"doc\",1913296891),new cljs.core.Keyword(null,\"test\",\"test\",577538877)],[cljs.core.with_meta(new cljs.core.Symbol(null,\"metabase.mbql.schema\",\"metabase.mbql.schema\",-408168902,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"doc\",\"doc\",1913296891),\"Schema for validating a *normalized* MBQL query. This is also the definitive grammar for MBQL, wow!\"], null)),new cljs.core.Symbol(null,\"<\",\"<\",993667236,null),\"metabase/mbql/schema.cljc\",13,new cljs.core.Keyword(null,\"<\",\"<\",-646864291),1,814,814,new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"<\",\"<\",-646864291),new cljs.core.Keyword(null,\"field\",\"field\",-1302436500),cljs.core.list(new cljs.core.Symbol(null,\"quote\",\"quote\",1377916282,null),new cljs.core.Symbol(null,\"OrderComparable\",\"OrderComparable\",772072595,null)),new cljs.core.Keyword(null,\"value-or-field\",\"value-or-field\",-1387286309),cljs.core.list(new cljs.core.Symbol(null,\"quote\",\"quote\",1377916282,null),new cljs.core.Symbol(null,\"OrderComparable\",\"OrderComparable\",772072595,null))], null),cljs.core.List.EMPTY,\"Schema for a valid < clause.\",(cljs.core.truth_(metabase.mbql.schema._LT_)?metabase.mbql.schema._LT_.cljs$lang$test:null)]))):null)));\nif(cljs.core.truth_(or__5045__auto__)){\nreturn or__5045__auto__;\n} else {\nreturn new cljs.core.Symbol(null,\"<\",\"<\",993667236,null);\n}\n})(),metabase.mbql.schema._LT_], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var or__5045__auto__ = new cljs.core.Keyword(null,\"clause-name\",\"clause-name\",-996419059).cljs$core$IFn$_invoke$arity$1(cljs.core.meta((((typeof metabase !== 'undefined') && (typeof metabase.mbql !== 'undefined') && (typeof metabase.mbql.schema !== 'undefined') && (typeof metabase.mbql.schema._LT__EQ_ !== 'undefined'))?(new cljs.core.Var((function (){\nreturn metabase.mbql.schema._LT__EQ_;\n}),cljs.core.with_meta(new cljs.core.Symbol(\"metabase.mbql.schema\",\"<=\",\"metabase.mbql.schema/<=\",-2098137664,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(\"cljs.analyzer\",\"no-resolve\",\"cljs.analyzer/no-resolve\",-1872351017),true], null)),cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null,\"ns\",\"ns\",441598760),new cljs.core.Keyword(null,\"name\",\"name\",1843675177),new cljs.core.Keyword(null,\"file\",\"file\",-1269645878),new cljs.core.Keyword(null,\"end-column\",\"end-column\",1425389514),new cljs.core.Keyword(null,\"clause-name\",\"clause-name\",-996419059),new cljs.core.Keyword(null,\"column\",\"column\",2078222095),new cljs.core.Keyword(null,\"line\",\"line\",212345235),new cljs.core.Keyword(null,\"end-line\",\"end-line\",1837326455),new cljs.core.Keyword(null,\"clause-form\",\"clause-form\",1820463737),new cljs.core.Keyword(null,\"arglists\",\"arglists\",1661989754),new cljs.core.Keyword(null,\"doc\",\"doc\",1913296891),new cljs.core.Keyword(null,\"test\",\"test\",577538877)],[cljs.core.with_meta(new cljs.core.Symbol(null,\"metabase.mbql.schema\",\"metabase.mbql.schema\",-408168902,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"doc\",\"doc\",1913296891),\"Schema for validating a *normalized* MBQL query. This is also the definitive grammar for MBQL, wow!\"], null)),new cljs.core.Symbol(null,\"<=\",\"<=\",1244895369,null),\"metabase/mbql/schema.cljc\",14,new cljs.core.Keyword(null,\"<=\",\"<=\",-395636158),1,816,816,new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"<=\",\"<=\",-395636158),new cljs.core.Keyword(null,\"field\",\"field\",-1302436500),cljs.core.list(new cljs.core.Symbol(null,\"quote\",\"quote\",1377916282,null),new cljs.core.Symbol(null,\"OrderComparable\",\"OrderComparable\",772072595,null)),new cljs.core.Keyword(null,\"value-or-field\",\"value-or-field\",-1387286309),cljs.core.list(new cljs.core.Symbol(null,\"quote\",\"quote\",1377916282,null),new cljs.core.Symbol(null,\"OrderComparable\",\"OrderComparable\",772072595,null))], null),cljs.core.List.EMPTY,\"Schema for a valid <= clause.\",(cljs.core.truth_(metabase.mbql.schema._LT__EQ_)?metabase.mbql.schema._LT__EQ_.cljs$lang$test:null)]))):null)));\nif(cljs.core.truth_(or__5045__auto__)){\nreturn or__5045__auto__;\n} else {\nreturn new cljs.core.Symbol(null,\"<=\",\"<=\",1244895369,null);\n}\n})(),metabase.mbql.schema._LT__EQ_], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var or__5045__auto__ = new cljs.core.Keyword(null,\"clause-name\",\"clause-name\",-996419059).cljs$core$IFn$_invoke$arity$1(cljs.core.meta((((typeof metabase !== 'undefined') && (typeof metabase.mbql !== 'undefined') && (typeof metabase.mbql.schema !== 'undefined') && (typeof metabase.mbql.schema._GT_ !== 'undefined'))?(new cljs.core.Var((function (){\nreturn metabase.mbql.schema._GT_;\n}),cljs.core.with_meta(new cljs.core.Symbol(\"metabase.mbql.schema\",\">\",\"metabase.mbql.schema/>\",-1619862474,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(\"cljs.analyzer\",\"no-resolve\",\"cljs.analyzer/no-resolve\",-1872351017),true], null)),cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null,\"ns\",\"ns\",441598760),new cljs.core.Keyword(null,\"name\",\"name\",1843675177),new cljs.core.Keyword(null,\"file\",\"file\",-1269645878),new cljs.core.Keyword(null,\"end-column\",\"end-column\",1425389514),new cljs.core.Keyword(null,\"clause-name\",\"clause-name\",-996419059),new cljs.core.Keyword(null,\"column\",\"column\",2078222095),new cljs.core.Keyword(null,\"line\",\"line\",212345235),new cljs.core.Keyword(null,\"end-line\",\"end-line\",1837326455),new cljs.core.Keyword(null,\"clause-form\",\"clause-form\",1820463737),new cljs.core.Keyword(null,\"arglists\",\"arglists\",1661989754),new cljs.core.Keyword(null,\"doc\",\"doc\",1913296891),new cljs.core.Keyword(null,\"test\",\"test\",577538877)],[cljs.core.with_meta(new cljs.core.Symbol(null,\"metabase.mbql.schema\",\"metabase.mbql.schema\",-408168902,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"doc\",\"doc\",1913296891),\"Schema for validating a *normalized* MBQL query. This is also the definitive grammar for MBQL, wow!\"], null)),new cljs.core.Symbol(null,\">\",\">\",1085014381,null),\"metabase/mbql/schema.cljc\",13,new cljs.core.Keyword(null,\">\",\">\",-555517146),1,815,815,new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\">\",\">\",-555517146),new cljs.core.Keyword(null,\"field\",\"field\",-1302436500),cljs.core.list(new cljs.core.Symbol(null,\"quote\",\"quote\",1377916282,null),new cljs.core.Symbol(null,\"OrderComparable\",\"OrderComparable\",772072595,null)),new cljs.core.Keyword(null,\"value-or-field\",\"value-or-field\",-1387286309),cljs.core.list(new cljs.core.Symbol(null,\"quote\",\"quote\",1377916282,null),new cljs.core.Symbol(null,\"OrderComparable\",\"OrderComparable\",772072595,null))], null),cljs.core.List.EMPTY,\"Schema for a valid > clause.\",(cljs.core.truth_(metabase.mbql.schema._GT_)?metabase.mbql.schema._GT_.cljs$lang$test:null)]))):null)));\nif(cljs.core.truth_(or__5045__auto__)){\nreturn or__5045__auto__;\n} else {\nreturn new cljs.core.Symbol(null,\">\",\">\",1085014381,null);\n}\n})(),metabase.mbql.schema._GT_], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var or__5045__auto__ = new cljs.core.Keyword(null,\"clause-name\",\"clause-name\",-996419059).cljs$core$IFn$_invoke$arity$1(cljs.core.meta((((typeof metabase !== 'undefined') && (typeof metabase.mbql !== 'undefined') && (typeof metabase.mbql.schema !== 'undefined') && (typeof metabase.mbql.schema._GT__EQ_ !== 'undefined'))?(new cljs.core.Var((function (){\nreturn metabase.mbql.schema._GT__EQ_;\n}),cljs.core.with_meta(new cljs.core.Symbol(\"metabase.mbql.schema\",\">=\",\"metabase.mbql.schema/>=\",1977236849,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(\"cljs.analyzer\",\"no-resolve\",\"cljs.analyzer/no-resolve\",-1872351017),true], null)),cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null,\"ns\",\"ns\",441598760),new cljs.core.Keyword(null,\"name\",\"name\",1843675177),new cljs.core.Keyword(null,\"file\",\"file\",-1269645878),new cljs.core.Keyword(null,\"end-column\",\"end-column\",1425389514),new cljs.core.Keyword(null,\"clause-name\",\"clause-name\",-996419059),new cljs.core.Keyword(null,\"column\",\"column\",2078222095),new cljs.core.Keyword(null,\"line\",\"line\",212345235),new cljs.core.Keyword(null,\"end-line\",\"end-line\",1837326455),new cljs.core.Keyword(null,\"clause-form\",\"clause-form\",1820463737),new cljs.core.Keyword(null,\"arglists\",\"arglists\",1661989754),new cljs.core.Keyword(null,\"doc\",\"doc\",1913296891),new cljs.core.Keyword(null,\"test\",\"test\",577538877)],[cljs.core.with_meta(new cljs.core.Symbol(null,\"metabase.mbql.schema\",\"metabase.mbql.schema\",-408168902,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"doc\",\"doc\",1913296891),\"Schema for validating a *normalized* MBQL query. This is also the definitive grammar for MBQL, wow!\"], null)),new cljs.core.Symbol(null,\">=\",\">=\",1016916022,null),\"metabase/mbql/schema.cljc\",14,new cljs.core.Keyword(null,\">=\",\">=\",-623615505),1,817,817,new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\">=\",\">=\",-623615505),new cljs.core.Keyword(null,\"field\",\"field\",-1302436500),cljs.core.list(new cljs.core.Symbol(null,\"quote\",\"quote\",1377916282,null),new cljs.core.Symbol(null,\"OrderComparable\",\"OrderComparable\",772072595,null)),new cljs.core.Keyword(null,\"value-or-field\",\"value-or-field\",-1387286309),cljs.core.list(new cljs.core.Symbol(null,\"quote\",\"quote\",1377916282,null),new cljs.core.Symbol(null,\"OrderComparable\",\"OrderComparable\",772072595,null))], null),cljs.core.List.EMPTY,\"Schema for a valid >= clause.\",(cljs.core.truth_(metabase.mbql.schema._GT__EQ_)?metabase.mbql.schema._GT__EQ_.cljs$lang$test:null)]))):null)));\nif(cljs.core.truth_(or__5045__auto__)){\nreturn or__5045__auto__;\n} else {\nreturn new cljs.core.Symbol(null,\">=\",\">=\",1016916022,null);\n}\n})(),metabase.mbql.schema._GT__EQ_], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var or__5045__auto__ = new cljs.core.Keyword(null,\"clause-name\",\"clause-name\",-996419059).cljs$core$IFn$_invoke$arity$1(cljs.core.meta((((typeof metabase !== 'undefined') && (typeof metabase.mbql !== 'undefined') && (typeof metabase.mbql.schema !== 'undefined') && (typeof metabase.mbql.schema._EQ_ !== 'undefined'))?(new cljs.core.Var((function (){\nreturn metabase.mbql.schema._EQ_;\n}),cljs.core.with_meta(new cljs.core.Symbol(\"metabase.mbql.schema\",\"=\",\"metabase.mbql.schema/=\",1850085384,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(\"cljs.analyzer\",\"no-resolve\",\"cljs.analyzer/no-resolve\",-1872351017),true], null)),cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null,\"ns\",\"ns\",441598760),new cljs.core.Keyword(null,\"name\",\"name\",1843675177),new cljs.core.Keyword(null,\"file\",\"file\",-1269645878),new cljs.core.Keyword(null,\"end-column\",\"end-column\",1425389514),new cljs.core.Keyword(null,\"clause-name\",\"clause-name\",-996419059),new cljs.core.Keyword(null,\"column\",\"column\",2078222095),new cljs.core.Keyword(null,\"line\",\"line\",212345235),new cljs.core.Keyword(null,\"end-line\",\"end-line\",1837326455),new cljs.core.Keyword(null,\"clause-form\",\"clause-form\",1820463737),new cljs.core.Keyword(null,\"arglists\",\"arglists\",1661989754),new cljs.core.Keyword(null,\"doc\",\"doc\",1913296891),new cljs.core.Keyword(null,\"test\",\"test\",577538877)],[cljs.core.with_meta(new cljs.core.Symbol(null,\"metabase.mbql.schema\",\"metabase.mbql.schema\",-408168902,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"doc\",\"doc\",1913296891),\"Schema for validating a *normalized* MBQL query. This is also the definitive grammar for MBQL, wow!\"], null)),new cljs.core.Symbol(null,\"=\",\"=\",-1501502141,null),\"metabase/mbql/schema.cljc\",13,new cljs.core.Keyword(null,\"=\",\"=\",1152933628),1,811,811,new cljs.core.PersistentVector(null, 7, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"=\",\"=\",1152933628),new cljs.core.Keyword(null,\"field\",\"field\",-1302436500),cljs.core.list(new cljs.core.Symbol(null,\"quote\",\"quote\",1377916282,null),new cljs.core.Symbol(null,\"EqualityComparable\",\"EqualityComparable\",-2076258858,null)),new cljs.core.Keyword(null,\"value-or-field\",\"value-or-field\",-1387286309),cljs.core.list(new cljs.core.Symbol(null,\"quote\",\"quote\",1377916282,null),new cljs.core.Symbol(null,\"EqualityComparable\",\"EqualityComparable\",-2076258858,null)),new cljs.core.Keyword(null,\"more-values-or-fields\",\"more-values-or-fields\",-886177554),cljs.core.list(new cljs.core.Symbol(null,\"quote\",\"quote\",1377916282,null),cljs.core.list(new cljs.core.Symbol(null,\"rest\",\"rest\",398835108,null),new cljs.core.Symbol(null,\"EqualityComparable\",\"EqualityComparable\",-2076258858,null)))], null),cljs.core.List.EMPTY,\"Schema for a valid = clause.\",(cljs.core.truth_(metabase.mbql.schema._EQ_)?metabase.mbql.schema._EQ_.cljs$lang$test:null)]))):null)));\nif(cljs.core.truth_(or__5045__auto__)){\nreturn or__5045__auto__;\n} else {\nreturn new cljs.core.Symbol(null,\"=\",\"=\",-1501502141,null);\n}\n})(),metabase.mbql.schema._EQ_], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var or__5045__auto__ = new cljs.core.Keyword(null,\"clause-name\",\"clause-name\",-996419059).cljs$core$IFn$_invoke$arity$1(cljs.core.meta((((typeof metabase !== 'undefined') && (typeof metabase.mbql !== 'undefined') && (typeof metabase.mbql.schema !== 'undefined') && (typeof metabase.mbql.schema._BANG__EQ_ !== 'undefined'))?(new cljs.core.Var((function (){\nreturn metabase.mbql.schema._BANG__EQ_;\n}),cljs.core.with_meta(new cljs.core.Symbol(\"metabase.mbql.schema\",\"!=\",\"metabase.mbql.schema/!=\",-807630752,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(\"cljs.analyzer\",\"no-resolve\",\"cljs.analyzer/no-resolve\",-1872351017),true], null)),cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null,\"ns\",\"ns\",441598760),new cljs.core.Keyword(null,\"name\",\"name\",1843675177),new cljs.core.Keyword(null,\"file\",\"file\",-1269645878),new cljs.core.Keyword(null,\"end-column\",\"end-column\",1425389514),new cljs.core.Keyword(null,\"clause-name\",\"clause-name\",-996419059),new cljs.core.Keyword(null,\"column\",\"column\",2078222095),new cljs.core.Keyword(null,\"line\",\"line\",212345235),new cljs.core.Keyword(null,\"end-line\",\"end-line\",1837326455),new cljs.core.Keyword(null,\"clause-form\",\"clause-form\",1820463737),new cljs.core.Keyword(null,\"arglists\",\"arglists\",1661989754),new cljs.core.Keyword(null,\"doc\",\"doc\",1913296891),new cljs.core.Keyword(null,\"test\",\"test\",577538877)],[cljs.core.with_meta(new cljs.core.Symbol(null,\"metabase.mbql.schema\",\"metabase.mbql.schema\",-408168902,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"doc\",\"doc\",1913296891),\"Schema for validating a *normalized* MBQL query. This is also the definitive grammar for MBQL, wow!\"], null)),new cljs.core.Symbol(null,\"!=\",\"!=\",-201205829,null),\"metabase/mbql/schema.cljc\",14,new cljs.core.Keyword(null,\"!=\",\"!=\",-1841737356),1,812,812,new cljs.core.PersistentVector(null, 7, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"!=\",\"!=\",-1841737356),new cljs.core.Keyword(null,\"field\",\"field\",-1302436500),cljs.core.list(new cljs.core.Symbol(null,\"quote\",\"quote\",1377916282,null),new cljs.core.Symbol(null,\"EqualityComparable\",\"EqualityComparable\",-2076258858,null)),new cljs.core.Keyword(null,\"value-or-field\",\"value-or-field\",-1387286309),cljs.core.list(new cljs.core.Symbol(null,\"quote\",\"quote\",1377916282,null),new cljs.core.Symbol(null,\"EqualityComparable\",\"EqualityComparable\",-2076258858,null)),new cljs.core.Keyword(null,\"more-values-or-fields\",\"more-values-or-fields\",-886177554),cljs.core.list(new cljs.core.Symbol(null,\"quote\",\"quote\",1377916282,null),cljs.core.list(new cljs.core.Symbol(null,\"rest\",\"rest\",398835108,null),new cljs.core.Symbol(null,\"EqualityComparable\",\"EqualityComparable\",-2076258858,null)))], null),cljs.core.List.EMPTY,\"Schema for a valid != clause.\",(cljs.core.truth_(metabase.mbql.schema._BANG__EQ_)?metabase.mbql.schema._BANG__EQ_.cljs$lang$test:null)]))):null)));\nif(cljs.core.truth_(or__5045__auto__)){\nreturn or__5045__auto__;\n} else {\nreturn new cljs.core.Symbol(null,\"!=\",\"!=\",-201205829,null);\n}\n})(),metabase.mbql.schema._BANG__EQ_], null)], 0));\nmetabase.mbql.schema.Filter_STAR_ = schema.core.conditional.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([cljs.core.partial.cljs$core$IFn$_invoke$arity$2(metabase.mbql.schema.helpers.is_clause_QMARK_,metabase.mbql.schema.datetime_functions),metabase.mbql.schema.DatetimeExpression,cljs.core.partial.cljs$core$IFn$_invoke$arity$2(metabase.mbql.schema.helpers.is_clause_QMARK_,metabase.mbql.schema.numeric_functions),metabase.mbql.schema.NumericExpression,cljs.core.partial.cljs$core$IFn$_invoke$arity$2(metabase.mbql.schema.helpers.is_clause_QMARK_,metabase.mbql.schema.string_functions),metabase.mbql.schema.StringExpression,cljs.core.partial.cljs$core$IFn$_invoke$arity$2(metabase.mbql.schema.helpers.is_clause_QMARK_,metabase.mbql.schema.boolean_functions),metabase.mbql.schema.BooleanExpression,new cljs.core.Keyword(null,\"else\",\"else\",-1508377146),metabase.mbql.schema.helpers.one_of_STAR_.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var or__5045__auto__ = new cljs.core.Keyword(null,\"clause-name\",\"clause-name\",-996419059).cljs$core$IFn$_invoke$arity$1(cljs.core.meta((((typeof metabase !== 'undefined') && (typeof metabase.mbql !== 'undefined') && (typeof metabase.mbql.schema !== 'undefined') && (typeof metabase.mbql.schema.and !== 'undefined'))?(new cljs.core.Var((function (){\nreturn metabase.mbql.schema.and;\n}),cljs.core.with_meta(new cljs.core.Symbol(\"metabase.mbql.schema\",\"and\",\"metabase.mbql.schema/and\",1553856071,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(\"cljs.analyzer\",\"no-resolve\",\"cljs.analyzer/no-resolve\",-1872351017),true], null)),cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null,\"ns\",\"ns\",441598760),new cljs.core.Keyword(null,\"name\",\"name\",1843675177),new cljs.core.Keyword(null,\"file\",\"file\",-1269645878),new cljs.core.Keyword(null,\"end-column\",\"end-column\",1425389514),new cljs.core.Keyword(null,\"clause-name\",\"clause-name\",-996419059),new cljs.core.Keyword(null,\"column\",\"column\",2078222095),new cljs.core.Keyword(null,\"line\",\"line\",212345235),new cljs.core.Keyword(null,\"end-line\",\"end-line\",1837326455),new cljs.core.Keyword(null,\"clause-form\",\"clause-form\",1820463737),new cljs.core.Keyword(null,\"arglists\",\"arglists\",1661989754),new cljs.core.Keyword(null,\"doc\",\"doc\",1913296891),new cljs.core.Keyword(null,\"test\",\"test\",577538877)],[cljs.core.with_meta(new cljs.core.Symbol(null,\"metabase.mbql.schema\",\"metabase.mbql.schema\",-408168902,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"doc\",\"doc\",1913296891),\"Schema for validating a *normalized* MBQL query. This is also the definitive grammar for MBQL, wow!\"], null)),new cljs.core.Symbol(null,\"and\",\"and\",668631710,null),\"metabase/mbql/schema.cljc\",15,new cljs.core.Keyword(null,\"and\",\"and\",-971899817),1,758,758,new cljs.core.PersistentVector(null, 7, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"and\",\"and\",-971899817),new cljs.core.Keyword(null,\"first-clause\",\"first-clause\",-20953491),cljs.core.list(new cljs.core.Symbol(null,\"quote\",\"quote\",1377916282,null),cljs.core.list(new cljs.core.Symbol(\"s\",\"recursive\",\"s/recursive\",-1935549792,null),cljs.core.list(new cljs.core.Symbol(null,\"var\",\"var\",870848730,null),new cljs.core.Symbol(null,\"Filter\",\"Filter\",-424893332,null)))),new cljs.core.Keyword(null,\"second-clause\",\"second-clause\",-461435645),cljs.core.list(new cljs.core.Symbol(null,\"quote\",\"quote\",1377916282,null),cljs.core.list(new cljs.core.Symbol(\"s\",\"recursive\",\"s/recursive\",-1935549792,null),cljs.core.list(new cljs.core.Symbol(null,\"var\",\"var\",870848730,null),new cljs.core.Symbol(null,\"Filter\",\"Filter\",-424893332,null)))),new cljs.core.Keyword(null,\"other-clauses\",\"other-clauses\",1570511021),cljs.core.list(new cljs.core.Symbol(null,\"quote\",\"quote\",1377916282,null),cljs.core.list(new cljs.core.Symbol(null,\"rest\",\"rest\",398835108,null),cljs.core.list(new cljs.core.Symbol(\"s\",\"recursive\",\"s/recursive\",-1935549792,null),cljs.core.list(new cljs.core.Symbol(null,\"var\",\"var\",870848730,null),new cljs.core.Symbol(null,\"Filter\",\"Filter\",-424893332,null)))))], null),cljs.core.List.EMPTY,\"Schema for a valid and clause.\",(cljs.core.truth_(metabase.mbql.schema.and)?metabase.mbql.schema.and.cljs$lang$test:null)]))):null)));\nif(cljs.core.truth_(or__5045__auto__)){\nreturn or__5045__auto__;\n} else {\nreturn new cljs.core.Symbol(null,\"and\",\"and\",668631710,null);\n}\n})(),metabase.mbql.schema.and], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var or__5045__auto__ = new cljs.core.Keyword(null,\"clause-name\",\"clause-name\",-996419059).cljs$core$IFn$_invoke$arity$1(cljs.core.meta((((typeof metabase !== 'undefined') && (typeof metabase.mbql !== 'undefined') && (typeof metabase.mbql.schema !== 'undefined') && (typeof metabase.mbql.schema.or !== 'undefined'))?(new cljs.core.Var((function (){\nreturn metabase.mbql.schema.or;\n}),cljs.core.with_meta(new cljs.core.Symbol(\"metabase.mbql.schema\",\"or\",\"metabase.mbql.schema/or\",-1500355255,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(\"cljs.analyzer\",\"no-resolve\",\"cljs.analyzer/no-resolve\",-1872351017),true], null)),cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null,\"ns\",\"ns\",441598760),new cljs.core.Keyword(null,\"name\",\"name\",1843675177),new cljs.core.Keyword(null,\"file\",\"file\",-1269645878),new cljs.core.Keyword(null,\"end-column\",\"end-column\",1425389514),new cljs.core.Keyword(null,\"clause-name\",\"clause-name\",-996419059),new cljs.core.Keyword(null,\"column\",\"column\",2078222095),new cljs.core.Keyword(null,\"line\",\"line\",212345235),new cljs.core.Keyword(null,\"end-line\",\"end-line\",1837326455),new cljs.core.Keyword(null,\"clause-form\",\"clause-form\",1820463737),new cljs.core.Keyword(null,\"arglists\",\"arglists\",1661989754),new cljs.core.Keyword(null,\"doc\",\"doc\",1913296891),new cljs.core.Keyword(null,\"test\",\"test\",577538877)],[cljs.core.with_meta(new cljs.core.Symbol(null,\"metabase.mbql.schema\",\"metabase.mbql.schema\",-408168902,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"doc\",\"doc\",1913296891),\"Schema for validating a *normalized* MBQL query. This is also the definitive grammar for MBQL, wow!\"], null)),new cljs.core.Symbol(null,\"or\",\"or\",1876275696,null),\"metabase/mbql/schema.cljc\",14,new cljs.core.Keyword(null,\"or\",\"or\",235744169),1,763,763,new cljs.core.PersistentVector(null, 7, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"or\",\"or\",235744169),new cljs.core.Keyword(null,\"first-clause\",\"first-clause\",-20953491),cljs.core.list(new cljs.core.Symbol(null,\"quote\",\"quote\",1377916282,null),cljs.core.list(new cljs.core.Symbol(\"s\",\"recursive\",\"s/recursive\",-1935549792,null),cljs.core.list(new cljs.core.Symbol(null,\"var\",\"var\",870848730,null),new cljs.core.Symbol(null,\"Filter\",\"Filter\",-424893332,null)))),new cljs.core.Keyword(null,\"second-clause\",\"second-clause\",-461435645),cljs.core.list(new cljs.core.Symbol(null,\"quote\",\"quote\",1377916282,null),cljs.core.list(new cljs.core.Symbol(\"s\",\"recursive\",\"s/recursive\",-1935549792,null),cljs.core.list(new cljs.core.Symbol(null,\"var\",\"var\",870848730,null),new cljs.core.Symbol(null,\"Filter\",\"Filter\",-424893332,null)))),new cljs.core.Keyword(null,\"other-clauses\",\"other-clauses\",1570511021),cljs.core.list(new cljs.core.Symbol(null,\"quote\",\"quote\",1377916282,null),cljs.core.list(new cljs.core.Symbol(null,\"rest\",\"rest\",398835108,null),cljs.core.list(new cljs.core.Symbol(\"s\",\"recursive\",\"s/recursive\",-1935549792,null),cljs.core.list(new cljs.core.Symbol(null,\"var\",\"var\",870848730,null),new cljs.core.Symbol(null,\"Filter\",\"Filter\",-424893332,null)))))], null),cljs.core.List.EMPTY,\"Schema for a valid or clause.\",(cljs.core.truth_(metabase.mbql.schema.or)?metabase.mbql.schema.or.cljs$lang$test:null)]))):null)));\nif(cljs.core.truth_(or__5045__auto__)){\nreturn or__5045__auto__;\n} else {\nreturn new cljs.core.Symbol(null,\"or\",\"or\",1876275696,null);\n}\n})(),metabase.mbql.schema.or], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var or__5045__auto__ = new cljs.core.Keyword(null,\"clause-name\",\"clause-name\",-996419059).cljs$core$IFn$_invoke$arity$1(cljs.core.meta((((typeof metabase !== 'undefined') && (typeof metabase.mbql !== 'undefined') && (typeof metabase.mbql.schema !== 'undefined') && (typeof metabase.mbql.schema.not !== 'undefined'))?(new cljs.core.Var((function (){\nreturn metabase.mbql.schema.not;\n}),cljs.core.with_meta(new cljs.core.Symbol(\"metabase.mbql.schema\",\"not\",\"metabase.mbql.schema/not\",-113379604,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(\"cljs.analyzer\",\"no-resolve\",\"cljs.analyzer/no-resolve\",-1872351017),true], null)),cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null,\"ns\",\"ns\",441598760),new cljs.core.Keyword(null,\"name\",\"name\",1843675177),new cljs.core.Keyword(null,\"file\",\"file\",-1269645878),new cljs.core.Keyword(null,\"end-column\",\"end-column\",1425389514),new cljs.core.Keyword(null,\"clause-name\",\"clause-name\",-996419059),new cljs.core.Keyword(null,\"column\",\"column\",2078222095),new cljs.core.Keyword(null,\"line\",\"line\",212345235),new cljs.core.Keyword(null,\"end-line\",\"end-line\",1837326455),new cljs.core.Keyword(null,\"clause-form\",\"clause-form\",1820463737),new cljs.core.Keyword(null,\"arglists\",\"arglists\",1661989754),new cljs.core.Keyword(null,\"doc\",\"doc\",1913296891),new cljs.core.Keyword(null,\"test\",\"test\",577538877)],[cljs.core.with_meta(new cljs.core.Symbol(null,\"metabase.mbql.schema\",\"metabase.mbql.schema\",-408168902,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"doc\",\"doc\",1913296891),\"Schema for validating a *normalized* MBQL query. This is also the definitive grammar for MBQL, wow!\"], null)),new cljs.core.Symbol(null,\"not\",\"not\",1044554643,null),\"metabase/mbql/schema.cljc\",15,new cljs.core.Keyword(null,\"not\",\"not\",-595976884),1,768,768,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"not\",\"not\",-595976884),new cljs.core.Keyword(null,\"clause\",\"clause\",1479668060),cljs.core.list(new cljs.core.Symbol(null,\"quote\",\"quote\",1377916282,null),cljs.core.list(new cljs.core.Symbol(\"s\",\"recursive\",\"s/recursive\",-1935549792,null),cljs.core.list(new cljs.core.Symbol(null,\"var\",\"var\",870848730,null),new cljs.core.Symbol(null,\"Filter\",\"Filter\",-424893332,null))))], null),cljs.core.List.EMPTY,\"Schema for a valid not clause.\",(cljs.core.truth_(metabase.mbql.schema.not)?metabase.mbql.schema.not.cljs$lang$test:null)]))):null)));\nif(cljs.core.truth_(or__5045__auto__)){\nreturn or__5045__auto__;\n} else {\nreturn new cljs.core.Symbol(null,\"not\",\"not\",1044554643,null);\n}\n})(),metabase.mbql.schema.not], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var or__5045__auto__ = new cljs.core.Keyword(null,\"clause-name\",\"clause-name\",-996419059).cljs$core$IFn$_invoke$arity$1(cljs.core.meta((((typeof metabase !== 'undefined') && (typeof metabase.mbql !== 'undefined') && (typeof metabase.mbql.schema !== 'undefined') && (typeof metabase.mbql.schema._EQ_ !== 'undefined'))?(new cljs.core.Var((function (){\nreturn metabase.mbql.schema._EQ_;\n}),cljs.core.with_meta(new cljs.core.Symbol(\"metabase.mbql.schema\",\"=\",\"metabase.mbql.schema/=\",1850085384,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(\"cljs.analyzer\",\"no-resolve\",\"cljs.analyzer/no-resolve\",-1872351017),true], null)),cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null,\"ns\",\"ns\",441598760),new cljs.core.Keyword(null,\"name\",\"name\",1843675177),new cljs.core.Keyword(null,\"file\",\"file\",-1269645878),new cljs.core.Keyword(null,\"end-column\",\"end-column\",1425389514),new cljs.core.Keyword(null,\"clause-name\",\"clause-name\",-996419059),new cljs.core.Keyword(null,\"column\",\"column\",2078222095),new cljs.core.Keyword(null,\"line\",\"line\",212345235),new cljs.core.Keyword(null,\"end-line\",\"end-line\",1837326455),new cljs.core.Keyword(null,\"clause-form\",\"clause-form\",1820463737),new cljs.core.Keyword(null,\"arglists\",\"arglists\",1661989754),new cljs.core.Keyword(null,\"doc\",\"doc\",1913296891),new cljs.core.Keyword(null,\"test\",\"test\",577538877)],[cljs.core.with_meta(new cljs.core.Symbol(null,\"metabase.mbql.schema\",\"metabase.mbql.schema\",-408168902,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"doc\",\"doc\",1913296891),\"Schema for validating a *normalized* MBQL query. This is also the definitive grammar for MBQL, wow!\"], null)),new cljs.core.Symbol(null,\"=\",\"=\",-1501502141,null),\"metabase/mbql/schema.cljc\",13,new cljs.core.Keyword(null,\"=\",\"=\",1152933628),1,811,811,new cljs.core.PersistentVector(null, 7, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"=\",\"=\",1152933628),new cljs.core.Keyword(null,\"field\",\"field\",-1302436500),cljs.core.list(new cljs.core.Symbol(null,\"quote\",\"quote\",1377916282,null),new cljs.core.Symbol(null,\"EqualityComparable\",\"EqualityComparable\",-2076258858,null)),new cljs.core.Keyword(null,\"value-or-field\",\"value-or-field\",-1387286309),cljs.core.list(new cljs.core.Symbol(null,\"quote\",\"quote\",1377916282,null),new cljs.core.Symbol(null,\"EqualityComparable\",\"EqualityComparable\",-2076258858,null)),new cljs.core.Keyword(null,\"more-values-or-fields\",\"more-values-or-fields\",-886177554),cljs.core.list(new cljs.core.Symbol(null,\"quote\",\"quote\",1377916282,null),cljs.core.list(new cljs.core.Symbol(null,\"rest\",\"rest\",398835108,null),new cljs.core.Symbol(null,\"EqualityComparable\",\"EqualityComparable\",-2076258858,null)))], null),cljs.core.List.EMPTY,\"Schema for a valid = clause.\",(cljs.core.truth_(metabase.mbql.schema._EQ_)?metabase.mbql.schema._EQ_.cljs$lang$test:null)]))):null)));\nif(cljs.core.truth_(or__5045__auto__)){\nreturn or__5045__auto__;\n} else {\nreturn new cljs.core.Symbol(null,\"=\",\"=\",-1501502141,null);\n}\n})(),metabase.mbql.schema._EQ_], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var or__5045__auto__ = new cljs.core.Keyword(null,\"clause-name\",\"clause-name\",-996419059).cljs$core$IFn$_invoke$arity$1(cljs.core.meta((((typeof metabase !== 'undefined') && (typeof metabase.mbql !== 'undefined') && (typeof metabase.mbql.schema !== 'undefined') && (typeof metabase.mbql.schema._BANG__EQ_ !== 'undefined'))?(new cljs.core.Var((function (){\nreturn metabase.mbql.schema._BANG__EQ_;\n}),cljs.core.with_meta(new cljs.core.Symbol(\"metabase.mbql.schema\",\"!=\",\"metabase.mbql.schema/!=\",-807630752,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(\"cljs.analyzer\",\"no-resolve\",\"cljs.analyzer/no-resolve\",-1872351017),true], null)),cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null,\"ns\",\"ns\",441598760),new cljs.core.Keyword(null,\"name\",\"name\",1843675177),new cljs.core.Keyword(null,\"file\",\"file\",-1269645878),new cljs.core.Keyword(null,\"end-column\",\"end-column\",1425389514),new cljs.core.Keyword(null,\"clause-name\",\"clause-name\",-996419059),new cljs.core.Keyword(null,\"column\",\"column\",2078222095),new cljs.core.Keyword(null,\"line\",\"line\",212345235),new cljs.core.Keyword(null,\"end-line\",\"end-line\",1837326455),new cljs.core.Keyword(null,\"clause-form\",\"clause-form\",1820463737),new cljs.core.Keyword(null,\"arglists\",\"arglists\",1661989754),new cljs.core.Keyword(null,\"doc\",\"doc\",1913296891),new cljs.core.Keyword(null,\"test\",\"test\",577538877)],[cljs.core.with_meta(new cljs.core.Symbol(null,\"metabase.mbql.schema\",\"metabase.mbql.schema\",-408168902,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"doc\",\"doc\",1913296891),\"Schema for validating a *normalized* MBQL query. This is also the definitive grammar for MBQL, wow!\"], null)),new cljs.core.Symbol(null,\"!=\",\"!=\",-201205829,null),\"metabase/mbql/schema.cljc\",14,new cljs.core.Keyword(null,\"!=\",\"!=\",-1841737356),1,812,812,new cljs.core.PersistentVector(null, 7, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"!=\",\"!=\",-1841737356),new cljs.core.Keyword(null,\"field\",\"field\",-1302436500),cljs.core.list(new cljs.core.Symbol(null,\"quote\",\"quote\",1377916282,null),new cljs.core.Symbol(null,\"EqualityComparable\",\"EqualityComparable\",-2076258858,null)),new cljs.core.Keyword(null,\"value-or-field\",\"value-or-field\",-1387286309),cljs.core.list(new cljs.core.Symbol(null,\"quote\",\"quote\",1377916282,null),new cljs.core.Symbol(null,\"EqualityComparable\",\"EqualityComparable\",-2076258858,null)),new cljs.core.Keyword(null,\"more-values-or-fields\",\"more-values-or-fields\",-886177554),cljs.core.list(new cljs.core.Symbol(null,\"quote\",\"quote\",1377916282,null),cljs.core.list(new cljs.core.Symbol(null,\"rest\",\"rest\",398835108,null),new cljs.core.Symbol(null,\"EqualityComparable\",\"EqualityComparable\",-2076258858,null)))], null),cljs.core.List.EMPTY,\"Schema for a valid != clause.\",(cljs.core.truth_(metabase.mbql.schema._BANG__EQ_)?metabase.mbql.schema._BANG__EQ_.cljs$lang$test:null)]))):null)));\nif(cljs.core.truth_(or__5045__auto__)){\nreturn or__5045__auto__;\n} else {\nreturn new cljs.core.Symbol(null,\"!=\",\"!=\",-201205829,null);\n}\n})(),metabase.mbql.schema._BANG__EQ_], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var or__5045__auto__ = new cljs.core.Keyword(null,\"clause-name\",\"clause-name\",-996419059).cljs$core$IFn$_invoke$arity$1(cljs.core.meta((((typeof metabase !== 'undefined') && (typeof metabase.mbql !== 'undefined') && (typeof metabase.mbql.schema !== 'undefined') && (typeof metabase.mbql.schema._LT_ !== 'undefined'))?(new cljs.core.Var((function (){\nreturn metabase.mbql.schema._LT_;\n}),cljs.core.with_meta(new cljs.core.Symbol(\"metabase.mbql.schema\",\"<\",\"metabase.mbql.schema/<\",-1057391587,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(\"cljs.analyzer\",\"no-resolve\",\"cljs.analyzer/no-resolve\",-1872351017),true], null)),cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null,\"ns\",\"ns\",441598760),new cljs.core.Keyword(null,\"name\",\"name\",1843675177),new cljs.core.Keyword(null,\"file\",\"file\",-1269645878),new cljs.core.Keyword(null,\"end-column\",\"end-column\",1425389514),new cljs.core.Keyword(null,\"clause-name\",\"clause-name\",-996419059),new cljs.core.Keyword(null,\"column\",\"column\",2078222095),new cljs.core.Keyword(null,\"line\",\"line\",212345235),new cljs.core.Keyword(null,\"end-line\",\"end-line\",1837326455),new cljs.core.Keyword(null,\"clause-form\",\"clause-form\",1820463737),new cljs.core.Keyword(null,\"arglists\",\"arglists\",1661989754),new cljs.core.Keyword(null,\"doc\",\"doc\",1913296891),new cljs.core.Keyword(null,\"test\",\"test\",577538877)],[cljs.core.with_meta(new cljs.core.Symbol(null,\"metabase.mbql.schema\",\"metabase.mbql.schema\",-408168902,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"doc\",\"doc\",1913296891),\"Schema for validating a *normalized* MBQL query. This is also the definitive grammar for MBQL, wow!\"], null)),new cljs.core.Symbol(null,\"<\",\"<\",993667236,null),\"metabase/mbql/schema.cljc\",13,new cljs.core.Keyword(null,\"<\",\"<\",-646864291),1,814,814,new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"<\",\"<\",-646864291),new cljs.core.Keyword(null,\"field\",\"field\",-1302436500),cljs.core.list(new cljs.core.Symbol(null,\"quote\",\"quote\",1377916282,null),new cljs.core.Symbol(null,\"OrderComparable\",\"OrderComparable\",772072595,null)),new cljs.core.Keyword(null,\"value-or-field\",\"value-or-field\",-1387286309),cljs.core.list(new cljs.core.Symbol(null,\"quote\",\"quote\",1377916282,null),new cljs.core.Symbol(null,\"OrderComparable\",\"OrderComparable\",772072595,null))], null),cljs.core.List.EMPTY,\"Schema for a valid < clause.\",(cljs.core.truth_(metabase.mbql.schema._LT_)?metabase.mbql.schema._LT_.cljs$lang$test:null)]))):null)));\nif(cljs.core.truth_(or__5045__auto__)){\nreturn or__5045__auto__;\n} else {\nreturn new cljs.core.Symbol(null,\"<\",\"<\",993667236,null);\n}\n})(),metabase.mbql.schema._LT_], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var or__5045__auto__ = new cljs.core.Keyword(null,\"clause-name\",\"clause-name\",-996419059).cljs$core$IFn$_invoke$arity$1(cljs.core.meta((((typeof metabase !== 'undefined') && (typeof metabase.mbql !== 'undefined') && (typeof metabase.mbql.schema !== 'undefined') && (typeof metabase.mbql.schema._GT_ !== 'undefined'))?(new cljs.core.Var((function (){\nreturn metabase.mbql.schema._GT_;\n}),cljs.core.with_meta(new cljs.core.Symbol(\"metabase.mbql.schema\",\">\",\"metabase.mbql.schema/>\",-1619862474,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(\"cljs.analyzer\",\"no-resolve\",\"cljs.analyzer/no-resolve\",-1872351017),true], null)),cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null,\"ns\",\"ns\",441598760),new cljs.core.Keyword(null,\"name\",\"name\",1843675177),new cljs.core.Keyword(null,\"file\",\"file\",-1269645878),new cljs.core.Keyword(null,\"end-column\",\"end-column\",1425389514),new cljs.core.Keyword(null,\"clause-name\",\"clause-name\",-996419059),new cljs.core.Keyword(null,\"column\",\"column\",2078222095),new cljs.core.Keyword(null,\"line\",\"line\",212345235),new cljs.core.Keyword(null,\"end-line\",\"end-line\",1837326455),new cljs.core.Keyword(null,\"clause-form\",\"clause-form\",1820463737),new cljs.core.Keyword(null,\"arglists\",\"arglists\",1661989754),new cljs.core.Keyword(null,\"doc\",\"doc\",1913296891),new cljs.core.Keyword(null,\"test\",\"test\",577538877)],[cljs.core.with_meta(new cljs.core.Symbol(null,\"metabase.mbql.schema\",\"metabase.mbql.schema\",-408168902,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"doc\",\"doc\",1913296891),\"Schema for validating a *normalized* MBQL query. This is also the definitive grammar for MBQL, wow!\"], null)),new cljs.core.Symbol(null,\">\",\">\",1085014381,null),\"metabase/mbql/schema.cljc\",13,new cljs.core.Keyword(null,\">\",\">\",-555517146),1,815,815,new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\">\",\">\",-555517146),new cljs.core.Keyword(null,\"field\",\"field\",-1302436500),cljs.core.list(new cljs.core.Symbol(null,\"quote\",\"quote\",1377916282,null),new cljs.core.Symbol(null,\"OrderComparable\",\"OrderComparable\",772072595,null)),new cljs.core.Keyword(null,\"value-or-field\",\"value-or-field\",-1387286309),cljs.core.list(new cljs.core.Symbol(null,\"quote\",\"quote\",1377916282,null),new cljs.core.Symbol(null,\"OrderComparable\",\"OrderComparable\",772072595,null))], null),cljs.core.List.EMPTY,\"Schema for a valid > clause.\",(cljs.core.truth_(metabase.mbql.schema._GT_)?metabase.mbql.schema._GT_.cljs$lang$test:null)]))):null)));\nif(cljs.core.truth_(or__5045__auto__)){\nreturn or__5045__auto__;\n} else {\nreturn new cljs.core.Symbol(null,\">\",\">\",1085014381,null);\n}\n})(),metabase.mbql.schema._GT_], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var or__5045__auto__ = new cljs.core.Keyword(null,\"clause-name\",\"clause-name\",-996419059).cljs$core$IFn$_invoke$arity$1(cljs.core.meta((((typeof metabase !== 'undefined') && (typeof metabase.mbql !== 'undefined') && (typeof metabase.mbql.schema !== 'undefined') && (typeof metabase.mbql.schema._LT__EQ_ !== 'undefined'))?(new cljs.core.Var((function (){\nreturn metabase.mbql.schema._LT__EQ_;\n}),cljs.core.with_meta(new cljs.core.Symbol(\"metabase.mbql.schema\",\"<=\",\"metabase.mbql.schema/<=\",-2098137664,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(\"cljs.analyzer\",\"no-resolve\",\"cljs.analyzer/no-resolve\",-1872351017),true], null)),cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null,\"ns\",\"ns\",441598760),new cljs.core.Keyword(null,\"name\",\"name\",1843675177),new cljs.core.Keyword(null,\"file\",\"file\",-1269645878),new cljs.core.Keyword(null,\"end-column\",\"end-column\",1425389514),new cljs.core.Keyword(null,\"clause-name\",\"clause-name\",-996419059),new cljs.core.Keyword(null,\"column\",\"column\",2078222095),new cljs.core.Keyword(null,\"line\",\"line\",212345235),new cljs.core.Keyword(null,\"end-line\",\"end-line\",1837326455),new cljs.core.Keyword(null,\"clause-form\",\"clause-form\",1820463737),new cljs.core.Keyword(null,\"arglists\",\"arglists\",1661989754),new cljs.core.Keyword(null,\"doc\",\"doc\",1913296891),new cljs.core.Keyword(null,\"test\",\"test\",577538877)],[cljs.core.with_meta(new cljs.core.Symbol(null,\"metabase.mbql.schema\",\"metabase.mbql.schema\",-408168902,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"doc\",\"doc\",1913296891),\"Schema for validating a *normalized* MBQL query. This is also the definitive grammar for MBQL, wow!\"], null)),new cljs.core.Symbol(null,\"<=\",\"<=\",1244895369,null),\"metabase/mbql/schema.cljc\",14,new cljs.core.Keyword(null,\"<=\",\"<=\",-395636158),1,816,816,new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"<=\",\"<=\",-395636158),new cljs.core.Keyword(null,\"field\",\"field\",-1302436500),cljs.core.list(new cljs.core.Symbol(null,\"quote\",\"quote\",1377916282,null),new cljs.core.Symbol(null,\"OrderComparable\",\"OrderComparable\",772072595,null)),new cljs.core.Keyword(null,\"value-or-field\",\"value-or-field\",-1387286309),cljs.core.list(new cljs.core.Symbol(null,\"quote\",\"quote\",1377916282,null),new cljs.core.Symbol(null,\"OrderComparable\",\"OrderComparable\",772072595,null))], null),cljs.core.List.EMPTY,\"Schema for a valid <= clause.\",(cljs.core.truth_(metabase.mbql.schema._LT__EQ_)?metabase.mbql.schema._LT__EQ_.cljs$lang$test:null)]))):null)));\nif(cljs.core.truth_(or__5045__auto__)){\nreturn or__5045__auto__;\n} else {\nreturn new cljs.core.Symbol(null,\"<=\",\"<=\",1244895369,null);\n}\n})(),metabase.mbql.schema._LT__EQ_], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var or__5045__auto__ = new cljs.core.Keyword(null,\"clause-name\",\"clause-name\",-996419059).cljs$core$IFn$_invoke$arity$1(cljs.core.meta((((typeof metabase !== 'undefined') && (typeof metabase.mbql !== 'undefined') && (typeof metabase.mbql.schema !== 'undefined') && (typeof metabase.mbql.schema._GT__EQ_ !== 'undefined'))?(new cljs.core.Var((function (){\nreturn metabase.mbql.schema._GT__EQ_;\n}),cljs.core.with_meta(new cljs.core.Symbol(\"metabase.mbql.schema\",\">=\",\"metabase.mbql.schema/>=\",1977236849,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(\"cljs.analyzer\",\"no-resolve\",\"cljs.analyzer/no-resolve\",-1872351017),true], null)),cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null,\"ns\",\"ns\",441598760),new cljs.core.Keyword(null,\"name\",\"name\",1843675177),new cljs.core.Keyword(null,\"file\",\"file\",-1269645878),new cljs.core.Keyword(null,\"end-column\",\"end-column\",1425389514),new cljs.core.Keyword(null,\"clause-name\",\"clause-name\",-996419059),new cljs.core.Keyword(null,\"column\",\"column\",2078222095),new cljs.core.Keyword(null,\"line\",\"line\",212345235),new cljs.core.Keyword(null,\"end-line\",\"end-line\",1837326455),new cljs.core.Keyword(null,\"clause-form\",\"clause-form\",1820463737),new cljs.core.Keyword(null,\"arglists\",\"arglists\",1661989754),new cljs.core.Keyword(null,\"doc\",\"doc\",1913296891),new cljs.core.Keyword(null,\"test\",\"test\",577538877)],[cljs.core.with_meta(new cljs.core.Symbol(null,\"metabase.mbql.schema\",\"metabase.mbql.schema\",-408168902,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"doc\",\"doc\",1913296891),\"Schema for validating a *normalized* MBQL query. This is also the definitive grammar for MBQL, wow!\"], null)),new cljs.core.Symbol(null,\">=\",\">=\",1016916022,null),\"metabase/mbql/schema.cljc\",14,new cljs.core.Keyword(null,\">=\",\">=\",-623615505),1,817,817,new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\">=\",\">=\",-623615505),new cljs.core.Keyword(null,\"field\",\"field\",-1302436500),cljs.core.list(new cljs.core.Symbol(null,\"quote\",\"quote\",1377916282,null),new cljs.core.Symbol(null,\"OrderComparable\",\"OrderComparable\",772072595,null)),new cljs.core.Keyword(null,\"value-or-field\",\"value-or-field\",-1387286309),cljs.core.list(new cljs.core.Symbol(null,\"quote\",\"quote\",1377916282,null),new cljs.core.Symbol(null,\"OrderComparable\",\"OrderComparable\",772072595,null))], null),cljs.core.List.EMPTY,\"Schema for a valid >= clause.\",(cljs.core.truth_(metabase.mbql.schema._GT__EQ_)?metabase.mbql.schema._GT__EQ_.cljs$lang$test:null)]))):null)));\nif(cljs.core.truth_(or__5045__auto__)){\nreturn or__5045__auto__;\n} else {\nreturn new cljs.core.Symbol(null,\">=\",\">=\",1016916022,null);\n}\n})(),metabase.mbql.schema._GT__EQ_], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var or__5045__auto__ = new cljs.core.Keyword(null,\"clause-name\",\"clause-name\",-996419059).cljs$core$IFn$_invoke$arity$1(cljs.core.meta((((typeof metabase !== 'undefined') && (typeof metabase.mbql !== 'undefined') && (typeof metabase.mbql.schema !== 'undefined') && (typeof metabase.mbql.schema.between !== 'undefined'))?(new cljs.core.Var((function (){\nreturn metabase.mbql.schema.between;\n}),cljs.core.with_meta(new cljs.core.Symbol(\"metabase.mbql.schema\",\"between\",\"metabase.mbql.schema/between\",-302972630,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(\"cljs.analyzer\",\"no-resolve\",\"cljs.analyzer/no-resolve\",-1872351017),true], null)),cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null,\"ns\",\"ns\",441598760),new cljs.core.Keyword(null,\"name\",\"name\",1843675177),new cljs.core.Keyword(null,\"file\",\"file\",-1269645878),new cljs.core.Keyword(null,\"end-column\",\"end-column\",1425389514),new cljs.core.Keyword(null,\"clause-name\",\"clause-name\",-996419059),new cljs.core.Keyword(null,\"column\",\"column\",2078222095),new cljs.core.Keyword(null,\"line\",\"line\",212345235),new cljs.core.Keyword(null,\"end-line\",\"end-line\",1837326455),new cljs.core.Keyword(null,\"clause-form\",\"clause-form\",1820463737),new cljs.core.Keyword(null,\"arglists\",\"arglists\",1661989754),new cljs.core.Keyword(null,\"doc\",\"doc\",1913296891),new cljs.core.Keyword(null,\"test\",\"test\",577538877)],[cljs.core.with_meta(new cljs.core.Symbol(null,\"metabase.mbql.schema\",\"metabase.mbql.schema\",-408168902,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"doc\",\"doc\",1913296891),\"Schema for validating a *normalized* MBQL query. This is also the definitive grammar for MBQL, wow!\"], null)),new cljs.core.Symbol(null,\"between\",\"between\",-1523336493,null),\"metabase/mbql/schema.cljc\",19,new cljs.core.Keyword(null,\"between\",\"between\",1131099276),1,820,820,new cljs.core.PersistentVector(null, 7, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"between\",\"between\",1131099276),new cljs.core.Keyword(null,\"field\",\"field\",-1302436500),cljs.core.list(new cljs.core.Symbol(null,\"quote\",\"quote\",1377916282,null),new cljs.core.Symbol(null,\"OrderComparable\",\"OrderComparable\",772072595,null)),new cljs.core.Keyword(null,\"min\",\"min\",444991522),cljs.core.list(new cljs.core.Symbol(null,\"quote\",\"quote\",1377916282,null),new cljs.core.Symbol(null,\"OrderComparable\",\"OrderComparable\",772072595,null)),new cljs.core.Keyword(null,\"max\",\"max\",61366548),cljs.core.list(new cljs.core.Symbol(null,\"quote\",\"quote\",1377916282,null),new cljs.core.Symbol(null,\"OrderComparable\",\"OrderComparable\",772072595,null))], null),cljs.core.List.EMPTY,\"Schema for a valid between clause.\",(cljs.core.truth_(metabase.mbql.schema.between)?metabase.mbql.schema.between.cljs$lang$test:null)]))):null)));\nif(cljs.core.truth_(or__5045__auto__)){\nreturn or__5045__auto__;\n} else {\nreturn new cljs.core.Symbol(null,\"between\",\"between\",-1523336493,null);\n}\n})(),metabase.mbql.schema.between], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var or__5045__auto__ = new cljs.core.Keyword(null,\"clause-name\",\"clause-name\",-996419059).cljs$core$IFn$_invoke$arity$1(cljs.core.meta((((typeof metabase !== 'undefined') && (typeof metabase.mbql !== 'undefined') && (typeof metabase.mbql.schema !== 'undefined') && (typeof metabase.mbql.schema.starts_with !== 'undefined'))?(new cljs.core.Var((function (){\nreturn metabase.mbql.schema.starts_with;\n}),cljs.core.with_meta(new cljs.core.Symbol(\"metabase.mbql.schema\",\"starts-with\",\"metabase.mbql.schema/starts-with\",1063663591,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(\"cljs.analyzer\",\"no-resolve\",\"cljs.analyzer/no-resolve\",-1872351017),true], null)),cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null,\"ns\",\"ns\",441598760),new cljs.core.Keyword(null,\"name\",\"name\",1843675177),new cljs.core.Keyword(null,\"file\",\"file\",-1269645878),new cljs.core.Keyword(null,\"end-column\",\"end-column\",1425389514),new cljs.core.Keyword(null,\"clause-name\",\"clause-name\",-996419059),new cljs.core.Keyword(null,\"column\",\"column\",2078222095),new cljs.core.Keyword(null,\"line\",\"line\",212345235),new cljs.core.Keyword(null,\"end-line\",\"end-line\",1837326455),new cljs.core.Keyword(null,\"clause-form\",\"clause-form\",1820463737),new cljs.core.Keyword(null,\"arglists\",\"arglists\",1661989754),new cljs.core.Keyword(null,\"doc\",\"doc\",1913296891),new cljs.core.Keyword(null,\"test\",\"test\",577538877)],[cljs.core.with_meta(new cljs.core.Symbol(null,\"metabase.mbql.schema\",\"metabase.mbql.schema\",-408168902,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"doc\",\"doc\",1913296891),\"Schema for validating a *normalized* MBQL query. This is also the definitive grammar for MBQL, wow!\"], null)),new cljs.core.Symbol(null,\"starts-with\",\"starts-with\",2007034536,null),\"metabase/mbql/schema.cljc\",23,new cljs.core.Keyword(null,\"starts-with\",\"starts-with\",366503009),1,843,843,new cljs.core.PersistentVector(null, 7, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"starts-with\",\"starts-with\",366503009),new cljs.core.Keyword(null,\"field\",\"field\",-1302436500),cljs.core.list(new cljs.core.Symbol(null,\"quote\",\"quote\",1377916282,null),new cljs.core.Symbol(null,\"StringExpressionArg\",\"StringExpressionArg\",-1131357258,null)),new cljs.core.Keyword(null,\"string-or-field\",\"string-or-field\",-1970678542),cljs.core.list(new cljs.core.Symbol(null,\"quote\",\"quote\",1377916282,null),new cljs.core.Symbol(null,\"StringExpressionArg\",\"StringExpressionArg\",-1131357258,null)),new cljs.core.Keyword(null,\"options\",\"options\",99638489),cljs.core.list(new cljs.core.Symbol(null,\"quote\",\"quote\",1377916282,null),cljs.core.list(new cljs.core.Symbol(null,\"optional\",\"optional\",-600484260,null),new cljs.core.Symbol(null,\"StringFilterOptions\",\"StringFilterOptions\",-847398229,null)))], null),cljs.core.List.EMPTY,\"Schema for a valid starts-with clause.\",(cljs.core.truth_(metabase.mbql.schema.starts_with)?metabase.mbql.schema.starts_with.cljs$lang$test:null)]))):null)));\nif(cljs.core.truth_(or__5045__auto__)){\nreturn or__5045__auto__;\n} else {\nreturn new cljs.core.Symbol(null,\"starts-with\",\"starts-with\",2007034536,null);\n}\n})(),metabase.mbql.schema.starts_with], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var or__5045__auto__ = new cljs.core.Keyword(null,\"clause-name\",\"clause-name\",-996419059).cljs$core$IFn$_invoke$arity$1(cljs.core.meta((((typeof metabase !== 'undefined') && (typeof metabase.mbql !== 'undefined') && (typeof metabase.mbql.schema !== 'undefined') && (typeof metabase.mbql.schema.ends_with !== 'undefined'))?(new cljs.core.Var((function (){\nreturn metabase.mbql.schema.ends_with;\n}),cljs.core.with_meta(new cljs.core.Symbol(\"metabase.mbql.schema\",\"ends-with\",\"metabase.mbql.schema/ends-with\",-2117292579,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(\"cljs.analyzer\",\"no-resolve\",\"cljs.analyzer/no-resolve\",-1872351017),true], null)),cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null,\"ns\",\"ns\",441598760),new cljs.core.Keyword(null,\"name\",\"name\",1843675177),new cljs.core.Keyword(null,\"file\",\"file\",-1269645878),new cljs.core.Keyword(null,\"end-column\",\"end-column\",1425389514),new cljs.core.Keyword(null,\"clause-name\",\"clause-name\",-996419059),new cljs.core.Keyword(null,\"column\",\"column\",2078222095),new cljs.core.Keyword(null,\"line\",\"line\",212345235),new cljs.core.Keyword(null,\"end-line\",\"end-line\",1837326455),new cljs.core.Keyword(null,\"clause-form\",\"clause-form\",1820463737),new cljs.core.Keyword(null,\"arglists\",\"arglists\",1661989754),new cljs.core.Keyword(null,\"doc\",\"doc\",1913296891),new cljs.core.Keyword(null,\"test\",\"test\",577538877)],[cljs.core.with_meta(new cljs.core.Symbol(null,\"metabase.mbql.schema\",\"metabase.mbql.schema\",-408168902,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"doc\",\"doc\",1913296891),\"Schema for validating a *normalized* MBQL query. This is also the definitive grammar for MBQL, wow!\"], null)),new cljs.core.Symbol(null,\"ends-with\",\"ends-with\",1183740516,null),\"metabase/mbql/schema.cljc\",21,new cljs.core.Keyword(null,\"ends-with\",\"ends-with\",-456791011),1,844,844,new cljs.core.PersistentVector(null, 7, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"ends-with\",\"ends-with\",-456791011),new cljs.core.Keyword(null,\"field\",\"field\",-1302436500),cljs.core.list(new cljs.core.Symbol(null,\"quote\",\"quote\",1377916282,null),new cljs.core.Symbol(null,\"StringExpressionArg\",\"StringExpressionArg\",-1131357258,null)),new cljs.core.Keyword(null,\"string-or-field\",\"string-or-field\",-1970678542),cljs.core.list(new cljs.core.Symbol(null,\"quote\",\"quote\",1377916282,null),new cljs.core.Symbol(null,\"StringExpressionArg\",\"StringExpressionArg\",-1131357258,null)),new cljs.core.Keyword(null,\"options\",\"options\",99638489),cljs.core.list(new cljs.core.Symbol(null,\"quote\",\"quote\",1377916282,null),cljs.core.list(new cljs.core.Symbol(null,\"optional\",\"optional\",-600484260,null),new cljs.core.Symbol(null,\"StringFilterOptions\",\"StringFilterOptions\",-847398229,null)))], null),cljs.core.List.EMPTY,\"Schema for a valid ends-with clause.\",(cljs.core.truth_(metabase.mbql.schema.ends_with)?metabase.mbql.schema.ends_with.cljs$lang$test:null)]))):null)));\nif(cljs.core.truth_(or__5045__auto__)){\nreturn or__5045__auto__;\n} else {\nreturn new cljs.core.Symbol(null,\"ends-with\",\"ends-with\",1183740516,null);\n}\n})(),metabase.mbql.schema.ends_with], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var or__5045__auto__ = new cljs.core.Keyword(null,\"clause-name\",\"clause-name\",-996419059).cljs$core$IFn$_invoke$arity$1(cljs.core.meta((((typeof metabase !== 'undefined') && (typeof metabase.mbql !== 'undefined') && (typeof metabase.mbql.schema !== 'undefined') && (typeof metabase.mbql.schema.contains !== 'undefined'))?(new cljs.core.Var((function (){\nreturn metabase.mbql.schema.contains;\n}),cljs.core.with_meta(new cljs.core.Symbol(\"metabase.mbql.schema\",\"contains\",\"metabase.mbql.schema/contains\",1399250832,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(\"cljs.analyzer\",\"no-resolve\",\"cljs.analyzer/no-resolve\",-1872351017),true], null)),cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null,\"ns\",\"ns\",441598760),new cljs.core.Keyword(null,\"name\",\"name\",1843675177),new cljs.core.Keyword(null,\"file\",\"file\",-1269645878),new cljs.core.Keyword(null,\"end-column\",\"end-column\",1425389514),new cljs.core.Keyword(null,\"clause-name\",\"clause-name\",-996419059),new cljs.core.Keyword(null,\"column\",\"column\",2078222095),new cljs.core.Keyword(null,\"line\",\"line\",212345235),new cljs.core.Keyword(null,\"end-line\",\"end-line\",1837326455),new cljs.core.Keyword(null,\"clause-form\",\"clause-form\",1820463737),new cljs.core.Keyword(null,\"arglists\",\"arglists\",1661989754),new cljs.core.Keyword(null,\"doc\",\"doc\",1913296891),new cljs.core.Keyword(null,\"test\",\"test\",577538877)],[cljs.core.with_meta(new cljs.core.Symbol(null,\"metabase.mbql.schema\",\"metabase.mbql.schema\",-408168902,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"doc\",\"doc\",1913296891),\"Schema for validating a *normalized* MBQL query. This is also the definitive grammar for MBQL, wow!\"], null)),new cljs.core.Symbol(null,\"contains\",\"contains\",-1977535957,null),\"metabase/mbql/schema.cljc\",20,new cljs.core.Keyword(null,\"contains\",\"contains\",676899812),1,845,845,new cljs.core.PersistentVector(null, 7, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"contains\",\"contains\",676899812),new cljs.core.Keyword(null,\"field\",\"field\",-1302436500),cljs.core.list(new cljs.core.Symbol(null,\"quote\",\"quote\",1377916282,null),new cljs.core.Symbol(null,\"StringExpressionArg\",\"StringExpressionArg\",-1131357258,null)),new cljs.core.Keyword(null,\"string-or-field\",\"string-or-field\",-1970678542),cljs.core.list(new cljs.core.Symbol(null,\"quote\",\"quote\",1377916282,null),new cljs.core.Symbol(null,\"StringExpressionArg\",\"StringExpressionArg\",-1131357258,null)),new cljs.core.Keyword(null,\"options\",\"options\",99638489),cljs.core.list(new cljs.core.Symbol(null,\"quote\",\"quote\",1377916282,null),cljs.core.list(new cljs.core.Symbol(null,\"optional\",\"optional\",-600484260,null),new cljs.core.Symbol(null,\"StringFilterOptions\",\"StringFilterOptions\",-847398229,null)))], null),cljs.core.List.EMPTY,\"Schema for a valid contains clause.\",(cljs.core.truth_(metabase.mbql.schema.contains)?metabase.mbql.schema.contains.cljs$lang$test:null)]))):null)));\nif(cljs.core.truth_(or__5045__auto__)){\nreturn or__5045__auto__;\n} else {\nreturn new cljs.core.Symbol(null,\"contains\",\"contains\",-1977535957,null);\n}\n})(),metabase.mbql.schema.contains], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var or__5045__auto__ = new cljs.core.Keyword(null,\"clause-name\",\"clause-name\",-996419059).cljs$core$IFn$_invoke$arity$1(cljs.core.meta((((typeof metabase !== 'undefined') && (typeof metabase.mbql !== 'undefined') && (typeof metabase.mbql.schema !== 'undefined') && (typeof metabase.mbql.schema.does_not_contain !== 'undefined'))?(new cljs.core.Var((function (){\nreturn metabase.mbql.schema.does_not_contain;\n}),cljs.core.with_meta(new cljs.core.Symbol(\"metabase.mbql.schema\",\"does-not-contain\",\"metabase.mbql.schema/does-not-contain\",-1742276611,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(\"cljs.analyzer\",\"no-resolve\",\"cljs.analyzer/no-resolve\",-1872351017),true], null)),cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null,\"ns\",\"ns\",441598760),new cljs.core.Keyword(null,\"name\",\"name\",1843675177),new cljs.core.Keyword(null,\"file\",\"file\",-1269645878),new cljs.core.Keyword(null,\"end-column\",\"end-column\",1425389514),new cljs.core.Keyword(null,\"clause-name\",\"clause-name\",-996419059),new cljs.core.Keyword(null,\"column\",\"column\",2078222095),new cljs.core.Keyword(null,\"line\",\"line\",212345235),new cljs.core.Keyword(null,\"end-line\",\"end-line\",1837326455),new cljs.core.Keyword(null,\"sugar\",\"sugar\",-73788488),new cljs.core.Keyword(null,\"clause-form\",\"clause-form\",1820463737),new cljs.core.Keyword(null,\"arglists\",\"arglists\",1661989754),new cljs.core.Keyword(null,\"doc\",\"doc\",1913296891),new cljs.core.Keyword(null,\"test\",\"test\",577538877)],[cljs.core.with_meta(new cljs.core.Symbol(null,\"metabase.mbql.schema\",\"metabase.mbql.schema\",-408168902,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"doc\",\"doc\",1913296891),\"Schema for validating a *normalized* MBQL query. This is also the definitive grammar for MBQL, wow!\"], null)),new cljs.core.Symbol(null,\"does-not-contain\",\"does-not-contain\",1365584674,null),\"metabase/mbql/schema.cljc\",36,new cljs.core.Keyword(null,\"does-not-contain\",\"does-not-contain\",-274946853),1,848,848,true,new cljs.core.PersistentVector(null, 7, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"does-not-contain\",\"does-not-contain\",-274946853),new cljs.core.Keyword(null,\"field\",\"field\",-1302436500),cljs.core.list(new cljs.core.Symbol(null,\"quote\",\"quote\",1377916282,null),new cljs.core.Symbol(null,\"StringExpressionArg\",\"StringExpressionArg\",-1131357258,null)),new cljs.core.Keyword(null,\"string-or-field\",\"string-or-field\",-1970678542),cljs.core.list(new cljs.core.Symbol(null,\"quote\",\"quote\",1377916282,null),new cljs.core.Symbol(null,\"StringExpressionArg\",\"StringExpressionArg\",-1131357258,null)),new cljs.core.Keyword(null,\"options\",\"options\",99638489),cljs.core.list(new cljs.core.Symbol(null,\"quote\",\"quote\",1377916282,null),cljs.core.list(new cljs.core.Symbol(null,\"optional\",\"optional\",-600484260,null),new cljs.core.Symbol(null,\"StringFilterOptions\",\"StringFilterOptions\",-847398229,null)))], null),cljs.core.List.EMPTY,\"Schema for a valid does-not-contain clause.\",(cljs.core.truth_(metabase.mbql.schema.does_not_contain)?metabase.mbql.schema.does_not_contain.cljs$lang$test:null)]))):null)));\nif(cljs.core.truth_(or__5045__auto__)){\nreturn or__5045__auto__;\n} else {\nreturn new cljs.core.Symbol(null,\"does-not-contain\",\"does-not-contain\",1365584674,null);\n}\n})(),metabase.mbql.schema.does_not_contain], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var or__5045__auto__ = new cljs.core.Keyword(null,\"clause-name\",\"clause-name\",-996419059).cljs$core$IFn$_invoke$arity$1(cljs.core.meta((((typeof metabase !== 'undefined') && (typeof metabase.mbql !== 'undefined') && (typeof metabase.mbql.schema !== 'undefined') && (typeof metabase.mbql.schema.inside !== 'undefined'))?(new cljs.core.Var((function (){\nreturn metabase.mbql.schema.inside;\n}),cljs.core.with_meta(new cljs.core.Symbol(\"metabase.mbql.schema\",\"inside\",\"metabase.mbql.schema/inside\",-291996315,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(\"cljs.analyzer\",\"no-resolve\",\"cljs.analyzer/no-resolve\",-1872351017),true], null)),cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null,\"ns\",\"ns\",441598760),new cljs.core.Keyword(null,\"name\",\"name\",1843675177),new cljs.core.Keyword(null,\"file\",\"file\",-1269645878),new cljs.core.Keyword(null,\"end-column\",\"end-column\",1425389514),new cljs.core.Keyword(null,\"clause-name\",\"clause-name\",-996419059),new cljs.core.Keyword(null,\"column\",\"column\",2078222095),new cljs.core.Keyword(null,\"line\",\"line\",212345235),new cljs.core.Keyword(null,\"end-line\",\"end-line\",1837326455),new cljs.core.Keyword(null,\"sugar\",\"sugar\",-73788488),new cljs.core.Keyword(null,\"clause-form\",\"clause-form\",1820463737),new cljs.core.Keyword(null,\"arglists\",\"arglists\",1661989754),new cljs.core.Keyword(null,\"doc\",\"doc\",1913296891),new cljs.core.Keyword(null,\"test\",\"test\",577538877)],[cljs.core.with_meta(new cljs.core.Symbol(null,\"metabase.mbql.schema\",\"metabase.mbql.schema\",-408168902,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"doc\",\"doc\",1913296891),\"Schema for validating a *normalized* MBQL query. This is also the definitive grammar for MBQL, wow!\"], null)),new cljs.core.Symbol(null,\"inside\",\"inside\",-681932758,null),\"metabase/mbql/schema.cljc\",26,new cljs.core.Keyword(null,\"inside\",\"inside\",1972503011),1,823,823,true,new cljs.core.PersistentVector(null, 13, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"inside\",\"inside\",1972503011),new cljs.core.Keyword(null,\"lat-field\",\"lat-field\",-830652957),cljs.core.list(new cljs.core.Symbol(null,\"quote\",\"quote\",1377916282,null),new cljs.core.Symbol(null,\"OrderComparable\",\"OrderComparable\",772072595,null)),new cljs.core.Keyword(null,\"lon-field\",\"lon-field\",517872067),cljs.core.list(new cljs.core.Symbol(null,\"quote\",\"quote\",1377916282,null),new cljs.core.Symbol(null,\"OrderComparable\",\"OrderComparable\",772072595,null)),new cljs.core.Keyword(null,\"lat-max\",\"lat-max\",841568226),cljs.core.list(new cljs.core.Symbol(null,\"quote\",\"quote\",1377916282,null),new cljs.core.Symbol(null,\"OrderComparable\",\"OrderComparable\",772072595,null)),new cljs.core.Keyword(null,\"lon-min\",\"lon-min\",-787291357),cljs.core.list(new cljs.core.Symbol(null,\"quote\",\"quote\",1377916282,null),new cljs.core.Symbol(null,\"OrderComparable\",\"OrderComparable\",772072595,null)),new cljs.core.Keyword(null,\"lat-min\",\"lat-min\",1630784161),cljs.core.list(new cljs.core.Symbol(null,\"quote\",\"quote\",1377916282,null),new cljs.core.Symbol(null,\"OrderComparable\",\"OrderComparable\",772072595,null)),new cljs.core.Keyword(null,\"lon-max\",\"lon-max\",1590224717),cljs.core.list(new cljs.core.Symbol(null,\"quote\",\"quote\",1377916282,null),new cljs.core.Symbol(null,\"OrderComparable\",\"OrderComparable\",772072595,null))], null),cljs.core.List.EMPTY,\"Schema for a valid inside clause.\",(cljs.core.truth_(metabase.mbql.schema.inside)?metabase.mbql.schema.inside.cljs$lang$test:null)]))):null)));\nif(cljs.core.truth_(or__5045__auto__)){\nreturn or__5045__auto__;\n} else {\nreturn new cljs.core.Symbol(null,\"inside\",\"inside\",-681932758,null);\n}\n})(),metabase.mbql.schema.inside], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var or__5045__auto__ = new cljs.core.Keyword(null,\"clause-name\",\"clause-name\",-996419059).cljs$core$IFn$_invoke$arity$1(cljs.core.meta((((typeof metabase !== 'undefined') && (typeof metabase.mbql !== 'undefined') && (typeof metabase.mbql.schema !== 'undefined') && (typeof metabase.mbql.schema.is_empty !== 'undefined'))?(new cljs.core.Var((function (){\nreturn metabase.mbql.schema.is_empty;\n}),cljs.core.with_meta(new cljs.core.Symbol(\"metabase.mbql.schema\",\"is-empty\",\"metabase.mbql.schema/is-empty\",1686480962,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(\"cljs.analyzer\",\"no-resolve\",\"cljs.analyzer/no-resolve\",-1872351017),true], null)),cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null,\"ns\",\"ns\",441598760),new cljs.core.Keyword(null,\"name\",\"name\",1843675177),new cljs.core.Keyword(null,\"file\",\"file\",-1269645878),new cljs.core.Keyword(null,\"end-column\",\"end-column\",1425389514),new cljs.core.Keyword(null,\"clause-name\",\"clause-name\",-996419059),new cljs.core.Keyword(null,\"column\",\"column\",2078222095),new cljs.core.Keyword(null,\"line\",\"line\",212345235),new cljs.core.Keyword(null,\"end-line\",\"end-line\",1837326455),new cljs.core.Keyword(null,\"sugar\",\"sugar\",-73788488),new cljs.core.Keyword(null,\"clause-form\",\"clause-form\",1820463737),new cljs.core.Keyword(null,\"arglists\",\"arglists\",1661989754),new cljs.core.Keyword(null,\"doc\",\"doc\",1913296891),new cljs.core.Keyword(null,\"test\",\"test\",577538877)],[cljs.core.with_meta(new cljs.core.Symbol(null,\"metabase.mbql.schema\",\"metabase.mbql.schema\",-408168902,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"doc\",\"doc\",1913296891),\"Schema for validating a *normalized* MBQL query. This is also the definitive grammar for MBQL, wow!\"], null)),new cljs.core.Symbol(null,\"is-empty\",\"is-empty\",600228619,null),\"metabase/mbql/schema.cljc\",28,new cljs.core.Keyword(null,\"is-empty\",\"is-empty\",-1040302908),1,837,837,true,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"is-empty\",\"is-empty\",-1040302908),new cljs.core.Keyword(null,\"field\",\"field\",-1302436500),cljs.core.list(new cljs.core.Symbol(null,\"quote\",\"quote\",1377916282,null),new cljs.core.Symbol(null,\"Field\",\"Field\",430385967,null))], null),cljs.core.List.EMPTY,\"Schema for a valid is-empty clause.\",(cljs.core.truth_(metabase.mbql.schema.is_empty)?metabase.mbql.schema.is_empty.cljs$lang$test:null)]))):null)));\nif(cljs.core.truth_(or__5045__auto__)){\nreturn or__5045__auto__;\n} else {\nreturn new cljs.core.Symbol(null,\"is-empty\",\"is-empty\",600228619,null);\n}\n})(),metabase.mbql.schema.is_empty], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var or__5045__auto__ = new cljs.core.Keyword(null,\"clause-name\",\"clause-name\",-996419059).cljs$core$IFn$_invoke$arity$1(cljs.core.meta((((typeof metabase !== 'undefined') && (typeof metabase.mbql !== 'undefined') && (typeof metabase.mbql.schema !== 'undefined') && (typeof metabase.mbql.schema.not_empty !== 'undefined'))?(new cljs.core.Var((function (){\nreturn metabase.mbql.schema.not_empty;\n}),cljs.core.with_meta(new cljs.core.Symbol(\"metabase.mbql.schema\",\"not-empty\",\"metabase.mbql.schema/not-empty\",-2093700401,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(\"cljs.analyzer\",\"no-resolve\",\"cljs.analyzer/no-resolve\",-1872351017),true], null)),cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null,\"ns\",\"ns\",441598760),new cljs.core.Keyword(null,\"name\",\"name\",1843675177),new cljs.core.Keyword(null,\"file\",\"file\",-1269645878),new cljs.core.Keyword(null,\"end-column\",\"end-column\",1425389514),new cljs.core.Keyword(null,\"clause-name\",\"clause-name\",-996419059),new cljs.core.Keyword(null,\"column\",\"column\",2078222095),new cljs.core.Keyword(null,\"line\",\"line\",212345235),new cljs.core.Keyword(null,\"end-line\",\"end-line\",1837326455),new cljs.core.Keyword(null,\"sugar\",\"sugar\",-73788488),new cljs.core.Keyword(null,\"clause-form\",\"clause-form\",1820463737),new cljs.core.Keyword(null,\"arglists\",\"arglists\",1661989754),new cljs.core.Keyword(null,\"doc\",\"doc\",1913296891),new cljs.core.Keyword(null,\"test\",\"test\",577538877)],[cljs.core.with_meta(new cljs.core.Symbol(null,\"metabase.mbql.schema\",\"metabase.mbql.schema\",-408168902,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"doc\",\"doc\",1913296891),\"Schema for validating a *normalized* MBQL query. This is also the definitive grammar for MBQL, wow!\"], null)),new cljs.core.Symbol(null,\"not-empty\",\"not-empty\",2029453590,null),\"metabase/mbql/schema.cljc\",29,new cljs.core.Keyword(null,\"not-empty\",\"not-empty\",388922063),1,838,838,true,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"not-empty\",\"not-empty\",388922063),new cljs.core.Keyword(null,\"field\",\"field\",-1302436500),cljs.core.list(new cljs.core.Symbol(null,\"quote\",\"quote\",1377916282,null),new cljs.core.Symbol(null,\"Field\",\"Field\",430385967,null))], null),cljs.core.List.EMPTY,\"Schema for a valid not-empty clause.\",(cljs.core.truth_(metabase.mbql.schema.not_empty)?metabase.mbql.schema.not_empty.cljs$lang$test:null)]))):null)));\nif(cljs.core.truth_(or__5045__auto__)){\nreturn or__5045__auto__;\n} else {\nreturn new cljs.core.Symbol(null,\"not-empty\",\"not-empty\",2029453590,null);\n}\n})(),metabase.mbql.schema.not_empty], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var or__5045__auto__ = new cljs.core.Keyword(null,\"clause-name\",\"clause-name\",-996419059).cljs$core$IFn$_invoke$arity$1(cljs.core.meta((((typeof metabase !== 'undefined') && (typeof metabase.mbql !== 'undefined') && (typeof metabase.mbql.schema !== 'undefined') && (typeof metabase.mbql.schema.is_null !== 'undefined'))?(new cljs.core.Var((function (){\nreturn metabase.mbql.schema.is_null;\n}),cljs.core.with_meta(new cljs.core.Symbol(\"metabase.mbql.schema\",\"is-null\",\"metabase.mbql.schema/is-null\",637054412,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(\"cljs.analyzer\",\"no-resolve\",\"cljs.analyzer/no-resolve\",-1872351017),true], null)),cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null,\"ns\",\"ns\",441598760),new cljs.core.Keyword(null,\"name\",\"name\",1843675177),new cljs.core.Keyword(null,\"file\",\"file\",-1269645878),new cljs.core.Keyword(null,\"end-column\",\"end-column\",1425389514),new cljs.core.Keyword(null,\"clause-name\",\"clause-name\",-996419059),new cljs.core.Keyword(null,\"column\",\"column\",2078222095),new cljs.core.Keyword(null,\"line\",\"line\",212345235),new cljs.core.Keyword(null,\"end-line\",\"end-line\",1837326455),new cljs.core.Keyword(null,\"sugar\",\"sugar\",-73788488),new cljs.core.Keyword(null,\"clause-form\",\"clause-form\",1820463737),new cljs.core.Keyword(null,\"arglists\",\"arglists\",1661989754),new cljs.core.Keyword(null,\"doc\",\"doc\",1913296891),new cljs.core.Keyword(null,\"test\",\"test\",577538877)],[cljs.core.with_meta(new cljs.core.Symbol(null,\"metabase.mbql.schema\",\"metabase.mbql.schema\",-408168902,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"doc\",\"doc\",1913296891),\"Schema for validating a *normalized* MBQL query. This is also the definitive grammar for MBQL, wow!\"], null)),new cljs.core.Symbol(null,\"is-null\",\"is-null\",-356519403,null),\"metabase/mbql/schema.cljc\",27,new cljs.core.Keyword(null,\"is-null\",\"is-null\",-1997050930),1,832,832,true,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"is-null\",\"is-null\",-1997050930),new cljs.core.Keyword(null,\"field\",\"field\",-1302436500),cljs.core.list(new cljs.core.Symbol(null,\"quote\",\"quote\",1377916282,null),new cljs.core.Symbol(null,\"Field\",\"Field\",430385967,null))], null),cljs.core.List.EMPTY,\"Schema for a valid is-null clause.\",(cljs.core.truth_(metabase.mbql.schema.is_null)?metabase.mbql.schema.is_null.cljs$lang$test:null)]))):null)));\nif(cljs.core.truth_(or__5045__auto__)){\nreturn or__5045__auto__;\n} else {\nreturn new cljs.core.Symbol(null,\"is-null\",\"is-null\",-356519403,null);\n}\n})(),metabase.mbql.schema.is_null], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var or__5045__auto__ = new cljs.core.Keyword(null,\"clause-name\",\"clause-name\",-996419059).cljs$core$IFn$_invoke$arity$1(cljs.core.meta((((typeof metabase !== 'undefined') && (typeof metabase.mbql !== 'undefined') && (typeof metabase.mbql.schema !== 'undefined') && (typeof metabase.mbql.schema.not_null !== 'undefined'))?(new cljs.core.Var((function (){\nreturn metabase.mbql.schema.not_null;\n}),cljs.core.with_meta(new cljs.core.Symbol(\"metabase.mbql.schema\",\"not-null\",\"metabase.mbql.schema/not-null\",1248581449,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(\"cljs.analyzer\",\"no-resolve\",\"cljs.analyzer/no-resolve\",-1872351017),true], null)),cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null,\"ns\",\"ns\",441598760),new cljs.core.Keyword(null,\"name\",\"name\",1843675177),new cljs.core.Keyword(null,\"file\",\"file\",-1269645878),new cljs.core.Keyword(null,\"end-column\",\"end-column\",1425389514),new cljs.core.Keyword(null,\"clause-name\",\"clause-name\",-996419059),new cljs.core.Keyword(null,\"column\",\"column\",2078222095),new cljs.core.Keyword(null,\"line\",\"line\",212345235),new cljs.core.Keyword(null,\"end-line\",\"end-line\",1837326455),new cljs.core.Keyword(null,\"sugar\",\"sugar\",-73788488),new cljs.core.Keyword(null,\"clause-form\",\"clause-form\",1820463737),new cljs.core.Keyword(null,\"arglists\",\"arglists\",1661989754),new cljs.core.Keyword(null,\"doc\",\"doc\",1913296891),new cljs.core.Keyword(null,\"test\",\"test\",577538877)],[cljs.core.with_meta(new cljs.core.Symbol(null,\"metabase.mbql.schema\",\"metabase.mbql.schema\",-408168902,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"doc\",\"doc\",1913296891),\"Schema for validating a *normalized* MBQL query. This is also the definitive grammar for MBQL, wow!\"], null)),new cljs.core.Symbol(null,\"not-null\",\"not-null\",313812992,null),\"metabase/mbql/schema.cljc\",28,new cljs.core.Keyword(null,\"not-null\",\"not-null\",-1326718535),1,833,833,true,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"not-null\",\"not-null\",-1326718535),new cljs.core.Keyword(null,\"field\",\"field\",-1302436500),cljs.core.list(new cljs.core.Symbol(null,\"quote\",\"quote\",1377916282,null),new cljs.core.Symbol(null,\"Field\",\"Field\",430385967,null))], null),cljs.core.List.EMPTY,\"Schema for a valid not-null clause.\",(cljs.core.truth_(metabase.mbql.schema.not_null)?metabase.mbql.schema.not_null.cljs$lang$test:null)]))):null)));\nif(cljs.core.truth_(or__5045__auto__)){\nreturn or__5045__auto__;\n} else {\nreturn new cljs.core.Symbol(null,\"not-null\",\"not-null\",313812992,null);\n}\n})(),metabase.mbql.schema.not_null], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var or__5045__auto__ = new cljs.core.Keyword(null,\"clause-name\",\"clause-name\",-996419059).cljs$core$IFn$_invoke$arity$1(cljs.core.meta((((typeof metabase !== 'undefined') && (typeof metabase.mbql !== 'undefined') && (typeof metabase.mbql.schema !== 'undefined') && (typeof metabase.mbql.schema.time_interval !== 'undefined'))?(new cljs.core.Var((function (){\nreturn metabase.mbql.schema.time_interval;\n}),cljs.core.with_meta(new cljs.core.Symbol(\"metabase.mbql.schema\",\"time-interval\",\"metabase.mbql.schema/time-interval\",1275783375,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(\"cljs.analyzer\",\"no-resolve\",\"cljs.analyzer/no-resolve\",-1872351017),true], null)),cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null,\"ns\",\"ns\",441598760),new cljs.core.Keyword(null,\"name\",\"name\",1843675177),new cljs.core.Keyword(null,\"file\",\"file\",-1269645878),new cljs.core.Keyword(null,\"end-column\",\"end-column\",1425389514),new cljs.core.Keyword(null,\"clause-name\",\"clause-name\",-996419059),new cljs.core.Keyword(null,\"column\",\"column\",2078222095),new cljs.core.Keyword(null,\"line\",\"line\",212345235),new cljs.core.Keyword(null,\"end-line\",\"end-line\",1837326455),new cljs.core.Keyword(null,\"sugar\",\"sugar\",-73788488),new cljs.core.Keyword(null,\"clause-form\",\"clause-form\",1820463737),new cljs.core.Keyword(null,\"arglists\",\"arglists\",1661989754),new cljs.core.Keyword(null,\"doc\",\"doc\",1913296891),new cljs.core.Keyword(null,\"test\",\"test\",577538877)],[cljs.core.with_meta(new cljs.core.Symbol(null,\"metabase.mbql.schema\",\"metabase.mbql.schema\",-408168902,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"doc\",\"doc\",1913296891),\"Schema for validating a *normalized* MBQL query. This is also the definitive grammar for MBQL, wow!\"], null)),new cljs.core.Symbol(null,\"time-interval\",\"time-interval\",-1949813754,null),\"metabase/mbql/schema.cljc\",33,new cljs.core.Keyword(null,\"time-interval\",\"time-interval\",704622015),1,868,868,true,new cljs.core.PersistentVector(null, 9, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"time-interval\",\"time-interval\",704622015),new cljs.core.Keyword(null,\"field\",\"field\",-1302436500),cljs.core.list(new cljs.core.Symbol(null,\"quote\",\"quote\",1377916282,null),new cljs.core.Symbol(null,\"Field\",\"Field\",430385967,null)),new cljs.core.Keyword(null,\"n\",\"n\",562130025),cljs.core.list(new cljs.core.Symbol(null,\"quote\",\"quote\",1377916282,null),cljs.core.list(new cljs.core.Symbol(\"s\",\"cond-pre\",\"s/cond-pre\",-923707600,null),new cljs.core.Symbol(\"s\",\"Int\",\"s/Int\",-2116888657,null),cljs.core.list(new cljs.core.Symbol(\"s\",\"enum\",\"s/enum\",-975416934,null),new cljs.core.Keyword(null,\"current\",\"current\",-1088038603),new cljs.core.Keyword(null,\"last\",\"last\",1105735132),new cljs.core.Keyword(null,\"next\",\"next\",-117701485)))),new cljs.core.Keyword(null,\"unit\",\"unit\",375175175),cljs.core.list(new cljs.core.Symbol(null,\"quote\",\"quote\",1377916282,null),new cljs.core.Symbol(null,\"RelativeDatetimeUnit\",\"RelativeDatetimeUnit\",-1157637501,null)),new cljs.core.Keyword(null,\"options\",\"options\",99638489),cljs.core.list(new cljs.core.Symbol(null,\"quote\",\"quote\",1377916282,null),cljs.core.list(new cljs.core.Symbol(null,\"optional\",\"optional\",-600484260,null),new cljs.core.Symbol(null,\"TimeIntervalOptions\",\"TimeIntervalOptions\",1566864026,null)))], null),cljs.core.List.EMPTY,\"Schema for a valid time-interval clause.\",(cljs.core.truth_(metabase.mbql.schema.time_interval)?metabase.mbql.schema.time_interval.cljs$lang$test:null)]))):null)));\nif(cljs.core.truth_(or__5045__auto__)){\nreturn or__5045__auto__;\n} else {\nreturn new cljs.core.Symbol(null,\"time-interval\",\"time-interval\",-1949813754,null);\n}\n})(),metabase.mbql.schema.time_interval], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var or__5045__auto__ = new cljs.core.Keyword(null,\"clause-name\",\"clause-name\",-996419059).cljs$core$IFn$_invoke$arity$1(cljs.core.meta((((typeof metabase !== 'undefined') && (typeof metabase.mbql !== 'undefined') && (typeof metabase.mbql.schema !== 'undefined') && (typeof metabase.mbql.schema.segment !== 'undefined'))?(new cljs.core.Var((function (){\nreturn metabase.mbql.schema.segment;\n}),cljs.core.with_meta(new cljs.core.Symbol(\"metabase.mbql.schema\",\"segment\",\"metabase.mbql.schema/segment\",-512121472,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(\"cljs.analyzer\",\"no-resolve\",\"cljs.analyzer/no-resolve\",-1872351017),true], null)),cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null,\"ns\",\"ns\",441598760),new cljs.core.Keyword(null,\"name\",\"name\",1843675177),new cljs.core.Keyword(null,\"file\",\"file\",-1269645878),new cljs.core.Keyword(null,\"end-column\",\"end-column\",1425389514),new cljs.core.Keyword(null,\"clause-name\",\"clause-name\",-996419059),new cljs.core.Keyword(null,\"column\",\"column\",2078222095),new cljs.core.Keyword(null,\"line\",\"line\",212345235),new cljs.core.Keyword(null,\"end-line\",\"end-line\",1837326455),new cljs.core.Keyword(null,\"sugar\",\"sugar\",-73788488),new cljs.core.Keyword(null,\"clause-form\",\"clause-form\",1820463737),new cljs.core.Keyword(null,\"arglists\",\"arglists\",1661989754),new cljs.core.Keyword(null,\"doc\",\"doc\",1913296891),new cljs.core.Keyword(null,\"test\",\"test\",577538877)],[cljs.core.with_meta(new cljs.core.Symbol(null,\"metabase.mbql.schema\",\"metabase.mbql.schema\",-408168902,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"doc\",\"doc\",1913296891),\"Schema for validating a *normalized* MBQL query. This is also the definitive grammar for MBQL, wow!\"], null)),new cljs.core.Symbol(null,\"segment\",\"segment\",675610331,null),\"metabase/mbql/schema.cljc\",27,new cljs.core.Keyword(null,\"segment\",\"segment\",-964921196),1,881,881,true,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"segment\",\"segment\",-964921196),new cljs.core.Keyword(null,\"segment-id\",\"segment-id\",1810133590),cljs.core.list(new cljs.core.Symbol(null,\"quote\",\"quote\",1377916282,null),cljs.core.list(new cljs.core.Symbol(\"s\",\"cond-pre\",\"s/cond-pre\",-923707600,null),new cljs.core.Symbol(\"helpers\",\"IntGreaterThanZero\",\"helpers/IntGreaterThanZero\",1743901629,null),new cljs.core.Symbol(\"helpers\",\"NonBlankString\",\"helpers/NonBlankString\",-2060904596,null)))], null),cljs.core.List.EMPTY,\"Schema for a valid segment clause.\",(cljs.core.truth_(metabase.mbql.schema.segment)?metabase.mbql.schema.segment.cljs$lang$test:null)]))):null)));\nif(cljs.core.truth_(or__5045__auto__)){\nreturn or__5045__auto__;\n} else {\nreturn new cljs.core.Symbol(null,\"segment\",\"segment\",675610331,null);\n}\n})(),metabase.mbql.schema.segment], null)], 0))], 0));\n/**\n * Schema for a valid MBQL `:filter` clause.\n */\nmetabase.mbql.schema.Filter = schema.core.recursive(new cljs.core.Var(function(){return metabase.mbql.schema.Filter_STAR_;},new cljs.core.Symbol(\"metabase.mbql.schema\",\"Filter*\",\"metabase.mbql.schema/Filter*\",-140275836,null),cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null,\"private\",\"private\",-558947994),new cljs.core.Keyword(null,\"ns\",\"ns\",441598760),new cljs.core.Keyword(null,\"name\",\"name\",1843675177),new cljs.core.Keyword(null,\"file\",\"file\",-1269645878),new cljs.core.Keyword(null,\"end-column\",\"end-column\",1425389514),new cljs.core.Keyword(null,\"column\",\"column\",2078222095),new cljs.core.Keyword(null,\"line\",\"line\",212345235),new cljs.core.Keyword(null,\"end-line\",\"end-line\",1837326455),new cljs.core.Keyword(null,\"arglists\",\"arglists\",1661989754),new cljs.core.Keyword(null,\"doc\",\"doc\",1913296891),new cljs.core.Keyword(null,\"test\",\"test\",577538877)],[true,cljs.core.with_meta(new cljs.core.Symbol(null,\"metabase.mbql.schema\",\"metabase.mbql.schema\",-408168902,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"doc\",\"doc\",1913296891),\"Schema for validating a *normalized* MBQL query. This is also the definitive grammar for MBQL, wow!\"], null)),new cljs.core.Symbol(null,\"Filter*\",\"Filter*\",-1193205185,null),\"metabase/mbql/schema.cljc\",23,1,892,892,cljs.core.List.EMPTY,null,(cljs.core.truth_(metabase.mbql.schema.Filter_STAR_)?metabase.mbql.schema.Filter_STAR_.cljs$lang$test:null)])));\nmetabase.mbql.schema.CaseClause = new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [schema.core.one(metabase.mbql.schema.Filter,\"pred\"),schema.core.one(metabase.mbql.schema.ExpressionArg,\"expr\")], null);\nmetabase.mbql.schema.CaseClauses = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [metabase.mbql.schema.CaseClause], null);\nmetabase.mbql.schema.CaseOptions = cljs.core.PersistentArrayMap.createAsIfByAssoc([schema.core.optional_key(new cljs.core.Keyword(null,\"default\",\"default\",-1987822328)),metabase.mbql.schema.ExpressionArg]);\n/**\n * Schema for a valid case clause.\n */\nmetabase.mbql.schema.case$ = metabase.mbql.schema.helpers.clause.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,\"case\",\"case\",1143702196),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([\"clauses\",metabase.mbql.schema.CaseClauses,\"options\",new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"optional\",\"optional\",2053951509),metabase.mbql.schema.CaseOptions], null)], 0));\nmetabase.mbql.schema.NumericExpression_STAR_ = metabase.mbql.schema.helpers.one_of_STAR_.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var or__5045__auto__ = new cljs.core.Keyword(null,\"clause-name\",\"clause-name\",-996419059).cljs$core$IFn$_invoke$arity$1(cljs.core.meta((((typeof metabase !== 'undefined') && (typeof metabase.mbql !== 'undefined') && (typeof metabase.mbql.schema !== 'undefined') && (typeof metabase.mbql.schema._PLUS_ !== 'undefined'))?(new cljs.core.Var((function (){\nreturn metabase.mbql.schema._PLUS_;\n}),cljs.core.with_meta(new cljs.core.Symbol(\"metabase.mbql.schema\",\"+\",\"metabase.mbql.schema/+\",-1802115711,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(\"cljs.analyzer\",\"no-resolve\",\"cljs.analyzer/no-resolve\",-1872351017),true], null)),cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null,\"requires-features\",\"requires-features\",-101116256),new cljs.core.Keyword(null,\"ns\",\"ns\",441598760),new cljs.core.Keyword(null,\"name\",\"name\",1843675177),new cljs.core.Keyword(null,\"file\",\"file\",-1269645878),new cljs.core.Keyword(null,\"end-column\",\"end-column\",1425389514),new cljs.core.Keyword(null,\"clause-name\",\"clause-name\",-996419059),new cljs.core.Keyword(null,\"column\",\"column\",2078222095),new cljs.core.Keyword(null,\"line\",\"line\",212345235),new cljs.core.Keyword(null,\"end-line\",\"end-line\",1837326455),new cljs.core.Keyword(null,\"clause-form\",\"clause-form\",1820463737),new cljs.core.Keyword(null,\"arglists\",\"arglists\",1661989754),new cljs.core.Keyword(null,\"doc\",\"doc\",1913296891),new cljs.core.Keyword(null,\"test\",\"test\",577538877)],[new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"expressions\",\"expressions\",255689909),\"null\"], null), null),cljs.core.with_meta(new cljs.core.Symbol(null,\"metabase.mbql.schema\",\"metabase.mbql.schema\",-408168902,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"doc\",\"doc\",1913296891),\"Schema for validating a *normalized* MBQL query. This is also the definitive grammar for MBQL, wow!\"], null)),new cljs.core.Symbol(null,\"+\",\"+\",-740910886,null),\"metabase/mbql/schema.cljc\",51,new cljs.core.Keyword(null,\"+\",\"+\",1913524883),1,630,630,new cljs.core.PersistentVector(null, 7, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"+\",\"+\",1913524883),new cljs.core.Keyword(null,\"x\",\"x\",2099068185),cljs.core.list(new cljs.core.Symbol(null,\"quote\",\"quote\",1377916282,null),new cljs.core.Symbol(null,\"NumericExpressionArgOrInterval\",\"NumericExpressionArgOrInterval\",-151709337,null)),new cljs.core.Keyword(null,\"y\",\"y\",-1757859776),cljs.core.list(new cljs.core.Symbol(null,\"quote\",\"quote\",1377916282,null),new cljs.core.Symbol(null,\"NumericExpressionArgOrInterval\",\"NumericExpressionArgOrInterval\",-151709337,null)),new cljs.core.Keyword(null,\"more\",\"more\",-2058821800),cljs.core.list(new cljs.core.Symbol(null,\"quote\",\"quote\",1377916282,null),cljs.core.list(new cljs.core.Symbol(null,\"rest\",\"rest\",398835108,null),new cljs.core.Symbol(null,\"NumericExpressionArgOrInterval\",\"NumericExpressionArgOrInterval\",-151709337,null)))], null),cljs.core.List.EMPTY,\"Schema for a valid + clause.\",(cljs.core.truth_(metabase.mbql.schema._PLUS_)?metabase.mbql.schema._PLUS_.cljs$lang$test:null)]))):null)));\nif(cljs.core.truth_(or__5045__auto__)){\nreturn or__5045__auto__;\n} else {\nreturn new cljs.core.Symbol(null,\"+\",\"+\",-740910886,null);\n}\n})(),metabase.mbql.schema._PLUS_], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var or__5045__auto__ = new cljs.core.Keyword(null,\"clause-name\",\"clause-name\",-996419059).cljs$core$IFn$_invoke$arity$1(cljs.core.meta((((typeof metabase !== 'undefined') && (typeof metabase.mbql !== 'undefined') && (typeof metabase.mbql.schema !== 'undefined') && (typeof metabase.mbql.schema._ !== 'undefined'))?(new cljs.core.Var((function (){\nreturn metabase.mbql.schema._;\n}),cljs.core.with_meta(new cljs.core.Symbol(\"metabase.mbql.schema\",\"-\",\"metabase.mbql.schema/-\",-1440604423,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(\"cljs.analyzer\",\"no-resolve\",\"cljs.analyzer/no-resolve\",-1872351017),true], null)),cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null,\"requires-features\",\"requires-features\",-101116256),new cljs.core.Keyword(null,\"ns\",\"ns\",441598760),new cljs.core.Keyword(null,\"name\",\"name\",1843675177),new cljs.core.Keyword(null,\"file\",\"file\",-1269645878),new cljs.core.Keyword(null,\"end-column\",\"end-column\",1425389514),new cljs.core.Keyword(null,\"clause-name\",\"clause-name\",-996419059),new cljs.core.Keyword(null,\"column\",\"column\",2078222095),new cljs.core.Keyword(null,\"line\",\"line\",212345235),new cljs.core.Keyword(null,\"end-line\",\"end-line\",1837326455),new cljs.core.Keyword(null,\"clause-form\",\"clause-form\",1820463737),new cljs.core.Keyword(null,\"arglists\",\"arglists\",1661989754),new cljs.core.Keyword(null,\"doc\",\"doc\",1913296891),new cljs.core.Keyword(null,\"test\",\"test\",577538877)],[new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"expressions\",\"expressions\",255689909),\"null\"], null), null),cljs.core.with_meta(new cljs.core.Symbol(null,\"metabase.mbql.schema\",\"metabase.mbql.schema\",-408168902,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"doc\",\"doc\",1913296891),\"Schema for validating a *normalized* MBQL query. This is also the definitive grammar for MBQL, wow!\"], null)),new cljs.core.Symbol(null,\"-\",\"-\",-471816912,null),\"metabase/mbql/schema.cljc\",51,new cljs.core.Keyword(null,\"-\",\"-\",-2112348439),1,633,633,new cljs.core.PersistentVector(null, 7, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"-\",\"-\",-2112348439),new cljs.core.Keyword(null,\"x\",\"x\",2099068185),cljs.core.list(new cljs.core.Symbol(null,\"quote\",\"quote\",1377916282,null),new cljs.core.Symbol(null,\"NumericExpressionArg\",\"NumericExpressionArg\",-1537445195,null)),new cljs.core.Keyword(null,\"y\",\"y\",-1757859776),cljs.core.list(new cljs.core.Symbol(null,\"quote\",\"quote\",1377916282,null),new cljs.core.Symbol(null,\"NumericExpressionArgOrInterval\",\"NumericExpressionArgOrInterval\",-151709337,null)),new cljs.core.Keyword(null,\"more\",\"more\",-2058821800),cljs.core.list(new cljs.core.Symbol(null,\"quote\",\"quote\",1377916282,null),cljs.core.list(new cljs.core.Symbol(null,\"rest\",\"rest\",398835108,null),new cljs.core.Symbol(null,\"NumericExpressionArgOrInterval\",\"NumericExpressionArgOrInterval\",-151709337,null)))], null),cljs.core.List.EMPTY,\"Schema for a valid - clause.\",(cljs.core.truth_(metabase.mbql.schema._)?metabase.mbql.schema._.cljs$lang$test:null)]))):null)));\nif(cljs.core.truth_(or__5045__auto__)){\nreturn or__5045__auto__;\n} else {\nreturn new cljs.core.Symbol(null,\"-\",\"-\",-471816912,null);\n}\n})(),metabase.mbql.schema._], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var or__5045__auto__ = new cljs.core.Keyword(null,\"clause-name\",\"clause-name\",-996419059).cljs$core$IFn$_invoke$arity$1(cljs.core.meta((((typeof metabase !== 'undefined') && (typeof metabase.mbql !== 'undefined') && (typeof metabase.mbql.schema !== 'undefined'))?(new cljs.core.Var((function (){\nreturn metabase.mbql.schema._SLASH_;\n}),cljs.core.with_meta(new cljs.core.Symbol(\"metabase.mbql.schema\",\"/\",\"metabase.mbql.schema//\",2004134796,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(\"cljs.analyzer\",\"no-resolve\",\"cljs.analyzer/no-resolve\",-1872351017),true], null)),cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null,\"requires-features\",\"requires-features\",-101116256),new cljs.core.Keyword(null,\"ns\",\"ns\",441598760),new cljs.core.Keyword(null,\"name\",\"name\",1843675177),new cljs.core.Keyword(null,\"file\",\"file\",-1269645878),new cljs.core.Keyword(null,\"clause-name\",\"clause-name\",-996419059),new cljs.core.Keyword(null,\"column\",\"column\",2078222095),new cljs.core.Keyword(null,\"line\",\"line\",212345235),new cljs.core.Keyword(null,\"clause-form\",\"clause-form\",1820463737),new cljs.core.Keyword(null,\"arglists\",\"arglists\",1661989754),new cljs.core.Keyword(null,\"doc\",\"doc\",1913296891),new cljs.core.Keyword(null,\"test\",\"test\",577538877)],[new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"expressions\",\"expressions\",255689909),\"null\"], null), null),cljs.core.with_meta(new cljs.core.Symbol(null,\"metabase.mbql.schema\",\"metabase.mbql.schema\",-408168902,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"doc\",\"doc\",1913296891),\"Schema for validating a *normalized* MBQL query. This is also the definitive grammar for MBQL, wow!\"], null)),new cljs.core.Symbol(null,\"/\",\"/\",-1371932971,null),\"metabase/mbql/schema.cljc\",new cljs.core.Keyword(null,\"/\",\"/\",1282502798),1,636,new cljs.core.PersistentVector(null, 7, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"/\",\"/\",1282502798),new cljs.core.Keyword(null,\"x\",\"x\",2099068185),cljs.core.list(new cljs.core.Symbol(null,\"quote\",\"quote\",1377916282,null),new cljs.core.Symbol(null,\"NumericExpressionArg\",\"NumericExpressionArg\",-1537445195,null)),new cljs.core.Keyword(null,\"y\",\"y\",-1757859776),cljs.core.list(new cljs.core.Symbol(null,\"quote\",\"quote\",1377916282,null),new cljs.core.Symbol(null,\"NumericExpressionArg\",\"NumericExpressionArg\",-1537445195,null)),new cljs.core.Keyword(null,\"more\",\"more\",-2058821800),cljs.core.list(new cljs.core.Symbol(null,\"quote\",\"quote\",1377916282,null),cljs.core.list(new cljs.core.Symbol(null,\"rest\",\"rest\",398835108,null),new cljs.core.Symbol(null,\"NumericExpressionArg\",\"NumericExpressionArg\",-1537445195,null)))], null),cljs.core.List.EMPTY,\"Schema for a valid / clause.\",(cljs.core.truth_(metabase.mbql.schema._SLASH_)?metabase.mbql.schema._SLASH_.cljs$lang$test:null)]))):null)));\nif(cljs.core.truth_(or__5045__auto__)){\nreturn or__5045__auto__;\n} else {\nreturn new cljs.core.Symbol(null,\"/\",\"/\",-1371932971,null);\n}\n})(),metabase.mbql.schema._SLASH_], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var or__5045__auto__ = new cljs.core.Keyword(null,\"clause-name\",\"clause-name\",-996419059).cljs$core$IFn$_invoke$arity$1(cljs.core.meta((((typeof metabase !== 'undefined') && (typeof metabase.mbql !== 'undefined') && (typeof metabase.mbql.schema !== 'undefined') && (typeof metabase.mbql.schema._STAR_ !== 'undefined'))?(new cljs.core.Var((function (){\nreturn metabase.mbql.schema._STAR_;\n}),cljs.core.with_meta(new cljs.core.Symbol(\"metabase.mbql.schema\",\"*\",\"metabase.mbql.schema/*\",1842546528,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(\"cljs.analyzer\",\"no-resolve\",\"cljs.analyzer/no-resolve\",-1872351017),true], null)),cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null,\"requires-features\",\"requires-features\",-101116256),new cljs.core.Keyword(null,\"ns\",\"ns\",441598760),new cljs.core.Keyword(null,\"name\",\"name\",1843675177),new cljs.core.Keyword(null,\"file\",\"file\",-1269645878),new cljs.core.Keyword(null,\"end-column\",\"end-column\",1425389514),new cljs.core.Keyword(null,\"clause-name\",\"clause-name\",-996419059),new cljs.core.Keyword(null,\"column\",\"column\",2078222095),new cljs.core.Keyword(null,\"line\",\"line\",212345235),new cljs.core.Keyword(null,\"end-line\",\"end-line\",1837326455),new cljs.core.Keyword(null,\"clause-form\",\"clause-form\",1820463737),new cljs.core.Keyword(null,\"arglists\",\"arglists\",1661989754),new cljs.core.Keyword(null,\"doc\",\"doc\",1913296891),new cljs.core.Keyword(null,\"test\",\"test\",577538877)],[new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"expressions\",\"expressions\",255689909),\"null\"], null), null),cljs.core.with_meta(new cljs.core.Symbol(null,\"metabase.mbql.schema\",\"metabase.mbql.schema\",-408168902,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"doc\",\"doc\",1913296891),\"Schema for validating a *normalized* MBQL query. This is also the definitive grammar for MBQL, wow!\"], null)),new cljs.core.Symbol(null,\"*\",\"*\",345799209,null),\"metabase/mbql/schema.cljc\",51,new cljs.core.Keyword(null,\"*\",\"*\",-1294732318),1,638,638,new cljs.core.PersistentVector(null, 7, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"*\",\"*\",-1294732318),new cljs.core.Keyword(null,\"x\",\"x\",2099068185),cljs.core.list(new cljs.core.Symbol(null,\"quote\",\"quote\",1377916282,null),new cljs.core.Symbol(null,\"NumericExpressionArg\",\"NumericExpressionArg\",-1537445195,null)),new cljs.core.Keyword(null,\"y\",\"y\",-1757859776),cljs.core.list(new cljs.core.Symbol(null,\"quote\",\"quote\",1377916282,null),new cljs.core.Symbol(null,\"NumericExpressionArg\",\"NumericExpressionArg\",-1537445195,null)),new cljs.core.Keyword(null,\"more\",\"more\",-2058821800),cljs.core.list(new cljs.core.Symbol(null,\"quote\",\"quote\",1377916282,null),cljs.core.list(new cljs.core.Symbol(null,\"rest\",\"rest\",398835108,null),new cljs.core.Symbol(null,\"NumericExpressionArg\",\"NumericExpressionArg\",-1537445195,null)))], null),cljs.core.List.EMPTY,\"Schema for a valid * clause.\",(cljs.core.truth_(metabase.mbql.schema._STAR_)?metabase.mbql.schema._STAR_.cljs$lang$test:null)]))):null)));\nif(cljs.core.truth_(or__5045__auto__)){\nreturn or__5045__auto__;\n} else {\nreturn new cljs.core.Symbol(null,\"*\",\"*\",345799209,null);\n}\n})(),metabase.mbql.schema._STAR_], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var or__5045__auto__ = new cljs.core.Keyword(null,\"clause-name\",\"clause-name\",-996419059).cljs$core$IFn$_invoke$arity$1(cljs.core.meta((((typeof metabase !== 'undefined') && (typeof metabase.mbql !== 'undefined') && (typeof metabase.mbql.schema !== 'undefined') && (typeof metabase.mbql.schema.coalesce !== 'undefined'))?(new cljs.core.Var((function (){\nreturn metabase.mbql.schema.coalesce;\n}),cljs.core.with_meta(new cljs.core.Symbol(\"metabase.mbql.schema\",\"coalesce\",\"metabase.mbql.schema/coalesce\",-1048570669,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(\"cljs.analyzer\",\"no-resolve\",\"cljs.analyzer/no-resolve\",-1872351017),true], null)),cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null,\"requires-features\",\"requires-features\",-101116256),new cljs.core.Keyword(null,\"ns\",\"ns\",441598760),new cljs.core.Keyword(null,\"name\",\"name\",1843675177),new cljs.core.Keyword(null,\"file\",\"file\",-1269645878),new cljs.core.Keyword(null,\"end-column\",\"end-column\",1425389514),new cljs.core.Keyword(null,\"clause-name\",\"clause-name\",-996419059),new cljs.core.Keyword(null,\"column\",\"column\",2078222095),new cljs.core.Keyword(null,\"line\",\"line\",212345235),new cljs.core.Keyword(null,\"end-line\",\"end-line\",1837326455),new cljs.core.Keyword(null,\"clause-form\",\"clause-form\",1820463737),new cljs.core.Keyword(null,\"arglists\",\"arglists\",1661989754),new cljs.core.Keyword(null,\"doc\",\"doc\",1913296891),new cljs.core.Keyword(null,\"test\",\"test\",577538877)],[new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"expressions\",\"expressions\",255689909),\"null\"], null), null),cljs.core.with_meta(new cljs.core.Symbol(null,\"metabase.mbql.schema\",\"metabase.mbql.schema\",-408168902,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"doc\",\"doc\",1913296891),\"Schema for validating a *normalized* MBQL query. This is also the definitive grammar for MBQL, wow!\"], null)),new cljs.core.Symbol(null,\"coalesce\",\"coalesce\",-1999813740,null),\"metabase/mbql/schema.cljc\",58,new cljs.core.Keyword(null,\"coalesce\",\"coalesce\",654622029),1,597,597,new cljs.core.PersistentVector(null, 7, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"coalesce\",\"coalesce\",654622029),new cljs.core.Keyword(null,\"a\",\"a\",-2123407586),cljs.core.list(new cljs.core.Symbol(null,\"quote\",\"quote\",1377916282,null),new cljs.core.Symbol(null,\"ExpressionArg\",\"ExpressionArg\",1060743736,null)),new cljs.core.Keyword(null,\"b\",\"b\",1482224470),cljs.core.list(new cljs.core.Symbol(null,\"quote\",\"quote\",1377916282,null),new cljs.core.Symbol(null,\"ExpressionArg\",\"ExpressionArg\",1060743736,null)),new cljs.core.Keyword(null,\"more\",\"more\",-2058821800),cljs.core.list(new cljs.core.Symbol(null,\"quote\",\"quote\",1377916282,null),cljs.core.list(new cljs.core.Symbol(null,\"rest\",\"rest\",398835108,null),new cljs.core.Symbol(null,\"ExpressionArg\",\"ExpressionArg\",1060743736,null)))], null),cljs.core.List.EMPTY,\"Schema for a valid coalesce clause.\",(cljs.core.truth_(metabase.mbql.schema.coalesce)?metabase.mbql.schema.coalesce.cljs$lang$test:null)]))):null)));\nif(cljs.core.truth_(or__5045__auto__)){\nreturn or__5045__auto__;\n} else {\nreturn new cljs.core.Symbol(null,\"coalesce\",\"coalesce\",-1999813740,null);\n}\n})(),metabase.mbql.schema.coalesce], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var or__5045__auto__ = new cljs.core.Keyword(null,\"clause-name\",\"clause-name\",-996419059).cljs$core$IFn$_invoke$arity$1(cljs.core.meta((((typeof metabase !== 'undefined') && (typeof metabase.mbql !== 'undefined') && (typeof metabase.mbql.schema !== 'undefined') && (typeof metabase.mbql.schema.length !== 'undefined'))?(new cljs.core.Var((function (){\nreturn metabase.mbql.schema.length;\n}),cljs.core.with_meta(new cljs.core.Symbol(\"metabase.mbql.schema\",\"length\",\"metabase.mbql.schema/length\",-844221500,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(\"cljs.analyzer\",\"no-resolve\",\"cljs.analyzer/no-resolve\",-1872351017),true], null)),cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null,\"requires-features\",\"requires-features\",-101116256),new cljs.core.Keyword(null,\"ns\",\"ns\",441598760),new cljs.core.Keyword(null,\"name\",\"name\",1843675177),new cljs.core.Keyword(null,\"file\",\"file\",-1269645878),new cljs.core.Keyword(null,\"end-column\",\"end-column\",1425389514),new cljs.core.Keyword(null,\"clause-name\",\"clause-name\",-996419059),new cljs.core.Keyword(null,\"column\",\"column\",2078222095),new cljs.core.Keyword(null,\"line\",\"line\",212345235),new cljs.core.Keyword(null,\"end-line\",\"end-line\",1837326455),new cljs.core.Keyword(null,\"clause-form\",\"clause-form\",1820463737),new cljs.core.Keyword(null,\"arglists\",\"arglists\",1661989754),new cljs.core.Keyword(null,\"doc\",\"doc\",1913296891),new cljs.core.Keyword(null,\"test\",\"test\",577538877)],[new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"expressions\",\"expressions\",255689909),\"null\"], null), null),cljs.core.with_meta(new cljs.core.Symbol(null,\"metabase.mbql.schema\",\"metabase.mbql.schema\",-408168902,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"doc\",\"doc\",1913296891),\"Schema for validating a *normalized* MBQL query. This is also the definitive grammar for MBQL, wow!\"], null)),new cljs.core.Symbol(null,\"length\",\"length\",-2065447907,null),\"metabase/mbql/schema.cljc\",56,new cljs.core.Keyword(null,\"length\",\"length\",588987862),1,603,603,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"length\",\"length\",588987862),new cljs.core.Keyword(null,\"s\",\"s\",1705939918),cljs.core.list(new cljs.core.Symbol(null,\"quote\",\"quote\",1377916282,null),new cljs.core.Symbol(null,\"StringExpressionArg\",\"StringExpressionArg\",-1131357258,null))], null),cljs.core.List.EMPTY,\"Schema for a valid length clause.\",(cljs.core.truth_(metabase.mbql.schema.length)?metabase.mbql.schema.length.cljs$lang$test:null)]))):null)));\nif(cljs.core.truth_(or__5045__auto__)){\nreturn or__5045__auto__;\n} else {\nreturn new cljs.core.Symbol(null,\"length\",\"length\",-2065447907,null);\n}\n})(),metabase.mbql.schema.length], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var or__5045__auto__ = new cljs.core.Keyword(null,\"clause-name\",\"clause-name\",-996419059).cljs$core$IFn$_invoke$arity$1(cljs.core.meta((((typeof metabase !== 'undefined') && (typeof metabase.mbql !== 'undefined') && (typeof metabase.mbql.schema !== 'undefined') && (typeof metabase.mbql.schema.floor !== 'undefined'))?(new cljs.core.Var((function (){\nreturn metabase.mbql.schema.floor;\n}),cljs.core.with_meta(new cljs.core.Symbol(\"metabase.mbql.schema\",\"floor\",\"metabase.mbql.schema/floor\",422926927,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(\"cljs.analyzer\",\"no-resolve\",\"cljs.analyzer/no-resolve\",-1872351017),true], null)),cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null,\"requires-features\",\"requires-features\",-101116256),new cljs.core.Keyword(null,\"ns\",\"ns\",441598760),new cljs.core.Keyword(null,\"name\",\"name\",1843675177),new cljs.core.Keyword(null,\"file\",\"file\",-1269645878),new cljs.core.Keyword(null,\"end-column\",\"end-column\",1425389514),new cljs.core.Keyword(null,\"clause-name\",\"clause-name\",-996419059),new cljs.core.Keyword(null,\"column\",\"column\",2078222095),new cljs.core.Keyword(null,\"line\",\"line\",212345235),new cljs.core.Keyword(null,\"end-line\",\"end-line\",1837326455),new cljs.core.Keyword(null,\"clause-form\",\"clause-form\",1820463737),new cljs.core.Keyword(null,\"arglists\",\"arglists\",1661989754),new cljs.core.Keyword(null,\"doc\",\"doc\",1913296891),new cljs.core.Keyword(null,\"test\",\"test\",577538877)],[new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"expressions\",\"expressions\",255689909),\"null\"], null), null),cljs.core.with_meta(new cljs.core.Symbol(null,\"metabase.mbql.schema\",\"metabase.mbql.schema\",-408168902,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"doc\",\"doc\",1913296891),\"Schema for validating a *normalized* MBQL query. This is also the definitive grammar for MBQL, wow!\"], null)),new cljs.core.Symbol(null,\"floor\",\"floor\",-772394748,null),\"metabase/mbql/schema.cljc\",55,new cljs.core.Keyword(null,\"floor\",\"floor\",1882041021),1,640,640,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"floor\",\"floor\",1882041021),new cljs.core.Keyword(null,\"x\",\"x\",2099068185),cljs.core.list(new cljs.core.Symbol(null,\"quote\",\"quote\",1377916282,null),new cljs.core.Symbol(null,\"NumericExpressionArg\",\"NumericExpressionArg\",-1537445195,null))], null),cljs.core.List.EMPTY,\"Schema for a valid floor clause.\",(cljs.core.truth_(metabase.mbql.schema.floor)?metabase.mbql.schema.floor.cljs$lang$test:null)]))):null)));\nif(cljs.core.truth_(or__5045__auto__)){\nreturn or__5045__auto__;\n} else {\nreturn new cljs.core.Symbol(null,\"floor\",\"floor\",-772394748,null);\n}\n})(),metabase.mbql.schema.floor], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var or__5045__auto__ = new cljs.core.Keyword(null,\"clause-name\",\"clause-name\",-996419059).cljs$core$IFn$_invoke$arity$1(cljs.core.meta((((typeof metabase !== 'undefined') && (typeof metabase.mbql !== 'undefined') && (typeof metabase.mbql.schema !== 'undefined') && (typeof metabase.mbql.schema.ceil !== 'undefined'))?(new cljs.core.Var((function (){\nreturn metabase.mbql.schema.ceil;\n}),cljs.core.with_meta(new cljs.core.Symbol(\"metabase.mbql.schema\",\"ceil\",\"metabase.mbql.schema/ceil\",-1404628626,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(\"cljs.analyzer\",\"no-resolve\",\"cljs.analyzer/no-resolve\",-1872351017),true], null)),cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null,\"requires-features\",\"requires-features\",-101116256),new cljs.core.Keyword(null,\"ns\",\"ns\",441598760),new cljs.core.Keyword(null,\"name\",\"name\",1843675177),new cljs.core.Keyword(null,\"file\",\"file\",-1269645878),new cljs.core.Keyword(null,\"end-column\",\"end-column\",1425389514),new cljs.core.Keyword(null,\"clause-name\",\"clause-name\",-996419059),new cljs.core.Keyword(null,\"column\",\"column\",2078222095),new cljs.core.Keyword(null,\"line\",\"line\",212345235),new cljs.core.Keyword(null,\"end-line\",\"end-line\",1837326455),new cljs.core.Keyword(null,\"clause-form\",\"clause-form\",1820463737),new cljs.core.Keyword(null,\"arglists\",\"arglists\",1661989754),new cljs.core.Keyword(null,\"doc\",\"doc\",1913296891),new cljs.core.Keyword(null,\"test\",\"test\",577538877)],[new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"expressions\",\"expressions\",255689909),\"null\"], null), null),cljs.core.with_meta(new cljs.core.Symbol(null,\"metabase.mbql.schema\",\"metabase.mbql.schema\",-408168902,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"doc\",\"doc\",1913296891),\"Schema for validating a *normalized* MBQL query. This is also the definitive grammar for MBQL, wow!\"], null)),new cljs.core.Symbol(null,\"ceil\",\"ceil\",-184398425,null),\"metabase/mbql/schema.cljc\",54,new cljs.core.Keyword(null,\"ceil\",\"ceil\",-1824929952),1,643,643,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"ceil\",\"ceil\",-1824929952),new cljs.core.Keyword(null,\"x\",\"x\",2099068185),cljs.core.list(new cljs.core.Symbol(null,\"quote\",\"quote\",1377916282,null),new cljs.core.Symbol(null,\"NumericExpressionArg\",\"NumericExpressionArg\",-1537445195,null))], null),cljs.core.List.EMPTY,\"Schema for a valid ceil clause.\",(cljs.core.truth_(metabase.mbql.schema.ceil)?metabase.mbql.schema.ceil.cljs$lang$test:null)]))):null)));\nif(cljs.core.truth_(or__5045__auto__)){\nreturn or__5045__auto__;\n} else {\nreturn new cljs.core.Symbol(null,\"ceil\",\"ceil\",-184398425,null);\n}\n})(),metabase.mbql.schema.ceil], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var or__5045__auto__ = new cljs.core.Keyword(null,\"clause-name\",\"clause-name\",-996419059).cljs$core$IFn$_invoke$arity$1(cljs.core.meta((((typeof metabase !== 'undefined') && (typeof metabase.mbql !== 'undefined') && (typeof metabase.mbql.schema !== 'undefined') && (typeof metabase.mbql.schema.round !== 'undefined'))?(new cljs.core.Var((function (){\nreturn metabase.mbql.schema.round;\n}),cljs.core.with_meta(new cljs.core.Symbol(\"metabase.mbql.schema\",\"round\",\"metabase.mbql.schema/round\",314817788,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(\"cljs.analyzer\",\"no-resolve\",\"cljs.analyzer/no-resolve\",-1872351017),true], null)),cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null,\"requires-features\",\"requires-features\",-101116256),new cljs.core.Keyword(null,\"ns\",\"ns\",441598760),new cljs.core.Keyword(null,\"name\",\"name\",1843675177),new cljs.core.Keyword(null,\"file\",\"file\",-1269645878),new cljs.core.Keyword(null,\"end-column\",\"end-column\",1425389514),new cljs.core.Keyword(null,\"clause-name\",\"clause-name\",-996419059),new cljs.core.Keyword(null,\"column\",\"column\",2078222095),new cljs.core.Keyword(null,\"line\",\"line\",212345235),new cljs.core.Keyword(null,\"end-line\",\"end-line\",1837326455),new cljs.core.Keyword(null,\"clause-form\",\"clause-form\",1820463737),new cljs.core.Keyword(null,\"arglists\",\"arglists\",1661989754),new cljs.core.Keyword(null,\"doc\",\"doc\",1913296891),new cljs.core.Keyword(null,\"test\",\"test\",577538877)],[new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"expressions\",\"expressions\",255689909),\"null\"], null), null),cljs.core.with_meta(new cljs.core.Symbol(null,\"metabase.mbql.schema\",\"metabase.mbql.schema\",-408168902,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"doc\",\"doc\",1913296891),\"Schema for validating a *normalized* MBQL query. This is also the definitive grammar for MBQL, wow!\"], null)),new cljs.core.Symbol(null,\"round\",\"round\",-645002441,null),\"metabase/mbql/schema.cljc\",55,new cljs.core.Keyword(null,\"round\",\"round\",2009433328),1,646,646,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"round\",\"round\",2009433328),new cljs.core.Keyword(null,\"x\",\"x\",2099068185),cljs.core.list(new cljs.core.Symbol(null,\"quote\",\"quote\",1377916282,null),new cljs.core.Symbol(null,\"NumericExpressionArg\",\"NumericExpressionArg\",-1537445195,null))], null),cljs.core.List.EMPTY,\"Schema for a valid round clause.\",(cljs.core.truth_(metabase.mbql.schema.round)?metabase.mbql.schema.round.cljs$lang$test:null)]))):null)));\nif(cljs.core.truth_(or__5045__auto__)){\nreturn or__5045__auto__;\n} else {\nreturn new cljs.core.Symbol(null,\"round\",\"round\",-645002441,null);\n}\n})(),metabase.mbql.schema.round], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var or__5045__auto__ = new cljs.core.Keyword(null,\"clause-name\",\"clause-name\",-996419059).cljs$core$IFn$_invoke$arity$1(cljs.core.meta((((typeof metabase !== 'undefined') && (typeof metabase.mbql !== 'undefined') && (typeof metabase.mbql.schema !== 'undefined') && (typeof metabase.mbql.schema.abs !== 'undefined'))?(new cljs.core.Var((function (){\nreturn metabase.mbql.schema.abs;\n}),cljs.core.with_meta(new cljs.core.Symbol(\"metabase.mbql.schema\",\"abs\",\"metabase.mbql.schema/abs\",1792880149,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(\"cljs.analyzer\",\"no-resolve\",\"cljs.analyzer/no-resolve\",-1872351017),true], null)),cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null,\"requires-features\",\"requires-features\",-101116256),new cljs.core.Keyword(null,\"ns\",\"ns\",441598760),new cljs.core.Keyword(null,\"name\",\"name\",1843675177),new cljs.core.Keyword(null,\"file\",\"file\",-1269645878),new cljs.core.Keyword(null,\"end-column\",\"end-column\",1425389514),new cljs.core.Keyword(null,\"clause-name\",\"clause-name\",-996419059),new cljs.core.Keyword(null,\"column\",\"column\",2078222095),new cljs.core.Keyword(null,\"line\",\"line\",212345235),new cljs.core.Keyword(null,\"end-line\",\"end-line\",1837326455),new cljs.core.Keyword(null,\"clause-form\",\"clause-form\",1820463737),new cljs.core.Keyword(null,\"arglists\",\"arglists\",1661989754),new cljs.core.Keyword(null,\"doc\",\"doc\",1913296891),new cljs.core.Keyword(null,\"test\",\"test\",577538877)],[new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"expressions\",\"expressions\",255689909),\"null\"], null), null),cljs.core.with_meta(new cljs.core.Symbol(null,\"metabase.mbql.schema\",\"metabase.mbql.schema\",-408168902,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"doc\",\"doc\",1913296891),\"Schema for validating a *normalized* MBQL query. This is also the definitive grammar for MBQL, wow!\"], null)),new cljs.core.Symbol(null,\"abs\",\"abs\",1394505050,null),\"metabase/mbql/schema.cljc\",53,new cljs.core.Keyword(null,\"abs\",\"abs\",-246026477),1,649,649,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"abs\",\"abs\",-246026477),new cljs.core.Keyword(null,\"x\",\"x\",2099068185),cljs.core.list(new cljs.core.Symbol(null,\"quote\",\"quote\",1377916282,null),new cljs.core.Symbol(null,\"NumericExpressionArg\",\"NumericExpressionArg\",-1537445195,null))], null),cljs.core.List.EMPTY,\"Schema for a valid abs clause.\",(cljs.core.truth_(metabase.mbql.schema.abs)?metabase.mbql.schema.abs.cljs$lang$test:null)]))):null)));\nif(cljs.core.truth_(or__5045__auto__)){\nreturn or__5045__auto__;\n} else {\nreturn new cljs.core.Symbol(null,\"abs\",\"abs\",1394505050,null);\n}\n})(),metabase.mbql.schema.abs], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var or__5045__auto__ = new cljs.core.Keyword(null,\"clause-name\",\"clause-name\",-996419059).cljs$core$IFn$_invoke$arity$1(cljs.core.meta((((typeof metabase !== 'undefined') && (typeof metabase.mbql !== 'undefined') && (typeof metabase.mbql.schema !== 'undefined') && (typeof metabase.mbql.schema.power !== 'undefined'))?(new cljs.core.Var((function (){\nreturn metabase.mbql.schema.power;\n}),cljs.core.with_meta(new cljs.core.Symbol(\"metabase.mbql.schema\",\"power\",\"metabase.mbql.schema/power\",-517905321,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(\"cljs.analyzer\",\"no-resolve\",\"cljs.analyzer/no-resolve\",-1872351017),true], null)),cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null,\"requires-features\",\"requires-features\",-101116256),new cljs.core.Keyword(null,\"ns\",\"ns\",441598760),new cljs.core.Keyword(null,\"name\",\"name\",1843675177),new cljs.core.Keyword(null,\"file\",\"file\",-1269645878),new cljs.core.Keyword(null,\"end-column\",\"end-column\",1425389514),new cljs.core.Keyword(null,\"clause-name\",\"clause-name\",-996419059),new cljs.core.Keyword(null,\"column\",\"column\",2078222095),new cljs.core.Keyword(null,\"line\",\"line\",212345235),new cljs.core.Keyword(null,\"end-line\",\"end-line\",1837326455),new cljs.core.Keyword(null,\"clause-form\",\"clause-form\",1820463737),new cljs.core.Keyword(null,\"arglists\",\"arglists\",1661989754),new cljs.core.Keyword(null,\"doc\",\"doc\",1913296891),new cljs.core.Keyword(null,\"test\",\"test\",577538877)],[new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"advanced-math-expressions\",\"advanced-math-expressions\",1076581757),\"null\"], null), null),cljs.core.with_meta(new cljs.core.Symbol(null,\"metabase.mbql.schema\",\"metabase.mbql.schema\",-408168902,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"doc\",\"doc\",1913296891),\"Schema for validating a *normalized* MBQL query. This is also the definitive grammar for MBQL, wow!\"], null)),new cljs.core.Symbol(null,\"power\",\"power\",702679448,null),\"metabase/mbql/schema.cljc\",69,new cljs.core.Keyword(null,\"power\",\"power\",-937852079),1,652,652,new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"power\",\"power\",-937852079),new cljs.core.Keyword(null,\"x\",\"x\",2099068185),cljs.core.list(new cljs.core.Symbol(null,\"quote\",\"quote\",1377916282,null),new cljs.core.Symbol(null,\"NumericExpressionArg\",\"NumericExpressionArg\",-1537445195,null)),new cljs.core.Keyword(null,\"y\",\"y\",-1757859776),cljs.core.list(new cljs.core.Symbol(null,\"quote\",\"quote\",1377916282,null),new cljs.core.Symbol(null,\"NumericExpressionArg\",\"NumericExpressionArg\",-1537445195,null))], null),cljs.core.List.EMPTY,\"Schema for a valid power clause.\",(cljs.core.truth_(metabase.mbql.schema.power)?metabase.mbql.schema.power.cljs$lang$test:null)]))):null)));\nif(cljs.core.truth_(or__5045__auto__)){\nreturn or__5045__auto__;\n} else {\nreturn new cljs.core.Symbol(null,\"power\",\"power\",702679448,null);\n}\n})(),metabase.mbql.schema.power], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var or__5045__auto__ = new cljs.core.Keyword(null,\"clause-name\",\"clause-name\",-996419059).cljs$core$IFn$_invoke$arity$1(cljs.core.meta((((typeof metabase !== 'undefined') && (typeof metabase.mbql !== 'undefined') && (typeof metabase.mbql.schema !== 'undefined') && (typeof metabase.mbql.schema.sqrt !== 'undefined'))?(new cljs.core.Var((function (){\nreturn metabase.mbql.schema.sqrt;\n}),cljs.core.with_meta(new cljs.core.Symbol(\"metabase.mbql.schema\",\"sqrt\",\"metabase.mbql.schema/sqrt\",-824662873,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(\"cljs.analyzer\",\"no-resolve\",\"cljs.analyzer/no-resolve\",-1872351017),true], null)),cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null,\"requires-features\",\"requires-features\",-101116256),new cljs.core.Keyword(null,\"ns\",\"ns\",441598760),new cljs.core.Keyword(null,\"name\",\"name\",1843675177),new cljs.core.Keyword(null,\"file\",\"file\",-1269645878),new cljs.core.Keyword(null,\"end-column\",\"end-column\",1425389514),new cljs.core.Keyword(null,\"clause-name\",\"clause-name\",-996419059),new cljs.core.Keyword(null,\"column\",\"column\",2078222095),new cljs.core.Keyword(null,\"line\",\"line\",212345235),new cljs.core.Keyword(null,\"end-line\",\"end-line\",1837326455),new cljs.core.Keyword(null,\"clause-form\",\"clause-form\",1820463737),new cljs.core.Keyword(null,\"arglists\",\"arglists\",1661989754),new cljs.core.Keyword(null,\"doc\",\"doc\",1913296891),new cljs.core.Keyword(null,\"test\",\"test\",577538877)],[new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"advanced-math-expressions\",\"advanced-math-expressions\",1076581757),\"null\"], null), null),cljs.core.with_meta(new cljs.core.Symbol(null,\"metabase.mbql.schema\",\"metabase.mbql.schema\",-408168902,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"doc\",\"doc\",1913296891),\"Schema for validating a *normalized* MBQL query. This is also the definitive grammar for MBQL, wow!\"], null)),new cljs.core.Symbol(null,\"sqrt\",\"sqrt\",370479598,null),\"metabase/mbql/schema.cljc\",68,new cljs.core.Keyword(null,\"sqrt\",\"sqrt\",-1270051929),1,655,655,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"sqrt\",\"sqrt\",-1270051929),new cljs.core.Keyword(null,\"x\",\"x\",2099068185),cljs.core.list(new cljs.core.Symbol(null,\"quote\",\"quote\",1377916282,null),new cljs.core.Symbol(null,\"NumericExpressionArg\",\"NumericExpressionArg\",-1537445195,null))], null),cljs.core.List.EMPTY,\"Schema for a valid sqrt clause.\",(cljs.core.truth_(metabase.mbql.schema.sqrt)?metabase.mbql.schema.sqrt.cljs$lang$test:null)]))):null)));\nif(cljs.core.truth_(or__5045__auto__)){\nreturn or__5045__auto__;\n} else {\nreturn new cljs.core.Symbol(null,\"sqrt\",\"sqrt\",370479598,null);\n}\n})(),metabase.mbql.schema.sqrt], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var or__5045__auto__ = new cljs.core.Keyword(null,\"clause-name\",\"clause-name\",-996419059).cljs$core$IFn$_invoke$arity$1(cljs.core.meta((((typeof metabase !== 'undefined') && (typeof metabase.mbql !== 'undefined') && (typeof metabase.mbql.schema !== 'undefined') && (typeof metabase.mbql.schema.exp !== 'undefined'))?(new cljs.core.Var((function (){\nreturn metabase.mbql.schema.exp;\n}),cljs.core.with_meta(new cljs.core.Symbol(\"metabase.mbql.schema\",\"exp\",\"metabase.mbql.schema/exp\",451780488,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(\"cljs.analyzer\",\"no-resolve\",\"cljs.analyzer/no-resolve\",-1872351017),true], null)),cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null,\"requires-features\",\"requires-features\",-101116256),new cljs.core.Keyword(null,\"ns\",\"ns\",441598760),new cljs.core.Keyword(null,\"name\",\"name\",1843675177),new cljs.core.Keyword(null,\"file\",\"file\",-1269645878),new cljs.core.Keyword(null,\"end-column\",\"end-column\",1425389514),new cljs.core.Keyword(null,\"clause-name\",\"clause-name\",-996419059),new cljs.core.Keyword(null,\"column\",\"column\",2078222095),new cljs.core.Keyword(null,\"line\",\"line\",212345235),new cljs.core.Keyword(null,\"end-line\",\"end-line\",1837326455),new cljs.core.Keyword(null,\"clause-form\",\"clause-form\",1820463737),new cljs.core.Keyword(null,\"arglists\",\"arglists\",1661989754),new cljs.core.Keyword(null,\"doc\",\"doc\",1913296891),new cljs.core.Keyword(null,\"test\",\"test\",577538877)],[new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"advanced-math-expressions\",\"advanced-math-expressions\",1076581757),\"null\"], null), null),cljs.core.with_meta(new cljs.core.Symbol(null,\"metabase.mbql.schema\",\"metabase.mbql.schema\",-408168902,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"doc\",\"doc\",1913296891),\"Schema for validating a *normalized* MBQL query. This is also the definitive grammar for MBQL, wow!\"], null)),new cljs.core.Symbol(null,\"exp\",\"exp\",1378825265,null),\"metabase/mbql/schema.cljc\",67,new cljs.core.Keyword(null,\"exp\",\"exp\",-261706262),1,658,658,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"exp\",\"exp\",-261706262),new cljs.core.Keyword(null,\"x\",\"x\",2099068185),cljs.core.list(new cljs.core.Symbol(null,\"quote\",\"quote\",1377916282,null),new cljs.core.Symbol(null,\"NumericExpressionArg\",\"NumericExpressionArg\",-1537445195,null))], null),cljs.core.List.EMPTY,\"Schema for a valid exp clause.\",(cljs.core.truth_(metabase.mbql.schema.exp)?metabase.mbql.schema.exp.cljs$lang$test:null)]))):null)));\nif(cljs.core.truth_(or__5045__auto__)){\nreturn or__5045__auto__;\n} else {\nreturn new cljs.core.Symbol(null,\"exp\",\"exp\",1378825265,null);\n}\n})(),metabase.mbql.schema.exp], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var or__5045__auto__ = new cljs.core.Keyword(null,\"clause-name\",\"clause-name\",-996419059).cljs$core$IFn$_invoke$arity$1(cljs.core.meta((((typeof metabase !== 'undefined') && (typeof metabase.mbql !== 'undefined') && (typeof metabase.mbql.schema !== 'undefined') && (typeof metabase.mbql.schema.log !== 'undefined'))?(new cljs.core.Var((function (){\nreturn metabase.mbql.schema.log;\n}),cljs.core.with_meta(new cljs.core.Symbol(\"metabase.mbql.schema\",\"log\",\"metabase.mbql.schema/log\",-899459908,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(\"cljs.analyzer\",\"no-resolve\",\"cljs.analyzer/no-resolve\",-1872351017),true], null)),cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null,\"requires-features\",\"requires-features\",-101116256),new cljs.core.Keyword(null,\"ns\",\"ns\",441598760),new cljs.core.Keyword(null,\"name\",\"name\",1843675177),new cljs.core.Keyword(null,\"file\",\"file\",-1269645878),new cljs.core.Keyword(null,\"end-column\",\"end-column\",1425389514),new cljs.core.Keyword(null,\"clause-name\",\"clause-name\",-996419059),new cljs.core.Keyword(null,\"column\",\"column\",2078222095),new cljs.core.Keyword(null,\"line\",\"line\",212345235),new cljs.core.Keyword(null,\"end-line\",\"end-line\",1837326455),new cljs.core.Keyword(null,\"clause-form\",\"clause-form\",1820463737),new cljs.core.Keyword(null,\"arglists\",\"arglists\",1661989754),new cljs.core.Keyword(null,\"doc\",\"doc\",1913296891),new cljs.core.Keyword(null,\"test\",\"test\",577538877)],[new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"advanced-math-expressions\",\"advanced-math-expressions\",1076581757),\"null\"], null), null),cljs.core.with_meta(new cljs.core.Symbol(null,\"metabase.mbql.schema\",\"metabase.mbql.schema\",-408168902,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"doc\",\"doc\",1913296891),\"Schema for validating a *normalized* MBQL query. This is also the definitive grammar for MBQL, wow!\"], null)),new cljs.core.Symbol(null,\"log\",\"log\",45015523,null),\"metabase/mbql/schema.cljc\",67,new cljs.core.Keyword(null,\"log\",\"log\",-1595516004),1,661,661,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"log\",\"log\",-1595516004),new cljs.core.Keyword(null,\"x\",\"x\",2099068185),cljs.core.list(new cljs.core.Symbol(null,\"quote\",\"quote\",1377916282,null),new cljs.core.Symbol(null,\"NumericExpressionArg\",\"NumericExpressionArg\",-1537445195,null))], null),cljs.core.List.EMPTY,\"Schema for a valid log clause.\",(cljs.core.truth_(metabase.mbql.schema.log)?metabase.mbql.schema.log.cljs$lang$test:null)]))):null)));\nif(cljs.core.truth_(or__5045__auto__)){\nreturn or__5045__auto__;\n} else {\nreturn new cljs.core.Symbol(null,\"log\",\"log\",45015523,null);\n}\n})(),metabase.mbql.schema.log], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var or__5045__auto__ = new cljs.core.Keyword(null,\"clause-name\",\"clause-name\",-996419059).cljs$core$IFn$_invoke$arity$1(cljs.core.meta((((typeof metabase !== 'undefined') && (typeof metabase.mbql !== 'undefined') && (typeof metabase.mbql.schema !== 'undefined') && (typeof metabase.mbql.schema.case$ !== 'undefined'))?(new cljs.core.Var((function (){\nreturn metabase.mbql.schema.case$;\n}),cljs.core.with_meta(new cljs.core.Symbol(\"metabase.mbql.schema\",\"case\",\"metabase.mbql.schema/case\",2100482976,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(\"cljs.analyzer\",\"no-resolve\",\"cljs.analyzer/no-resolve\",-1872351017),true], null)),cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null,\"requires-features\",\"requires-features\",-101116256),new cljs.core.Keyword(null,\"ns\",\"ns\",441598760),new cljs.core.Keyword(null,\"name\",\"name\",1843675177),new cljs.core.Keyword(null,\"file\",\"file\",-1269645878),new cljs.core.Keyword(null,\"end-column\",\"end-column\",1425389514),new cljs.core.Keyword(null,\"clause-name\",\"clause-name\",-996419059),new cljs.core.Keyword(null,\"column\",\"column\",2078222095),new cljs.core.Keyword(null,\"line\",\"line\",212345235),new cljs.core.Keyword(null,\"end-line\",\"end-line\",1837326455),new cljs.core.Keyword(null,\"clause-form\",\"clause-form\",1820463737),new cljs.core.Keyword(null,\"arglists\",\"arglists\",1661989754),new cljs.core.Keyword(null,\"doc\",\"doc\",1913296891),new cljs.core.Keyword(null,\"test\",\"test\",577538877)],[new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"basic-aggregations\",\"basic-aggregations\",-1628959228),\"null\"], null), null),cljs.core.with_meta(new cljs.core.Symbol(null,\"metabase.mbql.schema\",\"metabase.mbql.schema\",-408168902,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"doc\",\"doc\",1913296891),\"Schema for validating a *normalized* MBQL query. This is also the definitive grammar for MBQL, wow!\"], null)),new cljs.core.Symbol(null,\"case\",\"case\",-1510733573,null),\"metabase/mbql/schema.cljc\",61,new cljs.core.Keyword(null,\"case\",\"case\",1143702196),1,916,916,new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"case\",\"case\",1143702196),new cljs.core.Keyword(null,\"clauses\",\"clauses\",1454841241),cljs.core.list(new cljs.core.Symbol(null,\"quote\",\"quote\",1377916282,null),new cljs.core.Symbol(null,\"CaseClauses\",\"CaseClauses\",-1749071354,null)),new cljs.core.Keyword(null,\"options\",\"options\",99638489),cljs.core.list(new cljs.core.Symbol(null,\"quote\",\"quote\",1377916282,null),cljs.core.list(new cljs.core.Symbol(null,\"optional\",\"optional\",-600484260,null),new cljs.core.Symbol(null,\"CaseOptions\",\"CaseOptions\",1989286806,null)))], null),cljs.core.List.EMPTY,\"Schema for a valid case clause.\",(cljs.core.truth_(metabase.mbql.schema.case$)?metabase.mbql.schema.case$.cljs$lang$test:null)]))):null)));\nif(cljs.core.truth_(or__5045__auto__)){\nreturn or__5045__auto__;\n} else {\nreturn new cljs.core.Symbol(null,\"case\",\"case\",-1510733573,null);\n}\n})(),metabase.mbql.schema.case$], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var or__5045__auto__ = new cljs.core.Keyword(null,\"clause-name\",\"clause-name\",-996419059).cljs$core$IFn$_invoke$arity$1(cljs.core.meta((((typeof metabase !== 'undefined') && (typeof metabase.mbql !== 'undefined') && (typeof metabase.mbql.schema !== 'undefined') && (typeof metabase.mbql.schema.datetime_diff !== 'undefined'))?(new cljs.core.Var((function (){\nreturn metabase.mbql.schema.datetime_diff;\n}),cljs.core.with_meta(new cljs.core.Symbol(\"metabase.mbql.schema\",\"datetime-diff\",\"metabase.mbql.schema/datetime-diff\",1838258811,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(\"cljs.analyzer\",\"no-resolve\",\"cljs.analyzer/no-resolve\",-1872351017),true], null)),cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null,\"requires-features\",\"requires-features\",-101116256),new cljs.core.Keyword(null,\"ns\",\"ns\",441598760),new cljs.core.Keyword(null,\"name\",\"name\",1843675177),new cljs.core.Keyword(null,\"file\",\"file\",-1269645878),new cljs.core.Keyword(null,\"end-column\",\"end-column\",1425389514),new cljs.core.Keyword(null,\"clause-name\",\"clause-name\",-996419059),new cljs.core.Keyword(null,\"column\",\"column\",2078222095),new cljs.core.Keyword(null,\"line\",\"line\",212345235),new cljs.core.Keyword(null,\"end-line\",\"end-line\",1837326455),new cljs.core.Keyword(null,\"clause-form\",\"clause-form\",1820463737),new cljs.core.Keyword(null,\"arglists\",\"arglists\",1661989754),new cljs.core.Keyword(null,\"doc\",\"doc\",1913296891),new cljs.core.Keyword(null,\"test\",\"test\",577538877)],[new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"datetime-diff\",\"datetime-diff\",1133112155),\"null\"], null), null),cljs.core.with_meta(new cljs.core.Symbol(null,\"metabase.mbql.schema\",\"metabase.mbql.schema\",-408168902,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"doc\",\"doc\",1913296891),\"Schema for validating a *normalized* MBQL query. This is also the definitive grammar for MBQL, wow!\"], null)),new cljs.core.Symbol(null,\"datetime-diff\",\"datetime-diff\",-1521323614,null),\"metabase/mbql/schema.cljc\",65,new cljs.core.Keyword(null,\"datetime-diff\",\"datetime-diff\",1133112155),1,680,680,new cljs.core.PersistentVector(null, 7, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"datetime-diff\",\"datetime-diff\",1133112155),new cljs.core.Keyword(null,\"datetime-x\",\"datetime-x\",1519265947),cljs.core.list(new cljs.core.Symbol(null,\"quote\",\"quote\",1377916282,null),new cljs.core.Symbol(null,\"DateTimeExpressionArg\",\"DateTimeExpressionArg\",-1507653823,null)),new cljs.core.Keyword(null,\"datetime-y\",\"datetime-y\",-1666955771),cljs.core.list(new cljs.core.Symbol(null,\"quote\",\"quote\",1377916282,null),new cljs.core.Symbol(null,\"DateTimeExpressionArg\",\"DateTimeExpressionArg\",-1507653823,null)),new cljs.core.Keyword(null,\"unit\",\"unit\",375175175),cljs.core.list(new cljs.core.Symbol(null,\"quote\",\"quote\",1377916282,null),new cljs.core.Symbol(null,\"DatetimeDiffUnits\",\"DatetimeDiffUnits\",1899101514,null))], null),cljs.core.List.EMPTY,\"Schema for a valid datetime-diff clause.\",(cljs.core.truth_(metabase.mbql.schema.datetime_diff)?metabase.mbql.schema.datetime_diff.cljs$lang$test:null)]))):null)));\nif(cljs.core.truth_(or__5045__auto__)){\nreturn or__5045__auto__;\n} else {\nreturn new cljs.core.Symbol(null,\"datetime-diff\",\"datetime-diff\",-1521323614,null);\n}\n})(),metabase.mbql.schema.datetime_diff], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var or__5045__auto__ = new cljs.core.Keyword(null,\"clause-name\",\"clause-name\",-996419059).cljs$core$IFn$_invoke$arity$1(cljs.core.meta((((typeof metabase !== 'undefined') && (typeof metabase.mbql !== 'undefined') && (typeof metabase.mbql.schema !== 'undefined') && (typeof metabase.mbql.schema.temporal_extract !== 'undefined'))?(new cljs.core.Var((function (){\nreturn metabase.mbql.schema.temporal_extract;\n}),cljs.core.with_meta(new cljs.core.Symbol(\"metabase.mbql.schema\",\"temporal-extract\",\"metabase.mbql.schema/temporal-extract\",-1825197161,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(\"cljs.analyzer\",\"no-resolve\",\"cljs.analyzer/no-resolve\",-1872351017),true], null)),cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null,\"requires-features\",\"requires-features\",-101116256),new cljs.core.Keyword(null,\"ns\",\"ns\",441598760),new cljs.core.Keyword(null,\"name\",\"name\",1843675177),new cljs.core.Keyword(null,\"file\",\"file\",-1269645878),new cljs.core.Keyword(null,\"end-column\",\"end-column\",1425389514),new cljs.core.Keyword(null,\"clause-name\",\"clause-name\",-996419059),new cljs.core.Keyword(null,\"column\",\"column\",2078222095),new cljs.core.Keyword(null,\"line\",\"line\",212345235),new cljs.core.Keyword(null,\"end-line\",\"end-line\",1837326455),new cljs.core.Keyword(null,\"clause-form\",\"clause-form\",1820463737),new cljs.core.Keyword(null,\"arglists\",\"arglists\",1661989754),new cljs.core.Keyword(null,\"doc\",\"doc\",1913296891),new cljs.core.Keyword(null,\"test\",\"test\",577538877)],[new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"temporal-extract\",\"temporal-extract\",1781686405),\"null\"], null), null),cljs.core.with_meta(new cljs.core.Symbol(null,\"metabase.mbql.schema\",\"metabase.mbql.schema\",-408168902,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"doc\",\"doc\",1913296891),\"Schema for validating a *normalized* MBQL query. This is also the definitive grammar for MBQL, wow!\"], null)),new cljs.core.Symbol(null,\"temporal-extract\",\"temporal-extract\",-872749364,null),\"metabase/mbql/schema.cljc\",71,new cljs.core.Keyword(null,\"temporal-extract\",\"temporal-extract\",1781686405),1,685,685,new cljs.core.PersistentVector(null, 7, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"temporal-extract\",\"temporal-extract\",1781686405),new cljs.core.Keyword(null,\"datetime\",\"datetime\",494675702),cljs.core.list(new cljs.core.Symbol(null,\"quote\",\"quote\",1377916282,null),new cljs.core.Symbol(null,\"DateTimeExpressionArg\",\"DateTimeExpressionArg\",-1507653823,null)),new cljs.core.Keyword(null,\"unit\",\"unit\",375175175),cljs.core.list(new cljs.core.Symbol(null,\"quote\",\"quote\",1377916282,null),new cljs.core.Symbol(null,\"TemporalExtractUnits\",\"TemporalExtractUnits\",-1308527018,null)),new cljs.core.Keyword(null,\"mode\",\"mode\",654403691),cljs.core.list(new cljs.core.Symbol(null,\"quote\",\"quote\",1377916282,null),cljs.core.list(new cljs.core.Symbol(null,\"optional\",\"optional\",-600484260,null),new cljs.core.Symbol(null,\"ExtractWeekModes\",\"ExtractWeekModes\",687144014,null)))], null),cljs.core.List.EMPTY,\"Schema for a valid temporal-extract clause.\",(cljs.core.truth_(metabase.mbql.schema.temporal_extract)?metabase.mbql.schema.temporal_extract.cljs$lang$test:null)]))):null)));\nif(cljs.core.truth_(or__5045__auto__)){\nreturn or__5045__auto__;\n} else {\nreturn new cljs.core.Symbol(null,\"temporal-extract\",\"temporal-extract\",-872749364,null);\n}\n})(),metabase.mbql.schema.temporal_extract], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var or__5045__auto__ = new cljs.core.Keyword(null,\"clause-name\",\"clause-name\",-996419059).cljs$core$IFn$_invoke$arity$1(cljs.core.meta((((typeof metabase !== 'undefined') && (typeof metabase.mbql !== 'undefined') && (typeof metabase.mbql.schema !== 'undefined') && (typeof metabase.mbql.schema.get_year !== 'undefined'))?(new cljs.core.Var((function (){\nreturn metabase.mbql.schema.get_year;\n}),cljs.core.with_meta(new cljs.core.Symbol(\"metabase.mbql.schema\",\"get-year\",\"metabase.mbql.schema/get-year\",-265030428,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(\"cljs.analyzer\",\"no-resolve\",\"cljs.analyzer/no-resolve\",-1872351017),true], null)),cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null,\"requires-features\",\"requires-features\",-101116256),new cljs.core.Keyword(null,\"ns\",\"ns\",441598760),new cljs.core.Keyword(null,\"name\",\"name\",1843675177),new cljs.core.Keyword(null,\"file\",\"file\",-1269645878),new cljs.core.Keyword(null,\"end-column\",\"end-column\",1425389514),new cljs.core.Keyword(null,\"clause-name\",\"clause-name\",-996419059),new cljs.core.Keyword(null,\"column\",\"column\",2078222095),new cljs.core.Keyword(null,\"line\",\"line\",212345235),new cljs.core.Keyword(null,\"end-line\",\"end-line\",1837326455),new cljs.core.Keyword(null,\"sugar\",\"sugar\",-73788488),new cljs.core.Keyword(null,\"clause-form\",\"clause-form\",1820463737),new cljs.core.Keyword(null,\"arglists\",\"arglists\",1661989754),new cljs.core.Keyword(null,\"doc\",\"doc\",1913296891),new cljs.core.Keyword(null,\"test\",\"test\",577538877)],[new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"temporal-extract\",\"temporal-extract\",1781686405),\"null\"], null), null),cljs.core.with_meta(new cljs.core.Symbol(null,\"metabase.mbql.schema\",\"metabase.mbql.schema\",-408168902,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"doc\",\"doc\",1913296891),\"Schema for validating a *normalized* MBQL query. This is also the definitive grammar for MBQL, wow!\"], null)),new cljs.core.Symbol(null,\"get-year\",\"get-year\",704520253,null),\"metabase/mbql/schema.cljc\",71,new cljs.core.Keyword(null,\"get-year\",\"get-year\",-936011274),1,691,691,true,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"get-year\",\"get-year\",-936011274),new cljs.core.Keyword(null,\"date\",\"date\",-1463434462),cljs.core.list(new cljs.core.Symbol(null,\"quote\",\"quote\",1377916282,null),new cljs.core.Symbol(null,\"DateTimeExpressionArg\",\"DateTimeExpressionArg\",-1507653823,null))], null),cljs.core.List.EMPTY,\"Schema for a valid get-year clause.\",(cljs.core.truth_(metabase.mbql.schema.get_year)?metabase.mbql.schema.get_year.cljs$lang$test:null)]))):null)));\nif(cljs.core.truth_(or__5045__auto__)){\nreturn or__5045__auto__;\n} else {\nreturn new cljs.core.Symbol(null,\"get-year\",\"get-year\",704520253,null);\n}\n})(),metabase.mbql.schema.get_year], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var or__5045__auto__ = new cljs.core.Keyword(null,\"clause-name\",\"clause-name\",-996419059).cljs$core$IFn$_invoke$arity$1(cljs.core.meta((((typeof metabase !== 'undefined') && (typeof metabase.mbql !== 'undefined') && (typeof metabase.mbql.schema !== 'undefined') && (typeof metabase.mbql.schema.get_quarter !== 'undefined'))?(new cljs.core.Var((function (){\nreturn metabase.mbql.schema.get_quarter;\n}),cljs.core.with_meta(new cljs.core.Symbol(\"metabase.mbql.schema\",\"get-quarter\",\"metabase.mbql.schema/get-quarter\",2007639089,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(\"cljs.analyzer\",\"no-resolve\",\"cljs.analyzer/no-resolve\",-1872351017),true], null)),cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null,\"requires-features\",\"requires-features\",-101116256),new cljs.core.Keyword(null,\"ns\",\"ns\",441598760),new cljs.core.Keyword(null,\"name\",\"name\",1843675177),new cljs.core.Keyword(null,\"file\",\"file\",-1269645878),new cljs.core.Keyword(null,\"end-column\",\"end-column\",1425389514),new cljs.core.Keyword(null,\"clause-name\",\"clause-name\",-996419059),new cljs.core.Keyword(null,\"column\",\"column\",2078222095),new cljs.core.Keyword(null,\"line\",\"line\",212345235),new cljs.core.Keyword(null,\"end-line\",\"end-line\",1837326455),new cljs.core.Keyword(null,\"sugar\",\"sugar\",-73788488),new cljs.core.Keyword(null,\"clause-form\",\"clause-form\",1820463737),new cljs.core.Keyword(null,\"arglists\",\"arglists\",1661989754),new cljs.core.Keyword(null,\"doc\",\"doc\",1913296891),new cljs.core.Keyword(null,\"test\",\"test\",577538877)],[new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"temporal-extract\",\"temporal-extract\",1781686405),\"null\"], null), null),cljs.core.with_meta(new cljs.core.Symbol(null,\"metabase.mbql.schema\",\"metabase.mbql.schema\",-408168902,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"doc\",\"doc\",1913296891),\"Schema for validating a *normalized* MBQL query. This is also the definitive grammar for MBQL, wow!\"], null)),new cljs.core.Symbol(null,\"get-quarter\",\"get-quarter\",-1326657176,null),\"metabase/mbql/schema.cljc\",74,new cljs.core.Keyword(null,\"get-quarter\",\"get-quarter\",1327778593),1,694,694,true,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"get-quarter\",\"get-quarter\",1327778593),new cljs.core.Keyword(null,\"date\",\"date\",-1463434462),cljs.core.list(new cljs.core.Symbol(null,\"quote\",\"quote\",1377916282,null),new cljs.core.Symbol(null,\"DateTimeExpressionArg\",\"DateTimeExpressionArg\",-1507653823,null))], null),cljs.core.List.EMPTY,\"Schema for a valid get-quarter clause.\",(cljs.core.truth_(metabase.mbql.schema.get_quarter)?metabase.mbql.schema.get_quarter.cljs$lang$test:null)]))):null)));\nif(cljs.core.truth_(or__5045__auto__)){\nreturn or__5045__auto__;\n} else {\nreturn new cljs.core.Symbol(null,\"get-quarter\",\"get-quarter\",-1326657176,null);\n}\n})(),metabase.mbql.schema.get_quarter], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var or__5045__auto__ = new cljs.core.Keyword(null,\"clause-name\",\"clause-name\",-996419059).cljs$core$IFn$_invoke$arity$1(cljs.core.meta((((typeof metabase !== 'undefined') && (typeof metabase.mbql !== 'undefined') && (typeof metabase.mbql.schema !== 'undefined') && (typeof metabase.mbql.schema.get_month !== 'undefined'))?(new cljs.core.Var((function (){\nreturn metabase.mbql.schema.get_month;\n}),cljs.core.with_meta(new cljs.core.Symbol(\"metabase.mbql.schema\",\"get-month\",\"metabase.mbql.schema/get-month\",-2104849029,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(\"cljs.analyzer\",\"no-resolve\",\"cljs.analyzer/no-resolve\",-1872351017),true], null)),cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null,\"requires-features\",\"requires-features\",-101116256),new cljs.core.Keyword(null,\"ns\",\"ns\",441598760),new cljs.core.Keyword(null,\"name\",\"name\",1843675177),new cljs.core.Keyword(null,\"file\",\"file\",-1269645878),new cljs.core.Keyword(null,\"end-column\",\"end-column\",1425389514),new cljs.core.Keyword(null,\"clause-name\",\"clause-name\",-996419059),new cljs.core.Keyword(null,\"column\",\"column\",2078222095),new cljs.core.Keyword(null,\"line\",\"line\",212345235),new cljs.core.Keyword(null,\"end-line\",\"end-line\",1837326455),new cljs.core.Keyword(null,\"sugar\",\"sugar\",-73788488),new cljs.core.Keyword(null,\"clause-form\",\"clause-form\",1820463737),new cljs.core.Keyword(null,\"arglists\",\"arglists\",1661989754),new cljs.core.Keyword(null,\"doc\",\"doc\",1913296891),new cljs.core.Keyword(null,\"test\",\"test\",577538877)],[new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"temporal-extract\",\"temporal-extract\",1781686405),\"null\"], null), null),cljs.core.with_meta(new cljs.core.Symbol(null,\"metabase.mbql.schema\",\"metabase.mbql.schema\",-408168902,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"doc\",\"doc\",1913296891),\"Schema for validating a *normalized* MBQL query. This is also the definitive grammar for MBQL, wow!\"], null)),new cljs.core.Symbol(null,\"get-month\",\"get-month\",1271156796,null),\"metabase/mbql/schema.cljc\",72,new cljs.core.Keyword(null,\"get-month\",\"get-month\",-369374731),1,697,697,true,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"get-month\",\"get-month\",-369374731),new cljs.core.Keyword(null,\"date\",\"date\",-1463434462),cljs.core.list(new cljs.core.Symbol(null,\"quote\",\"quote\",1377916282,null),new cljs.core.Symbol(null,\"DateTimeExpressionArg\",\"DateTimeExpressionArg\",-1507653823,null))], null),cljs.core.List.EMPTY,\"Schema for a valid get-month clause.\",(cljs.core.truth_(metabase.mbql.schema.get_month)?metabase.mbql.schema.get_month.cljs$lang$test:null)]))):null)));\nif(cljs.core.truth_(or__5045__auto__)){\nreturn or__5045__auto__;\n} else {\nreturn new cljs.core.Symbol(null,\"get-month\",\"get-month\",1271156796,null);\n}\n})(),metabase.mbql.schema.get_month], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var or__5045__auto__ = new cljs.core.Keyword(null,\"clause-name\",\"clause-name\",-996419059).cljs$core$IFn$_invoke$arity$1(cljs.core.meta((((typeof metabase !== 'undefined') && (typeof metabase.mbql !== 'undefined') && (typeof metabase.mbql.schema !== 'undefined') && (typeof metabase.mbql.schema.get_week !== 'undefined'))?(new cljs.core.Var((function (){\nreturn metabase.mbql.schema.get_week;\n}),cljs.core.with_meta(new cljs.core.Symbol(\"metabase.mbql.schema\",\"get-week\",\"metabase.mbql.schema/get-week\",1436319181,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(\"cljs.analyzer\",\"no-resolve\",\"cljs.analyzer/no-resolve\",-1872351017),true], null)),cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null,\"requires-features\",\"requires-features\",-101116256),new cljs.core.Keyword(null,\"ns\",\"ns\",441598760),new cljs.core.Keyword(null,\"name\",\"name\",1843675177),new cljs.core.Keyword(null,\"file\",\"file\",-1269645878),new cljs.core.Keyword(null,\"end-column\",\"end-column\",1425389514),new cljs.core.Keyword(null,\"clause-name\",\"clause-name\",-996419059),new cljs.core.Keyword(null,\"column\",\"column\",2078222095),new cljs.core.Keyword(null,\"line\",\"line\",212345235),new cljs.core.Keyword(null,\"end-line\",\"end-line\",1837326455),new cljs.core.Keyword(null,\"sugar\",\"sugar\",-73788488),new cljs.core.Keyword(null,\"clause-form\",\"clause-form\",1820463737),new cljs.core.Keyword(null,\"arglists\",\"arglists\",1661989754),new cljs.core.Keyword(null,\"doc\",\"doc\",1913296891),new cljs.core.Keyword(null,\"test\",\"test\",577538877)],[new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"temporal-extract\",\"temporal-extract\",1781686405),\"null\"], null), null),cljs.core.with_meta(new cljs.core.Symbol(null,\"metabase.mbql.schema\",\"metabase.mbql.schema\",-408168902,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"doc\",\"doc\",1913296891),\"Schema for validating a *normalized* MBQL query. This is also the definitive grammar for MBQL, wow!\"], null)),new cljs.core.Symbol(null,\"get-week\",\"get-week\",752472178,null),\"metabase/mbql/schema.cljc\",71,new cljs.core.Keyword(null,\"get-week\",\"get-week\",-888059349),1,700,700,true,new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"get-week\",\"get-week\",-888059349),new cljs.core.Keyword(null,\"date\",\"date\",-1463434462),cljs.core.list(new cljs.core.Symbol(null,\"quote\",\"quote\",1377916282,null),new cljs.core.Symbol(null,\"DateTimeExpressionArg\",\"DateTimeExpressionArg\",-1507653823,null)),new cljs.core.Keyword(null,\"mode\",\"mode\",654403691),cljs.core.list(new cljs.core.Symbol(null,\"quote\",\"quote\",1377916282,null),cljs.core.list(new cljs.core.Symbol(null,\"optional\",\"optional\",-600484260,null),new cljs.core.Symbol(null,\"ExtractWeekModes\",\"ExtractWeekModes\",687144014,null)))], null),cljs.core.List.EMPTY,\"Schema for a valid get-week clause.\",(cljs.core.truth_(metabase.mbql.schema.get_week)?metabase.mbql.schema.get_week.cljs$lang$test:null)]))):null)));\nif(cljs.core.truth_(or__5045__auto__)){\nreturn or__5045__auto__;\n} else {\nreturn new cljs.core.Symbol(null,\"get-week\",\"get-week\",752472178,null);\n}\n})(),metabase.mbql.schema.get_week], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var or__5045__auto__ = new cljs.core.Keyword(null,\"clause-name\",\"clause-name\",-996419059).cljs$core$IFn$_invoke$arity$1(cljs.core.meta((((typeof metabase !== 'undefined') && (typeof metabase.mbql !== 'undefined') && (typeof metabase.mbql.schema !== 'undefined') && (typeof metabase.mbql.schema.get_day !== 'undefined'))?(new cljs.core.Var((function (){\nreturn metabase.mbql.schema.get_day;\n}),cljs.core.with_meta(new cljs.core.Symbol(\"metabase.mbql.schema\",\"get-day\",\"metabase.mbql.schema/get-day\",-1600012951,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(\"cljs.analyzer\",\"no-resolve\",\"cljs.analyzer/no-resolve\",-1872351017),true], null)),cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null,\"requires-features\",\"requires-features\",-101116256),new cljs.core.Keyword(null,\"ns\",\"ns\",441598760),new cljs.core.Keyword(null,\"name\",\"name\",1843675177),new cljs.core.Keyword(null,\"file\",\"file\",-1269645878),new cljs.core.Keyword(null,\"end-column\",\"end-column\",1425389514),new cljs.core.Keyword(null,\"clause-name\",\"clause-name\",-996419059),new cljs.core.Keyword(null,\"column\",\"column\",2078222095),new cljs.core.Keyword(null,\"line\",\"line\",212345235),new cljs.core.Keyword(null,\"end-line\",\"end-line\",1837326455),new cljs.core.Keyword(null,\"sugar\",\"sugar\",-73788488),new cljs.core.Keyword(null,\"clause-form\",\"clause-form\",1820463737),new cljs.core.Keyword(null,\"arglists\",\"arglists\",1661989754),new cljs.core.Keyword(null,\"doc\",\"doc\",1913296891),new cljs.core.Keyword(null,\"test\",\"test\",577538877)],[new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"temporal-extract\",\"temporal-extract\",1781686405),\"null\"], null), null),cljs.core.with_meta(new cljs.core.Symbol(null,\"metabase.mbql.schema\",\"metabase.mbql.schema\",-408168902,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"doc\",\"doc\",1913296891),\"Schema for validating a *normalized* MBQL query. This is also the definitive grammar for MBQL, wow!\"], null)),new cljs.core.Symbol(null,\"get-day\",\"get-day\",1768100384,null),\"metabase/mbql/schema.cljc\",70,new cljs.core.Keyword(null,\"get-day\",\"get-day\",127568857),1,704,704,true,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"get-day\",\"get-day\",127568857),new cljs.core.Keyword(null,\"date\",\"date\",-1463434462),cljs.core.list(new cljs.core.Symbol(null,\"quote\",\"quote\",1377916282,null),new cljs.core.Symbol(null,\"DateTimeExpressionArg\",\"DateTimeExpressionArg\",-1507653823,null))], null),cljs.core.List.EMPTY,\"Schema for a valid get-day clause.\",(cljs.core.truth_(metabase.mbql.schema.get_day)?metabase.mbql.schema.get_day.cljs$lang$test:null)]))):null)));\nif(cljs.core.truth_(or__5045__auto__)){\nreturn or__5045__auto__;\n} else {\nreturn new cljs.core.Symbol(null,\"get-day\",\"get-day\",1768100384,null);\n}\n})(),metabase.mbql.schema.get_day], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var or__5045__auto__ = new cljs.core.Keyword(null,\"clause-name\",\"clause-name\",-996419059).cljs$core$IFn$_invoke$arity$1(cljs.core.meta((((typeof metabase !== 'undefined') && (typeof metabase.mbql !== 'undefined') && (typeof metabase.mbql.schema !== 'undefined') && (typeof metabase.mbql.schema.get_day_of_week !== 'undefined'))?(new cljs.core.Var((function (){\nreturn metabase.mbql.schema.get_day_of_week;\n}),cljs.core.with_meta(new cljs.core.Symbol(\"metabase.mbql.schema\",\"get-day-of-week\",\"metabase.mbql.schema/get-day-of-week\",551389774,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(\"cljs.analyzer\",\"no-resolve\",\"cljs.analyzer/no-resolve\",-1872351017),true], null)),cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null,\"requires-features\",\"requires-features\",-101116256),new cljs.core.Keyword(null,\"ns\",\"ns\",441598760),new cljs.core.Keyword(null,\"name\",\"name\",1843675177),new cljs.core.Keyword(null,\"file\",\"file\",-1269645878),new cljs.core.Keyword(null,\"end-column\",\"end-column\",1425389514),new cljs.core.Keyword(null,\"clause-name\",\"clause-name\",-996419059),new cljs.core.Keyword(null,\"column\",\"column\",2078222095),new cljs.core.Keyword(null,\"line\",\"line\",212345235),new cljs.core.Keyword(null,\"end-line\",\"end-line\",1837326455),new cljs.core.Keyword(null,\"sugar\",\"sugar\",-73788488),new cljs.core.Keyword(null,\"clause-form\",\"clause-form\",1820463737),new cljs.core.Keyword(null,\"arglists\",\"arglists\",1661989754),new cljs.core.Keyword(null,\"doc\",\"doc\",1913296891),new cljs.core.Keyword(null,\"test\",\"test\",577538877)],[new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"temporal-extract\",\"temporal-extract\",1781686405),\"null\"], null), null),cljs.core.with_meta(new cljs.core.Symbol(null,\"metabase.mbql.schema\",\"metabase.mbql.schema\",-408168902,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"doc\",\"doc\",1913296891),\"Schema for validating a *normalized* MBQL query. This is also the definitive grammar for MBQL, wow!\"], null)),new cljs.core.Symbol(null,\"get-day-of-week\",\"get-day-of-week\",-644295017,null),\"metabase/mbql/schema.cljc\",78,new cljs.core.Keyword(null,\"get-day-of-week\",\"get-day-of-week\",2010140752),1,707,707,true,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"get-day-of-week\",\"get-day-of-week\",2010140752),new cljs.core.Keyword(null,\"date\",\"date\",-1463434462),cljs.core.list(new cljs.core.Symbol(null,\"quote\",\"quote\",1377916282,null),new cljs.core.Symbol(null,\"DateTimeExpressionArg\",\"DateTimeExpressionArg\",-1507653823,null))], null),cljs.core.List.EMPTY,\"Schema for a valid get-day-of-week clause.\",(cljs.core.truth_(metabase.mbql.schema.get_day_of_week)?metabase.mbql.schema.get_day_of_week.cljs$lang$test:null)]))):null)));\nif(cljs.core.truth_(or__5045__auto__)){\nreturn or__5045__auto__;\n} else {\nreturn new cljs.core.Symbol(null,\"get-day-of-week\",\"get-day-of-week\",-644295017,null);\n}\n})(),metabase.mbql.schema.get_day_of_week], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var or__5045__auto__ = new cljs.core.Keyword(null,\"clause-name\",\"clause-name\",-996419059).cljs$core$IFn$_invoke$arity$1(cljs.core.meta((((typeof metabase !== 'undefined') && (typeof metabase.mbql !== 'undefined') && (typeof metabase.mbql.schema !== 'undefined') && (typeof metabase.mbql.schema.get_hour !== 'undefined'))?(new cljs.core.Var((function (){\nreturn metabase.mbql.schema.get_hour;\n}),cljs.core.with_meta(new cljs.core.Symbol(\"metabase.mbql.schema\",\"get-hour\",\"metabase.mbql.schema/get-hour\",-809777063,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(\"cljs.analyzer\",\"no-resolve\",\"cljs.analyzer/no-resolve\",-1872351017),true], null)),cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null,\"requires-features\",\"requires-features\",-101116256),new cljs.core.Keyword(null,\"ns\",\"ns\",441598760),new cljs.core.Keyword(null,\"name\",\"name\",1843675177),new cljs.core.Keyword(null,\"file\",\"file\",-1269645878),new cljs.core.Keyword(null,\"end-column\",\"end-column\",1425389514),new cljs.core.Keyword(null,\"clause-name\",\"clause-name\",-996419059),new cljs.core.Keyword(null,\"column\",\"column\",2078222095),new cljs.core.Keyword(null,\"line\",\"line\",212345235),new cljs.core.Keyword(null,\"end-line\",\"end-line\",1837326455),new cljs.core.Keyword(null,\"sugar\",\"sugar\",-73788488),new cljs.core.Keyword(null,\"clause-form\",\"clause-form\",1820463737),new cljs.core.Keyword(null,\"arglists\",\"arglists\",1661989754),new cljs.core.Keyword(null,\"doc\",\"doc\",1913296891),new cljs.core.Keyword(null,\"test\",\"test\",577538877)],[new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"temporal-extract\",\"temporal-extract\",1781686405),\"null\"], null), null),cljs.core.with_meta(new cljs.core.Symbol(null,\"metabase.mbql.schema\",\"metabase.mbql.schema\",-408168902,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"doc\",\"doc\",1913296891),\"Schema for validating a *normalized* MBQL query. This is also the definitive grammar for MBQL, wow!\"], null)),new cljs.core.Symbol(null,\"get-hour\",\"get-hour\",-2031721710,null),\"metabase/mbql/schema.cljc\",71,new cljs.core.Keyword(null,\"get-hour\",\"get-hour\",622714059),1,710,710,true,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"get-hour\",\"get-hour\",622714059),new cljs.core.Keyword(null,\"datetime\",\"datetime\",494675702),cljs.core.list(new cljs.core.Symbol(null,\"quote\",\"quote\",1377916282,null),new cljs.core.Symbol(null,\"DateTimeExpressionArg\",\"DateTimeExpressionArg\",-1507653823,null))], null),cljs.core.List.EMPTY,\"Schema for a valid get-hour clause.\",(cljs.core.truth_(metabase.mbql.schema.get_hour)?metabase.mbql.schema.get_hour.cljs$lang$test:null)]))):null)));\nif(cljs.core.truth_(or__5045__auto__)){\nreturn or__5045__auto__;\n} else {\nreturn new cljs.core.Symbol(null,\"get-hour\",\"get-hour\",-2031721710,null);\n}\n})(),metabase.mbql.schema.get_hour], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var or__5045__auto__ = new cljs.core.Keyword(null,\"clause-name\",\"clause-name\",-996419059).cljs$core$IFn$_invoke$arity$1(cljs.core.meta((((typeof metabase !== 'undefined') && (typeof metabase.mbql !== 'undefined') && (typeof metabase.mbql.schema !== 'undefined') && (typeof metabase.mbql.schema.get_minute !== 'undefined'))?(new cljs.core.Var((function (){\nreturn metabase.mbql.schema.get_minute;\n}),cljs.core.with_meta(new cljs.core.Symbol(\"metabase.mbql.schema\",\"get-minute\",\"metabase.mbql.schema/get-minute\",-2138696889,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(\"cljs.analyzer\",\"no-resolve\",\"cljs.analyzer/no-resolve\",-1872351017),true], null)),cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null,\"requires-features\",\"requires-features\",-101116256),new cljs.core.Keyword(null,\"ns\",\"ns\",441598760),new cljs.core.Keyword(null,\"name\",\"name\",1843675177),new cljs.core.Keyword(null,\"file\",\"file\",-1269645878),new cljs.core.Keyword(null,\"end-column\",\"end-column\",1425389514),new cljs.core.Keyword(null,\"clause-name\",\"clause-name\",-996419059),new cljs.core.Keyword(null,\"column\",\"column\",2078222095),new cljs.core.Keyword(null,\"line\",\"line\",212345235),new cljs.core.Keyword(null,\"end-line\",\"end-line\",1837326455),new cljs.core.Keyword(null,\"sugar\",\"sugar\",-73788488),new cljs.core.Keyword(null,\"clause-form\",\"clause-form\",1820463737),new cljs.core.Keyword(null,\"arglists\",\"arglists\",1661989754),new cljs.core.Keyword(null,\"doc\",\"doc\",1913296891),new cljs.core.Keyword(null,\"test\",\"test\",577538877)],[new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"temporal-extract\",\"temporal-extract\",1781686405),\"null\"], null), null),cljs.core.with_meta(new cljs.core.Symbol(null,\"metabase.mbql.schema\",\"metabase.mbql.schema\",-408168902,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"doc\",\"doc\",1913296891),\"Schema for validating a *normalized* MBQL query. This is also the definitive grammar for MBQL, wow!\"], null)),new cljs.core.Symbol(null,\"get-minute\",\"get-minute\",-1186349426,null),\"metabase/mbql/schema.cljc\",73,new cljs.core.Keyword(null,\"get-minute\",\"get-minute\",1468086343),1,713,713,true,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"get-minute\",\"get-minute\",1468086343),new cljs.core.Keyword(null,\"datetime\",\"datetime\",494675702),cljs.core.list(new cljs.core.Symbol(null,\"quote\",\"quote\",1377916282,null),new cljs.core.Symbol(null,\"DateTimeExpressionArg\",\"DateTimeExpressionArg\",-1507653823,null))], null),cljs.core.List.EMPTY,\"Schema for a valid get-minute clause.\",(cljs.core.truth_(metabase.mbql.schema.get_minute)?metabase.mbql.schema.get_minute.cljs$lang$test:null)]))):null)));\nif(cljs.core.truth_(or__5045__auto__)){\nreturn or__5045__auto__;\n} else {\nreturn new cljs.core.Symbol(null,\"get-minute\",\"get-minute\",-1186349426,null);\n}\n})(),metabase.mbql.schema.get_minute], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var or__5045__auto__ = new cljs.core.Keyword(null,\"clause-name\",\"clause-name\",-996419059).cljs$core$IFn$_invoke$arity$1(cljs.core.meta((((typeof metabase !== 'undefined') && (typeof metabase.mbql !== 'undefined') && (typeof metabase.mbql.schema !== 'undefined') && (typeof metabase.mbql.schema.get_second !== 'undefined'))?(new cljs.core.Var((function (){\nreturn metabase.mbql.schema.get_second;\n}),cljs.core.with_meta(new cljs.core.Symbol(\"metabase.mbql.schema\",\"get-second\",\"metabase.mbql.schema/get-second\",560421410,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(\"cljs.analyzer\",\"no-resolve\",\"cljs.analyzer/no-resolve\",-1872351017),true], null)),cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null,\"requires-features\",\"requires-features\",-101116256),new cljs.core.Keyword(null,\"ns\",\"ns\",441598760),new cljs.core.Keyword(null,\"name\",\"name\",1843675177),new cljs.core.Keyword(null,\"file\",\"file\",-1269645878),new cljs.core.Keyword(null,\"end-column\",\"end-column\",1425389514),new cljs.core.Keyword(null,\"clause-name\",\"clause-name\",-996419059),new cljs.core.Keyword(null,\"column\",\"column\",2078222095),new cljs.core.Keyword(null,\"line\",\"line\",212345235),new cljs.core.Keyword(null,\"end-line\",\"end-line\",1837326455),new cljs.core.Keyword(null,\"sugar\",\"sugar\",-73788488),new cljs.core.Keyword(null,\"clause-form\",\"clause-form\",1820463737),new cljs.core.Keyword(null,\"arglists\",\"arglists\",1661989754),new cljs.core.Keyword(null,\"doc\",\"doc\",1913296891),new cljs.core.Keyword(null,\"test\",\"test\",577538877)],[new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"temporal-extract\",\"temporal-extract\",1781686405),\"null\"], null), null),cljs.core.with_meta(new cljs.core.Symbol(null,\"metabase.mbql.schema\",\"metabase.mbql.schema\",-408168902,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"doc\",\"doc\",1913296891),\"Schema for validating a *normalized* MBQL query. This is also the definitive grammar for MBQL, wow!\"], null)),new cljs.core.Symbol(null,\"get-second\",\"get-second\",-425414791,null),\"metabase/mbql/schema.cljc\",73,new cljs.core.Keyword(null,\"get-second\",\"get-second\",-2065946318),1,716,716,true,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"get-second\",\"get-second\",-2065946318),new cljs.core.Keyword(null,\"datetime\",\"datetime\",494675702),cljs.core.list(new cljs.core.Symbol(null,\"quote\",\"quote\",1377916282,null),new cljs.core.Symbol(null,\"DateTimeExpressionArg\",\"DateTimeExpressionArg\",-1507653823,null))], null),cljs.core.List.EMPTY,\"Schema for a valid get-second clause.\",(cljs.core.truth_(metabase.mbql.schema.get_second)?metabase.mbql.schema.get_second.cljs$lang$test:null)]))):null)));\nif(cljs.core.truth_(or__5045__auto__)){\nreturn or__5045__auto__;\n} else {\nreturn new cljs.core.Symbol(null,\"get-second\",\"get-second\",-425414791,null);\n}\n})(),metabase.mbql.schema.get_second], null)], 0));\nmetabase.mbql.schema.StringExpression_STAR_ = metabase.mbql.schema.helpers.one_of_STAR_.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var or__5045__auto__ = new cljs.core.Keyword(null,\"clause-name\",\"clause-name\",-996419059).cljs$core$IFn$_invoke$arity$1(cljs.core.meta((((typeof metabase !== 'undefined') && (typeof metabase.mbql !== 'undefined') && (typeof metabase.mbql.schema !== 'undefined') && (typeof metabase.mbql.schema.substring !== 'undefined'))?(new cljs.core.Var((function (){\nreturn metabase.mbql.schema.substring;\n}),cljs.core.with_meta(new cljs.core.Symbol(\"metabase.mbql.schema\",\"substring\",\"metabase.mbql.schema/substring\",1829402610,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(\"cljs.analyzer\",\"no-resolve\",\"cljs.analyzer/no-resolve\",-1872351017),true], null)),cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null,\"requires-features\",\"requires-features\",-101116256),new cljs.core.Keyword(null,\"ns\",\"ns\",441598760),new cljs.core.Keyword(null,\"name\",\"name\",1843675177),new cljs.core.Keyword(null,\"file\",\"file\",-1269645878),new cljs.core.Keyword(null,\"end-column\",\"end-column\",1425389514),new cljs.core.Keyword(null,\"clause-name\",\"clause-name\",-996419059),new cljs.core.Keyword(null,\"column\",\"column\",2078222095),new cljs.core.Keyword(null,\"line\",\"line\",212345235),new cljs.core.Keyword(null,\"end-line\",\"end-line\",1837326455),new cljs.core.Keyword(null,\"clause-form\",\"clause-form\",1820463737),new cljs.core.Keyword(null,\"arglists\",\"arglists\",1661989754),new cljs.core.Keyword(null,\"doc\",\"doc\",1913296891),new cljs.core.Keyword(null,\"test\",\"test\",577538877)],[new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"expressions\",\"expressions\",255689909),\"null\"], null), null),cljs.core.with_meta(new cljs.core.Symbol(null,\"metabase.mbql.schema\",\"metabase.mbql.schema\",-408168902,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"doc\",\"doc\",1913296891),\"Schema for validating a *normalized* MBQL query. This is also the definitive grammar for MBQL, wow!\"], null)),new cljs.core.Symbol(null,\"substring\",\"substring\",-1513569493,null),\"metabase/mbql/schema.cljc\",59,new cljs.core.Keyword(null,\"substring\",\"substring\",1140866276),1,600,600,new cljs.core.PersistentVector(null, 7, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"substring\",\"substring\",1140866276),new cljs.core.Keyword(null,\"s\",\"s\",1705939918),cljs.core.list(new cljs.core.Symbol(null,\"quote\",\"quote\",1377916282,null),new cljs.core.Symbol(null,\"StringExpressionArg\",\"StringExpressionArg\",-1131357258,null)),new cljs.core.Keyword(null,\"start\",\"start\",-355208981),cljs.core.list(new cljs.core.Symbol(null,\"quote\",\"quote\",1377916282,null),new cljs.core.Symbol(null,\"IntGreaterThanZeroOrNumericExpression\",\"IntGreaterThanZeroOrNumericExpression\",2098230228,null)),new cljs.core.Keyword(null,\"length\",\"length\",588987862),cljs.core.list(new cljs.core.Symbol(null,\"quote\",\"quote\",1377916282,null),cljs.core.list(new cljs.core.Symbol(null,\"optional\",\"optional\",-600484260,null),new cljs.core.Symbol(null,\"NumericExpressionArg\",\"NumericExpressionArg\",-1537445195,null)))], null),cljs.core.List.EMPTY,\"Schema for a valid substring clause.\",(cljs.core.truth_(metabase.mbql.schema.substring)?metabase.mbql.schema.substring.cljs$lang$test:null)]))):null)));\nif(cljs.core.truth_(or__5045__auto__)){\nreturn or__5045__auto__;\n} else {\nreturn new cljs.core.Symbol(null,\"substring\",\"substring\",-1513569493,null);\n}\n})(),metabase.mbql.schema.substring], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var or__5045__auto__ = new cljs.core.Keyword(null,\"clause-name\",\"clause-name\",-996419059).cljs$core$IFn$_invoke$arity$1(cljs.core.meta((((typeof metabase !== 'undefined') && (typeof metabase.mbql !== 'undefined') && (typeof metabase.mbql.schema !== 'undefined') && (typeof metabase.mbql.schema.trim !== 'undefined'))?(new cljs.core.Var((function (){\nreturn metabase.mbql.schema.trim;\n}),cljs.core.with_meta(new cljs.core.Symbol(\"metabase.mbql.schema\",\"trim\",\"metabase.mbql.schema/trim\",1991053191,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(\"cljs.analyzer\",\"no-resolve\",\"cljs.analyzer/no-resolve\",-1872351017),true], null)),cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null,\"requires-features\",\"requires-features\",-101116256),new cljs.core.Keyword(null,\"ns\",\"ns\",441598760),new cljs.core.Keyword(null,\"name\",\"name\",1843675177),new cljs.core.Keyword(null,\"file\",\"file\",-1269645878),new cljs.core.Keyword(null,\"end-column\",\"end-column\",1425389514),new cljs.core.Keyword(null,\"clause-name\",\"clause-name\",-996419059),new cljs.core.Keyword(null,\"column\",\"column\",2078222095),new cljs.core.Keyword(null,\"line\",\"line\",212345235),new cljs.core.Keyword(null,\"end-line\",\"end-line\",1837326455),new cljs.core.Keyword(null,\"clause-form\",\"clause-form\",1820463737),new cljs.core.Keyword(null,\"arglists\",\"arglists\",1661989754),new cljs.core.Keyword(null,\"doc\",\"doc\",1913296891),new cljs.core.Keyword(null,\"test\",\"test\",577538877)],[new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"expressions\",\"expressions\",255689909),\"null\"], null), null),cljs.core.with_meta(new cljs.core.Symbol(null,\"metabase.mbql.schema\",\"metabase.mbql.schema\",-408168902,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"doc\",\"doc\",1913296891),\"Schema for validating a *normalized* MBQL query. This is also the definitive grammar for MBQL, wow!\"], null)),new cljs.core.Symbol(null,\"trim\",\"trim\",-1880116002,null),\"metabase/mbql/schema.cljc\",54,new cljs.core.Keyword(null,\"trim\",\"trim\",774319767),1,606,606,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"trim\",\"trim\",774319767),new cljs.core.Keyword(null,\"s\",\"s\",1705939918),cljs.core.list(new cljs.core.Symbol(null,\"quote\",\"quote\",1377916282,null),new cljs.core.Symbol(null,\"StringExpressionArg\",\"StringExpressionArg\",-1131357258,null))], null),cljs.core.List.EMPTY,\"Schema for a valid trim clause.\",(cljs.core.truth_(metabase.mbql.schema.trim)?metabase.mbql.schema.trim.cljs$lang$test:null)]))):null)));\nif(cljs.core.truth_(or__5045__auto__)){\nreturn or__5045__auto__;\n} else {\nreturn new cljs.core.Symbol(null,\"trim\",\"trim\",-1880116002,null);\n}\n})(),metabase.mbql.schema.trim], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var or__5045__auto__ = new cljs.core.Keyword(null,\"clause-name\",\"clause-name\",-996419059).cljs$core$IFn$_invoke$arity$1(cljs.core.meta((((typeof metabase !== 'undefined') && (typeof metabase.mbql !== 'undefined') && (typeof metabase.mbql.schema !== 'undefined') && (typeof metabase.mbql.schema.ltrim !== 'undefined'))?(new cljs.core.Var((function (){\nreturn metabase.mbql.schema.ltrim;\n}),cljs.core.with_meta(new cljs.core.Symbol(\"metabase.mbql.schema\",\"ltrim\",\"metabase.mbql.schema/ltrim\",52894949,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(\"cljs.analyzer\",\"no-resolve\",\"cljs.analyzer/no-resolve\",-1872351017),true], null)),cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null,\"requires-features\",\"requires-features\",-101116256),new cljs.core.Keyword(null,\"ns\",\"ns\",441598760),new cljs.core.Keyword(null,\"name\",\"name\",1843675177),new cljs.core.Keyword(null,\"file\",\"file\",-1269645878),new cljs.core.Keyword(null,\"end-column\",\"end-column\",1425389514),new cljs.core.Keyword(null,\"clause-name\",\"clause-name\",-996419059),new cljs.core.Keyword(null,\"column\",\"column\",2078222095),new cljs.core.Keyword(null,\"line\",\"line\",212345235),new cljs.core.Keyword(null,\"end-line\",\"end-line\",1837326455),new cljs.core.Keyword(null,\"clause-form\",\"clause-form\",1820463737),new cljs.core.Keyword(null,\"arglists\",\"arglists\",1661989754),new cljs.core.Keyword(null,\"doc\",\"doc\",1913296891),new cljs.core.Keyword(null,\"test\",\"test\",577538877)],[new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"expressions\",\"expressions\",255689909),\"null\"], null), null),cljs.core.with_meta(new cljs.core.Symbol(null,\"metabase.mbql.schema\",\"metabase.mbql.schema\",-408168902,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"doc\",\"doc\",1913296891),\"Schema for validating a *normalized* MBQL query. This is also the definitive grammar for MBQL, wow!\"], null)),new cljs.core.Symbol(null,\"ltrim\",\"ltrim\",-1000166486,null),\"metabase/mbql/schema.cljc\",55,new cljs.core.Keyword(null,\"ltrim\",\"ltrim\",1654269283),1,612,612,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"ltrim\",\"ltrim\",1654269283),new cljs.core.Keyword(null,\"s\",\"s\",1705939918),cljs.core.list(new cljs.core.Symbol(null,\"quote\",\"quote\",1377916282,null),new cljs.core.Symbol(null,\"StringExpressionArg\",\"StringExpressionArg\",-1131357258,null))], null),cljs.core.List.EMPTY,\"Schema for a valid ltrim clause.\",(cljs.core.truth_(metabase.mbql.schema.ltrim)?metabase.mbql.schema.ltrim.cljs$lang$test:null)]))):null)));\nif(cljs.core.truth_(or__5045__auto__)){\nreturn or__5045__auto__;\n} else {\nreturn new cljs.core.Symbol(null,\"ltrim\",\"ltrim\",-1000166486,null);\n}\n})(),metabase.mbql.schema.ltrim], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var or__5045__auto__ = new cljs.core.Keyword(null,\"clause-name\",\"clause-name\",-996419059).cljs$core$IFn$_invoke$arity$1(cljs.core.meta((((typeof metabase !== 'undefined') && (typeof metabase.mbql !== 'undefined') && (typeof metabase.mbql.schema !== 'undefined') && (typeof metabase.mbql.schema.rtrim !== 'undefined'))?(new cljs.core.Var((function (){\nreturn metabase.mbql.schema.rtrim;\n}),cljs.core.with_meta(new cljs.core.Symbol(\"metabase.mbql.schema\",\"rtrim\",\"metabase.mbql.schema/rtrim\",1937815937,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(\"cljs.analyzer\",\"no-resolve\",\"cljs.analyzer/no-resolve\",-1872351017),true], null)),cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null,\"requires-features\",\"requires-features\",-101116256),new cljs.core.Keyword(null,\"ns\",\"ns\",441598760),new cljs.core.Keyword(null,\"name\",\"name\",1843675177),new cljs.core.Keyword(null,\"file\",\"file\",-1269645878),new cljs.core.Keyword(null,\"end-column\",\"end-column\",1425389514),new cljs.core.Keyword(null,\"clause-name\",\"clause-name\",-996419059),new cljs.core.Keyword(null,\"column\",\"column\",2078222095),new cljs.core.Keyword(null,\"line\",\"line\",212345235),new cljs.core.Keyword(null,\"end-line\",\"end-line\",1837326455),new cljs.core.Keyword(null,\"clause-form\",\"clause-form\",1820463737),new cljs.core.Keyword(null,\"arglists\",\"arglists\",1661989754),new cljs.core.Keyword(null,\"doc\",\"doc\",1913296891),new cljs.core.Keyword(null,\"test\",\"test\",577538877)],[new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"expressions\",\"expressions\",255689909),\"null\"], null), null),cljs.core.with_meta(new cljs.core.Symbol(null,\"metabase.mbql.schema\",\"metabase.mbql.schema\",-408168902,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"doc\",\"doc\",1913296891),\"Schema for validating a *normalized* MBQL query. This is also the definitive grammar for MBQL, wow!\"], null)),new cljs.core.Symbol(null,\"rtrim\",\"rtrim\",979195078,null),\"metabase/mbql/schema.cljc\",55,new cljs.core.Keyword(null,\"rtrim\",\"rtrim\",-661336449),1,609,609,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"rtrim\",\"rtrim\",-661336449),new cljs.core.Keyword(null,\"s\",\"s\",1705939918),cljs.core.list(new cljs.core.Symbol(null,\"quote\",\"quote\",1377916282,null),new cljs.core.Symbol(null,\"StringExpressionArg\",\"StringExpressionArg\",-1131357258,null))], null),cljs.core.List.EMPTY,\"Schema for a valid rtrim clause.\",(cljs.core.truth_(metabase.mbql.schema.rtrim)?metabase.mbql.schema.rtrim.cljs$lang$test:null)]))):null)));\nif(cljs.core.truth_(or__5045__auto__)){\nreturn or__5045__auto__;\n} else {\nreturn new cljs.core.Symbol(null,\"rtrim\",\"rtrim\",979195078,null);\n}\n})(),metabase.mbql.schema.rtrim], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var or__5045__auto__ = new cljs.core.Keyword(null,\"clause-name\",\"clause-name\",-996419059).cljs$core$IFn$_invoke$arity$1(cljs.core.meta((((typeof metabase !== 'undefined') && (typeof metabase.mbql !== 'undefined') && (typeof metabase.mbql.schema !== 'undefined') && (typeof metabase.mbql.schema.replace !== 'undefined'))?(new cljs.core.Var((function (){\nreturn metabase.mbql.schema.replace;\n}),cljs.core.with_meta(new cljs.core.Symbol(\"metabase.mbql.schema\",\"replace\",\"metabase.mbql.schema/replace\",1269362826,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(\"cljs.analyzer\",\"no-resolve\",\"cljs.analyzer/no-resolve\",-1872351017),true], null)),cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null,\"requires-features\",\"requires-features\",-101116256),new cljs.core.Keyword(null,\"ns\",\"ns\",441598760),new cljs.core.Keyword(null,\"name\",\"name\",1843675177),new cljs.core.Keyword(null,\"file\",\"file\",-1269645878),new cljs.core.Keyword(null,\"end-column\",\"end-column\",1425389514),new cljs.core.Keyword(null,\"clause-name\",\"clause-name\",-996419059),new cljs.core.Keyword(null,\"column\",\"column\",2078222095),new cljs.core.Keyword(null,\"line\",\"line\",212345235),new cljs.core.Keyword(null,\"end-line\",\"end-line\",1837326455),new cljs.core.Keyword(null,\"clause-form\",\"clause-form\",1820463737),new cljs.core.Keyword(null,\"arglists\",\"arglists\",1661989754),new cljs.core.Keyword(null,\"doc\",\"doc\",1913296891),new cljs.core.Keyword(null,\"test\",\"test\",577538877)],[new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"expressions\",\"expressions\",255689909),\"null\"], null), null),cljs.core.with_meta(new cljs.core.Symbol(null,\"metabase.mbql.schema\",\"metabase.mbql.schema\",-408168902,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"doc\",\"doc\",1913296891),\"Schema for validating a *normalized* MBQL query. This is also the definitive grammar for MBQL, wow!\"], null)),new cljs.core.Symbol(null,\"replace\",\"replace\",853943757,null),\"metabase/mbql/schema.cljc\",57,new cljs.core.Keyword(null,\"replace\",\"replace\",-786587770),1,621,621,new cljs.core.PersistentVector(null, 7, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"replace\",\"replace\",-786587770),new cljs.core.Keyword(null,\"s\",\"s\",1705939918),cljs.core.list(new cljs.core.Symbol(null,\"quote\",\"quote\",1377916282,null),new cljs.core.Symbol(null,\"StringExpressionArg\",\"StringExpressionArg\",-1131357258,null)),new cljs.core.Keyword(null,\"match\",\"match\",1220059550),cljs.core.list(new cljs.core.Symbol(null,\"quote\",\"quote\",1377916282,null),new cljs.core.Symbol(\"s\",\"Str\",\"s/Str\",907974338,null)),new cljs.core.Keyword(null,\"replacement\",\"replacement\",-1836238839),cljs.core.list(new cljs.core.Symbol(null,\"quote\",\"quote\",1377916282,null),new cljs.core.Symbol(\"s\",\"Str\",\"s/Str\",907974338,null))], null),cljs.core.List.EMPTY,\"Schema for a valid replace clause.\",(cljs.core.truth_(metabase.mbql.schema.replace)?metabase.mbql.schema.replace.cljs$lang$test:null)]))):null)));\nif(cljs.core.truth_(or__5045__auto__)){\nreturn or__5045__auto__;\n} else {\nreturn new cljs.core.Symbol(null,\"replace\",\"replace\",853943757,null);\n}\n})(),metabase.mbql.schema.replace], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var or__5045__auto__ = new cljs.core.Keyword(null,\"clause-name\",\"clause-name\",-996419059).cljs$core$IFn$_invoke$arity$1(cljs.core.meta((((typeof metabase !== 'undefined') && (typeof metabase.mbql !== 'undefined') && (typeof metabase.mbql.schema !== 'undefined') && (typeof metabase.mbql.schema.lower !== 'undefined'))?(new cljs.core.Var((function (){\nreturn metabase.mbql.schema.lower;\n}),cljs.core.with_meta(new cljs.core.Symbol(\"metabase.mbql.schema\",\"lower\",\"metabase.mbql.schema/lower\",-313920313,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(\"cljs.analyzer\",\"no-resolve\",\"cljs.analyzer/no-resolve\",-1872351017),true], null)),cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null,\"requires-features\",\"requires-features\",-101116256),new cljs.core.Keyword(null,\"ns\",\"ns\",441598760),new cljs.core.Keyword(null,\"name\",\"name\",1843675177),new cljs.core.Keyword(null,\"file\",\"file\",-1269645878),new cljs.core.Keyword(null,\"end-column\",\"end-column\",1425389514),new cljs.core.Keyword(null,\"clause-name\",\"clause-name\",-996419059),new cljs.core.Keyword(null,\"column\",\"column\",2078222095),new cljs.core.Keyword(null,\"line\",\"line\",212345235),new cljs.core.Keyword(null,\"end-line\",\"end-line\",1837326455),new cljs.core.Keyword(null,\"clause-form\",\"clause-form\",1820463737),new cljs.core.Keyword(null,\"arglists\",\"arglists\",1661989754),new cljs.core.Keyword(null,\"doc\",\"doc\",1913296891),new cljs.core.Keyword(null,\"test\",\"test\",577538877)],[new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"expressions\",\"expressions\",255689909),\"null\"], null), null),cljs.core.with_meta(new cljs.core.Symbol(null,\"metabase.mbql.schema\",\"metabase.mbql.schema\",-408168902,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"doc\",\"doc\",1913296891),\"Schema for validating a *normalized* MBQL query. This is also the definitive grammar for MBQL, wow!\"], null)),new cljs.core.Symbol(null,\"lower\",\"lower\",-1534114948,null),\"metabase/mbql/schema.cljc\",55,new cljs.core.Keyword(null,\"lower\",\"lower\",1120320821),1,618,618,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"lower\",\"lower\",1120320821),new cljs.core.Keyword(null,\"s\",\"s\",1705939918),cljs.core.list(new cljs.core.Symbol(null,\"quote\",\"quote\",1377916282,null),new cljs.core.Symbol(null,\"StringExpressionArg\",\"StringExpressionArg\",-1131357258,null))], null),cljs.core.List.EMPTY,\"Schema for a valid lower clause.\",(cljs.core.truth_(metabase.mbql.schema.lower)?metabase.mbql.schema.lower.cljs$lang$test:null)]))):null)));\nif(cljs.core.truth_(or__5045__auto__)){\nreturn or__5045__auto__;\n} else {\nreturn new cljs.core.Symbol(null,\"lower\",\"lower\",-1534114948,null);\n}\n})(),metabase.mbql.schema.lower], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var or__5045__auto__ = new cljs.core.Keyword(null,\"clause-name\",\"clause-name\",-996419059).cljs$core$IFn$_invoke$arity$1(cljs.core.meta((((typeof metabase !== 'undefined') && (typeof metabase.mbql !== 'undefined') && (typeof metabase.mbql.schema !== 'undefined') && (typeof metabase.mbql.schema.upper !== 'undefined'))?(new cljs.core.Var((function (){\nreturn metabase.mbql.schema.upper;\n}),cljs.core.with_meta(new cljs.core.Symbol(\"metabase.mbql.schema\",\"upper\",\"metabase.mbql.schema/upper\",993691634,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(\"cljs.analyzer\",\"no-resolve\",\"cljs.analyzer/no-resolve\",-1872351017),true], null)),cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null,\"requires-features\",\"requires-features\",-101116256),new cljs.core.Keyword(null,\"ns\",\"ns\",441598760),new cljs.core.Keyword(null,\"name\",\"name\",1843675177),new cljs.core.Keyword(null,\"file\",\"file\",-1269645878),new cljs.core.Keyword(null,\"end-column\",\"end-column\",1425389514),new cljs.core.Keyword(null,\"clause-name\",\"clause-name\",-996419059),new cljs.core.Keyword(null,\"column\",\"column\",2078222095),new cljs.core.Keyword(null,\"line\",\"line\",212345235),new cljs.core.Keyword(null,\"end-line\",\"end-line\",1837326455),new cljs.core.Keyword(null,\"clause-form\",\"clause-form\",1820463737),new cljs.core.Keyword(null,\"arglists\",\"arglists\",1661989754),new cljs.core.Keyword(null,\"doc\",\"doc\",1913296891),new cljs.core.Keyword(null,\"test\",\"test\",577538877)],[new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"expressions\",\"expressions\",255689909),\"null\"], null), null),cljs.core.with_meta(new cljs.core.Symbol(null,\"metabase.mbql.schema\",\"metabase.mbql.schema\",-408168902,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"doc\",\"doc\",1913296891),\"Schema for validating a *normalized* MBQL query. This is also the definitive grammar for MBQL, wow!\"], null)),new cljs.core.Symbol(null,\"upper\",\"upper\",1886775433,null),\"metabase/mbql/schema.cljc\",55,new cljs.core.Keyword(null,\"upper\",\"upper\",246243906),1,615,615,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"upper\",\"upper\",246243906),new cljs.core.Keyword(null,\"s\",\"s\",1705939918),cljs.core.list(new cljs.core.Symbol(null,\"quote\",\"quote\",1377916282,null),new cljs.core.Symbol(null,\"StringExpressionArg\",\"StringExpressionArg\",-1131357258,null))], null),cljs.core.List.EMPTY,\"Schema for a valid upper clause.\",(cljs.core.truth_(metabase.mbql.schema.upper)?metabase.mbql.schema.upper.cljs$lang$test:null)]))):null)));\nif(cljs.core.truth_(or__5045__auto__)){\nreturn or__5045__auto__;\n} else {\nreturn new cljs.core.Symbol(null,\"upper\",\"upper\",1886775433,null);\n}\n})(),metabase.mbql.schema.upper], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var or__5045__auto__ = new cljs.core.Keyword(null,\"clause-name\",\"clause-name\",-996419059).cljs$core$IFn$_invoke$arity$1(cljs.core.meta((((typeof metabase !== 'undefined') && (typeof metabase.mbql !== 'undefined') && (typeof metabase.mbql.schema !== 'undefined') && (typeof metabase.mbql.schema.concat !== 'undefined'))?(new cljs.core.Var((function (){\nreturn metabase.mbql.schema.concat;\n}),cljs.core.with_meta(new cljs.core.Symbol(\"metabase.mbql.schema\",\"concat\",\"metabase.mbql.schema/concat\",-580718778,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(\"cljs.analyzer\",\"no-resolve\",\"cljs.analyzer/no-resolve\",-1872351017),true], null)),cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null,\"requires-features\",\"requires-features\",-101116256),new cljs.core.Keyword(null,\"ns\",\"ns\",441598760),new cljs.core.Keyword(null,\"name\",\"name\",1843675177),new cljs.core.Keyword(null,\"file\",\"file\",-1269645878),new cljs.core.Keyword(null,\"end-column\",\"end-column\",1425389514),new cljs.core.Keyword(null,\"clause-name\",\"clause-name\",-996419059),new cljs.core.Keyword(null,\"column\",\"column\",2078222095),new cljs.core.Keyword(null,\"line\",\"line\",212345235),new cljs.core.Keyword(null,\"end-line\",\"end-line\",1837326455),new cljs.core.Keyword(null,\"clause-form\",\"clause-form\",1820463737),new cljs.core.Keyword(null,\"arglists\",\"arglists\",1661989754),new cljs.core.Keyword(null,\"doc\",\"doc\",1913296891),new cljs.core.Keyword(null,\"test\",\"test\",577538877)],[new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"expressions\",\"expressions\",255689909),\"null\"], null), null),cljs.core.with_meta(new cljs.core.Symbol(null,\"metabase.mbql.schema\",\"metabase.mbql.schema\",-408168902,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"doc\",\"doc\",1913296891),\"Schema for validating a *normalized* MBQL query. This is also the definitive grammar for MBQL, wow!\"], null)),new cljs.core.Symbol(null,\"concat\",\"concat\",-467652465,null),\"metabase/mbql/schema.cljc\",56,new cljs.core.Keyword(null,\"concat\",\"concat\",-2108183992),1,624,624,new cljs.core.PersistentVector(null, 7, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"concat\",\"concat\",-2108183992),new cljs.core.Keyword(null,\"a\",\"a\",-2123407586),cljs.core.list(new cljs.core.Symbol(null,\"quote\",\"quote\",1377916282,null),new cljs.core.Symbol(null,\"StringExpressionArg\",\"StringExpressionArg\",-1131357258,null)),new cljs.core.Keyword(null,\"b\",\"b\",1482224470),cljs.core.list(new cljs.core.Symbol(null,\"quote\",\"quote\",1377916282,null),new cljs.core.Symbol(null,\"StringExpressionArg\",\"StringExpressionArg\",-1131357258,null)),new cljs.core.Keyword(null,\"more\",\"more\",-2058821800),cljs.core.list(new cljs.core.Symbol(null,\"quote\",\"quote\",1377916282,null),cljs.core.list(new cljs.core.Symbol(null,\"rest\",\"rest\",398835108,null),new cljs.core.Symbol(null,\"StringExpressionArg\",\"StringExpressionArg\",-1131357258,null)))], null),cljs.core.List.EMPTY,\"Schema for a valid concat clause.\",(cljs.core.truth_(metabase.mbql.schema.concat)?metabase.mbql.schema.concat.cljs$lang$test:null)]))):null)));\nif(cljs.core.truth_(or__5045__auto__)){\nreturn or__5045__auto__;\n} else {\nreturn new cljs.core.Symbol(null,\"concat\",\"concat\",-467652465,null);\n}\n})(),metabase.mbql.schema.concat], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var or__5045__auto__ = new cljs.core.Keyword(null,\"clause-name\",\"clause-name\",-996419059).cljs$core$IFn$_invoke$arity$1(cljs.core.meta((((typeof metabase !== 'undefined') && (typeof metabase.mbql !== 'undefined') && (typeof metabase.mbql.schema !== 'undefined') && (typeof metabase.mbql.schema.regex_match_first !== 'undefined'))?(new cljs.core.Var((function (){\nreturn metabase.mbql.schema.regex_match_first;\n}),cljs.core.with_meta(new cljs.core.Symbol(\"metabase.mbql.schema\",\"regex-match-first\",\"metabase.mbql.schema/regex-match-first\",1918122376,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(\"cljs.analyzer\",\"no-resolve\",\"cljs.analyzer/no-resolve\",-1872351017),true], null)),cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null,\"requires-features\",\"requires-features\",-101116256),new cljs.core.Keyword(null,\"ns\",\"ns\",441598760),new cljs.core.Keyword(null,\"name\",\"name\",1843675177),new cljs.core.Keyword(null,\"file\",\"file\",-1269645878),new cljs.core.Keyword(null,\"end-column\",\"end-column\",1425389514),new cljs.core.Keyword(null,\"clause-name\",\"clause-name\",-996419059),new cljs.core.Keyword(null,\"column\",\"column\",2078222095),new cljs.core.Keyword(null,\"line\",\"line\",212345235),new cljs.core.Keyword(null,\"end-line\",\"end-line\",1837326455),new cljs.core.Keyword(null,\"clause-form\",\"clause-form\",1820463737),new cljs.core.Keyword(null,\"arglists\",\"arglists\",1661989754),new cljs.core.Keyword(null,\"doc\",\"doc\",1913296891),new cljs.core.Keyword(null,\"test\",\"test\",577538877)],[new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"expressions\",\"expressions\",255689909),\"null\",new cljs.core.Keyword(null,\"regex\",\"regex\",939488856),\"null\"], null), null),cljs.core.with_meta(new cljs.core.Symbol(null,\"metabase.mbql.schema\",\"metabase.mbql.schema\",-408168902,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"doc\",\"doc\",1913296891),\"Schema for validating a *normalized* MBQL query. This is also the definitive grammar for MBQL, wow!\"], null)),new cljs.core.Symbol(null,\"regex-match-first\",\"regex-match-first\",983231809,null),\"metabase/mbql/schema.cljc\",74,new cljs.core.Keyword(null,\"regex-match-first\",\"regex-match-first\",-657299718),1,627,627,new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"regex-match-first\",\"regex-match-first\",-657299718),new cljs.core.Keyword(null,\"s\",\"s\",1705939918),cljs.core.list(new cljs.core.Symbol(null,\"quote\",\"quote\",1377916282,null),new cljs.core.Symbol(null,\"StringExpressionArg\",\"StringExpressionArg\",-1131357258,null)),new cljs.core.Keyword(null,\"pattern\",\"pattern\",242135423),cljs.core.list(new cljs.core.Symbol(null,\"quote\",\"quote\",1377916282,null),new cljs.core.Symbol(\"s\",\"Str\",\"s/Str\",907974338,null))], null),cljs.core.List.EMPTY,\"Schema for a valid regex-match-first clause.\",(cljs.core.truth_(metabase.mbql.schema.regex_match_first)?metabase.mbql.schema.regex_match_first.cljs$lang$test:null)]))):null)));\nif(cljs.core.truth_(or__5045__auto__)){\nreturn or__5045__auto__;\n} else {\nreturn new cljs.core.Symbol(null,\"regex-match-first\",\"regex-match-first\",983231809,null);\n}\n})(),metabase.mbql.schema.regex_match_first], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var or__5045__auto__ = new cljs.core.Keyword(null,\"clause-name\",\"clause-name\",-996419059).cljs$core$IFn$_invoke$arity$1(cljs.core.meta((((typeof metabase !== 'undefined') && (typeof metabase.mbql !== 'undefined') && (typeof metabase.mbql.schema !== 'undefined') && (typeof metabase.mbql.schema.coalesce !== 'undefined'))?(new cljs.core.Var((function (){\nreturn metabase.mbql.schema.coalesce;\n}),cljs.core.with_meta(new cljs.core.Symbol(\"metabase.mbql.schema\",\"coalesce\",\"metabase.mbql.schema/coalesce\",-1048570669,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(\"cljs.analyzer\",\"no-resolve\",\"cljs.analyzer/no-resolve\",-1872351017),true], null)),cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null,\"requires-features\",\"requires-features\",-101116256),new cljs.core.Keyword(null,\"ns\",\"ns\",441598760),new cljs.core.Keyword(null,\"name\",\"name\",1843675177),new cljs.core.Keyword(null,\"file\",\"file\",-1269645878),new cljs.core.Keyword(null,\"end-column\",\"end-column\",1425389514),new cljs.core.Keyword(null,\"clause-name\",\"clause-name\",-996419059),new cljs.core.Keyword(null,\"column\",\"column\",2078222095),new cljs.core.Keyword(null,\"line\",\"line\",212345235),new cljs.core.Keyword(null,\"end-line\",\"end-line\",1837326455),new cljs.core.Keyword(null,\"clause-form\",\"clause-form\",1820463737),new cljs.core.Keyword(null,\"arglists\",\"arglists\",1661989754),new cljs.core.Keyword(null,\"doc\",\"doc\",1913296891),new cljs.core.Keyword(null,\"test\",\"test\",577538877)],[new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"expressions\",\"expressions\",255689909),\"null\"], null), null),cljs.core.with_meta(new cljs.core.Symbol(null,\"metabase.mbql.schema\",\"metabase.mbql.schema\",-408168902,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"doc\",\"doc\",1913296891),\"Schema for validating a *normalized* MBQL query. This is also the definitive grammar for MBQL, wow!\"], null)),new cljs.core.Symbol(null,\"coalesce\",\"coalesce\",-1999813740,null),\"metabase/mbql/schema.cljc\",58,new cljs.core.Keyword(null,\"coalesce\",\"coalesce\",654622029),1,597,597,new cljs.core.PersistentVector(null, 7, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"coalesce\",\"coalesce\",654622029),new cljs.core.Keyword(null,\"a\",\"a\",-2123407586),cljs.core.list(new cljs.core.Symbol(null,\"quote\",\"quote\",1377916282,null),new cljs.core.Symbol(null,\"ExpressionArg\",\"ExpressionArg\",1060743736,null)),new cljs.core.Keyword(null,\"b\",\"b\",1482224470),cljs.core.list(new cljs.core.Symbol(null,\"quote\",\"quote\",1377916282,null),new cljs.core.Symbol(null,\"ExpressionArg\",\"ExpressionArg\",1060743736,null)),new cljs.core.Keyword(null,\"more\",\"more\",-2058821800),cljs.core.list(new cljs.core.Symbol(null,\"quote\",\"quote\",1377916282,null),cljs.core.list(new cljs.core.Symbol(null,\"rest\",\"rest\",398835108,null),new cljs.core.Symbol(null,\"ExpressionArg\",\"ExpressionArg\",1060743736,null)))], null),cljs.core.List.EMPTY,\"Schema for a valid coalesce clause.\",(cljs.core.truth_(metabase.mbql.schema.coalesce)?metabase.mbql.schema.coalesce.cljs$lang$test:null)]))):null)));\nif(cljs.core.truth_(or__5045__auto__)){\nreturn or__5045__auto__;\n} else {\nreturn new cljs.core.Symbol(null,\"coalesce\",\"coalesce\",-1999813740,null);\n}\n})(),metabase.mbql.schema.coalesce], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var or__5045__auto__ = new cljs.core.Keyword(null,\"clause-name\",\"clause-name\",-996419059).cljs$core$IFn$_invoke$arity$1(cljs.core.meta((((typeof metabase !== 'undefined') && (typeof metabase.mbql !== 'undefined') && (typeof metabase.mbql.schema !== 'undefined') && (typeof metabase.mbql.schema.case$ !== 'undefined'))?(new cljs.core.Var((function (){\nreturn metabase.mbql.schema.case$;\n}),cljs.core.with_meta(new cljs.core.Symbol(\"metabase.mbql.schema\",\"case\",\"metabase.mbql.schema/case\",2100482976,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(\"cljs.analyzer\",\"no-resolve\",\"cljs.analyzer/no-resolve\",-1872351017),true], null)),cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null,\"requires-features\",\"requires-features\",-101116256),new cljs.core.Keyword(null,\"ns\",\"ns\",441598760),new cljs.core.Keyword(null,\"name\",\"name\",1843675177),new cljs.core.Keyword(null,\"file\",\"file\",-1269645878),new cljs.core.Keyword(null,\"end-column\",\"end-column\",1425389514),new cljs.core.Keyword(null,\"clause-name\",\"clause-name\",-996419059),new cljs.core.Keyword(null,\"column\",\"column\",2078222095),new cljs.core.Keyword(null,\"line\",\"line\",212345235),new cljs.core.Keyword(null,\"end-line\",\"end-line\",1837326455),new cljs.core.Keyword(null,\"clause-form\",\"clause-form\",1820463737),new cljs.core.Keyword(null,\"arglists\",\"arglists\",1661989754),new cljs.core.Keyword(null,\"doc\",\"doc\",1913296891),new cljs.core.Keyword(null,\"test\",\"test\",577538877)],[new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"basic-aggregations\",\"basic-aggregations\",-1628959228),\"null\"], null), null),cljs.core.with_meta(new cljs.core.Symbol(null,\"metabase.mbql.schema\",\"metabase.mbql.schema\",-408168902,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"doc\",\"doc\",1913296891),\"Schema for validating a *normalized* MBQL query. This is also the definitive grammar for MBQL, wow!\"], null)),new cljs.core.Symbol(null,\"case\",\"case\",-1510733573,null),\"metabase/mbql/schema.cljc\",61,new cljs.core.Keyword(null,\"case\",\"case\",1143702196),1,916,916,new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"case\",\"case\",1143702196),new cljs.core.Keyword(null,\"clauses\",\"clauses\",1454841241),cljs.core.list(new cljs.core.Symbol(null,\"quote\",\"quote\",1377916282,null),new cljs.core.Symbol(null,\"CaseClauses\",\"CaseClauses\",-1749071354,null)),new cljs.core.Keyword(null,\"options\",\"options\",99638489),cljs.core.list(new cljs.core.Symbol(null,\"quote\",\"quote\",1377916282,null),cljs.core.list(new cljs.core.Symbol(null,\"optional\",\"optional\",-600484260,null),new cljs.core.Symbol(null,\"CaseOptions\",\"CaseOptions\",1989286806,null)))], null),cljs.core.List.EMPTY,\"Schema for a valid case clause.\",(cljs.core.truth_(metabase.mbql.schema.case$)?metabase.mbql.schema.case$.cljs$lang$test:null)]))):null)));\nif(cljs.core.truth_(or__5045__auto__)){\nreturn or__5045__auto__;\n} else {\nreturn new cljs.core.Symbol(null,\"case\",\"case\",-1510733573,null);\n}\n})(),metabase.mbql.schema.case$], null)], 0));\n/**\n * Schema for anything that is accepted as a top-level expression definition, either an arithmetic expression such as a\n *   `:+` clause or a `:field` clause.\n */\nmetabase.mbql.schema.FieldOrExpressionDef = schema.core.conditional.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([cljs.core.partial.cljs$core$IFn$_invoke$arity$2(metabase.mbql.schema.helpers.is_clause_QMARK_,metabase.mbql.schema.numeric_functions),metabase.mbql.schema.NumericExpression,cljs.core.partial.cljs$core$IFn$_invoke$arity$2(metabase.mbql.schema.helpers.is_clause_QMARK_,metabase.mbql.schema.string_functions),metabase.mbql.schema.StringExpression,cljs.core.partial.cljs$core$IFn$_invoke$arity$2(metabase.mbql.schema.helpers.is_clause_QMARK_,metabase.mbql.schema.boolean_functions),metabase.mbql.schema.BooleanExpression,cljs.core.partial.cljs$core$IFn$_invoke$arity$2(metabase.mbql.schema.helpers.is_clause_QMARK_,metabase.mbql.schema.datetime_functions),metabase.mbql.schema.DatetimeExpression,cljs.core.partial.cljs$core$IFn$_invoke$arity$2(metabase.mbql.schema.helpers.is_clause_QMARK_,new cljs.core.Keyword(null,\"case\",\"case\",1143702196)),metabase.mbql.schema.case$,new cljs.core.Keyword(null,\"else\",\"else\",-1508377146),metabase.mbql.schema.Field], 0));\n/**\n * Schema for a valid count clause.\n */\nmetabase.mbql.schema.count = metabase.mbql.schema.helpers.clause.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,\"count\",\"count\",2139924085),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([\"field\",new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"optional\",\"optional\",2053951509),metabase.mbql.schema.Field], null)], 0));\n/**\n * Schema for a valid cum-count clause.\n */\nmetabase.mbql.schema.cum_count = metabase.mbql.schema.helpers.clause.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,\"cum-count\",\"cum-count\",-1964431543),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([\"field\",new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"optional\",\"optional\",2053951509),metabase.mbql.schema.Field], null)], 0));\n/**\n * Schema for a valid avg clause.\n */\nmetabase.mbql.schema.avg = metabase.mbql.schema.helpers.clause.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,\"avg\",\"avg\",197406200),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([\"field-or-expression\",metabase.mbql.schema.FieldOrExpressionDef], 0));\n/**\n * Schema for a valid cum-sum clause.\n */\nmetabase.mbql.schema.cum_sum = metabase.mbql.schema.helpers.clause.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,\"cum-sum\",\"cum-sum\",2064902349),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([\"field-or-expression\",metabase.mbql.schema.FieldOrExpressionDef], 0));\n/**\n * Schema for a valid distinct clause.\n */\nmetabase.mbql.schema.distinct = metabase.mbql.schema.helpers.clause.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,\"distinct\",\"distinct\",-1788879121),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([\"field-or-expression\",metabase.mbql.schema.FieldOrExpressionDef], 0));\n/**\n * Schema for a valid sum clause.\n */\nmetabase.mbql.schema.sum = metabase.mbql.schema.helpers.clause.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,\"sum\",\"sum\",136986814),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([\"field-or-expression\",metabase.mbql.schema.FieldOrExpressionDef], 0));\n/**\n * Schema for a valid min clause.\n */\nmetabase.mbql.schema.min = metabase.mbql.schema.helpers.clause.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,\"min\",\"min\",444991522),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([\"field-or-expression\",metabase.mbql.schema.FieldOrExpressionDef], 0));\n/**\n * Schema for a valid max clause.\n */\nmetabase.mbql.schema.max = metabase.mbql.schema.helpers.clause.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,\"max\",\"max\",61366548),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([\"field-or-expression\",metabase.mbql.schema.FieldOrExpressionDef], 0));\n/**\n * Schema for a valid sum-where clause.\n */\nmetabase.mbql.schema.sum_where = metabase.mbql.schema.helpers.clause.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,\"sum-where\",\"sum-where\",2135348428),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([\"field-or-expression\",metabase.mbql.schema.FieldOrExpressionDef,\"pred\",metabase.mbql.schema.Filter], 0));\n/**\n * Schema for a valid count-where clause.\n */\nmetabase.mbql.schema.count_where = metabase.mbql.schema.helpers.clause.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,\"count-where\",\"count-where\",385407720),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([\"pred\",metabase.mbql.schema.Filter], 0));\n/**\n * Schema for a valid share clause.\n */\nmetabase.mbql.schema.share = metabase.mbql.schema.helpers.clause.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,\"share\",\"share\",-589433933),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([\"pred\",metabase.mbql.schema.Filter], 0));\n/**\n * Schema for a valid stddev clause.\n */\nmetabase.mbql.schema.stddev = metabase.mbql.schema.helpers.clause.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,\"stddev\",\"stddev\",-865474939),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([\"field-or-expression\",metabase.mbql.schema.FieldOrExpressionDef], 0));\n/**\n * Schema for a valid var clause.\n */\nmetabase.mbql.schema.ag_COLON_var = metabase.mbql.schema.helpers.clause.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,\"var\",\"var\",-769682797),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([\"field-or-expression\",metabase.mbql.schema.FieldOrExpressionDef], 0));\n/**\n * Schema for a valid median clause.\n */\nmetabase.mbql.schema.median = metabase.mbql.schema.helpers.clause.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,\"median\",\"median\",569566131),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([\"field-or-expression\",metabase.mbql.schema.FieldOrExpressionDef], 0));\n/**\n * Schema for a valid percentile clause.\n */\nmetabase.mbql.schema.percentile = metabase.mbql.schema.helpers.clause.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,\"percentile\",\"percentile\",-601188752),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([\"field-or-expression\",metabase.mbql.schema.FieldOrExpressionDef,\"percentile\",metabase.mbql.schema.NumericExpressionArg], 0));\n/**\n * Schema for a valid metric clause.\n */\nmetabase.mbql.schema.metric = metabase.mbql.schema.helpers.clause.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,\"metric\",\"metric\",408798077),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([\"metric-id\",schema.core.cond_pre.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([metabase.mbql.schema.helpers.IntGreaterThanZero,metabase.mbql.schema.helpers.NonBlankString], 0))], 0));\nmetabase.mbql.schema.UnnamedAggregation_STAR_ = schema.core.if$(cljs.core.partial.cljs$core$IFn$_invoke$arity$2(metabase.mbql.schema.helpers.is_clause_QMARK_,metabase.mbql.schema.numeric_functions),metabase.mbql.schema.NumericExpression,metabase.mbql.schema.helpers.one_of_STAR_.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var or__5045__auto__ = new cljs.core.Keyword(null,\"clause-name\",\"clause-name\",-996419059).cljs$core$IFn$_invoke$arity$1(cljs.core.meta((((typeof metabase !== 'undefined') && (typeof metabase.mbql !== 'undefined') && (typeof metabase.mbql.schema !== 'undefined') && (typeof metabase.mbql.schema.avg !== 'undefined'))?(new cljs.core.Var((function (){\nreturn metabase.mbql.schema.avg;\n}),cljs.core.with_meta(new cljs.core.Symbol(\"metabase.mbql.schema\",\"avg\",\"metabase.mbql.schema/avg\",-1530848906,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(\"cljs.analyzer\",\"no-resolve\",\"cljs.analyzer/no-resolve\",-1872351017),true], null)),cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null,\"requires-features\",\"requires-features\",-101116256),new cljs.core.Keyword(null,\"ns\",\"ns\",441598760),new cljs.core.Keyword(null,\"name\",\"name\",1843675177),new cljs.core.Keyword(null,\"file\",\"file\",-1269645878),new cljs.core.Keyword(null,\"end-column\",\"end-column\",1425389514),new cljs.core.Keyword(null,\"clause-name\",\"clause-name\",-996419059),new cljs.core.Keyword(null,\"column\",\"column\",2078222095),new cljs.core.Keyword(null,\"line\",\"line\",212345235),new cljs.core.Keyword(null,\"end-line\",\"end-line\",1837326455),new cljs.core.Keyword(null,\"clause-form\",\"clause-form\",1820463737),new cljs.core.Keyword(null,\"arglists\",\"arglists\",1661989754),new cljs.core.Keyword(null,\"doc\",\"doc\",1913296891),new cljs.core.Keyword(null,\"test\",\"test\",577538877)],[new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"basic-aggregations\",\"basic-aggregations\",-1628959228),\"null\"], null), null),cljs.core.with_meta(new cljs.core.Symbol(null,\"metabase.mbql.schema\",\"metabase.mbql.schema\",-408168902,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"doc\",\"doc\",1913296891),\"Schema for validating a *normalized* MBQL query. This is also the definitive grammar for MBQL, wow!\"], null)),new cljs.core.Symbol(null,\"avg\",\"avg\",1837937727,null),\"metabase/mbql/schema.cljc\",60,new cljs.core.Keyword(null,\"avg\",\"avg\",197406200),1,955,955,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"avg\",\"avg\",197406200),new cljs.core.Keyword(null,\"field-or-expression\",\"field-or-expression\",-1409494368),cljs.core.list(new cljs.core.Symbol(null,\"quote\",\"quote\",1377916282,null),new cljs.core.Symbol(null,\"FieldOrExpressionDef\",\"FieldOrExpressionDef\",-788269541,null))], null),cljs.core.List.EMPTY,\"Schema for a valid avg clause.\",(cljs.core.truth_(metabase.mbql.schema.avg)?metabase.mbql.schema.avg.cljs$lang$test:null)]))):null)));\nif(cljs.core.truth_(or__5045__auto__)){\nreturn or__5045__auto__;\n} else {\nreturn new cljs.core.Symbol(null,\"avg\",\"avg\",1837937727,null);\n}\n})(),metabase.mbql.schema.avg], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var or__5045__auto__ = new cljs.core.Keyword(null,\"clause-name\",\"clause-name\",-996419059).cljs$core$IFn$_invoke$arity$1(cljs.core.meta((((typeof metabase !== 'undefined') && (typeof metabase.mbql !== 'undefined') && (typeof metabase.mbql.schema !== 'undefined') && (typeof metabase.mbql.schema.cum_sum !== 'undefined'))?(new cljs.core.Var((function (){\nreturn metabase.mbql.schema.cum_sum;\n}),cljs.core.with_meta(new cljs.core.Symbol(\"metabase.mbql.schema\",\"cum-sum\",\"metabase.mbql.schema/cum-sum\",-2078342061,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(\"cljs.analyzer\",\"no-resolve\",\"cljs.analyzer/no-resolve\",-1872351017),true], null)),cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null,\"requires-features\",\"requires-features\",-101116256),new cljs.core.Keyword(null,\"ns\",\"ns\",441598760),new cljs.core.Keyword(null,\"name\",\"name\",1843675177),new cljs.core.Keyword(null,\"file\",\"file\",-1269645878),new cljs.core.Keyword(null,\"end-column\",\"end-column\",1425389514),new cljs.core.Keyword(null,\"clause-name\",\"clause-name\",-996419059),new cljs.core.Keyword(null,\"column\",\"column\",2078222095),new cljs.core.Keyword(null,\"line\",\"line\",212345235),new cljs.core.Keyword(null,\"end-line\",\"end-line\",1837326455),new cljs.core.Keyword(null,\"clause-form\",\"clause-form\",1820463737),new cljs.core.Keyword(null,\"arglists\",\"arglists\",1661989754),new cljs.core.Keyword(null,\"doc\",\"doc\",1913296891),new cljs.core.Keyword(null,\"test\",\"test\",577538877)],[new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"basic-aggregations\",\"basic-aggregations\",-1628959228),\"null\"], null), null),cljs.core.with_meta(new cljs.core.Symbol(null,\"metabase.mbql.schema\",\"metabase.mbql.schema\",-408168902,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"doc\",\"doc\",1913296891),\"Schema for validating a *normalized* MBQL query. This is also the definitive grammar for MBQL, wow!\"], null)),new cljs.core.Symbol(null,\"cum-sum\",\"cum-sum\",-589533420,null),\"metabase/mbql/schema.cljc\",64,new cljs.core.Keyword(null,\"cum-sum\",\"cum-sum\",2064902349),1,956,956,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"cum-sum\",\"cum-sum\",2064902349),new cljs.core.Keyword(null,\"field-or-expression\",\"field-or-expression\",-1409494368),cljs.core.list(new cljs.core.Symbol(null,\"quote\",\"quote\",1377916282,null),new cljs.core.Symbol(null,\"FieldOrExpressionDef\",\"FieldOrExpressionDef\",-788269541,null))], null),cljs.core.List.EMPTY,\"Schema for a valid cum-sum clause.\",(cljs.core.truth_(metabase.mbql.schema.cum_sum)?metabase.mbql.schema.cum_sum.cljs$lang$test:null)]))):null)));\nif(cljs.core.truth_(or__5045__auto__)){\nreturn or__5045__auto__;\n} else {\nreturn new cljs.core.Symbol(null,\"cum-sum\",\"cum-sum\",-589533420,null);\n}\n})(),metabase.mbql.schema.cum_sum], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var or__5045__auto__ = new cljs.core.Keyword(null,\"clause-name\",\"clause-name\",-996419059).cljs$core$IFn$_invoke$arity$1(cljs.core.meta((((typeof metabase !== 'undefined') && (typeof metabase.mbql !== 'undefined') && (typeof metabase.mbql.schema !== 'undefined') && (typeof metabase.mbql.schema.distinct !== 'undefined'))?(new cljs.core.Var((function (){\nreturn metabase.mbql.schema.distinct;\n}),cljs.core.with_meta(new cljs.core.Symbol(\"metabase.mbql.schema\",\"distinct\",\"metabase.mbql.schema/distinct\",-823840515,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(\"cljs.analyzer\",\"no-resolve\",\"cljs.analyzer/no-resolve\",-1872351017),true], null)),cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null,\"requires-features\",\"requires-features\",-101116256),new cljs.core.Keyword(null,\"ns\",\"ns\",441598760),new cljs.core.Keyword(null,\"name\",\"name\",1843675177),new cljs.core.Keyword(null,\"file\",\"file\",-1269645878),new cljs.core.Keyword(null,\"end-column\",\"end-column\",1425389514),new cljs.core.Keyword(null,\"clause-name\",\"clause-name\",-996419059),new cljs.core.Keyword(null,\"column\",\"column\",2078222095),new cljs.core.Keyword(null,\"line\",\"line\",212345235),new cljs.core.Keyword(null,\"end-line\",\"end-line\",1837326455),new cljs.core.Keyword(null,\"clause-form\",\"clause-form\",1820463737),new cljs.core.Keyword(null,\"arglists\",\"arglists\",1661989754),new cljs.core.Keyword(null,\"doc\",\"doc\",1913296891),new cljs.core.Keyword(null,\"test\",\"test\",577538877)],[new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"basic-aggregations\",\"basic-aggregations\",-1628959228),\"null\"], null), null),cljs.core.with_meta(new cljs.core.Symbol(null,\"metabase.mbql.schema\",\"metabase.mbql.schema\",-408168902,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"doc\",\"doc\",1913296891),\"Schema for validating a *normalized* MBQL query. This is also the definitive grammar for MBQL, wow!\"], null)),new cljs.core.Symbol(null,\"distinct\",\"distinct\",-148347594,null),\"metabase/mbql/schema.cljc\",65,new cljs.core.Keyword(null,\"distinct\",\"distinct\",-1788879121),1,957,957,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"distinct\",\"distinct\",-1788879121),new cljs.core.Keyword(null,\"field-or-expression\",\"field-or-expression\",-1409494368),cljs.core.list(new cljs.core.Symbol(null,\"quote\",\"quote\",1377916282,null),new cljs.core.Symbol(null,\"FieldOrExpressionDef\",\"FieldOrExpressionDef\",-788269541,null))], null),cljs.core.List.EMPTY,\"Schema for a valid distinct clause.\",(cljs.core.truth_(metabase.mbql.schema.distinct)?metabase.mbql.schema.distinct.cljs$lang$test:null)]))):null)));\nif(cljs.core.truth_(or__5045__auto__)){\nreturn or__5045__auto__;\n} else {\nreturn new cljs.core.Symbol(null,\"distinct\",\"distinct\",-148347594,null);\n}\n})(),metabase.mbql.schema.distinct], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var or__5045__auto__ = new cljs.core.Keyword(null,\"clause-name\",\"clause-name\",-996419059).cljs$core$IFn$_invoke$arity$1(cljs.core.meta((((typeof metabase !== 'undefined') && (typeof metabase.mbql !== 'undefined') && (typeof metabase.mbql.schema !== 'undefined') && (typeof metabase.mbql.schema.stddev !== 'undefined'))?(new cljs.core.Var((function (){\nreturn metabase.mbql.schema.stddev;\n}),cljs.core.with_meta(new cljs.core.Symbol(\"metabase.mbql.schema\",\"stddev\",\"metabase.mbql.schema/stddev\",1735459125,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(\"cljs.analyzer\",\"no-resolve\",\"cljs.analyzer/no-resolve\",-1872351017),true], null)),cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null,\"requires-features\",\"requires-features\",-101116256),new cljs.core.Keyword(null,\"ns\",\"ns\",441598760),new cljs.core.Keyword(null,\"name\",\"name\",1843675177),new cljs.core.Keyword(null,\"file\",\"file\",-1269645878),new cljs.core.Keyword(null,\"end-column\",\"end-column\",1425389514),new cljs.core.Keyword(null,\"clause-name\",\"clause-name\",-996419059),new cljs.core.Keyword(null,\"column\",\"column\",2078222095),new cljs.core.Keyword(null,\"line\",\"line\",212345235),new cljs.core.Keyword(null,\"end-line\",\"end-line\",1837326455),new cljs.core.Keyword(null,\"clause-form\",\"clause-form\",1820463737),new cljs.core.Keyword(null,\"arglists\",\"arglists\",1661989754),new cljs.core.Keyword(null,\"doc\",\"doc\",1913296891),new cljs.core.Keyword(null,\"test\",\"test\",577538877)],[new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"standard-deviation-aggregations\",\"standard-deviation-aggregations\",-1683333464),\"null\"], null), null),cljs.core.with_meta(new cljs.core.Symbol(null,\"metabase.mbql.schema\",\"metabase.mbql.schema\",-408168902,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"doc\",\"doc\",1913296891),\"Schema for validating a *normalized* MBQL query. This is also the definitive grammar for MBQL, wow!\"], null)),new cljs.core.Symbol(null,\"stddev\",\"stddev\",775056588,null),\"metabase/mbql/schema.cljc\",76,new cljs.core.Keyword(null,\"stddev\",\"stddev\",-865474939),1,971,971,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"stddev\",\"stddev\",-865474939),new cljs.core.Keyword(null,\"field-or-expression\",\"field-or-expression\",-1409494368),cljs.core.list(new cljs.core.Symbol(null,\"quote\",\"quote\",1377916282,null),new cljs.core.Symbol(null,\"FieldOrExpressionDef\",\"FieldOrExpressionDef\",-788269541,null))], null),cljs.core.List.EMPTY,\"Schema for a valid stddev clause.\",(cljs.core.truth_(metabase.mbql.schema.stddev)?metabase.mbql.schema.stddev.cljs$lang$test:null)]))):null)));\nif(cljs.core.truth_(or__5045__auto__)){\nreturn or__5045__auto__;\n} else {\nreturn new cljs.core.Symbol(null,\"stddev\",\"stddev\",775056588,null);\n}\n})(),metabase.mbql.schema.stddev], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var or__5045__auto__ = new cljs.core.Keyword(null,\"clause-name\",\"clause-name\",-996419059).cljs$core$IFn$_invoke$arity$1(cljs.core.meta((((typeof metabase !== 'undefined') && (typeof metabase.mbql !== 'undefined') && (typeof metabase.mbql.schema !== 'undefined') && (typeof metabase.mbql.schema.sum !== 'undefined'))?(new cljs.core.Var((function (){\nreturn metabase.mbql.schema.sum;\n}),cljs.core.with_meta(new cljs.core.Symbol(\"metabase.mbql.schema\",\"sum\",\"metabase.mbql.schema/sum\",-1589890100,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(\"cljs.analyzer\",\"no-resolve\",\"cljs.analyzer/no-resolve\",-1872351017),true], null)),cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null,\"requires-features\",\"requires-features\",-101116256),new cljs.core.Keyword(null,\"ns\",\"ns\",441598760),new cljs.core.Keyword(null,\"name\",\"name\",1843675177),new cljs.core.Keyword(null,\"file\",\"file\",-1269645878),new cljs.core.Keyword(null,\"end-column\",\"end-column\",1425389514),new cljs.core.Keyword(null,\"clause-name\",\"clause-name\",-996419059),new cljs.core.Keyword(null,\"column\",\"column\",2078222095),new cljs.core.Keyword(null,\"line\",\"line\",212345235),new cljs.core.Keyword(null,\"end-line\",\"end-line\",1837326455),new cljs.core.Keyword(null,\"clause-form\",\"clause-form\",1820463737),new cljs.core.Keyword(null,\"arglists\",\"arglists\",1661989754),new cljs.core.Keyword(null,\"doc\",\"doc\",1913296891),new cljs.core.Keyword(null,\"test\",\"test\",577538877)],[new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"basic-aggregations\",\"basic-aggregations\",-1628959228),\"null\"], null), null),cljs.core.with_meta(new cljs.core.Symbol(null,\"metabase.mbql.schema\",\"metabase.mbql.schema\",-408168902,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"doc\",\"doc\",1913296891),\"Schema for validating a *normalized* MBQL query. This is also the definitive grammar for MBQL, wow!\"], null)),new cljs.core.Symbol(null,\"sum\",\"sum\",1777518341,null),\"metabase/mbql/schema.cljc\",60,new cljs.core.Keyword(null,\"sum\",\"sum\",136986814),1,958,958,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"sum\",\"sum\",136986814),new cljs.core.Keyword(null,\"field-or-expression\",\"field-or-expression\",-1409494368),cljs.core.list(new cljs.core.Symbol(null,\"quote\",\"quote\",1377916282,null),new cljs.core.Symbol(null,\"FieldOrExpressionDef\",\"FieldOrExpressionDef\",-788269541,null))], null),cljs.core.List.EMPTY,\"Schema for a valid sum clause.\",(cljs.core.truth_(metabase.mbql.schema.sum)?metabase.mbql.schema.sum.cljs$lang$test:null)]))):null)));\nif(cljs.core.truth_(or__5045__auto__)){\nreturn or__5045__auto__;\n} else {\nreturn new cljs.core.Symbol(null,\"sum\",\"sum\",1777518341,null);\n}\n})(),metabase.mbql.schema.sum], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var or__5045__auto__ = new cljs.core.Keyword(null,\"clause-name\",\"clause-name\",-996419059).cljs$core$IFn$_invoke$arity$1(cljs.core.meta((((typeof metabase !== 'undefined') && (typeof metabase.mbql !== 'undefined') && (typeof metabase.mbql.schema !== 'undefined') && (typeof metabase.mbql.schema.min !== 'undefined'))?(new cljs.core.Var((function (){\nreturn metabase.mbql.schema.min;\n}),cljs.core.with_meta(new cljs.core.Symbol(\"metabase.mbql.schema\",\"min\",\"metabase.mbql.schema/min\",-1534510688,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(\"cljs.analyzer\",\"no-resolve\",\"cljs.analyzer/no-resolve\",-1872351017),true], null)),cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null,\"requires-features\",\"requires-features\",-101116256),new cljs.core.Keyword(null,\"ns\",\"ns\",441598760),new cljs.core.Keyword(null,\"name\",\"name\",1843675177),new cljs.core.Keyword(null,\"file\",\"file\",-1269645878),new cljs.core.Keyword(null,\"end-column\",\"end-column\",1425389514),new cljs.core.Keyword(null,\"clause-name\",\"clause-name\",-996419059),new cljs.core.Keyword(null,\"column\",\"column\",2078222095),new cljs.core.Keyword(null,\"line\",\"line\",212345235),new cljs.core.Keyword(null,\"end-line\",\"end-line\",1837326455),new cljs.core.Keyword(null,\"clause-form\",\"clause-form\",1820463737),new cljs.core.Keyword(null,\"arglists\",\"arglists\",1661989754),new cljs.core.Keyword(null,\"doc\",\"doc\",1913296891),new cljs.core.Keyword(null,\"test\",\"test\",577538877)],[new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"basic-aggregations\",\"basic-aggregations\",-1628959228),\"null\"], null), null),cljs.core.with_meta(new cljs.core.Symbol(null,\"metabase.mbql.schema\",\"metabase.mbql.schema\",-408168902,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"doc\",\"doc\",1913296891),\"Schema for validating a *normalized* MBQL query. This is also the definitive grammar for MBQL, wow!\"], null)),new cljs.core.Symbol(null,\"min\",\"min\",2085523049,null),\"metabase/mbql/schema.cljc\",60,new cljs.core.Keyword(null,\"min\",\"min\",444991522),1,959,959,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"min\",\"min\",444991522),new cljs.core.Keyword(null,\"field-or-expression\",\"field-or-expression\",-1409494368),cljs.core.list(new cljs.core.Symbol(null,\"quote\",\"quote\",1377916282,null),new cljs.core.Symbol(null,\"FieldOrExpressionDef\",\"FieldOrExpressionDef\",-788269541,null))], null),cljs.core.List.EMPTY,\"Schema for a valid min clause.\",(cljs.core.truth_(metabase.mbql.schema.min)?metabase.mbql.schema.min.cljs$lang$test:null)]))):null)));\nif(cljs.core.truth_(or__5045__auto__)){\nreturn or__5045__auto__;\n} else {\nreturn new cljs.core.Symbol(null,\"min\",\"min\",2085523049,null);\n}\n})(),metabase.mbql.schema.min], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var or__5045__auto__ = new cljs.core.Keyword(null,\"clause-name\",\"clause-name\",-996419059).cljs$core$IFn$_invoke$arity$1(cljs.core.meta((((typeof metabase !== 'undefined') && (typeof metabase.mbql !== 'undefined') && (typeof metabase.mbql.schema !== 'undefined') && (typeof metabase.mbql.schema.max !== 'undefined'))?(new cljs.core.Var((function (){\nreturn metabase.mbql.schema.max;\n}),cljs.core.with_meta(new cljs.core.Symbol(\"metabase.mbql.schema\",\"max\",\"metabase.mbql.schema/max\",-1397867614,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(\"cljs.analyzer\",\"no-resolve\",\"cljs.analyzer/no-resolve\",-1872351017),true], null)),cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null,\"requires-features\",\"requires-features\",-101116256),new cljs.core.Keyword(null,\"ns\",\"ns\",441598760),new cljs.core.Keyword(null,\"name\",\"name\",1843675177),new cljs.core.Keyword(null,\"file\",\"file\",-1269645878),new cljs.core.Keyword(null,\"end-column\",\"end-column\",1425389514),new cljs.core.Keyword(null,\"clause-name\",\"clause-name\",-996419059),new cljs.core.Keyword(null,\"column\",\"column\",2078222095),new cljs.core.Keyword(null,\"line\",\"line\",212345235),new cljs.core.Keyword(null,\"end-line\",\"end-line\",1837326455),new cljs.core.Keyword(null,\"clause-form\",\"clause-form\",1820463737),new cljs.core.Keyword(null,\"arglists\",\"arglists\",1661989754),new cljs.core.Keyword(null,\"doc\",\"doc\",1913296891),new cljs.core.Keyword(null,\"test\",\"test\",577538877)],[new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"basic-aggregations\",\"basic-aggregations\",-1628959228),\"null\"], null), null),cljs.core.with_meta(new cljs.core.Symbol(null,\"metabase.mbql.schema\",\"metabase.mbql.schema\",-408168902,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"doc\",\"doc\",1913296891),\"Schema for validating a *normalized* MBQL query. This is also the definitive grammar for MBQL, wow!\"], null)),new cljs.core.Symbol(null,\"max\",\"max\",1701898075,null),\"metabase/mbql/schema.cljc\",60,new cljs.core.Keyword(null,\"max\",\"max\",61366548),1,960,960,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"max\",\"max\",61366548),new cljs.core.Keyword(null,\"field-or-expression\",\"field-or-expression\",-1409494368),cljs.core.list(new cljs.core.Symbol(null,\"quote\",\"quote\",1377916282,null),new cljs.core.Symbol(null,\"FieldOrExpressionDef\",\"FieldOrExpressionDef\",-788269541,null))], null),cljs.core.List.EMPTY,\"Schema for a valid max clause.\",(cljs.core.truth_(metabase.mbql.schema.max)?metabase.mbql.schema.max.cljs$lang$test:null)]))):null)));\nif(cljs.core.truth_(or__5045__auto__)){\nreturn or__5045__auto__;\n} else {\nreturn new cljs.core.Symbol(null,\"max\",\"max\",1701898075,null);\n}\n})(),metabase.mbql.schema.max], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var or__5045__auto__ = new cljs.core.Keyword(null,\"clause-name\",\"clause-name\",-996419059).cljs$core$IFn$_invoke$arity$1(cljs.core.meta((((typeof metabase !== 'undefined') && (typeof metabase.mbql !== 'undefined') && (typeof metabase.mbql.schema !== 'undefined') && (typeof metabase.mbql.schema.metric !== 'undefined'))?(new cljs.core.Var((function (){\nreturn metabase.mbql.schema.metric;\n}),cljs.core.with_meta(new cljs.core.Symbol(\"metabase.mbql.schema\",\"metric\",\"metabase.mbql.schema/metric\",1030004285,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(\"cljs.analyzer\",\"no-resolve\",\"cljs.analyzer/no-resolve\",-1872351017),true], null)),cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null,\"ns\",\"ns\",441598760),new cljs.core.Keyword(null,\"name\",\"name\",1843675177),new cljs.core.Keyword(null,\"file\",\"file\",-1269645878),new cljs.core.Keyword(null,\"end-column\",\"end-column\",1425389514),new cljs.core.Keyword(null,\"clause-name\",\"clause-name\",-996419059),new cljs.core.Keyword(null,\"column\",\"column\",2078222095),new cljs.core.Keyword(null,\"line\",\"line\",212345235),new cljs.core.Keyword(null,\"end-line\",\"end-line\",1837326455),new cljs.core.Keyword(null,\"sugar\",\"sugar\",-73788488),new cljs.core.Keyword(null,\"clause-form\",\"clause-form\",1820463737),new cljs.core.Keyword(null,\"arglists\",\"arglists\",1661989754),new cljs.core.Keyword(null,\"doc\",\"doc\",1913296891),new cljs.core.Keyword(null,\"test\",\"test\",577538877)],[cljs.core.with_meta(new cljs.core.Symbol(null,\"metabase.mbql.schema\",\"metabase.mbql.schema\",-408168902,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"doc\",\"doc\",1913296891),\"Schema for validating a *normalized* MBQL query. This is also the definitive grammar for MBQL, wow!\"], null)),new cljs.core.Symbol(null,\"metric\",\"metric\",2049329604,null),\"metabase/mbql/schema.cljc\",26,new cljs.core.Keyword(null,\"metric\",\"metric\",408798077),1,989,989,true,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"metric\",\"metric\",408798077),new cljs.core.Keyword(null,\"metric-id\",\"metric-id\",-686486942),cljs.core.list(new cljs.core.Symbol(null,\"quote\",\"quote\",1377916282,null),cljs.core.list(new cljs.core.Symbol(\"s\",\"cond-pre\",\"s/cond-pre\",-923707600,null),new cljs.core.Symbol(\"helpers\",\"IntGreaterThanZero\",\"helpers/IntGreaterThanZero\",1743901629,null),new cljs.core.Symbol(\"helpers\",\"NonBlankString\",\"helpers/NonBlankString\",-2060904596,null)))], null),cljs.core.List.EMPTY,\"Schema for a valid metric clause.\",(cljs.core.truth_(metabase.mbql.schema.metric)?metabase.mbql.schema.metric.cljs$lang$test:null)]))):null)));\nif(cljs.core.truth_(or__5045__auto__)){\nreturn or__5045__auto__;\n} else {\nreturn new cljs.core.Symbol(null,\"metric\",\"metric\",2049329604,null);\n}\n})(),metabase.mbql.schema.metric], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var or__5045__auto__ = new cljs.core.Keyword(null,\"clause-name\",\"clause-name\",-996419059).cljs$core$IFn$_invoke$arity$1(cljs.core.meta((((typeof metabase !== 'undefined') && (typeof metabase.mbql !== 'undefined') && (typeof metabase.mbql.schema !== 'undefined') && (typeof metabase.mbql.schema.share !== 'undefined'))?(new cljs.core.Var((function (){\nreturn metabase.mbql.schema.share;\n}),cljs.core.with_meta(new cljs.core.Symbol(\"metabase.mbql.schema\",\"share\",\"metabase.mbql.schema/share\",1977664161,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(\"cljs.analyzer\",\"no-resolve\",\"cljs.analyzer/no-resolve\",-1872351017),true], null)),cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null,\"requires-features\",\"requires-features\",-101116256),new cljs.core.Keyword(null,\"ns\",\"ns\",441598760),new cljs.core.Keyword(null,\"name\",\"name\",1843675177),new cljs.core.Keyword(null,\"file\",\"file\",-1269645878),new cljs.core.Keyword(null,\"end-column\",\"end-column\",1425389514),new cljs.core.Keyword(null,\"clause-name\",\"clause-name\",-996419059),new cljs.core.Keyword(null,\"column\",\"column\",2078222095),new cljs.core.Keyword(null,\"line\",\"line\",212345235),new cljs.core.Keyword(null,\"end-line\",\"end-line\",1837326455),new cljs.core.Keyword(null,\"clause-form\",\"clause-form\",1820463737),new cljs.core.Keyword(null,\"arglists\",\"arglists\",1661989754),new cljs.core.Keyword(null,\"doc\",\"doc\",1913296891),new cljs.core.Keyword(null,\"test\",\"test\",577538877)],[new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"basic-aggregations\",\"basic-aggregations\",-1628959228),\"null\"], null), null),cljs.core.with_meta(new cljs.core.Symbol(null,\"metabase.mbql.schema\",\"metabase.mbql.schema\",-408168902,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"doc\",\"doc\",1913296891),\"Schema for validating a *normalized* MBQL query. This is also the definitive grammar for MBQL, wow!\"], null)),new cljs.core.Symbol(null,\"share\",\"share\",1051097594,null),\"metabase/mbql/schema.cljc\",62,new cljs.core.Keyword(null,\"share\",\"share\",-589433933),1,968,968,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"share\",\"share\",-589433933),new cljs.core.Keyword(null,\"pred\",\"pred\",1927423397),cljs.core.list(new cljs.core.Symbol(null,\"quote\",\"quote\",1377916282,null),new cljs.core.Symbol(null,\"Filter\",\"Filter\",-424893332,null))], null),cljs.core.List.EMPTY,\"Schema for a valid share clause.\",(cljs.core.truth_(metabase.mbql.schema.share)?metabase.mbql.schema.share.cljs$lang$test:null)]))):null)));\nif(cljs.core.truth_(or__5045__auto__)){\nreturn or__5045__auto__;\n} else {\nreturn new cljs.core.Symbol(null,\"share\",\"share\",1051097594,null);\n}\n})(),metabase.mbql.schema.share], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var or__5045__auto__ = new cljs.core.Keyword(null,\"clause-name\",\"clause-name\",-996419059).cljs$core$IFn$_invoke$arity$1(cljs.core.meta((((typeof metabase !== 'undefined') && (typeof metabase.mbql !== 'undefined') && (typeof metabase.mbql.schema !== 'undefined') && (typeof metabase.mbql.schema.count_where !== 'undefined'))?(new cljs.core.Var((function (){\nreturn metabase.mbql.schema.count_where;\n}),cljs.core.with_meta(new cljs.core.Symbol(\"metabase.mbql.schema\",\"count-where\",\"metabase.mbql.schema/count-where\",-1224231786,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(\"cljs.analyzer\",\"no-resolve\",\"cljs.analyzer/no-resolve\",-1872351017),true], null)),cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null,\"requires-features\",\"requires-features\",-101116256),new cljs.core.Keyword(null,\"ns\",\"ns\",441598760),new cljs.core.Keyword(null,\"name\",\"name\",1843675177),new cljs.core.Keyword(null,\"file\",\"file\",-1269645878),new cljs.core.Keyword(null,\"end-column\",\"end-column\",1425389514),new cljs.core.Keyword(null,\"clause-name\",\"clause-name\",-996419059),new cljs.core.Keyword(null,\"column\",\"column\",2078222095),new cljs.core.Keyword(null,\"line\",\"line\",212345235),new cljs.core.Keyword(null,\"end-line\",\"end-line\",1837326455),new cljs.core.Keyword(null,\"clause-form\",\"clause-form\",1820463737),new cljs.core.Keyword(null,\"arglists\",\"arglists\",1661989754),new cljs.core.Keyword(null,\"doc\",\"doc\",1913296891),new cljs.core.Keyword(null,\"test\",\"test\",577538877)],[new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"basic-aggregations\",\"basic-aggregations\",-1628959228),\"null\"], null), null),cljs.core.with_meta(new cljs.core.Symbol(null,\"metabase.mbql.schema\",\"metabase.mbql.schema\",-408168902,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"doc\",\"doc\",1913296891),\"Schema for validating a *normalized* MBQL query. This is also the definitive grammar for MBQL, wow!\"], null)),new cljs.core.Symbol(null,\"count-where\",\"count-where\",2025939247,null),\"metabase/mbql/schema.cljc\",68,new cljs.core.Keyword(null,\"count-where\",\"count-where\",385407720),1,965,965,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"count-where\",\"count-where\",385407720),new cljs.core.Keyword(null,\"pred\",\"pred\",1927423397),cljs.core.list(new cljs.core.Symbol(null,\"quote\",\"quote\",1377916282,null),new cljs.core.Symbol(null,\"Filter\",\"Filter\",-424893332,null))], null),cljs.core.List.EMPTY,\"Schema for a valid count-where clause.\",(cljs.core.truth_(metabase.mbql.schema.count_where)?metabase.mbql.schema.count_where.cljs$lang$test:null)]))):null)));\nif(cljs.core.truth_(or__5045__auto__)){\nreturn or__5045__auto__;\n} else {\nreturn new cljs.core.Symbol(null,\"count-where\",\"count-where\",2025939247,null);\n}\n})(),metabase.mbql.schema.count_where], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var or__5045__auto__ = new cljs.core.Keyword(null,\"clause-name\",\"clause-name\",-996419059).cljs$core$IFn$_invoke$arity$1(cljs.core.meta((((typeof metabase !== 'undefined') && (typeof metabase.mbql !== 'undefined') && (typeof metabase.mbql.schema !== 'undefined') && (typeof metabase.mbql.schema.sum_where !== 'undefined'))?(new cljs.core.Var((function (){\nreturn metabase.mbql.schema.sum_where;\n}),cljs.core.with_meta(new cljs.core.Symbol(\"metabase.mbql.schema\",\"sum-where\",\"metabase.mbql.schema/sum-where\",969078380,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(\"cljs.analyzer\",\"no-resolve\",\"cljs.analyzer/no-resolve\",-1872351017),true], null)),cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null,\"requires-features\",\"requires-features\",-101116256),new cljs.core.Keyword(null,\"ns\",\"ns\",441598760),new cljs.core.Keyword(null,\"name\",\"name\",1843675177),new cljs.core.Keyword(null,\"file\",\"file\",-1269645878),new cljs.core.Keyword(null,\"end-column\",\"end-column\",1425389514),new cljs.core.Keyword(null,\"clause-name\",\"clause-name\",-996419059),new cljs.core.Keyword(null,\"column\",\"column\",2078222095),new cljs.core.Keyword(null,\"line\",\"line\",212345235),new cljs.core.Keyword(null,\"end-line\",\"end-line\",1837326455),new cljs.core.Keyword(null,\"clause-form\",\"clause-form\",1820463737),new cljs.core.Keyword(null,\"arglists\",\"arglists\",1661989754),new cljs.core.Keyword(null,\"doc\",\"doc\",1913296891),new cljs.core.Keyword(null,\"test\",\"test\",577538877)],[new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"basic-aggregations\",\"basic-aggregations\",-1628959228),\"null\"], null), null),cljs.core.with_meta(new cljs.core.Symbol(null,\"metabase.mbql.schema\",\"metabase.mbql.schema\",-408168902,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"doc\",\"doc\",1913296891),\"Schema for validating a *normalized* MBQL query. This is also the definitive grammar for MBQL, wow!\"], null)),new cljs.core.Symbol(null,\"sum-where\",\"sum-where\",-519087341,null),\"metabase/mbql/schema.cljc\",66,new cljs.core.Keyword(null,\"sum-where\",\"sum-where\",2135348428),1,962,962,new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"sum-where\",\"sum-where\",2135348428),new cljs.core.Keyword(null,\"field-or-expression\",\"field-or-expression\",-1409494368),cljs.core.list(new cljs.core.Symbol(null,\"quote\",\"quote\",1377916282,null),new cljs.core.Symbol(null,\"FieldOrExpressionDef\",\"FieldOrExpressionDef\",-788269541,null)),new cljs.core.Keyword(null,\"pred\",\"pred\",1927423397),cljs.core.list(new cljs.core.Symbol(null,\"quote\",\"quote\",1377916282,null),new cljs.core.Symbol(null,\"Filter\",\"Filter\",-424893332,null))], null),cljs.core.List.EMPTY,\"Schema for a valid sum-where clause.\",(cljs.core.truth_(metabase.mbql.schema.sum_where)?metabase.mbql.schema.sum_where.cljs$lang$test:null)]))):null)));\nif(cljs.core.truth_(or__5045__auto__)){\nreturn or__5045__auto__;\n} else {\nreturn new cljs.core.Symbol(null,\"sum-where\",\"sum-where\",-519087341,null);\n}\n})(),metabase.mbql.schema.sum_where], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var or__5045__auto__ = new cljs.core.Keyword(null,\"clause-name\",\"clause-name\",-996419059).cljs$core$IFn$_invoke$arity$1(cljs.core.meta((((typeof metabase !== 'undefined') && (typeof metabase.mbql !== 'undefined') && (typeof metabase.mbql.schema !== 'undefined') && (typeof metabase.mbql.schema.case$ !== 'undefined'))?(new cljs.core.Var((function (){\nreturn metabase.mbql.schema.case$;\n}),cljs.core.with_meta(new cljs.core.Symbol(\"metabase.mbql.schema\",\"case\",\"metabase.mbql.schema/case\",2100482976,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(\"cljs.analyzer\",\"no-resolve\",\"cljs.analyzer/no-resolve\",-1872351017),true], null)),cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null,\"requires-features\",\"requires-features\",-101116256),new cljs.core.Keyword(null,\"ns\",\"ns\",441598760),new cljs.core.Keyword(null,\"name\",\"name\",1843675177),new cljs.core.Keyword(null,\"file\",\"file\",-1269645878),new cljs.core.Keyword(null,\"end-column\",\"end-column\",1425389514),new cljs.core.Keyword(null,\"clause-name\",\"clause-name\",-996419059),new cljs.core.Keyword(null,\"column\",\"column\",2078222095),new cljs.core.Keyword(null,\"line\",\"line\",212345235),new cljs.core.Keyword(null,\"end-line\",\"end-line\",1837326455),new cljs.core.Keyword(null,\"clause-form\",\"clause-form\",1820463737),new cljs.core.Keyword(null,\"arglists\",\"arglists\",1661989754),new cljs.core.Keyword(null,\"doc\",\"doc\",1913296891),new cljs.core.Keyword(null,\"test\",\"test\",577538877)],[new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"basic-aggregations\",\"basic-aggregations\",-1628959228),\"null\"], null), null),cljs.core.with_meta(new cljs.core.Symbol(null,\"metabase.mbql.schema\",\"metabase.mbql.schema\",-408168902,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"doc\",\"doc\",1913296891),\"Schema for validating a *normalized* MBQL query. This is also the definitive grammar for MBQL, wow!\"], null)),new cljs.core.Symbol(null,\"case\",\"case\",-1510733573,null),\"metabase/mbql/schema.cljc\",61,new cljs.core.Keyword(null,\"case\",\"case\",1143702196),1,916,916,new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"case\",\"case\",1143702196),new cljs.core.Keyword(null,\"clauses\",\"clauses\",1454841241),cljs.core.list(new cljs.core.Symbol(null,\"quote\",\"quote\",1377916282,null),new cljs.core.Symbol(null,\"CaseClauses\",\"CaseClauses\",-1749071354,null)),new cljs.core.Keyword(null,\"options\",\"options\",99638489),cljs.core.list(new cljs.core.Symbol(null,\"quote\",\"quote\",1377916282,null),cljs.core.list(new cljs.core.Symbol(null,\"optional\",\"optional\",-600484260,null),new cljs.core.Symbol(null,\"CaseOptions\",\"CaseOptions\",1989286806,null)))], null),cljs.core.List.EMPTY,\"Schema for a valid case clause.\",(cljs.core.truth_(metabase.mbql.schema.case$)?metabase.mbql.schema.case$.cljs$lang$test:null)]))):null)));\nif(cljs.core.truth_(or__5045__auto__)){\nreturn or__5045__auto__;\n} else {\nreturn new cljs.core.Symbol(null,\"case\",\"case\",-1510733573,null);\n}\n})(),metabase.mbql.schema.case$], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var or__5045__auto__ = new cljs.core.Keyword(null,\"clause-name\",\"clause-name\",-996419059).cljs$core$IFn$_invoke$arity$1(cljs.core.meta((((typeof metabase !== 'undefined') && (typeof metabase.mbql !== 'undefined') && (typeof metabase.mbql.schema !== 'undefined') && (typeof metabase.mbql.schema.median !== 'undefined'))?(new cljs.core.Var((function (){\nreturn metabase.mbql.schema.median;\n}),cljs.core.with_meta(new cljs.core.Symbol(\"metabase.mbql.schema\",\"median\",\"metabase.mbql.schema/median\",2055093571,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(\"cljs.analyzer\",\"no-resolve\",\"cljs.analyzer/no-resolve\",-1872351017),true], null)),cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null,\"requires-features\",\"requires-features\",-101116256),new cljs.core.Keyword(null,\"ns\",\"ns\",441598760),new cljs.core.Keyword(null,\"name\",\"name\",1843675177),new cljs.core.Keyword(null,\"file\",\"file\",-1269645878),new cljs.core.Keyword(null,\"end-column\",\"end-column\",1425389514),new cljs.core.Keyword(null,\"clause-name\",\"clause-name\",-996419059),new cljs.core.Keyword(null,\"column\",\"column\",2078222095),new cljs.core.Keyword(null,\"line\",\"line\",212345235),new cljs.core.Keyword(null,\"end-line\",\"end-line\",1837326455),new cljs.core.Keyword(null,\"clause-form\",\"clause-form\",1820463737),new cljs.core.Keyword(null,\"arglists\",\"arglists\",1661989754),new cljs.core.Keyword(null,\"doc\",\"doc\",1913296891),new cljs.core.Keyword(null,\"test\",\"test\",577538877)],[new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"percentile-aggregations\",\"percentile-aggregations\",1241763983),\"null\"], null), null),cljs.core.with_meta(new cljs.core.Symbol(null,\"metabase.mbql.schema\",\"metabase.mbql.schema\",-408168902,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"doc\",\"doc\",1913296891),\"Schema for validating a *normalized* MBQL query. This is also the definitive grammar for MBQL, wow!\"], null)),new cljs.core.Symbol(null,\"median\",\"median\",-2084869638,null),\"metabase/mbql/schema.cljc\",68,new cljs.core.Keyword(null,\"median\",\"median\",569566131),1,977,977,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"median\",\"median\",569566131),new cljs.core.Keyword(null,\"field-or-expression\",\"field-or-expression\",-1409494368),cljs.core.list(new cljs.core.Symbol(null,\"quote\",\"quote\",1377916282,null),new cljs.core.Symbol(null,\"FieldOrExpressionDef\",\"FieldOrExpressionDef\",-788269541,null))], null),cljs.core.List.EMPTY,\"Schema for a valid median clause.\",(cljs.core.truth_(metabase.mbql.schema.median)?metabase.mbql.schema.median.cljs$lang$test:null)]))):null)));\nif(cljs.core.truth_(or__5045__auto__)){\nreturn or__5045__auto__;\n} else {\nreturn new cljs.core.Symbol(null,\"median\",\"median\",-2084869638,null);\n}\n})(),metabase.mbql.schema.median], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var or__5045__auto__ = new cljs.core.Keyword(null,\"clause-name\",\"clause-name\",-996419059).cljs$core$IFn$_invoke$arity$1(cljs.core.meta((((typeof metabase !== 'undefined') && (typeof metabase.mbql !== 'undefined') && (typeof metabase.mbql.schema !== 'undefined') && (typeof metabase.mbql.schema.percentile !== 'undefined'))?(new cljs.core.Var((function (){\nreturn metabase.mbql.schema.percentile;\n}),cljs.core.with_meta(new cljs.core.Symbol(\"metabase.mbql.schema\",\"percentile\",\"metabase.mbql.schema/percentile\",-91330436,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(\"cljs.analyzer\",\"no-resolve\",\"cljs.analyzer/no-resolve\",-1872351017),true], null)),cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null,\"requires-features\",\"requires-features\",-101116256),new cljs.core.Keyword(null,\"ns\",\"ns\",441598760),new cljs.core.Keyword(null,\"name\",\"name\",1843675177),new cljs.core.Keyword(null,\"file\",\"file\",-1269645878),new cljs.core.Keyword(null,\"end-column\",\"end-column\",1425389514),new cljs.core.Keyword(null,\"clause-name\",\"clause-name\",-996419059),new cljs.core.Keyword(null,\"column\",\"column\",2078222095),new cljs.core.Keyword(null,\"line\",\"line\",212345235),new cljs.core.Keyword(null,\"end-line\",\"end-line\",1837326455),new cljs.core.Keyword(null,\"clause-form\",\"clause-form\",1820463737),new cljs.core.Keyword(null,\"arglists\",\"arglists\",1661989754),new cljs.core.Keyword(null,\"doc\",\"doc\",1913296891),new cljs.core.Keyword(null,\"test\",\"test\",577538877)],[new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"percentile-aggregations\",\"percentile-aggregations\",1241763983),\"null\"], null), null),cljs.core.with_meta(new cljs.core.Symbol(null,\"metabase.mbql.schema\",\"metabase.mbql.schema\",-408168902,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"doc\",\"doc\",1913296891),\"Schema for validating a *normalized* MBQL query. This is also the definitive grammar for MBQL, wow!\"], null)),new cljs.core.Symbol(null,\"percentile\",\"percentile\",1039342775,null),\"metabase/mbql/schema.cljc\",72,new cljs.core.Keyword(null,\"percentile\",\"percentile\",-601188752),1,980,980,new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"percentile\",\"percentile\",-601188752),new cljs.core.Keyword(null,\"field-or-expression\",\"field-or-expression\",-1409494368),cljs.core.list(new cljs.core.Symbol(null,\"quote\",\"quote\",1377916282,null),new cljs.core.Symbol(null,\"FieldOrExpressionDef\",\"FieldOrExpressionDef\",-788269541,null)),new cljs.core.Keyword(null,\"percentile\",\"percentile\",-601188752),cljs.core.list(new cljs.core.Symbol(null,\"quote\",\"quote\",1377916282,null),new cljs.core.Symbol(null,\"NumericExpressionArg\",\"NumericExpressionArg\",-1537445195,null))], null),cljs.core.List.EMPTY,\"Schema for a valid percentile clause.\",(cljs.core.truth_(metabase.mbql.schema.percentile)?metabase.mbql.schema.percentile.cljs$lang$test:null)]))):null)));\nif(cljs.core.truth_(or__5045__auto__)){\nreturn or__5045__auto__;\n} else {\nreturn new cljs.core.Symbol(null,\"percentile\",\"percentile\",1039342775,null);\n}\n})(),metabase.mbql.schema.percentile], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var or__5045__auto__ = new cljs.core.Keyword(null,\"clause-name\",\"clause-name\",-996419059).cljs$core$IFn$_invoke$arity$1(cljs.core.meta((((typeof metabase !== 'undefined') && (typeof metabase.mbql !== 'undefined') && (typeof metabase.mbql.schema !== 'undefined') && (typeof metabase.mbql.schema.ag_COLON_var !== 'undefined'))?(new cljs.core.Var((function (){\nreturn metabase.mbql.schema.ag_COLON_var;\n}),cljs.core.with_meta(new cljs.core.Symbol(\"metabase.mbql.schema\",\"ag:var\",\"metabase.mbql.schema/ag:var\",1295047163,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(\"cljs.analyzer\",\"no-resolve\",\"cljs.analyzer/no-resolve\",-1872351017),true], null)),cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null,\"ns\",\"ns\",441598760),new cljs.core.Keyword(null,\"name\",\"name\",1843675177),new cljs.core.Keyword(null,\"file\",\"file\",-1269645878),new cljs.core.Keyword(null,\"end-column\",\"end-column\",1425389514),new cljs.core.Keyword(null,\"clause-name\",\"clause-name\",-996419059),new cljs.core.Keyword(null,\"column\",\"column\",2078222095),new cljs.core.Keyword(null,\"line\",\"line\",212345235),new cljs.core.Keyword(null,\"end-line\",\"end-line\",1837326455),new cljs.core.Keyword(null,\"clause-form\",\"clause-form\",1820463737),new cljs.core.Keyword(null,\"arglists\",\"arglists\",1661989754),new cljs.core.Keyword(null,\"doc\",\"doc\",1913296891),new cljs.core.Keyword(null,\"test\",\"test\",577538877)],[cljs.core.with_meta(new cljs.core.Symbol(null,\"metabase.mbql.schema\",\"metabase.mbql.schema\",-408168902,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"doc\",\"doc\",1913296891),\"Schema for validating a *normalized* MBQL query. This is also the definitive grammar for MBQL, wow!\"], null)),new cljs.core.Symbol(null,\"ag:var\",\"ag:var\",-1804440286,null),\"metabase/mbql/schema.cljc\",77,new cljs.core.Keyword(null,\"var\",\"var\",-769682797),1,974,974,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"var\",\"var\",-769682797),new cljs.core.Keyword(null,\"field-or-expression\",\"field-or-expression\",-1409494368),cljs.core.list(new cljs.core.Symbol(null,\"quote\",\"quote\",1377916282,null),new cljs.core.Symbol(null,\"FieldOrExpressionDef\",\"FieldOrExpressionDef\",-788269541,null))], null),cljs.core.List.EMPTY,\"Schema for a valid var clause.\",(cljs.core.truth_(metabase.mbql.schema.ag_COLON_var)?metabase.mbql.schema.ag_COLON_var.cljs$lang$test:null)]))):null)));\nif(cljs.core.truth_(or__5045__auto__)){\nreturn or__5045__auto__;\n} else {\nreturn new cljs.core.Symbol(null,\"ag:var\",\"ag:var\",-1804440286,null);\n}\n})(),metabase.mbql.schema.ag_COLON_var], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var or__5045__auto__ = new cljs.core.Keyword(null,\"clause-name\",\"clause-name\",-996419059).cljs$core$IFn$_invoke$arity$1(cljs.core.meta((((typeof metabase !== 'undefined') && (typeof metabase.mbql !== 'undefined') && (typeof metabase.mbql.schema !== 'undefined') && (typeof metabase.mbql.schema.cum_count !== 'undefined'))?(new cljs.core.Var((function (){\nreturn metabase.mbql.schema.cum_count;\n}),cljs.core.with_meta(new cljs.core.Symbol(\"metabase.mbql.schema\",\"cum-count\",\"metabase.mbql.schema/cum-count\",596526831,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(\"cljs.analyzer\",\"no-resolve\",\"cljs.analyzer/no-resolve\",-1872351017),true], null)),cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null,\"requires-features\",\"requires-features\",-101116256),new cljs.core.Keyword(null,\"ns\",\"ns\",441598760),new cljs.core.Keyword(null,\"name\",\"name\",1843675177),new cljs.core.Keyword(null,\"file\",\"file\",-1269645878),new cljs.core.Keyword(null,\"end-column\",\"end-column\",1425389514),new cljs.core.Keyword(null,\"clause-name\",\"clause-name\",-996419059),new cljs.core.Keyword(null,\"column\",\"column\",2078222095),new cljs.core.Keyword(null,\"line\",\"line\",212345235),new cljs.core.Keyword(null,\"end-line\",\"end-line\",1837326455),new cljs.core.Keyword(null,\"sugar\",\"sugar\",-73788488),new cljs.core.Keyword(null,\"clause-form\",\"clause-form\",1820463737),new cljs.core.Keyword(null,\"arglists\",\"arglists\",1661989754),new cljs.core.Keyword(null,\"doc\",\"doc\",1913296891),new cljs.core.Keyword(null,\"test\",\"test\",577538877)],[new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"basic-aggregations\",\"basic-aggregations\",-1628959228),\"null\"], null), null),cljs.core.with_meta(new cljs.core.Symbol(null,\"metabase.mbql.schema\",\"metabase.mbql.schema\",-408168902,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"doc\",\"doc\",1913296891),\"Schema for validating a *normalized* MBQL query. This is also the definitive grammar for MBQL, wow!\"], null)),new cljs.core.Symbol(null,\"cum-count\",\"cum-count\",-323900016,null),\"metabase/mbql/schema.cljc\",74,new cljs.core.Keyword(null,\"cum-count\",\"cum-count\",-1964431543),1,945,945,true,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"cum-count\",\"cum-count\",-1964431543),new cljs.core.Keyword(null,\"field\",\"field\",-1302436500),cljs.core.list(new cljs.core.Symbol(null,\"quote\",\"quote\",1377916282,null),cljs.core.list(new cljs.core.Symbol(null,\"optional\",\"optional\",-600484260,null),new cljs.core.Symbol(null,\"Field\",\"Field\",430385967,null)))], null),cljs.core.List.EMPTY,\"Schema for a valid cum-count clause.\",(cljs.core.truth_(metabase.mbql.schema.cum_count)?metabase.mbql.schema.cum_count.cljs$lang$test:null)]))):null)));\nif(cljs.core.truth_(or__5045__auto__)){\nreturn or__5045__auto__;\n} else {\nreturn new cljs.core.Symbol(null,\"cum-count\",\"cum-count\",-323900016,null);\n}\n})(),metabase.mbql.schema.cum_count], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var or__5045__auto__ = new cljs.core.Keyword(null,\"clause-name\",\"clause-name\",-996419059).cljs$core$IFn$_invoke$arity$1(cljs.core.meta((((typeof metabase !== 'undefined') && (typeof metabase.mbql !== 'undefined') && (typeof metabase.mbql.schema !== 'undefined') && (typeof metabase.mbql.schema.count !== 'undefined'))?(new cljs.core.Var((function (){\nreturn metabase.mbql.schema.count;\n}),cljs.core.with_meta(new cljs.core.Symbol(\"metabase.mbql.schema\",\"count\",\"metabase.mbql.schema/count\",678066683,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(\"cljs.analyzer\",\"no-resolve\",\"cljs.analyzer/no-resolve\",-1872351017),true], null)),cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null,\"requires-features\",\"requires-features\",-101116256),new cljs.core.Keyword(null,\"ns\",\"ns\",441598760),new cljs.core.Keyword(null,\"name\",\"name\",1843675177),new cljs.core.Keyword(null,\"file\",\"file\",-1269645878),new cljs.core.Keyword(null,\"end-column\",\"end-column\",1425389514),new cljs.core.Keyword(null,\"clause-name\",\"clause-name\",-996419059),new cljs.core.Keyword(null,\"column\",\"column\",2078222095),new cljs.core.Keyword(null,\"line\",\"line\",212345235),new cljs.core.Keyword(null,\"end-line\",\"end-line\",1837326455),new cljs.core.Keyword(null,\"sugar\",\"sugar\",-73788488),new cljs.core.Keyword(null,\"clause-form\",\"clause-form\",1820463737),new cljs.core.Keyword(null,\"arglists\",\"arglists\",1661989754),new cljs.core.Keyword(null,\"doc\",\"doc\",1913296891),new cljs.core.Keyword(null,\"test\",\"test\",577538877)],[new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"basic-aggregations\",\"basic-aggregations\",-1628959228),\"null\"], null), null),cljs.core.with_meta(new cljs.core.Symbol(null,\"metabase.mbql.schema\",\"metabase.mbql.schema\",-408168902,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"doc\",\"doc\",1913296891),\"Schema for validating a *normalized* MBQL query. This is also the definitive grammar for MBQL, wow!\"], null)),new cljs.core.Symbol(null,\"count\",\"count\",-514511684,null),\"metabase/mbql/schema.cljc\",70,new cljs.core.Keyword(null,\"count\",\"count\",2139924085),1,944,944,true,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"count\",\"count\",2139924085),new cljs.core.Keyword(null,\"field\",\"field\",-1302436500),cljs.core.list(new cljs.core.Symbol(null,\"quote\",\"quote\",1377916282,null),cljs.core.list(new cljs.core.Symbol(null,\"optional\",\"optional\",-600484260,null),new cljs.core.Symbol(null,\"Field\",\"Field\",430385967,null)))], null),cljs.core.List.EMPTY,\"Schema for a valid count clause.\",(cljs.core.truth_(metabase.mbql.schema.count)?metabase.mbql.schema.count.cljs$lang$test:null)]))):null)));\nif(cljs.core.truth_(or__5045__auto__)){\nreturn or__5045__auto__;\n} else {\nreturn new cljs.core.Symbol(null,\"count\",\"count\",-514511684,null);\n}\n})(),metabase.mbql.schema.count], null)], 0)));\nmetabase.mbql.schema.UnnamedAggregation = schema.core.recursive(new cljs.core.Var(function(){return metabase.mbql.schema.UnnamedAggregation_STAR_;},new cljs.core.Symbol(\"metabase.mbql.schema\",\"UnnamedAggregation*\",\"metabase.mbql.schema/UnnamedAggregation*\",652628682,null),cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null,\"private\",\"private\",-558947994),new cljs.core.Keyword(null,\"ns\",\"ns\",441598760),new cljs.core.Keyword(null,\"name\",\"name\",1843675177),new cljs.core.Keyword(null,\"file\",\"file\",-1269645878),new cljs.core.Keyword(null,\"end-column\",\"end-column\",1425389514),new cljs.core.Keyword(null,\"column\",\"column\",2078222095),new cljs.core.Keyword(null,\"line\",\"line\",212345235),new cljs.core.Keyword(null,\"end-line\",\"end-line\",1837326455),new cljs.core.Keyword(null,\"arglists\",\"arglists\",1661989754),new cljs.core.Keyword(null,\"doc\",\"doc\",1913296891),new cljs.core.Keyword(null,\"test\",\"test\",577538877)],[true,cljs.core.with_meta(new cljs.core.Symbol(null,\"metabase.mbql.schema\",\"metabase.mbql.schema\",-408168902,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"doc\",\"doc\",1913296891),\"Schema for validating a *normalized* MBQL query. This is also the definitive grammar for MBQL, wow!\"], null)),new cljs.core.Symbol(null,\"UnnamedAggregation*\",\"UnnamedAggregation*\",1873018243,null),\"metabase/mbql/schema.cljc\",35,1,995,995,cljs.core.List.EMPTY,null,(cljs.core.truth_(metabase.mbql.schema.UnnamedAggregation_STAR_)?metabase.mbql.schema.UnnamedAggregation_STAR_.cljs$lang$test:null)])));\n/**\n * Additional options for any aggregation clause when wrapping it in `:aggregation-options`.\n */\nmetabase.mbql.schema.AggregationOptions = cljs.core.PersistentArrayMap.createAsIfByAssoc([schema.core.optional_key(new cljs.core.Keyword(null,\"name\",\"name\",1843675177)),metabase.mbql.schema.helpers.NonBlankString,schema.core.optional_key(new cljs.core.Keyword(null,\"display-name\",\"display-name\",694513143)),metabase.mbql.schema.helpers.NonBlankString,schema.core.Keyword,schema.core.Any]);\n/**\n * Schema for a valid aggregation-options clause.\n */\nmetabase.mbql.schema.aggregation_options = metabase.mbql.schema.helpers.clause.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,\"aggregation-options\",\"aggregation-options\",-1904917550),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([\"aggregation\",metabase.mbql.schema.UnnamedAggregation,\"options\",metabase.mbql.schema.AggregationOptions], 0));\n/**\n * Schema for anything that is a valid `:aggregation` clause.\n */\nmetabase.mbql.schema.Aggregation = schema.core.if$(cljs.core.partial.cljs$core$IFn$_invoke$arity$2(metabase.mbql.schema.helpers.is_clause_QMARK_,new cljs.core.Keyword(null,\"aggregation-options\",\"aggregation-options\",-1904917550)),metabase.mbql.schema.aggregation_options,metabase.mbql.schema.UnnamedAggregation);\n/**\n * Schema for a valid asc clause.\n */\nmetabase.mbql.schema.asc = metabase.mbql.schema.helpers.clause.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,\"asc\",\"asc\",356854569),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([\"field\",metabase.mbql.schema.FieldOrAggregationReference], 0));\n/**\n * Schema for a valid desc clause.\n */\nmetabase.mbql.schema.desc = metabase.mbql.schema.helpers.clause.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,\"desc\",\"desc\",2093485764),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([\"field\",metabase.mbql.schema.FieldOrAggregationReference], 0));\n/**\n * Schema for an `order-by` clause subclause.\n */\nmetabase.mbql.schema.OrderBy = metabase.mbql.schema.helpers.one_of_STAR_.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var or__5045__auto__ = new cljs.core.Keyword(null,\"clause-name\",\"clause-name\",-996419059).cljs$core$IFn$_invoke$arity$1(cljs.core.meta((((typeof metabase !== 'undefined') && (typeof metabase.mbql !== 'undefined') && (typeof metabase.mbql.schema !== 'undefined') && (typeof metabase.mbql.schema.asc !== 'undefined'))?(new cljs.core.Var((function (){\nreturn metabase.mbql.schema.asc;\n}),cljs.core.with_meta(new cljs.core.Symbol(\"metabase.mbql.schema\",\"asc\",\"metabase.mbql.schema/asc\",1338042063,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(\"cljs.analyzer\",\"no-resolve\",\"cljs.analyzer/no-resolve\",-1872351017),true], null)),cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null,\"ns\",\"ns\",441598760),new cljs.core.Keyword(null,\"name\",\"name\",1843675177),new cljs.core.Keyword(null,\"file\",\"file\",-1269645878),new cljs.core.Keyword(null,\"end-column\",\"end-column\",1425389514),new cljs.core.Keyword(null,\"clause-name\",\"clause-name\",-996419059),new cljs.core.Keyword(null,\"column\",\"column\",2078222095),new cljs.core.Keyword(null,\"line\",\"line\",212345235),new cljs.core.Keyword(null,\"end-line\",\"end-line\",1837326455),new cljs.core.Keyword(null,\"clause-form\",\"clause-form\",1820463737),new cljs.core.Keyword(null,\"arglists\",\"arglists\",1661989754),new cljs.core.Keyword(null,\"doc\",\"doc\",1913296891),new cljs.core.Keyword(null,\"test\",\"test\",577538877)],[cljs.core.with_meta(new cljs.core.Symbol(null,\"metabase.mbql.schema\",\"metabase.mbql.schema\",-408168902,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"doc\",\"doc\",1913296891),\"Schema for validating a *normalized* MBQL query. This is also the definitive grammar for MBQL, wow!\"], null)),new cljs.core.Symbol(null,\"asc\",\"asc\",1997386096,null),\"metabase/mbql/schema.cljc\",15,new cljs.core.Keyword(null,\"asc\",\"asc\",356854569),1,1033,1033,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"asc\",\"asc\",356854569),new cljs.core.Keyword(null,\"field\",\"field\",-1302436500),cljs.core.list(new cljs.core.Symbol(null,\"quote\",\"quote\",1377916282,null),new cljs.core.Symbol(null,\"FieldOrAggregationReference\",\"FieldOrAggregationReference\",85477856,null))], null),cljs.core.List.EMPTY,\"Schema for a valid asc clause.\",(cljs.core.truth_(metabase.mbql.schema.asc)?metabase.mbql.schema.asc.cljs$lang$test:null)]))):null)));\nif(cljs.core.truth_(or__5045__auto__)){\nreturn or__5045__auto__;\n} else {\nreturn new cljs.core.Symbol(null,\"asc\",\"asc\",1997386096,null);\n}\n})(),metabase.mbql.schema.asc], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var or__5045__auto__ = new cljs.core.Keyword(null,\"clause-name\",\"clause-name\",-996419059).cljs$core$IFn$_invoke$arity$1(cljs.core.meta((((typeof metabase !== 'undefined') && (typeof metabase.mbql !== 'undefined') && (typeof metabase.mbql.schema !== 'undefined') && (typeof metabase.mbql.schema.desc !== 'undefined'))?(new cljs.core.Var((function (){\nreturn metabase.mbql.schema.desc;\n}),cljs.core.with_meta(new cljs.core.Symbol(\"metabase.mbql.schema\",\"desc\",\"metabase.mbql.schema/desc\",-2050113424,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(\"cljs.analyzer\",\"no-resolve\",\"cljs.analyzer/no-resolve\",-1872351017),true], null)),cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null,\"ns\",\"ns\",441598760),new cljs.core.Keyword(null,\"name\",\"name\",1843675177),new cljs.core.Keyword(null,\"file\",\"file\",-1269645878),new cljs.core.Keyword(null,\"end-column\",\"end-column\",1425389514),new cljs.core.Keyword(null,\"clause-name\",\"clause-name\",-996419059),new cljs.core.Keyword(null,\"column\",\"column\",2078222095),new cljs.core.Keyword(null,\"line\",\"line\",212345235),new cljs.core.Keyword(null,\"end-line\",\"end-line\",1837326455),new cljs.core.Keyword(null,\"clause-form\",\"clause-form\",1820463737),new cljs.core.Keyword(null,\"arglists\",\"arglists\",1661989754),new cljs.core.Keyword(null,\"doc\",\"doc\",1913296891),new cljs.core.Keyword(null,\"test\",\"test\",577538877)],[cljs.core.with_meta(new cljs.core.Symbol(null,\"metabase.mbql.schema\",\"metabase.mbql.schema\",-408168902,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"doc\",\"doc\",1913296891),\"Schema for validating a *normalized* MBQL query. This is also the definitive grammar for MBQL, wow!\"], null)),new cljs.core.Symbol(null,\"desc\",\"desc\",-560950005,null),\"metabase/mbql/schema.cljc\",16,new cljs.core.Keyword(null,\"desc\",\"desc\",2093485764),1,1034,1034,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"desc\",\"desc\",2093485764),new cljs.core.Keyword(null,\"field\",\"field\",-1302436500),cljs.core.list(new cljs.core.Symbol(null,\"quote\",\"quote\",1377916282,null),new cljs.core.Symbol(null,\"FieldOrAggregationReference\",\"FieldOrAggregationReference\",85477856,null))], null),cljs.core.List.EMPTY,\"Schema for a valid desc clause.\",(cljs.core.truth_(metabase.mbql.schema.desc)?metabase.mbql.schema.desc.cljs$lang$test:null)]))):null)));\nif(cljs.core.truth_(or__5045__auto__)){\nreturn or__5045__auto__;\n} else {\nreturn new cljs.core.Symbol(null,\"desc\",\"desc\",-560950005,null);\n}\n})(),metabase.mbql.schema.desc], null)], 0));\n/**\n * Schema for valid values of template tag `:type`.\n */\nmetabase.mbql.schema.TemplateTagType = schema.core.enum$.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"snippet\",\"snippet\",953581994),new cljs.core.Keyword(null,\"card\",\"card\",-1430355152),new cljs.core.Keyword(null,\"dimension\",\"dimension\",543254198),new cljs.core.Keyword(null,\"number\",\"number\",1570378438),new cljs.core.Keyword(null,\"text\",\"text\",-1790561697),new cljs.core.Keyword(null,\"date\",\"date\",-1463434462)], 0));\n/**\n * Things required by all template tag types.\n */\nmetabase.mbql.schema.TemplateTag_COLON_Common = cljs.core.PersistentArrayMap.createAsIfByAssoc([schema.core.optional_key(new cljs.core.Keyword(null,\"id\",\"id\",-1388402092)),metabase.mbql.schema.helpers.NonBlankString,new cljs.core.Keyword(null,\"name\",\"name\",1843675177),metabase.mbql.schema.helpers.NonBlankString,new cljs.core.Keyword(null,\"display-name\",\"display-name\",694513143),metabase.mbql.schema.helpers.NonBlankString,schema.core.Keyword,schema.core.Any]);\n/**\n * Schema for a native query snippet template tag.\n */\nmetabase.mbql.schema.TemplateTag_COLON_Snippet = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([metabase.mbql.schema.TemplateTag_COLON_Common,cljs.core.PersistentArrayMap.createAsIfByAssoc([new cljs.core.Keyword(null,\"type\",\"type\",1174270348),schema.core.eq(new cljs.core.Keyword(null,\"snippet\",\"snippet\",953581994)),new cljs.core.Keyword(null,\"snippet-name\",\"snippet-name\",819240328),metabase.mbql.schema.helpers.NonBlankString,new cljs.core.Keyword(null,\"snippet-id\",\"snippet-id\",1987785841),metabase.mbql.schema.helpers.IntGreaterThanZero,schema.core.optional_key(new cljs.core.Keyword(null,\"database\",\"database\",1849087575)),metabase.mbql.schema.helpers.IntGreaterThanZero])], 0));\n/**\n * Schema for a source query template tag.\n */\nmetabase.mbql.schema.TemplateTag_COLON_SourceQuery = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([metabase.mbql.schema.TemplateTag_COLON_Common,new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"type\",\"type\",1174270348),schema.core.eq(new cljs.core.Keyword(null,\"card\",\"card\",-1430355152)),new cljs.core.Keyword(null,\"card-id\",\"card-id\",-1770060179),metabase.mbql.schema.helpers.IntGreaterThanZero], null)], 0));\n/**\n * Stuff shared between the Field filter and raw value template tag schemas.\n */\nmetabase.mbql.schema.TemplateTag_COLON_Value_COLON_Common = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([metabase.mbql.schema.TemplateTag_COLON_Common,cljs.core.PersistentArrayMap.createAsIfByAssoc([schema.core.optional_key(new cljs.core.Keyword(null,\"default\",\"default\",-1987822328)),schema.core.Any,schema.core.optional_key(new cljs.core.Keyword(null,\"required\",\"required\",1807647006)),schema.core.Bool])], 0));\n\n/**\n * Schema for a field filter template tag.\n */\nmetabase.mbql.schema.TemplateTag_COLON_FieldFilter = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([metabase.mbql.schema.TemplateTag_COLON_Value_COLON_Common,cljs.core.PersistentArrayMap.createAsIfByAssoc([new cljs.core.Keyword(null,\"type\",\"type\",1174270348),schema.core.eq(new cljs.core.Keyword(null,\"dimension\",\"dimension\",543254198)),new cljs.core.Keyword(null,\"dimension\",\"dimension\",543254198),metabase.mbql.schema.field,new cljs.core.Keyword(null,\"widget-type\",\"widget-type\",1836256899),schema.core.recursive(new cljs.core.Var(function(){return metabase.mbql.schema.WidgetType;},new cljs.core.Symbol(\"metabase.mbql.schema\",\"WidgetType\",\"metabase.mbql.schema/WidgetType\",-823028985,null),cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null,\"ns\",\"ns\",441598760),new cljs.core.Keyword(null,\"name\",\"name\",1843675177),new cljs.core.Keyword(null,\"file\",\"file\",-1269645878),new cljs.core.Keyword(null,\"end-column\",\"end-column\",1425389514),new cljs.core.Keyword(null,\"column\",\"column\",2078222095),new cljs.core.Keyword(null,\"line\",\"line\",212345235),new cljs.core.Keyword(null,\"declared\",\"declared\",92336021),new cljs.core.Keyword(null,\"end-line\",\"end-line\",1837326455),new cljs.core.Keyword(null,\"arglists\",\"arglists\",1661989754),new cljs.core.Keyword(null,\"doc\",\"doc\",1913296891),new cljs.core.Keyword(null,\"test\",\"test\",577538877)],[cljs.core.with_meta(new cljs.core.Symbol(null,\"metabase.mbql.schema\",\"metabase.mbql.schema\",-408168902,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"doc\",\"doc\",1913296891),\"Schema for validating a *normalized* MBQL query. This is also the definitive grammar for MBQL, wow!\"], null)),new cljs.core.Symbol(null,\"WidgetType\",\"WidgetType\",-1985035186,null),\"metabase/mbql/schema.cljc\",34,1,1130,true,1130,cljs.core.List.EMPTY,null,(cljs.core.truth_(metabase.mbql.schema.WidgetType)?metabase.mbql.schema.WidgetType.cljs$lang$test:null)]))),schema.core.optional_key(new cljs.core.Keyword(null,\"options\",\"options\",99638489)),cljs.core.PersistentArrayMap.createAsIfByAssoc([schema.core.Keyword,schema.core.Any])])], 0));\n/**\n * Set of valid values of `:type` for raw value template tags.\n */\nmetabase.mbql.schema.raw_value_template_tag_types = new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null,\"date\",\"date\",-1463434462),null,new cljs.core.Keyword(null,\"number\",\"number\",1570378438),null,new cljs.core.Keyword(null,\"boolean\",\"boolean\",-1919418404),null,new cljs.core.Keyword(null,\"text\",\"text\",-1790561697),null], null), null);\n/**\n * Valid values of `:type` for raw value template tags.\n */\nmetabase.mbql.schema.TemplateTag_COLON_RawValue_COLON_Type = cljs.core.apply.cljs$core$IFn$_invoke$arity$2(schema.core.enum$,metabase.mbql.schema.raw_value_template_tag_types);\n/**\n * Schema for a raw value template tag.\n */\nmetabase.mbql.schema.TemplateTag_COLON_RawValue = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([metabase.mbql.schema.TemplateTag_COLON_Value_COLON_Common,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"type\",\"type\",1174270348),metabase.mbql.schema.TemplateTag_COLON_RawValue_COLON_Type], null)], 0));\n/**\n * Schema for a template tag as specified in a native query. There are four types of template tags, differentiated by\n *   `:type` (see comments above).\n */\nmetabase.mbql.schema.TemplateTag = schema.core.conditional.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([(function (p1__45484_SHARP_){\nreturn cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(new cljs.core.Keyword(null,\"type\",\"type\",1174270348).cljs$core$IFn$_invoke$arity$1(p1__45484_SHARP_),new cljs.core.Keyword(null,\"dimension\",\"dimension\",543254198));\n}),metabase.mbql.schema.TemplateTag_COLON_FieldFilter,(function (p1__45485_SHARP_){\nreturn cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(new cljs.core.Keyword(null,\"type\",\"type\",1174270348).cljs$core$IFn$_invoke$arity$1(p1__45485_SHARP_),new cljs.core.Keyword(null,\"snippet\",\"snippet\",953581994));\n}),metabase.mbql.schema.TemplateTag_COLON_Snippet,(function (p1__45486_SHARP_){\nreturn cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(new cljs.core.Keyword(null,\"type\",\"type\",1174270348).cljs$core$IFn$_invoke$arity$1(p1__45486_SHARP_),new cljs.core.Keyword(null,\"card\",\"card\",-1430355152));\n}),metabase.mbql.schema.TemplateTag_COLON_SourceQuery,new cljs.core.Keyword(null,\"else\",\"else\",-1508377146),metabase.mbql.schema.TemplateTag_COLON_RawValue], 0));\n/**\n * Schema for the `:template-tags` map passed in as part of a native query.\n */\nmetabase.mbql.schema.TemplateTagMap = schema.core.constrained.cljs$core$IFn$_invoke$arity$3(cljs.core.PersistentArrayMap.createAsIfByAssoc([metabase.mbql.schema.helpers.NonBlankString,metabase.mbql.schema.TemplateTag]),(function (m){\nreturn cljs.core.every_QMARK_((function (p__45487){\nvar vec__45488 = p__45487;\nvar tag_name = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__45488,(0),null);\nvar tag_definition = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__45488,(1),null);\nreturn cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(tag_name,new cljs.core.Keyword(null,\"name\",\"name\",1843675177).cljs$core$IFn$_invoke$arity$1(tag_definition));\n}),m);\n}),\"keys in template tag map must match the :name of their values\");\n/**\n * Schema for a valid, normalized native [inner] query.\n */\nmetabase.mbql.schema.NativeQuery = cljs.core.PersistentArrayMap.createAsIfByAssoc([new cljs.core.Keyword(null,\"query\",\"query\",-1288509510),schema.core.Any,schema.core.optional_key(new cljs.core.Keyword(null,\"template-tags\",\"template-tags\",1853115685)),metabase.mbql.schema.TemplateTagMap,schema.core.optional_key(new cljs.core.Keyword(null,\"collection\",\"collection\",-683361892)),schema.core.maybe(metabase.mbql.schema.helpers.NonBlankString),schema.core.Keyword,schema.core.Any]);\n\n/**\n * Schema for a valid value for a `:source-query` clause.\n */\nmetabase.mbql.schema.SourceQuery = schema.core.if$(cljs.core.every_pred.cljs$core$IFn$_invoke$arity$2(cljs.core.map_QMARK_,new cljs.core.Keyword(null,\"native\",\"native\",-613060878)),clojure.set.rename_keys(metabase.mbql.schema.NativeQuery,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"query\",\"query\",-1288509510),new cljs.core.Keyword(null,\"native\",\"native\",-613060878)], null)),schema.core.recursive(new cljs.core.Var(function(){return metabase.mbql.schema.MBQLQuery;},new cljs.core.Symbol(\"metabase.mbql.schema\",\"MBQLQuery\",\"metabase.mbql.schema/MBQLQuery\",1964355302,null),cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null,\"ns\",\"ns\",441598760),new cljs.core.Keyword(null,\"name\",\"name\",1843675177),new cljs.core.Keyword(null,\"file\",\"file\",-1269645878),new cljs.core.Keyword(null,\"end-column\",\"end-column\",1425389514),new cljs.core.Keyword(null,\"column\",\"column\",2078222095),new cljs.core.Keyword(null,\"line\",\"line\",212345235),new cljs.core.Keyword(null,\"declared\",\"declared\",92336021),new cljs.core.Keyword(null,\"end-line\",\"end-line\",1837326455),new cljs.core.Keyword(null,\"arglists\",\"arglists\",1661989754),new cljs.core.Keyword(null,\"doc\",\"doc\",1913296891),new cljs.core.Keyword(null,\"test\",\"test\",577538877)],[cljs.core.with_meta(new cljs.core.Symbol(null,\"metabase.mbql.schema\",\"metabase.mbql.schema\",-408168902,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"doc\",\"doc\",1913296891),\"Schema for validating a *normalized* MBQL query. This is also the definitive grammar for MBQL, wow!\"], null)),new cljs.core.Symbol(null,\"MBQLQuery\",\"MBQLQuery\",-1395590243,null),\"metabase/mbql/schema.cljc\",25,1,1212,true,1212,cljs.core.List.EMPTY,null,(cljs.core.truth_(metabase.mbql.schema.MBQLQuery)?metabase.mbql.schema.MBQLQuery.cljs$lang$test:null)]))));\n/**\n * Schema for the expected keys for a single column in `:source-metadata` (`:source-metadata` is a sequence of these\n *   entries), if it is passed in to the query.\n * \n *   This metadata automatically gets added for all source queries that are referenced via the `card__id` `:source-table`\n *   form; for explicit `:source-query`s you should usually include this information yourself when specifying explicit\n *   `:source-query`s.\n */\nmetabase.mbql.schema.SourceQueryMetadata = cljs.core.PersistentArrayMap.createAsIfByAssoc([new cljs.core.Keyword(null,\"name\",\"name\",1843675177),metabase.mbql.schema.helpers.NonBlankString,new cljs.core.Keyword(null,\"base_type\",\"base_type\",1908272670),metabase.mbql.schema.helpers.FieldType,new cljs.core.Keyword(null,\"display_name\",\"display_name\",-1494335013),metabase.mbql.schema.helpers.NonBlankString,schema.core.optional_key(new cljs.core.Keyword(null,\"semantic_type\",\"semantic_type\",272485089)),schema.core.maybe(metabase.mbql.schema.helpers.FieldSemanticOrRelationType),schema.core.optional_key(new cljs.core.Keyword(null,\"fingerprint\",\"fingerprint\",598613022)),schema.core.maybe(metabase.mbql.schema.helpers.Map),schema.core.Any,schema.core.Any]);\n/**\n * Pattern that matches `card__id` strings that can be used as the `:source-table` of MBQL queries.\n */\nmetabase.mbql.schema.source_table_card_id_regex = /^card__[1-9]\\d*$/;\n/**\n * Schema for a valid value for the `:source-table` clause of an MBQL query.\n */\nmetabase.mbql.schema.SourceTable = schema.core.cond_pre.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([metabase.mbql.schema.helpers.IntGreaterThanZero,metabase.mbql.schema.source_table_card_id_regex], 0));\n/**\n * Valid values of the `:strategy` key in a join map.\n */\nmetabase.mbql.schema.join_strategies = new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null,\"full-join\",\"full-join\",1305476385),null,new cljs.core.Keyword(null,\"right-join\",\"right-join\",-56349359),null,new cljs.core.Keyword(null,\"left-join\",\"left-join\",-672831855),null,new cljs.core.Keyword(null,\"inner-join\",\"inner-join\",659431740),null], null), null);\n/**\n * Strategy that should be used to perform the equivalent of a SQL `JOIN` against another table or a nested query.\n *   These correspond 1:1 to features of the same name in driver features lists; e.g. you should check that the current\n *   driver supports `:full-join` before generating a Join clause using that strategy.\n */\nmetabase.mbql.schema.JoinStrategy = cljs.core.apply.cljs$core$IFn$_invoke$arity$2(schema.core.enum$,metabase.mbql.schema.join_strategies);\n/**\n * Perform the equivalent of a SQL `JOIN` with another Table or nested `:source-query`. JOINs are either explicitly\n *   specified in the incoming query, or implicitly generated when one uses a `:field` clause with `:source-field`.\n * \n *   In the top-level query, you can reference Fields from the joined table or nested query by including `:source-field`\n *   in the `:field` options (known as implicit joins); for explicit joins, you *must* specify `:join-alias` yourself; in\n *   the `:field` options, e.g.\n * \n *  ;; for joins against other Tables/MBQL source queries\n *  [:field 1 {:join-alias \"my_join_alias\"}]\n * \n *  ;; for joins against native queries\n *  [:field \"my_field\" {:base-type :field/Integer, :join-alias \"my_join_alias\"}]\n */\nmetabase.mbql.schema.Join = schema.core.constrained.cljs$core$IFn$_invoke$arity$3(cljs.core.PersistentHashMap.fromArrays([schema.core.Keyword,schema.core.optional_key(new cljs.core.Keyword(null,\"source-metadata\",\"source-metadata\",-477816085)),schema.core.optional_key(new cljs.core.Keyword(null,\"source-table\",\"source-table\",-225307692)),schema.core.optional_key(new cljs.core.Keyword(null,\"alias\",\"alias\",-2039751630)),schema.core.optional_key(new cljs.core.Keyword(null,\"fields\",\"fields\",-1932066230)),new cljs.core.Keyword(null,\"condition\",\"condition\",1668437652),schema.core.optional_key(new cljs.core.Keyword(null,\"source-query\",\"source-query\",198004422)),schema.core.optional_key(new cljs.core.Keyword(null,\"fk-field-id\",\"fk-field-id\",1124127357)),schema.core.optional_key(new cljs.core.Keyword(null,\"strategy\",\"strategy\",-1471631918))],[schema.core.Any,schema.core.maybe(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [metabase.mbql.schema.SourceQueryMetadata], null)),metabase.mbql.schema.SourceTable,metabase.mbql.schema.helpers.NonBlankString,schema.core.named(schema.core.cond_pre.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([schema.core.enum$.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"all\",\"all\",892129742),new cljs.core.Keyword(null,\"none\",\"none\",1333468478)], 0)),schema.core.recursive(new cljs.core.Var(function(){return metabase.mbql.schema.Fields;},new cljs.core.Symbol(\"metabase.mbql.schema\",\"Fields\",\"metabase.mbql.schema/Fields\",-781973827,null),cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null,\"ns\",\"ns\",441598760),new cljs.core.Keyword(null,\"name\",\"name\",1843675177),new cljs.core.Keyword(null,\"file\",\"file\",-1269645878),new cljs.core.Keyword(null,\"end-column\",\"end-column\",1425389514),new cljs.core.Keyword(null,\"column\",\"column\",2078222095),new cljs.core.Keyword(null,\"line\",\"line\",212345235),new cljs.core.Keyword(null,\"declared\",\"declared\",92336021),new cljs.core.Keyword(null,\"end-line\",\"end-line\",1837326455),new cljs.core.Keyword(null,\"arglists\",\"arglists\",1661989754),new cljs.core.Keyword(null,\"doc\",\"doc\",1913296891),new cljs.core.Keyword(null,\"test\",\"test\",577538877)],[cljs.core.with_meta(new cljs.core.Symbol(null,\"metabase.mbql.schema\",\"metabase.mbql.schema\",-408168902,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"doc\",\"doc\",1913296891),\"Schema for validating a *normalized* MBQL query. This is also the definitive grammar for MBQL, wow!\"], null)),new cljs.core.Symbol(null,\"Fields\",\"Fields\",430617156,null),\"metabase/mbql/schema.cljc\",16,1,1259,true,1259,cljs.core.List.EMPTY,null,(cljs.core.truth_(metabase.mbql.schema.Fields)?metabase.mbql.schema.Fields.cljs$lang$test:null)])))], 0)),\"Valid Join `:fields`: `:all`, `:none`, or a sequence of `:field` clauses that have `:join-alias`.\"),metabase.mbql.schema.Filter,metabase.mbql.schema.SourceQuery,schema.core.maybe(metabase.mbql.schema.helpers.IntGreaterThanZero),metabase.mbql.schema.JoinStrategy]),cljs.core.every_pred.cljs$core$IFn$_invoke$arity$2(cljs.core.some_fn.cljs$core$IFn$_invoke$arity$2(new cljs.core.Keyword(null,\"source-table\",\"source-table\",-225307692),new cljs.core.Keyword(null,\"source-query\",\"source-query\",198004422)),cljs.core.complement(cljs.core.every_pred.cljs$core$IFn$_invoke$arity$2(new cljs.core.Keyword(null,\"source-table\",\"source-table\",-225307692),new cljs.core.Keyword(null,\"source-query\",\"source-query\",198004422)))),\"Joins must have either a `source-table` or `source-query`, but not both.\");\n/**\n * Schema for a valid sequence of `Join`s. Must be a non-empty sequence, and `:alias`, if specified, must be unique.\n */\nmetabase.mbql.schema.Joins = schema.core.constrained.cljs$core$IFn$_invoke$arity$3(metabase.mbql.schema.helpers.non_empty(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [metabase.mbql.schema.Join], null)),(function (p1__45491_SHARP_){\nreturn metabase.mbql.schema.helpers.empty_or_distinct_QMARK_(cljs.core.filter.cljs$core$IFn$_invoke$arity$2(cljs.core.some_QMARK_,cljs.core.map.cljs$core$IFn$_invoke$arity$2(new cljs.core.Keyword(null,\"alias\",\"alias\",-2039751630),p1__45491_SHARP_)));\n}),\"All join aliases must be unique.\");\n/**\n * Schema for valid values of the MBQL `:fields` clause.\n */\nmetabase.mbql.schema.Fields = schema.core.named(metabase.mbql.schema.helpers.distinct(metabase.mbql.schema.helpers.non_empty(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [metabase.mbql.schema.Field], null))),\"Distinct, non-empty sequence of Field clauses\");\n/**\n * Schema for a valid, normalized MBQL [inner] query.\n */\nmetabase.mbql.schema.MBQLQuery = schema.core.constrained.cljs$core$IFn$_invoke$arity$3(schema.core.constrained.cljs$core$IFn$_invoke$arity$3(cljs.core.PersistentHashMap.fromArrays([schema.core.Keyword,schema.core.optional_key(new cljs.core.Keyword(null,\"order-by\",\"order-by\",1527318070)),schema.core.optional_key(new cljs.core.Keyword(null,\"source-metadata\",\"source-metadata\",-477816085)),schema.core.optional_key(new cljs.core.Keyword(null,\"joins\",\"joins\",1033962699)),schema.core.optional_key(new cljs.core.Keyword(null,\"source-table\",\"source-table\",-225307692)),schema.core.optional_key(new cljs.core.Keyword(null,\"filter\",\"filter\",-948537934)),schema.core.optional_key(new cljs.core.Keyword(null,\"fields\",\"fields\",-1932066230)),schema.core.optional_key(new cljs.core.Keyword(null,\"aggregation\",\"aggregation\",1597476696)),schema.core.optional_key(new cljs.core.Keyword(null,\"breakout\",\"breakout\",-732419050)),schema.core.optional_key(new cljs.core.Keyword(null,\"source-query\",\"source-query\",198004422)),schema.core.optional_key(new cljs.core.Keyword(null,\"limit\",\"limit\",-1355822363)),schema.core.optional_key(new cljs.core.Keyword(null,\"page\",\"page\",849072397)),schema.core.optional_key(new cljs.core.Keyword(null,\"expressions\",\"expressions\",255689909))],[schema.core.Any,metabase.mbql.schema.helpers.distinct(metabase.mbql.schema.helpers.non_empty(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [metabase.mbql.schema.OrderBy], null))),schema.core.maybe(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [metabase.mbql.schema.SourceQueryMetadata], null)),metabase.mbql.schema.Joins,metabase.mbql.schema.SourceTable,metabase.mbql.schema.Filter,metabase.mbql.schema.Fields,metabase.mbql.schema.helpers.non_empty(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [metabase.mbql.schema.Aggregation], null)),metabase.mbql.schema.helpers.non_empty(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [metabase.mbql.schema.Field], null)),metabase.mbql.schema.SourceQuery,metabase.mbql.schema.helpers.IntGreaterThanOrEqualToZero,new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"page\",\"page\",849072397),metabase.mbql.schema.helpers.IntGreaterThanZero,new cljs.core.Keyword(null,\"items\",\"items\",1031954938),metabase.mbql.schema.helpers.IntGreaterThanZero], null),cljs.core.PersistentArrayMap.createAsIfByAssoc([metabase.mbql.schema.helpers.NonBlankString,metabase.mbql.schema.FieldOrExpressionDef])]),(function (query){\nreturn cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2((1),cljs.core.count(cljs.core.select_keys(query,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"source-query\",\"source-query\",198004422),new cljs.core.Keyword(null,\"source-table\",\"source-table\",-225307692)], null))));\n}),\"Query must specify either `:source-table` or `:source-query`, but not both.\"),(function (p__45492){\nvar map__45493 = p__45492;\nvar map__45493__$1 = cljs.core.__destructure_map(map__45493);\nvar breakout = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__45493__$1,new cljs.core.Keyword(null,\"breakout\",\"breakout\",-732419050));\nvar fields = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__45493__$1,new cljs.core.Keyword(null,\"fields\",\"fields\",-1932066230));\nreturn cljs.core.empty_QMARK_(clojure.set.intersection.cljs$core$IFn$_invoke$arity$2(cljs.core.set(breakout),cljs.core.set(fields)));\n}),\"Fields specified in `:breakout` should not be specified in `:fields`; this is implied.\");\n/**\n * Map of parameter-type -> info. Info is a map with the following keys:\n * \n *   ### `:type`\n * \n *   The general type of this parameter. `:numeric`, `:string`, `:boolean`, or `:date`, if applicable. Some parameter\n *   types like `:id` and `:category` don't have a particular `:type`. This is offered mostly so we can group stuff\n *   together or determine things like whether a given parameter is a date parameter.\n * \n *   ### `:operator`\n * \n *   Signifies this is one of the new 'operator' parameter types added in 0.39.0 or so. These parameters can only be used\n *   for [[TemplateTag:FieldFilter]]s or for Dashboard parameters mapped to MBQL queries. The value of this key is the\n *   arity for the parameter, either `:unary`, `:binary`, or `:variadic`. See\n *   the [[metabase.driver.common.parameters.operators]] namespace for more information.\n * \n *   ### `:allowed-for`\n * \n *   [[Parameter]]s with this `:type` may be supplied for [[TemplateTag]]s with these `:type`s (or `:widget-type` if\n *   `:type` is `:dimension`) types. Example: it is ok to pass a parameter of type `:date/range` for template tag with\n *   `:widget-type` `:date/all-options`; but it is NOT ok to pass a parameter of type `:date/range` for a template tag\n *   with a widget type `:date`. Why? It's a potential security risk if someone creates a Card with an \"exact-match\"\n *   Field filter like `:date` or `:text` and you pass in a parameter like `string/!=` `NOTHING_WILL_MATCH_THIS`.\n *   Non-exact-match parameters can be abused to enumerate *all* the rows in a table when the parameter was supposed to\n *   lock the results down to a single row or set of rows.\n */\nmetabase.mbql.schema.parameter_types = cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null,\"category\",\"category\",-593092832),new cljs.core.Keyword(null,\"date\",\"date\",-1463434462),new cljs.core.Keyword(\"string\",\"!=\",\"string/!=\",-1083772573),new cljs.core.Keyword(\"number\",\"=\",\"number/=\",-2094581309),new cljs.core.Keyword(\"string\",\"ends-with\",\"string/ends-with\",302681156),new cljs.core.Keyword(\"location\",\"state\",\"location/state\",-114378652),new cljs.core.Keyword(\"number\",\"between\",\"number/between\",97700581),new cljs.core.Keyword(\"date\",\"all-options\",\"date/all-options\",549325958),new cljs.core.Keyword(null,\"number\",\"number\",1570378438),new cljs.core.Keyword(\"number\",\">=\",\"number/>=\",-1670691032),new cljs.core.Keyword(\"location\",\"country\",\"location/country\",1666636202),new cljs.core.Keyword(\"string\",\"=\",\"string/=\",983744235),new cljs.core.Keyword(\"string\",\"does-not-contain\",\"string/does-not-contain\",-1536178964),new cljs.core.Keyword(\"date\",\"range\",\"date/range\",1647265776),new cljs.core.Keyword(\"string\",\"starts-with\",\"string/starts-with\",1266861170),new cljs.core.Keyword(\"string\",\"contains\",\"string/contains\",1602423827),new cljs.core.Keyword(\"date\",\"single\",\"date/single\",1554682003),new cljs.core.Keyword(\"location\",\"city\",\"location/city\",-1746973325),new cljs.core.Keyword(null,\"id\",\"id\",-1388402092),new cljs.core.Keyword(\"date\",\"relative\",\"date/relative\",25987732),new cljs.core.Keyword(\"location\",\"zip_code\",\"location/zip_code\",1641155222),new cljs.core.Keyword(\"date\",\"month-year\",\"date/month-year\",1948031290),new cljs.core.Keyword(\"date\",\"quarter-year\",\"date/quarter-year\",-1453950150),new cljs.core.Keyword(\"number\",\"!=\",\"number/!=\",-673025509),new cljs.core.Keyword(null,\"boolean\",\"boolean\",-1919418404),new cljs.core.Keyword(null,\"text\",\"text\",-1790561697),new cljs.core.Keyword(\"number\",\"<=\",\"number/<=\",-1499316353)],[new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"allowed-for\",\"allowed-for\",122724334),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,\"category\",\"category\",-593092832),null,new cljs.core.Keyword(null,\"date\",\"date\",-1463434462),null,new cljs.core.Keyword(null,\"number\",\"number\",1570378438),null,new cljs.core.Keyword(null,\"boolean\",\"boolean\",-1919418404),null,new cljs.core.Keyword(null,\"text\",\"text\",-1790561697),null], null), null)], null),new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"type\",\"type\",1174270348),new cljs.core.Keyword(null,\"date\",\"date\",-1463434462),new cljs.core.Keyword(null,\"allowed-for\",\"allowed-for\",122724334),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,\"category\",\"category\",-593092832),null,new cljs.core.Keyword(null,\"date\",\"date\",-1463434462),null,new cljs.core.Keyword(\"date\",\"all-options\",\"date/all-options\",549325958),null,new cljs.core.Keyword(\"date\",\"single\",\"date/single\",1554682003),null,new cljs.core.Keyword(null,\"id\",\"id\",-1388402092),null], null), null)], null),new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null,\"type\",\"type\",1174270348),new cljs.core.Keyword(null,\"string\",\"string\",-1989541586),new cljs.core.Keyword(null,\"operator\",\"operator\",-1860875338),new cljs.core.Keyword(null,\"variadic\",\"variadic\",882626057),new cljs.core.Keyword(null,\"allowed-for\",\"allowed-for\",122724334),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(\"string\",\"!=\",\"string/!=\",-1083772573),null], null), null)], null),new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null,\"type\",\"type\",1174270348),new cljs.core.Keyword(null,\"numeric\",\"numeric\",-1495594714),new cljs.core.Keyword(null,\"operator\",\"operator\",-1860875338),new cljs.core.Keyword(null,\"variadic\",\"variadic\",882626057),new cljs.core.Keyword(null,\"allowed-for\",\"allowed-for\",122724334),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,\"category\",\"category\",-593092832),null,new cljs.core.Keyword(\"number\",\"=\",\"number/=\",-2094581309),null,new cljs.core.Keyword(null,\"number\",\"number\",1570378438),null,new cljs.core.Keyword(null,\"id\",\"id\",-1388402092),null,new cljs.core.Keyword(\"location\",\"zip_code\",\"location/zip_code\",1641155222),null], null), null)], null),new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null,\"type\",\"type\",1174270348),new cljs.core.Keyword(null,\"string\",\"string\",-1989541586),new cljs.core.Keyword(null,\"operator\",\"operator\",-1860875338),new cljs.core.Keyword(null,\"unary\",\"unary\",-989314568),new cljs.core.Keyword(null,\"allowed-for\",\"allowed-for\",122724334),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(\"string\",\"ends-with\",\"string/ends-with\",302681156),null], null), null)], null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"allowed-for\",\"allowed-for\",122724334),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(\"location\",\"state\",\"location/state\",-114378652),null], null), null)], null),new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null,\"type\",\"type\",1174270348),new cljs.core.Keyword(null,\"numeric\",\"numeric\",-1495594714),new cljs.core.Keyword(null,\"operator\",\"operator\",-1860875338),new cljs.core.Keyword(null,\"binary\",\"binary\",-1802232288),new cljs.core.Keyword(null,\"allowed-for\",\"allowed-for\",122724334),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(\"number\",\"between\",\"number/between\",97700581),null], null), null)], null),new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"type\",\"type\",1174270348),new cljs.core.Keyword(null,\"date\",\"date\",-1463434462),new cljs.core.Keyword(null,\"allowed-for\",\"allowed-for\",122724334),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(\"date\",\"all-options\",\"date/all-options\",549325958),null], null), null)], null),new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"type\",\"type\",1174270348),new cljs.core.Keyword(null,\"numeric\",\"numeric\",-1495594714),new cljs.core.Keyword(null,\"allowed-for\",\"allowed-for\",122724334),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,\"category\",\"category\",-593092832),null,new cljs.core.Keyword(\"number\",\"=\",\"number/=\",-2094581309),null,new cljs.core.Keyword(null,\"number\",\"number\",1570378438),null,new cljs.core.Keyword(null,\"id\",\"id\",-1388402092),null,new cljs.core.Keyword(\"location\",\"zip_code\",\"location/zip_code\",1641155222),null], null), null)], null),new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null,\"type\",\"type\",1174270348),new cljs.core.Keyword(null,\"numeric\",\"numeric\",-1495594714),new cljs.core.Keyword(null,\"operator\",\"operator\",-1860875338),new cljs.core.Keyword(null,\"unary\",\"unary\",-989314568),new cljs.core.Keyword(null,\"allowed-for\",\"allowed-for\",122724334),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(\"number\",\">=\",\"number/>=\",-1670691032),null], null), null)], null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"allowed-for\",\"allowed-for\",122724334),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(\"location\",\"country\",\"location/country\",1666636202),null], null), null)], null),new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null,\"type\",\"type\",1174270348),new cljs.core.Keyword(null,\"string\",\"string\",-1989541586),new cljs.core.Keyword(null,\"operator\",\"operator\",-1860875338),new cljs.core.Keyword(null,\"variadic\",\"variadic\",882626057),new cljs.core.Keyword(null,\"allowed-for\",\"allowed-for\",122724334),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 8, [new cljs.core.Keyword(null,\"category\",\"category\",-593092832),null,new cljs.core.Keyword(\"location\",\"state\",\"location/state\",-114378652),null,new cljs.core.Keyword(\"location\",\"country\",\"location/country\",1666636202),null,new cljs.core.Keyword(\"string\",\"=\",\"string/=\",983744235),null,new cljs.core.Keyword(\"location\",\"city\",\"location/city\",-1746973325),null,new cljs.core.Keyword(null,\"id\",\"id\",-1388402092),null,new cljs.core.Keyword(\"location\",\"zip_code\",\"location/zip_code\",1641155222),null,new cljs.core.Keyword(null,\"text\",\"text\",-1790561697),null], null), null)], null),new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null,\"type\",\"type\",1174270348),new cljs.core.Keyword(null,\"string\",\"string\",-1989541586),new cljs.core.Keyword(null,\"operator\",\"operator\",-1860875338),new cljs.core.Keyword(null,\"unary\",\"unary\",-989314568),new cljs.core.Keyword(null,\"allowed-for\",\"allowed-for\",122724334),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(\"string\",\"does-not-contain\",\"string/does-not-contain\",-1536178964),null], null), null)], null),new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"type\",\"type\",1174270348),new cljs.core.Keyword(null,\"date\",\"date\",-1463434462),new cljs.core.Keyword(null,\"allowed-for\",\"allowed-for\",122724334),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(\"date\",\"all-options\",\"date/all-options\",549325958),null,new cljs.core.Keyword(\"date\",\"range\",\"date/range\",1647265776),null], null), null)], null),new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null,\"type\",\"type\",1174270348),new cljs.core.Keyword(null,\"string\",\"string\",-1989541586),new cljs.core.Keyword(null,\"operator\",\"operator\",-1860875338),new cljs.core.Keyword(null,\"unary\",\"unary\",-989314568),new cljs.core.Keyword(null,\"allowed-for\",\"allowed-for\",122724334),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(\"string\",\"starts-with\",\"string/starts-with\",1266861170),null], null), null)], null),new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null,\"type\",\"type\",1174270348),new cljs.core.Keyword(null,\"string\",\"string\",-1989541586),new cljs.core.Keyword(null,\"operator\",\"operator\",-1860875338),new cljs.core.Keyword(null,\"unary\",\"unary\",-989314568),new cljs.core.Keyword(null,\"allowed-for\",\"allowed-for\",122724334),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(\"string\",\"contains\",\"string/contains\",1602423827),null], null), null)], null),new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"type\",\"type\",1174270348),new cljs.core.Keyword(null,\"date\",\"date\",-1463434462),new cljs.core.Keyword(null,\"allowed-for\",\"allowed-for\",122724334),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,\"category\",\"category\",-593092832),null,new cljs.core.Keyword(null,\"date\",\"date\",-1463434462),null,new cljs.core.Keyword(\"date\",\"all-options\",\"date/all-options\",549325958),null,new cljs.core.Keyword(\"date\",\"single\",\"date/single\",1554682003),null,new cljs.core.Keyword(null,\"id\",\"id\",-1388402092),null], null), null)], null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"allowed-for\",\"allowed-for\",122724334),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(\"location\",\"city\",\"location/city\",-1746973325),null], null), null)], null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"allowed-for\",\"allowed-for\",122724334),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"id\",\"id\",-1388402092),null], null), null)], null),new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"type\",\"type\",1174270348),new cljs.core.Keyword(null,\"date\",\"date\",-1463434462),new cljs.core.Keyword(null,\"allowed-for\",\"allowed-for\",122724334),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(\"date\",\"all-options\",\"date/all-options\",549325958),null,new cljs.core.Keyword(\"date\",\"relative\",\"date/relative\",25987732),null], null), null)], null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"allowed-for\",\"allowed-for\",122724334),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(\"location\",\"zip_code\",\"location/zip_code\",1641155222),null], null), null)], null),new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"type\",\"type\",1174270348),new cljs.core.Keyword(null,\"date\",\"date\",-1463434462),new cljs.core.Keyword(null,\"allowed-for\",\"allowed-for\",122724334),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(\"date\",\"all-options\",\"date/all-options\",549325958),null,new cljs.core.Keyword(\"date\",\"month-year\",\"date/month-year\",1948031290),null], null), null)], null),new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"type\",\"type\",1174270348),new cljs.core.Keyword(null,\"date\",\"date\",-1463434462),new cljs.core.Keyword(null,\"allowed-for\",\"allowed-for\",122724334),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(\"date\",\"all-options\",\"date/all-options\",549325958),null,new cljs.core.Keyword(\"date\",\"quarter-year\",\"date/quarter-year\",-1453950150),null], null), null)], null),new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null,\"type\",\"type\",1174270348),new cljs.core.Keyword(null,\"numeric\",\"numeric\",-1495594714),new cljs.core.Keyword(null,\"operator\",\"operator\",-1860875338),new cljs.core.Keyword(null,\"variadic\",\"variadic\",882626057),new cljs.core.Keyword(null,\"allowed-for\",\"allowed-for\",122724334),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(\"number\",\"!=\",\"number/!=\",-673025509),null], null), null)], null),new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"type\",\"type\",1174270348),new cljs.core.Keyword(null,\"boolean\",\"boolean\",-1919418404),new cljs.core.Keyword(null,\"allowed-for\",\"allowed-for\",122724334),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null,\"category\",\"category\",-593092832),null,new cljs.core.Keyword(null,\"id\",\"id\",-1388402092),null,new cljs.core.Keyword(null,\"boolean\",\"boolean\",-1919418404),null], null), null)], null),new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"type\",\"type\",1174270348),new cljs.core.Keyword(null,\"string\",\"string\",-1989541586),new cljs.core.Keyword(null,\"allowed-for\",\"allowed-for\",122724334),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 8, [new cljs.core.Keyword(null,\"category\",\"category\",-593092832),null,new cljs.core.Keyword(\"location\",\"state\",\"location/state\",-114378652),null,new cljs.core.Keyword(\"location\",\"country\",\"location/country\",1666636202),null,new cljs.core.Keyword(\"string\",\"=\",\"string/=\",983744235),null,new cljs.core.Keyword(\"location\",\"city\",\"location/city\",-1746973325),null,new cljs.core.Keyword(null,\"id\",\"id\",-1388402092),null,new cljs.core.Keyword(\"location\",\"zip_code\",\"location/zip_code\",1641155222),null,new cljs.core.Keyword(null,\"text\",\"text\",-1790561697),null], null), null)], null),new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null,\"type\",\"type\",1174270348),new cljs.core.Keyword(null,\"numeric\",\"numeric\",-1495594714),new cljs.core.Keyword(null,\"operator\",\"operator\",-1860875338),new cljs.core.Keyword(null,\"unary\",\"unary\",-989314568),new cljs.core.Keyword(null,\"allowed-for\",\"allowed-for\",122724334),new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(\"number\",\"<=\",\"number/<=\",-1499316353),null], null), null)], null)]);\n/**\n * Schema for valid values of `:type` for a [[Parameter]].\n */\nmetabase.mbql.schema.ParameterType = cljs.core.apply.cljs$core$IFn$_invoke$arity$2(schema.core.enum$,cljs.core.keys(metabase.mbql.schema.parameter_types));\n/**\n * Schema for valid values of `:widget-type` for a [[TemplateTag:FieldFilter]].\n */\nmetabase.mbql.schema.WidgetType = cljs.core.apply.cljs$core$IFn$_invoke$arity$2(schema.core.enum$,cljs.core.cons(new cljs.core.Keyword(null,\"none\",\"none\",1333468478),cljs.core.keys(metabase.mbql.schema.parameter_types)));\n/**\n * Schema for a valid template-tag clause.\n */\nmetabase.mbql.schema.template_tag = metabase.mbql.schema.helpers.clause.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,\"template-tag\",\"template-tag\",310841038),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([\"tag-name\",schema.core.cond_pre.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([metabase.mbql.schema.helpers.NonBlankString,new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"id\",\"id\",-1388402092),metabase.mbql.schema.helpers.NonBlankString], null)], 0))], 0));\n/**\n * Schema for a valid dimension clause.\n */\nmetabase.mbql.schema.dimension = metabase.mbql.schema.helpers.clause.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,\"dimension\",\"dimension\",543254198),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([\"target\",schema.core.cond_pre.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([metabase.mbql.schema.Field,metabase.mbql.schema.template_tag], 0))], 0));\n/**\n * Schema for a valid variable clause.\n */\nmetabase.mbql.schema.variable = metabase.mbql.schema.helpers.clause.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,\"variable\",\"variable\",-281346492),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([\"target\",metabase.mbql.schema.template_tag], 0));\n/**\n * Schema for the value of `:target` in a [[Parameter]].\n */\nmetabase.mbql.schema.ParameterTarget = schema.core.cond_pre.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([metabase.mbql.schema.Field,metabase.mbql.schema.helpers.one_of_STAR_.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var or__5045__auto__ = new cljs.core.Keyword(null,\"clause-name\",\"clause-name\",-996419059).cljs$core$IFn$_invoke$arity$1(cljs.core.meta((((typeof metabase !== 'undefined') && (typeof metabase.mbql !== 'undefined') && (typeof metabase.mbql.schema !== 'undefined') && (typeof metabase.mbql.schema.dimension !== 'undefined'))?(new cljs.core.Var((function (){\nreturn metabase.mbql.schema.dimension;\n}),cljs.core.with_meta(new cljs.core.Symbol(\"metabase.mbql.schema\",\"dimension\",\"metabase.mbql.schema/dimension\",1500199226,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(\"cljs.analyzer\",\"no-resolve\",\"cljs.analyzer/no-resolve\",-1872351017),true], null)),cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null,\"ns\",\"ns\",441598760),new cljs.core.Keyword(null,\"name\",\"name\",1843675177),new cljs.core.Keyword(null,\"file\",\"file\",-1269645878),new cljs.core.Keyword(null,\"end-column\",\"end-column\",1425389514),new cljs.core.Keyword(null,\"clause-name\",\"clause-name\",-996419059),new cljs.core.Keyword(null,\"column\",\"column\",2078222095),new cljs.core.Keyword(null,\"line\",\"line\",212345235),new cljs.core.Keyword(null,\"end-line\",\"end-line\",1837326455),new cljs.core.Keyword(null,\"clause-form\",\"clause-form\",1820463737),new cljs.core.Keyword(null,\"arglists\",\"arglists\",1661989754),new cljs.core.Keyword(null,\"doc\",\"doc\",1913296891),new cljs.core.Keyword(null,\"test\",\"test\",577538877)],[cljs.core.with_meta(new cljs.core.Symbol(null,\"metabase.mbql.schema\",\"metabase.mbql.schema\",-408168902,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"doc\",\"doc\",1913296891),\"Schema for validating a *normalized* MBQL query. This is also the definitive grammar for MBQL, wow!\"], null)),new cljs.core.Symbol(null,\"dimension\",\"dimension\",-2111181571,null),\"metabase/mbql/schema.cljc\",21,new cljs.core.Keyword(null,\"dimension\",\"dimension\",543254198),1,1557,1557,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"dimension\",\"dimension\",543254198),new cljs.core.Keyword(null,\"target\",\"target\",253001721),cljs.core.list(new cljs.core.Symbol(null,\"quote\",\"quote\",1377916282,null),cljs.core.list(new cljs.core.Symbol(\"s\",\"cond-pre\",\"s/cond-pre\",-923707600,null),new cljs.core.Symbol(null,\"Field\",\"Field\",430385967,null),new cljs.core.Symbol(null,\"template-tag\",\"template-tag\",1951372565,null)))], null),cljs.core.List.EMPTY,\"Schema for a valid dimension clause.\",(cljs.core.truth_(metabase.mbql.schema.dimension)?metabase.mbql.schema.dimension.cljs$lang$test:null)]))):null)));\nif(cljs.core.truth_(or__5045__auto__)){\nreturn or__5045__auto__;\n} else {\nreturn new cljs.core.Symbol(null,\"dimension\",\"dimension\",-2111181571,null);\n}\n})(),metabase.mbql.schema.dimension], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(function (){var or__5045__auto__ = new cljs.core.Keyword(null,\"clause-name\",\"clause-name\",-996419059).cljs$core$IFn$_invoke$arity$1(cljs.core.meta((((typeof metabase !== 'undefined') && (typeof metabase.mbql !== 'undefined') && (typeof metabase.mbql.schema !== 'undefined') && (typeof metabase.mbql.schema.variable !== 'undefined'))?(new cljs.core.Var((function (){\nreturn metabase.mbql.schema.variable;\n}),cljs.core.with_meta(new cljs.core.Symbol(\"metabase.mbql.schema\",\"variable\",\"metabase.mbql.schema/variable\",-1981984686,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(\"cljs.analyzer\",\"no-resolve\",\"cljs.analyzer/no-resolve\",-1872351017),true], null)),cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null,\"ns\",\"ns\",441598760),new cljs.core.Keyword(null,\"name\",\"name\",1843675177),new cljs.core.Keyword(null,\"file\",\"file\",-1269645878),new cljs.core.Keyword(null,\"end-column\",\"end-column\",1425389514),new cljs.core.Keyword(null,\"clause-name\",\"clause-name\",-996419059),new cljs.core.Keyword(null,\"column\",\"column\",2078222095),new cljs.core.Keyword(null,\"line\",\"line\",212345235),new cljs.core.Keyword(null,\"end-line\",\"end-line\",1837326455),new cljs.core.Keyword(null,\"clause-form\",\"clause-form\",1820463737),new cljs.core.Keyword(null,\"arglists\",\"arglists\",1661989754),new cljs.core.Keyword(null,\"doc\",\"doc\",1913296891),new cljs.core.Keyword(null,\"test\",\"test\",577538877)],[cljs.core.with_meta(new cljs.core.Symbol(null,\"metabase.mbql.schema\",\"metabase.mbql.schema\",-408168902,null),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"doc\",\"doc\",1913296891),\"Schema for validating a *normalized* MBQL query. This is also the definitive grammar for MBQL, wow!\"], null)),new cljs.core.Symbol(null,\"variable\",\"variable\",1359185035,null),\"metabase/mbql/schema.cljc\",20,new cljs.core.Keyword(null,\"variable\",\"variable\",-281346492),1,1560,1560,new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"variable\",\"variable\",-281346492),new cljs.core.Keyword(null,\"target\",\"target\",253001721),cljs.core.list(new cljs.core.Symbol(null,\"quote\",\"quote\",1377916282,null),new cljs.core.Symbol(null,\"template-tag\",\"template-tag\",1951372565,null))], null),cljs.core.List.EMPTY,\"Schema for a valid variable clause.\",(cljs.core.truth_(metabase.mbql.schema.variable)?metabase.mbql.schema.variable.cljs$lang$test:null)]))):null)));\nif(cljs.core.truth_(or__5045__auto__)){\nreturn or__5045__auto__;\n} else {\nreturn new cljs.core.Symbol(null,\"variable\",\"variable\",1359185035,null);\n}\n})(),metabase.mbql.schema.variable], null)], 0))], 0));\n/**\n * Schema for the *value* of a parameter (e.g. a Dashboard parameter or a native query template tag) as passed in as\n *   part of the `:parameters` list in a query.\n */\nmetabase.mbql.schema.Parameter = cljs.core.PersistentArrayMap.createAsIfByAssoc([new cljs.core.Keyword(null,\"type\",\"type\",1174270348),metabase.mbql.schema.ParameterType,schema.core.optional_key(new cljs.core.Keyword(null,\"id\",\"id\",-1388402092)),metabase.mbql.schema.helpers.NonBlankString,schema.core.optional_key(new cljs.core.Keyword(null,\"target\",\"target\",253001721)),metabase.mbql.schema.ParameterTarget,schema.core.optional_key(new cljs.core.Keyword(null,\"value\",\"value\",305978217)),schema.core.Any,schema.core.optional_key(new cljs.core.Keyword(null,\"name\",\"name\",1843675177)),metabase.mbql.schema.helpers.NonBlankString,schema.core.optional_key(new cljs.core.Keyword(null,\"slug\",\"slug\",2029314850)),metabase.mbql.schema.helpers.NonBlankString,schema.core.optional_key(new cljs.core.Keyword(null,\"default\",\"default\",-1987822328)),schema.core.Any,schema.core.Keyword,schema.core.Any]);\n/**\n * Schema for a list of `:parameters` as passed in to a query.\n */\nmetabase.mbql.schema.ParameterList = new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [metabase.mbql.schema.Parameter], null);\n/**\n * Options that tweak the behavior of the query processor.\n */\nmetabase.mbql.schema.Settings = cljs.core.PersistentArrayMap.createAsIfByAssoc([schema.core.optional_key(new cljs.core.Keyword(null,\"report-timezone\",\"report-timezone\",-2053796389)),metabase.mbql.schema.helpers.NonBlankString,schema.core.Keyword,schema.core.Any]);\n/**\n * Additional constraints added to a query limiting the maximum number of rows that can be returned. Mostly useful\n *   because native queries don't support the MBQL `:limit` clause. For MBQL queries, if `:limit` is set, it will\n *   override these values.\n */\nmetabase.mbql.schema.Constraints = schema.core.constrained.cljs$core$IFn$_invoke$arity$3(cljs.core.PersistentArrayMap.createAsIfByAssoc([schema.core.optional_key(new cljs.core.Keyword(null,\"max-results\",\"max-results\",-32858165)),metabase.mbql.schema.helpers.IntGreaterThanOrEqualToZero,schema.core.optional_key(new cljs.core.Keyword(null,\"max-results-bare-rows\",\"max-results-bare-rows\",2096475889)),metabase.mbql.schema.helpers.IntGreaterThanOrEqualToZero,schema.core.Keyword,schema.core.Any]),(function (p__45494){\nvar map__45495 = p__45494;\nvar map__45495__$1 = cljs.core.__destructure_map(map__45495);\nvar max_results = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__45495__$1,new cljs.core.Keyword(null,\"max-results\",\"max-results\",-32858165));\nvar max_results_bare_rows = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__45495__$1,new cljs.core.Keyword(null,\"max-results-bare-rows\",\"max-results-bare-rows\",2096475889));\nif(cljs.core.not((function (){var and__5043__auto__ = max_results;\nif(cljs.core.truth_(and__5043__auto__)){\nreturn max_results_bare_rows;\n} else {\nreturn and__5043__auto__;\n}\n})())){\nreturn true;\n} else {\nreturn (max_results >= max_results_bare_rows);\n}\n}),\"max-results-bare-rows must be less or equal to than max-results\");\n/**\n * Additional options that can be used to toggle middleware on or off.\n */\nmetabase.mbql.schema.MiddlewareOptions = cljs.core.PersistentArrayMap.createAsIfByAssoc([schema.core.optional_key(new cljs.core.Keyword(null,\"skip-results-metadata?\",\"skip-results-metadata?\",251010463)),schema.core.Bool,schema.core.optional_key(new cljs.core.Keyword(null,\"format-rows?\",\"format-rows?\",992129486)),schema.core.Bool,schema.core.optional_key(new cljs.core.Keyword(null,\"disable-mbql->native?\",\"disable-mbql->native?\",1103196677)),schema.core.Bool,schema.core.optional_key(new cljs.core.Keyword(null,\"disable-max-results?\",\"disable-max-results?\",857693204)),schema.core.Bool,schema.core.optional_key(new cljs.core.Keyword(null,\"userland-query?\",\"userland-query?\",-123699383)),schema.core.maybe(schema.core.Bool),schema.core.optional_key(new cljs.core.Keyword(null,\"add-default-userland-constraints?\",\"add-default-userland-constraints?\",2039156190)),schema.core.maybe(schema.core.Bool),schema.core.optional_key(new cljs.core.Keyword(null,\"process-viz-settings?\",\"process-viz-settings?\",-173592315)),schema.core.maybe(schema.core.Bool),schema.core.Keyword,schema.core.Any]);\n/**\n * Schema for `info.context`; used for informational purposes to record how a query was executed.\n */\nmetabase.mbql.schema.Context = schema.core.enum$.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"action\",\"action\",-811238024),new cljs.core.Keyword(null,\"ad-hoc\",\"ad-hoc\",-2033634036),new cljs.core.Keyword(null,\"collection\",\"collection\",-683361892),new cljs.core.Keyword(null,\"csv-download\",\"csv-download\",2141432084),new cljs.core.Keyword(null,\"dashboard\",\"dashboard\",-631747508),new cljs.core.Keyword(null,\"embedded-dashboard\",\"embedded-dashboard\",-485078014),new cljs.core.Keyword(null,\"embedded-question\",\"embedded-question\",-2146473954),new cljs.core.Keyword(null,\"json-download\",\"json-download\",-971130133),new cljs.core.Keyword(null,\"map-tiles\",\"map-tiles\",1961865797),new cljs.core.Keyword(null,\"public-dashboard\",\"public-dashboard\",645968405),new cljs.core.Keyword(null,\"public-question\",\"public-question\",629369976),new cljs.core.Keyword(null,\"pulse\",\"pulse\",-244494476),new cljs.core.Keyword(null,\"question\",\"question\",-1411720117),new cljs.core.Keyword(null,\"xlsx-download\",\"xlsx-download\",-1622892009)], 0));\n/**\n * Schema for query `:info` dictionary, which is used for informational purposes to record information about how a query\n *   was executed in QueryExecution and other places. It is considered bad form for middleware to change its behavior\n *   based on this information, don't do it!\n */\nmetabase.mbql.schema.Info = cljs.core.PersistentHashMap.fromArrays([schema.core.optional_key(new cljs.core.Keyword(null,\"card-name\",\"card-name\",-2035606807)),schema.core.optional_key(new cljs.core.Keyword(null,\"pulse-id\",\"pulse-id\",1331432237)),schema.core.optional_key(new cljs.core.Keyword(\"metadata\",\"dataset-metadata\",\"metadata/dataset-metadata\",-728376469)),schema.core.optional_key(new cljs.core.Keyword(null,\"action-id\",\"action-id\",-1727958578)),schema.core.optional_key(new cljs.core.Keyword(null,\"executed-by\",\"executed-by\",-739811161)),schema.core.optional_key(new cljs.core.Keyword(null,\"dashboard-id\",\"dashboard-id\",1965414288)),schema.core.optional_key(new cljs.core.Keyword(null,\"query-hash\",\"query-hash\",-1524484965)),schema.core.optional_key(new cljs.core.Keyword(\"alias\",\"escaped->original\",\"alias/escaped->original\",-1334024182)),schema.core.optional_key(new cljs.core.Keyword(null,\"card-id\",\"card-id\",-1770060179)),schema.core.optional_key(new cljs.core.Keyword(null,\"context\",\"context\",-830191113))],[schema.core.maybe(metabase.mbql.schema.helpers.NonBlankString),schema.core.maybe(metabase.mbql.schema.helpers.IntGreaterThanZero),schema.core.maybe(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.PersistentArrayMap.createAsIfByAssoc([schema.core.Any,schema.core.Any])], null)),schema.core.maybe(metabase.mbql.schema.helpers.IntGreaterThanZero),schema.core.maybe(metabase.mbql.schema.helpers.IntGreaterThanZero),schema.core.maybe(metabase.mbql.schema.helpers.IntGreaterThanZero),schema.core.maybe(schema.core.Any),schema.core.maybe(cljs.core.PersistentArrayMap.createAsIfByAssoc([schema.core.Any,schema.core.Any])),schema.core.maybe(metabase.mbql.schema.helpers.IntGreaterThanZero),schema.core.maybe(metabase.mbql.schema.Context)]);\n/**\n * The ID used to signify that a database is 'virtual' rather than physical.\n * \n * A fake integer ID is used so as to minimize the number of changes that need to be made on the frontend -- by using\n * something that would otherwise be a legal ID, *nothing* need change there, and the frontend can query against this\n * 'database' none the wiser. (This integer ID is negative which means it will never conflict with a *real* database\n * ID.)\n * \n * This ID acts as a sort of flag. The relevant places in the middleware can check whether the DB we're querying is\n * this 'virtual' database and take the appropriate actions.\n */\nmetabase.mbql.schema.saved_questions_virtual_database_id = (-1337);\n/**\n * Schema for a valid `:database` ID, in the top-level 'outer' query. Either a positive integer (referring to an\n *   actual Database), or the saved questions virtual ID, which is a placeholder used for queries using the\n *   `:source-table \"card__id\"` shorthand for a source query resolved by middleware (since clients might not know the\n *   actual DB for that source query.)\n */\nmetabase.mbql.schema.DatabaseID = schema.core.cond_pre.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([schema.core.eq(metabase.mbql.schema.saved_questions_virtual_database_id),metabase.mbql.schema.helpers.IntGreaterThanZero], 0));\n/**\n * Schema for an [outer] query, e.g. the sort of thing you'd pass to the query processor or save in\n *   `Card.dataset_query`.\n */\nmetabase.mbql.schema.Query = schema.core.constrained.cljs$core$IFn$_invoke$arity$3(schema.core.constrained.cljs$core$IFn$_invoke$arity$3(schema.core.constrained.cljs$core$IFn$_invoke$arity$3(cljs.core.PersistentHashMap.fromArrays([schema.core.Keyword,schema.core.optional_key(new cljs.core.Keyword(null,\"native\",\"native\",-613060878)),schema.core.optional_key(new cljs.core.Keyword(null,\"settings\",\"settings\",1556144875)),schema.core.optional_key(new cljs.core.Keyword(null,\"info\",\"info\",-317069002)),schema.core.optional_key(new cljs.core.Keyword(null,\"constraints\",\"constraints\",422775616)),schema.core.optional_key(new cljs.core.Keyword(null,\"middleware\",\"middleware\",1462115504)),new cljs.core.Keyword(null,\"type\",\"type\",1174270348),schema.core.optional_key(new cljs.core.Keyword(null,\"query\",\"query\",-1288509510)),new cljs.core.Keyword(null,\"database\",\"database\",1849087575),schema.core.optional_key(new cljs.core.Keyword(null,\"parameters\",\"parameters\",-1229919748))],[schema.core.Any,metabase.mbql.schema.NativeQuery,schema.core.maybe(metabase.mbql.schema.Settings),schema.core.maybe(metabase.mbql.schema.Info),schema.core.maybe(metabase.mbql.schema.Constraints),schema.core.maybe(metabase.mbql.schema.MiddlewareOptions),schema.core.enum$.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"query\",\"query\",-1288509510),new cljs.core.Keyword(null,\"native\",\"native\",-613060878)], 0)),metabase.mbql.schema.MBQLQuery,metabase.mbql.schema.DatabaseID,metabase.mbql.schema.ParameterList]),cljs.core.every_pred.cljs$core$IFn$_invoke$arity$2(cljs.core.some_fn.cljs$core$IFn$_invoke$arity$2(new cljs.core.Keyword(null,\"native\",\"native\",-613060878),new cljs.core.Keyword(null,\"query\",\"query\",-1288509510)),cljs.core.complement(cljs.core.every_pred.cljs$core$IFn$_invoke$arity$2(new cljs.core.Keyword(null,\"native\",\"native\",-613060878),new cljs.core.Keyword(null,\"query\",\"query\",-1288509510)))),\"Query must specify either `:native` or `:query`, but not both.\"),(function (p__45496){\nvar map__45497 = p__45496;\nvar map__45497__$1 = cljs.core.__destructure_map(map__45497);\nvar native$ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__45497__$1,new cljs.core.Keyword(null,\"native\",\"native\",-613060878));\nvar mbql = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__45497__$1,new cljs.core.Keyword(null,\"query\",\"query\",-1288509510));\nvar query_type = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__45497__$1,new cljs.core.Keyword(null,\"type\",\"type\",1174270348));\nvar G__45498 = query_type;\nvar G__45498__$1 = (((G__45498 instanceof cljs.core.Keyword))?G__45498.fqn:null);\nswitch (G__45498__$1) {\ncase \"native\":\nreturn native$;\n\nbreak;\ncase \"query\":\nreturn mbql;\n\nbreak;\ndefault:\nthrow (new Error([\"No matching clause: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(G__45498__$1)].join('')));\n\n}\n}),\"Native queries must specify `:native`; MBQL queries must specify `:query`.\"),cljs.core.complement(new cljs.core.Keyword(null,\"source-metadata\",\"source-metadata\",-477816085)),\"`:source-metadata` should be added in the same level as `:source-query` (i.e., the 'inner' MBQL query.)\");\n/**\n * Compiled schema validator for an [outer] Dashboard query. (Pre-compling a validator is more efficient; use this\n *   instead of calling `(s/validate Query query)` or similar.\n */\nmetabase.mbql.schema.validate_query = schema.core.validator(metabase.mbql.schema.Query);\n","~:ns-info",["^ ","~:rename-macros",null,"~:renames",["^ "],"~:meta",["^ ","~:doc","Schema for validating a *normalized* MBQL query. This is also the definitive grammar for MBQL, wow!","~:file","metabase/mbql/schema.cljc","~:line",1,"~:column",5,"~:end-line",1,"~:end-column",25],"~:ns-aliases",["^ ","~$cljs.loader","~$shadow.loader","~$clojure.core","~$cljs.core","~$clojure.spec.gen.alpha","~$cljs.spec.gen.alpha","~$clojure.pprint","~$cljs.pprint","~$clojure.core.match","~$cljs.core.match"],"~:use-macros",["^ ","~$defclause","~$metabase.mbql.schema.macros","~$one-of","^I"],"~:excludes",["~#set",["~$=","~$<","~$<=","~$*","~$min","~$>","~$replace","~$concat","~$-","~$or","~$time","~$not","~$/","~$>=","~$not-empty","~$distinct","~$+","~$abs","~$case","~$max","~$count","~$and"]],"~:name","~$metabase.mbql.schema","~:reader-aliases",["^ "],"~:js-aliases",["^ ","moment","~$shadow.js.shim.module$moment","moment-timezone","~$shadow.js.shim.module$moment_timezone"],"~:op","~:ns","~:imports",null,"~:requires",["^ ","~$set","~$clojure.set","~$helpers","~$metabase.mbql.schema.helpers","~$schema.core","^1@","~$moment","^15","^17","^17","^@","^@","~$goog","^1B","^1?","^1?","^I","^I","^?","^@","^1=","^1=","^15","^15","~$s","^1@","~$mtz","^17","~$core","^@"],"~:seen",["^L",["~:require"]],"~:uses",["^ ","~$is-clause?","^1?","^H","^I","^J","^I"],"~:require-macros",["^ ","^@","^@","^1@","^1@","^I","^I","^?","^@","~$s","^1@","^1D","^@"],"~:form",["~#list",["~$ns","^11","Schema for validating a *normalized* MBQL query. This is also the definitive grammar for MBQL, wow!",["^1K",["~:refer-clojure","~:exclude",["^Z","^V","^N","^Y","~$+","~$-","~$/","~$*","^[","^Q","^S","^U","~$=","~$<","~$>","^M","^T","^R","^X","^P","^O","^W"]]],["^1K",["^1F",["moment","~:as","^1A"],["moment-timezone","^1O","^1C"],["^?","^1O","^1D"],["^1=","^1O","^1<"],["^1?","^1O","^1>","~:refer",["^1H"]],["^I","^1P",["^H","^J"]],["^1@","^1O","~$s"]]]]],"~:flags",["^ ","^1F",["^L",[]]],"~:js-deps",["^ ","^14",["^ ","^1O","^1A"],"^16",["^ ","^1O","^1C"]],"~:deps",["^1B","^@","^15","^17","^1=","^1?","^I","^1@"]],"^19","^11","~:resource-id",["~:shadow.build.classpath/resource","metabase/mbql/schema.cljc"],"~:compiled-at",1692612524606,"^12",["^ ","^1<","^1=","^1>","^1?","^1@","^1@","^1A","^15","^17","^17","^@","^@","^1B","^1B","^1?","^1?","^I","^I","^?","^@","^1=","^1=","^15","^15","~$s","^1@","^1C","^17","^1D","^@"],"~:resource-name","metabase/mbql/schema.cljc","~:warnings",[],"~:source","(ns metabase.mbql.schema\n  \"Schema for validating a *normalized* MBQL query. This is also the definitive grammar for MBQL, wow!\"\n  (:refer-clojure :exclude [count distinct min max + - / * and or not not-empty = < > <= >= time case concat replace abs])\n  #?@\n   (:clj\n    [(:require\n      [clojure.core :as core]\n      [clojure.set :as set]\n      [metabase.mbql.schema.helpers :as helpers :refer [is-clause?]]\n      [metabase.mbql.schema.macros :refer [defclause one-of]]\n      [schema.core :as s])\n     (:import\n      (java.time ZoneId)\n      (java.time.format DateTimeFormatter))]\n    :cljs\n    [(:require\n      [\"moment\" :as moment]\n      [\"moment-timezone\" :as mtz]\n      [clojure.core :as core]\n      [clojure.set :as set]\n      [metabase.mbql.schema.helpers :as helpers :refer [is-clause?]]\n      [metabase.mbql.schema.macros :refer [defclause one-of]]\n      [schema.core :as s])]))\n\n#?(:cljs\n   (comment\n     moment/keepme\n     mtz/keepme)) ;; to get the timezone list from moment\n\n;; A NOTE ABOUT METADATA:\n;;\n;; Clauses below are marked with the following tags for documentation purposes:\n;;\n;; *  Clauses marked `^:sugar` are syntactic sugar primarily intended to make generating queries easier on the\n;;    frontend. These clauses are automatically rewritten as simpler clauses by the `desugar` or `expand-macros`\n;;    middleware. Thus driver implementations do not need to handle these clauses.\n;;\n;; *  Clauses marked `^:internal` are automatically generated by `wrap-value-literals` or other middleware from values\n;;    passed in. They are not intended to be used by the frontend when generating a query. These add certain\n;;    information that simplify driver implementations. When writing MBQL queries yourself you should pretend these\n;;    clauses don't exist.\n;;\n;; *  Clauses marked `^{:requires-features #{feature+}}` require a certain set of features to be used. At some date in\n;;    the future we will likely add middleware that uses this metadata to automatically validate that a driver has the\n;;    features needed to run the query in question.\n\n;;; +----------------------------------------------------------------------------------------------------------------+\n;;; |                                                  MBQL Clauses                                                  |\n;;; +----------------------------------------------------------------------------------------------------------------+\n\n;;; ------------------------------------------------- Datetime Stuff -------------------------------------------------\n\n;; `:day-of-week` depends on the [[metabase.public-settings/start-of-week]] Setting, by default Sunday.\n;; 1 = first day of the week (e.g. Sunday)\n;; 7 = last day of the week (e.g. Saturday)\n(def date-bucketing-units\n  \"Set of valid units for bucketing or comparing against a *date* Field.\"\n  #{:default :day :day-of-week :day-of-month :day-of-year :week :week-of-year\n    :month :month-of-year :quarter :quarter-of-year :year})\n\n(def time-bucketing-units\n  \"Set of valid units for bucketing or comparing against a *time* Field.\"\n  #{:default :millisecond :second :minute :minute-of-hour :hour :hour-of-day})\n\n(def datetime-bucketing-units\n  \"Set of valid units for bucketing or comparing against a *datetime* Field.\"\n  (set/union date-bucketing-units time-bucketing-units))\n\n(def DateUnit\n  \"Valid unit for *date* bucketing.\"\n  (s/named\n   (apply s/enum date-bucketing-units)\n   \"date-bucketing-unit\"))\n\n;; it could make sense to say hour-of-day(field) =  hour-of-day(\"2018-10-10T12:00\")\n;; but it does not make sense to say month-of-year(field) = month-of-year(\"08:00:00\"),\n;; does it? So we'll restrict the set of units a TimeValue can have to ones that have no notion of day/date.\n(def TimeUnit\n  \"Valid unit for *time* bucketing.\"\n  (s/named\n   (apply s/enum time-bucketing-units)\n   \"time-bucketing-unit\"))\n\n(def DateTimeUnit\n  \"Valid unit for *datetime* bucketing.\"\n  (s/named\n   (apply s/enum datetime-bucketing-units)\n   \"datetime-bucketing-unit\"))\n\n(def TimezoneId\n  \"Valid timezone id.\"\n  (s/named\n    #?(:clj  (apply s/enum (ZoneId/getAvailableZoneIds)) ;; 600 timezones on java 17\n       :cljs (apply s/enum (.names (.-tz moment))))      ;; 596 timezones on moment-timezone 0.5.38\n    \"timezone-id\"))\n\n(def TemporalExtractUnits\n  \"Valid units to extract from a temporal.\"\n  (s/named\n    (apply s/enum #{:year-of-era\n                    :quarter-of-year\n                    :month-of-year\n                    :week-of-year-iso\n                    :week-of-year-us\n                    :week-of-year-instance\n                    :day-of-month\n                    :day-of-week\n                    :hour-of-day\n                    :minute-of-hour\n                    :second-of-minute})\n    \"temporal-extract-units\"))\n\n(def DatetimeDiffUnits\n  \"Valid units for a datetime-diff clause.\"\n  (s/named\n    (apply s/enum #{:second :minute :hour :day :week :month :quarter :year})\n    \"datetime-diff-units\"))\n\n(def ExtractWeekModes\n  \"Valid modes to extract weeks.\"\n  (s/named\n    (apply s/enum #{:iso :us :instance})\n    \"extract-week-modes\"))\n\n(def ^:private RelativeDatetimeUnit\n  (s/named\n   (apply s/enum #{:default :minute :hour :day :week :month :quarter :year})\n   \"relative-datetime-unit\"))\n\n#?(:clj\n   (defn- can-parse-iso-8601?\n     [^DateTimeFormatter formatter ^String s]\n     (when (string? s)\n       (try\n         (.parse formatter s)\n         true\n         (catch Throwable _\n           false))))\n\n   :cljs\n   (defn- can-parse-iso-8601?\n     [s]\n     (when (string? s)\n       (not= (.parse js/Date s) ##NaN))))\n\n(def ^{:arglists '([s])} can-parse-date?\n  \"Returns whether a string can be parsed to an ISO 8601 date or not.\"\n  #?(:clj (partial can-parse-iso-8601? DateTimeFormatter/ISO_DATE)\n     :cljs can-parse-iso-8601?))\n\n(def ^{:arglists '([s])} can-parse-datetime?\n  \"Returns whether a string can be parsed to an ISO 8601 datetime or not.\"\n  #?(:clj (partial can-parse-iso-8601? DateTimeFormatter/ISO_DATE_TIME)\n     :cljs can-parse-iso-8601?))\n\n(def ^{:arglists '([s])} can-parse-time?\n  \"Returns whether a string can be parsed to an ISO 8601 time or not.\"\n  #?(:clj (partial can-parse-iso-8601? DateTimeFormatter/ISO_TIME)\n     :cljs can-parse-iso-8601?))\n\n(def LiteralDateString\n  \"Schema for an ISO-8601-formatted date string literal.\"\n  (s/constrained helpers/NonBlankString can-parse-date? \"valid ISO-8601 datetime string literal\"))\n\n(def LiteralDatetimeString\n  \"Schema for an ISO-8601-formattedor datetime string literal.\"\n  (s/constrained helpers/NonBlankString can-parse-datetime? \"valid ISO-8601 datetime string literal\"))\n\n(def LiteralTimeString\n  \"Schema for an ISO-8601-formatted time string literal.\"\n  (s/constrained helpers/NonBlankString can-parse-time? \"valid ISO-8601 time string literal\"))\n\n;; TODO - `unit` is not allowed if `n` is `current`\n(defclause relative-datetime\n  n    (s/cond-pre (s/eq :current) s/Int)\n  unit (optional RelativeDatetimeUnit))\n\n(defclause interval\n  n    s/Int\n  unit RelativeDatetimeUnit)\n\n;; This clause is automatically generated by middleware when datetime literals (literal strings or one of the Java\n;; types) are encountered. Unit is inferred by looking at the Field the timestamp is compared against. Implemented\n;; mostly to convenience driver implementations. You don't need to use this form directly when writing MBQL; datetime\n;; literal strings are preferred instead.\n;;\n;; example:\n;; [:= [:field 10 {:temporal-unit :day}] \"2018-10-02\"]\n;;\n;; becomes:\n;; [:= [:field 10 {:temporal-unit :day}] [:absolute-datetime #inst \"2018-10-02\" :day]]\n(def ^:internal ^{:clause-name :absolute-datetime} absolute-datetime\n  \"Schema for an `:absolute-datetime` clause.\"\n  (s/conditional\n   #(core/not (is-clause? :absolute-datetime %))\n   (helpers/clause\n    :absolute-datetime\n    \"t\"\n    #?(:clj (s/cond-pre java.time.LocalDate java.time.LocalDateTime java.time.OffsetDateTime java.time.ZonedDateTime)\n       :cljs js/Date)\n    \"unit\"\n    DateTimeUnit)\n\n   #(instance? #?(:clj java.time.LocalDate :cljs js/Date) (second %))\n   (helpers/clause\n    :absolute-datetime\n    \"date\" #?(:clj java.time.LocalDate :cljs js/Date)\n    \"unit\" DateUnit)\n\n   :else\n   (helpers/clause\n    :absolute-datetime\n    \"datetime\"\n    #?(:clj (s/cond-pre java.time.LocalDateTime java.time.OffsetDateTime java.time.ZonedDateTime)\n       :cljs js/Date)\n    \"unit\"\n    DateTimeUnit)))\n\n\n;; almost exactly the same as `absolute-datetime`, but generated in some sitations where the literal in question was\n;; clearly a time (e.g. \"08:00:00.000\") and/or the Field derived from `:type/Time` and/or the unit was a\n;; time-bucketing unit\n;;\n;; TODO - should we have a separate `date` type as well\n(defclause ^:internal time\n  time #?(:clj (s/cond-pre java.time.LocalTime java.time.OffsetTime)\n          :cljs js/Date)\n  unit TimeUnit)\n\n(def ^:private DateOrDatetimeLiteral\n  \"Schema for a valid date or datetime literal.\"\n  (s/conditional\n   (partial is-clause? :absolute-datetime)\n   absolute-datetime\n\n   can-parse-datetime?\n   LiteralDatetimeString\n\n   can-parse-date?\n   LiteralDateString\n\n   :else\n   (s/cond-pre\n    ;; literal datetime strings and Java types will get transformed to `absolute-datetime` clauses automatically by\n    ;; middleware so drivers don't need to deal with these directly. You only need to worry about handling\n    ;; `absolute-datetime` clauses.\n    #?@(:clj\n        [java.time.LocalDate\n         java.time.LocalDateTime\n         java.time.OffsetDateTime\n         java.time.ZonedDateTime]\n\n        :cljs\n        [js/Date]))))\n\n(def ^:private TimeLiteral\n  \"Schema for valid time literals.\"\n  (s/conditional\n   (partial is-clause? :time)\n   time\n\n   can-parse-time?\n   LiteralTimeString\n\n   :else\n   (s/cond-pre\n    ;; literal datetime strings and Java types will get transformed to `time` clauses automatically by\n    ;; middleware so drivers don't need to deal with these directly. You only need to worry about handling\n    ;; `time` clauses.\n    #?@(:clj\n        [java.time.LocalTime\n         java.time.OffsetTime]\n\n        :cljs\n        [js/Date]))))\n\n(def ^:private TemporalLiteral\n  \"Schema for valid temporal literals.\"\n  (s/cond-pre TimeLiteral DateOrDatetimeLiteral))\n\n(def DateTimeValue\n  \"Schema for a datetime value drivers will personally have to handle, either an `absolute-datetime` form or a\n  `relative-datetime` form.\"\n  (one-of absolute-datetime relative-datetime time))\n\n\n;;; -------------------------------------------------- Other Values --------------------------------------------------\n\n(def ValueTypeInfo\n  \"Type info about a value in a `:value` clause. Added automatically by `wrap-value-literals` middleware to values in\n  filter clauses based on the Field in the clause.\"\n  ;; TODO -- these should use `lisp-case` like everything else in MBQL.\n  {(s/optional-key :database_type) (s/maybe helpers/NonBlankString)\n   (s/optional-key :base_type)     (s/maybe helpers/FieldType)\n   (s/optional-key :semantic_type) (s/maybe helpers/FieldSemanticOrRelationType)\n   (s/optional-key :unit)          (s/maybe DateTimeUnit)\n   (s/optional-key :name)          (s/maybe helpers/NonBlankString)\n   s/Keyword                       s/Any})\n\n;; Arguments to filter clauses are automatically replaced with [:value <value> <type-info>] clauses by the\n;; `wrap-value-literals` middleware. This is done to make it easier to implement query processors, because most driver\n;; implementations dispatch off of Object type, which is often not enough to make informed decisions about how to\n;; treat certain objects. For example, a string compared against a Postgres UUID Field needs to be parsed into a UUID\n;; object, since text <-> UUID comparison doesn't work in Postgres. For this reason, raw literals in `:filter`\n;; clauses are wrapped in `:value` clauses and given information about the type of the Field they will be compared to.\n(defclause ^:internal value\n  value    s/Any\n  type-info (s/maybe ValueTypeInfo))\n\n\n;;; ----------------------------------------------------- Fields -----------------------------------------------------\n\n;; Expression *references* refer to a something in the `:expressions` clause, e.g. something like\n;;\n;;    [:+ [:field 1 nil] [:field 2 nil]]\n;;\n;; As of 0.42.0 `:expression` references can have an optional options map\n(defclause ^{:requires-features #{:expressions}} expression\n  expression-name helpers/NonBlankString\n  options         (optional (s/pred map? \"map\")))\n\n(def BinningStrategyName\n  \"Schema for a valid value for the `strategy-name` param of a [[field]] clause with `:binning` information.\"\n  (s/enum :num-bins :bin-width :default))\n\n(defn- validate-bin-width [schema]\n  (s/constrained\n   schema\n   (fn [{:keys [strategy bin-width]}]\n     (if (core/= strategy :bin-width)\n       bin-width\n       true))\n   \"You must specify :bin-width when using the :bin-width strategy.\"))\n\n(defn- validate-num-bins [schema]\n  (s/constrained\n   schema\n   (fn [{:keys [strategy num-bins]}]\n     (if (core/= strategy :num-bins)\n       num-bins\n       true))\n   \"You must specify :num-bins when using the :num-bins strategy.\"))\n\n(def FieldBinningOptions\n  \"Schema for `:binning` options passed to a `:field` clause.\"\n  (-> {:strategy                   BinningStrategyName\n       (s/optional-key :num-bins)  helpers/IntGreaterThanZero\n       (s/optional-key :bin-width) (s/constrained s/Num (complement neg?) \"bin width must be >= 0.\")\n       s/Keyword                   s/Any}\n      validate-bin-width\n      validate-num-bins))\n\n(defn valid-temporal-unit-for-base-type?\n  \"Whether `temporal-unit` (e.g. `:day`) is valid for the given `base-type` (e.g. `:type/Date`). If either is `nil` this\n  will return truthy. Accepts either map of `field-options` or `base-type` and `temporal-unit` passed separately.\"\n  ([{:keys [base-type temporal-unit] :as _field-options}]\n   (valid-temporal-unit-for-base-type? base-type temporal-unit))\n\n  ([base-type temporal-unit]\n   (if-let [units (when (core/and temporal-unit base-type)\n                    (condp #(isa? %2 %1) base-type\n                      :type/Date     date-bucketing-units\n                      :type/Time     time-bucketing-units\n                      :type/DateTime datetime-bucketing-units\n                      nil))]\n     (contains? units temporal-unit)\n     true)))\n\n(defn- validate-temporal-unit [schema]\n  ;; TODO - consider breaking this out into separate constraints for the three different types so we can generate more\n  ;; specific error messages\n  (s/constrained\n   schema\n   valid-temporal-unit-for-base-type?\n   \"Invalid :temporal-unit for the specified :base-type.\"))\n\n(defn- no-binning-options-at-top-level [schema]\n  (s/constrained\n   schema\n   (complement :strategy)\n   \"Found :binning keys at the top level of :field options. binning-related options belong under the :binning key.\"))\n\n(def ^:private FieldOptions\n  (-> {(s/optional-key :base-type)     (s/maybe helpers/FieldType)\n       ;;\n       ;; replaces `fk->`\n       ;;\n       ;; `:source-field` is used to refer to a Field from a different Table you would like IMPLICITLY JOINED to the\n       ;; source table.\n       ;;\n       ;; If both `:source-field` and `:join-alias` are supplied, `:join-alias` should be used to perform the join;\n       ;; `:source-field` should be for information purposes only.\n       (s/optional-key :source-field)  (s/maybe (s/cond-pre helpers/IntGreaterThanZero helpers/NonBlankString))\n       ;;\n       ;; `:temporal-unit` is used to specify DATE BUCKETING for a Field that represents a moment in time of some sort.\n       ;;\n       ;; There is no requirement that all `:type/Temporal` derived Fields specify a `:temporal-unit`, but for legacy\n       ;; reasons `:field` clauses that refer to `:type/DateTime` Fields will be automatically \"bucketed\" in the\n       ;; `:breakout` and `:filter` clauses, but nowhere else. Auto-bucketing only applies to `:filter` clauses when\n       ;; values for comparison are `yyyy-MM-dd` date strings. See the `auto-bucket-datetimes` middleware for more\n       ;; details. `:field` clauses elsewhere will not be automatically bucketed, so drivers still need to make sure they\n       ;; do any special datetime handling for plain `:field` clauses when their Field derives from `:type/DateTime`.\n       (s/optional-key :temporal-unit) (s/maybe DateTimeUnit)\n       ;;\n       ;; replaces `joined-field`\n       ;;\n       ;; `:join-alias` is used to refer to a Field from a different Table/nested query that you are EXPLICITLY\n       ;; JOINING against.\n       (s/optional-key :join-alias)    (s/maybe helpers/NonBlankString)\n       ;;\n       ;; replaces `binning-strategy`\n       ;;\n       ;; Using binning requires the driver to support the `:binning` feature.\n       (s/optional-key :binning)       (s/maybe FieldBinningOptions)\n       ;;\n       s/Keyword                       s/Any}\n      validate-temporal-unit\n      no-binning-options-at-top-level))\n\n(defn- require-base-type-for-field-name [schema]\n  (s/constrained\n   schema\n   (fn [[_ id-or-name {:keys [base-type]}]]\n     (if (string? id-or-name)\n       base-type\n       true))\n   \":field clauses using a string field name must specify :base-type.\"))\n\n(def ^{:clause-name :field, :added \"0.39.0\"} field\n  \"Schema for a `:field` clause.\"\n  (-> (helpers/clause\n       :field\n       \"id-or-name\" (s/cond-pre helpers/IntGreaterThanZero helpers/NonBlankString)\n       \"options\"    (s/maybe (s/recursive #'FieldOptions)))\n      require-base-type-for-field-name))\n\n(def ^{:clause-name :field, :added \"0.39.0\"} field:id\n  \"Schema for a `:field` clause, with the added constraint that it must use an integer Field ID.\"\n  (s/constrained\n   field\n   (fn [[_ id-or-name]]\n     (integer? id-or-name))\n   \"Must be a :field with an integer Field ID.\"))\n\n(def ^:private Field*\n  (one-of expression field))\n\n;; TODO -- consider renaming this FieldOrExpression\n(def Field\n  \"Schema for either a `:field` clause (reference to a Field) or an `:expression` clause (reference to an expression).\"\n  (s/recursive #'Field*))\n\n;; aggregate field reference refers to an aggregation, e.g.\n;;\n;;    {:aggregation [[:count]]\n;;     :order-by    [[:asc [:aggregation 0]]]} ;; refers to the 0th aggregation, `:count`\n;;\n;; Currently aggregate Field references can only be used inside order-by clauses. In the future once we support SQL\n;; `HAVING` we can allow them in filter clauses too\n;;\n;; TODO - shouldn't we allow composing aggregations in expressions? e.g.\n;;\n;;    {:order-by [[:asc [:+ [:aggregation 0] [:aggregation 1]]]]}\n;;\n;; TODO - it would be nice if we could check that there's actually an aggregation with the corresponding index,\n;; wouldn't it\n;;\n;; As of 0.42.0 `:aggregation` references can have an optional options map.\n(defclause aggregation\n  aggregation-clause-index s/Int\n  options                  (optional (s/pred map? \"map\")))\n\n(def FieldOrAggregationReference\n  \"Schema for any type of valid Field clause, or for an indexed reference to an aggregation clause.\"\n  (s/if (partial is-clause? :aggregation)\n    aggregation\n    Field))\n\n\n;;; -------------------------------------------------- Expressions ---------------------------------------------------\n\n;; Expressions are \"calculated column\" definitions, defined once and then used elsewhere in the MBQL query.\n\n(def string-functions\n  \"Functions that return string values. Should match [[StringExpression]].\"\n  #{:substring :trim :rtrim :ltrim :upper :lower :replace :concat :regex-match-first :coalesce :case})\n\n(declare StringExpression)\n\n(def ^:private StringExpressionArg\n  (s/conditional\n   string?\n   s/Str\n\n   (partial is-clause? string-functions)\n   (s/recursive #'StringExpression)\n\n   (partial is-clause? :value)\n   value\n\n   :else\n   Field))\n\n(def numeric-functions\n  \"Functions that return numeric values. Should match [[NumericExpression]].\"\n  #{:+ :- :/ :* :coalesce :length :round :ceil :floor :abs :power :sqrt :log :exp :case :datetime-diff\n    ;; extraction functions (get some component of a given temporal value/column)\n    :temporal-extract\n    ;; SUGAR drivers do not need to implement\n    :get-year :get-quarter :get-month :get-week :get-day :get-day-of-week :get-hour :get-minute :get-second})\n\n(def boolean-functions\n  \"Functions that return boolean values. Should match [[BooleanExpression]].\"\n  #{:and :or :not :< :<= :> :>= := :!=})\n\n(def ^:private aggregations #{:sum :avg :stddev :var :median :percentile :min :max :cum-count :cum-sum :count-where :sum-where :share :distinct :metric :aggregation-options :count})\n\n(def datetime-functions\n  \"Functions that return Date or DateTime values. Should match [[DatetimeExpression]].\"\n  #{:+ :datetime-add :datetime-subtract :convert-timezone :now})\n\n(declare NumericExpression)\n(declare BooleanExpression)\n(declare DatetimeExpression)\n(declare Aggregation)\n\n(def ^:private NumericExpressionArg\n  (s/conditional\n   number?\n   s/Num\n\n   (partial is-clause? numeric-functions)\n   (s/recursive #'NumericExpression)\n\n   (partial is-clause? aggregations)\n   (s/recursive #'Aggregation)\n\n   (partial is-clause? :value)\n   value\n\n   :else\n   Field))\n\n(def ^:private DateTimeExpressionArg\n  (s/conditional\n   (partial is-clause? aggregations)\n   (s/recursive #'Aggregation)\n\n   (partial is-clause? :value)\n   value\n\n   (partial is-clause? datetime-functions)\n   (s/recursive #'DatetimeExpression)\n\n   :else\n   (s/cond-pre DateOrDatetimeLiteral Field)))\n\n(def ^:private ExpressionArg\n  (s/conditional\n   number?\n   s/Num\n\n   boolean?\n   s/Bool\n\n   (partial is-clause? boolean-functions)\n   (s/recursive #'BooleanExpression)\n\n   (partial is-clause? numeric-functions)\n   (s/recursive #'NumericExpression)\n\n   (partial is-clause? datetime-functions)\n   (s/recursive #'DatetimeExpression)\n\n   string?\n   s/Str\n\n   (partial is-clause? string-functions)\n   (s/recursive #'StringExpression)\n\n   (partial is-clause? :value)\n   value\n\n   :else\n   Field))\n\n(def ^:private NumericExpressionArgOrInterval\n  (s/if (partial is-clause? :interval)\n    interval\n    NumericExpressionArg))\n\n(def ^:private IntGreaterThanZeroOrNumericExpression\n  (s/if number?\n    helpers/IntGreaterThanZero\n    NumericExpressionArg))\n\n(defclause ^{:requires-features #{:expressions}} coalesce\n  a ExpressionArg, b ExpressionArg, more (rest ExpressionArg))\n\n(defclause ^{:requires-features #{:expressions}} substring\n  s StringExpressionArg, start IntGreaterThanZeroOrNumericExpression, length (optional NumericExpressionArg))\n\n(defclause ^{:requires-features #{:expressions}} length\n  s StringExpressionArg)\n\n(defclause ^{:requires-features #{:expressions}} trim\n  s StringExpressionArg)\n\n(defclause ^{:requires-features #{:expressions}} rtrim\n  s StringExpressionArg)\n\n(defclause ^{:requires-features #{:expressions}} ltrim\n  s StringExpressionArg)\n\n(defclause ^{:requires-features #{:expressions}} upper\n  s StringExpressionArg)\n\n(defclause ^{:requires-features #{:expressions}} lower\n  s StringExpressionArg)\n\n(defclause ^{:requires-features #{:expressions}} replace\n  s StringExpressionArg, match s/Str, replacement s/Str)\n\n(defclause ^{:requires-features #{:expressions}} concat\n  a StringExpressionArg, b StringExpressionArg, more (rest StringExpressionArg))\n\n(defclause ^{:requires-features #{:expressions :regex}} regex-match-first\n  s StringExpressionArg, pattern s/Str)\n\n(defclause ^{:requires-features #{:expressions}} +\n  x NumericExpressionArgOrInterval, y NumericExpressionArgOrInterval, more (rest NumericExpressionArgOrInterval))\n\n(defclause ^{:requires-features #{:expressions}} -\n  x NumericExpressionArg, y NumericExpressionArgOrInterval, more (rest NumericExpressionArgOrInterval))\n\n(defclause ^{:requires-features #{:expressions}} /, x NumericExpressionArg, y NumericExpressionArg, more (rest NumericExpressionArg))\n\n(defclause ^{:requires-features #{:expressions}} *, x NumericExpressionArg, y NumericExpressionArg, more (rest NumericExpressionArg))\n\n(defclause ^{:requires-features #{:expressions}} floor\n  x NumericExpressionArg)\n\n(defclause ^{:requires-features #{:expressions}} ceil\n  x NumericExpressionArg)\n\n(defclause ^{:requires-features #{:expressions}} round\n  x NumericExpressionArg)\n\n(defclause ^{:requires-features #{:expressions}} abs\n  x NumericExpressionArg)\n\n(defclause ^{:requires-features #{:advanced-math-expressions}} power\n  x NumericExpressionArg,  y NumericExpressionArg)\n\n(defclause ^{:requires-features #{:advanced-math-expressions}} sqrt\n  x NumericExpressionArg)\n\n(defclause ^{:requires-features #{:advanced-math-expressions}} exp\n  x NumericExpressionArg)\n\n(defclause ^{:requires-features #{:advanced-math-expressions}} log\n  x NumericExpressionArg)\n\n(declare NumericExpression*)\n\n(def ^:private NumericExpression\n  \"Schema for the definition of a numeric expression. All numeric expressions evaluate to numeric values.\"\n  (s/recursive #'NumericExpression*))\n\n;; The result is positive if x <= y, and negative otherwise.\n;;\n;; Days, weeks, months, and years are only counted if they are whole to the \"day\".\n;; For example, `datetimeDiff(\"2022-01-30\", \"2022-02-28\", \"month\")` returns 0 months.\n;;\n;; If the values are datetimes, the time doesn't matter for these units.\n;; For example, `datetimeDiff(\"2022-01-01T09:00:00\", \"2022-01-02T08:00:00\", \"day\")` returns 1 day even though it is less than 24 hours.\n;;\n;; Hours, minutes, and seconds are only counted if they are whole.\n;; For example, datetimeDiff(\"2022-01-01T01:00:30\", \"2022-01-01T02:00:29\", \"hour\") returns 0 hours.\n(defclause ^{:requires-features #{:datetime-diff}} datetime-diff\n  datetime-x DateTimeExpressionArg\n  datetime-y DateTimeExpressionArg\n  unit       DatetimeDiffUnits)\n\n(defclause ^{:requires-features #{:temporal-extract}} temporal-extract\n  datetime DateTimeExpressionArg\n  unit     TemporalExtractUnits\n  mode     (optional ExtractWeekModes)) ;; only for get-week\n\n;; SUGAR CLAUSE: get-year, get-month... clauses are all sugars clause that will be rewritten as [:temporal-extract column :year]\n(defclause ^{:requires-features #{:temporal-extract}} ^:sugar get-year\n  date DateTimeExpressionArg)\n\n(defclause ^{:requires-features #{:temporal-extract}} ^:sugar get-quarter\n  date DateTimeExpressionArg)\n\n(defclause ^{:requires-features #{:temporal-extract}} ^:sugar get-month\n  date DateTimeExpressionArg)\n\n(defclause ^{:requires-features #{:temporal-extract}} ^:sugar get-week\n  date DateTimeExpressionArg\n  mode (optional ExtractWeekModes))\n\n(defclause ^{:requires-features #{:temporal-extract}} ^:sugar get-day\n  date DateTimeExpressionArg)\n\n(defclause ^{:requires-features #{:temporal-extract}} ^:sugar get-day-of-week\n  date DateTimeExpressionArg)\n\n(defclause ^{:requires-features #{:temporal-extract}} ^:sugar get-hour\n  datetime DateTimeExpressionArg)\n\n(defclause ^{:requires-features #{:temporal-extract}} ^:sugar get-minute\n  datetime DateTimeExpressionArg)\n\n(defclause ^{:requires-features #{:temporal-extract}} ^:sugar get-second\n  datetime DateTimeExpressionArg)\n\n(defclause ^{:requires-features #{:convert-timezone}} convert-timezone\n  datetime DateTimeExpressionArg\n  to       TimezoneId\n  from     (optional TimezoneId))\n\n(def ^:private ArithmeticDateTimeUnit\n  (s/named\n   (apply s/enum #{:millisecond :second :minute :hour :day :week :month :quarter :year})\n   \"arithmetic-datetime-unit\"))\n\n(defclause ^{:requires-features #{:date-arithmetics}} datetime-add\n  datetime DateTimeExpressionArg\n  amount   NumericExpressionArg\n  unit     ArithmeticDateTimeUnit)\n\n(defclause ^{:requires-features #{:now}} now)\n\n(defclause ^{:requires-features #{:date-arithmetics}} datetime-subtract\n  datetime DateTimeExpressionArg\n  amount   NumericExpressionArg\n  unit     ArithmeticDateTimeUnit)\n\n(def ^:private DatetimeExpression*\n  (one-of + datetime-add datetime-subtract convert-timezone now))\n\n(def DatetimeExpression\n  \"Schema for the definition of a date function expression.\"\n  (s/recursive #'DatetimeExpression*))\n\n(declare StringExpression*)\n\n(def ^:private StringExpression\n  \"Schema for the definition of an string expression.\"\n  (s/recursive #'StringExpression*))\n\n;;; ----------------------------------------------------- Filter -----------------------------------------------------\n\n(declare Filter)\n\n(defclause and\n  first-clause  (s/recursive #'Filter)\n  second-clause (s/recursive #'Filter)\n  other-clauses (rest (s/recursive #'Filter)))\n\n(defclause or\n  first-clause  (s/recursive #'Filter)\n  second-clause (s/recursive #'Filter)\n  other-clauses (rest (s/recursive #'Filter)))\n\n(defclause not, clause (s/recursive #'Filter))\n\n(def ^:private FieldOrRelativeDatetime\n  (s/if (partial is-clause? :relative-datetime)\n   relative-datetime\n   Field))\n\n(def ^:private EqualityComparable\n  \"Schema for things that make sense in a `=` or `!=` filter, i.e. things that can be compared for equality.\"\n  (s/maybe\n   (s/cond-pre\n    s/Bool\n    s/Num\n    s/Str\n    TemporalLiteral\n    FieldOrRelativeDatetime\n    ExpressionArg\n    value)))\n\n(def ^:private OrderComparable\n  \"Schema for things that make sense in a filter like `>` or `<`, i.e. things that can be sorted.\"\n  (s/if (partial is-clause? :value)\n    value\n    (s/cond-pre\n     s/Num\n     s/Str\n     TemporalLiteral\n     ExpressionArg\n     FieldOrRelativeDatetime)))\n\n;; For all of the non-compound Filter clauses below the first arg is an implicit Field ID\n\n;; These are SORT OF SUGARY, because extra values will automatically be converted a compound clauses. Driver\n;; implementations only need to handle the 2-arg forms.\n;;\n;; `=` works like SQL `IN` with more than 2 args\n;;\n;;    [:= [:field 1 nil] 2 3] --[DESUGAR]--> [:or [:= [:field 1 nil] 2] [:= [:field 1 nil] 3]]\n;;\n;; `!=` works like SQL `NOT IN` with more than 2 args\n;;\n;;    [:!= [:field 1 nil] 2 3] --[DESUGAR]--> [:and [:!= [:field 1 nil] 2] [:!= [:field 1 nil] 3]]\n\n(defclause =,  field EqualityComparable, value-or-field EqualityComparable, more-values-or-fields (rest EqualityComparable))\n(defclause !=, field EqualityComparable, value-or-field EqualityComparable, more-values-or-fields (rest EqualityComparable))\n\n(defclause <,  field OrderComparable, value-or-field OrderComparable)\n(defclause >,  field OrderComparable, value-or-field OrderComparable)\n(defclause <=, field OrderComparable, value-or-field OrderComparable)\n(defclause >=, field OrderComparable, value-or-field OrderComparable)\n\n;; :between is INCLUSIVE just like SQL !!!\n(defclause between field OrderComparable, min OrderComparable, max OrderComparable)\n\n;; SUGAR CLAUSE: This is automatically written as a pair of `:between` clauses by the `:desugar` middleware.\n(defclause ^:sugar inside\n  lat-field OrderComparable\n  lon-field OrderComparable\n  lat-max   OrderComparable\n  lon-min   OrderComparable\n  lat-min   OrderComparable\n  lon-max   OrderComparable)\n\n;; SUGAR CLAUSES: These are rewritten as `[:= <field> nil]` and `[:not= <field> nil]` respectively\n(defclause ^:sugar is-null,  field Field)\n(defclause ^:sugar not-null, field Field)\n\n;; These are rewritten as `[:or [:= <field> nil] [:= <field> \"\"]]` and\n;; `[:and [:not= <field> nil] [:not= <field> \"\"]]`\n(defclause ^:sugar is-empty,  field Field)\n(defclause ^:sugar not-empty, field Field)\n\n(def ^:private StringFilterOptions\n  {(s/optional-key :case-sensitive) s/Bool}) ; default true\n\n(defclause starts-with, field StringExpressionArg, string-or-field StringExpressionArg, options (optional StringFilterOptions))\n(defclause ends-with,   field StringExpressionArg, string-or-field StringExpressionArg, options (optional StringFilterOptions))\n(defclause contains,    field StringExpressionArg, string-or-field StringExpressionArg, options (optional StringFilterOptions))\n\n;; SUGAR: this is rewritten as [:not [:contains ...]]\n(defclause ^:sugar does-not-contain\n  field StringExpressionArg, string-or-field StringExpressionArg, options (optional StringFilterOptions))\n\n(def ^:private TimeIntervalOptions\n  ;; Should we include partial results for the current day/month/etc? Defaults to `false`; set this to `true` to\n  ;; include them.\n  {(s/optional-key :include-current) s/Bool}) ; default false\n\n;; Filter subclause. Syntactic sugar for specifying a specific time interval.\n;;\n;; Return rows where datetime Field 100's value is in the current month\n;;\n;;    [:time-interval [:field 100 nil] :current :month]\n;;\n;; Return rows where datetime Field 100's value is in the current month, including partial results for the\n;; current day\n;;\n;;    [:time-interval [:field 100 nil] :current :month {:include-current true}]\n;;\n;; SUGAR: This is automatically rewritten as a filter clause with a relative-datetime value\n(defclause ^:sugar time-interval\n  field   Field\n  n       (s/cond-pre\n           s/Int\n           (s/enum :current :last :next))\n  unit    RelativeDatetimeUnit\n  options (optional TimeIntervalOptions))\n\n;; A segment is a special `macro` that saves some pre-definied filter clause, e.g. [:segment 1]\n;; this gets replaced by a normal Filter clause in MBQL macroexpansion\n;;\n;; It can also be used for GA, which looks something like `[:segment \"gaid::-11\"]`. GA segments aren't actually MBQL\n;; segments and pass-thru to GA.\n(defclause ^:sugar segment, segment-id (s/cond-pre helpers/IntGreaterThanZero helpers/NonBlankString))\n\n(declare BooleanExpression*)\n\n(def ^:private BooleanExpression\n  \"Schema for the definition of an arithmetic expression.\"\n  (s/recursive #'BooleanExpression*))\n\n(def ^:private BooleanExpression*\n  (one-of and or not < <= > >= = !=))\n\n(def ^:private Filter*\n  (s/conditional\n   (partial is-clause? datetime-functions) DatetimeExpression\n   (partial is-clause? numeric-functions)  NumericExpression\n   (partial is-clause? string-functions)   StringExpression\n   (partial is-clause? boolean-functions)  BooleanExpression\n   :else\n   (one-of\n    ;; filters drivers must implement\n    and or not = != < > <= >= between starts-with ends-with contains\n    ;; SUGAR filters drivers do not need to implement\n    does-not-contain inside is-empty not-empty is-null not-null time-interval segment)))\n\n(def Filter\n  \"Schema for a valid MBQL `:filter` clause.\"\n  (s/recursive #'Filter*))\n\n(def ^:private CaseClause [(s/one Filter \"pred\") (s/one ExpressionArg \"expr\")])\n\n(def ^:private CaseClauses [CaseClause])\n\n(def ^:private CaseOptions\n  {(s/optional-key :default) ExpressionArg})\n\n(defclause ^{:requires-features #{:basic-aggregations}} case\n  clauses CaseClauses, options (optional CaseOptions))\n\n(def ^:private NumericExpression*\n  (one-of + - / * coalesce length floor ceil round abs power sqrt exp log case datetime-diff\n          temporal-extract get-year get-quarter get-month get-week get-day get-day-of-week\n          get-hour get-minute get-second))\n\n(def ^:private StringExpression*\n  (one-of substring trim ltrim rtrim replace lower upper concat regex-match-first coalesce case))\n\n(def FieldOrExpressionDef\n  \"Schema for anything that is accepted as a top-level expression definition, either an arithmetic expression such as a\n  `:+` clause or a `:field` clause.\"\n  (s/conditional\n   (partial is-clause? numeric-functions)  NumericExpression\n   (partial is-clause? string-functions)   StringExpression\n   (partial is-clause? boolean-functions)  BooleanExpression\n   (partial is-clause? datetime-functions) DatetimeExpression\n   (partial is-clause? :case)              case\n   :else                                   Field))\n\n;;; -------------------------------------------------- Aggregations --------------------------------------------------\n\n;; For all of the 'normal' Aggregations below (excluding Metrics) fields are implicit Field IDs\n\n;; cum-sum and cum-count are SUGAR because they're implemented in middleware. The clauses are swapped out with\n;; `count` and `sum` aggregations respectively and summation is done in Clojure-land\n(defclause ^{:requires-features #{:basic-aggregations}} ^:sugar count,     field (optional Field))\n(defclause ^{:requires-features #{:basic-aggregations}} ^:sugar cum-count, field (optional Field))\n\n;; technically aggregations besides count can also accept expressions as args, e.g.\n;;\n;;    [[:sum [:+ [:field 1 nil] [:field 2 nil]]]]\n;;\n;; Which is equivalent to SQL:\n;;\n;;    SUM(field_1 + field_2)\n\n(defclause ^{:requires-features #{:basic-aggregations}} avg,      field-or-expression FieldOrExpressionDef)\n(defclause ^{:requires-features #{:basic-aggregations}} cum-sum,  field-or-expression FieldOrExpressionDef)\n(defclause ^{:requires-features #{:basic-aggregations}} distinct, field-or-expression FieldOrExpressionDef)\n(defclause ^{:requires-features #{:basic-aggregations}} sum,      field-or-expression FieldOrExpressionDef)\n(defclause ^{:requires-features #{:basic-aggregations}} min,      field-or-expression FieldOrExpressionDef)\n(defclause ^{:requires-features #{:basic-aggregations}} max,      field-or-expression FieldOrExpressionDef)\n\n(defclause ^{:requires-features #{:basic-aggregations}} sum-where\n  field-or-expression FieldOrExpressionDef, pred Filter)\n\n(defclause ^{:requires-features #{:basic-aggregations}} count-where\n  pred Filter)\n\n(defclause ^{:requires-features #{:basic-aggregations}} share\n  pred Filter)\n\n(defclause ^{:requires-features #{:standard-deviation-aggregations}} stddev\n  field-or-expression FieldOrExpressionDef)\n\n(defclause ^{:requires-features #{:standard-deviation-aggregations}} [ag:var var]\n  field-or-expression FieldOrExpressionDef)\n\n(defclause ^{:requires-features #{:percentile-aggregations}} median\n  field-or-expression FieldOrExpressionDef)\n\n(defclause ^{:requires-features #{:percentile-aggregations}} percentile\n  field-or-expression FieldOrExpressionDef, percentile NumericExpressionArg)\n\n\n;; Metrics are just 'macros' (placeholders for other aggregations with optional filter and breakout clauses) that get\n;; expanded to other aggregations/etc. in the expand-macros middleware\n;;\n;; METRICS WITH STRING IDS, e.g. `[:metric \"ga:sessions\"]`, are Google Analytics metrics, not Dashboard metrics! They\n;; pass straight thru to the GA query processor.\n(defclause ^:sugar metric, metric-id (s/cond-pre helpers/IntGreaterThanZero helpers/NonBlankString))\n\n;; the following are definitions for expression aggregations, e.g.\n;;\n;;    [:+ [:sum [:field 10 nil]] [:sum [:field 20 nil]]]\n\n(def ^:private UnnamedAggregation*\n  (s/if (partial is-clause? numeric-functions)\n    NumericExpression\n    (one-of avg cum-sum distinct stddev sum min max metric share count-where\n            sum-where case median percentile ag:var\n            ;; SUGAR clauses\n            cum-count count)))\n\n(def ^:private UnnamedAggregation\n  (s/recursive #'UnnamedAggregation*))\n\n(def AggregationOptions\n  \"Additional options for any aggregation clause when wrapping it in `:aggregation-options`.\"\n  {;; name to use for this aggregation in the native query instead of the default name (e.g. `count`)\n   (s/optional-key :name)         helpers/NonBlankString\n   ;; user-facing display name for this aggregation instead of the default one\n   (s/optional-key :display-name) helpers/NonBlankString\n   s/Keyword                      s/Any})\n\n(defclause aggregation-options\n  aggregation UnnamedAggregation\n  options     AggregationOptions)\n\n(def Aggregation\n  \"Schema for anything that is a valid `:aggregation` clause.\"\n  (s/if (partial is-clause? :aggregation-options)\n    aggregation-options\n    UnnamedAggregation))\n\n\n;;; ---------------------------------------------------- Order-By ----------------------------------------------------\n\n;; order-by is just a series of `[<direction> <field>]` clauses like\n;;\n;;    {:order-by [[:asc [:field 1 nil]], [:desc [:field 2 nil]]]}\n;;\n;; Field ID is implicit in these clauses\n\n(defclause asc,  field FieldOrAggregationReference)\n(defclause desc, field FieldOrAggregationReference)\n\n(def OrderBy\n  \"Schema for an `order-by` clause subclause.\"\n  (one-of asc desc))\n\n\n;;; +----------------------------------------------------------------------------------------------------------------+\n;;; |                                                    Queries                                                     |\n;;; +----------------------------------------------------------------------------------------------------------------+\n\n;;; ---------------------------------------------- Native [Inner] Query ----------------------------------------------\n\n;; Template tags are used to specify {{placeholders}} in native queries that are replaced with some sort of value when\n;; the query itself runs. There are four basic types of template tag for native queries:\n;;\n;; 1. Field filters, which are used like\n;;\n;;        SELECT * FROM table WHERE {{field_filter}}\n;;\n;;   These reference specific Fields and are replaced with entire conditions, e.g. `some_field > 1000`\n;;\n;; 2. Raw values, which are used like\n;;\n;;        SELECT * FROM table WHERE my_field = {{x}}\n;;\n;;   These are replaced with raw values.\n;;\n;; 3. Native query snippets, which might be used like\n;;\n;;        SELECT * FROM ({{snippet: orders}}) source\n;;\n;;    These are replaced with `NativeQuerySnippet`s from the application database.\n;;\n;; 4. Source query Card IDs, which are used like\n;;\n;;        SELECT * FROM ({{#123}}) source\n;;\n;;   These are replaced with the query from the Card with that ID.\n;;\n;; Field filters and raw values usually have their value specified by `:parameters` (see [[Parameters]] below).\n\n(def TemplateTagType\n  \"Schema for valid values of template tag `:type`.\"\n  (s/enum :snippet :card :dimension :number :text :date))\n\n(def ^:private TemplateTag:Common\n  \"Things required by all template tag types.\"\n  {;; TODO -- `:id` is actually 100% required but we have a lot of tests that don't specify it because this constraint\n   ;; wasn't previously enforced; we need to go in and fix those tests and make this non-optional\n   (s/optional-key :id) helpers/NonBlankString\n   :name                helpers/NonBlankString\n   :display-name        helpers/NonBlankString\n   s/Keyword            s/Any})\n\n;; Example:\n;;\n;;    {:id           \"c2fc7310-44eb-4f21-c3a0-63806ffb7ddd\"\n;;     :name         \"snippet: select\"\n;;     :display-name \"Snippet: select\"\n;;     :type         :snippet\n;;     :snippet-name \"select\"\n;;     :snippet-id   1}\n(def TemplateTag:Snippet\n  \"Schema for a native query snippet template tag.\"\n  (merge\n   TemplateTag:Common\n   {:type                      (s/eq :snippet)\n    :snippet-name              helpers/NonBlankString\n    :snippet-id                helpers/IntGreaterThanZero\n    ;; database to which this Snippet belongs. Doesn't always seen to be specified.\n    (s/optional-key :database) helpers/IntGreaterThanZero}))\n\n;; Example:\n;;\n;;    {:id           \"fc5e14d9-7d14-67af-66b2-b2a6e25afeaf\"\n;;     :name         \"#1635\"\n;;     :display-name \"#1635\"\n;;     :type         :card\n;;     :card-id      1635}\n(def TemplateTag:SourceQuery\n  \"Schema for a source query template tag.\"\n  (merge\n   TemplateTag:Common\n   {:type    (s/eq :card)\n    :card-id helpers/IntGreaterThanZero}))\n\n(def ^:private TemplateTag:Value:Common\n  \"Stuff shared between the Field filter and raw value template tag schemas.\"\n  (merge\n   TemplateTag:Common\n   {;; default value for this parameter\n    (s/optional-key :default)  s/Any\n    ;; whether or not a value for this parameter is required in order to run the query\n    (s/optional-key :required) s/Bool}))\n\n(declare ParameterType WidgetType)\n\n;; Example:\n;;\n;;    {:id           \"c20851c7-8a80-0ffa-8a99-ae636f0e9539\"\n;;     :name         \"date\"\n;;     :display-name \"Date\"\n;;     :type         :dimension,\n;;     :dimension    [:field 4 nil]\n;;     :widget-type  :date/all-options}\n(def TemplateTag:FieldFilter\n  \"Schema for a field filter template tag.\"\n  (merge\n   TemplateTag:Value:Common\n   {:type        (s/eq :dimension)\n    :dimension   field\n    ;; which type of widget the frontend should show for this Field Filter; this also affects which parameter types\n    ;; are allowed to be specified for it.\n    :widget-type (s/recursive #'WidgetType)\n    ;; optional map to be appended to filter clause\n    (s/optional-key :options) {s/Keyword s/Any}}))\n\n(def raw-value-template-tag-types\n  \"Set of valid values of `:type` for raw value template tags.\"\n  #{:number :text :date :boolean})\n\n(def TemplateTag:RawValue:Type\n  \"Valid values of `:type` for raw value template tags.\"\n  (apply s/enum raw-value-template-tag-types))\n\n;; Example:\n;;\n;;    {:id           \"35f1ecd4-d622-6d14-54be-750c498043cb\"\n;;     :name         \"id\"\n;;     :display-name \"Id\"\n;;     :type         :number\n;;     :required     true\n;;     :default      \"1\"}\n(def TemplateTag:RawValue\n  \"Schema for a raw value template tag.\"\n  (merge\n   TemplateTag:Value:Common\n   ;; `:type` is used be the FE to determine which type of widget to display for the template tag, and to determine\n   ;; which types of parameters are allowed to be passed in for this template tag.\n   {:type TemplateTag:RawValue:Type}))\n\n;; TODO -- if we were using core.spec here I would make this a multimethod-based spec instead and have it dispatch off\n;; of `:type`. Then we could make it possible to add new types dynamically\n\n(def TemplateTag\n  \"Schema for a template tag as specified in a native query. There are four types of template tags, differentiated by\n  `:type` (see comments above).\"\n  (s/conditional\n   #(core/= (:type %) :dimension) TemplateTag:FieldFilter\n   #(core/= (:type %) :snippet)   TemplateTag:Snippet\n   #(core/= (:type %) :card)      TemplateTag:SourceQuery\n   :else                          TemplateTag:RawValue))\n\n(def TemplateTagMap\n  \"Schema for the `:template-tags` map passed in as part of a native query.\"\n  ;; map of template tag name -> template tag definition\n  (-> {helpers/NonBlankString TemplateTag}\n      ;; make sure people don't try to pass in a `:name` that's different from the actual key in the map.\n      (s/constrained (fn [m]\n                      (every? (fn [[tag-name tag-definition]]\n                                (core/= tag-name (:name tag-definition)))\n                              m))\n                    \"keys in template tag map must match the :name of their values\")))\n\n(def NativeQuery\n  \"Schema for a valid, normalized native [inner] query.\"\n  {:query                          s/Any\n   (s/optional-key :template-tags) TemplateTagMap\n   ;; collection (table) this query should run against. Needed for MongoDB\n   (s/optional-key :collection)    (s/maybe helpers/NonBlankString)\n   ;; other stuff gets added in my different bits of QP middleware to record bits of state or pass info around.\n   ;; Everyone else can ignore them.\n   s/Keyword                       s/Any})\n\n\n;;; ----------------------------------------------- MBQL [Inner] Query -----------------------------------------------\n\n(declare Query MBQLQuery)\n\n(def SourceQuery\n  \"Schema for a valid value for a `:source-query` clause.\"\n  (s/if (every-pred map? :native)\n    ;; when using native queries as source queries the schema is exactly the same except use `:native` in place of\n    ;; `:query` for reasons I do not fully remember (perhaps to make it easier to differentiate them from MBQL source\n    ;; queries).\n    (set/rename-keys NativeQuery {:query :native})\n    (s/recursive #'MBQLQuery)))\n\n(def SourceQueryMetadata\n  \"Schema for the expected keys for a single column in `:source-metadata` (`:source-metadata` is a sequence of these\n  entries), if it is passed in to the query.\n\n  This metadata automatically gets added for all source queries that are referenced via the `card__id` `:source-table`\n  form; for explicit `:source-query`s you should usually include this information yourself when specifying explicit\n  `:source-query`s.\"\n  ;; TODO - there is a very similar schema in `metabase.sync.analyze.query-results`; see if we can merge them\n  {:name                           helpers/NonBlankString\n   :base_type                      helpers/FieldType\n   ;; this is only used by the annotate post-processing stage, not really needed at all for pre-processing, might be\n   ;; able to remove this as a requirement\n   :display_name                   helpers/NonBlankString\n   (s/optional-key :semantic_type) (s/maybe helpers/FieldSemanticOrRelationType)\n   ;; you'll need to provide this in order to use BINNING\n   (s/optional-key :fingerprint)   (s/maybe helpers/Map)\n   s/Any                           s/Any})\n\n(def source-table-card-id-regex\n  \"Pattern that matches `card__id` strings that can be used as the `:source-table` of MBQL queries.\"\n  #\"^card__[1-9]\\d*$\")\n\n(def SourceTable\n  \"Schema for a valid value for the `:source-table` clause of an MBQL query.\"\n  (s/cond-pre helpers/IntGreaterThanZero source-table-card-id-regex))\n\n(def join-strategies\n  \"Valid values of the `:strategy` key in a join map.\"\n  #{:left-join :right-join :inner-join :full-join})\n\n(def JoinStrategy\n  \"Strategy that should be used to perform the equivalent of a SQL `JOIN` against another table or a nested query.\n  These correspond 1:1 to features of the same name in driver features lists; e.g. you should check that the current\n  driver supports `:full-join` before generating a Join clause using that strategy.\"\n  (apply s/enum join-strategies))\n\n(declare Fields)\n\n(def Join\n  \"Perform the equivalent of a SQL `JOIN` with another Table or nested `:source-query`. JOINs are either explicitly\n  specified in the incoming query, or implicitly generated when one uses a `:field` clause with `:source-field`.\n\n  In the top-level query, you can reference Fields from the joined table or nested query by including `:source-field`\n  in the `:field` options (known as implicit joins); for explicit joins, you *must* specify `:join-alias` yourself; in\n  the `:field` options, e.g.\n\n    ;; for joins against other Tables/MBQL source queries\n    [:field 1 {:join-alias \\\"my_join_alias\\\"}]\n\n    ;; for joins against native queries\n    [:field \\\"my_field\\\" {:base-type :field/Integer, :join-alias \\\"my_join_alias\\\"}]\"\n  (->\n   {;; *What* to JOIN. Self-joins can be done by using the same `:source-table` as in the query where this is specified.\n    ;; YOU MUST SUPPLY EITHER `:source-table` OR `:source-query`, BUT NOT BOTH!\n    (s/optional-key :source-table)\n    SourceTable\n\n    (s/optional-key :source-query)\n    SourceQuery\n    ;;\n    ;; The condition on which to JOIN. Can be anything that is a valid `:filter` clause. For automatically-generated\n    ;; JOINs this is always\n    ;;\n    ;;    [:= <source-table-fk-field> [:field <dest-table-pk-field> {:join-alias <join-table-alias>}]]\n    ;;\n    :condition\n    Filter\n    ;;\n    ;; Defaults to `:left-join`; used for all automatically-generated JOINs\n    ;;\n    ;; Driver implementations: this is guaranteed to be present after pre-processing.\n    (s/optional-key :strategy)\n    JoinStrategy\n    ;;\n    ;; The Fields to include in the results *if* a top-level `:fields` clause *is not* specified. This can be either\n    ;; `:none`, `:all`, or a sequence of Field clauses.\n    ;;\n    ;; *  `:none`: no Fields from the joined table or nested query are included (unless indirectly included by\n    ;;    breakouts or other clauses). This is the default, and what is used for automatically-generated joins.\n    ;;\n    ;; *  `:all`: will include all of the Fields from the joined table or query\n    ;;\n    ;; *  a sequence of Field clauses: include only the Fields specified. Valid clauses are the same as the top-level\n    ;;    `:fields` clause. This should be non-empty and all elements should be distinct. The normalizer will\n    ;;    automatically remove duplicate fields for you, and replace empty clauses with `:none`.\n    ;;\n    ;; Driver implementations: you can ignore this clause. Relevant fields will be added to top-level `:fields` clause\n    ;; with appropriate aliases.\n    (s/optional-key :fields)\n    (s/named\n     (s/cond-pre\n      (s/enum :all :none)\n      (s/recursive #'Fields))\n     \"Valid Join `:fields`: `:all`, `:none`, or a sequence of `:field` clauses that have `:join-alias`.\")\n    ;;\n    ;; The name used to alias the joined table or query. This is usually generated automatically and generally looks\n    ;; like `table__via__field`. You can specify this yourself if you need to reference a joined field with a\n    ;; `:join-alias` in the options.\n    ;;\n    ;; Driver implementations: This is guaranteed to be present after pre-processing.\n    (s/optional-key :alias)\n    helpers/NonBlankString\n    ;;\n    ;; Used internally, only for annotation purposes in post-processing. When a join is implicitly generated via a\n    ;; `:field` clause with `:source-field`, the ID of the foreign key field in the source Table will\n    ;; be recorded here. This information is used to add `fk_field_id` information to the `:cols` in the query\n    ;; results; I believe this is used to facilitate drill-thru? :shrug:\n    ;;\n    ;; Don't set this information yourself. It will have no effect.\n    (s/optional-key :fk-field-id)\n    (s/maybe helpers/IntGreaterThanZero)\n    ;;\n    ;; Metadata about the source query being used, if pulled in from a Card via the `:source-table \"card__id\"` syntax.\n    ;; added automatically by the `resolve-card-id-source-tables` middleware.\n    (s/optional-key :source-metadata)\n    (s/maybe [SourceQueryMetadata])\n\n    s/Keyword s/Any}\n   (s/constrained\n    (every-pred\n     (some-fn :source-table :source-query)\n     (complement (every-pred :source-table :source-query)))\n    \"Joins must have either a `source-table` or `source-query`, but not both.\")))\n\n(def Joins\n  \"Schema for a valid sequence of `Join`s. Must be a non-empty sequence, and `:alias`, if specified, must be unique.\"\n  (s/constrained\n   (helpers/non-empty [Join])\n   #(helpers/empty-or-distinct? (filter some? (map :alias %)))\n   \"All join aliases must be unique.\"))\n\n(def Fields\n  \"Schema for valid values of the MBQL `:fields` clause.\"\n  (s/named\n   (helpers/distinct (helpers/non-empty [Field]))\n   \"Distinct, non-empty sequence of Field clauses\"))\n\n(def MBQLQuery\n  \"Schema for a valid, normalized MBQL [inner] query.\"\n  (->\n   {(s/optional-key :source-query) SourceQuery\n    (s/optional-key :source-table) SourceTable\n    (s/optional-key :aggregation)  (helpers/non-empty [Aggregation])\n    (s/optional-key :breakout)     (helpers/non-empty [Field])\n    (s/optional-key :expressions)  {helpers/NonBlankString FieldOrExpressionDef}\n    (s/optional-key :fields)       Fields\n    (s/optional-key :filter)       Filter\n    (s/optional-key :limit)        helpers/IntGreaterThanOrEqualToZero\n    (s/optional-key :order-by)     (helpers/distinct (helpers/non-empty [OrderBy]))\n    ;; page = page num, starting with 1. items = number of items per page.\n    ;; e.g.\n    ;; {:page 1, :items 10} = items 1-10\n    ;; {:page 2, :items 10} = items 11-20\n    (s/optional-key :page)         {:page  helpers/IntGreaterThanZero\n                                    :items helpers/IntGreaterThanZero}\n    ;;\n    ;; Various bits of middleware add additonal keys, such as `fields-is-implicit?`, to record bits of state or pass\n    ;; info to other pieces of middleware. Everyone else can ignore them.\n    (s/optional-key :joins)        Joins\n    ;;\n    ;; Info about the columns of the source query. Added in automatically by middleware. This metadata is primarily\n    ;; used to let power things like binning when used with Field Literals instead of normal Fields\n    (s/optional-key :source-metadata) (s/maybe [SourceQueryMetadata])\n    ;;\n    ;; Other keys are added by middleware or frontend client for various purposes\n    s/Keyword                      s/Any}\n\n   (s/constrained\n    (fn [query]\n      (core/= 1 (core/count (select-keys query [:source-query :source-table]))))\n    \"Query must specify either `:source-table` or `:source-query`, but not both.\")\n\n   (s/constrained\n    (fn [{:keys [breakout fields]}]\n      (empty? (set/intersection (set breakout) (set fields))))\n    \"Fields specified in `:breakout` should not be specified in `:fields`; this is implied.\")))\n\n\n;;; ----------------------------------------------------- Params -----------------------------------------------------\n\n;; `:parameters` specify the *values* of parameters previously definied for a Dashboard or Card (native query template\n;; tag parameters.) See [[TemplateTag]] above for more information on the later.\n\n;; There are three things called 'type' in play when we talk about parameters and template tags.\n;;\n;; Two are used when the parameters are specified/declared, in a [[TemplateTag]] or in a Dashboard parameter:\n;;\n;; 1. Dashboard parameter/template tag `:type` -- `:dimension` (for a Field filter parameter),\n;;    otherwise `:text`, `:number`, `:boolean`, or `:date`\n;;\n;; 2. `:widget-type` -- only specified for Field filter parameters (where type is `:dimension`). This tells the FE\n;;    what type of widget to display, and also tells us what types of parameters we should allow. Examples:\n;;    `:date/all-options`, `:category`, etc.\n;;\n;; One type is used in the [[Parameter]] list (`:parameters`):\n;;\n;; 3. Parameter `:type` -- specifies the type of the value being passed in. e.g. `:text` or `:string/!=`\n;;\n;; Note that some types that makes sense as widget types (e.g. `:date/all-options`) but not as actual value types are\n;; currently still allowed for backwards-compatibility purposes -- currently the FE client will just parrot back the\n;; `:widget-type` in some cases. In these cases, the backend is just supposed to infer the actual type of the\n;; parameter value.\n\n(def parameter-types\n  \"Map of parameter-type -> info. Info is a map with the following keys:\n\n  ### `:type`\n\n  The general type of this parameter. `:numeric`, `:string`, `:boolean`, or `:date`, if applicable. Some parameter\n  types like `:id` and `:category` don't have a particular `:type`. This is offered mostly so we can group stuff\n  together or determine things like whether a given parameter is a date parameter.\n\n  ### `:operator`\n\n  Signifies this is one of the new 'operator' parameter types added in 0.39.0 or so. These parameters can only be used\n  for [[TemplateTag:FieldFilter]]s or for Dashboard parameters mapped to MBQL queries. The value of this key is the\n  arity for the parameter, either `:unary`, `:binary`, or `:variadic`. See\n  the [[metabase.driver.common.parameters.operators]] namespace for more information.\n\n  ### `:allowed-for`\n\n  [[Parameter]]s with this `:type` may be supplied for [[TemplateTag]]s with these `:type`s (or `:widget-type` if\n  `:type` is `:dimension`) types. Example: it is ok to pass a parameter of type `:date/range` for template tag with\n  `:widget-type` `:date/all-options`; but it is NOT ok to pass a parameter of type `:date/range` for a template tag\n  with a widget type `:date`. Why? It's a potential security risk if someone creates a Card with an \\\"exact-match\\\"\n  Field filter like `:date` or `:text` and you pass in a parameter like `string/!=` `NOTHING_WILL_MATCH_THIS`.\n  Non-exact-match parameters can be abused to enumerate *all* the rows in a table when the parameter was supposed to\n  lock the results down to a single row or set of rows.\"\n  {;; the basic raw-value types. These can be used with [[TemplateTag:RawValue]] template tags as well as\n   ;; [[TemplateTag:FieldFilter]] template tags.\n   :number  {:type :numeric, :allowed-for #{:number :number/= :id :category :location/zip_code}}\n   :text    {:type :string,  :allowed-for #{:text :string/= :id :category\n                                            :location/city :location/state :location/zip_code :location/country}}\n   :date    {:type :date,    :allowed-for #{:date :date/single :date/all-options :id :category}}\n   ;; I don't think `:boolean` is actually used on the FE at all.\n   :boolean {:type :boolean, :allowed-for #{:boolean :id :category}}\n\n   ;; as far as I can tell this is basically just an alias for `:date`... I'm not sure what the difference is TBH\n   :date/single {:type :date, :allowed-for #{:date :date/single :date/all-options :id :category}}\n\n   ;; everything else can't be used with raw value template tags -- they can only be used with Dashboard parameters\n   ;; for MBQL queries or Field filters in native queries\n\n   ;; `:id` and `:category` conceptually aren't types in a \"the parameter value is of this type\" sense, but they are\n   ;; widget types. They have something to do with telling the frontend to show FieldValues list/search widgets or\n   ;; something like that.\n   ;;\n   ;; Apparently the frontend might still pass in parameters with these types, in which case we're supposed to infer\n   ;; the actual type of the parameter based on the Field we're filtering on. Or something like that. Parameters with\n   ;; these types are only allowed if the widget type matches exactly, but you can also pass in something like a\n   ;; `:number/=` for a parameter with widget type `:category`.\n   ;;\n   ;; TODO FIXME -- actually, it turns out the the FE client passes parameter type `:category` for parameters in\n   ;; public Cards. Who knows why! For now, we'll continue allowing it. But we should fix it soon. See\n   ;; [[metabase.api.public-test/execute-public-card-with-parameters-test]]\n   :id       {:allowed-for #{:id}}\n   :category {:allowed-for #{:category #_FIXME :number :text :date :boolean}}\n\n   ;; Like `:id` and `:category`, the `:location/*` types are primarily widget types. They don't really have a meaning\n   ;; as a parameter type, so in an ideal world they wouldn't be allowed; however it seems like the FE still passed\n   ;; these in as parameter type on occasion anyway. In this case the backend is just supposed to infer the actual\n   ;; type -- which should be `:text` and, in the case of ZIP code, possibly `:number`.\n   ;;\n   ;; As with `:id` and `:category`, it would be preferable to just pass in a parameter with type `:text` or `:number`\n   ;; for these widget types, but for compatibility we'll allow them to continue to be used as parameter types for the\n   ;; time being. We'll only allow that if the widget type matches exactly, however.\n   :location/city     {:allowed-for #{:location/city}}\n   :location/state    {:allowed-for #{:location/state}}\n   :location/zip_code {:allowed-for #{:location/zip_code}}\n   :location/country  {:allowed-for #{:location/country}}\n\n   ;; date range types -- these match a range of dates\n   :date/range        {:type :date, :allowed-for #{:date/range :date/all-options}}\n   :date/month-year   {:type :date, :allowed-for #{:date/month-year :date/all-options}}\n   :date/quarter-year {:type :date, :allowed-for #{:date/quarter-year :date/all-options}}\n   :date/relative     {:type :date, :allowed-for #{:date/relative :date/all-options}}\n\n   ;; Like `:id` and `:category` above, `:date/all-options` is primarily a widget type. It means that we should allow\n   ;; any date option above.\n   :date/all-options {:type :date, :allowed-for #{:date/all-options}}\n\n   ;; \"operator\" parameter types.\n   :number/!=               {:type :numeric, :operator :variadic, :allowed-for #{:number/!=}}\n   :number/<=               {:type :numeric, :operator :unary, :allowed-for #{:number/<=}}\n   :number/=                {:type :numeric, :operator :variadic, :allowed-for #{:number/= :number :id :category\n                                                                                 :location/zip_code}}\n   :number/>=               {:type :numeric, :operator :unary, :allowed-for #{:number/>=}}\n   :number/between          {:type :numeric, :operator :binary, :allowed-for #{:number/between}}\n   :string/!=               {:type :string, :operator :variadic, :allowed-for #{:string/!=}}\n   :string/=                {:type :string, :operator :variadic, :allowed-for #{:string/= :text :id :category\n                                                                                :location/city :location/state\n                                                                                :location/zip_code :location/country}}\n   :string/contains         {:type :string, :operator :unary, :allowed-for #{:string/contains}}\n   :string/does-not-contain {:type :string, :operator :unary, :allowed-for #{:string/does-not-contain}}\n   :string/ends-with        {:type :string, :operator :unary, :allowed-for #{:string/ends-with}}\n   :string/starts-with      {:type :string, :operator :unary, :allowed-for #{:string/starts-with}}})\n\n(def ParameterType\n  \"Schema for valid values of `:type` for a [[Parameter]].\"\n  (apply s/enum (keys parameter-types)))\n\n(def WidgetType\n  \"Schema for valid values of `:widget-type` for a [[TemplateTag:FieldFilter]].\"\n  (apply s/enum (cons :none (keys parameter-types))))\n\n;; the next few clauses are used for parameter `:target`... this maps the parameter to an actual template tag in a\n;; native query or Field for MBQL queries.\n;;\n;; examples:\n;;\n;;    {:target [:dimension [:template-tag \"my_tag\"]]}\n;;    {:target [:dimension [:template-tag {:id \"my_tag_id\"}]]}\n;;    {:target [:variable [:template-tag \"another_tag\"]]}\n;;    {:target [:variable [:template-tag {:id \"another_tag_id\"}]]}\n;;    {:target [:dimension [:field 100 nil]]}\n;;    {:target [:field 100 nil]}\n;;\n;; I'm not 100% clear on which situations we'll get which version. But I think the following is generally true:\n;;\n;; * Things are wrapped in `:dimension` when we're dealing with Field filter template tags\n;; * Raw value template tags wrap things in `:variable` instead\n;; * Dashboard parameters are passed in with plain Field clause targets.\n;;\n;; One more thing to note: apparently `:expression`... is allowed below as well. I'm not sure how this is actually\n;; supposed to work, but we have test #18747 that attempts to set it. I'm not convinced this should actually be\n;; allowed.\n\n;; this is the reference like [:template-tag <whatever>], not the [[TemplateTag]] schema for when it's declared in\n;; `:template-tags`\n(defclause template-tag\n  tag-name\n  (s/cond-pre helpers/NonBlankString\n              {:id helpers/NonBlankString}))\n\n(defclause dimension\n  target (s/cond-pre Field template-tag))\n\n(defclause variable\n  target template-tag)\n\n(def ParameterTarget\n  \"Schema for the value of `:target` in a [[Parameter]].\"\n  ;; not 100% sure about this but `field` on its own comes from a Dashboard parameter and when it's wrapped in\n  ;; `dimension` it comes from a Field filter template tag parameter (don't quote me on this -- working theory)\n  (s/cond-pre\n   Field\n   (one-of dimension variable)))\n\n(def Parameter\n  \"Schema for the *value* of a parameter (e.g. a Dashboard parameter or a native query template tag) as passed in as\n  part of the `:parameters` list in a query.\"\n  {:type                     ParameterType\n   ;; TODO -- these definitely SHOULD NOT be optional but a ton of tests aren't passing them in like they should be.\n   ;; At some point we need to go fix those tests and then make these keys required\n   (s/optional-key :id)      helpers/NonBlankString\n   (s/optional-key :target)  ParameterTarget\n   ;; not specified if the param has no value. TODO - make this stricter; type of `:value` should be validated based\n   ;; on the [[ParameterType]]\n   (s/optional-key :value)   s/Any\n   ;; the name of the parameter we're trying to set -- this is actually required now I think, or at least needs to get\n   ;; merged in appropriately\n   (s/optional-key :name)    helpers/NonBlankString\n   ;; The following are not used by the code in this namespace but may or may not be specified depending on what the\n   ;; code that constructs the query params is doing. We can go ahead and ignore these when present.\n   (s/optional-key :slug)    helpers/NonBlankString\n   (s/optional-key :default) s/Any\n   ;; various other keys are used internally by the frontend\n   s/Keyword                 s/Any})\n\n(def ParameterList\n  \"Schema for a list of `:parameters` as passed in to a query.\"\n  [Parameter]\n  #_(->\n     ;; TODO -- disabled for now since it breaks tests. Also, I'm not sure whether these should be distinct by\n     ;; `:name` or `:id`... at any rate, neither is currently required.\n     ;;\n     (s/constrained (fn [parameters]\n                      (apply distinct? (map :id parameters)))\n                    \"Cannot specify parameter more than once; IDs must be distinct\")))\n\n;;; ---------------------------------------------------- Options -----------------------------------------------------\n\n(def ^:private Settings\n  \"Options that tweak the behavior of the query processor.\"\n  ;; The timezone the query should be ran in, overriding the default report timezone for the instance.\n  {(s/optional-key :report-timezone) helpers/NonBlankString\n   ;; other Settings might be used somewhere, but I don't know about them. Add them if you come across them for\n   ;; documentation purposes\n   s/Keyword                         s/Any})\n\n(def ^:private Constraints\n  \"Additional constraints added to a query limiting the maximum number of rows that can be returned. Mostly useful\n  because native queries don't support the MBQL `:limit` clause. For MBQL queries, if `:limit` is set, it will\n  override these values.\"\n  (s/constrained\n   { ;; maximum number of results to allow for a query with aggregations. If `max-results-bare-rows` is unset, this\n    ;; applies to all queries\n    (s/optional-key :max-results)           helpers/IntGreaterThanOrEqualToZero\n    ;; maximum number of results to allow for a query with no aggregations.\n    ;; If set, this should be LOWER than `:max-results`\n    (s/optional-key :max-results-bare-rows) helpers/IntGreaterThanOrEqualToZero\n    ;; other Constraints might be used somewhere, but I don't know about them. Add them if you come across them for\n    ;; documentation purposes\n    s/Keyword                               s/Any}\n   (fn [{:keys [max-results max-results-bare-rows]}]\n     (if-not (core/and max-results max-results-bare-rows)\n       true\n       (core/>= max-results max-results-bare-rows)))\n   \"max-results-bare-rows must be less or equal to than max-results\"))\n\n(def ^:private MiddlewareOptions\n  \"Additional options that can be used to toggle middleware on or off.\"\n  {;; should we skip adding results_metadata to query results after running the query? Used by\n   ;; `metabase.query-processor.middleware.results-metadata`; default `false`\n   (s/optional-key :skip-results-metadata?)\n   s/Bool\n\n   ;; should we skip converting datetime types to ISO-8601 strings with appropriate timezone when post-processing\n   ;; results? Used by `metabase.query-processor.middleware.format-rows`; default `false`\n   (s/optional-key :format-rows?)\n   s/Bool\n\n   ;; disable the MBQL->native middleware. If you do this, the query will not work at all, so there are no cases where\n   ;; you should set this yourself. This is only used by the [[metabase.query-processor/preprocess]] function to get\n   ;; the fully pre-processed query without attempting to convert it to native.\n   (s/optional-key :disable-mbql->native?)\n   s/Bool\n\n   ;; Disable applying a default limit on the query results. Handled in the `add-default-limit` middleware.\n   ;; If true, this will override the `:max-results` and `:max-results-bare-rows` values in [[Constraints]].\n   (s/optional-key :disable-max-results?)\n   s/Bool\n\n   ;; Userland queries are ones ran as a result of an API call, Pulse, or the like. Special handling is done in the\n   ;; `process-userland-query` middleware for such queries -- results are returned in a slightly different format, and\n   ;; QueryExecution entries are normally saved, unless you pass `:no-save` as the option.\n   (s/optional-key :userland-query?)\n   (s/maybe s/Bool)\n\n   ;; Whether to add some default `max-results` and `max-results-bare-rows` constraints. By default, none are added,\n   ;; although the functions that ultimately power most API endpoints tend to set this to `true`. See\n   ;; `add-constraints` middleware for more details.\n   (s/optional-key :add-default-userland-constraints?)\n   (s/maybe s/Bool)\n\n   ;; Whether to process a question's visualization settings and include them in the result metadata so that they can\n   ;; incorporated into an export. Used by `metabase.query-processor.middleware.visualization-settings`; default `false`.\n   (s/optional-key :process-viz-settings?)\n   (s/maybe s/Bool)\n\n   ;; other middleware options might be used somewhere, but I don't know about them. Add them if you come across them\n   ;; for documentation purposes\n   s/Keyword\n   s/Any})\n\n\n;;; ------------------------------------------------------ Info ------------------------------------------------------\n\n;; This stuff is used for informational purposes, primarily to record QueryExecution entries when a query is ran. Pass\n;; them along if applicable when writing code that creates queries, but when working on middleware and the like you\n;; can most likely ignore this stuff entirely.\n\n(def Context\n  \"Schema for `info.context`; used for informational purposes to record how a query was executed.\"\n  (s/enum :action\n          :ad-hoc\n          :collection\n          :csv-download\n          :dashboard\n          :embedded-dashboard\n          :embedded-question\n          :json-download\n          :map-tiles\n          :public-dashboard\n          :public-question\n          :pulse\n          :question\n          :xlsx-download))\n\n;; TODO - this schema is somewhat misleading because if you use a function like\n;; `qp/process-query-and-save-with-max-results-constraints!` some of these keys (e.g. `:context`) are in fact required\n(def Info\n  \"Schema for query `:info` dictionary, which is used for informational purposes to record information about how a query\n  was executed in QueryExecution and other places. It is considered bad form for middleware to change its behavior\n  based on this information, don't do it!\"\n  {;; These keys are nice to pass in if you're running queries on the backend and you know these values. They aren't\n   ;; used for permissions checking or anything like that so don't try to be sneaky\n   (s/optional-key :context)                   (s/maybe Context)\n   (s/optional-key :executed-by)               (s/maybe helpers/IntGreaterThanZero)\n   (s/optional-key :action-id)                 (s/maybe helpers/IntGreaterThanZero)\n   (s/optional-key :card-id)                   (s/maybe helpers/IntGreaterThanZero)\n   (s/optional-key :card-name)                 (s/maybe helpers/NonBlankString)\n   (s/optional-key :dashboard-id)              (s/maybe helpers/IntGreaterThanZero)\n   (s/optional-key :alias/escaped->original)   (s/maybe {s/Any s/Any})\n   (s/optional-key :pulse-id)                  (s/maybe helpers/IntGreaterThanZero)\n   ;; Metadata for datasets when querying the dataset. This ensures that user edits to dataset metadata are blended in\n   ;; with runtime computed metadata so that edits are saved.\n   (s/optional-key :metadata/dataset-metadata) (s/maybe [{s/Any s/Any}])\n   ;; `:hash` gets added automatically by `process-query-and-save-execution!`, so don't try passing\n   ;; these in yourself. In fact, I would like this a lot better if we could take these keys out of `:info` entirely\n   ;; and have the code that saves QueryExceutions figure out their values when it goes to save them\n   (s/optional-key :query-hash)                (s/maybe #?(:clj (Class/forName \"[B\")\n                                                           :cljs s/Any))})\n\n\n;;; --------------------------------------------- Dashboard [Outer] Query ---------------------------------------------\n\n(def ^Integer saved-questions-virtual-database-id\n  \"The ID used to signify that a database is 'virtual' rather than physical.\n\n   A fake integer ID is used so as to minimize the number of changes that need to be made on the frontend -- by using\n   something that would otherwise be a legal ID, *nothing* need change there, and the frontend can query against this\n   'database' none the wiser. (This integer ID is negative which means it will never conflict with a *real* database\n   ID.)\n\n   This ID acts as a sort of flag. The relevant places in the middleware can check whether the DB we're querying is\n   this 'virtual' database and take the appropriate actions.\"\n  -1337)\n;; To the reader: yes, this seems sort of hacky, but one of the goals of the Nested Query Initiative™ was to minimize\n;; if not completely eliminate any changes to the frontend. After experimenting with several possible ways to do this\n;; implementation seemed simplest and best met the goal. Luckily this is the only place this \"magic number\" is defined\n;; and the entire frontend can remain blissfully unaware of its value.\n\n(def DatabaseID\n  \"Schema for a valid `:database` ID, in the top-level 'outer' query. Either a positive integer (referring to an\n  actual Database), or the saved questions virtual ID, which is a placeholder used for queries using the\n  `:source-table \\\"card__id\\\"` shorthand for a source query resolved by middleware (since clients might not know the\n  actual DB for that source query.)\"\n  (s/cond-pre (s/eq saved-questions-virtual-database-id) helpers/IntGreaterThanZero))\n\n(def Query\n  \"Schema for an [outer] query, e.g. the sort of thing you'd pass to the query processor or save in\n  `Card.dataset_query`.\"\n  (->\n   {:database                         DatabaseID\n    ;; Type of query. `:query` = MBQL; `:native` = native. TODO - consider normalizing `:query` to `:mbql`\n    :type                             (s/enum :query :native)\n    (s/optional-key :native)          NativeQuery\n    (s/optional-key :query)           MBQLQuery\n    (s/optional-key :parameters)      ParameterList\n    ;;\n    ;; OPTIONS\n    ;;\n    ;; These keys are used to tweak behavior of the Query Processor.\n    ;; TODO - can we combine these all into a single `:options` map?\n    ;;\n    (s/optional-key :settings)        (s/maybe Settings)\n    (s/optional-key :constraints)     (s/maybe Constraints)\n    (s/optional-key :middleware)      (s/maybe MiddlewareOptions)\n    ;;\n    ;; INFO\n    ;;\n    ;; Used when recording info about this run in the QueryExecution log; things like context query was ran in and\n    ;; User who ran it\n    (s/optional-key :info)            (s/maybe Info)\n    ;;\n    ;; Other various keys get stuck in the query dictionary at some point or another by various pieces of QP\n    ;; middleware to record bits of state. Everyone else can ignore them.\n    s/Keyword                         s/Any}\n   ;;\n   ;; CONSTRAINTS\n   ;;\n   ;; Make sure we have the combo of query `:type` and `:native`/`:query`\n   (s/constrained\n    (every-pred\n     (some-fn :native :query)\n     (complement (every-pred :native :query)))\n    \"Query must specify either `:native` or `:query`, but not both.\")\n   (s/constrained\n    (fn [{native :native, mbql :query, query-type :type}]\n      (core/case query-type\n        :native native\n        :query  mbql))\n    \"Native queries must specify `:native`; MBQL queries must specify `:query`.\")\n   ;;\n   ;; `:source-metadata` is added to queries when `card__id` source queries are resolved. It contains info about the\n   ;; columns in the source query.\n   ;;\n   ;; Where this is added was changed in Dashboard 0.33.0 -- previously, when `card__id` source queries were resolved,\n   ;; the middleware would add `:source-metadata` to the top-level; to support joins against source queries, this has\n   ;; been changed so it is always added at the same level the resolved `:source-query` is added.\n   ;;\n   ;; This should automatically be fixed by `normalize`; if we encounter it, it means some middleware is not\n   ;; functioning properly\n   (s/constrained\n    (complement :source-metadata)\n    \"`:source-metadata` should be added in the same level as `:source-query` (i.e., the 'inner' MBQL query.)\")))\n\n\n;;; --------------------------------------------------- Validators ---------------------------------------------------\n\n(def ^{:arglists '([query])} validate-query\n  \"Compiled schema validator for an [outer] Dashboard query. (Pre-compling a validator is more efficient; use this\n  instead of calling `(s/validate Query query)` or similar.\"\n  (s/validator Query))\n","~:reader-features",["^L",["~:cljs-release","~:cljs"]],"~:cljc",true,"~:source-map-compact",["^ ","mappings","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","names",["metabase.mbql.schema/date-bucketing-units","metabase.mbql.schema/time-bucketing-units","metabase.mbql.schema/datetime-bucketing-units","clojure.set.union","metabase.mbql.schema/DateUnit","schema.core/named","cljs.core.apply","schema.core/enum","metabase.mbql.schema/TimeUnit","metabase.mbql.schema/DateTimeUnit","metabase.mbql.schema/TimezoneId","js/shadow.js.shim.module$moment","metabase.mbql.schema/TemporalExtractUnits","metabase.mbql.schema/DatetimeDiffUnits","metabase.mbql.schema/ExtractWeekModes","metabase.mbql.schema/RelativeDatetimeUnit","metabase.mbql.schema/can-parse-iso-8601?","s","cljs.core.not_EQ_","js/Date","metabase.mbql.schema/can-parse-date?","metabase.mbql.schema/can-parse-datetime?","metabase.mbql.schema/can-parse-time?","metabase.mbql.schema/LiteralDateString","schema.core.constrained","metabase.mbql.schema.helpers/NonBlankString","metabase.mbql.schema/LiteralDatetimeString","metabase.mbql.schema/LiteralTimeString","metabase.mbql.schema.helpers.clause","metabase.mbql.schema/relative-datetime","schema.core.cond_pre","schema.core/eq","schema.core/Int","metabase.mbql.schema/interval","metabase.mbql.schema/absolute-datetime","p1__45218#","p1__45219#","schema.core.conditional","cljs.core/not","metabase.mbql.schema.helpers/is-clause?","cljs.core/second","metabase.mbql.schema/time","metabase.mbql.schema/DateOrDatetimeLiteral","cljs.core.partial","metabase.mbql.schema/TimeLiteral","metabase.mbql.schema/TemporalLiteral","metabase.mbql.schema/DateTimeValue","metabase.mbql.schema.helpers.one_of_STAR_","or__5045__auto__","cljs.core/meta","js/metabase","js/metabase.mbql","js/metabase.mbql.schema","js/metabase.mbql.schema.absolute-datetime","cljs.core/Var","js/metabase.mbql.schema.relative-datetime","js/metabase.mbql.schema.time","metabase.mbql.schema/ValueTypeInfo","schema.core/optional-key","schema.core/maybe","metabase.mbql.schema.helpers/FieldType","metabase.mbql.schema.helpers/FieldSemanticOrRelationType","schema.core/Keyword","schema.core/Any","metabase.mbql.schema/value","metabase.mbql.schema/expression","schema.core.pred","cljs.core/map?","metabase.mbql.schema/BinningStrategyName","schema.core.enum$","metabase.mbql.schema/validate-bin-width","schema","p__45225","map__45226","cljs.core/--destructure-map","cljs.core.get","strategy","bin-width","cljs.core._EQ_","metabase.mbql.schema/validate-num-bins","p__45228","map__45229","num-bins","metabase.mbql.schema/FieldBinningOptions","metabase.mbql.schema.helpers/IntGreaterThanZero","schema.core/Num","cljs.core/complement","cljs.core/neg?","var_args","G__45234","metabase.mbql.schema/valid-temporal-unit-for-base-type?","js/Error","p__45236","map__45237","base-type","temporal-unit","_field-options","metabase.mbql.schema.valid_temporal_unit_for_base_type_QMARK_","temp__5802__auto__","units","and__5043__auto__","pred__45238","p1__45232#","p2__45231#","expr__45239","cljs.core.isa_QMARK_","cljs.core/contains?","metabase.mbql.schema/validate-temporal-unit","metabase.mbql.schema/no-binning-options-at-top-level","metabase.mbql.schema/FieldOptions","metabase.mbql.schema/require-base-type-for-field-name","p__45243","vec__45244","cljs.core.nth","map__45247","_","id-or-name","metabase.mbql.schema/field","schema.core/recursive","metabase.mbql.schema/field:id","p__45248","vec__45249","cljs.core/integer?","metabase.mbql.schema/Field*","js/metabase.mbql.schema.expression","js/metabase.mbql.schema.field","metabase.mbql.schema/Field","metabase.mbql.schema/aggregation","metabase.mbql.schema/FieldOrAggregationReference","schema.core/if","metabase.mbql.schema/string-functions","metabase.mbql.schema/StringExpressionArg","cljs.core/string?","schema.core/Str","metabase.mbql.schema/StringExpression","metabase.mbql.schema/numeric-functions","metabase.mbql.schema/boolean-functions","metabase.mbql.schema/aggregations","metabase.mbql.schema/datetime-functions","metabase.mbql.schema/NumericExpressionArg","cljs.core/number?","metabase.mbql.schema/NumericExpression","metabase.mbql.schema/Aggregation","metabase.mbql.schema/DateTimeExpressionArg","metabase.mbql.schema/DatetimeExpression","metabase.mbql.schema/ExpressionArg","cljs.core/boolean?","schema.core/Bool","metabase.mbql.schema/BooleanExpression","metabase.mbql.schema/NumericExpressionArgOrInterval","metabase.mbql.schema/IntGreaterThanZeroOrNumericExpression","metabase.mbql.schema/coalesce","metabase.mbql.schema/substring","metabase.mbql.schema/length","metabase.mbql.schema/trim","metabase.mbql.schema/rtrim","metabase.mbql.schema/ltrim","metabase.mbql.schema/upper","metabase.mbql.schema/lower","metabase.mbql.schema/replace","metabase.mbql.schema/concat","metabase.mbql.schema/regex-match-first","metabase.mbql.schema/+","metabase.mbql.schema/-","metabase.mbql.schema//","metabase.mbql.schema/*","metabase.mbql.schema/floor","metabase.mbql.schema/ceil","metabase.mbql.schema/round","metabase.mbql.schema/abs","metabase.mbql.schema/power","metabase.mbql.schema/sqrt","metabase.mbql.schema/exp","metabase.mbql.schema/log","metabase.mbql.schema/NumericExpression*","metabase.mbql.schema/datetime-diff","metabase.mbql.schema/temporal-extract","metabase.mbql.schema/get-year","metabase.mbql.schema/get-quarter","metabase.mbql.schema/get-month","metabase.mbql.schema/get-week","metabase.mbql.schema/get-day","metabase.mbql.schema/get-day-of-week","metabase.mbql.schema/get-hour","metabase.mbql.schema/get-minute","metabase.mbql.schema/get-second","metabase.mbql.schema/convert-timezone","metabase.mbql.schema/ArithmeticDateTimeUnit","metabase.mbql.schema/datetime-add","metabase.mbql.schema.helpers/clause","metabase.mbql.schema/now","metabase.mbql.schema/datetime-subtract","metabase.mbql.schema/DatetimeExpression*","js/metabase.mbql.schema.+","js/metabase.mbql.schema.datetime-add","js/metabase.mbql.schema.datetime-subtract","js/metabase.mbql.schema.convert-timezone","js/metabase.mbql.schema.now","metabase.mbql.schema/StringExpression*","metabase.mbql.schema/and","metabase.mbql.schema/Filter","metabase.mbql.schema/or","metabase.mbql.schema/not","metabase.mbql.schema/FieldOrRelativeDatetime","metabase.mbql.schema/EqualityComparable","metabase.mbql.schema/OrderComparable","metabase.mbql.schema/=","metabase.mbql.schema/!=","metabase.mbql.schema/<","metabase.mbql.schema/>","metabase.mbql.schema/<=","metabase.mbql.schema/>=","metabase.mbql.schema/between","metabase.mbql.schema/inside","metabase.mbql.schema/is-null","metabase.mbql.schema/not-null","metabase.mbql.schema/is-empty","metabase.mbql.schema/not-empty","metabase.mbql.schema/StringFilterOptions","metabase.mbql.schema/starts-with","metabase.mbql.schema/ends-with","metabase.mbql.schema/contains","metabase.mbql.schema/does-not-contain","metabase.mbql.schema/TimeIntervalOptions","metabase.mbql.schema/time-interval","metabase.mbql.schema/segment","metabase.mbql.schema/BooleanExpression*","js/metabase.mbql.schema.and","js/metabase.mbql.schema.or","js/metabase.mbql.schema.not","js/metabase.mbql.schema.<","js/metabase.mbql.schema.<=","js/metabase.mbql.schema.>","js/metabase.mbql.schema.>=","js/metabase.mbql.schema.=","js/metabase.mbql.schema.!=","metabase.mbql.schema/Filter*","js/metabase.mbql.schema.between","js/metabase.mbql.schema.starts-with","js/metabase.mbql.schema.ends-with","js/metabase.mbql.schema.contains","js/metabase.mbql.schema.does-not-contain","js/metabase.mbql.schema.inside","js/metabase.mbql.schema.is-empty","js/metabase.mbql.schema.not-empty","js/metabase.mbql.schema.is-null","js/metabase.mbql.schema.not-null","js/metabase.mbql.schema.time-interval","js/metabase.mbql.schema.segment","metabase.mbql.schema/CaseClause","schema.core/one","metabase.mbql.schema/CaseClauses","metabase.mbql.schema/CaseOptions","metabase.mbql.schema/case","js/metabase.mbql.schema.-","js/metabase.mbql.schema.*","js/metabase.mbql.schema.coalesce","js/metabase.mbql.schema.length","js/metabase.mbql.schema.floor","js/metabase.mbql.schema.ceil","js/metabase.mbql.schema.round","js/metabase.mbql.schema.abs","js/metabase.mbql.schema.power","js/metabase.mbql.schema.sqrt","js/metabase.mbql.schema.exp","js/metabase.mbql.schema.log","js/metabase.mbql.schema.case","js/metabase.mbql.schema.datetime-diff","js/metabase.mbql.schema.temporal-extract","js/metabase.mbql.schema.get-year","js/metabase.mbql.schema.get-quarter","js/metabase.mbql.schema.get-month","js/metabase.mbql.schema.get-week","js/metabase.mbql.schema.get-day","js/metabase.mbql.schema.get-day-of-week","js/metabase.mbql.schema.get-hour","js/metabase.mbql.schema.get-minute","js/metabase.mbql.schema.get-second","js/metabase.mbql.schema.substring","js/metabase.mbql.schema.trim","js/metabase.mbql.schema.ltrim","js/metabase.mbql.schema.rtrim","js/metabase.mbql.schema.replace","js/metabase.mbql.schema.lower","js/metabase.mbql.schema.upper","js/metabase.mbql.schema.concat","js/metabase.mbql.schema.regex-match-first","metabase.mbql.schema/FieldOrExpressionDef","metabase.mbql.schema/count","metabase.mbql.schema/cum-count","metabase.mbql.schema/avg","metabase.mbql.schema/cum-sum","metabase.mbql.schema/distinct","metabase.mbql.schema/sum","metabase.mbql.schema/min","metabase.mbql.schema/max","metabase.mbql.schema/sum-where","metabase.mbql.schema/count-where","metabase.mbql.schema/share","metabase.mbql.schema/stddev","metabase.mbql.schema/ag:var","metabase.mbql.schema/median","metabase.mbql.schema/percentile","metabase.mbql.schema/metric","metabase.mbql.schema/UnnamedAggregation*","js/metabase.mbql.schema.avg","js/metabase.mbql.schema.cum-sum","js/metabase.mbql.schema.distinct","js/metabase.mbql.schema.stddev","js/metabase.mbql.schema.sum","js/metabase.mbql.schema.min","js/metabase.mbql.schema.max","js/metabase.mbql.schema.metric","js/metabase.mbql.schema.share","js/metabase.mbql.schema.count-where","js/metabase.mbql.schema.sum-where","js/metabase.mbql.schema.median","js/metabase.mbql.schema.percentile","js/metabase.mbql.schema.ag:var","js/metabase.mbql.schema.cum-count","js/metabase.mbql.schema.count","metabase.mbql.schema/UnnamedAggregation","metabase.mbql.schema/AggregationOptions","metabase.mbql.schema/aggregation-options","metabase.mbql.schema/asc","metabase.mbql.schema/desc","metabase.mbql.schema/OrderBy","js/metabase.mbql.schema.asc","js/metabase.mbql.schema.desc","metabase.mbql.schema/TemplateTagType","metabase.mbql.schema/TemplateTag:Common","metabase.mbql.schema/TemplateTag:Snippet","cljs.core.merge","metabase.mbql.schema/TemplateTag:SourceQuery","metabase.mbql.schema/TemplateTag:Value:Common","metabase.mbql.schema/TemplateTag:FieldFilter","metabase.mbql.schema/WidgetType","metabase.mbql.schema/raw-value-template-tag-types","metabase.mbql.schema/TemplateTag:RawValue:Type","metabase.mbql.schema/TemplateTag:RawValue","metabase.mbql.schema/TemplateTag","p1__45484#","p1__45485#","p1__45486#","metabase.mbql.schema/TemplateTagMap","m","cljs.core/every?","p__45487","vec__45488","tag-name","tag-definition","metabase.mbql.schema/NativeQuery","metabase.mbql.schema/SourceQuery","cljs.core.every_pred","clojure.set/rename-keys","metabase.mbql.schema/MBQLQuery","metabase.mbql.schema/SourceQueryMetadata","metabase.mbql.schema.helpers/Map","metabase.mbql.schema/source-table-card-id-regex","metabase.mbql.schema/SourceTable","metabase.mbql.schema/join-strategies","metabase.mbql.schema/JoinStrategy","metabase.mbql.schema/Join","metabase.mbql.schema/Fields","cljs.core.some_fn","metabase.mbql.schema/Joins","p1__45491#","metabase.mbql.schema.helpers/non-empty","metabase.mbql.schema.helpers/empty-or-distinct?","cljs.core.filter","cljs.core/some?","cljs.core.map","metabase.mbql.schema.helpers/distinct","metabase.mbql.schema.helpers/IntGreaterThanOrEqualToZero","query","cljs.core/count","cljs.core/select-keys","p__45492","map__45493","breakout","fields","cljs.core/empty?","clojure.set.intersection","cljs.core/set","metabase.mbql.schema/parameter-types","metabase.mbql.schema/ParameterType","cljs.core/keys","cljs.core/cons","metabase.mbql.schema/template-tag","metabase.mbql.schema/dimension","metabase.mbql.schema/variable","metabase.mbql.schema/ParameterTarget","js/metabase.mbql.schema.dimension","js/metabase.mbql.schema.variable","metabase.mbql.schema/Parameter","metabase.mbql.schema/ParameterList","metabase.mbql.schema/Settings","metabase.mbql.schema/Constraints","p__45494","map__45495","max-results","max-results-bare-rows","metabase.mbql.schema/MiddlewareOptions","metabase.mbql.schema/Context","metabase.mbql.schema/Info","metabase.mbql.schema/saved-questions-virtual-database-id","metabase.mbql.schema/DatabaseID","metabase.mbql.schema/Query","p__45496","map__45497","native","mbql","query-type","G__45498","cljs.core/Keyword","metabase.mbql.schema/validate-query","schema.core/validator"]],"~:used-vars",["^L",["~$js/metabase.mbql.schema.temporal-extract","~$metabase.mbql.schema/!=","~$metabase.mbql.schema/SourceTable","~$cljs.core/--destructure-map","~$schema.core/Num","~$metabase.mbql.schema/Settings","~$metabase.mbql.schema/segment","~$metabase.mbql.schema/min","~$cljs.core/some?","~$metabase.mbql.schema/<=","~$js/metabase.mbql.schema.segment","~$js/metabase.mbql.schema.avg","~$js/metabase.mbql.schema.absolute-datetime","~$metabase.mbql.schema/*","~$metabase.mbql.schema/Info","~$metabase.mbql.schema/case","~$js/metabase.mbql.schema.metric","~$js/metabase.mbql.schema.or","~$clojure.set/intersection","~$schema.core/Any","~$js/metabase.mbql.schema.datetime-subtract","~$js/metabase.mbql.schema.ag:var","~$metabase.mbql.schema/rtrim","~$js/metabase.mbql.schema","~$metabase.mbql.schema/+","~$js/metabase.mbql.schema.not","~$cljs.core/boolean?","~$metabase.mbql.schema/TimeIntervalOptions","~$metabase.mbql.schema/DateOrDatetimeLiteral","~$metabase.mbql.schema.helpers/clause","~$metabase.mbql.schema/share","~$metabase.mbql.schema/parameter-types","~$metabase.mbql.schema/Field*","~$metabase.mbql.schema/is-empty","~$metabase.mbql.schema/relative-datetime","~$metabase.mbql.schema/numeric-functions","~$metabase.mbql.schema/aggregations","~$metabase.mbql.schema/get-second","~$js/metabase.mbql.schema.datetime-diff","~$metabase.mbql.schema/FieldOptions","~$metabase.mbql.schema/max","~$metabase.mbql.schema/saved-questions-virtual-database-id","~$metabase.mbql.schema/datetime-add","~$metabase.mbql.schema/median","~$metabase.mbql.schema/ParameterTarget","~$metabase.mbql.schema/Constraints","~$js/metabase.mbql.schema.time","~$metabase.mbql.schema/ExpressionArg","~$js/metabase.mbql.schema.is-null","~$metabase.mbql.schema/datetime-subtract","~$js/metabase.mbql.schema.ceil","~$metabase.mbql.schema/can-parse-datetime?","~$metabase.mbql.schema/ValueTypeInfo","~$metabase.mbql.schema/get-year","~$js/metabase.mbql.schema.count-where","~$metabase.mbql.schema/BooleanExpression","~$metabase.mbql.schema/TimeUnit","~$cljs.core/filter","~$js/metabase.mbql.schema.get-day-of-week","~$cljs.core/=","~$js/metabase.mbql.schema.share","~$metabase.mbql.schema/Filter*","~$cljs.core/keys","~$metabase.mbql.schema/length","~$js/metabase.mbql.schema.case","~$metabase.mbql.schema/ltrim","~$metabase.mbql.schema/LiteralDatetimeString","~$metabase.mbql.schema/inside","~$js/Date","~$metabase.mbql.schema.helpers/empty-or-distinct?","~$cljs.core/partial","~$js/metabase.mbql.schema.round","~$metabase.mbql.schema/TimeLiteral","~$metabase.mbql.schema/LiteralTimeString","~$metabase.mbql.schema/NativeQuery","~$metabase.mbql.schema/TemporalLiteral","~$js/metabase.mbql.schema.not-null","~$js/metabase.mbql.schema.sum-where","~$metabase.mbql.schema/TemplateTag:Snippet","~$metabase.mbql.schema/MBQLQuery","~$js/metabase.mbql.schema.rtrim","~$metabase.mbql.schema/datetime-bucketing-units","~$metabase.mbql.schema/concat","~$metabase.mbql.schema/require-base-type-for-field-name","~$js/metabase.mbql.schema.ltrim","~$metabase.mbql.schema/ParameterList","~$cljs.core/count","~$js/metabase.mbql.schema.min","~$metabase.mbql.schema/Aggregation","~$metabase.mbql.schema/sqrt","~$metabase.mbql.schema/lower","~$js/metabase.mbql.schema.power","~$js/metabase.mbql.schema.lower","~$js/metabase.mbql.schema.upper","~$metabase.mbql.schema/and","~$js/metabase.mbql.schema.inside","~$cljs.core/apply","~$metabase.mbql.schema/WidgetType","~$js/metabase.mbql.schema.floor","~$metabase.mbql.schema/TemplateTag:Value:Common","~$metabase.mbql.schema/Parameter","~$metabase.mbql.schema/get-minute","~$metabase.mbql.schema/trim","~$metabase.mbql.schema/Query","~$metabase.mbql.schema/starts-with","~$metabase.mbql.schema/FieldBinningOptions","~$metabase.mbql.schema/=","~$cljs.core/Keyword","~$metabase.mbql.schema/StringExpression","~$metabase.mbql.schema/BooleanExpression*","~$metabase.mbql.schema/TimezoneId","~$metabase.mbql.schema/regex-match-first","~$js/metabase.mbql.schema.percentile","~$metabase.mbql.schema/DateTimeValue","~$js/metabase.mbql.schema.does-not-contain","~$metabase.mbql.schema/exp","~$js/metabase.mbql.schema.trim","~$js/metabase.mbql.schema.dimension","~$cljs.core/not=","~$metabase.mbql.schema/value","~$metabase.mbql.schema/ExtractWeekModes","~$metabase.mbql.schema/or","~$metabase.mbql.schema/get-day","~$cljs.core/string?","~$metabase.mbql.schema/convert-timezone","~$metabase.mbql.schema/no-binning-options-at-top-level","~$metabase.mbql.schema/not-null","~$metabase.mbql.schema/TemplateTag:SourceQuery","~$metabase.mbql.schema/replace","~$js/metabase.mbql.schema.field","~$schema.core/conditional","~$js/shadow.js.shim.module$moment","~$metabase.mbql.schema/between","~$metabase.mbql.schema/TemplateTag:Common","~$metabase.mbql.schema/UnnamedAggregation*","~$metabase.mbql.schema/NumericExpression","~$schema.core/Bool","~$cljs.core/Var","~$js/metabase.mbql.schema.concat","~$metabase.mbql.schema/TemplateTagMap","~$js/metabase.mbql.schema.log","~$metabase.mbql.schema/can-parse-time?","~$metabase.mbql.schema/time-bucketing-units","~$cljs.core/set","~$js/metabase.mbql.schema.now","~$metabase.mbql.schema/is-null","~$metabase.mbql.schema/sum-where","~$metabase.mbql.schema/DatabaseID","~$metabase.mbql.schema/not","~$metabase.mbql.schema/StringExpression*","~$metabase.mbql.schema//","~$cljs.core/empty?","~$metabase.mbql.schema/sum","~$metabase.mbql.schema/validate-num-bins","~$metabase.mbql.schema/Joins","~$metabase.mbql.schema/can-parse-iso-8601?","~$metabase.mbql.schema/get-week","~$cljs.core/contains?","~$cljs.core/map?","~$js/metabase.mbql.schema.get-week","~$metabase.mbql.schema.helpers/Map","~$metabase.mbql.schema/FieldOrRelativeDatetime","~$metabase.mbql.schema/UnnamedAggregation","~$metabase.mbql.schema/ceil","~$metabase.mbql.schema/ArithmeticDateTimeUnit","~$metabase.mbql.schema/get-day-of-week","~$js/metabase.mbql.schema.and","~$metabase.mbql.schema/StringExpressionArg","~$cljs.core/map","~$metabase.mbql.schema/time-interval","~$js/metabase.mbql.schema.regex-match-first","~$metabase.mbql.schema/floor","~$metabase.mbql.schema.helpers/FieldSemanticOrRelationType","~$metabase.mbql.schema/date-bucketing-units","~$metabase.mbql.schema/not-empty","~$metabase.mbql.schema/CaseClauses","~$metabase.mbql.schema/asc","~$metabase.mbql.schema/cum-count","~$metabase.mbql.schema/CaseOptions","~$metabase.mbql.schema.helpers/one-of*","~$metabase.mbql.schema/desc","~$js/metabase.mbql.schema.expression","~$metabase.mbql.schema/TemplateTag","~$js/metabase.mbql.schema.time-interval","~$metabase.mbql.schema/field:id","~$metabase.mbql.schema/expression","~$metabase.mbql.schema/aggregation-options","~$schema.core/Int","~$metabase.mbql.schema/DatetimeExpression*","~$js/metabase.mbql.schema.starts-with","~$metabase.mbql.schema/contains","~$clojure.set/rename-keys","~$metabase.mbql.schema/get-quarter","~$js/metabase.mbql.schema.get-year","~$metabase.mbql.schema/>=","~$metabase.mbql.schema.helpers/non-empty","~$metabase.mbql.schema/DateUnit","~$cljs.core/number?","~$js/metabase.mbql.schema.=","~$cljs.core/get","~$js/metabase.mbql.schema.coalesce","~$metabase.mbql.schema/template-tag","~$metabase.mbql.schema/variable","~$metabase.mbql.schema.helpers/IntGreaterThanOrEqualToZero","~$metabase.mbql.schema/DateTimeUnit","~$js/metabase.mbql.schema.between","~$js/metabase.mbql.schema.cum-sum","~$js/metabase.mbql.schema.>=","~$metabase.mbql.schema/CaseClause","~$cljs.core/integer?","~$metabase.mbql.schema/can-parse-date?","~$metabase.mbql.schema/StringFilterOptions","~$metabase.mbql.schema/Join","~$metabase.mbql.schema/NumericExpressionArg","~$js/metabase.mbql.schema.abs","~$metabase.mbql.schema/validate-bin-width","~$metabase.mbql.schema/upper","~$js/metabase.mbql.schema.-","~$metabase.mbql.schema/substring","~$metabase.mbql.schema/DatetimeDiffUnits","~$schema.core/enum","~$metabase.mbql.schema/cum-sum","~$js/metabase.mbql.schema.replace","~$schema.core/one","~$metabase.mbql.schema/coalesce","~$metabase.mbql.schema.helpers/is-clause?","~$metabase.mbql.schema/valid-temporal-unit-for-base-type?","~$metabase.mbql.schema/SourceQueryMetadata","~$js/metabase.mbql.schema.<","~$schema.core/maybe","~$metabase.mbql.schema/IntGreaterThanZeroOrNumericExpression","~$js/metabase.mbql.schema.datetime-add","~$js/metabase.mbql.schema.get-second","~$js/metabase.mbql.schema.sqrt","~$js/metabase.mbql.schema.get-day","~$metabase.mbql.schema.helpers/distinct","~$js/metabase.mbql.schema.get-quarter","~$js/metabase.mbql.schema.!=","~$metabase.mbql.schema.helpers/IntGreaterThanZero","~$metabase.mbql.schema/FieldOrExpressionDef","~$js/metabase.mbql.schema.stddev","~$metabase.mbql.schema/ParameterType","~$metabase.mbql.schema/Field","~$schema.core/named","~$metabase.mbql.schema/stddev","~$schema.core/optional-key","~$metabase.mbql.schema/abs","~$js/metabase.mbql.schema.is-empty","~$js/metabase.mbql.schema.count","~$metabase.mbql.schema.helpers/NonBlankString","~$metabase.mbql.schema/AggregationOptions","~$cljs.core/nth","~$cljs.core/meta","~$metabase.mbql.schema/>","~$metabase.mbql.schema/count-where","~$metabase.mbql.schema/MiddlewareOptions","~$metabase.mbql.schema/avg","~$cljs.core/second","~$js/metabase.mbql.schema.get-minute","~$js/metabase.mbql.schema.contains","~$metabase.mbql.schema/BinningStrategyName","~$metabase.mbql.schema/power","~$metabase.mbql.schema/TemplateTagType","~$metabase.mbql.schema/TemplateTag:RawValue:Type","~$js/metabase.mbql.schema.asc","~$metabase.mbql.schema/Filter","~$metabase.mbql.schema/SourceQuery","~$metabase.mbql.schema/source-table-card-id-regex","~$metabase.mbql.schema/datetime-functions","~$metabase.mbql.schema/now","~$metabase.mbql.schema/temporal-extract","~$metabase.mbql.schema/DateTimeExpressionArg","~$cljs.core/select-keys","~$metabase.mbql.schema/aggregation","~$metabase.mbql.schema/field","~$schema.core/eq","~$schema.core/pred","~$cljs.core/not","~$cljs.core/complement","~$cljs.core/neg?","~$metabase.mbql.schema/time","~$schema.core/constrained","~$metabase.mbql.schema/OrderComparable","~$metabase.mbql.schema/get-hour","~$js/metabase.mbql.schema.substring","~$metabase.mbql.schema/validate-temporal-unit","~$js/metabase.mbql.schema.length","~$cljs.core/cons","~$js/metabase.mbql.schema.+","~$metabase.mbql.schema/TemplateTag:FieldFilter","~$js/metabase.mbql.schema.median","~$schema.core/cond-pre","~$metabase.mbql.schema/-","~$js/metabase.mbql.schema.get-hour","~$js/metabase.mbql.schema.variable","~$js/metabase","~$clojure.set/union","~$metabase.mbql.schema/NumericExpression*","~$metabase.mbql.schema/TemplateTag:RawValue","~$js/metabase.mbql.schema.ends-with","~$metabase.mbql.schema/dimension","~$js/metabase.mbql.schema.distinct","~$schema.core/validator","~$metabase.mbql.schema/RelativeDatetimeUnit","~$js/metabase.mbql.schema.sum","~$schema.core/if","~$metabase.mbql.schema/boolean-functions","~$metabase.mbql.schema/JoinStrategy","~$cljs.core/isa?","~$schema.core/Str","~$metabase.mbql.schema/get-month","~$schema.core/Keyword","~$metabase.mbql.schema/ag:var","~$metabase.mbql.schema/count","~$metabase.mbql.schema/datetime-diff","~$schema.core/recursive","~$metabase.mbql.schema/OrderBy","~$cljs.core/some-fn","~$js/metabase.mbql.schema.exp","~$metabase.mbql.schema/percentile","~$metabase.mbql.schema/log","~$metabase.mbql.schema/round","~$metabase.mbql.schema/string-functions","~$js/metabase.mbql.schema.not-empty","~$metabase.mbql.schema/join-strategies","~$metabase.mbql.schema/<","~$metabase.mbql.schema/distinct","~$metabase.mbql.schema/absolute-datetime","~$js/metabase.mbql.schema.>","~$js/metabase.mbql.schema.relative-datetime","~$metabase.mbql.schema/raw-value-template-tag-types","~$metabase.mbql.schema/ends-with","~$js/metabase.mbql.schema.<=","~$metabase.mbql.schema/metric","~$js/metabase.mbql.schema.convert-timezone","~$metabase.mbql.schema/EqualityComparable","~$metabase.mbql.schema/Fields","~$metabase.mbql.schema/TemporalExtractUnits","~$js/metabase.mbql.schema.get-month","~$js/metabase.mbql","~$cljs.core/merge","~$cljs.core/every?","~$metabase.mbql.schema/does-not-contain","~$js/metabase.mbql.schema.cum-count","~$metabase.mbql.schema/DatetimeExpression","~$cljs.core/every-pred","~$js/Error","~$metabase.mbql.schema/NumericExpressionArgOrInterval","~$metabase.mbql.schema/validate-query","~$metabase.mbql.schema/LiteralDateString","~$metabase.mbql.schema/interval","~$js/metabase.mbql.schema.max","~$js/metabase.mbql.schema.*","~$metabase.mbql.schema.helpers/FieldType","~$metabase.mbql.schema/Context","~$metabase.mbql.schema/FieldOrAggregationReference","~$js/metabase.mbql.schema.desc"]]],"~:cache-keys",["~#cmap",[["^1U","camel_snake_kebab/internals/misc.cljc"],["5ae08f83ceb8959971e6334596bff0214bf6fdf2","~:shadow.build.compiler/resolve",["^ ","~:require-id",null,"~:deps-ids",["^L",[]],"~:deps-syms",["^1B","^@","~$camel-snake-kebab.internals.string-separator","~$clojure.string"]]],["^1U","goog/dom/tagname.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^:=",["^ ","^:>",null,"^:?",["^L",[]],"^:@",["^1B","~$goog.dom.HtmlElement"]]],["^1U","metabase/shared/util/i18n.cljs"],["6c3c8615004b349dae9851ed547d516d45e04bd0","^:=",["^ ","^:>",null,"^:?",["^L",[]],"^:@",["^1B","^@","~$shadow.js.shim.module$ttag","^:B"]]],["^1U","goog/labs/useragent/platform.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^:=",["^ ","^:>",null,"^:?",["^L",[]],"^:@",["^1B","~$goog.string.internal","~$goog.labs.userAgent.util","~$goog.labs.userAgent.highEntropy.highEntropyValue","~$goog.labs.userAgent.highEntropy.highEntropyData","~$goog.labs.userAgent"]]],["^1U","metabase/types.cljc"],["00232bf78b259e26a21c218c8f2d746ba7003a15","^:=",["^ ","^:>",null,"^:?",["^L",[]],"^:@",["^1B","^@","^1=","~$metabase.types.coercion-hierarchies","~$metabase.util"]]],["^1U","lambdaisland/glogi.cljs"],["76286836d4172602aa08006b2a754dda736ffe09","^:=",["^ ","^:>",null,"^:?",["^L",[]],"^:@",["^1B","^@","~$goog.log","~$goog.debug.Console","~$goog.array","^:B","~$goog.object","~$goog.debug.FancyWindow","~$goog.debug.DivConsole"]]],["^1U","goog/math/math.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^:=",["^ ","^:>",null,"^:?",["^L",[]],"^:@",["^1B","~$goog.asserts"]]],["^1U","goog/html/trustedtypes.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^:=",["^ ","^:>",null,"^:?",["^L",[]],"^:@",["^1B"]]],["^1U","goog/string/stringformat.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^:=",["^ ","^:>",null,"^:?",["^L",[]],"^:@",["^1B","~$goog.string"]]],["^1U","goog/labs/useragent/browser.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^:=",["^ ","^:>",null,"^:?",["^L",[]],"^:@",["^1B","^:F","^:G","^:R","^:E","^:H","^:I"]]],["^1U","goog/html/safeurl.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^:=",["^ ","^:>",null,"^:?",["^L",[]],"^:@",["^1B","^:R","~$goog.fs.url","~$goog.html.TrustedResourceUrl","~$goog.string.Const","~$goog.string.TypedString","^:E"]]],["^1U","goog/style/style.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^:=",["^ ","^:>",null,"^:?",["^L",[]],"^:@",["^1B","^:R","~$goog.dom","~$goog.dom.NodeType","~$goog.dom.TagName","~$goog.dom.safe","~$goog.dom.vendor","~$goog.html.SafeStyleSheet","~$goog.math.Box","~$goog.math.Coordinate","~$goog.math.Rect","~$goog.math.Size","^:O","~$goog.reflect","^:S","~$goog.userAgent"]]],["^1U","goog/array/array.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^:=",["^ ","^:>",null,"^:?",["^L",[]],"^:@",["^1B","^:R"]]],["~:shadow.build.js-support/require","moment"],["^15","shadow.js.shim.module$moment.js","require","^:=",["^ ","^:>",null,"^:?",["^L",[]],"^:@",["^1B"]]],["^;8","moment-timezone"],["^17","shadow.js.shim.module$moment_timezone.js","require","^:=",["^ ","^:>",null,"^:?",["^L",[]],"^:@",["^1B"]]],["^1U","metabase/mbql/schema/macros.cljs"],["2af09bd42ffb1e15b66723cf7ba15db7dc75d10b","^:=",["^ ","^:>",null,"^:?",["^L",[]],"^:@",["^1B","^@"]]],["^1U","goog/useragent/useragent.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^:=",["^ ","^:>",null,"^:?",["^L",[]],"^:@",["^1B","~$goog.labs.userAgent.browser","~$goog.labs.userAgent.engine","~$goog.labs.userAgent.platform","^:F","^;6","^:E"]]],["^1U","goog/debug/error.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^:=",["^ ","^:>",null,"^:?",["^L",[]],"^:@",["^1B"]]],["^1U","goog/flags/flags.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^:=",["^ ","^:>",null,"^:?",["^L",[]],"^:@",["^1B"]]],["^1U","net/cgrand/macrovich.cljc"],["abcb26cbfe0f8eef363b25525210c0fe1eb1f693","^:=",["^ ","^:>",null,"^:?",["^L",[]],"^:@",["^1B","^@"]]],["^1U","schema/spec/variant.cljc"],["0dacc3066a87f33088c9a332b6c21e8b0560011c","^:=",["^ ","^:>",null,"^:?",["^L",[]],"^:@",["^1B","^@","~$schema.utils","~$schema.spec.core"]]],["^1U","goog/structs/circularbuffer.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^:=",["^ ","^:>",null,"^:?",["^L",[]],"^:@",["^1B"]]],["^1U","weavejester/dependency.cljc"],["7fd7f8879313f6a7e295f7447e668bdf492c42c1","^:=",["^ ","^:>",null,"^:?",["^L",[]],"^:@",["^1B","^@","^1="]]],["^1U","goog/dom/nodetype.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^:=",["^ ","^:>",null,"^:?",["^L",[]],"^:@",["^1B"]]],["^1U","goog/labs/useragent/highentropy/highentropyvalue.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^:=",["^ ","^:>",null,"^:?",["^L",[]],"^:@",["^1B","^:F","^:E"]]],["^1U","cljs/pprint.cljs"],["bc14df6666853ed869d7b88aaa864111c65d0c7f","^:=",["^ ","^:>",null,"^:?",["^L",[]],"^:@",["^1B","^@","^:B","^:S","~$goog.string.StringBuffer"]]],["^1U","camel_snake_kebab/internals/string_separator.cljc"],["5ae08f83ceb8959971e6334596bff0214bf6fdf2","^:=",["^ ","^:>",null,"^:?",["^L",[]],"^:@",["^1B","^@","^:B"]]],["^1U","goog/string/typedstring.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^:=",["^ ","^:>",null,"^:?",["^L",[]],"^:@",["^1B"]]],["^1U","goog/object/object.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^:=",["^ ","^:>",null,"^:?",["^L",[]],"^:@",["^1B"]]],["^1U","goog/dom/asserts.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^:=",["^ ","^:>",null,"^:?",["^L",[]],"^:@",["^1B","^:R"]]],"~:SHADOW-TIMESTAMP",[1689947046000,1689947046000,1689947050000],["^1U","goog/math/long.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^:=",["^ ","^:>",null,"^:?",["^L",[]],"^:@",["^1B","^:R","^;6"]]],["^1U","goog/html/trustedresourceurl.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^:=",["^ ","^:>",null,"^:?",["^L",[]],"^:@",["^1B","^:R","~$goog.fs.blob","^:T","~$goog.html.SafeScript","~$goog.html.trustedtypes","^:V","^:W"]]],["^1U","schema/spec/leaf.cljc"],["0dacc3066a87f33088c9a332b6c21e8b0560011c","^:=",["^ ","^:>",null,"^:?",["^L",[]],"^:@",["^1B","^@","^;="]]],["^1U","metabase/util/format.cljc"],["875f86a08288cb3ad5a6f15df988897eaf8613af","^:=",["^ ","^:>",null,"^:?",["^L",[]],"^:@",["^1B","^@","^:S"]]],["^1U","goog/math/irect.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^:=",["^ ","^:>",null,"^:?",["^L",[]],"^:@",["^1B"]]],["^1U","goog/math/box.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^:=",["^ ","^:>",null,"^:?",["^L",[]],"^:@",["^1B","^:R","^;3"]]],["^1U","goog/string/internal.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^:=",["^ ","^:>",null,"^:?",["^L",[]],"^:@",["^1B"]]],["^1U","goog/functions/functions.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^:=",["^ ","^:>",null,"^:?",["^L",[]],"^:@",["^1B"]]],["^1U","goog/html/safestyle.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^:=",["^ ","^:>",null,"^:?",["^L",[]],"^:@",["^1B","^:V","~$goog.html.SafeUrl","^:W","^:R","^:E"]]],["^1U","goog/dom/safe.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^:=",["^ ","^:>",null,"^:?",["^L",[]],"^:@",["^1B","^:R","~$goog.asserts.dom","~$goog.dom.asserts","~$goog.functions","~$goog.html.SafeHtml","^;A","~$goog.html.SafeStyle","^;C","^:U","~$goog.html.uncheckedconversions","^:V","^:E"]]],["^1U","goog/asserts/dom.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^:=",["^ ","^:>",null,"^:?",["^L",[]],"^:@",["^1B","^:Z","^:R","~$goog.dom.element"]]],["^1U","medley/core.cljc"],["f5117fa4c15ff14c4a0ab7db414b0f102afb0b8a","^:=",["^ ","^:>",null,"^:?",["^L",[]],"^:@",["^1B","^@"]]],["^1U","clojure/walk.cljs"],["bc14df6666853ed869d7b88aaa864111c65d0c7f","^:=",["^ ","^:>",null,"^:?",["^L",[]],"^:@",["^1B","^@"]]],["^1U","lambdaisland/glogi/console.cljs"],["76286836d4172602aa08006b2a754dda736ffe09","^:=",["^ ","^:>",null,"^:?",["^L",[]],"^:@",["^1B","^@","~$lambdaisland.glogi","~$lambdaisland.glogi.print","^:O","^:M"]]],["^1U","goog/html/safehtml.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^:=",["^ ","^:>",null,"^:?",["^L",[]],"^:@",["^1B","^:V","^;A","^;H","^;1","^;C","^:Z","^:U","^:W","^:R","^;9","^:N","^:O","^:E","~$goog.dom.tags","^;B"]]],["^1U","goog/dom/tags.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^:=",["^ ","^:>",null,"^:?",["^L",[]],"^:@",["^1B","^:O"]]],["^1U","goog/math/size.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^:=",["^ ","^:>",null,"^:?",["^L",[]],"^:@",["^1B"]]],["^1U","goog/labs/useragent/engine.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^:=",["^ ","^:>",null,"^:?",["^L",[]],"^:@",["^1B","^:N","^:E","^:F"]]],["^1U","goog/fs/blob.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^:=",["^ ","^:>",null,"^:?",["^L",[]],"^:@",["^1B"]]],["^1U","metabase/mbql/schema/helpers.cljc"],["b1f6002b97b59423b504abb666e13c9b0228b768","^:=",["^ ","^:>",null,"^:?",["^L",[]],"^:@",["^1B","^@","^:B","~$metabase.types","^1@"]]],["^1U","goog/dom/dom.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^:=",["^ ","^:>",null,"^:?",["^L",[]],"^:@",["^1B","^:N","^:R","^;D","~$goog.dom.BrowserFeature","^:Y","^:Z","^:[","^;G","^;I","^;3","^;5","^:O","^:S","^:V","~$goog.string.Unicode","^;7"]]],["^1U","metabase/util/log.cljs"],["7d8a3bf01eb27c2ba7269dc90dc218e46bcc1d3a","^:=",["^ ","^:>",null,"^:?",["^L",[]],"^:@",["^1B","^@","^:L","^:S","~$goog.string.format","^;K","~$lambdaisland.glogi.console"]]],["^1U","goog/asserts/asserts.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^:=",["^ ","^:>",null,"^:?",["^L",[]],"^:@",["^1B","~$goog.debug.Error","^:Y"]]],["^1U","goog/debug/relativetimeprovider.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^:=",["^ ","^:>",null,"^:?",["^L",[]],"^:@",["^1B"]]],["^1U","goog/math/rect.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^:=",["^ ","^:>",null,"^:?",["^L",[]],"^:@",["^1B","^:R","^;2","^;3","~$goog.math.IRect","^;5"]]],["^1U","flatland/ordered/map.cljs"],["3a9cb9d79e47d77ecd4f4d550371ecf01464c461","^:=",["^ ","^:>",null,"^:?",["^L",[]],"^:@",["^1B","^@"]]],["^1U","goog/uri/uri.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^:=",["^ ","^:>",null,"^:?",["^L",[]],"^:@",["^1B","^:N","^:R","~$goog.collections.maps","^:S","~$goog.structs","~$goog.uri.utils","~$goog.uri.utils.ComponentIndex","~$goog.uri.utils.StandardQueryParam"]]],["^1U","goog/labs/useragent/highentropy/highentropydata.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^:=",["^ ","^:>",null,"^:?",["^L",[]],"^:@",["^1B","^:G"]]],["^1U","metabase/types/coercion_hierarchies.cljc"],["c3d70ef6080e044d61f13ff6bfd76490e2dcd0ac","^:=",["^ ","^:>",null,"^:?",["^L",[]],"^:@",["^1B","^@","^1="]]],["^1U","goog/collections/maps.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^:=",["^ ","^:>",null,"^:?",["^L",[]],"^:@",["^1B"]]],["^1U","goog/debug/divconsole.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^:=",["^ ","^:>",null,"^:?",["^L",[]],"^:@",["^1B","~$goog.debug.HtmlFormatter","~$goog.dom.DomHelper","^:Z","^:[","^;G","^;1","^:L","^:V","~$goog.style"]]],["^1U","schema/spec/collection.cljc"],["0dacc3066a87f33088c9a332b6c21e8b0560011c","^:=",["^ ","^:>",null,"^:?",["^L",[]],"^:@",["^1B","^@","^;<","^;="]]],["^1U","schema/utils.cljc"],["0dacc3066a87f33088c9a332b6c21e8b0560011c","^:=",["^ ","^:>",null,"^:?",["^L",[]],"^:@",["^1B","^@","^;Q","^:O","^:S","^:B"]]],["^1U","goog/debug/fancywindow.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^:=",["^ ","^:>",null,"^:?",["^L",[]],"^:@",["^1B","^:N","^:R","~$goog.debug.DebugWindow","^;[","^:Z","^:[","^;G","^;1","^:L","^:O","^:S","^:V","^;7"]]],["^1U","goog/debug/formatter.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^:=",["^ ","^:>",null,"^:?",["^L",[]],"^:@",["^1B","~$goog.debug","~$goog.debug.RelativeTimeProvider","^;G","^;C","^;I","^:L","^:V"]]],["^1U","metabase/shared/util/namespaces.cljs"],["00687008abd6eb291bc9d5ff1fff73210e0bbe6e","^:=",["^ ","^:>",null,"^:?",["^L",[]],"^:@",["^1B","^@"]]],["^1U","goog/fs/url.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^:=",["^ ","^:>",null,"^:?",["^L",[]],"^:@",["^1B"]]],["^1U","goog/base.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^:=",["^ ","^:>",null,"^:?",["^L",[]],"^:@",[]]],["^1U","goog/structs/structs.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^:=",["^ ","^:>",null,"^:?",["^L",[]],"^:@",["^1B","^:N","^:O"]]],["^1U","clojure/string.cljs"],["bc14df6666853ed869d7b88aaa864111c65d0c7f","^:=",["^ ","^:>",null,"^:?",["^L",[]],"^:@",["^1B","^@","^:S","^;>"]]],["^1U","metabase/util.cljc"],["2eb945a6741f1450ecac08a9087b862ce52b9e3a","^:=",["^ ","^:>",null,"^:?",["^L",[]],"^:@",["^1B","^@","~$camel-snake-kebab.internals.macros","~$clojure.data","^D","^1=","^:B","~$clojure.walk","~$flatland.ordered.map","~$medley.core","~$metabase.shared.util.i18n","~$metabase.shared.util.namespaces","~$metabase.util.format","~$metabase.util.log","~$net.cgrand.macrovich","~$weavejester.dependency"]]],["^1U","camel_snake_kebab/internals/macros.cljc"],["5ae08f83ceb8959971e6334596bff0214bf6fdf2","^:=",["^ ","^:>",null,"^:?",["^L",[]],"^:@",["^1B","^@","~$camel-snake-kebab.internals.alter-name","~$camel-snake-kebab.internals.misc"]]],["^1U","goog/string/string.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^:=",["^ ","^:>",null,"^:?",["^L",[]],"^:@",["^1B","^:[","^;I","^:V","^:E"]]],["^1U","schema/core.cljc"],["0dacc3066a87f33088c9a332b6c21e8b0560011c","^:=",["^ ","^:>",null,"^:?",["^L",[]],"^:@",["^1B","^@","^:B","^;<","^;=","~$schema.spec.leaf","~$schema.spec.variant","~$schema.spec.collection"]]],["^1U","metabase/mbql/schema.cljc"],["c51bf2a180ecbc12d6a1cd42a4049323f46a0085","^:=",["^ ","^:>",null,"^:?",["^L",[]],"^:@",["^1B","^@","^15","^17","^@","^1=","^1?","^I","^1@"]]],["^1U","clojure/data.cljs"],["bc14df6666853ed869d7b88aaa864111c65d0c7f","^:=",["^ ","^:>",null,"^:?",["^L",[]],"^:@",["^1B","^@","^1="]]],["^1U","goog/reflect/reflect.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^:=",["^ ","^:>",null,"^:?",["^L",[]],"^:@",["^1B"]]],["^1U","goog/labs/useragent/util.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^:=",["^ ","^:>",null,"^:?",["^L",[]],"^:@",["^1B","^:E","^:I"]]],["^1U","goog/debug/debug.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^:=",["^ ","^:>",null,"^:?",["^L",[]],"^:@",["^1B","^:N","~$goog.debug.errorcontext"]]],["^1U","goog/string/stringbuffer.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^:=",["^ ","^:>",null,"^:?",["^L",[]],"^:@",["^1B"]]],["^1U","schema/spec/core.cljc"],["0dacc3066a87f33088c9a332b6c21e8b0560011c","^:=",["^ ","^:>",null,"^:?",["^L",[]],"^:@",["^1B","^@","^;<"]]],["^;8","ttag"],["^:D","shadow.js.shim.module$ttag.js","require","^:=",["^ ","^:>",null,"^:?",["^L",[]],"^:@",["^1B"]]],["^1U","goog/math/coordinate.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^:=",["^ ","^:>",null,"^:?",["^L",[]],"^:@",["^1B","~$goog.math"]]],["^1U","goog/debug/errorcontext.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^:=",["^ ","^:>",null,"^:?",["^L",[]],"^:@",["^1B"]]],["^1U","goog/labs/useragent/useragent.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^:=",["^ ","^:>",null,"^:?",["^L",[]],"^:@",["^1B","~$goog.flags"]]],["^1U","goog/dom/element.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^:=",["^ ","^:>",null,"^:?",["^L",[]],"^:@",["^1B","^:Y","^:Z"]]],["^1U","goog/html/uncheckedconversions.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^:=",["^ ","^:>",null,"^:?",["^L",[]],"^:@",["^1B","^:R","^;G","^;A","^;H","^;1","^;C","^:U","^:V","^:E"]]],["^1U","goog/debug/debugwindow.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^:=",["^ ","^:>",null,"^:?",["^L",[]],"^:@",["^1B","^;Z","^:[","^;G","^;1","^:L","^:V","~$goog.structs.CircularBuffer","^;7"]]],["^1U","goog/dom/htmlelement.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^:=",["^ ","^:>",null,"^:?",["^L",[]],"^:@",["^1B"]]],["^1U","cljs/core.cljs"],["bc14df6666853ed869d7b88aaa864111c65d0c7f","^:=",["^ ","^:>",null,"^:?",["^L",[]],"^:@",["^1B","~$goog.math.Long","~$goog.math.Integer","^:S","^:O","^:N","~$goog.Uri","^;>"]]],["^1U","goog/html/safescript.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^:=",["^ ","^:>",null,"^:?",["^L",[]],"^:@",["^1B","^:V","^:W","^;B","^:R"]]],["^1U","goog/log/log.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^:=",["^ ","^:>",null,"^:?",["^L",[]],"^:@",["^1B","^:R","^<2"]]],["^1U","camel_snake_kebab/internals/alter_name.cljc"],["5ae08f83ceb8959971e6334596bff0214bf6fdf2","^:=",["^ ","^:>",null,"^:?",["^L",[]],"^:@",["^1B","^@"]]],["^1U","goog/html/safestylesheet.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^:=",["^ ","^:>",null,"^:?",["^L",[]],"^:@",["^1B","^:V","^;H","^:W","^:O","^:R","^:E"]]],["^1U","goog/math/integer.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^:=",["^ ","^:>",null,"^:?",["^L",[]],"^:@",["^1B","^;6"]]],["^1U","goog/debug/console.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^:=",["^ ","^:>",null,"^:?",["^L",[]],"^:@",["^1B","~$goog.debug.TextFormatter","^:L"]]],["^1U","lambdaisland/glogi/print.cljs"],["76286836d4172602aa08006b2a754dda736ffe09","^:=",["^ ","^:>",null,"^:?",["^L",[]],"^:@",["^1B","^@","^;K","^:O"]]],["^1U","goog/dom/browserfeature.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^:=",["^ ","^:>",null,"^:?",["^L",[]],"^:@",["^1B","^;7"]]],["^1U","clojure/set.cljs"],["bc14df6666853ed869d7b88aaa864111c65d0c7f","^:=",["^ ","^:>",null,"^:?",["^L",[]],"^:@",["^1B","^@"]]],["^1U","goog/uri/utils.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^:=",["^ ","^:>",null,"^:?",["^L",[]],"^:@",["^1B","^:R","^:S"]]],["^1U","goog/string/const.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^:=",["^ ","^:>",null,"^:?",["^L",[]],"^:@",["^1B","^:R","^:W"]]],["^1U","goog/dom/vendor.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^:=",["^ ","^:>",null,"^:?",["^L",[]],"^:@",["^1B","^:S","^;7"]]]]],"~:clj-info",["^ ","jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/analyzer/impl.cljc",1689947050000,"jar:file:/root/.m2/repository/instaparse/instaparse/1.4.12/instaparse-1.4.12.jar!/instaparse/line_col.clj",1689946146000,"jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/source_map/base64_vlq.clj",1689947050000,"jar:file:/root/.m2/repository/instaparse/instaparse/1.4.12/instaparse-1.4.12.jar!/instaparse/viz.clj",1689946146000,"jar:file:/root/.m2/repository/org/clojure/tools.namespace/1.4.4/tools.namespace-1.4.4.jar!/clojure/tools/namespace/parse.cljc",1689946139000,"jar:file:/root/.m2/repository/weavejester/dependency/0.2.1/dependency-0.2.1.jar!/weavejester/dependency.cljc",1689946093000,"jar:file:/root/.m2/repository/instaparse/instaparse/1.4.12/instaparse-1.4.12.jar!/instaparse/transform.clj",1689946146000,"jar:file:/root/.m2/repository/ring/ring-codec/1.2.0/ring-codec-1.2.0.jar!/ring/util/codec.clj",1689946172000,"jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/instant.clj",1689947050000,"jar:file:/root/.m2/repository/org/clojure/tools.reader/1.3.6/tools.reader-1.3.6.jar!/clojure/tools/reader/default_data_readers.clj",1689946174000,"jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/pprint.cljc",1689947050000,"jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/externs.clj",1689947050000,"jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/vendor/clojure/tools/reader/default_data_readers.clj",1689947050000,"file:/home/gmrworkspace/dashboard/shared/src/metabase/mbql/schema/helpers.cljc",1692013156305,"jar:file:/root/.m2/repository/prismatic/schema/1.4.1/schema-1.4.1.jar!/schema/core.cljc",1689946172000,"file:/home/gmrworkspace/dashboard/shared/src/metabase/shared/util/i18n.clj",1690286812000,"jar:file:/root/.m2/repository/org/clojure/tools.reader/1.3.6/tools.reader-1.3.6.jar!/clojure/tools/reader/edn.clj",1689946174000,"jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/compiler.cljc",1689947050000,"jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/env.cljc",1689947050000,"jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/analyzer/impl/namespaces.cljc",1689947050000,"jar:file:/root/.m2/repository/prismatic/schema/1.4.1/schema-1.4.1.jar!/schema/macros.clj",1689946172000,"file:/home/gmrworkspace/dashboard/src/metabase/util/i18n/plural.clj",1690286813000,"jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/source_map.clj",1689947050000,"jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/util.cljc",1689947050000,"file:/home/gmrworkspace/dashboard/src/metabase/util.cljc",1690286813000,"jar:file:/root/.m2/repository/nano-id/nano-id/1.0.0/nano-id-1.0.0.jar!/nano_id/core.cljc",1689946171000,"file:/home/gmrworkspace/dashboard/src/metabase/plugins/classloader.clj",1692013156125,"jar:file:/root/.m2/repository/medley/medley/1.4.0/medley-1.4.0.jar!/medley/core.cljc",1689946185000,"jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/analyzer.cljc",1689947050000,"jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/analyzer/passes.cljc",1689947050000,"jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/vendor/clojure/data/json.clj",1689947050000,"file:/home/gmrworkspace/dashboard/src/metabase/util/format.cljc",1690286813000,"jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/source_map/base64.clj",1689947050000,"jar:file:/root/.m2/repository/riddley/riddley/0.2.0/riddley-0.2.0.jar!/riddley/walk.clj",1689946160000,"jar:file:/root/.m2/repository/instaparse/instaparse/1.4.12/instaparse-1.4.12.jar!/instaparse/reduction.clj",1689946146000,"jar:file:/root/.m2/repository/org/tcrawley/dynapath/1.1.0/dynapath-1.1.0.jar!/dynapath/util.clj",1689946174000,"jar:file:/root/.m2/repository/camel-snake-kebab/camel-snake-kebab/0.4.3/camel-snake-kebab-0.4.3.jar!/camel_snake_kebab/internals/macros.cljc",1689946178000,"jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/vendor/clojure/tools/reader/reader_types.clj",1689947050000,"jar:file:/root/.m2/repository/instaparse/instaparse/1.4.12/instaparse-1.4.12.jar!/instaparse/auto_flatten_seq.clj",1689946146000,"jar:file:/root/.m2/repository/instaparse/instaparse/1.4.12/instaparse-1.4.12.jar!/instaparse/core.clj",1689946146000,"jar:file:/root/.m2/repository/org/clojure/core.cache/1.0.225/core.cache-1.0.225.jar!/clojure/core/cache.clj",1689946183000,"jar:file:/root/.m2/repository/potemkin/potemkin/0.4.6/potemkin-0.4.6.jar!/potemkin/types.clj",1689946176000,"jar:file:/root/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/set.clj",1689946092000,"jar:file:/root/.m2/repository/org/clojure/math.numeric-tower/0.0.5/math.numeric-tower-0.0.5.jar!/clojure/math/numeric_tower.clj",1689946148000,"jar:file:/root/.m2/repository/net/cgrand/macrovich/0.2.1/macrovich-0.2.1.jar!/net/cgrand/macrovich.cljc",1689946165000,"jar:file:/root/.m2/repository/colorize/colorize/0.1.1/colorize-0.1.1.jar!/colorize/core.clj",1689946104000,"jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/vendor/clojure/tools/reader/impl/inspect.clj",1689947050000,"jar:file:/root/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/string.clj",1689946092000,"jar:file:/root/.m2/repository/potemkin/potemkin/0.4.6/potemkin-0.4.6.jar!/potemkin.clj",1689946176000,"jar:file:/root/.m2/repository/instaparse/instaparse/1.4.12/instaparse-1.4.12.jar!/instaparse/failure.clj",1689946146000,"jar:file:/root/.m2/repository/prismatic/schema/1.4.1/schema-1.4.1.jar!/schema/spec/variant.cljc",1689946172000,"jar:file:/root/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/core.clj",1689946092000,"file:/home/gmrworkspace/dashboard/src/metabase/util/i18n/impl.clj",1692013156125,"jar:file:/root/.m2/repository/org/clojure/tools.namespace/1.4.4/tools.namespace-1.4.4.jar!/clojure/tools/namespace/dependency.cljc",1689946139000,"jar:file:/root/.m2/repository/prismatic/schema/1.4.1/schema-1.4.1.jar!/schema/spec/leaf.cljc",1689946172000,"jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/analyzer/passes/and_or.cljc",1689947050000,"jar:file:/root/.m2/repository/riddley/riddley/0.2.0/riddley-0.2.0.jar!/riddley/compiler.clj",1689946160000,"jar:file:/root/.m2/repository/org/clojure/core.memoize/1.0.257/core.memoize-1.0.257.jar!/clojure/core/memoize.clj",1689946178000,"jar:file:/root/.m2/repository/instaparse/instaparse/1.4.12/instaparse-1.4.12.jar!/instaparse/print.clj",1689946146000,"jar:file:/root/.m2/repository/org/clojure/tools.namespace/1.4.4/tools.namespace-1.4.4.jar!/clojure/tools/namespace/track.cljc",1689946139000,"jar:file:/root/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/pprint.clj",1689946092000,"jar:file:/root/.m2/repository/org/clojure/java.classpath/1.0.0/java.classpath-1.0.0.jar!/clojure/java/classpath.clj",1689946162000,"jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/js_deps.cljc",1689947050000,"jar:file:/root/.m2/repository/cheshire/cheshire/5.11.0/cheshire-5.11.0.jar!/cheshire/factory.clj",1689946173000,"jar:file:/root/.m2/repository/org/clojure/tools.reader/1.3.6/tools.reader-1.3.6.jar!/clojure/tools/reader/impl/errors.clj",1689946174000,"jar:file:/root/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/walk.clj",1689946092000,"jar:file:/root/.m2/repository/org/clojure/tools.reader/1.3.6/tools.reader-1.3.6.jar!/clojure/tools/reader.clj",1689946174000,"jar:file:/root/.m2/repository/prismatic/schema/1.4.1/schema-1.4.1.jar!/schema/spec/core.cljc",1689946172000,"jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/core.cljc",1689947050000,"jar:file:/root/.m2/repository/cheshire/cheshire/5.11.0/cheshire-5.11.0.jar!/cheshire/generate.clj",1689946173000,"jar:file:/root/.m2/repository/org/clojure/tools.reader/1.3.6/tools.reader-1.3.6.jar!/clojure/tools/reader/reader_types.clj",1689946174000,"jar:file:/root/.m2/repository/cheshire/cheshire/5.11.0/cheshire-5.11.0.jar!/cheshire/parse.clj",1689946173000,"file:/home/gmrworkspace/dashboard/src/metabase/util/i18n.clj",1692013156125,"jar:file:/root/.m2/repository/instaparse/instaparse/1.4.12/instaparse-1.4.12.jar!/instaparse/cfg.clj",1689946146000,"jar:file:/root/.m2/repository/cheshire/cheshire/5.11.0/cheshire-5.11.0.jar!/cheshire/core.clj",1689946173000,"jar:file:/root/.m2/repository/instaparse/instaparse/1.4.12/instaparse-1.4.12.jar!/instaparse/gll.clj",1689946146000,"jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/vendor/clojure/tools/reader.clj",1689947050000,"jar:file:/root/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/edn.clj",1689946092000,"jar:file:/root/.m2/repository/nano-id/nano-id/1.0.0/nano-id-1.0.0.jar!/nano_id/random.cljc",1689946171000,"jar:file:/root/.m2/repository/environ/environ/1.2.0/environ-1.2.0.jar!/environ/core.cljc",1689946163000,"jar:file:/root/.m2/repository/prismatic/schema/1.4.1/schema-1.4.1.jar!/schema/spec/collection.cljc",1689946172000,"jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/vendor/clojure/tools/reader/impl/errors.clj",1689947050000,"jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/tagged_literals.cljc",1689947050000,"jar:file:/root/.m2/repository/instaparse/instaparse/1.4.12/instaparse-1.4.12.jar!/instaparse/repeat.clj",1689946146000,"jar:file:/root/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/java/io.clj",1689946092000,"jar:file:/root/.m2/repository/com/lambdaisland/glogi/1.2.164/glogi-1.2.164.jar!/lambdaisland/glogi.clj",1689947043000,"jar:file:/root/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/instant.clj",1689946092000,"file:/home/gmrworkspace/dashboard/shared/src/metabase/shared/util/namespaces.clj",1690286812000,"jar:file:/root/.m2/repository/org/clojure/tools.namespace/1.4.4/tools.namespace-1.4.4.jar!/clojure/tools/namespace/file.clj",1689946139000,"file:/home/gmrworkspace/dashboard/shared/src/metabase/mbql/schema/macros.clj",1690286812000,"jar:file:/root/.m2/repository/prismatic/schema/1.4.1/schema-1.4.1.jar!/schema/utils.cljc",1689946172000,"file:/home/gmrworkspace/dashboard/src/metabase/config.clj",1692013154929,"file:/home/gmrworkspace/dashboard/src/metabase/util/log.clj",1690286813000,"jar:file:/root/.m2/repository/org/clojure/tools.reader/1.3.6/tools.reader-1.3.6.jar!/clojure/tools/reader/impl/inspect.clj",1689946174000,"jar:file:/root/.m2/repository/instaparse/instaparse/1.4.12/instaparse-1.4.12.jar!/instaparse/combinators_source.clj",1689946146000,"jar:file:/root/.m2/repository/instaparse/instaparse/1.4.12/instaparse-1.4.12.jar!/instaparse/abnf.clj",1689946146000,"jar:file:/root/.m2/repository/org/clojure/tools.namespace/1.4.4/tools.namespace-1.4.4.jar!/clojure/tools/namespace/find.clj",1689946139000,"jar:file:/root/.m2/repository/org/tcrawley/dynapath/1.1.0/dynapath-1.1.0.jar!/dynapath/dynamic_classpath.clj",1689946174000,"jar:file:/root/.m2/repository/cheshire/cheshire/5.11.0/cheshire-5.11.0.jar!/cheshire/generate_seq.clj",1689946173000,"file:/home/gmrworkspace/dashboard/src/metabase/util/jvm.clj",1692013156125],"~:analyzer",["^ ","^3",null,"^4",["^ "],"^5",["^ ","^6","Schema for validating a *normalized* MBQL query. This is also the definitive grammar for MBQL, wow!","^7","metabase/mbql/schema.cljc","^8",1,"^9",5,"^:",1,"^;",25],"^<",["^ ","^=","^>","^?","^@","^A","^B","^C","^D","^E","^F"],"^G",["^ ","^H","^I","^J","^I"],"^K",["^L",["~$=","~$<","^M","~$*","^N","~$>","^O","^P","~$-","^Q","^R","^S","~$/","^T","^U","^V","~$+","^W","^X","^Y","^Z","^["]],"^10","^11","^12",["^ "],"^13",["^ ","^14","^15","^16","^17"],"^1:",null,"^1;",["^ ","^1<","^1=","^1>","^1?","^1@","^1@","^1A","^15","^17","^17","^@","^@","^1B","^1B","^1?","^1?","^I","^I","^?","^@","^1=","^1=","^15","^15","~$s","^1@","^1C","^17","^1D","^@"],"^1E",["^L",["^1F"]],"~:shadow/js-access-global",["^L",["Date","Error"]],"^1G",["^ ","^1H","^1?","^H","^I","^J","^I"],"~:defs",["^ ","~$not-null",["^ ","^5",["^ ","^7","metabase/mbql/schema.cljc","^;",28,"~:clause-name","~:not-null","^9",20,"^8",833,"^:",833,"~:sugar",true,"~:clause-form",["^?2","~:field",["^1K",["~$quote","~$Field"]]],"^6","Schema for a valid not-null clause."],"^10","^50","^7","metabase/mbql/schema.cljc","^;",28,"^?1","^?2","^9",1,"^8",833,"^:",833,"^?3",true,"^?4",["^?2","^?5",["^1K",["^?6","^?7"]]],"~:tag",["^L",["~$clj","~$cljs.core/IVector","~$any","~$cljs.core/MetaFn","~$clj-nil"]],"^6","Schema for a valid not-null clause."],"~$interval",["^ ","^5",["^ ","^7","metabase/mbql/schema.cljc","^8",178,"^9",12,"^:",178,"^;",20,"^?1","~:interval","^?4",["^??","~:n",["^1K",["^?6","~$s/Int"]],"~:unit",["^1K",["^?6","~$RelativeDatetimeUnit"]]],"^6","Schema for a valid interval clause."],"^10","^:4","^7","metabase/mbql/schema.cljc","^;",20,"^?1","^??","^9",1,"^8",178,"^:",178,"^?4",["^??","~:n",["^1K",["^?6","^?@"]],"^?A",["^1K",["^?6","^?B"]]],"^?8",["^L",["^?9","^?:","^?;","^?<","^?="]],"^6","Schema for a valid interval clause."],"~$FieldOrAggregationReference",["^ ","^5",["^ ","^7","metabase/mbql/schema.cljc","^8",473,"^9",6,"^:",473,"^;",33],"^10","^:9","^7","metabase/mbql/schema.cljc","^;",33,"^9",1,"^8",473,"^:",473,"^?8","~$schema.core/ConditionalSchema","^6","Schema for any type of valid Field clause, or for an indexed reference to an aggregation clause."],"~$get-day",["^ ","~:requires-features",["^L",["~:temporal-extract"]],"^5",["^ ","^?F",["^L",["^?G"]],"^7","metabase/mbql/schema.cljc","^;",70,"^?1","~:get-day","^9",63,"^8",704,"^:",704,"^?3",true,"^?4",["^?H","~:date",["^1K",["^?6","~$DateTimeExpressionArg"]]],"^6","Schema for a valid get-day clause."],"^10","^4X","^7","metabase/mbql/schema.cljc","^;",70,"^?1","^?H","^9",1,"^8",704,"^:",704,"^?3",true,"^?4",["^?H","^?I",["^1K",["^?6","^?J"]]],"^?8",["^L",["^?9","^?:","^?;","^?<","^?="]],"^6","Schema for a valid get-day clause."],"~$regex-match-first",["^ ","^?F",["^L",["~:expressions","~:regex"]],"^5",["^ ","^?F",["^L",["^?L","^?M"]],"^7","metabase/mbql/schema.cljc","^;",74,"^?1","~:regex-match-first","^9",57,"^8",627,"^:",627,"^?4",["^?N","~:s",["^1K",["^?6","~$StringExpressionArg"]],"~:pattern",["^1K",["^?6","~$s/Str"]]],"^6","Schema for a valid regex-match-first clause."],"^10","^4M","^7","metabase/mbql/schema.cljc","^;",74,"^?1","^?N","^9",1,"^8",627,"^:",627,"^?4",["^?N","~:s",["^1K",["^?6","^?O"]],"^?P",["^1K",["^?6","^?Q"]]],"^?8",["^L",["^?9","^?:","^?;","^?<","^?="]],"^6","Schema for a valid regex-match-first clause."],"~$DatetimeExpression",["^ ","^5",["^ ","^7","metabase/mbql/schema.cljc","^8",744,"^9",6,"^:",744,"^;",24],"^10","^9Z","^7","metabase/mbql/schema.cljc","^;",24,"^9",1,"^8",744,"^:",744,"^?8","~$schema.core/Recursive","^6","Schema for the definition of a date function expression."],"~$TemplateTag:SourceQuery",["^ ","^5",["^ ","^7","metabase/mbql/schema.cljc","^8",1114,"^9",6,"^:",1114,"^;",29],"^10","^51","^7","metabase/mbql/schema.cljc","^;",29,"^9",1,"^8",1114,"^:",1114,"^?8",["^L",["^?;","^?="]],"^6","Schema for a source query template tag."],"^?J",["^ ","^5",["^ ","^7","metabase/mbql/schema.cljc","^8",544,"^9",16,"^:",544,"^;",37,"~:private",true],"^?U",true,"^10","^8=","^7","metabase/mbql/schema.cljc","^;",37,"^9",1,"^8",544,"^:",544,"^?8","^?D"],"~$BooleanExpression*",["^ ","^5",["^ ","^7","metabase/mbql/schema.cljc","^8",889,"^9",16,"^:",889,"^;",34,"^?U",true],"^?U",true,"^10","^4K","^7","metabase/mbql/schema.cljc","^;",34,"^9",1,"^8",889,"^:",889,"^?8","~$schema.core/NamedSchema"],"~$ag:var",["^ ","^5",["^ ","^7","metabase/mbql/schema.cljc","^8",974,"^9",71,"^:",974,"^;",77,"^?1","~:var","^?4",["^?Y","~:field-or-expression",["^1K",["^?6","~$FieldOrExpressionDef"]]],"^6","Schema for a valid var clause."],"^10","^9:","^7","metabase/mbql/schema.cljc","^;",77,"^?1","^?Y","^9",1,"^8",974,"^:",974,"^?4",["^?Y","^?Z",["^1K",["^?6","^?["]]],"^?8",["^L",["^?9","^?:","^?;","^?<","^?="]],"^6","Schema for a valid var clause."],"~$datetime-diff",["^ ","^?F",["^L",["~:datetime-diff"]],"^5",["^ ","^?F",["^L",["^@1"]],"^7","metabase/mbql/schema.cljc","^;",65,"^?1","^@1","^9",52,"^8",680,"^:",680,"^?4",["^@1","~:datetime-x",["^1K",["^?6","^?J"]],"~:datetime-y",["^1K",["^?6","^?J"]],"^?A",["^1K",["^?6","~$DatetimeDiffUnits"]]],"^6","Schema for a valid datetime-diff clause."],"^10","^9<","^7","metabase/mbql/schema.cljc","^;",65,"^?1","^@1","^9",1,"^8",680,"^:",680,"^?4",["^@1","^@2",["^1K",["^?6","^?J"]],"^@3",["^1K",["^?6","^?J"]],"^?A",["^1K",["^?6","^@4"]]],"^?8",["^L",["^?9","^?:","^?;","^?<","^?="]],"^6","Schema for a valid datetime-diff clause."],"~$does-not-contain",["^ ","^5",["^ ","^7","metabase/mbql/schema.cljc","^;",36,"^?1","~:does-not-contain","^9",20,"^8",848,"^:",848,"^?3",true,"^?4",["^@6","^?5",["^1K",["^?6","^?O"]],"~:string-or-field",["^1K",["^?6","^?O"]],"~:options",["^1K",["^?6",["^1K",["~$optional","~$StringFilterOptions"]]]]],"^6","Schema for a valid does-not-contain clause."],"^10","^9X","^7","metabase/mbql/schema.cljc","^;",36,"^?1","^@6","^9",1,"^8",848,"^:",848,"^?3",true,"^?4",["^@6","^?5",["^1K",["^?6","^?O"]],"^@7",["^1K",["^?6","^?O"]],"^@8",["^1K",["^?6",["^1K",["^@9","^@:"]]]]],"^?8",["^L",["^?9","^?:","^?;","^?<","^?="]],"^6","Schema for a valid does-not-contain clause."],"~$=",["^ ","^5",["^ ","^7","metabase/mbql/schema.cljc","^8",811,"^9",12,"^:",811,"^;",13,"^?1","~:=","^?4",["~:=","^?5",["^1K",["^?6","~$EqualityComparable"]],"~:value-or-field",["^1K",["^?6","^@;"]],"~:more-values-or-fields",["^1K",["^?6",["^1K",["~$rest","^@;"]]]]],"^6","Schema for a valid = clause."],"^10","^4H","^7","metabase/mbql/schema.cljc","^;",13,"^?1","~:=","^9",1,"^8",811,"^:",811,"^?4",["~:=","^?5",["^1K",["^?6","^@;"]],"^@<",["^1K",["^?6","^@;"]],"^@=",["^1K",["^?6",["^1K",["^@>","^@;"]]]]],"^?8",["^L",["^?9","^?:","^?;","^?<","^?="]],"^6","Schema for a valid = clause."],"~$UnnamedAggregation*",["^ ","^5",["^ ","^7","metabase/mbql/schema.cljc","^8",995,"^9",16,"^:",995,"^;",35,"^?U",true],"^?U",true,"^10","^58","^7","metabase/mbql/schema.cljc","^;",35,"^9",1,"^8",995,"^:",995,"^?8","^?D"],"~$TimezoneId",["^ ","^5",["^ ","^7","metabase/mbql/schema.cljc","^8",90,"^9",6,"^:",90,"^;",16],"^10","^4L","^7","metabase/mbql/schema.cljc","^;",16,"^9",1,"^8",90,"^:",90,"^?8","^?W","^6","Valid timezone id."],"~$log",["^ ","^?F",["^L",["~:advanced-math-expressions"]],"^5",["^ ","^?F",["^L",["^@B"]],"^7","metabase/mbql/schema.cljc","^;",67,"^?1","~:log","^9",64,"^8",661,"^:",661,"^?4",["^@C","~:x",["^1K",["^?6","~$NumericExpressionArg"]]],"^6","Schema for a valid log clause."],"^10","^9B","^7","metabase/mbql/schema.cljc","^;",67,"^?1","^@C","^9",1,"^8",661,"^:",661,"^?4",["^@C","~:x",["^1K",["^?6","^@D"]]],"^?8",["^L",["^?9","^?:","^?;","^?<","^?="]],"^6","Schema for a valid log clause."],"^?B",["^ ","^5",["^ ","^7","metabase/mbql/schema.cljc","^8",125,"^9",16,"^:",125,"^;",36,"^?U",true],"^?U",true,"^10","^91","^7","metabase/mbql/schema.cljc","^;",36,"^9",1,"^8",125,"^:",125,"^?8","^?W"],"~$Joins",["^ ","^5",["^ ","^7","metabase/mbql/schema.cljc","^8",1347,"^9",6,"^:",1347,"^;",11],"^10","^5L","^7","metabase/mbql/schema.cljc","^;",11,"^9",1,"^8",1347,"^:",1347,"^?8","~$schema.core/Constrained","^6","Schema for a valid sequence of `Join`s. Must be a non-empty sequence, and `:alias`, if specified, must be unique."],"~$<",["^ ","^5",["^ ","^7","metabase/mbql/schema.cljc","^8",814,"^9",12,"^:",814,"^;",13,"^?1","~:<","^?4",["~:<","^?5",["^1K",["^?6","~$OrderComparable"]],"^@<",["^1K",["^?6","^@G"]]],"^6","Schema for a valid < clause."],"^10","^9G","^7","metabase/mbql/schema.cljc","^;",13,"^?1","~:<","^9",1,"^8",814,"^:",814,"^?4",["~:<","^?5",["^1K",["^?6","^@G"]],"^@<",["^1K",["^?6","^@G"]]],"^?8",["^L",["^?9","^?:","^?;","^?<","^?="]],"^6","Schema for a valid < clause."],"~$floor",["^ ","^?F",["^L",["^?L"]],"^5",["^ ","^?F",["^L",["^?L"]],"^7","metabase/mbql/schema.cljc","^;",55,"^?1","~:floor","^9",50,"^8",640,"^:",640,"^?4",["^@I","~:x",["^1K",["^?6","^@D"]]],"^6","Schema for a valid floor clause."],"^10","^61","^7","metabase/mbql/schema.cljc","^;",55,"^?1","^@I","^9",1,"^8",640,"^:",640,"^?4",["^@I","~:x",["^1K",["^?6","^@D"]]],"^?8",["^L",["^?9","^?:","^?;","^?<","^?="]],"^6","Schema for a valid floor clause."],"~$metric",["^ ","^5",["^ ","^7","metabase/mbql/schema.cljc","^;",26,"^?1","~:metric","^9",20,"^8",989,"^:",989,"^?3",true,"^?4",["^@K","~:metric-id",["^1K",["^?6",["^1K",["~$s/cond-pre","~$helpers/IntGreaterThanZero","~$helpers/NonBlankString"]]]]],"^6","Schema for a valid metric clause."],"^10","^9O","^7","metabase/mbql/schema.cljc","^;",26,"^?1","^@K","^9",1,"^8",989,"^:",989,"^?3",true,"^?4",["^@K","^@L",["^1K",["^?6",["^1K",["^@M","^@N","^@O"]]]]],"^?8",["^L",["^?9","^?:","^?;","^?<","^?="]],"^6","Schema for a valid metric clause."],"~$Fields",["^ ","^5",["^ ","^7","metabase/mbql/schema.cljc","^8",1354,"^9",6,"^:",1354,"^;",12],"^10","^9R","^7","metabase/mbql/schema.cljc","^;",12,"^9",1,"^8",1354,"^:",1354,"^?8","^?W","^6","Schema for valid values of the MBQL `:fields` clause."],"~$ends-with",["^ ","^5",["^ ","^7","metabase/mbql/schema.cljc","^8",844,"^9",12,"^:",844,"^;",21,"^?1","~:ends-with","^?4",["^@R","^?5",["^1K",["^?6","^?O"]],"^@7",["^1K",["^?6","^?O"]],"^@8",["^1K",["^?6",["^1K",["^@9","^@:"]]]]],"^6","Schema for a valid ends-with clause."],"^10","^9M","^7","metabase/mbql/schema.cljc","^;",21,"^?1","^@R","^9",1,"^8",844,"^:",844,"^?4",["^@R","^?5",["^1K",["^?6","^?O"]],"^@7",["^1K",["^?6","^?O"]],"^@8",["^1K",["^?6",["^1K",["^@9","^@:"]]]]],"^?8",["^L",["^?9","^?:","^?;","^?<","^?="]],"^6","Schema for a valid ends-with clause."],"~$ParameterTarget",["^ ","^5",["^ ","^7","metabase/mbql/schema.cljc","^8",1563,"^9",6,"^:",1563,"^;",21],"^10","^36","^7","metabase/mbql/schema.cljc","^;",21,"^9",1,"^8",1563,"^:",1563,"^?8","~$schema.core/CondPre","^6","Schema for the value of `:target` in a [[Parameter]]."],"~$saved-questions-virtual-database-id",["^ ","^5",["^ ","^7","metabase/mbql/schema.cljc","^8",1730,"^9",15,"^:",1730,"^;",50,"^?8","~$Integer"],"^10","^33","^7","metabase/mbql/schema.cljc","^;",50,"^9",1,"^8",1730,"^:",1730,"^?8","^@V","^6","The ID used to signify that a database is 'virtual' rather than physical.\n\n   A fake integer ID is used so as to minimize the number of changes that need to be made on the frontend -- by using\n   something that would otherwise be a legal ID, *nothing* need change there, and the frontend can query against this\n   'database' none the wiser. (This integer ID is negative which means it will never conflict with a *real* database\n   ID.)\n\n   This ID acts as a sort of flag. The relevant places in the middleware can check whether the DB we're querying is\n   this 'virtual' database and take the appropriate actions."],"~$FieldOptions",["^ ","^5",["^ ","^7","metabase/mbql/schema.cljc","^8",383,"^9",16,"^:",383,"^;",28,"^?U",true],"^?U",true,"^10","^31","^7","metabase/mbql/schema.cljc","^;",28,"^9",1,"^8",383,"^:",383,"^?8","^@F"],"~$ArithmeticDateTimeUnit",["^ ","^5",["^ ","^7","metabase/mbql/schema.cljc","^8",724,"^9",16,"^:",724,"^;",38,"^?U",true],"^?U",true,"^10","^5V","^7","metabase/mbql/schema.cljc","^;",38,"^9",1,"^8",724,"^:",724,"^?8","^?W"],"~$relative-datetime",["^ ","^5",["^ ","^7","metabase/mbql/schema.cljc","^8",174,"^9",12,"^:",174,"^;",29,"^?1","~:relative-datetime","^?4",["^@Z","~:n",["^1K",["^?6",["^1K",["^@M",["^1K",["~$s/eq","~:current"]],"^?@"]]]],"^?A",["^1K",["^?6",["^1K",["^@9","^?B"]]]]],"^6","Schema for a valid relative-datetime clause."],"^10","^2X","^7","metabase/mbql/schema.cljc","^;",29,"^?1","^@Z","^9",1,"^8",174,"^:",174,"^?4",["^@Z","~:n",["^1K",["^?6",["^1K",["^@M",["^1K",["^@[","^A0"]],"^?@"]]]],"^?A",["^1K",["^?6",["^1K",["^@9","^?B"]]]]],"^?8",["^L",["^?9","^?:","^?;","^?<","^?="]],"^6","Schema for a valid relative-datetime clause."],"~$sum",["^ ","^?F",["^L",["~:basic-aggregations"]],"^5",["^ ","^?F",["^L",["^A2"]],"^7","metabase/mbql/schema.cljc","^;",60,"^?1","~:sum","^9",57,"^8",958,"^:",958,"^?4",["^A3","^?Z",["^1K",["^?6","^?["]]],"^6","Schema for a valid sum clause."],"^10","^5J","^7","metabase/mbql/schema.cljc","^;",60,"^?1","^A3","^9",1,"^8",958,"^:",958,"^?4",["^A3","^?Z",["^1K",["^?6","^?["]]],"^?8",["^L",["^?9","^?:","^?;","^?<","^?="]],"^6","Schema for a valid sum clause."],"~$aggregations",["^ ","^5",["^ ","^7","metabase/mbql/schema.cljc","^8",516,"^9",16,"^:",516,"^;",28,"^?U",true],"^?U",true,"^10","^2Z","^7","metabase/mbql/schema.cljc","^;",28,"^9",1,"^8",516,"^:",516,"^?8","~$cljs.core/ISet"],"~$time-interval",["^ ","^5",["^ ","^7","metabase/mbql/schema.cljc","^;",33,"^?1","~:time-interval","^9",20,"^8",868,"^:",868,"^?3",true,"^?4",["^A7","^?5",["^1K",["^?6","^?7"]],"~:n",["^1K",["^?6",["^1K",["^@M","^?@",["^1K",["~$s/enum","^A0","~:last","~:next"]]]]]],"^?A",["^1K",["^?6","^?B"]],"^@8",["^1K",["^?6",["^1K",["^@9","~$TimeIntervalOptions"]]]]],"^6","Schema for a valid time-interval clause."],"^10","^5[","^7","metabase/mbql/schema.cljc","^;",33,"^?1","^A7","^9",1,"^8",868,"^:",868,"^?3",true,"^?4",["^A7","^?5",["^1K",["^?6","^?7"]],"~:n",["^1K",["^?6",["^1K",["^@M","^?@",["^1K",["^A8","^A0","^A9","^A:"]]]]]],"^?A",["^1K",["^?6","^?B"]],"^@8",["^1K",["^?6",["^1K",["^@9","^A;"]]]]],"^?8",["^L",["^?9","^?:","^?;","^?<","^?="]],"^6","Schema for a valid time-interval clause."],"~$rtrim",["^ ","^?F",["^L",["^?L"]],"^5",["^ ","^?F",["^L",["^?L"]],"^7","metabase/mbql/schema.cljc","^;",55,"^?1","~:rtrim","^9",50,"^8",609,"^:",609,"^?4",["^A=","~:s",["^1K",["^?6","^?O"]]],"^6","Schema for a valid rtrim clause."],"^10","^2L","^7","metabase/mbql/schema.cljc","^;",55,"^?1","^A=","^9",1,"^8",609,"^:",609,"^?4",["^A=","~:s",["^1K",["^?6","^?O"]]],"^?8",["^L",["^?9","^?:","^?;","^?<","^?="]],"^6","Schema for a valid rtrim clause."],"~$CaseClauses",["^ ","^5",["^ ","^7","metabase/mbql/schema.cljc","^8",911,"^9",16,"^:",911,"^;",27,"^?U",true],"^?U",true,"^10","^65","^7","metabase/mbql/schema.cljc","^;",27,"^9",1,"^8",911,"^:",911,"^?8","^?:"],"~$Field*",["^ ","^5",["^ ","^7","metabase/mbql/schema.cljc","^8",445,"^9",16,"^:",445,"^;",22,"^?U",true],"^?U",true,"^10","^2V","^7","metabase/mbql/schema.cljc","^;",22,"^9",1,"^8",445,"^:",445,"^?8","^?W"],"~$LiteralDateString",["^ ","^5",["^ ","^7","metabase/mbql/schema.cljc","^8",161,"^9",6,"^:",161,"^;",23],"^10","^:3","^7","metabase/mbql/schema.cljc","^;",23,"^9",1,"^8",161,"^:",161,"^?8","^@F","^6","Schema for an ISO-8601-formatted date string literal."],"~$StringExpression*",["^ ","^5",["^ ","^7","metabase/mbql/schema.cljc","^8",924,"^9",16,"^:",924,"^;",33,"^?U",true],"^?U",true,"^10","^5G","^7","metabase/mbql/schema.cljc","^;",33,"^9",1,"^8",924,"^:",924,"^?8","^?W"],"~$DatabaseID",["^ ","^5",["^ ","^7","metabase/mbql/schema.cljc","^8",1746,"^9",6,"^:",1746,"^;",16],"^10","^5E","^7","metabase/mbql/schema.cljc","^;",16,"^9",1,"^8",1746,"^:",1746,"^?8","^@T","^6","Schema for a valid `:database` ID, in the top-level 'outer' query. Either a positive integer (referring to an\n  actual Database), or the saved questions virtual ID, which is a placeholder used for queries using the\n  `:source-table \"card__id\"` shorthand for a source query resolved by middleware (since clients might not know the\n  actual DB for that source query.)"],"~$NumericExpressionArgOrInterval",["^ ","^5",["^ ","^7","metabase/mbql/schema.cljc","^8",587,"^9",16,"^:",587,"^;",46,"^?U",true],"^?U",true,"^10","^:1","^7","metabase/mbql/schema.cljc","^;",46,"^9",1,"^8",587,"^:",587,"^?8","^?D"],"~$ceil",["^ ","^?F",["^L",["^?L"]],"^5",["^ ","^?F",["^L",["^?L"]],"^7","metabase/mbql/schema.cljc","^;",54,"^?1","~:ceil","^9",50,"^8",643,"^:",643,"^?4",["^AE","~:x",["^1K",["^?6","^@D"]]],"^6","Schema for a valid ceil clause."],"^10","^5U","^7","metabase/mbql/schema.cljc","^;",54,"^?1","^AE","^9",1,"^8",643,"^:",643,"^?4",["^AE","~:x",["^1K",["^?6","^@D"]]],"^?8",["^L",["^?9","^?:","^?;","^?<","^?="]],"^6","Schema for a valid ceil clause."],"~$SourceQueryMetadata",["^ ","^5",["^ ","^7","metabase/mbql/schema.cljc","^8",1223,"^9",6,"^:",1223,"^;",25],"^10","^7=","^7","metabase/mbql/schema.cljc","^;",25,"^9",1,"^8",1223,"^:",1223,"^?8","~$cljs.core/IMap","^6","Schema for the expected keys for a single column in `:source-metadata` (`:source-metadata` is a sequence of these\n  entries), if it is passed in to the query.\n\n  This metadata automatically gets added for all source queries that are referenced via the `card__id` `:source-table`\n  form; for explicit `:source-query`s you should usually include this information yourself when specifying explicit\n  `:source-query`s."],"~$get-quarter",["^ ","^?F",["^L",["^?G"]],"^5",["^ ","^?F",["^L",["^?G"]],"^7","metabase/mbql/schema.cljc","^;",74,"^?1","~:get-quarter","^9",63,"^8",694,"^:",694,"^?3",true,"^?4",["^AI","^?I",["^1K",["^?6","^?J"]]],"^6","Schema for a valid get-quarter clause."],"^10","^6F","^7","metabase/mbql/schema.cljc","^;",74,"^?1","^AI","^9",1,"^8",694,"^:",694,"^?3",true,"^?4",["^AI","^?I",["^1K",["^?6","^?J"]]],"^?8",["^L",["^?9","^?:","^?;","^?<","^?="]],"^6","Schema for a valid get-quarter clause."],"~$valid-temporal-unit-for-base-type?",["^ ","~:protocol-inline",null,"^5",["^ ","^7","metabase/mbql/schema.cljc","^8",353,"^9",7,"^:",353,"^;",41,"~:arglists",["^1K",["^?6",["^1K",[[["^ ","~:keys",["~$base-type","~$temporal-unit"],"^1O","~$_field-options"]],["^AN","^AO"]]]]],"^6","Whether `temporal-unit` (e.g. `:day`) is valid for the given `base-type` (e.g. `:type/Date`). If either is `nil` this\n  will return truthy. Accepts either map of `field-options` or `base-type` and `temporal-unit` passed separately.","~:top-fn",["^ ","~:variadic?",false,"~:fixed-arity",2,"~:max-fixed-arity",2,"~:method-params",[[["^ ","^AM",["^AN","^AO"],"^1O","^AP"]],["^AN","^AO"]],"^AL",["^1K",[[["^ ","^AM",["^AN","^AO"],"^1O","^AP"]],["^AN","^AO"]]],"~:arglists-meta",["^1K",[null,null]]]],"^10","^7<","^7","metabase/mbql/schema.cljc","^;",41,"^AQ",["^ ","^AR",false,"^AS",2,"^AT",2,"^AU",[[["^ ","^AM",["^AN","^AO"],"^1O","^AP"]],["^AN","^AO"]],"^AL",["^1K",[[["^ ","^AM",["^AN","^AO"],"^1O","^AP"]],["^AN","^AO"]]],"^AV",["^1K",[null,null]]],"^AU",[[["^ ","^AM",["^AN","^AO"],"^1O","^AP"]],["^AN","^AO"]],"~:protocol-impl",null,"^AS",2,"^AV",["^1K",[null,null]],"^9",1,"^AR",false,"~:methods",[["^ ","^AS",1,"^AR",false,"^?8","^?;"],["^ ","^AS",2,"^AR",false,"^?8","~$boolean"]],"^8",353,"^:",353,"^AT",2,"~:fn-var",true,"^AL",["^1K",[[["^ ","^AM",["^AN","^AO"],"^1O","^AP"]],["^AN","^AO"]]],"^6","Whether `temporal-unit` (e.g. `:day`) is valid for the given `base-type` (e.g. `:type/Date`). If either is `nil` this\n  will return truthy. Accepts either map of `field-options` or `base-type` and `temporal-unit` passed separately."],"~$starts-with",["^ ","^5",["^ ","^7","metabase/mbql/schema.cljc","^8",843,"^9",12,"^:",843,"^;",23,"^?1","~:starts-with","^?4",["^B0","^?5",["^1K",["^?6","^?O"]],"^@7",["^1K",["^?6","^?O"]],"^@8",["^1K",["^?6",["^1K",["^@9","^@:"]]]]],"^6","Schema for a valid starts-with clause."],"^10","^4F","^7","metabase/mbql/schema.cljc","^;",23,"^?1","^B0","^9",1,"^8",843,"^:",843,"^?4",["^B0","^?5",["^1K",["^?6","^?O"]],"^@7",["^1K",["^?6","^?O"]],"^@8",["^1K",["^?6",["^1K",["^@9","^@:"]]]]],"^?8",["^L",["^?9","^?:","^?;","^?<","^?="]],"^6","Schema for a valid starts-with clause."],"~$DateUnit",["^ ","^5",["^ ","^7","metabase/mbql/schema.cljc","^8",69,"^9",6,"^:",69,"^;",14],"^10","^6J","^7","metabase/mbql/schema.cljc","^;",14,"^9",1,"^8",69,"^:",69,"^?8","^?W","^6","Valid unit for *date* bucketing."],"~$TemplateTag",["^ ","^5",["^ ","^7","metabase/mbql/schema.cljc","^8",1179,"^9",6,"^:",1179,"^;",17],"^10","^6<","^7","metabase/mbql/schema.cljc","^;",17,"^9",1,"^8",1179,"^:",1179,"^?8","^?D","^6","Schema for a template tag as specified in a native query. There are four types of template tags, differentiated by\n  `:type` (see comments above)."],"^M",["^ ","^5",["^ ","^7","metabase/mbql/schema.cljc","^8",816,"^9",12,"^:",816,"^;",14,"^?1","~:<=","^?4",["^B3","^?5",["^1K",["^?6","^@G"]],"^@<",["^1K",["^?6","^@G"]]],"^6","Schema for a valid <= clause."],"^10","^2?","^7","metabase/mbql/schema.cljc","^;",14,"^?1","^B3","^9",1,"^8",816,"^:",816,"^?4",["^B3","^?5",["^1K",["^?6","^@G"]],"^@<",["^1K",["^?6","^@G"]]],"^?8",["^L",["^?9","^?:","^?;","^?<","^?="]],"^6","Schema for a valid <= clause."],"~$upper",["^ ","^?F",["^L",["^?L"]],"^5",["^ ","^?F",["^L",["^?L"]],"^7","metabase/mbql/schema.cljc","^;",55,"^?1","~:upper","^9",50,"^8",615,"^:",615,"^?4",["^B5","~:s",["^1K",["^?6","^?O"]]],"^6","Schema for a valid upper clause."],"^10","^72","^7","metabase/mbql/schema.cljc","^;",55,"^?1","^B5","^9",1,"^8",615,"^:",615,"^?4",["^B5","~:s",["^1K",["^?6","^?O"]]],"^?8",["^L",["^?9","^?:","^?;","^?<","^?="]],"^6","Schema for a valid upper clause."],"~$can-parse-date?",["^ ","^5",["^ ","^7","metabase/mbql/schema.cljc","^8",146,"^9",26,"^:",146,"^;",41,"^AL",["^1K",["^?6",["^1K",[["~$s"]]]]]],"^10","^6X","^7","metabase/mbql/schema.cljc","^;",41,"^9",1,"^8",146,"^:",146,"^AL",["^1K",["^?6",["^1K",[["~$s"]]]]],"^6","Returns whether a string can be parsed to an ISO 8601 date or not."],"~$*",["^ ","^?F",["^L",["^?L"]],"^5",["^ ","^?F",["^L",["^?L"]],"^7","metabase/mbql/schema.cljc","^;",51,"^?1","~:*","^9",50,"^8",638,"^:",638,"^?4",["~:*","~:x",["^1K",["^?6","^@D"]],"~:y",["^1K",["^?6","^@D"]],"~:more",["^1K",["^?6",["^1K",["^@>","^@D"]]]]],"^6","Schema for a valid * clause."],"^10","^2C","^7","metabase/mbql/schema.cljc","^;",51,"^?1","~:*","^9",1,"^8",638,"^:",638,"^?4",["~:*","~:x",["^1K",["^?6","^@D"]],"~:y",["^1K",["^?6","^@D"]],"^B7",["^1K",["^?6",["^1K",["^@>","^@D"]]]]],"^?8",["^L",["^?9","^?:","^?;","^?<","^?="]],"^6","Schema for a valid * clause."],"^N",["^ ","^?F",["^L",["^A2"]],"^5",["^ ","^?F",["^L",["^A2"]],"^7","metabase/mbql/schema.cljc","^;",60,"^?1","~:min","^9",57,"^8",959,"^:",959,"^?4",["^B8","^?Z",["^1K",["^?6","^?["]]],"^6","Schema for a valid min clause."],"^10","^2=","^7","metabase/mbql/schema.cljc","^;",60,"^?1","^B8","^9",1,"^8",959,"^:",959,"^?4",["^B8","^?Z",["^1K",["^?6","^?["]]],"^?8",["^L",["^?9","^?:","^?;","^?<","^?="]],"^6","Schema for a valid min clause."],"~$inside",["^ ","^5",["^ ","^7","metabase/mbql/schema.cljc","^;",26,"^?1","~:inside","^9",20,"^8",823,"^:",823,"^?3",true,"^?4",["^B:","~:lat-field",["^1K",["^?6","^@G"]],"~:lon-field",["^1K",["^?6","^@G"]],"~:lat-max",["^1K",["^?6","^@G"]],"~:lon-min",["^1K",["^?6","^@G"]],"~:lat-min",["^1K",["^?6","^@G"]],"~:lon-max",["^1K",["^?6","^@G"]]],"^6","Schema for a valid inside clause."],"^10","^3M","^7","metabase/mbql/schema.cljc","^;",26,"^?1","^B:","^9",1,"^8",823,"^:",823,"^?3",true,"^?4",["^B:","^B;",["^1K",["^?6","^@G"]],"^B<",["^1K",["^?6","^@G"]],"^B=",["^1K",["^?6","^@G"]],"^B>",["^1K",["^?6","^@G"]],"^B?",["^1K",["^?6","^@G"]],"^B@",["^1K",["^?6","^@G"]]],"^?8",["^L",["^?9","^?:","^?;","^?<","^?="]],"^6","Schema for a valid inside clause."],"~$ValueTypeInfo",["^ ","^5",["^ ","^7","metabase/mbql/schema.cljc","^8",289,"^9",6,"^:",289,"^;",19],"^10","^3>","^7","metabase/mbql/schema.cljc","^;",19,"^9",1,"^8",289,"^:",289,"^?8","^AG","^6","Type info about a value in a `:value` clause. Added automatically by `wrap-value-literals` middleware to values in\n  filter clauses based on the Field in the clause."],"^@4",["^ ","^5",["^ ","^7","metabase/mbql/schema.cljc","^8",113,"^9",6,"^:",113,"^;",23],"^10","^75","^7","metabase/mbql/schema.cljc","^;",23,"^9",1,"^8",113,"^:",113,"^?8","^?W","^6","Valid units for a datetime-diff clause."],"~$TimeLiteral",["^ ","^5",["^ ","^7","metabase/mbql/schema.cljc","^8",256,"^9",16,"^:",256,"^;",27,"^?U",true],"^?U",true,"^10","^3R","^7","metabase/mbql/schema.cljc","^;",27,"^9",1,"^8",256,"^:",256,"^?8","^?D","^6","Schema for valid time literals."],"~$LiteralTimeString",["^ ","^5",["^ ","^7","metabase/mbql/schema.cljc","^8",169,"^9",6,"^:",169,"^;",23],"^10","^3S","^7","metabase/mbql/schema.cljc","^;",23,"^9",1,"^8",169,"^:",169,"^?8","^@F","^6","Schema for an ISO-8601-formatted time string literal."],"~$TemporalLiteral",["^ ","^5",["^ ","^7","metabase/mbql/schema.cljc","^8",277,"^9",16,"^:",277,"^;",31,"^?U",true],"^?U",true,"^10","^3U","^7","metabase/mbql/schema.cljc","^;",31,"^9",1,"^8",277,"^:",277,"^?8","^@T","^6","Schema for valid temporal literals."],"~$ltrim",["^ ","^?F",["^L",["^?L"]],"^5",["^ ","^?F",["^L",["^?L"]],"^7","metabase/mbql/schema.cljc","^;",55,"^?1","~:ltrim","^9",50,"^8",612,"^:",612,"^?4",["^BF","~:s",["^1K",["^?6","^?O"]]],"^6","Schema for a valid ltrim clause."],"^10","^3K","^7","metabase/mbql/schema.cljc","^;",55,"^?1","^BF","^9",1,"^8",612,"^:",612,"^?4",["^BF","~:s",["^1K",["^?6","^?O"]]],"^?8",["^L",["^?9","^?:","^?;","^?<","^?="]],"^6","Schema for a valid ltrim clause."],"~$variable",["^ ","^5",["^ ","^7","metabase/mbql/schema.cljc","^8",1560,"^9",12,"^:",1560,"^;",20,"^?1","~:variable","^?4",["^BH","~:target",["^1K",["^?6","~$template-tag"]]],"^6","Schema for a valid variable clause."],"^10","^6P","^7","metabase/mbql/schema.cljc","^;",20,"^?1","^BH","^9",1,"^8",1560,"^:",1560,"^?4",["^BH","^BI",["^1K",["^?6","^BJ"]]],"^?8",["^L",["^?9","^?:","^?;","^?<","^?="]],"^6","Schema for a valid variable clause."],"~$desc",["^ ","^5",["^ ","^7","metabase/mbql/schema.cljc","^8",1034,"^9",12,"^:",1034,"^;",16,"^?1","~:desc","^?4",["^BL","^?5",["^1K",["^?6","^?C"]]],"^6","Schema for a valid desc clause."],"^10","^6:","^7","metabase/mbql/schema.cljc","^;",16,"^?1","^BL","^9",1,"^8",1034,"^:",1034,"^?4",["^BL","^?5",["^1K",["^?6","^?C"]]],"^?8",["^L",["^?9","^?:","^?;","^?<","^?="]],"^6","Schema for a valid desc clause."],"~$contains",["^ ","^5",["^ ","^7","metabase/mbql/schema.cljc","^8",845,"^9",12,"^:",845,"^;",20,"^?1","~:contains","^?4",["^BN","^?5",["^1K",["^?6","^?O"]],"^@7",["^1K",["^?6","^?O"]],"^@8",["^1K",["^?6",["^1K",["^@9","^@:"]]]]],"^6","Schema for a valid contains clause."],"^10","^6D","^7","metabase/mbql/schema.cljc","^;",20,"^?1","^BN","^9",1,"^8",845,"^:",845,"^?4",["^BN","^?5",["^1K",["^?6","^?O"]],"^@7",["^1K",["^?6","^?O"]],"^@8",["^1K",["^?6",["^1K",["^@9","^@:"]]]]],"^?8",["^L",["^?9","^?:","^?;","^?<","^?="]],"^6","Schema for a valid contains clause."],"~$validate-bin-width",["^ ","^AK",null,"^5",["^ ","^7","metabase/mbql/schema.cljc","^8",326,"^9",8,"^:",326,"^;",26,"^?U",true,"^AL",["^1K",["^?6",["^1K",[["~$schema"]]]]]],"^?U",true,"^10","^71","^7","metabase/mbql/schema.cljc","^;",26,"^AU",["^1K",[["^BP"]]],"^AW",null,"^AV",["^1K",[null,null]],"^9",1,"^AR",false,"^8",326,"~:ret-tag","^@F","^:",326,"^AT",1,"^AZ",true,"^AL",["^1K",["^?6",["^1K",[["^BP"]]]]]],"^@:",["^ ","^5",["^ ","^7","metabase/mbql/schema.cljc","^8",840,"^9",16,"^:",840,"^;",35,"^?U",true],"^?U",true,"^10","^6Y","^7","metabase/mbql/schema.cljc","^;",35,"^9",1,"^8",840,"^:",840,"^?8","^AG"],"~$expression",["^ ","^?F",["^L",["^?L"]],"^5",["^ ","^?F",["^L",["^?L"]],"^7","metabase/mbql/schema.cljc","^;",60,"^?1","~:expression","^9",50,"^8",318,"^:",318,"^?4",["^BS","~:expression-name",["^1K",["^?6","^@O"]],"^@8",["^1K",["^?6",["^1K",["^@9",["^1K",["~$s/pred","~$map?","map"]]]]]]],"^6","Schema for a valid expression clause."],"^10","^6?","^7","metabase/mbql/schema.cljc","^;",60,"^?1","^BS","^9",1,"^8",318,"^:",318,"^?4",["^BS","^BT",["^1K",["^?6","^@O"]],"^@8",["^1K",["^?6",["^1K",["^@9",["^1K",["^BU","^BV","map"]]]]]]],"^?8",["^L",["^?9","^?:","^?;","^?<","^?="]],"^6","Schema for a valid expression clause."],"~$is-empty",["^ ","^5",["^ ","^7","metabase/mbql/schema.cljc","^;",28,"^?1","~:is-empty","^9",20,"^8",837,"^:",837,"^?3",true,"^?4",["^BX","^?5",["^1K",["^?6","^?7"]]],"^6","Schema for a valid is-empty clause."],"^10","^2W","^7","metabase/mbql/schema.cljc","^;",28,"^?1","^BX","^9",1,"^8",837,"^:",837,"^?3",true,"^?4",["^BX","^?5",["^1K",["^?6","^?7"]]],"^?8",["^L",["^?9","^?:","^?;","^?<","^?="]],"^6","Schema for a valid is-empty clause."],"~$substring",["^ ","^?F",["^L",["^?L"]],"^5",["^ ","^?F",["^L",["^?L"]],"^7","metabase/mbql/schema.cljc","^;",59,"^?1","~:substring","^9",50,"^8",600,"^:",600,"^?4",["^BZ","~:s",["^1K",["^?6","^?O"]],"~:start",["^1K",["^?6","~$IntGreaterThanZeroOrNumericExpression"]],"~:length",["^1K",["^?6",["^1K",["^@9","^@D"]]]]],"^6","Schema for a valid substring clause."],"^10","^74","^7","metabase/mbql/schema.cljc","^;",59,"^?1","^BZ","^9",1,"^8",600,"^:",600,"^?4",["^BZ","~:s",["^1K",["^?6","^?O"]],"^B[",["^1K",["^?6","^C0"]],"^C1",["^1K",["^?6",["^1K",["^@9","^@D"]]]]],"^?8",["^L",["^?9","^?:","^?;","^?<","^?="]],"^6","Schema for a valid substring clause."],"~$DatetimeExpression*",["^ ","^5",["^ ","^7","metabase/mbql/schema.cljc","^8",741,"^9",16,"^:",741,"^;",35,"^?U",true],"^?U",true,"^10","^6B","^7","metabase/mbql/schema.cljc","^;",35,"^9",1,"^8",741,"^:",741,"^?8","^?W"],"~$Filter",["^ ","^5",["^ ","^7","metabase/mbql/schema.cljc","^8",905,"^9",6,"^:",905,"^;",12],"^10","^87","^7","metabase/mbql/schema.cljc","^;",12,"^9",1,"^8",905,"^:",905,"^?8","^?S","^6","Schema for a valid MBQL `:filter` clause."],"~$stddev",["^ ","^?F",["^L",["~:standard-deviation-aggregations"]],"^5",["^ ","^?F",["^L",["^C5"]],"^7","metabase/mbql/schema.cljc","^;",76,"^?1","~:stddev","^9",70,"^8",971,"^:",971,"^?4",["^C6","^?Z",["^1K",["^?6","^?["]]],"^6","Schema for a valid stddev clause."],"^10","^7N","^7","metabase/mbql/schema.cljc","^;",76,"^?1","^C6","^9",1,"^8",971,"^:",971,"^?4",["^C6","^?Z",["^1K",["^?6","^?["]]],"^?8",["^L",["^?9","^?:","^?;","^?<","^?="]],"^6","Schema for a valid stddev clause."],"~$now",["^ ","^?F",["^L",["~:now"]],"^5",["^ ","^?F",["^L",["^C8"]],"^7","metabase/mbql/schema.cljc","^;",45,"^?1","^C8","^9",42,"^8",734,"^:",734,"^?4",["^C8"],"^6","Schema for a valid now clause."],"^10","^8;","^7","metabase/mbql/schema.cljc","^;",45,"^?1","^C8","^9",1,"^8",734,"^:",734,"^?4",["^C8"],"^?8",["^L",["^?9","^?:","^?;","^?<","^?="]],"^6","Schema for a valid now clause."],"~$can-parse-time?",["^ ","^5",["^ ","^7","metabase/mbql/schema.cljc","^8",156,"^9",26,"^:",156,"^;",41,"^AL",["^1K",["^?6",["^1K",[["~$s"]]]]]],"^10","^5?","^7","metabase/mbql/schema.cljc","^;",41,"^9",1,"^8",156,"^:",156,"^AL",["^1K",["^?6",["^1K",[["~$s"]]]]],"^6","Returns whether a string can be parsed to an ISO 8601 time or not."],"~$temporal-extract",["^ ","^?F",["^L",["^?G"]],"^5",["^ ","^?F",["^L",["^?G"]],"^7","metabase/mbql/schema.cljc","^;",71,"^?1","^?G","^9",55,"^8",685,"^:",685,"^?4",["^?G","~:datetime",["^1K",["^?6","^?J"]],"^?A",["^1K",["^?6","~$TemporalExtractUnits"]],"~:mode",["^1K",["^?6",["^1K",["^@9","~$ExtractWeekModes"]]]]],"^6","Schema for a valid temporal-extract clause."],"^10","^8<","^7","metabase/mbql/schema.cljc","^;",71,"^?1","^?G","^9",1,"^8",685,"^:",685,"^?4",["^?G","^C;",["^1K",["^?6","^?J"]],"^?A",["^1K",["^?6","^C<"]],"^C=",["^1K",["^?6",["^1K",["^@9","^C>"]]]]],"^?8",["^L",["^?9","^?:","^?;","^?<","^?="]],"^6","Schema for a valid temporal-extract clause."],"~$AggregationOptions",["^ ","^5",["^ ","^7","metabase/mbql/schema.cljc","^8",1006,"^9",6,"^:",1006,"^;",24],"^10","^7T","^7","metabase/mbql/schema.cljc","^;",24,"^9",1,"^8",1006,"^:",1006,"^?8","^AG","^6","Additional options for any aggregation clause when wrapping it in `:aggregation-options`."],"~$>",["^ ","^5",["^ ","^7","metabase/mbql/schema.cljc","^8",815,"^9",12,"^:",815,"^;",13,"^?1","~:>","^?4",["~:>","^?5",["^1K",["^?6","^@G"]],"^@<",["^1K",["^?6","^@G"]]],"^6","Schema for a valid > clause."],"^10","^7W","^7","metabase/mbql/schema.cljc","^;",13,"^?1","~:>","^9",1,"^8",815,"^:",815,"^?4",["~:>","^?5",["^1K",["^?6","^@G"]],"^@<",["^1K",["^?6","^@G"]]],"^?8",["^L",["^?9","^?:","^?;","^?<","^?="]],"^6","Schema for a valid > clause."],"^O",["^ ","^?F",["^L",["^?L"]],"^5",["^ ","^?F",["^L",["^?L"]],"^7","metabase/mbql/schema.cljc","^;",57,"^?1","~:replace","^9",50,"^8",621,"^:",621,"^?4",["^C@","~:s",["^1K",["^?6","^?O"]],"~:match",["^1K",["^?6","^?Q"]],"~:replacement",["^1K",["^?6","^?Q"]]],"^6","Schema for a valid replace clause."],"^10","^52","^7","metabase/mbql/schema.cljc","^;",57,"^?1","^C@","^9",1,"^8",621,"^:",621,"^?4",["^C@","~:s",["^1K",["^?6","^?O"]],"^CA",["^1K",["^?6","^?Q"]],"^CB",["^1K",["^?6","^?Q"]]],"^?8",["^L",["^?9","^?:","^?;","^?<","^?="]],"^6","Schema for a valid replace clause."],"~$SourceQuery",["^ ","^5",["^ ","^7","metabase/mbql/schema.cljc","^8",1214,"^9",6,"^:",1214,"^;",17],"^10","^88","^7","metabase/mbql/schema.cljc","^;",17,"^9",1,"^8",1214,"^:",1214,"^?8","^?D","^6","Schema for a valid value for a `:source-query` clause."],"~$WidgetType",["^ ","^5",["^ ","^7","metabase/mbql/schema.cljc","^8",1524,"^9",6,"^:",1524,"^;",16],"^10","^4?","^7","metabase/mbql/schema.cljc","^;",16,"^9",1,"^8",1524,"^:",1524,"^?8","^?;","^6","Schema for valid values of `:widget-type` for a [[TemplateTag:FieldFilter]]."],"^C>",["^ ","^5",["^ ","^7","metabase/mbql/schema.cljc","^8",119,"^9",6,"^:",119,"^;",22],"^10","^4V","^7","metabase/mbql/schema.cljc","^;",22,"^9",1,"^8",119,"^:",119,"^?8","^?W","^6","Valid modes to extract weeks."],"~$sqrt",["^ ","^?F",["^L",["^@B"]],"^5",["^ ","^?F",["^L",["^@B"]],"^7","metabase/mbql/schema.cljc","^;",68,"^?1","~:sqrt","^9",64,"^8",655,"^:",655,"^?4",["^CF","~:x",["^1K",["^?6","^@D"]]],"^6","Schema for a valid sqrt clause."],"^10","^47","^7","metabase/mbql/schema.cljc","^;",68,"^?1","^CF","^9",1,"^8",655,"^:",655,"^?4",["^CF","~:x",["^1K",["^?6","^@D"]]],"^?8",["^L",["^?9","^?:","^?;","^?<","^?="]],"^6","Schema for a valid sqrt clause."],"~$no-binning-options-at-top-level",["^ ","^AK",null,"^5",["^ ","^7","metabase/mbql/schema.cljc","^8",377,"^9",8,"^:",377,"^;",39,"^?U",true,"^AL",["^1K",["^?6",["^1K",[["^BP"]]]]]],"^?U",true,"^10","^4[","^7","metabase/mbql/schema.cljc","^;",39,"^AU",["^1K",[["^BP"]]],"^AW",null,"^AV",["^1K",[null,null]],"^9",1,"^AR",false,"^8",377,"^BQ","^@F","^:",377,"^AT",1,"^AZ",true,"^AL",["^1K",["^?6",["^1K",[["^BP"]]]]]],"~$convert-timezone",["^ ","^?F",["^L",["~:convert-timezone"]],"^5",["^ ","^?F",["^L",["^CI"]],"^7","metabase/mbql/schema.cljc","^;",71,"^?1","^CI","^9",55,"^8",719,"^:",719,"^?4",["^CI","^C;",["^1K",["^?6","^?J"]],"~:to",["^1K",["^?6","^@@"]],"~:from",["^1K",["^?6",["^1K",["^@9","^@@"]]]]],"^6","Schema for a valid convert-timezone clause."],"^10","^4Z","^7","metabase/mbql/schema.cljc","^;",71,"^?1","^CI","^9",1,"^8",719,"^:",719,"^?4",["^CI","^C;",["^1K",["^?6","^?J"]],"^CJ",["^1K",["^?6","^@@"]],"^CK",["^1K",["^?6",["^1K",["^@9","^@@"]]]]],"^?8",["^L",["^?9","^?:","^?;","^?<","^?="]],"^6","Schema for a valid convert-timezone clause."],"~$get-minute",["^ ","^?F",["^L",["^?G"]],"^5",["^ ","^?F",["^L",["^?G"]],"^7","metabase/mbql/schema.cljc","^;",73,"^?1","~:get-minute","^9",63,"^8",713,"^:",713,"^?3",true,"^?4",["^CM","^C;",["^1K",["^?6","^?J"]]],"^6","Schema for a valid get-minute clause."],"^10","^4C","^7","metabase/mbql/schema.cljc","^;",73,"^?1","^CM","^9",1,"^8",713,"^:",713,"^?3",true,"^?4",["^CM","^C;",["^1K",["^?6","^?J"]]],"^?8",["^L",["^?9","^?:","^?;","^?<","^?="]],"^6","Schema for a valid get-minute clause."],"^P",["^ ","^?F",["^L",["^?L"]],"^5",["^ ","^?F",["^L",["^?L"]],"^7","metabase/mbql/schema.cljc","^;",56,"^?1","~:concat","^9",50,"^8",624,"^:",624,"^?4",["^CN","~:a",["^1K",["^?6","^?O"]],"~:b",["^1K",["^?6","^?O"]],"^B7",["^1K",["^?6",["^1K",["^@>","^?O"]]]]],"^6","Schema for a valid concat clause."],"^10","^40","^7","metabase/mbql/schema.cljc","^;",56,"^?1","^CN","^9",1,"^8",624,"^:",624,"^?4",["^CN","~:a",["^1K",["^?6","^?O"]],"~:b",["^1K",["^?6","^?O"]],"^B7",["^1K",["^?6",["^1K",["^@>","^?O"]]]]],"^?8",["^L",["^?9","^?:","^?;","^?<","^?="]],"^6","Schema for a valid concat clause."],"~$count-where",["^ ","^?F",["^L",["^A2"]],"^5",["^ ","^?F",["^L",["^A2"]],"^7","metabase/mbql/schema.cljc","^;",68,"^?1","~:count-where","^9",57,"^8",965,"^:",965,"^?4",["^CP","~:pred",["^1K",["^?6","^C3"]]],"^6","Schema for a valid count-where clause."],"^10","^7X","^7","metabase/mbql/schema.cljc","^;",68,"^?1","^CP","^9",1,"^8",965,"^:",965,"^?4",["^CP","^CQ",["^1K",["^?6","^C3"]]],"^?8",["^L",["^?9","^?:","^?;","^?<","^?="]],"^6","Schema for a valid count-where clause."],"~$StringExpression",["^ ","^5",["^ ","^7","metabase/mbql/schema.cljc","^8",750,"^9",16,"^:",750,"^;",32,"^?U",true],"^?U",true,"^10","^4J","^7","metabase/mbql/schema.cljc","^;",32,"^9",1,"^8",750,"^:",750,"^?8","^?S","^6","Schema for the definition of an string expression."],"~$TemplateTag:Snippet",["^ ","^5",["^ ","^7","metabase/mbql/schema.cljc","^8",1097,"^9",6,"^:",1097,"^;",25],"^10","^3X","^7","metabase/mbql/schema.cljc","^;",25,"^9",1,"^8",1097,"^:",1097,"^?8",["^L",["^?;","^?="]],"^6","Schema for a native query snippet template tag."],"~$datetime-bucketing-units",["^ ","^5",["^ ","^7","metabase/mbql/schema.cljc","^8",65,"^9",6,"^:",65,"^;",30],"^10","^3[","^7","metabase/mbql/schema.cljc","^;",30,"^9",1,"^8",65,"^:",65,"^?8",["^L",[null,"^?;"]],"^6","Set of valid units for bucketing or comparing against a *datetime* Field."],"^?7",["^ ","^5",["^ ","^7","metabase/mbql/schema.cljc","^8",449,"^9",6,"^:",449,"^;",11],"^10","^7L","^7","metabase/mbql/schema.cljc","^;",11,"^9",1,"^8",449,"^:",449,"^?8","^?S","^6","Schema for either a `:field` clause (reference to a Field) or an `:expression` clause (reference to an expression)."],"~$DateTimeValue",["^ ","^5",["^ ","^7","metabase/mbql/schema.cljc","^8",281,"^9",6,"^:",281,"^;",19],"^10","^4O","^7","metabase/mbql/schema.cljc","^;",19,"^9",1,"^8",281,"^:",281,"^?8","^?W","^6","Schema for a datetime value drivers will personally have to handle, either an `absolute-datetime` form or a\n  `relative-datetime` form."],"~$validate-temporal-unit",["^ ","^AK",null,"^5",["^ ","^7","metabase/mbql/schema.cljc","^8",369,"^9",8,"^:",369,"^;",30,"^?U",true,"^AL",["^1K",["^?6",["^1K",[["^BP"]]]]]],"^?U",true,"^10","^8K","^7","metabase/mbql/schema.cljc","^;",30,"^AU",["^1K",[["^BP"]]],"^AW",null,"^AV",["^1K",[null,null]],"^9",1,"^AR",false,"^8",369,"^BQ","^@F","^:",369,"^AT",1,"^AZ",true,"^AL",["^1K",["^?6",["^1K",[["^BP"]]]]]],"~$-",["^ ","^?F",["^L",["^?L"]],"^5",["^ ","^?F",["^L",["^?L"]],"^7","metabase/mbql/schema.cljc","^;",51,"^?1","~:-","^9",50,"^8",633,"^:",633,"^?4",["~:-","~:x",["^1K",["^?6","^@D"]],"~:y",["^1K",["^?6","^AC"]],"^B7",["^1K",["^?6",["^1K",["^@>","^AC"]]]]],"^6","Schema for a valid - clause."],"^10","^8R","^7","metabase/mbql/schema.cljc","^;",51,"^?1","~:-","^9",1,"^8",633,"^:",633,"^?4",["~:-","~:x",["^1K",["^?6","^@D"]],"~:y",["^1K",["^?6","^AC"]],"^B7",["^1K",["^?6",["^1K",["^@>","^AC"]]]]],"^?8",["^L",["^?9","^?:","^?;","^?<","^?="]],"^6","Schema for a valid - clause."],"~$asc",["^ ","^5",["^ ","^7","metabase/mbql/schema.cljc","^8",1033,"^9",12,"^:",1033,"^;",15,"^?1","~:asc","^?4",["^CX","^?5",["^1K",["^?6","^?C"]]],"^6","Schema for a valid asc clause."],"^10","^66","^7","metabase/mbql/schema.cljc","^;",15,"^?1","^CX","^9",1,"^8",1033,"^:",1033,"^?4",["^CX","^?5",["^1K",["^?6","^?C"]]],"^?8",["^L",["^?9","^?:","^?;","^?<","^?="]],"^6","Schema for a valid asc clause."],"~$cum-count",["^ ","^?F",["^L",["^A2"]],"^5",["^ ","^?F",["^L",["^A2"]],"^7","metabase/mbql/schema.cljc","^;",74,"^?1","~:cum-count","^9",65,"^8",945,"^:",945,"^?3",true,"^?4",["^CZ","^?5",["^1K",["^?6",["^1K",["^@9","^?7"]]]]],"^6","Schema for a valid cum-count clause."],"^10","^67","^7","metabase/mbql/schema.cljc","^;",74,"^?1","^CZ","^9",1,"^8",945,"^:",945,"^?3",true,"^?4",["^CZ","^?5",["^1K",["^?6",["^1K",["^@9","^?7"]]]]],"^?8",["^L",["^?9","^?:","^?;","^?<","^?="]],"^6","Schema for a valid cum-count clause."],"~$value",["^ ","^5",["^ ","^7","metabase/mbql/schema.cljc","^;",28,"^?1","~:value","^9",23,"~:internal",true,"^8",306,"^:",306,"^?4",["^D0","^D0",["^1K",["^?6","~$s/Any"]],"~:type-info",["^1K",["^?6",["^1K",["~$s/maybe","^BA"]]]]],"^6","Schema for a valid value clause."],"^10","^4U","^7","metabase/mbql/schema.cljc","^;",28,"^?1","^D0","^9",1,"^D1",true,"^8",306,"^:",306,"^?4",["^D0","^D0",["^1K",["^?6","^D2"]],"^D3",["^1K",["^?6",["^1K",["^D4","^BA"]]]]],"^?8",["^L",["^?9","^?:","^?;","^?<","^?="]],"^6","Schema for a valid value clause."],"^Q",["^ ","^5",["^ ","^7","metabase/mbql/schema.cljc","^8",763,"^9",12,"^:",763,"^;",14,"^?1","~:or","^?4",["^D5","~:first-clause",["^1K",["^?6",["^1K",["~$s/recursive",["^1K",["~$var","^C3"]]]]]],"~:second-clause",["^1K",["^?6",["^1K",["^D7",["^1K",["^D8","^C3"]]]]]],"~:other-clauses",["^1K",["^?6",["^1K",["^@>",["^1K",["^D7",["^1K",["^D8","^C3"]]]]]]]]],"^6","Schema for a valid or clause."],"^10","^4W","^7","metabase/mbql/schema.cljc","^;",14,"^?1","^D5","^9",1,"^8",763,"^:",763,"^?4",["^D5","^D6",["^1K",["^?6",["^1K",["^D7",["^1K",["^D8","^C3"]]]]]],"^D9",["^1K",["^?6",["^1K",["^D7",["^1K",["^D8","^C3"]]]]]],"^D:",["^1K",["^?6",["^1K",["^@>",["^1K",["^D7",["^1K",["^D8","^C3"]]]]]]]]],"^?8",["^L",["^?9","^?:","^?;","^?<","^?="]],"^6","Schema for a valid or clause."],"~$date-bucketing-units",["^ ","^5",["^ ","^7","metabase/mbql/schema.cljc","^8",56,"^9",6,"^:",56,"^;",26],"^10","^63","^7","metabase/mbql/schema.cljc","^;",26,"^9",1,"^8",56,"^:",56,"^?8","^A5","^6","Set of valid units for bucketing or comparing against a *date* Field."],"~$OrderBy",["^ ","^5",["^ ","^7","metabase/mbql/schema.cljc","^8",1036,"^9",6,"^:",1036,"^;",13],"^10","^9>","^7","metabase/mbql/schema.cljc","^;",13,"^9",1,"^8",1036,"^:",1036,"^?8","^?W","^6","Schema for an `order-by` clause subclause."],"~$exp",["^ ","^?F",["^L",["^@B"]],"^5",["^ ","^?F",["^L",["^@B"]],"^7","metabase/mbql/schema.cljc","^;",67,"^?1","~:exp","^9",64,"^8",658,"^:",658,"^?4",["^D>","~:x",["^1K",["^?6","^@D"]]],"^6","Schema for a valid exp clause."],"^10","^4Q","^7","metabase/mbql/schema.cljc","^;",67,"^?1","^D>","^9",1,"^8",658,"^:",658,"^?4",["^D>","~:x",["^1K",["^?6","^@D"]]],"^?8",["^L",["^?9","^?:","^?;","^?<","^?="]],"^6","Schema for a valid exp clause."],"~$NumericExpression*",["^ ","^5",["^ ","^7","metabase/mbql/schema.cljc","^8",919,"^9",16,"^:",919,"^;",34,"^?U",true],"^?U",true,"^10","^8W","^7","metabase/mbql/schema.cljc","^;",34,"^9",1,"^8",919,"^:",919,"^?8","^?W"],"~$UnnamedAggregation",["^ ","^5",["^ ","^7","metabase/mbql/schema.cljc","^8",1003,"^9",16,"^:",1003,"^;",34,"^?U",true],"^?U",true,"^10","^5T","^7","metabase/mbql/schema.cljc","^;",34,"^9",1,"^8",1003,"^:",1003,"^?8","^?S"],"^R",["^ ","^5",["^ ","^7","metabase/mbql/schema.cljc","^;",27,"^?1","~:time","^9",23,"^D1",true,"^8",225,"^:",225,"^?4",["^DA","^DA",["^1K",["^?6","^3N"]],"^?A",["^1K",["^?6","~$TimeUnit"]]],"^6","Schema for a valid time clause."],"^10","^8F","^7","metabase/mbql/schema.cljc","^;",27,"^?1","^DA","^9",1,"^D1",true,"^8",225,"^:",225,"^?4",["^DA","^DA",["^1K",["^?6","^3N"]],"^?A",["^1K",["^?6","^DB"]]],"^?8",["^L",["^?9","^?:","^?;","^?<","^?="]],"^6","Schema for a valid time clause."],"~$can-parse-iso-8601?",["^ ","^AK",null,"^5",["^ ","^7","metabase/mbql/schema.cljc","^8",141,"^9",11,"^:",141,"^;",30,"^?U",true,"^AL",["^1K",["^?6",["^1K",[["~$s"]]]]]],"^?U",true,"^10","^5M","^7","metabase/mbql/schema.cljc","^;",30,"^AU",["^1K",[["~$s"]]],"^AW",null,"^AV",["^1K",[null,null]],"^9",4,"^AR",false,"^8",141,"^BQ",["^L",["^AY","^?="]],"^:",141,"^AT",1,"^AZ",true,"^AL",["^1K",["^?6",["^1K",[["~$s"]]]]]],"~$get-week",["^ ","^?F",["^L",["^?G"]],"^5",["^ ","^?F",["^L",["^?G"]],"^7","metabase/mbql/schema.cljc","^;",71,"^?1","~:get-week","^9",63,"^8",700,"^:",700,"^?3",true,"^?4",["^DE","^?I",["^1K",["^?6","^?J"]],"^C=",["^1K",["^?6",["^1K",["^@9","^C>"]]]]],"^6","Schema for a valid get-week clause."],"^10","^5N","^7","metabase/mbql/schema.cljc","^;",71,"^?1","^DE","^9",1,"^8",700,"^:",700,"^?3",true,"^?4",["^DE","^?I",["^1K",["^?6","^?J"]],"^C=",["^1K",["^?6",["^1K",["^@9","^C>"]]]]],"^?8",["^L",["^?9","^?:","^?;","^?<","^?="]],"^6","Schema for a valid get-week clause."],"~$JoinStrategy",["^ ","^5",["^ ","^7","metabase/mbql/schema.cljc","^8",1253,"^9",6,"^:",1253,"^;",18],"^10","^95","^7","metabase/mbql/schema.cljc","^;",18,"^9",1,"^8",1253,"^:",1253,"^?8","^?;","^6","Strategy that should be used to perform the equivalent of a SQL `JOIN` against another table or a nested query.\n  These correspond 1:1 to features of the same name in driver features lists; e.g. you should check that the current\n  driver supports `:full-join` before generating a Join clause using that strategy."],"~$TemplateTag:FieldFilter",["^ ","^5",["^ ","^7","metabase/mbql/schema.cljc","^8",1140,"^9",6,"^:",1140,"^;",29],"^10","^8O","^7","metabase/mbql/schema.cljc","^;",29,"^9",1,"^8",1140,"^:",1140,"^?8",["^L",["^?;","^?="]],"^6","Schema for a field filter template tag."],"~$TemplateTagMap",["^ ","^5",["^ ","^7","metabase/mbql/schema.cljc","^8",1188,"^9",6,"^:",1188,"^;",20],"^10","^5=","^7","metabase/mbql/schema.cljc","^;",20,"^9",1,"^8",1188,"^:",1188,"^?8","^@F","^6","Schema for the `:template-tags` map passed in as part of a native query."],"~$FieldOrRelativeDatetime",["^ ","^5",["^ ","^7","metabase/mbql/schema.cljc","^8",770,"^9",16,"^:",770,"^;",39,"^?U",true],"^?U",true,"^10","^5S","^7","metabase/mbql/schema.cljc","^;",39,"^9",1,"^8",770,"^:",770,"^?8","^?D"],"~$get-hour",["^ ","^?F",["^L",["^?G"]],"^5",["^ ","^?F",["^L",["^?G"]],"^7","metabase/mbql/schema.cljc","^;",71,"^?1","~:get-hour","^9",63,"^8",710,"^:",710,"^?3",true,"^?4",["^DK","^C;",["^1K",["^?6","^?J"]]],"^6","Schema for a valid get-hour clause."],"^10","^8I","^7","metabase/mbql/schema.cljc","^;",71,"^?1","^DK","^9",1,"^8",710,"^:",710,"^?3",true,"^?4",["^DK","^C;",["^1K",["^?6","^?J"]]],"^?8",["^L",["^?9","^?:","^?;","^?<","^?="]],"^6","Schema for a valid get-hour clause."],"~$boolean-functions",["^ ","^5",["^ ","^7","metabase/mbql/schema.cljc","^8",512,"^9",6,"^:",512,"^;",23],"^10","^94","^7","metabase/mbql/schema.cljc","^;",23,"^9",1,"^8",512,"^:",512,"^?8","^A5","^6","Functions that return boolean values. Should match [[BooleanExpression]]."],"~$time-bucketing-units",["^ ","^5",["^ ","^7","metabase/mbql/schema.cljc","^8",61,"^9",6,"^:",61,"^;",26],"^10","^5@","^7","metabase/mbql/schema.cljc","^;",26,"^9",1,"^8",61,"^:",61,"^?8","^A5","^6","Set of valid units for bucketing or comparing against a *time* Field."],"^@G",["^ ","^5",["^ ","^7","metabase/mbql/schema.cljc","^8",787,"^9",16,"^:",787,"^;",31,"^?U",true],"^?U",true,"^10","^8H","^7","metabase/mbql/schema.cljc","^;",31,"^9",1,"^8",787,"^:",787,"^?8","^?D","^6","Schema for things that make sense in a filter like `>` or `<`, i.e. things that can be sorted."],"~$between",["^ ","^5",["^ ","^7","metabase/mbql/schema.cljc","^8",820,"^9",12,"^:",820,"^;",19,"^?1","~:between","^?4",["^DO","^?5",["^1K",["^?6","^@G"]],"^B8",["^1K",["^?6","^@G"]],"~:max",["^1K",["^?6","^@G"]]],"^6","Schema for a valid between clause."],"^10","^56","^7","metabase/mbql/schema.cljc","^;",19,"^?1","^DO","^9",1,"^8",820,"^:",820,"^?4",["^DO","^?5",["^1K",["^?6","^@G"]],"^B8",["^1K",["^?6","^@G"]],"^DP",["^1K",["^?6","^@G"]]],"^?8",["^L",["^?9","^?:","^?;","^?<","^?="]],"^6","Schema for a valid between clause."],"~$sum-where",["^ ","^?F",["^L",["^A2"]],"^5",["^ ","^?F",["^L",["^A2"]],"^7","metabase/mbql/schema.cljc","^;",66,"^?1","~:sum-where","^9",57,"^8",962,"^:",962,"^?4",["^DR","^?Z",["^1K",["^?6","^?["]],"^CQ",["^1K",["^?6","^C3"]]],"^6","Schema for a valid sum-where clause."],"^10","^5D","^7","metabase/mbql/schema.cljc","^;",66,"^?1","^DR","^9",1,"^8",962,"^:",962,"^?4",["^DR","^?Z",["^1K",["^?6","^?["]],"^CQ",["^1K",["^?6","^C3"]]],"^?8",["^L",["^?9","^?:","^?;","^?<","^?="]],"^6","Schema for a valid sum-where clause."],"^S",["^ ","^5",["^ ","^7","metabase/mbql/schema.cljc","^8",768,"^9",12,"^:",768,"^;",15,"^?1","~:not","^?4",["^DS","~:clause",["^1K",["^?6",["^1K",["^D7",["^1K",["^D8","^C3"]]]]]]],"^6","Schema for a valid not clause."],"^10","^5F","^7","metabase/mbql/schema.cljc","^;",15,"^?1","^DS","^9",1,"^8",768,"^:",768,"^?4",["^DS","^DT",["^1K",["^?6",["^1K",["^D7",["^1K",["^D8","^C3"]]]]]]],"^?8",["^L",["^?9","^?:","^?;","^?<","^?="]],"^6","Schema for a valid not clause."],"~$field",["^ ","^5",["^ ","^7","metabase/mbql/schema.cljc","^8",429,"^9",46,"^:",429,"^;",51,"^?1","^?5","~:added","0.39.0"],"^DV","0.39.0","^10","^8@","^7","metabase/mbql/schema.cljc","^;",51,"^?1","^?5","^9",1,"^8",429,"^:",429,"^?8","^@F","^6","Schema for a `:field` clause."],"~$NumericExpression",["^ ","^5",["^ ","^7","metabase/mbql/schema.cljc","^8",666,"^9",16,"^:",666,"^;",33,"^?U",true],"^?U",true,"^10","^59","^7","metabase/mbql/schema.cljc","^;",33,"^9",1,"^8",666,"^:",666,"^?8","^?S","^6","Schema for the definition of a numeric expression. All numeric expressions evaluate to numeric values."],"~$TemplateTag:Common",["^ ","^5",["^ ","^7","metabase/mbql/schema.cljc","^8",1080,"^9",16,"^:",1080,"^;",34,"^?U",true],"^?U",true,"^10","^57","^7","metabase/mbql/schema.cljc","^;",34,"^9",1,"^8",1080,"^:",1080,"^?8","^AG","^6","Things required by all template tag types."],"~$validate-num-bins",["^ ","^AK",null,"^5",["^ ","^7","metabase/mbql/schema.cljc","^8",335,"^9",8,"^:",335,"^;",25,"^?U",true,"^AL",["^1K",["^?6",["^1K",[["^BP"]]]]]],"^?U",true,"^10","^5K","^7","metabase/mbql/schema.cljc","^;",25,"^AU",["^1K",[["^BP"]]],"^AW",null,"^AV",["^1K",[null,null]],"^9",1,"^AR",false,"^8",335,"^BQ","^@F","^:",335,"^AT",1,"^AZ",true,"^AL",["^1K",["^?6",["^1K",[["^BP"]]]]]],"~$cum-sum",["^ ","^?F",["^L",["^A2"]],"^5",["^ ","^?F",["^L",["^A2"]],"^7","metabase/mbql/schema.cljc","^;",64,"^?1","~:cum-sum","^9",57,"^8",956,"^:",956,"^?4",["^D[","^?Z",["^1K",["^?6","^?["]]],"^6","Schema for a valid cum-sum clause."],"^10","^77","^7","metabase/mbql/schema.cljc","^;",64,"^?1","^D[","^9",1,"^8",956,"^:",956,"^?4",["^D[","^?Z",["^1K",["^?6","^?["]]],"^?8",["^L",["^?9","^?:","^?;","^?<","^?="]],"^6","Schema for a valid cum-sum clause."],"~$validate-query",["^ ","^5",["^ ","^7","metabase/mbql/schema.cljc","^8",1814,"^9",30,"^:",1814,"^;",44,"^AL",["^1K",["^?6",["^1K",[["~$query"]]]]]],"^10","^:2","^7","metabase/mbql/schema.cljc","^;",44,"^9",1,"^8",1814,"^:",1814,"^?8","~$function","^AL",["^1K",["^?6",["^1K",[["^E1"]]]]],"^6","Compiled schema validator for an [outer] Dashboard query. (Pre-compling a validator is more efficient; use this\n  instead of calling `(s/validate Query query)` or similar."],"~$coalesce",["^ ","^?F",["^L",["^?L"]],"^5",["^ ","^?F",["^L",["^?L"]],"^7","metabase/mbql/schema.cljc","^;",58,"^?1","~:coalesce","^9",50,"^8",597,"^:",597,"^?4",["^E4","~:a",["^1K",["^?6","~$ExpressionArg"]],"~:b",["^1K",["^?6","^E5"]],"^B7",["^1K",["^?6",["^1K",["^@>","^E5"]]]]],"^6","Schema for a valid coalesce clause."],"^10","^7:","^7","metabase/mbql/schema.cljc","^;",58,"^?1","^E4","^9",1,"^8",597,"^:",597,"^?4",["^E4","~:a",["^1K",["^?6","^E5"]],"~:b",["^1K",["^?6","^E5"]],"^B7",["^1K",["^?6",["^1K",["^@>","^E5"]]]]],"^?8",["^L",["^?9","^?:","^?;","^?<","^?="]],"^6","Schema for a valid coalesce clause."],"^C0",["^ ","^5",["^ ","^7","metabase/mbql/schema.cljc","^8",592,"^9",16,"^:",592,"^;",53,"^?U",true],"^?U",true,"^10","^7@","^7","metabase/mbql/schema.cljc","^;",53,"^9",1,"^8",592,"^:",592,"^?8","^?D"],"^BJ",["^ ","^5",["^ ","^7","metabase/mbql/schema.cljc","^8",1552,"^9",12,"^:",1552,"^;",24,"^?1","~:template-tag","^?4",["^E6","~:tag-name",["^1K",["^?6",["^1K",["^@M","^@O",["^ ","~:id","^@O"]]]]]],"^6","Schema for a valid template-tag clause."],"^10","^6O","^7","metabase/mbql/schema.cljc","^;",24,"^?1","^E6","^9",1,"^8",1552,"^:",1552,"^?4",["^E6","^E7",["^1K",["^?6",["^1K",["^@M","^@O",["^ ","^E8","^@O"]]]]]],"^?8",["^L",["^?9","^?:","^?;","^?<","^?="]],"^6","Schema for a valid template-tag clause."],"~$is-null",["^ ","^5",["^ ","^7","metabase/mbql/schema.cljc","^;",27,"^?1","~:is-null","^9",20,"^8",832,"^:",832,"^?3",true,"^?4",["^E:","^?5",["^1K",["^?6","^?7"]]],"^6","Schema for a valid is-null clause."],"^10","^5C","^7","metabase/mbql/schema.cljc","^;",27,"^?1","^E:","^9",1,"^8",832,"^:",832,"^?3",true,"^?4",["^E:","^?5",["^1K",["^?6","^?7"]]],"^?8",["^L",["^?9","^?:","^?;","^?<","^?="]],"^6","Schema for a valid is-null clause."],"^@D",["^ ","^5",["^ ","^7","metabase/mbql/schema.cljc","^8",527,"^9",16,"^:",527,"^;",36,"^?U",true],"^?U",true,"^10","^6[","^7","metabase/mbql/schema.cljc","^;",36,"^9",1,"^8",527,"^:",527,"^?8","^?D"],"~$/",["^ ","^?F",["^L",["^?L"]],"^5",["^ ","^?F",["^L",["^?L"]],"^?1","~:/","^?4",["~:/","~:x",["^1K",["^?6","^@D"]],"~:y",["^1K",["^?6","^@D"]],"^B7",["^1K",["^?6",["^1K",["^@>","^@D"]]]]],"^6","Schema for a valid / clause.","^7",null],"^10","^5H","^7","metabase/mbql/schema.cljc","^?1","~:/","^9",1,"^8",636,"^?4",["~:/","~:x",["^1K",["^?6","^@D"]],"~:y",["^1K",["^?6","^@D"]],"^B7",["^1K",["^?6",["^1K",["^@>","^@D"]]]]],"^?8",["^L",["^?9","^?:","^?;","^?<","^?="]],"^6","Schema for a valid / clause."],"^T",["^ ","^5",["^ ","^7","metabase/mbql/schema.cljc","^8",817,"^9",12,"^:",817,"^;",14,"^?1","~:>=","^?4",["^E;","^?5",["^1K",["^?6","^@G"]],"^@<",["^1K",["^?6","^@G"]]],"^6","Schema for a valid >= clause."],"^10","^6H","^7","metabase/mbql/schema.cljc","^;",14,"^?1","^E;","^9",1,"^8",817,"^:",817,"^?4",["^E;","^?5",["^1K",["^?6","^@G"]],"^@<",["^1K",["^?6","^@G"]]],"^?8",["^L",["^?9","^?:","^?;","^?<","^?="]],"^6","Schema for a valid >= clause."],"~$absolute-datetime",["^ ","^5",["^ ","^7","metabase/mbql/schema.cljc","^8",192,"^9",52,"^:",192,"^;",69,"^?1","~:absolute-datetime","^D1",true],"^10","^9I","^7","metabase/mbql/schema.cljc","^;",69,"^?1","^E=","^9",1,"^D1",true,"^8",192,"^:",192,"^?8","^?D","^6","Schema for an `:absolute-datetime` clause."],"~$raw-value-template-tag-types",["^ ","^5",["^ ","^7","metabase/mbql/schema.cljc","^8",1152,"^9",6,"^:",1152,"^;",34],"^10","^9L","^7","metabase/mbql/schema.cljc","^;",34,"^9",1,"^8",1152,"^:",1152,"^?8","^A5","^6","Set of valid values of `:type` for raw value template tags."],"^U",["^ ","^5",["^ ","^7","metabase/mbql/schema.cljc","^;",29,"^?1","~:not-empty","^9",20,"^8",838,"^:",838,"^?3",true,"^?4",["^E?","^?5",["^1K",["^?6","^?7"]]],"^6","Schema for a valid not-empty clause."],"^10","^64","^7","metabase/mbql/schema.cljc","^;",29,"^?1","^E?","^9",1,"^8",838,"^:",838,"^?3",true,"^?4",["^E?","^?5",["^1K",["^?6","^?7"]]],"^?8",["^L",["^?9","^?:","^?;","^?<","^?="]],"^6","Schema for a valid not-empty clause."],"^V",["^ ","^?F",["^L",["^A2"]],"^5",["^ ","^?F",["^L",["^A2"]],"^7","metabase/mbql/schema.cljc","^;",65,"^?1","~:distinct","^9",57,"^8",957,"^:",957,"^?4",["^E@","^?Z",["^1K",["^?6","^?["]]],"^6","Schema for a valid distinct clause."],"^10","^9H","^7","metabase/mbql/schema.cljc","^;",65,"^?1","^E@","^9",1,"^8",957,"^:",957,"^?4",["^E@","^?Z",["^1K",["^?6","^?["]]],"^?8",["^L",["^?9","^?:","^?;","^?<","^?="]],"^6","Schema for a valid distinct clause."],"^@;",["^ ","^5",["^ ","^7","metabase/mbql/schema.cljc","^8",775,"^9",16,"^:",775,"^;",34,"^?U",true],"^?U",true,"^10","^9Q","^7","metabase/mbql/schema.cljc","^;",34,"^9",1,"^8",775,"^:",775,"^?8","~$schema.core/Maybe","^6","Schema for things that make sense in a `=` or `!=` filter, i.e. things that can be compared for equality."],"~$Context",["^ ","^5",["^ ","^7","metabase/mbql/schema.cljc","^8",1685,"^9",6,"^:",1685,"^;",13],"^10","^:8","^7","metabase/mbql/schema.cljc","^;",13,"^9",1,"^8",1685,"^:",1685,"^?8","~$schema.core/EnumSchema","^6","Schema for `info.context`; used for informational purposes to record how a query was executed."],"^C<",["^ ","^5",["^ ","^7","metabase/mbql/schema.cljc","^8",97,"^9",6,"^:",97,"^;",26],"^10","^9S","^7","metabase/mbql/schema.cljc","^;",26,"^9",1,"^8",97,"^:",97,"^?8","^?W","^6","Valid units to extract from a temporal."],"~$join-strategies",["^ ","^5",["^ ","^7","metabase/mbql/schema.cljc","^8",1249,"^9",6,"^:",1249,"^;",21],"^10","^9F","^7","metabase/mbql/schema.cljc","^;",21,"^9",1,"^8",1249,"^:",1249,"^?8","^A5","^6","Valid values of the `:strategy` key in a join map."],"~$CaseOptions",["^ ","^5",["^ ","^7","metabase/mbql/schema.cljc","^8",913,"^9",16,"^:",913,"^;",27,"^?U",true],"^?U",true,"^10","^68","^7","metabase/mbql/schema.cljc","^;",27,"^9",1,"^8",913,"^:",913,"^?8","^AG"],"^?O",["^ ","^5",["^ ","^7","metabase/mbql/schema.cljc","^8",490,"^9",16,"^:",490,"^;",35,"^?U",true],"^?U",true,"^10","^5Y","^7","metabase/mbql/schema.cljc","^;",35,"^9",1,"^8",490,"^:",490,"^?8","^?D"],"~$percentile",["^ ","^?F",["^L",["~:percentile-aggregations"]],"^5",["^ ","^?F",["^L",["^EG"]],"^7","metabase/mbql/schema.cljc","^;",72,"^?1","~:percentile","^9",62,"^8",980,"^:",980,"^?4",["^EH","^?Z",["^1K",["^?6","^?["]],"^EH",["^1K",["^?6","^@D"]]],"^6","Schema for a valid percentile clause."],"^10","^9A","^7","metabase/mbql/schema.cljc","^;",72,"^?1","^EH","^9",1,"^8",980,"^:",980,"^?4",["^EH","^?Z",["^1K",["^?6","^?["]],"^EH",["^1K",["^?6","^@D"]]],"^?8",["^L",["^?9","^?:","^?;","^?<","^?="]],"^6","Schema for a valid percentile clause."],"~$string-functions",["^ ","^5",["^ ","^7","metabase/mbql/schema.cljc","^8",484,"^9",6,"^:",484,"^;",22],"^10","^9D","^7","metabase/mbql/schema.cljc","^;",22,"^9",1,"^8",484,"^:",484,"^?8","^A5","^6","Functions that return string values. Should match [[StringExpression]]."],"~$get-day-of-week",["^ ","^?F",["^L",["^?G"]],"^5",["^ ","^?F",["^L",["^?G"]],"^7","metabase/mbql/schema.cljc","^;",78,"^?1","~:get-day-of-week","^9",63,"^8",707,"^:",707,"^?3",true,"^?4",["^EK","^?I",["^1K",["^?6","^?J"]]],"^6","Schema for a valid get-day-of-week clause."],"^10","^5W","^7","metabase/mbql/schema.cljc","^;",78,"^?1","^EK","^9",1,"^8",707,"^:",707,"^?3",true,"^?4",["^EK","^?I",["^1K",["^?6","^?J"]]],"^?8",["^L",["^?9","^?:","^?;","^?<","^?="]],"^6","Schema for a valid get-day-of-week clause."],"~$round",["^ ","^?F",["^L",["^?L"]],"^5",["^ ","^?F",["^L",["^?L"]],"^7","metabase/mbql/schema.cljc","^;",55,"^?1","~:round","^9",50,"^8",646,"^:",646,"^?4",["^EM","~:x",["^1K",["^?6","^@D"]]],"^6","Schema for a valid round clause."],"^10","^9C","^7","metabase/mbql/schema.cljc","^;",55,"^?1","^EM","^9",1,"^8",646,"^:",646,"^?4",["^EM","~:x",["^1K",["^?6","^@D"]]],"^?8",["^L",["^?9","^?:","^?;","^?<","^?="]],"^6","Schema for a valid round clause."],"~$power",["^ ","^?F",["^L",["^@B"]],"^5",["^ ","^?F",["^L",["^@B"]],"^7","metabase/mbql/schema.cljc","^;",69,"^?1","~:power","^9",64,"^8",652,"^:",652,"^?4",["^EO","~:x",["^1K",["^?6","^@D"]],"~:y",["^1K",["^?6","^@D"]]],"^6","Schema for a valid power clause."],"^10","^83","^7","metabase/mbql/schema.cljc","^;",69,"^?1","^EO","^9",1,"^8",652,"^:",652,"^?4",["^EO","~:x",["^1K",["^?6","^@D"]],"~:y",["^1K",["^?6","^@D"]]],"^?8",["^L",["^?9","^?:","^?;","^?<","^?="]],"^6","Schema for a valid power clause."],"^E5",["^ ","^5",["^ ","^7","metabase/mbql/schema.cljc","^8",558,"^9",16,"^:",558,"^;",29,"^?U",true],"^?U",true,"^10","^39","^7","metabase/mbql/schema.cljc","^;",29,"^9",1,"^8",558,"^:",558,"^?8","^?D"],"~$parameter-types",["^ ","^5",["^ ","^7","metabase/mbql/schema.cljc","^8",1426,"^9",6,"^:",1426,"^;",21],"^10","^2U","^7","metabase/mbql/schema.cljc","^;",21,"^9",1,"^8",1426,"^:",1426,"^?8","^AG","^6","Map of parameter-type -> info. Info is a map with the following keys:\n\n  ### `:type`\n\n  The general type of this parameter. `:numeric`, `:string`, `:boolean`, or `:date`, if applicable. Some parameter\n  types like `:id` and `:category` don't have a particular `:type`. This is offered mostly so we can group stuff\n  together or determine things like whether a given parameter is a date parameter.\n\n  ### `:operator`\n\n  Signifies this is one of the new 'operator' parameter types added in 0.39.0 or so. These parameters can only be used\n  for [[TemplateTag:FieldFilter]]s or for Dashboard parameters mapped to MBQL queries. The value of this key is the\n  arity for the parameter, either `:unary`, `:binary`, or `:variadic`. See\n  the [[metabase.driver.common.parameters.operators]] namespace for more information.\n\n  ### `:allowed-for`\n\n  [[Parameter]]s with this `:type` may be supplied for [[TemplateTag]]s with these `:type`s (or `:widget-type` if\n  `:type` is `:dimension`) types. Example: it is ok to pass a parameter of type `:date/range` for template tag with\n  `:widget-type` `:date/all-options`; but it is NOT ok to pass a parameter of type `:date/range` for a template tag\n  with a widget type `:date`. Why? It's a potential security risk if someone creates a Card with an \"exact-match\"\n  Field filter like `:date` or `:text` and you pass in a parameter like `string/!=` `NOTHING_WILL_MATCH_THIS`.\n  Non-exact-match parameters can be abused to enumerate *all* the rows in a table when the parameter was supposed to\n  lock the results down to a single row or set of rows."],"~$Constraints",["^ ","^5",["^ ","^7","metabase/mbql/schema.cljc","^8",1613,"^9",16,"^:",1613,"^;",27,"^?U",true],"^?U",true,"^10","^37","^7","metabase/mbql/schema.cljc","^;",27,"^9",1,"^8",1613,"^:",1613,"^?8","^@F","^6","Additional constraints added to a query limiting the maximum number of rows that can be returned. Mostly useful\n  because native queries don't support the MBQL `:limit` clause. For MBQL queries, if `:limit` is set, it will\n  override these values."],"~$datetime-subtract",["^ ","^?F",["^L",["~:date-arithmetics"]],"^5",["^ ","^?F",["^L",["^ES"]],"^7","metabase/mbql/schema.cljc","^;",72,"^?1","~:datetime-subtract","^9",55,"^8",736,"^:",736,"^?4",["^ET","^C;",["^1K",["^?6","^?J"]],"~:amount",["^1K",["^?6","^@D"]],"^?A",["^1K",["^?6","^@X"]]],"^6","Schema for a valid datetime-subtract clause."],"^10","^3;","^7","metabase/mbql/schema.cljc","^;",72,"^?1","^ET","^9",1,"^8",736,"^:",736,"^?4",["^ET","^C;",["^1K",["^?6","^?J"]],"^EU",["^1K",["^?6","^@D"]],"^?A",["^1K",["^?6","^@X"]]],"^?8",["^L",["^?9","^?:","^?;","^?<","^?="]],"^6","Schema for a valid datetime-subtract clause."],"~$DateOrDatetimeLiteral",["^ ","^5",["^ ","^7","metabase/mbql/schema.cljc","^8",230,"^9",16,"^:",230,"^;",37,"^?U",true],"^?U",true,"^10","^2R","^7","metabase/mbql/schema.cljc","^;",37,"^9",1,"^8",230,"^:",230,"^?8","^?D","^6","Schema for a valid date or datetime literal."],"~$BinningStrategyName",["^ ","^5",["^ ","^7","metabase/mbql/schema.cljc","^8",322,"^9",6,"^:",322,"^;",25],"^10","^82","^7","metabase/mbql/schema.cljc","^;",25,"^9",1,"^8",322,"^:",322,"^?8","^EC","^6","Schema for a valid value for the `strategy-name` param of a [[field]] clause with `:binning` information."],"~$field:id",["^ ","^5",["^ ","^7","metabase/mbql/schema.cljc","^8",437,"^9",46,"^:",437,"^;",54,"^?1","^?5","^DV","0.39.0"],"^DV","0.39.0","^10","^6>","^7","metabase/mbql/schema.cljc","^;",54,"^?1","^?5","^9",1,"^8",437,"^:",437,"^?8","^@F","^6","Schema for a `:field` clause, with the added constraint that it must use an integer Field ID."],"~$aggregation-options",["^ ","^5",["^ ","^7","metabase/mbql/schema.cljc","^8",1014,"^9",12,"^:",1014,"^;",31,"^?1","~:aggregation-options","^?4",["^EZ","~:aggregation",["^1K",["^?6","^D@"]],"^@8",["^1K",["^?6","^C?"]]],"^6","Schema for a valid aggregation-options clause."],"^10","^6@","^7","metabase/mbql/schema.cljc","^;",31,"^?1","^EZ","^9",1,"^8",1014,"^:",1014,"^?4",["^EZ","^E[",["^1K",["^?6","^D@"]],"^@8",["^1K",["^?6","^C?"]]],"^?8",["^L",["^?9","^?:","^?;","^?<","^?="]],"^6","Schema for a valid aggregation-options clause."],"~$numeric-functions",["^ ","^5",["^ ","^7","metabase/mbql/schema.cljc","^8",504,"^9",6,"^:",504,"^;",23],"^10","^2Y","^7","metabase/mbql/schema.cljc","^;",23,"^9",1,"^8",504,"^:",504,"^?8","^A5","^6","Functions that return numeric values. Should match [[NumericExpression]]."],"~$SourceTable",["^ ","^5",["^ ","^7","metabase/mbql/schema.cljc","^8",1245,"^9",6,"^:",1245,"^;",17],"^10","^28","^7","metabase/mbql/schema.cljc","^;",17,"^9",1,"^8",1245,"^:",1245,"^?8","^@T","^6","Schema for a valid value for the `:source-table` clause of an MBQL query."],"~$get-second",["^ ","^?F",["^L",["^?G"]],"^5",["^ ","^?F",["^L",["^?G"]],"^7","metabase/mbql/schema.cljc","^;",73,"^?1","~:get-second","^9",63,"^8",716,"^:",716,"^?3",true,"^?4",["^F3","^C;",["^1K",["^?6","^?J"]]],"^6","Schema for a valid get-second clause."],"^10","^2[","^7","metabase/mbql/schema.cljc","^;",73,"^?1","^F3","^9",1,"^8",716,"^:",716,"^?3",true,"^?4",["^F3","^C;",["^1K",["^?6","^?J"]]],"^?8",["^L",["^?9","^?:","^?;","^?<","^?="]],"^6","Schema for a valid get-second clause."],"~$can-parse-datetime?",["^ ","^5",["^ ","^7","metabase/mbql/schema.cljc","^8",151,"^9",26,"^:",151,"^;",45,"^AL",["^1K",["^?6",["^1K",[["~$s"]]]]]],"^10","^3=","^7","metabase/mbql/schema.cljc","^;",45,"^9",1,"^8",151,"^:",151,"^AL",["^1K",["^?6",["^1K",[["~$s"]]]]],"^6","Returns whether a string can be parsed to an ISO 8601 datetime or not."],"~$+",["^ ","^?F",["^L",["^?L"]],"^5",["^ ","^?F",["^L",["^?L"]],"^7","metabase/mbql/schema.cljc","^;",51,"^?1","~:+","^9",50,"^8",630,"^:",630,"^?4",["~:+","~:x",["^1K",["^?6","^AC"]],"~:y",["^1K",["^?6","^AC"]],"^B7",["^1K",["^?6",["^1K",["^@>","^AC"]]]]],"^6","Schema for a valid + clause."],"^10","^2N","^7","metabase/mbql/schema.cljc","^;",51,"^?1","~:+","^9",1,"^8",630,"^:",630,"^?4",["~:+","~:x",["^1K",["^?6","^AC"]],"~:y",["^1K",["^?6","^AC"]],"^B7",["^1K",["^?6",["^1K",["^@>","^AC"]]]]],"^?8",["^L",["^?9","^?:","^?;","^?<","^?="]],"^6","Schema for a valid + clause."],"^W",["^ ","^?F",["^L",["^?L"]],"^5",["^ ","^?F",["^L",["^?L"]],"^7","metabase/mbql/schema.cljc","^;",53,"^?1","~:abs","^9",50,"^8",649,"^:",649,"^?4",["^F5","~:x",["^1K",["^?6","^@D"]]],"^6","Schema for a valid abs clause."],"^10","^7P","^7","metabase/mbql/schema.cljc","^;",53,"^?1","^F5","^9",1,"^8",649,"^:",649,"^?4",["^F5","~:x",["^1K",["^?6","^@D"]]],"^?8",["^L",["^?9","^?:","^?;","^?<","^?="]],"^6","Schema for a valid abs clause."],"~$datetime-add",["^ ","^?F",["^L",["^ES"]],"^5",["^ ","^?F",["^L",["^ES"]],"^7","metabase/mbql/schema.cljc","^;",67,"^?1","~:datetime-add","^9",55,"^8",729,"^:",729,"^?4",["^F7","^C;",["^1K",["^?6","^?J"]],"^EU",["^1K",["^?6","^@D"]],"^?A",["^1K",["^?6","^@X"]]],"^6","Schema for a valid datetime-add clause."],"^10","^34","^7","metabase/mbql/schema.cljc","^;",67,"^?1","^F7","^9",1,"^8",729,"^:",729,"^?4",["^F7","^C;",["^1K",["^?6","^?J"]],"^EU",["^1K",["^?6","^@D"]],"^?A",["^1K",["^?6","^@X"]]],"^?8",["^L",["^?9","^?:","^?;","^?<","^?="]],"^6","Schema for a valid datetime-add clause."],"~$median",["^ ","^?F",["^L",["^EG"]],"^5",["^ ","^?F",["^L",["^EG"]],"^7","metabase/mbql/schema.cljc","^;",68,"^?1","~:median","^9",62,"^8",977,"^:",977,"^?4",["^F9","^?Z",["^1K",["^?6","^?["]]],"^6","Schema for a valid median clause."],"^10","^35","^7","metabase/mbql/schema.cljc","^;",68,"^?1","^F9","^9",1,"^8",977,"^:",977,"^?4",["^F9","^?Z",["^1K",["^?6","^?["]]],"^?8",["^L",["^?9","^?:","^?;","^?<","^?="]],"^6","Schema for a valid median clause."],"~$share",["^ ","^?F",["^L",["^A2"]],"^5",["^ ","^?F",["^L",["^A2"]],"^7","metabase/mbql/schema.cljc","^;",62,"^?1","~:share","^9",57,"^8",968,"^:",968,"^?4",["^F;","^CQ",["^1K",["^?6","^C3"]]],"^6","Schema for a valid share clause."],"^10","^2T","^7","metabase/mbql/schema.cljc","^;",62,"^?1","^F;","^9",1,"^8",968,"^:",968,"^?4",["^F;","^CQ",["^1K",["^?6","^C3"]]],"^?8",["^L",["^?9","^?:","^?;","^?<","^?="]],"^6","Schema for a valid share clause."],"^A;",["^ ","^5",["^ ","^7","metabase/mbql/schema.cljc","^8",851,"^9",16,"^:",851,"^;",35,"^?U",true],"^?U",true,"^10","^2Q","^7","metabase/mbql/schema.cljc","^;",35,"^9",1,"^8",851,"^:",851,"^?8","^AG"],"~$CaseClause",["^ ","^5",["^ ","^7","metabase/mbql/schema.cljc","^8",909,"^9",16,"^:",909,"^;",26,"^?U",true],"^?U",true,"^10","^6V","^7","metabase/mbql/schema.cljc","^;",26,"^9",1,"^8",909,"^:",909,"^?8","^?:"],"~$Info",["^ ","^5",["^ ","^7","metabase/mbql/schema.cljc","^8",1704,"^9",6,"^:",1704,"^;",10],"^10","^2D","^7","metabase/mbql/schema.cljc","^;",10,"^9",1,"^8",1704,"^:",1704,"^?8","^AG","^6","Schema for query `:info` dictionary, which is used for informational purposes to record information about how a query\n  was executed in QueryExecution and other places. It is considered bad form for middleware to change its behavior\n  based on this information, don't do it!"],"^X",["^ ","^?F",["^L",["^A2"]],"^5",["^ ","^?F",["^L",["^A2"]],"^7","metabase/mbql/schema.cljc","^;",61,"^?1","~:case","^9",57,"^8",916,"^:",916,"^?4",["^F>","~:clauses",["^1K",["^?6","^A>"]],"^@8",["^1K",["^?6",["^1K",["^@9","^EE"]]]]],"^6","Schema for a valid case clause."],"^10","^2E","^7","metabase/mbql/schema.cljc","^;",61,"^?1","^F>","^9",1,"^8",916,"^:",916,"^?4",["^F>","^F?",["^1K",["^?6","^A>"]],"^@8",["^1K",["^?6",["^1K",["^@9","^EE"]]]]],"^?8",["^L",["^?9","^?:","^?;","^?<","^?="]],"^6","Schema for a valid case clause."],"~$Join",["^ ","^5",["^ ","^7","metabase/mbql/schema.cljc","^8",1261,"^9",6,"^:",1261,"^;",10],"^10","^6Z","^7","metabase/mbql/schema.cljc","^;",10,"^9",1,"^8",1261,"^:",1261,"^?8","^@F","^6","Perform the equivalent of a SQL `JOIN` with another Table or nested `:source-query`. JOINs are either explicitly\n  specified in the incoming query, or implicitly generated when one uses a `:field` clause with `:source-field`.\n\n  In the top-level query, you can reference Fields from the joined table or nested query by including `:source-field`\n  in the `:field` options (known as implicit joins); for explicit joins, you *must* specify `:join-alias` yourself; in\n  the `:field` options, e.g.\n\n    ;; for joins against other Tables/MBQL source queries\n    [:field 1 {:join-alias \"my_join_alias\"}]\n\n    ;; for joins against native queries\n    [:field \"my_field\" {:base-type :field/Integer, :join-alias \"my_join_alias\"}]"],"~$Settings",["^ ","^5",["^ ","^7","metabase/mbql/schema.cljc","^8",1605,"^9",16,"^:",1605,"^;",24,"^?U",true],"^?U",true,"^10","^2;","^7","metabase/mbql/schema.cljc","^;",24,"^9",1,"^8",1605,"^:",1605,"^?8","^AG","^6","Options that tweak the behavior of the query processor."],"^?[",["^ ","^5",["^ ","^7","metabase/mbql/schema.cljc","^8",927,"^9",6,"^:",927,"^;",26],"^10","^7I","^7","metabase/mbql/schema.cljc","^;",26,"^9",1,"^8",927,"^:",927,"^?8","^?D","^6","Schema for anything that is accepted as a top-level expression definition, either an arithmetic expression such as a\n  `:+` clause or a `:field` clause."],"~$segment",["^ ","^5",["^ ","^7","metabase/mbql/schema.cljc","^;",27,"^?1","~:segment","^9",20,"^8",881,"^:",881,"^?3",true,"^?4",["^FC","~:segment-id",["^1K",["^?6",["^1K",["^@M","^@N","^@O"]]]]],"^6","Schema for a valid segment clause."],"^10","^2<","^7","metabase/mbql/schema.cljc","^;",27,"^?1","^FC","^9",1,"^8",881,"^:",881,"^?3",true,"^?4",["^FC","^FD",["^1K",["^?6",["^1K",["^@M","^@N","^@O"]]]]],"^?8",["^L",["^?9","^?:","^?;","^?<","^?="]],"^6","Schema for a valid segment clause."],"^Y",["^ ","^?F",["^L",["^A2"]],"^5",["^ ","^?F",["^L",["^A2"]],"^7","metabase/mbql/schema.cljc","^;",60,"^?1","^DP","^9",57,"^8",960,"^:",960,"^?4",["^DP","^?Z",["^1K",["^?6","^?["]]],"^6","Schema for a valid max clause."],"^10","^32","^7","metabase/mbql/schema.cljc","^;",60,"^?1","^DP","^9",1,"^8",960,"^:",960,"^?4",["^DP","^?Z",["^1K",["^?6","^?["]]],"^?8",["^L",["^?9","^?:","^?;","^?<","^?="]],"^6","Schema for a valid max clause."],"~$!=",["^ ","^5",["^ ","^7","metabase/mbql/schema.cljc","^8",812,"^9",12,"^:",812,"^;",14,"^?1","~:!=","^?4",["^FF","^?5",["^1K",["^?6","^@;"]],"^@<",["^1K",["^?6","^@;"]],"^@=",["^1K",["^?6",["^1K",["^@>","^@;"]]]]],"^6","Schema for a valid != clause."],"^10","^27","^7","metabase/mbql/schema.cljc","^;",14,"^?1","^FF","^9",1,"^8",812,"^:",812,"^?4",["^FF","^?5",["^1K",["^?6","^@;"]],"^@<",["^1K",["^?6","^@;"]],"^@=",["^1K",["^?6",["^1K",["^@>","^@;"]]]]],"^?8",["^L",["^?9","^?:","^?;","^?<","^?="]],"^6","Schema for a valid != clause."],"~$DateTimeUnit",["^ ","^5",["^ ","^7","metabase/mbql/schema.cljc","^8",84,"^9",6,"^:",84,"^;",18],"^10","^6R","^7","metabase/mbql/schema.cljc","^;",18,"^9",1,"^8",84,"^:",84,"^?8","^?W","^6","Valid unit for *datetime* bucketing."],"~$get-month",["^ ","^?F",["^L",["^?G"]],"^5",["^ ","^?F",["^L",["^?G"]],"^7","metabase/mbql/schema.cljc","^;",72,"^?1","~:get-month","^9",63,"^8",697,"^:",697,"^?3",true,"^?4",["^FI","^?I",["^1K",["^?6","^?J"]]],"^6","Schema for a valid get-month clause."],"^10","^98","^7","metabase/mbql/schema.cljc","^;",72,"^?1","^FI","^9",1,"^8",697,"^:",697,"^?3",true,"^?4",["^FI","^?I",["^1K",["^?6","^?J"]]],"^?8",["^L",["^?9","^?:","^?;","^?<","^?="]],"^6","Schema for a valid get-month clause."],"^Z",["^ ","^?F",["^L",["^A2"]],"^5",["^ ","^?F",["^L",["^A2"]],"^7","metabase/mbql/schema.cljc","^;",70,"^?1","~:count","^9",65,"^8",944,"^:",944,"^?3",true,"^?4",["^FJ","^?5",["^1K",["^?6",["^1K",["^@9","^?7"]]]]],"^6","Schema for a valid count clause."],"^10","^9;","^7","metabase/mbql/schema.cljc","^;",70,"^?1","^FJ","^9",1,"^8",944,"^:",944,"^?3",true,"^?4",["^FJ","^?5",["^1K",["^?6",["^1K",["^@9","^?7"]]]]],"^?8",["^L",["^?9","^?:","^?;","^?<","^?="]],"^6","Schema for a valid count clause."],"~$lower",["^ ","^?F",["^L",["^?L"]],"^5",["^ ","^?F",["^L",["^?L"]],"^7","metabase/mbql/schema.cljc","^;",55,"^?1","~:lower","^9",50,"^8",618,"^:",618,"^?4",["^FL","~:s",["^1K",["^?6","^?O"]]],"^6","Schema for a valid lower clause."],"^10","^48","^7","metabase/mbql/schema.cljc","^;",55,"^?1","^FL","^9",1,"^8",618,"^:",618,"^?4",["^FL","~:s",["^1K",["^?6","^?O"]]],"^?8",["^L",["^?9","^?:","^?;","^?<","^?="]],"^6","Schema for a valid lower clause."],"~$length",["^ ","^?F",["^L",["^?L"]],"^5",["^ ","^?F",["^L",["^?L"]],"^7","metabase/mbql/schema.cljc","^;",56,"^?1","^C1","^9",50,"^8",603,"^:",603,"^?4",["^C1","~:s",["^1K",["^?6","^?O"]]],"^6","Schema for a valid length clause."],"^10","^3I","^7","metabase/mbql/schema.cljc","^;",56,"^?1","^C1","^9",1,"^8",603,"^:",603,"^?4",["^C1","~:s",["^1K",["^?6","^?O"]]],"^?8",["^L",["^?9","^?:","^?;","^?<","^?="]],"^6","Schema for a valid length clause."],"~$get-year",["^ ","^?F",["^L",["^?G"]],"^5",["^ ","^?F",["^L",["^?G"]],"^7","metabase/mbql/schema.cljc","^;",71,"^?1","~:get-year","^9",63,"^8",691,"^:",691,"^?3",true,"^?4",["^FO","^?I",["^1K",["^?6","^?J"]]],"^6","Schema for a valid get-year clause."],"^10","^3?","^7","metabase/mbql/schema.cljc","^;",71,"^?1","^FO","^9",1,"^8",691,"^:",691,"^?3",true,"^?4",["^FO","^?I",["^1K",["^?6","^?J"]]],"^?8",["^L",["^?9","^?:","^?;","^?<","^?="]],"^6","Schema for a valid get-year clause."],"~$require-base-type-for-field-name",["^ ","^AK",null,"^5",["^ ","^7","metabase/mbql/schema.cljc","^8",420,"^9",8,"^:",420,"^;",40,"^?U",true,"^AL",["^1K",["^?6",["^1K",[["^BP"]]]]]],"^?U",true,"^10","^41","^7","metabase/mbql/schema.cljc","^;",40,"^AU",["^1K",[["^BP"]]],"^AW",null,"^AV",["^1K",[null,null]],"^9",1,"^AR",false,"^8",420,"^BQ","^@F","^:",420,"^AT",1,"^AZ",true,"^AL",["^1K",["^?6",["^1K",[["^BP"]]]]]],"~$TemplateTag:RawValue",["^ ","^5",["^ ","^7","metabase/mbql/schema.cljc","^8",1168,"^9",6,"^:",1168,"^;",26],"^10","^8X","^7","metabase/mbql/schema.cljc","^;",26,"^9",1,"^8",1168,"^:",1168,"^?8",["^L",["^?;","^?="]],"^6","Schema for a raw value template tag."],"~$dimension",["^ ","^5",["^ ","^7","metabase/mbql/schema.cljc","^8",1557,"^9",12,"^:",1557,"^;",21,"^?1","~:dimension","^?4",["^FS","^BI",["^1K",["^?6",["^1K",["^@M","^?7","^BJ"]]]]],"^6","Schema for a valid dimension clause."],"^10","^8Z","^7","metabase/mbql/schema.cljc","^;",21,"^?1","^FS","^9",1,"^8",1557,"^:",1557,"^?4",["^FS","^BI",["^1K",["^?6",["^1K",["^@M","^?7","^BJ"]]]]],"^?8",["^L",["^?9","^?:","^?;","^?<","^?="]],"^6","Schema for a valid dimension clause."],"~$BooleanExpression",["^ ","^5",["^ ","^7","metabase/mbql/schema.cljc","^8",885,"^9",16,"^:",885,"^;",33,"^?U",true],"^?U",true,"^10","^3A","^7","metabase/mbql/schema.cljc","^;",33,"^9",1,"^8",885,"^:",885,"^?8","^?S","^6","Schema for the definition of an arithmetic expression."],"~$ParameterType",["^ ","^5",["^ ","^7","metabase/mbql/schema.cljc","^8",1520,"^9",6,"^:",1520,"^;",19],"^10","^7K","^7","metabase/mbql/schema.cljc","^;",19,"^9",1,"^8",1520,"^:",1520,"^?8","^?;","^6","Schema for valid values of `:type` for a [[Parameter]]."],"^DB",["^ ","^5",["^ ","^7","metabase/mbql/schema.cljc","^8",78,"^9",6,"^:",78,"^;",14],"^10","^3B","^7","metabase/mbql/schema.cljc","^;",14,"^9",1,"^8",78,"^:",78,"^?8","^?W","^6","Valid unit for *time* bucketing."],"~$MBQLQuery",["^ ","^5",["^ ","^7","metabase/mbql/schema.cljc","^8",1360,"^9",6,"^:",1360,"^;",15],"^10","^3Y","^7","metabase/mbql/schema.cljc","^;",15,"^9",1,"^8",1360,"^:",1360,"^?8","^@F","^6","Schema for a valid, normalized MBQL [inner] query."],"~$NativeQuery",["^ ","^5",["^ ","^7","metabase/mbql/schema.cljc","^8",1199,"^9",6,"^:",1199,"^;",17],"^10","^3T","^7","metabase/mbql/schema.cljc","^;",17,"^9",1,"^8",1199,"^:",1199,"^?8","^AG","^6","Schema for a valid, normalized native [inner] query."],"~$Parameter",["^ ","^5",["^ ","^7","metabase/mbql/schema.cljc","^8",1571,"^9",6,"^:",1571,"^;",15],"^10","^4B","^7","metabase/mbql/schema.cljc","^;",15,"^9",1,"^8",1571,"^:",1571,"^?8","^AG","^6","Schema for the *value* of a parameter (e.g. a Dashboard parameter or a native query template tag) as passed in as\n  part of the `:parameters` list in a query."],"~$TemplateTag:Value:Common",["^ ","^5",["^ ","^7","metabase/mbql/schema.cljc","^8",1121,"^9",16,"^:",1121,"^;",40,"^?U",true],"^?U",true,"^10","^4A","^7","metabase/mbql/schema.cljc","^;",40,"^9",1,"^8",1121,"^:",1121,"^?8",["^L",["^?;","^?="]],"^6","Stuff shared between the Field filter and raw value template tag schemas."],"~$datetime-functions",["^ ","^5",["^ ","^7","metabase/mbql/schema.cljc","^8",518,"^9",6,"^:",518,"^;",24],"^10","^8:","^7","metabase/mbql/schema.cljc","^;",24,"^9",1,"^8",518,"^:",518,"^?8","^A5","^6","Functions that return Date or DateTime values. Should match [[DatetimeExpression]]."],"~$Aggregation",["^ ","^5",["^ ","^7","metabase/mbql/schema.cljc","^8",1018,"^9",6,"^:",1018,"^;",17],"^10","^46","^7","metabase/mbql/schema.cljc","^;",17,"^9",1,"^8",1018,"^:",1018,"^?8","^?D","^6","Schema for anything that is a valid `:aggregation` clause."],"~$trim",["^ ","^?F",["^L",["^?L"]],"^5",["^ ","^?F",["^L",["^?L"]],"^7","metabase/mbql/schema.cljc","^;",54,"^?1","~:trim","^9",50,"^8",606,"^:",606,"^?4",["^G1","~:s",["^1K",["^?6","^?O"]]],"^6","Schema for a valid trim clause."],"^10","^4D","^7","metabase/mbql/schema.cljc","^;",54,"^?1","^G1","^9",1,"^8",606,"^:",606,"^?4",["^G1","~:s",["^1K",["^?6","^?O"]]],"^?8",["^L",["^?9","^?:","^?;","^?<","^?="]],"^6","Schema for a valid trim clause."],"~$Query",["^ ","^5",["^ ","^7","metabase/mbql/schema.cljc","^8",1753,"^9",6,"^:",1753,"^;",11],"^10","^4E","^7","metabase/mbql/schema.cljc","^;",11,"^9",1,"^8",1753,"^:",1753,"^?8","^@F","^6","Schema for an [outer] query, e.g. the sort of thing you'd pass to the query processor or save in\n  `Card.dataset_query`."],"~$TemplateTagType",["^ ","^5",["^ ","^7","metabase/mbql/schema.cljc","^8",1076,"^9",6,"^:",1076,"^;",21],"^10","^84","^7","metabase/mbql/schema.cljc","^;",21,"^9",1,"^8",1076,"^:",1076,"^?8","^EC","^6","Schema for valid values of template tag `:type`."],"~$source-table-card-id-regex",["^ ","^5",["^ ","^7","metabase/mbql/schema.cljc","^8",1241,"^9",6,"^:",1241,"^;",32],"^10","^89","^7","metabase/mbql/schema.cljc","^;",32,"^9",1,"^8",1241,"^:",1241,"^?8","^?;","^6","Pattern that matches `card__id` strings that can be used as the `:source-table` of MBQL queries."],"~$TemplateTag:RawValue:Type",["^ ","^5",["^ ","^7","metabase/mbql/schema.cljc","^8",1156,"^9",6,"^:",1156,"^;",31],"^10","^85","^7","metabase/mbql/schema.cljc","^;",31,"^9",1,"^8",1156,"^:",1156,"^?8","^?;","^6","Valid values of `:type` for raw value template tags."],"^[",["^ ","^5",["^ ","^7","metabase/mbql/schema.cljc","^8",758,"^9",12,"^:",758,"^;",15,"^?1","~:and","^?4",["^G6","^D6",["^1K",["^?6",["^1K",["^D7",["^1K",["^D8","^C3"]]]]]],"^D9",["^1K",["^?6",["^1K",["^D7",["^1K",["^D8","^C3"]]]]]],"^D:",["^1K",["^?6",["^1K",["^@>",["^1K",["^D7",["^1K",["^D8","^C3"]]]]]]]]],"^6","Schema for a valid and clause."],"^10","^4<","^7","metabase/mbql/schema.cljc","^;",15,"^?1","^G6","^9",1,"^8",758,"^:",758,"^?4",["^G6","^D6",["^1K",["^?6",["^1K",["^D7",["^1K",["^D8","^C3"]]]]]],"^D9",["^1K",["^?6",["^1K",["^D7",["^1K",["^D8","^C3"]]]]]],"^D:",["^1K",["^?6",["^1K",["^@>",["^1K",["^D7",["^1K",["^D8","^C3"]]]]]]]]],"^?8",["^L",["^?9","^?:","^?;","^?<","^?="]],"^6","Schema for a valid and clause."],"~$LiteralDatetimeString",["^ ","^5",["^ ","^7","metabase/mbql/schema.cljc","^8",165,"^9",6,"^:",165,"^;",27],"^10","^3L","^7","metabase/mbql/schema.cljc","^;",27,"^9",1,"^8",165,"^:",165,"^?8","^@F","^6","Schema for an ISO-8601-formattedor datetime string literal."],"~$FieldBinningOptions",["^ ","^5",["^ ","^7","metabase/mbql/schema.cljc","^8",344,"^9",6,"^:",344,"^;",25],"^10","^4G","^7","metabase/mbql/schema.cljc","^;",25,"^9",1,"^8",344,"^:",344,"^?8","^@F","^6","Schema for `:binning` options passed to a `:field` clause."],"~$ParameterList",["^ ","^5",["^ ","^7","metabase/mbql/schema.cljc","^8",1592,"^9",6,"^:",1592,"^;",19],"^10","^43","^7","metabase/mbql/schema.cljc","^;",19,"^9",1,"^8",1592,"^:",1592,"^?8","^?:","^6","Schema for a list of `:parameters` as passed in to a query."],"~$avg",["^ ","^?F",["^L",["^A2"]],"^5",["^ ","^?F",["^L",["^A2"]],"^7","metabase/mbql/schema.cljc","^;",60,"^?1","~:avg","^9",57,"^8",955,"^:",955,"^?4",["^G;","^?Z",["^1K",["^?6","^?["]]],"^6","Schema for a valid avg clause."],"^10","^7Z","^7","metabase/mbql/schema.cljc","^;",60,"^?1","^G;","^9",1,"^8",955,"^:",955,"^?4",["^G;","^?Z",["^1K",["^?6","^?["]]],"^?8",["^L",["^?9","^?:","^?;","^?<","^?="]],"^6","Schema for a valid avg clause."],"~$aggregation",["^ ","^5",["^ ","^7","metabase/mbql/schema.cljc","^8",469,"^9",12,"^:",469,"^;",23,"^?1","^E[","^?4",["^E[","~:aggregation-clause-index",["^1K",["^?6","^?@"]],"^@8",["^1K",["^?6",["^1K",["^@9",["^1K",["^BU","^BV","map"]]]]]]],"^6","Schema for a valid aggregation clause."],"^10","^8?","^7","metabase/mbql/schema.cljc","^;",23,"^?1","^E[","^9",1,"^8",469,"^:",469,"^?4",["^E[","^G=",["^1K",["^?6","^?@"]],"^@8",["^1K",["^?6",["^1K",["^@9",["^1K",["^BU","^BV","map"]]]]]]],"^?8",["^L",["^?9","^?:","^?;","^?<","^?="]],"^6","Schema for a valid aggregation clause."],"~$MiddlewareOptions",["^ ","^5",["^ ","^7","metabase/mbql/schema.cljc","^8",1633,"^9",16,"^:",1633,"^;",33,"^?U",true],"^?U",true,"^10","^7Y","^7","metabase/mbql/schema.cljc","^;",33,"^9",1,"^8",1633,"^:",1633,"^?8","^AG","^6","Additional options that can be used to toggle middleware on or off."],"~$Filter*",["^ ","^5",["^ ","^7","metabase/mbql/schema.cljc","^8",892,"^9",16,"^:",892,"^;",23,"^?U",true],"^?U",true,"^10","^3G","^7","metabase/mbql/schema.cljc","^;",23,"^9",1,"^8",892,"^:",892,"^?8","^?D"]],"^1I",["^ ","^@","^@","^1@","^1@","^I","^I","^?","^@","~$s","^1@","^1D","^@"],"~:cljs.analyzer/constants",["^ ","^1E",["^L",["^?0","~:y","^27","~:quarter","~:week-of-year-instance","^2<","^2=","^2?","^?C","^?E","~:binary","^?F","^?Z","^D7","~:category","^EU","~:constraints","^2C","^AE","^2E","^B0","~:database_type","~:full-join","^?K","^?R","^2L","^2N","^2T","^B?","~:semantic_type","^AI","^?J","^?V","^@[","^2V","~:embedded-dashboard","^B8","^2W","~:day","^?X","^2X","^@0","^2[","^B3","^B5","^@L","^?Q","^@5","^?I","~:hour","~:slug","^31","^32","~:week","^B=","~:*","^34","^D9","^35","~$=","^BF","~:string/!=","^@?","^@@","^B<","~:number/=","^B:","^B;","^@A","~:widget-type","^?B","~:type/Time","^B>","^3;","~:base-type","~:string/ends-with","~:location/state","~$<","^BS","^BX","^BZ","^3?","^@H","^@>","^@J","^3A","^A2","^@P","^BH","^@Q","^BL","^3G","^3I","^BN","^?G","^3K","~:process-viz-settings?","~:template-tags","^3M","^3N","^CQ","^@3","~:disable-mbql->native?","~:map-tiles","^@W","^C6","^@X","^C8","^@Y","~:number/between","~:limit","^A1","^A6","~:instance","~:date/all-options","^A<","~:numeric","^?U","~:else","^A>","~:number","~:source-query","~:second","^A?","^3Y","~:>","^40","^C@","^AA","^?A","^CI","^46","^CM","^47","~:executed-by","^48","^AC","^AD","^4<","^4?","^4C","^4D","^CF","^4F","^4H","^4J","^4K","~:default","^AH","~:snippet-name","^4M","^DV","^CN","^C5","^A[","^CP","^19","~:number/>=","^4Q","~:day-of-week","^CB","^10","~:n","^M","^B4","^4W","^4X","~:variadic","~$*","^4Z","^N","~:card-name","~:-","^CX","^CZ","^50","~:userland-query?","^D0","^D5","~:iso","~:alias/escaped->original","^B9","^52","^DA","^56","^@4","~:snippet","~:location/country","^7","^D>","^BV","~:fields","~:temporal-unit","^58","^59","~:us","~:join-alias","^BE","^;","~:question","^C=","^BG","^ES","~:joins","^DK","^B[","^BK","~:hour-of-day","~:type/Date","^BT","^BM","^DE","^@:","~:source-metadata","~:json-download","~:string/=","~:settings","^BR","^BW","^BY","~:month","~:metadata/dataset-metadata","~:max-results","^C2","~:dashboard","^C3","^DO","^DR","^C4","^C7","~:string/does-not-contain","~:ad-hoc","~:month-of-year","^DS","^?5","~:type","^5C","^5D","^C:","^5F","^5G","^@O","^5H","^5J","^D:","^D[","~:page","^E4","~$>","^O","^5N","^?1","~:card-id","^D6","~:pulse-id","^B@","^CD","^C>","~:/","^@=","~:string","^5U","~:format-rows?","~:all","~:action-id","^CE","^5W","^CH","^CL","^E6","~:s","^E:","~:allowed-for","^P","^EG","^5[","^CO","^CR","^E;","^E=","^61","^64","^66","^E?","^67","^E@","^9","^?7","^D1","^?@","^EK","^6:","~:middleware","^EM","~$-","^CW","^CY","~:day-of-month","^Q","^EH","^6?","~:card","^@M","^6B","~:dashboard-id","^6D","~:date/range","^6F","^D=","^D?","^BU","~:snippet-id","^ET","~:right-join","^6H","~:year","~:left-join","^R","~:max-results-bare-rows","^EO","~:day-of-year","~:alias","^6P","~:string/starts-with","^DD","^@7","^F3","~:filter","~:strategy","~:millisecond","~:native","^DJ","^EZ","^72","^74","~:string/contains","^77","^A:","~:date/single","^@G","^7:","~:location/city","^8","~:bin-width","~:include-current","~:+","^?Y","^DN","^DQ","^F5","^F7","^S","^F9","^DU","^F;","^DW","~:disable-max-results?","~:year-of-era","^CK","^FC","~:csv-download","^DP","^FF","^E8","~:date/relative","~:condition","^F>","^DZ","~:pulse","~:case-sensitive","^E3","~:source-table","^C0","~:optional","^?L","^BJ","^7N","^FL","^A0","^FI","^7P","~:public-dashboard","^E9","^FJ","^@D","~$/","~:declared","~:breakout","^7W","^T","^E<","^7X","^U","^V","~:info","^7Z","^C1","^@;","^FO","~:order-by","^FD","^C<","~:location/zip_code","^FS","^C;","~:b","^EE","~:operator","^?O","~:second-of-minute","^83","^G6","^:","~:week-of-year-us","^EF","~:cljs.analyzer/no-resolve","^87","^8;","~:context","~:display-name","~:xlsx-download","~:database","^G1","^EJ","~:num-bins","^EL","^8<","~:public-question","~:action","^EN","^G;","~:unary","^E5","^?M","^8@","^ER","^E[","^B7","^8F","^?3","^8I","^@8","~:x","^F?","^?2","^??","^?4","^8R","^F2","^?H","^BI","^8W","~$+","^D8","~:date/month-year","^8Z","^W","^?6","^F6","^A8","~:items","^F8","^F:","^11","~:binning","^A;","^?N","~:date/quarter-year","^AL","~:query","^@2","~:query-hash","^@6","^@<","^X","^98","~:report-timezone","~:display_name","~:week-of-year-iso","^9:","^9;","~:number/!=","^?[","^9<","^FB","^Y","^@1","^FE","^6","^FH","^9A","^Z","^9B","^9C","~:inner-join","^DT","~:collection","^A9","~:parameters","^@9","~:=","^FK","^@C","~:boolean","^FM","^@R","^9G","^FN","^9H","^FR","^9I","^FT","~:week-of-year","^@B","^9M","^9O","~:<","~:fk-field-id","^DB","^9R","^@I","~:test","~:quarter-of-year","~:rest","^@K","^FV","^@N","^9X","~:fingerprint","~:embedded-question","^9Z","^@Z","^F[","^A3","^G0","~:required","~:none","^CA","~:add-default-userland-constraints?","~:base_type","^[","~:type/DateTime","~:minute-of-hour","~:a","~:source-field","^G:","^?P","~:skip-results-metadata?","^A7","~:minute","^G?","~:text","^A=","^CJ","~:number/<="]],"~:order",["^GA","^GJ","^GM","^H7","^H:","^HN","^HT","^I3","^I9","^I<","^JE","^JH","^GK","^H5","^HH","^IA","^JQ","^JT","^GB","^II","^IX","^IY","^J?","^G[","^H>","^HD","^@Z","^A0","^IP","^??","^E=","^H2","^DA","^?1","^9I","^IZ","^19","^10","^7","^;","^9","^D1","^8","^:","^AL","^6","^JG","^11","^E<","^2X","^?4","^@Y","~:n","^?6","^@M","^@[","^?@","^?A","^@9","^?B","^8F","^R","^3N","^DB","^GF","^JO","^GH","^D0","^BS","^J3","^IF","^I@","^GR","^HC","^HI","^GQ","^JP","^JR","^HE","^J9","^?5","^31","^?U","^@W","^6?","^?F","^?L","^BR","^BT","^@O","^@8","^BU","^BV","^8@","^DV","^DU","^2V","^A?","^E[","^B5","^BF","^BZ","^C@","^CN","^E4","^F>","^FL","^G1","^?N","^A=","^4J","^IR","^CR","^AE","^AI","~:*","^?G","^CM","^CF","~:-","^D>","^DK","^DE","~:/","^EK","^EM","^EO","^F3","~:+","^F5","^FI","^C1","^FO","^?H","^@1","^@C","^@I","^B3","~:>","^D5","^DS","^E;","^FF","^G6","~:=","~:<","^B8","^C6","^CP","^CZ","^DR","^D[","^E@","^EH","^EZ","^?Y","^F9","^F;","^DP","^FJ","^G;","^@K","^A3","^C8","^CI","^ET","^F7","^59","^DW","^46","^F[","^9Z","^?R","^3A","^FT","^JI","^8W","^D?","^2N","~$+","~:x","^AC","~:y","^B7","^@>","^34","^ES","^F6","^C;","^?J","^EU","^@D","^@X","^3;","^ER","^4Z","^CH","^CJ","^@@","^CK","^8;","^C7","^6B","^C2","^5G","^AA","^87","^C3","^DO","^B:","^E:","^?2","^BX","^E?","^IN","^B0","^@R","^BN","^@6","^IG","^A7","^A9","^A:","^FC","^4K","^?V","^4<","^[","^D6","^D7","^D8","^D9","^D:","^4W","^Q","^5F","^S","^DT","^9G","~$<","^@G","^@<","^2?","^M","^7W","~$>","^6H","^T","^4H","~$=","^@;","^@=","^27","^FE","^56","^DN","^4F","^A[","^?O","^@7","^@:","^9M","^@Q","^6D","^BM","^9X","^?3","^@5","^3M","^B9","^B;","^B<","^B=","^B>","^B?","^B@","^2W","^BW","^?7","^64","^U","^5C","^E9","^50","^?0","^5[","^A6","^A8","^A;","^2<","^FB","^FD","^@N","^3G","^G?","^8R","~$-","^5H","~$/","^2C","~$*","^7:","^E3","~:a","^E5","~:b","^3I","^FM","~:s~:ns-specs",["^ "],"~:ns-spec-vars",["^L",[]],"~:compiler-options",["^:<",[["^JZ","~:static-fns"],true,["^JZ","~:shadow-tweaks"],null,["^JZ","~:source-map-inline"],null,["^JZ","~:elide-asserts"],true,["^JZ","~:optimize-constants"],null,["^JZ","^1X"],null,["^JZ","~:external-config"],null,["^JZ","~:tooling-config"],null,["^JZ","~:emit-constants"],null,["^JZ","~:load-tests"],false,["^JZ","~:form-size-threshold"],null,["^JZ","~:global-goog-object&array"],null,["^JZ","~:data-readers"],null,["^JZ","~:infer-externs"],"~:auto",["^JZ","^1Z"],["^L",["^1["]],["~:js-options","~:js-provider"],"^1F",["^C="],"~:release",["^JZ","~:fn-invoke-direct"],null,["^JZ","~:source-map"],null]]]