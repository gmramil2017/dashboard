["^ ","~:output",["^ ","~:js","goog.provide('metabase.util.format');\nmetabase.util.format.format_with_unit = (function metabase$util$format$format_with_unit(n,suffix){\nreturn [cljs.core.str.cljs$core$IFn$_invoke$arity$1(n.toFixed((1))),\" \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(suffix)].join('');\n});\n/**\n * Format a time interval in nanoseconds to something more readable. (µs/ms/etc.)\n */\nmetabase.util.format.format_nanoseconds = (function metabase$util$format$format_nanoseconds(nanoseconds){\nvar n = nanoseconds;\nvar G__35960 = new cljs.core.PersistentVector(null, 9, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"ns\",\"ns\",441598760),(1000)], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"\\u00B5s\",\"\\u00B5s\",2058494670),(1000)], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"ms\",\"ms\",-1152709733),(1000)], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"s\",\"s\",1705939918),(60)], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"mins\",\"mins\",467369676),(60)], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"hours\",\"hours\",58380855),(24)], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"days\",\"days\",-1394072564),(7)], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"weeks\",\"weeks\",1844596125),(365.25 / (7))], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"years\",\"years\",-1298579689),Number.POSITIVE_INFINITY], null)], null);\nvar vec__35961 = G__35960;\nvar seq__35962 = cljs.core.seq(vec__35961);\nvar first__35963 = cljs.core.first(seq__35962);\nvar seq__35962__$1 = cljs.core.next(seq__35962);\nvar vec__35964 = first__35963;\nvar unit = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__35964,(0),null);\nvar divisor = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__35964,(1),null);\nvar more = seq__35962__$1;\nvar n__$1 = n;\nvar G__35960__$1 = G__35960;\nwhile(true){\nvar n__$2 = n__$1;\nvar vec__35974 = G__35960__$1;\nvar seq__35975 = cljs.core.seq(vec__35974);\nvar first__35976 = cljs.core.first(seq__35975);\nvar seq__35975__$1 = cljs.core.next(seq__35975);\nvar vec__35977 = first__35976;\nvar unit__$1 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__35977,(0),null);\nvar divisor__$1 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__35977,(1),null);\nvar more__$1 = seq__35975__$1;\nif((((n__$2 > divisor__$1)) && (cljs.core.seq(more__$1)))){\nvar G__36029 = (n__$2 / divisor__$1);\nvar G__36030 = more__$1;\nn__$1 = G__36029;\nG__35960__$1 = G__36030;\ncontinue;\n} else {\nreturn metabase.util.format.format_with_unit(n__$2,cljs.core.name(unit__$1));\n}\nbreak;\n}\n});\n/**\n * Format a time interval in microseconds into something more readable.\n */\nmetabase.util.format.format_microseconds = (function metabase$util$format$format_microseconds(microseconds){\nreturn metabase.util.format.format_nanoseconds((1000.0 * microseconds));\n});\n/**\n * Format a time interval in milliseconds into something more readable.\n */\nmetabase.util.format.format_milliseconds = (function metabase$util$format$format_milliseconds(milliseconds){\nreturn metabase.util.format.format_microseconds((1000.0 * milliseconds));\n});\n/**\n * Format a time interval in seconds into something more readable.\n */\nmetabase.util.format.format_seconds = (function metabase$util$format$format_seconds(seconds){\nreturn metabase.util.format.format_milliseconds((1000.0 * seconds));\n});\n/**\n * Nicely format `num-bytes` as kilobytes/megabytes/etc.\n * \n *  (format-bytes 1024) ; -> 2.0 KB\n */\nmetabase.util.format.format_bytes = (function metabase$util$format$format_bytes(num_bytes){\nvar n = num_bytes;\nvar G__35987 = new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [\"B\",\"KB\",\"MB\",\"GB\"], null);\nvar vec__35988 = G__35987;\nvar seq__35989 = cljs.core.seq(vec__35988);\nvar first__35990 = cljs.core.first(seq__35989);\nvar seq__35989__$1 = cljs.core.next(seq__35989);\nvar suffix = first__35990;\nvar more = seq__35989__$1;\nvar n__$1 = n;\nvar G__35987__$1 = G__35987;\nwhile(true){\nvar n__$2 = n__$1;\nvar vec__35994 = G__35987__$1;\nvar seq__35995 = cljs.core.seq(vec__35994);\nvar first__35996 = cljs.core.first(seq__35995);\nvar seq__35995__$1 = cljs.core.next(seq__35995);\nvar suffix__$1 = first__35996;\nvar more__$1 = seq__35995__$1;\nif(((cljs.core.seq(more__$1)) && ((n__$2 >= (1024))))){\nvar G__36036 = (n__$2 / 1024.0);\nvar G__36037 = more__$1;\nn__$1 = G__36036;\nG__35987__$1 = G__36037;\ncontinue;\n} else {\nreturn metabase.util.format.format_with_unit(n__$2,suffix__$1);\n}\nbreak;\n}\n});\n/**\n * Colorize string `x` using `color`, a symbol or keyword, but only if `MB_COLORIZE_LOGS` is enabled (the default).\n *   `color` can be `green`, `red`, `yellow`, `blue`, `cyan`, `magenta`, etc. See the entire list of avaliable\n *   colors [here](https://github.com/ibdknox/colorize/blob/master/src/colorize/core.clj)\n */\nmetabase.util.format.colorize = (function metabase$util$format$colorize(_,x){\nreturn cljs.core.str.cljs$core$IFn$_invoke$arity$1(x);\n});\n/**\n * With one arg, converts something to a string and colorizes it. With two args, behaves like `format`, but colorizes\n *   the output.\n * \n *  (format-color :red \"%d cans\" 2)\n */\nmetabase.util.format.format_color = (function metabase$util$format$format_color(var_args){\nvar G__36015 = arguments.length;\nswitch (G__36015) {\ncase 2:\nreturn metabase.util.format.format_color.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ndefault:\nvar args_arr__5794__auto__ = [];\nvar len__5769__auto___36040 = arguments.length;\nvar i__5770__auto___36041 = (0);\nwhile(true){\nif((i__5770__auto___36041 < len__5769__auto___36040)){\nargs_arr__5794__auto__.push((arguments[i__5770__auto___36041]));\n\nvar G__36042 = (i__5770__auto___36041 + (1));\ni__5770__auto___36041 = G__36042;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__5795__auto__ = (new cljs.core.IndexedSeq(args_arr__5794__auto__.slice((2)),(0),null));\nreturn metabase.util.format.format_color.cljs$core$IFn$_invoke$arity$variadic((arguments[(0)]),(arguments[(1)]),argseq__5795__auto__);\n\n}\n});\n\n(metabase.util.format.format_color.cljs$core$IFn$_invoke$arity$2 = (function (color,x){\nreturn metabase.util.format.colorize(color,x);\n}));\n\n(metabase.util.format.format_color.cljs$core$IFn$_invoke$arity$variadic = (function (color,format_str,args){\nreturn metabase.util.format.colorize(color,cljs.core.apply.cljs$core$IFn$_invoke$arity$3(goog.string.format,format_str,args));\n}));\n\n/** @this {Function} */\n(metabase.util.format.format_color.cljs$lang$applyTo = (function (seq36008){\nvar G__36009 = cljs.core.first(seq36008);\nvar seq36008__$1 = cljs.core.next(seq36008);\nvar G__36010 = cljs.core.first(seq36008__$1);\nvar seq36008__$2 = cljs.core.next(seq36008__$1);\nvar self__5754__auto__ = this;\nreturn self__5754__auto__.cljs$core$IFn$_invoke$arity$variadic(G__36009,G__36010,seq36008__$2);\n}));\n\n(metabase.util.format.format_color.cljs$lang$maxFixedArity = (2));\n\n","~:ns-info",["^ ","~:rename-macros",null,"~:renames",["^ "],"~:meta",["^ ","~:file","metabase/util/format.cljc","~:line",1,"~:column",5,"~:end-line",1,"~:end-column",25],"~:ns-aliases",["^ ","~$cljs.loader","~$shadow.loader","~$clojure.core","~$cljs.core","~$clojure.spec.gen.alpha","~$cljs.spec.gen.alpha","~$clojure.pprint","~$cljs.pprint","~$clojure.core.match","~$cljs.core.match"],"~:use-macros",null,"~:excludes",["~#set",[]],"~:name","~$metabase.util.format","~:reader-aliases",["^ "],"~:op","~:ns","~:imports",null,"~:requires",["^ ","~$goog.string","^P","~$gstring","^P","^?","^?","~$goog","^R"],"~:seen",["^H",["~:require"]],"~:uses",null,"~:require-macros",["^ ","^?","^?"],"~:form",["~#list",["~$ns","^J",["^X",["^T",["^P","~:as","^Q"]]]]],"~:flags",["^ ","^T",["^H",[]]],"~:js-deps",["^ "],"~:deps",["^R","^?","^P"]],"^M","^J","~:resource-id",["~:shadow.build.classpath/resource","metabase/util/format.cljc"],"~:compiled-at",1692612506552,"^K",["^ ","^P","^P","^Q","^P","^?","^?","^R","^R"],"~:resource-name","metabase/util/format.cljc","~:warnings",[],"~:source","(ns metabase.util.format\n  #?(:clj  (:require\n            [colorize.core :as colorize]\n            [metabase.config :as config])\n     :cljs (:require\n            [goog.string :as gstring])))\n\n(defn- format-with-unit [n suffix]\n  #?(:clj  (format \"%.1f %s\" n suffix)\n     :cljs (str (.toFixed n 1) \" \" suffix)))\n\n(defn format-nanoseconds\n  \"Format a time interval in nanoseconds to something more readable. (µs/ms/etc.)\"\n  ^String [nanoseconds]\n  ;; The basic idea is to take `n` and see if it's greater than the divisior. If it is, we'll print it out as that\n  ;; unit. If more, we'll divide by the divisor and recur, trying each successively larger unit in turn. e.g.\n  ;;\n  ;; (format-nanoseconds 500)    ; -> \"500 ns\"\n  ;; (format-nanoseconds 500000) ; -> \"500 µs\"\n  (loop [n nanoseconds, [[unit divisor] & more] [[:ns 1000] [:µs 1000] [:ms 1000] [:s 60] [:mins 60] [:hours 24]\n                                                 [:days 7] [:weeks (/ 365.25 7)]\n                                                 [:years #?(:clj  Double/POSITIVE_INFINITY\n                                                            :cljs js/Number.POSITIVE_INFINITY)]]]\n    (if (and (> n divisor)\n             (seq more))\n      (recur (/ n divisor) more)\n      (format-with-unit (double n) (name unit)))))\n\n(defn format-microseconds\n  \"Format a time interval in microseconds into something more readable.\"\n  ^String [microseconds]\n  (format-nanoseconds (* 1000.0 microseconds)))\n\n(defn format-milliseconds\n  \"Format a time interval in milliseconds into something more readable.\"\n  ^String [milliseconds]\n  (format-microseconds (* 1000.0 milliseconds)))\n\n(defn format-seconds\n  \"Format a time interval in seconds into something more readable.\"\n  ^String [seconds]\n  (format-milliseconds (* 1000.0 seconds)))\n\n(defn format-bytes\n  \"Nicely format `num-bytes` as kilobytes/megabytes/etc.\n\n    (format-bytes 1024) ; -> 2.0 KB\"\n  [num-bytes]\n  (loop [n num-bytes [suffix & more] [\"B\" \"KB\" \"MB\" \"GB\"]]\n    (if (and (seq more)\n             (>= n 1024))\n      (recur (/ n 1024.0) more)\n      (format-with-unit n suffix))))\n\n#?(:clj\n   (def ^:private colorize?\n     ;; As of 0.35.0 we support the NO_COLOR env var. See https://no-color.org/ (But who hates color logs?)\n     (if (config/config-str :no-color)\n       false\n       (config/config-bool :mb-colorize-logs))))\n\n(def ^{:arglists '(^String [color-symb x])} colorize\n  \"Colorize string `x` using `color`, a symbol or keyword, but only if `MB_COLORIZE_LOGS` is enabled (the default).\n  `color` can be `green`, `red`, `yellow`, `blue`, `cyan`, `magenta`, etc. See the entire list of avaliable\n  colors [here](https://github.com/ibdknox/colorize/blob/master/src/colorize/core.clj)\"\n  #?(:clj  (if colorize?\n             (fn [color x]\n               (colorize/color (keyword color) (str x)))\n             (fn [_ x]\n               (str x)))\n     :cljs (fn [_ x]\n             (str x))))\n\n(defn format-color\n  \"With one arg, converts something to a string and colorizes it. With two args, behaves like `format`, but colorizes\n  the output.\n\n    (format-color :red \\\"%d cans\\\" 2)\"\n  {:arglists '(^String [color x] ^String [color format-string & args])}\n  (^String [color x]\n   (colorize color x))\n\n  (^String [color format-str & args]\n   (colorize color (apply #?(:clj format :cljs gstring/format) format-str args))))\n","~:reader-features",["^H",["~:cljs-release","~:cljs"]],"~:cljc",true,"~:source-map-compact",["^ ","mappings","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","names",["metabase.util.format/format-with-unit","n","suffix","metabase.util.format/format-nanoseconds","nanoseconds","G__35960","vec__35961","seq__35962","cljs.core/seq","first__35963","cljs.core/first","cljs.core/next","vec__35964","cljs.core.nth","vec__35974","seq__35975","first__35976","vec__35977","unit","divisor","more","js/Number.POSITIVE_INFINITY","cljs.core/name","metabase.util.format/format-microseconds","microseconds","metabase.util.format/format-milliseconds","milliseconds","metabase.util.format/format-seconds","seconds","metabase.util.format/format-bytes","num-bytes","G__35987","vec__35988","seq__35989","first__35990","vec__35994","seq__35995","first__35996","metabase.util.format/colorize","_","x","var_args","G__36015","metabase.util.format/format-color","args-arr__5794__auto__","len__5769__auto__","i__5770__auto__","argseq__5795__auto__","cljs.core/IndexedSeq","seq36008","G__36009","G__36010","self__5754__auto__","color","format-str","args","cljs.core.apply","goog.string/format"]],"~:used-vars",["^H",["~$metabase.util.format/format-nanoseconds","~$metabase.util.format/format-milliseconds","~$cljs.core/IndexedSeq","~$cljs.core/seq","~$cljs.core/apply","~$goog.string/format","~$js/Number.POSITIVE_INFINITY","~$metabase.util.format/format-microseconds","~$metabase.util.format/format-bytes","~$cljs.core/nth","~$metabase.util.format/format-color","~$cljs.core/next","~$metabase.util.format/format-with-unit","~$metabase.util.format/format-seconds","~$cljs.core/first","~$metabase.util.format/colorize","~$cljs.core/name"]]],"~:cache-keys",["~#cmap",[["^13","goog/dom/tagname.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","~:shadow.build.compiler/resolve",["^ ","~:require-id",null,"~:deps-ids",["^H",[]],"~:deps-syms",["^R","~$goog.dom.HtmlElement"]]],["^13","goog/html/trustedtypes.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^1S",["^ ","^1T",null,"^1U",["^H",[]],"^1V",["^R"]]],["^13","goog/labs/useragent/browser.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^1S",["^ ","^1T",null,"^1U",["^H",[]],"^1V",["^R","~$goog.labs.userAgent.util","~$goog.labs.userAgent.highEntropy.highEntropyValue","~$goog.asserts","~$goog.string.internal","~$goog.labs.userAgent.highEntropy.highEntropyData","~$goog.labs.userAgent"]]],["^13","goog/html/safeurl.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^1S",["^ ","^1T",null,"^1U",["^H",[]],"^1V",["^R","^1Z","~$goog.fs.url","~$goog.html.TrustedResourceUrl","~$goog.string.Const","~$goog.string.TypedString","^1["]]],["^13","goog/array/array.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^1S",["^ ","^1T",null,"^1U",["^H",[]],"^1V",["^R","^1Z"]]],["^13","goog/debug/error.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^1S",["^ ","^1T",null,"^1U",["^H",[]],"^1V",["^R"]]],["^13","goog/flags/flags.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^1S",["^ ","^1T",null,"^1U",["^H",[]],"^1V",["^R"]]],["^13","goog/dom/nodetype.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^1S",["^ ","^1T",null,"^1U",["^H",[]],"^1V",["^R"]]],["^13","goog/labs/useragent/highentropy/highentropyvalue.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^1S",["^ ","^1T",null,"^1U",["^H",[]],"^1V",["^R","^1X","^1["]]],["^13","goog/string/typedstring.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^1S",["^ ","^1T",null,"^1U",["^H",[]],"^1V",["^R"]]],["^13","goog/object/object.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^1S",["^ ","^1T",null,"^1U",["^H",[]],"^1V",["^R"]]],["^13","goog/dom/asserts.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^1S",["^ ","^1T",null,"^1U",["^H",[]],"^1V",["^R","^1Z"]]],"~:SHADOW-TIMESTAMP",[1689947046000,1689947046000,1689947050000],["^13","goog/math/long.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^1S",["^ ","^1T",null,"^1U",["^H",[]],"^1V",["^R","^1Z","~$goog.reflect"]]],["^13","goog/html/trustedresourceurl.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^1S",["^ ","^1T",null,"^1U",["^H",[]],"^1V",["^R","^1Z","~$goog.fs.blob","^22","~$goog.html.SafeScript","~$goog.html.trustedtypes","^24","^25"]]],["^13","metabase/util/format.cljc"],["875f86a08288cb3ad5a6f15df988897eaf8613af","^1S",["^ ","^1T",null,"^1U",["^H",[]],"^1V",["^R","^?","^P"]]],["^13","goog/string/internal.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^1S",["^ ","^1T",null,"^1U",["^H",[]],"^1V",["^R"]]],["^13","goog/functions/functions.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^1S",["^ ","^1T",null,"^1U",["^H",[]],"^1V",["^R"]]],["^13","goog/html/safestyle.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^1S",["^ ","^1T",null,"^1U",["^H",[]],"^1V",["^R","^24","~$goog.html.SafeUrl","^25","^1Z","^1["]]],["^13","goog/dom/safe.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^1S",["^ ","^1T",null,"^1U",["^H",[]],"^1V",["^R","^1Z","~$goog.asserts.dom","~$goog.dom.asserts","~$goog.functions","~$goog.html.SafeHtml","^29","~$goog.html.SafeStyle","^2;","^23","~$goog.html.uncheckedconversions","^24","^1["]]],["^13","goog/asserts/dom.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^1S",["^ ","^1T",null,"^1U",["^H",[]],"^1V",["^R","~$goog.dom.TagName","^1Z","~$goog.dom.element"]]],["^13","goog/html/safehtml.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^1S",["^ ","^1T",null,"^1U",["^H",[]],"^1V",["^R","^24","^29","^2@","~$goog.html.SafeStyleSheet","^2;","^2B","^23","^25","^1Z","~$goog.labs.userAgent.browser","~$goog.array","~$goog.object","^1[","~$goog.dom.tags","^2:"]]],["^13","goog/dom/tags.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^1S",["^ ","^1T",null,"^1U",["^H",[]],"^1V",["^R","^2G"]]],["^13","goog/fs/blob.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^1S",["^ ","^1T",null,"^1U",["^H",[]],"^1V",["^R"]]],["^13","goog/asserts/asserts.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^1S",["^ ","^1T",null,"^1U",["^H",[]],"^1V",["^R","~$goog.debug.Error","~$goog.dom.NodeType"]]],["^13","goog/uri/uri.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^1S",["^ ","^1T",null,"^1U",["^H",[]],"^1V",["^R","^2F","^1Z","~$goog.collections.maps","^P","~$goog.structs","~$goog.uri.utils","~$goog.uri.utils.ComponentIndex","~$goog.uri.utils.StandardQueryParam"]]],["^13","goog/labs/useragent/highentropy/highentropydata.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^1S",["^ ","^1T",null,"^1U",["^H",[]],"^1V",["^R","^1Y"]]],["^13","goog/collections/maps.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^1S",["^ ","^1T",null,"^1U",["^H",[]],"^1V",["^R"]]],["^13","goog/fs/url.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^1S",["^ ","^1T",null,"^1U",["^H",[]],"^1V",["^R"]]],["^13","goog/base.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^1S",["^ ","^1T",null,"^1U",["^H",[]],"^1V",[]]],["^13","goog/structs/structs.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^1S",["^ ","^1T",null,"^1U",["^H",[]],"^1V",["^R","^2F","^2G"]]],["^13","goog/string/string.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^1S",["^ ","^1T",null,"^1U",["^H",[]],"^1V",["^R","~$goog.dom.safe","^2A","^24","^1["]]],["^13","goog/reflect/reflect.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^1S",["^ ","^1T",null,"^1U",["^H",[]],"^1V",["^R"]]],["^13","goog/labs/useragent/util.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^1S",["^ ","^1T",null,"^1U",["^H",[]],"^1V",["^R","^1[","^21"]]],["^13","goog/string/stringbuffer.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^1S",["^ ","^1T",null,"^1U",["^H",[]],"^1V",["^R"]]],["^13","goog/labs/useragent/useragent.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^1S",["^ ","^1T",null,"^1U",["^H",[]],"^1V",["^R","~$goog.flags"]]],["^13","goog/dom/element.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^1S",["^ ","^1T",null,"^1U",["^H",[]],"^1V",["^R","^2J","^2B"]]],["^13","goog/html/uncheckedconversions.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^1S",["^ ","^1T",null,"^1U",["^H",[]],"^1V",["^R","^1Z","^2?","^29","^2@","^2D","^2;","^23","^24","^1["]]],["^13","goog/dom/htmlelement.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^1S",["^ ","^1T",null,"^1U",["^H",[]],"^1V",["^R"]]],["^13","cljs/core.cljs"],["bc14df6666853ed869d7b88aaa864111c65d0c7f","^1S",["^ ","^1T",null,"^1U",["^H",[]],"^1V",["^R","~$goog.math.Long","~$goog.math.Integer","^P","^2G","^2F","~$goog.Uri","~$goog.string.StringBuffer"]]],["^13","goog/html/safescript.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^1S",["^ ","^1T",null,"^1U",["^H",[]],"^1V",["^R","^24","^25","^2:","^1Z"]]],["^13","goog/html/safestylesheet.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^1S",["^ ","^1T",null,"^1U",["^H",[]],"^1V",["^R","^24","^2@","^25","^2G","^1Z","^1["]]],["^13","goog/math/integer.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^1S",["^ ","^1T",null,"^1U",["^H",[]],"^1V",["^R","^27"]]],["^13","goog/uri/utils.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^1S",["^ ","^1T",null,"^1U",["^H",[]],"^1V",["^R","^1Z","^P"]]],["^13","goog/string/const.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^1S",["^ ","^1T",null,"^1U",["^H",[]],"^1V",["^R","^1Z","^25"]]]]],"~:clj-info",["^ ","jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/analyzer/impl.cljc",1689947050000,"jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/source_map/base64_vlq.clj",1689947050000,"jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/instant.clj",1689947050000,"jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/externs.clj",1689947050000,"jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/vendor/clojure/tools/reader/default_data_readers.clj",1689947050000,"jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/compiler.cljc",1689947050000,"jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/env.cljc",1689947050000,"jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/analyzer/impl/namespaces.cljc",1689947050000,"jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/source_map.clj",1689947050000,"jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/util.cljc",1689947050000,"jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/analyzer.cljc",1689947050000,"jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/analyzer/passes.cljc",1689947050000,"jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/vendor/clojure/data/json.clj",1689947050000,"jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/source_map/base64.clj",1689947050000,"jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/vendor/clojure/tools/reader/reader_types.clj",1689947050000,"jar:file:/root/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/set.clj",1689946092000,"jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/vendor/clojure/tools/reader/impl/inspect.clj",1689947050000,"jar:file:/root/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/string.clj",1689946092000,"jar:file:/root/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/core.clj",1689946092000,"jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/analyzer/passes/and_or.cljc",1689947050000,"jar:file:/root/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/pprint.clj",1689946092000,"jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/js_deps.cljc",1689947050000,"jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/core.cljc",1689947050000,"jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/vendor/clojure/tools/reader.clj",1689947050000,"jar:file:/root/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/edn.clj",1689946092000,"jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/vendor/clojure/tools/reader/impl/errors.clj",1689947050000,"jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/tagged_literals.cljc",1689947050000,"jar:file:/root/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/java/io.clj",1689946092000,"jar:file:/root/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/instant.clj",1689946092000],"~:analyzer",["^ ","^3",null,"^4",["^ "],"^5",["^ ","^6","metabase/util/format.cljc","^7",1,"^8",5,"^9",1,"^:",25],"^;",["^ ","^<","^=","^>","^?","^@","^A","^B","^C","^D","^E"],"^F",null,"^G",["^H",[]],"~:shadow/js-access-properties",["^H",["POSITIVE_INFINITY"]],"^I","^J","^K",["^ "],"^N",null,"^O",["^ ","^P","^P","^Q","^P","^?","^?","^R","^R"],"^S",["^H",["^T"]],"~:shadow/js-access-global",["^H",["Number"]],"^U",null,"~:defs",["^ ","~$format-with-unit",["^ ","~:protocol-inline",null,"^5",["^ ","^6","metabase/util/format.cljc","^7",8,"^8",8,"^9",8,"^:",24,"~:private",true,"~:arglists",["^X",["~$quote",["^X",[["~$n","~$suffix"]]]]]],"^3N",true,"^I","^1L","^6","metabase/util/format.cljc","^:",24,"~:method-params",["^X",[["~$n","^3Q"]]],"~:protocol-impl",null,"~:arglists-meta",["^X",[null,null]],"^8",1,"~:variadic?",false,"^7",8,"~:ret-tag","~$string","^9",8,"~:max-fixed-arity",2,"~:fn-var",true,"^3O",["^X",["^3P",["^X",[["~$n","^3Q"]]]]]],"~$format-nanoseconds",["^ ","^3M",null,"^5",["^ ","^6","metabase/util/format.cljc","^7",12,"^8",7,"^9",12,"^:",25,"^3O",["^X",["^3P",["^X",[["~$nanoseconds"]]]]],"~:doc","Format a time interval in nanoseconds to something more readable. (µs/ms/etc.)"],"^I","^1@","^6","metabase/util/format.cljc","^:",25,"^3R",["^X",[["^3["]]],"^3S",null,"^3T",["^X",[null,null]],"^8",1,"^3U",false,"^7",12,"^3V","^3W","^9",12,"^3X",1,"^3Y",true,"^3O",["^X",["^3P",["^X",[["^3["]]]]],"^40","Format a time interval in nanoseconds to something more readable. (µs/ms/etc.)"],"~$format-microseconds",["^ ","^3M",null,"^5",["^ ","^6","metabase/util/format.cljc","^7",29,"^8",7,"^9",29,"^:",26,"^3O",["^X",["^3P",["^X",[["~$microseconds"]]]]],"^40","Format a time interval in microseconds into something more readable."],"^I","^1G","^6","metabase/util/format.cljc","^:",26,"^3R",["^X",[["^42"]]],"^3S",null,"^3T",["^X",[null,null]],"^8",1,"^3U",false,"^7",29,"^3V","^3W","^9",29,"^3X",1,"^3Y",true,"^3O",["^X",["^3P",["^X",[["^42"]]]]],"^40","Format a time interval in microseconds into something more readable."],"~$format-milliseconds",["^ ","^3M",null,"^5",["^ ","^6","metabase/util/format.cljc","^7",34,"^8",7,"^9",34,"^:",26,"^3O",["^X",["^3P",["^X",[["~$milliseconds"]]]]],"^40","Format a time interval in milliseconds into something more readable."],"^I","^1A","^6","metabase/util/format.cljc","^:",26,"^3R",["^X",[["^44"]]],"^3S",null,"^3T",["^X",[null,null]],"^8",1,"^3U",false,"^7",34,"^3V","^3W","^9",34,"^3X",1,"^3Y",true,"^3O",["^X",["^3P",["^X",[["^44"]]]]],"^40","Format a time interval in milliseconds into something more readable."],"~$format-seconds",["^ ","^3M",null,"^5",["^ ","^6","metabase/util/format.cljc","^7",39,"^8",7,"^9",39,"^:",21,"^3O",["^X",["^3P",["^X",[["~$seconds"]]]]],"^40","Format a time interval in seconds into something more readable."],"^I","^1M","^6","metabase/util/format.cljc","^:",21,"^3R",["^X",[["^46"]]],"^3S",null,"^3T",["^X",[null,null]],"^8",1,"^3U",false,"^7",39,"^3V","^3W","^9",39,"^3X",1,"^3Y",true,"^3O",["^X",["^3P",["^X",[["^46"]]]]],"^40","Format a time interval in seconds into something more readable."],"~$format-bytes",["^ ","^3M",null,"^5",["^ ","^6","metabase/util/format.cljc","^7",44,"^8",7,"^9",44,"^:",19,"^3O",["^X",["^3P",["^X",[["~$num-bytes"]]]]],"^40","Nicely format `num-bytes` as kilobytes/megabytes/etc.\n\n    (format-bytes 1024) ; -> 2.0 KB"],"^I","^1H","^6","metabase/util/format.cljc","^:",19,"^3R",["^X",[["^48"]]],"^3S",null,"^3T",["^X",[null,null]],"^8",1,"^3U",false,"^7",44,"^3V","^3W","^9",44,"^3X",1,"^3Y",true,"^3O",["^X",["^3P",["^X",[["^48"]]]]],"^40","Nicely format `num-bytes` as kilobytes/megabytes/etc.\n\n    (format-bytes 1024) ; -> 2.0 KB"],"~$colorize",["^ ","^3M",null,"^5",["^ ","^6","metabase/util/format.cljc","^7",62,"^8",45,"^9",62,"^:",53,"^3O",["^X",["^3P",["^X",[["~$color-symb","~$x"]]]]]],"^I","^1O","^6","metabase/util/format.cljc","^:",53,"^3R",["^X",[["~$_","~$x"]]],"^3S",null,"^3T",["^X",[null,["^ ","^6","metabase/util/format.cljc","^7",62,"^8",19,"^9",62,"^:",43]]],"^8",1,"^3U",false,"^7",62,"^3V","^3W","^9",62,"^3X",2,"^3Y",true,"^3O",["^X",["^3P",["^X",[["^4:","~$x"]]]]],"^40","Colorize string `x` using `color`, a symbol or keyword, but only if `MB_COLORIZE_LOGS` is enabled (the default).\n  `color` can be `green`, `red`, `yellow`, `blue`, `cyan`, `magenta`, etc. See the entire list of avaliable\n  colors [here](https://github.com/ibdknox/colorize/blob/master/src/colorize/core.clj)"],"~$format-color",["^ ","^3M",null,"^5",["^ ","^6","metabase/util/format.cljc","^7",74,"^8",7,"^9",74,"^:",19,"^3O",["^X",["^3P",["^X",[["~$color","~$x"],["^4<","~$format-string","~$&","~$args"]]]]],"^40","With one arg, converts something to a string and colorizes it. With two args, behaves like `format`, but colorizes\n  the output.\n\n    (format-color :red \"%d cans\" 2)","~:top-fn",["^ ","^3U",true,"~:fixed-arity",2,"^3X",2,"^3R",[["^4<","~$x"]],"^3O",["^X",[["^4<","~$x"],["^4<","~$format-str","~$&","^4>"]]],"^3T",["^X",[null,null]]]],"^I","^1J","^6","metabase/util/format.cljc","^:",19,"^4?",["^ ","^3U",true,"^4@",2,"^3X",2,"^3R",[["^4<","~$x"]],"^3O",["^X",[["^4<","~$x"],["^4<","^4A","~$&","^4>"]]],"^3T",["^X",[null,null]]],"^3R",[["^4<","~$x"]],"^3S",null,"^4@",2,"^3T",["^X",[null,null]],"^8",1,"^3U",true,"~:methods",[["^ ","^4@",2,"^3U",false,"~:tag","^3W"],["^ ","^4@",2,"^3U",true,"^4C","^3W"]],"^7",74,"^9",74,"^3X",2,"^3Y",true,"^3O",["^X",[["^4<","~$x"],["^4<","^4A","~$&","^4>"]]],"^40","With one arg, converts something to a string and colorizes it. With two args, behaves like `format`, but colorizes\n  the output.\n\n    (format-color :red \"%d cans\" 2)"]],"^V",["^ ","^?","^?"],"~:cljs.analyzer/constants",["^ ","^S",["^H",["^M","~:days","~:mins","~:µs","~:s","~:hours","~:years","~:ms","~:weeks"]],"~:order",["^M","^4G","^4J","~:s","^4F","^4H","^4E","^4K","^4I"]],"^[",["^ ","^T",["^H",[]]],"^10",["^ "],"^11",["^R","^?","^P"]],"^M","^J","~:ns-specs",["^ "],"~:ns-spec-vars",["^H",[]],"~:compiler-options",["^1R",[["^4O","~:static-fns"],true,["^4O","~:shadow-tweaks"],null,["^4O","~:source-map-inline"],null,["^4O","~:elide-asserts"],true,["^4O","~:optimize-constants"],null,["^4O","^16"],null,["^4O","~:external-config"],null,["^4O","~:tooling-config"],null,["^4O","~:emit-constants"],null,["^4O","~:load-tests"],false,["^4O","~:form-size-threshold"],null,["^4O","~:global-goog-object&array"],null,["^4O","~:data-readers"],null,["^4O","~:infer-externs"],"~:auto",["^4O","^18"],["^H",["^19"]],["~:js-options","~:js-provider"],"^T",["~:mode"],"~:release",["^4O","~:fn-invoke-direct"],null,["^4O","~:source-map"],null]]]