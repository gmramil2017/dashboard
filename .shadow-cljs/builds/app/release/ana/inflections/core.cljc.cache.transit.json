["^ ","~:output",["^ ","~:js","goog.provide('inflections.core');\n/**\n * Coerce the string `s` to the type of `obj`.\n */\ninflections.core.coerce = (function inflections$core$coerce(obj,s){\nif((obj instanceof cljs.core.Keyword)){\nreturn cljs.core.keyword.cljs$core$IFn$_invoke$arity$1(s);\n} else {\nif((obj instanceof cljs.core.Symbol)){\nreturn cljs.core.symbol.cljs$core$IFn$_invoke$arity$1(s);\n} else {\nreturn s;\n\n}\n}\n});\n\n/**\n* @constructor\n * @implements {cljs.core.IRecord}\n * @implements {cljs.core.IKVReduce}\n * @implements {cljs.core.IEquiv}\n * @implements {cljs.core.IHash}\n * @implements {cljs.core.ICollection}\n * @implements {cljs.core.ICounted}\n * @implements {cljs.core.ISeqable}\n * @implements {cljs.core.IMeta}\n * @implements {cljs.core.ICloneable}\n * @implements {cljs.core.IPrintWithWriter}\n * @implements {cljs.core.IIterable}\n * @implements {cljs.core.IWithMeta}\n * @implements {cljs.core.IAssociative}\n * @implements {cljs.core.IMap}\n * @implements {cljs.core.ILookup}\n*/\ninflections.core.Rule = (function (pattern,replacement,__meta,__extmap,__hash){\nthis.pattern = pattern;\nthis.replacement = replacement;\nthis.__meta = __meta;\nthis.__extmap = __extmap;\nthis.__hash = __hash;\nthis.cljs$lang$protocol_mask$partition0$ = 2230716170;\nthis.cljs$lang$protocol_mask$partition1$ = 139264;\n});\n(inflections.core.Rule.prototype.cljs$core$ILookup$_lookup$arity$2 = (function (this__5343__auto__,k__5344__auto__){\nvar self__ = this;\nvar this__5343__auto____$1 = this;\nreturn this__5343__auto____$1.cljs$core$ILookup$_lookup$arity$3(null,k__5344__auto__,null);\n}));\n\n(inflections.core.Rule.prototype.cljs$core$ILookup$_lookup$arity$3 = (function (this__5345__auto__,k41475,else__5346__auto__){\nvar self__ = this;\nvar this__5345__auto____$1 = this;\nvar G__41481 = k41475;\nvar G__41481__$1 = (((G__41481 instanceof cljs.core.Keyword))?G__41481.fqn:null);\nswitch (G__41481__$1) {\ncase \"pattern\":\nreturn self__.pattern;\n\nbreak;\ncase \"replacement\":\nreturn self__.replacement;\n\nbreak;\ndefault:\nreturn cljs.core.get.cljs$core$IFn$_invoke$arity$3(self__.__extmap,k41475,else__5346__auto__);\n\n}\n}));\n\n(inflections.core.Rule.prototype.cljs$core$IKVReduce$_kv_reduce$arity$3 = (function (this__5363__auto__,f__5364__auto__,init__5365__auto__){\nvar self__ = this;\nvar this__5363__auto____$1 = this;\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$3((function (ret__5366__auto__,p__41483){\nvar vec__41484 = p__41483;\nvar k__5367__auto__ = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__41484,(0),null);\nvar v__5368__auto__ = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__41484,(1),null);\nreturn (f__5364__auto__.cljs$core$IFn$_invoke$arity$3 ? f__5364__auto__.cljs$core$IFn$_invoke$arity$3(ret__5366__auto__,k__5367__auto__,v__5368__auto__) : f__5364__auto__.call(null,ret__5366__auto__,k__5367__auto__,v__5368__auto__));\n}),init__5365__auto__,this__5363__auto____$1);\n}));\n\n(inflections.core.Rule.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = (function (this__5358__auto__,writer__5359__auto__,opts__5360__auto__){\nvar self__ = this;\nvar this__5358__auto____$1 = this;\nvar pr_pair__5361__auto__ = (function (keyval__5362__auto__){\nreturn cljs.core.pr_sequential_writer(writer__5359__auto__,cljs.core.pr_writer,\"\",\" \",\"\",opts__5360__auto__,keyval__5362__auto__);\n});\nreturn cljs.core.pr_sequential_writer(writer__5359__auto__,pr_pair__5361__auto__,\"#inflections.core.Rule{\",\", \",\"}\",opts__5360__auto__,cljs.core.concat.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(new cljs.core.PersistentVector(null,2,(5),cljs.core.PersistentVector.EMPTY_NODE,[new cljs.core.Keyword(null,\"pattern\",\"pattern\",242135423),self__.pattern],null)),(new cljs.core.PersistentVector(null,2,(5),cljs.core.PersistentVector.EMPTY_NODE,[new cljs.core.Keyword(null,\"replacement\",\"replacement\",-1836238839),self__.replacement],null))], null),self__.__extmap));\n}));\n\n(inflections.core.Rule.prototype.cljs$core$IIterable$_iterator$arity$1 = (function (G__41474){\nvar self__ = this;\nvar G__41474__$1 = this;\nreturn (new cljs.core.RecordIter((0),G__41474__$1,2,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"pattern\",\"pattern\",242135423),new cljs.core.Keyword(null,\"replacement\",\"replacement\",-1836238839)], null),(cljs.core.truth_(self__.__extmap)?cljs.core._iterator(self__.__extmap):cljs.core.nil_iter())));\n}));\n\n(inflections.core.Rule.prototype.cljs$core$IMeta$_meta$arity$1 = (function (this__5341__auto__){\nvar self__ = this;\nvar this__5341__auto____$1 = this;\nreturn self__.__meta;\n}));\n\n(inflections.core.Rule.prototype.cljs$core$ICloneable$_clone$arity$1 = (function (this__5338__auto__){\nvar self__ = this;\nvar this__5338__auto____$1 = this;\nreturn (new inflections.core.Rule(self__.pattern,self__.replacement,self__.__meta,self__.__extmap,self__.__hash));\n}));\n\n(inflections.core.Rule.prototype.cljs$core$ICounted$_count$arity$1 = (function (this__5347__auto__){\nvar self__ = this;\nvar this__5347__auto____$1 = this;\nreturn (2 + cljs.core.count(self__.__extmap));\n}));\n\n(inflections.core.Rule.prototype.cljs$core$IHash$_hash$arity$1 = (function (this__5339__auto__){\nvar self__ = this;\nvar this__5339__auto____$1 = this;\nvar h__5154__auto__ = self__.__hash;\nif((!((h__5154__auto__ == null)))){\nreturn h__5154__auto__;\n} else {\nvar h__5154__auto____$1 = (function (coll__5340__auto__){\nreturn (-1327743444 ^ cljs.core.hash_unordered_coll(coll__5340__auto__));\n})(this__5339__auto____$1);\n(self__.__hash = h__5154__auto____$1);\n\nreturn h__5154__auto____$1;\n}\n}));\n\n(inflections.core.Rule.prototype.cljs$core$IEquiv$_equiv$arity$2 = (function (this41476,other41477){\nvar self__ = this;\nvar this41476__$1 = this;\nreturn (((!((other41477 == null)))) && ((((this41476__$1.constructor === other41477.constructor)) && (((cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(this41476__$1.pattern,other41477.pattern)) && (((cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(this41476__$1.replacement,other41477.replacement)) && (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(this41476__$1.__extmap,other41477.__extmap)))))))));\n}));\n\n(inflections.core.Rule.prototype.cljs$core$IMap$_dissoc$arity$2 = (function (this__5353__auto__,k__5354__auto__){\nvar self__ = this;\nvar this__5353__auto____$1 = this;\nif(cljs.core.contains_QMARK_(new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"replacement\",\"replacement\",-1836238839),null,new cljs.core.Keyword(null,\"pattern\",\"pattern\",242135423),null], null), null),k__5354__auto__)){\nreturn cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(cljs.core._with_meta(cljs.core.into.cljs$core$IFn$_invoke$arity$2(cljs.core.PersistentArrayMap.EMPTY,this__5353__auto____$1),self__.__meta),k__5354__auto__);\n} else {\nreturn (new inflections.core.Rule(self__.pattern,self__.replacement,self__.__meta,cljs.core.not_empty(cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(self__.__extmap,k__5354__auto__)),null));\n}\n}));\n\n(inflections.core.Rule.prototype.cljs$core$IAssociative$_contains_key_QMARK_$arity$2 = (function (this__5350__auto__,k41475){\nvar self__ = this;\nvar this__5350__auto____$1 = this;\nvar G__41502 = k41475;\nvar G__41502__$1 = (((G__41502 instanceof cljs.core.Keyword))?G__41502.fqn:null);\nswitch (G__41502__$1) {\ncase \"pattern\":\ncase \"replacement\":\nreturn true;\n\nbreak;\ndefault:\nreturn cljs.core.contains_QMARK_(self__.__extmap,k41475);\n\n}\n}));\n\n(inflections.core.Rule.prototype.cljs$core$IAssociative$_assoc$arity$3 = (function (this__5351__auto__,k__5352__auto__,G__41474){\nvar self__ = this;\nvar this__5351__auto____$1 = this;\nvar pred__41503 = cljs.core.keyword_identical_QMARK_;\nvar expr__41504 = k__5352__auto__;\nif(cljs.core.truth_((pred__41503.cljs$core$IFn$_invoke$arity$2 ? pred__41503.cljs$core$IFn$_invoke$arity$2(new cljs.core.Keyword(null,\"pattern\",\"pattern\",242135423),expr__41504) : pred__41503.call(null,new cljs.core.Keyword(null,\"pattern\",\"pattern\",242135423),expr__41504)))){\nreturn (new inflections.core.Rule(G__41474,self__.replacement,self__.__meta,self__.__extmap,null));\n} else {\nif(cljs.core.truth_((pred__41503.cljs$core$IFn$_invoke$arity$2 ? pred__41503.cljs$core$IFn$_invoke$arity$2(new cljs.core.Keyword(null,\"replacement\",\"replacement\",-1836238839),expr__41504) : pred__41503.call(null,new cljs.core.Keyword(null,\"replacement\",\"replacement\",-1836238839),expr__41504)))){\nreturn (new inflections.core.Rule(self__.pattern,G__41474,self__.__meta,self__.__extmap,null));\n} else {\nreturn (new inflections.core.Rule(self__.pattern,self__.replacement,self__.__meta,cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(self__.__extmap,k__5352__auto__,G__41474),null));\n}\n}\n}));\n\n(inflections.core.Rule.prototype.cljs$core$ISeqable$_seq$arity$1 = (function (this__5356__auto__){\nvar self__ = this;\nvar this__5356__auto____$1 = this;\nreturn cljs.core.seq(cljs.core.concat.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(new cljs.core.MapEntry(new cljs.core.Keyword(null,\"pattern\",\"pattern\",242135423),self__.pattern,null)),(new cljs.core.MapEntry(new cljs.core.Keyword(null,\"replacement\",\"replacement\",-1836238839),self__.replacement,null))], null),self__.__extmap));\n}));\n\n(inflections.core.Rule.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = (function (this__5342__auto__,G__41474){\nvar self__ = this;\nvar this__5342__auto____$1 = this;\nreturn (new inflections.core.Rule(self__.pattern,self__.replacement,G__41474,self__.__extmap,self__.__hash));\n}));\n\n(inflections.core.Rule.prototype.cljs$core$ICollection$_conj$arity$2 = (function (this__5348__auto__,entry__5349__auto__){\nvar self__ = this;\nvar this__5348__auto____$1 = this;\nif(cljs.core.vector_QMARK_(entry__5349__auto__)){\nreturn this__5348__auto____$1.cljs$core$IAssociative$_assoc$arity$3(null,cljs.core._nth(entry__5349__auto__,(0)),cljs.core._nth(entry__5349__auto__,(1)));\n} else {\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core._conj,this__5348__auto____$1,entry__5349__auto__);\n}\n}));\n\n(inflections.core.Rule.getBasis = (function (){\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Symbol(null,\"pattern\",\"pattern\",1882666950,null),new cljs.core.Symbol(null,\"replacement\",\"replacement\",-195707312,null)], null);\n}));\n\n(inflections.core.Rule.cljs$lang$type = true);\n\n(inflections.core.Rule.cljs$lang$ctorPrSeq = (function (this__5389__auto__){\nreturn (new cljs.core.List(null,\"inflections.core/Rule\",null,(1),null));\n}));\n\n(inflections.core.Rule.cljs$lang$ctorPrWriter = (function (this__5389__auto__,writer__5390__auto__){\nreturn cljs.core._write(writer__5390__auto__,\"inflections.core/Rule\");\n}));\n\n/**\n * Positional factory function for inflections.core/Rule.\n */\ninflections.core.__GT_Rule = (function inflections$core$__GT_Rule(pattern,replacement){\nreturn (new inflections.core.Rule(pattern,replacement,null,null,null));\n});\n\n/**\n * Factory function for inflections.core/Rule, taking a map of keywords to field values.\n */\ninflections.core.map__GT_Rule = (function inflections$core$map__GT_Rule(G__41479){\nvar extmap__5385__auto__ = (function (){var G__41516 = cljs.core.dissoc.cljs$core$IFn$_invoke$arity$variadic(G__41479,new cljs.core.Keyword(null,\"pattern\",\"pattern\",242135423),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"replacement\",\"replacement\",-1836238839)], 0));\nif(cljs.core.record_QMARK_(G__41479)){\nreturn cljs.core.into.cljs$core$IFn$_invoke$arity$2(cljs.core.PersistentArrayMap.EMPTY,G__41516);\n} else {\nreturn G__41516;\n}\n})();\nreturn (new inflections.core.Rule(new cljs.core.Keyword(null,\"pattern\",\"pattern\",242135423).cljs$core$IFn$_invoke$arity$1(G__41479),new cljs.core.Keyword(null,\"replacement\",\"replacement\",-1836238839).cljs$core$IFn$_invoke$arity$1(G__41479),null,cljs.core.not_empty(extmap__5385__auto__),null));\n});\n\ninflections.core.add_rule_BANG_ = (function inflections$core$add_rule_BANG_(rules,rule){\nif((!(cljs.core.contains_QMARK_(cljs.core.set(cljs.core.deref(rules)),rule)))){\nreturn cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$3(rules,cljs.core.conj,rule);\n} else {\nreturn null;\n}\n});\n/**\n * Returns a seq of rules, where the pattern and replacement must be\n *   given in pairs of two elements.\n */\ninflections.core.slurp_rules = (function inflections$core$slurp_rules(var_args){\nvar args__5775__auto__ = [];\nvar len__5769__auto___41938 = arguments.length;\nvar i__5770__auto___41939 = (0);\nwhile(true){\nif((i__5770__auto___41939 < len__5769__auto___41938)){\nargs__5775__auto__.push((arguments[i__5770__auto___41939]));\n\nvar G__41940 = (i__5770__auto___41939 + (1));\ni__5770__auto___41939 = G__41940;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__5776__auto__ = ((((0) < args__5775__auto__.length))?(new cljs.core.IndexedSeq(args__5775__auto__.slice((0)),(0),null)):null);\nreturn inflections.core.slurp_rules.cljs$core$IFn$_invoke$arity$variadic(argseq__5776__auto__);\n});\n\n(inflections.core.slurp_rules.cljs$core$IFn$_invoke$arity$variadic = (function (patterns_and_replacements){\nreturn cljs.core.map.cljs$core$IFn$_invoke$arity$2((function (p1__41521_SHARP_){\nreturn cljs.core.apply.cljs$core$IFn$_invoke$arity$2(inflections.core.__GT_Rule,p1__41521_SHARP_);\n}),cljs.core.partition.cljs$core$IFn$_invoke$arity$2((2),patterns_and_replacements));\n}));\n\n(inflections.core.slurp_rules.cljs$lang$maxFixedArity = (0));\n\n/** @this {Function} */\n(inflections.core.slurp_rules.cljs$lang$applyTo = (function (seq41522){\nvar self__5755__auto__ = this;\nreturn self__5755__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq41522));\n}));\n\ninflections.core.resolve_rule = (function inflections$core$resolve_rule(rule,word){\nif(cljs.core.truth_((function (){var and__5043__auto__ = rule;\nif(cljs.core.truth_(and__5043__auto__)){\nreturn word;\n} else {\nreturn and__5043__auto__;\n}\n})())){\nvar pattern = new cljs.core.Keyword(null,\"pattern\",\"pattern\",242135423).cljs$core$IFn$_invoke$arity$1(rule);\nvar replacement = new cljs.core.Keyword(null,\"replacement\",\"replacement\",-1836238839).cljs$core$IFn$_invoke$arity$1(rule);\nif(cljs.core.truth_(cljs.core.re_find(pattern,word))){\nreturn clojure.string.replace(word,pattern,replacement);\n} else {\nreturn null;\n}\n} else {\nreturn null;\n}\n});\ninflections.core.resolve_rules = (function inflections$core$resolve_rules(rules,word){\nreturn cljs.core.first(cljs.core.keep.cljs$core$IFn$_invoke$arity$2((function (p1__41525_SHARP_){\nreturn inflections.core.resolve_rule(p1__41525_SHARP_,word);\n}),rules));\n});\n/**\n * Resets the list of plural rules.\n */\ninflections.core.reset_rules_BANG_ = (function inflections$core$reset_rules_BANG_(rules){\nreturn cljs.core.reset_BANG_(rules,cljs.core.PersistentVector.EMPTY);\n});\n/**\n * Same as `clojure.core/name`, but keeps the namespace for keywords\n *   and symbols.\n */\ninflections.core.str_name = (function inflections$core$str_name(x){\nif((x == null)){\nreturn x;\n} else {\nif(typeof x === 'string'){\nreturn x;\n} else {\nif((((x instanceof cljs.core.Keyword)) || ((x instanceof cljs.core.Symbol)))){\nvar temp__5802__auto__ = cljs.core.namespace(x);\nif(cljs.core.truth_(temp__5802__auto__)){\nvar ns = temp__5802__auto__;\nreturn [ns,\"/\",cljs.core.name(x)].join('');\n} else {\nreturn cljs.core.name(x);\n}\n} else {\nreturn null;\n}\n}\n}\n});\ninflections.core._STAR_uncountable_words_STAR_ = cljs.core.atom.cljs$core$IFn$_invoke$arity$1(new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 81, [\"gossip\",null,\"sadness\",null,\"space\",null,\"happiness\",null,\"blood\",null,\"silver\",null,\"cotton\",null,\"species\",null,\"mist\",null,\"paper\",null,\"education\",null,\"wine\",null,\"up\",null,\"food\",null,\"sugar\",null,\"gold\",null,\"literature\",null,\"pork\",null,\"lightning\",null,\"sheep\",null,\"shopping\",null,\"fresh\",null,\"news\",null,\"pepper\",null,\"experience\",null,\"milk\",null,\"honey\",null,\"oxygen\",null,\"fiction\",null,\"luck\",null,\"vinegar\",null,\"coffee\",null,\"ground\",null,\"peanut\",null,\"confusion\",null,\"tennis\",null,\"power\",null,\"meat\",null,\"butter\",null,\"music\",null,\"luggage\",null,\"love\",null,\"grass\",null,\"knowledge\",null,\"time\",null,\"cheese\",null,\"jam\",null,\"thunder\",null,\"electricity\",null,\"gum\",null,\"sunshine\",null,\"history\",null,\"snow\",null,\"money\",null,\"wool\",null,\"rice\",null,\"series\",null,\"liquid\",null,\"equipment\",null,\"pressure\",null,\"oil\",null,\"information\",null,\"steam\",null,\"chewing\",null,\"petrol\",null,\"research\",null,\"patience\",null,\"toothpaste\",null,\"speed\",null,\"entertainment\",null,\"wood\",null,\"tea\",null,\"art\",null,\"washing\",null,\"forgiveness\",null,\"traffic\",null,\"alcohol\",null,\"ice\",null,\"homework\",null,\"fish\",null,\"air\",null], null), null));\ninflections.core._STAR_acronyms_STAR_ = cljs.core.atom.cljs$core$IFn$_invoke$arity$1(new cljs.core.PersistentArrayMap(null, 2, [\"hst\",\"HST\",\"nasa\",\"NASA\"], null));\n/**\n * Returns the the acronym for `s` if it is one, otherwise nil.\n */\ninflections.core.acronym = (function inflections$core$acronym(s){\nif(cljs.core.truth_(s)){\nvar G__41532 = inflections.core.str_name(s);\nvar G__41532__$1 = (((G__41532 == null))?null:clojure.string.lower_case(G__41532));\nvar G__41532__$2 = (((G__41532__$1 == null))?null:cljs.core.get.cljs$core$IFn$_invoke$arity$2(cljs.core.deref(inflections.core._STAR_acronyms_STAR_),G__41532__$1));\nif((G__41532__$2 == null)){\nreturn null;\n} else {\nreturn inflections.core.coerce(s,G__41532__$2);\n}\n} else {\nreturn null;\n}\n});\n/**\n * Adds `word` to the set of `*acronyms*`.\n */\ninflections.core.add_acronym_BANG_ = (function inflections$core$add_acronym_BANG_(word){\nreturn cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4(inflections.core._STAR_acronyms_STAR_,cljs.core.assoc,clojure.string.lower_case(inflections.core.str_name(word)),inflections.core.str_name(word));\n});\n/**\n * Delete `word` from the set of `*acronyms*`.\n */\ninflections.core.delete_acronym_BANG_ = (function inflections$core$delete_acronym_BANG_(word){\nreturn cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$3(inflections.core._STAR_acronyms_STAR_,cljs.core.dissoc,clojure.string.lower_case(inflections.core.str_name(word)));\n});\n/**\n * Returns true if `s` is countable, otherwise false.\n */\ninflections.core.countable_QMARK_ = (function inflections$core$countable_QMARK_(s){\nif(cljs.core.truth_(s)){\nreturn (!(cljs.core.contains_QMARK_(cljs.core.deref(inflections.core._STAR_uncountable_words_STAR_),clojure.string.lower_case(inflections.core.str_name(s)))));\n} else {\nreturn null;\n}\n});\n/**\n * Returns true if `x` is uncountable, otherwise false.\n */\ninflections.core.uncountable_QMARK_ = (function inflections$core$uncountable_QMARK_(x){\nif(cljs.core.truth_(x)){\nreturn cljs.core.not(inflections.core.countable_QMARK_(x));\n} else {\nreturn null;\n}\n});\n/**\n * Adds `word` to the set of `*uncountable-words*`.\n */\ninflections.core.add_uncountable_BANG_ = (function inflections$core$add_uncountable_BANG_(word){\nreturn cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$3(inflections.core._STAR_uncountable_words_STAR_,cljs.core.conj,clojure.string.lower_case(inflections.core.str_name(word)));\n});\n/**\n * Delete `word` from the set of `*uncountable-words*`.\n */\ninflections.core.delete_uncountable_BANG_ = (function inflections$core$delete_uncountable_BANG_(word){\nreturn cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$3(inflections.core._STAR_uncountable_words_STAR_,cljs.core.disj,clojure.string.lower_case(inflections.core.str_name(word)));\n});\ninflections.core._STAR_plural_rules_STAR_ = cljs.core.atom.cljs$core$IFn$_invoke$arity$1(cljs.core.PersistentVector.EMPTY);\n/**\n * Returns the plural of s.\n */\ninflections.core.plural = (function inflections$core$plural(s){\nvar s__$1 = inflections.core.str_name(s);\nif(cljs.core.truth_((function (){var or__5045__auto__ = clojure.string.blank_QMARK_(s__$1);\nif(or__5045__auto__){\nreturn or__5045__auto__;\n} else {\nreturn inflections.core.uncountable_QMARK_(s__$1);\n}\n})())){\nreturn s__$1;\n} else {\nreturn inflections.core.resolve_rules(cljs.core.rseq(cljs.core.deref(inflections.core._STAR_plural_rules_STAR_)),s__$1);\n}\n});\n/**\n * Define rule(s) to map words from singular to plural.\n * \n *   Examples: (plural! #\"$(?i)\" \"s\")\n *          (plural! #\"(ax|test)is$(?i)\" \"$1es\"\n *                   #\"(octop|vir)us$(?i)\" \"$1i\")\n */\ninflections.core.plural_BANG_ = (function inflections$core$plural_BANG_(var_args){\nvar args__5775__auto__ = [];\nvar len__5769__auto___41963 = arguments.length;\nvar i__5770__auto___41964 = (0);\nwhile(true){\nif((i__5770__auto___41964 < len__5769__auto___41963)){\nargs__5775__auto__.push((arguments[i__5770__auto___41964]));\n\nvar G__41965 = (i__5770__auto___41964 + (1));\ni__5770__auto___41964 = G__41965;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__5776__auto__ = ((((0) < args__5775__auto__.length))?(new cljs.core.IndexedSeq(args__5775__auto__.slice((0)),(0),null)):null);\nreturn inflections.core.plural_BANG_.cljs$core$IFn$_invoke$arity$variadic(argseq__5776__auto__);\n});\n\n(inflections.core.plural_BANG_.cljs$core$IFn$_invoke$arity$variadic = (function (patterns_and_replacements){\nvar seq__41538 = cljs.core.seq(cljs.core.apply.cljs$core$IFn$_invoke$arity$2(inflections.core.slurp_rules,patterns_and_replacements));\nvar chunk__41539 = null;\nvar count__41540 = (0);\nvar i__41541 = (0);\nwhile(true){\nif((i__41541 < count__41540)){\nvar rule = chunk__41539.cljs$core$IIndexed$_nth$arity$2(null,i__41541);\ninflections.core.add_rule_BANG_(inflections.core._STAR_plural_rules_STAR_,rule);\n\n\nvar G__41967 = seq__41538;\nvar G__41968 = chunk__41539;\nvar G__41969 = count__41540;\nvar G__41970 = (i__41541 + (1));\nseq__41538 = G__41967;\nchunk__41539 = G__41968;\ncount__41540 = G__41969;\ni__41541 = G__41970;\ncontinue;\n} else {\nvar temp__5804__auto__ = cljs.core.seq(seq__41538);\nif(temp__5804__auto__){\nvar seq__41538__$1 = temp__5804__auto__;\nif(cljs.core.chunked_seq_QMARK_(seq__41538__$1)){\nvar c__5568__auto__ = cljs.core.chunk_first(seq__41538__$1);\nvar G__41971 = cljs.core.chunk_rest(seq__41538__$1);\nvar G__41972 = c__5568__auto__;\nvar G__41973 = cljs.core.count(c__5568__auto__);\nvar G__41974 = (0);\nseq__41538 = G__41971;\nchunk__41539 = G__41972;\ncount__41540 = G__41973;\ni__41541 = G__41974;\ncontinue;\n} else {\nvar rule = cljs.core.first(seq__41538__$1);\ninflections.core.add_rule_BANG_(inflections.core._STAR_plural_rules_STAR_,rule);\n\n\nvar G__41975 = cljs.core.next(seq__41538__$1);\nvar G__41976 = null;\nvar G__41977 = (0);\nvar G__41978 = (0);\nseq__41538 = G__41975;\nchunk__41539 = G__41976;\ncount__41540 = G__41977;\ni__41541 = G__41978;\ncontinue;\n}\n} else {\nreturn null;\n}\n}\nbreak;\n}\n}));\n\n(inflections.core.plural_BANG_.cljs$lang$maxFixedArity = (0));\n\n/** @this {Function} */\n(inflections.core.plural_BANG_.cljs$lang$applyTo = (function (seq41537){\nvar self__5755__auto__ = this;\nreturn self__5755__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq41537));\n}));\n\ninflections.core.init_plural_rules_BANG_ = (function inflections$core$init_plural_rules_BANG_(){\nreturn inflections.core.plural_BANG_.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([/$/i,\"s\",/s$/i,\"s\",/(ax|test)is$/i,\"$1es\",/(octop|vir)us$/i,\"$1i\",/(alias|status)$/i,\"$1es\",/(bu)s$/i,\"$1ses\",/(buffal|tomat)o$/i,\"$1oes\",/([ti])um$/i,\"$1a\",/sis$/i,\"ses\",/(?:([^f])fe|([lr])f)$/i,\"$1$2ves\",/(hive)$/i,\"$1s\",/([^aeiouy]|qu)y$/i,\"$1ies\",/(x|ch|ss|sh)$/i,\"$1es\",/(matr|vert|ind)(?:ix|ex)$/i,\"$1ices\",/([m|l])ouse$/i,\"$1ice\",/^(ox)$/i,\"$1en\",/(quiz)$/i,\"$1zes\"], 0));\n});\ninflections.core._STAR_singular_rules_STAR_ = cljs.core.atom.cljs$core$IFn$_invoke$arity$1(cljs.core.PersistentVector.EMPTY);\n/**\n * Returns the singular of s.\n */\ninflections.core.singular = (function inflections$core$singular(s){\nvar s_SINGLEQUOTE_ = inflections.core.str_name(s);\nif(cljs.core.not(inflections.core.uncountable_QMARK_(s_SINGLEQUOTE_))){\nreturn inflections.core.coerce(s,(function (){var or__5045__auto__ = inflections.core.resolve_rules(cljs.core.rseq(cljs.core.deref(inflections.core._STAR_singular_rules_STAR_)),s_SINGLEQUOTE_);\nif(cljs.core.truth_(or__5045__auto__)){\nreturn or__5045__auto__;\n} else {\nreturn s_SINGLEQUOTE_;\n}\n})());\n} else {\nreturn s;\n}\n});\n/**\n * Define rule(s) to map words from singular to plural.\n * \n *   Examples: (singular! #\"(n)ews$(?i)\" \"$1ews\")\n *          (singular! #\"(m)ovies$(?i)\" \"$1ovie\"\n *                     #\"([m|l])ice$(?i)\" \"$1ouse\")\n */\ninflections.core.singular_BANG_ = (function inflections$core$singular_BANG_(var_args){\nvar args__5775__auto__ = [];\nvar len__5769__auto___41979 = arguments.length;\nvar i__5770__auto___41980 = (0);\nwhile(true){\nif((i__5770__auto___41980 < len__5769__auto___41979)){\nargs__5775__auto__.push((arguments[i__5770__auto___41980]));\n\nvar G__41981 = (i__5770__auto___41980 + (1));\ni__5770__auto___41980 = G__41981;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__5776__auto__ = ((((0) < args__5775__auto__.length))?(new cljs.core.IndexedSeq(args__5775__auto__.slice((0)),(0),null)):null);\nreturn inflections.core.singular_BANG_.cljs$core$IFn$_invoke$arity$variadic(argseq__5776__auto__);\n});\n\n(inflections.core.singular_BANG_.cljs$core$IFn$_invoke$arity$variadic = (function (patterns_and_replacements){\nvar seq__41551 = cljs.core.seq(cljs.core.apply.cljs$core$IFn$_invoke$arity$2(inflections.core.slurp_rules,patterns_and_replacements));\nvar chunk__41552 = null;\nvar count__41553 = (0);\nvar i__41554 = (0);\nwhile(true){\nif((i__41554 < count__41553)){\nvar rule = chunk__41552.cljs$core$IIndexed$_nth$arity$2(null,i__41554);\ninflections.core.add_rule_BANG_(inflections.core._STAR_singular_rules_STAR_,rule);\n\n\nvar G__41986 = seq__41551;\nvar G__41987 = chunk__41552;\nvar G__41988 = count__41553;\nvar G__41989 = (i__41554 + (1));\nseq__41551 = G__41986;\nchunk__41552 = G__41987;\ncount__41553 = G__41988;\ni__41554 = G__41989;\ncontinue;\n} else {\nvar temp__5804__auto__ = cljs.core.seq(seq__41551);\nif(temp__5804__auto__){\nvar seq__41551__$1 = temp__5804__auto__;\nif(cljs.core.chunked_seq_QMARK_(seq__41551__$1)){\nvar c__5568__auto__ = cljs.core.chunk_first(seq__41551__$1);\nvar G__41990 = cljs.core.chunk_rest(seq__41551__$1);\nvar G__41991 = c__5568__auto__;\nvar G__41992 = cljs.core.count(c__5568__auto__);\nvar G__41993 = (0);\nseq__41551 = G__41990;\nchunk__41552 = G__41991;\ncount__41553 = G__41992;\ni__41554 = G__41993;\ncontinue;\n} else {\nvar rule = cljs.core.first(seq__41551__$1);\ninflections.core.add_rule_BANG_(inflections.core._STAR_singular_rules_STAR_,rule);\n\n\nvar G__41994 = cljs.core.next(seq__41551__$1);\nvar G__41995 = null;\nvar G__41996 = (0);\nvar G__41997 = (0);\nseq__41551 = G__41994;\nchunk__41552 = G__41995;\ncount__41553 = G__41996;\ni__41554 = G__41997;\ncontinue;\n}\n} else {\nreturn null;\n}\n}\nbreak;\n}\n}));\n\n(inflections.core.singular_BANG_.cljs$lang$maxFixedArity = (0));\n\n/** @this {Function} */\n(inflections.core.singular_BANG_.cljs$lang$applyTo = (function (seq41549){\nvar self__5755__auto__ = this;\nreturn self__5755__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq41549));\n}));\n\ninflections.core.init_singular_rules_BANG_ = (function inflections$core$init_singular_rules_BANG_(){\nreturn inflections.core.singular_BANG_.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([/s$/i,\"\",/(ss)$/i,\"$1\",/(n)ews$/i,\"$1ews\",/([ti])a$/i,\"$1um\",/((a)naly|(b)a|(d)iagno|(p)arenthe|(p)rogno|(s)ynop|(t)he)(sis|ses)$/i,\"$1$2sis\",/(^analy)(sis|ses)$/i,\"$1sis\",/([^f])ves$/i,\"$1fe\",/(hive)s$/i,\"$1\",/(tive)s$/i,\"$1\",/([lr])ves$/i,\"$1f\",/([^aeiouy]|qu)ies$/i,\"$1y\",/(s)eries$/i,\"$1eries\",/(m)ovies$/i,\"$1ovie\",/(x|ch|ss|sh)es$/i,\"$1\",/([m|l])ice$/i,\"$1ouse\",/(bus)(es)?$/i,\"$1\",/(o)es$/i,\"$1\",/(shoe)s$/i,\"$1\",/(cris|ax|test)(is|es)$/i,\"$1is\",/(octop|vir)(us|i)$/i,\"$1us\",/(alias|status)(es)?$/i,\"$1\",/^(ox)en/i,\"$1\",/(vert|ind)ices$/i,\"$1ex\",/(matr)ices$/i,\"$1ix\",/(quiz)zes$/i,\"$1\",/(database)s$/i,\"$1\"], 0));\n});\ninflections.core._STAR_irregular_words_STAR_ = cljs.core.atom.cljs$core$IFn$_invoke$arity$1(cljs.core.sorted_set());\n/**\n * Returns true if `word` is an irregular word, otherwise false.\n */\ninflections.core.irregular_QMARK_ = (function inflections$core$irregular_QMARK_(word){\nif(cljs.core.truth_(word)){\nreturn cljs.core.contains_QMARK_(cljs.core.deref(inflections.core._STAR_irregular_words_STAR_),clojure.string.lower_case(inflections.core.str_name(word)));\n} else {\nreturn null;\n}\n});\n/**\n * Add `singular` and `plural` to the set of `*irregular-words*`.\n */\ninflections.core.add_irregular_BANG_ = (function inflections$core$add_irregular_BANG_(singular,plural){\nvar singular__$1 = clojure.string.lower_case(inflections.core.str_name(singular));\nvar plural__$1 = clojure.string.lower_case(inflections.core.str_name(plural));\ninflections.core.delete_uncountable_BANG_(singular__$1);\n\ninflections.core.delete_uncountable_BANG_(plural__$1);\n\ninflections.core.singular_BANG_.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([cljs.core.re_pattern([\"^\",plural__$1,\"$\"].join('')),singular__$1], 0));\n\ninflections.core.plural_BANG_.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([cljs.core.re_pattern([\"^\",singular__$1,\"$\"].join('')),plural__$1], 0));\n\ncljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$3(inflections.core._STAR_irregular_words_STAR_,cljs.core.conj,singular__$1);\n\nreturn cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$3(inflections.core._STAR_irregular_words_STAR_,cljs.core.conj,plural__$1);\n});\n/**\n * Delete `singular` and `plural` from the set of *irregular-words*.\n */\ninflections.core.delete_irregular_BANG_ = (function inflections$core$delete_irregular_BANG_(singular,plural){\nvar singular__$1 = clojure.string.lower_case(inflections.core.str_name(singular));\nvar plural__$1 = clojure.string.lower_case(inflections.core.str_name(plural));\ncljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$3(inflections.core._STAR_irregular_words_STAR_,cljs.core.disj,singular__$1);\n\nreturn cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$3(inflections.core._STAR_irregular_words_STAR_,cljs.core.disj,plural__$1);\n});\ninflections.core.init_irregular_words_BANG_ = (function inflections$core$init_irregular_words_BANG_(){\nreturn cljs.core.doall.cljs$core$IFn$_invoke$arity$1(cljs.core.map.cljs$core$IFn$_invoke$arity$2((function (p1__41594_SHARP_){\nreturn inflections.core.add_irregular_BANG_(cljs.core.first(p1__41594_SHARP_),cljs.core.second(p1__41594_SHARP_));\n}),new cljs.core.PersistentVector(null, 14, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [\"amenity\",\"amenities\"], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [\"child\",\"children\"], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [\"cow\",\"kine\"], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [\"foot\",\"feet\"], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [\"louse\",\"lice\"], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [\"mailman\",\"mailmen\"], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [\"man\",\"men\"], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [\"mouse\",\"mice\"], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [\"move\",\"moves\"], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [\"ox\",\"oxen\"], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [\"person\",\"people\"], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [\"sex\",\"sexes\"], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [\"tooth\",\"teeth\"], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [\"woman\",\"women\"], null)], null)));\n});\n/**\n * Convert `word` to camel case. By default, camel-case converts to\n *   UpperCamelCase. If the argument to camel-case is set to :lower then\n *   camel-case produces lowerCamelCase.\n * \n *   Examples:\n * \n *  (camel-case \"active_record\")\n *  ;=> \"ActiveRecord\"\n * \n *  (camel-case \"active_record\" :lower)\n *  ;=> \"activeRecord\"\n * \n *  (camel-case \"active_record/errors\")\n *  ;=> \"ActiveRecord/Errors\"\n * \n *  (camel-case \"active_record/errors\" :lower)\n *  ;=> \"activeRecord/Errors\"\n */\ninflections.core.camel_case = (function inflections$core$camel_case(var_args){\nvar args__5775__auto__ = [];\nvar len__5769__auto___42000 = arguments.length;\nvar i__5770__auto___42002 = (0);\nwhile(true){\nif((i__5770__auto___42002 < len__5769__auto___42000)){\nargs__5775__auto__.push((arguments[i__5770__auto___42002]));\n\nvar G__42003 = (i__5770__auto___42002 + (1));\ni__5770__auto___42002 = G__42003;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__5776__auto__ = ((((1) < args__5775__auto__.length))?(new cljs.core.IndexedSeq(args__5775__auto__.slice((1)),(0),null)):null);\nreturn inflections.core.camel_case.cljs$core$IFn$_invoke$arity$variadic((arguments[(0)]),argseq__5776__auto__);\n});\n\n(inflections.core.camel_case.cljs$core$IFn$_invoke$arity$variadic = (function (word,p__41615){\nvar vec__41616 = p__41615;\nvar mode = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__41616,(0),null);\nif(cljs.core.truth_(word)){\nreturn inflections.core.coerce(word,(function (){var word__$1 = inflections.core.str_name(word);\nif(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(mode,new cljs.core.Keyword(null,\"lower\",\"lower\",1120320821))){\nreturn inflections.core.camel_case.cljs$core$IFn$_invoke$arity$variadic(word__$1,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([clojure.string.lower_case], 0));\n} else {\nif(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(mode,new cljs.core.Keyword(null,\"upper\",\"upper\",246243906))){\nreturn inflections.core.camel_case.cljs$core$IFn$_invoke$arity$variadic(word__$1,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([clojure.string.upper_case], 0));\n} else {\nif(cljs.core.fn_QMARK_(mode)){\nreturn [cljs.core.str.cljs$core$IFn$_invoke$arity$1((function (){var G__41628 = cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.first(word__$1));\nreturn (mode.cljs$core$IFn$_invoke$arity$1 ? mode.cljs$core$IFn$_invoke$arity$1(G__41628) : mode.call(null,G__41628));\n})()),cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.str,cljs.core.rest(inflections.core.camel_case.cljs$core$IFn$_invoke$arity$variadic(word__$1,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([null], 0)))))].join('');\n} else {\nreturn clojure.string.replace(clojure.string.replace(word__$1,/\\/(.?)/,(function (p1__41601_SHARP_){\nreturn [\"/\",clojure.string.upper_case(cljs.core.nth.cljs$core$IFn$_invoke$arity$2(p1__41601_SHARP_,(1)))].join('');\n})),/(^|_|-)(.)/,(function (p1__41603_SHARP_){\nvar vec__41629 = p1__41603_SHARP_;\nvar _ = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__41629,(0),null);\nvar ___$1 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__41629,(1),null);\nvar letter_to_uppercase = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__41629,(2),null);\nreturn clojure.string.upper_case(letter_to_uppercase);\n}));\n\n}\n}\n}\n})());\n} else {\nreturn null;\n}\n}));\n\n(inflections.core.camel_case.cljs$lang$maxFixedArity = (1));\n\n/** @this {Function} */\n(inflections.core.camel_case.cljs$lang$applyTo = (function (seq41604){\nvar G__41605 = cljs.core.first(seq41604);\nvar seq41604__$1 = cljs.core.next(seq41604);\nvar self__5754__auto__ = this;\nreturn self__5754__auto__.cljs$core$IFn$_invoke$arity$variadic(G__41605,seq41604__$1);\n}));\n\n/**\n * Convert the first letter in `word` to upper case.\n * \n *   Examples:\n * \n *  (capitalize \"hello\")\n *  ;=> \"Hello\"\n * \n *  (capitalize \"HELLO\")\n *  ;=> \"Hello\"\n * \n *  (capitalize \"abc123\")\n *  ;=> \"Abc123\"\n */\ninflections.core.capitalize = (function inflections$core$capitalize(word){\nif(cljs.core.truth_(word)){\nvar temp__5802__auto__ = inflections.core.acronym(word);\nif(cljs.core.truth_(temp__5802__auto__)){\nvar acronym = temp__5802__auto__;\nreturn acronym;\n} else {\nvar word_SINGLEQUOTE_ = inflections.core.str_name(word);\nreturn inflections.core.coerce(word,[clojure.string.upper_case(cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.first(word_SINGLEQUOTE_))),((cljs.core.next(word_SINGLEQUOTE_))?clojure.string.lower_case(cljs.core.subs.cljs$core$IFn$_invoke$arity$2(word_SINGLEQUOTE_,(1))):null)].join(''));\n}\n} else {\nreturn null;\n}\n});\n/**\n * Convert `s` into a title.\n */\ninflections.core.titleize = (function inflections$core$titleize(s){\nif(cljs.core.truth_(s)){\nreturn clojure.string.join.cljs$core$IFn$_invoke$arity$2(\" \",cljs.core.map.cljs$core$IFn$_invoke$arity$2(inflections.core.capitalize,clojure.string.split.cljs$core$IFn$_invoke$arity$2(inflections.core.str_name(s),/[-_.\\/ ]/)));\n} else {\nreturn null;\n}\n});\n/**\n * Replaces all underscores in `s` with dashes.\n * \n *   Examples:\n * \n *  (dasherize \"puni_puni\")\n *  ;=> \"puni-puni\"\n */\ninflections.core.dasherize = (function inflections$core$dasherize(s){\nif(cljs.core.truth_(s)){\nreturn inflections.core.coerce(s,clojure.string.replace(inflections.core.str_name(s),/_/,\"-\"));\n} else {\nreturn null;\n}\n});\n/**\n * Removes the module part from `x`.\n * \n *   Examples:\n * \n *  (demodulize \"inflections.MyRecord\")\n *  ;=> \"MyRecord\"\n * \n *  (demodulize \"ActiveRecord::CoreExtensions::String::Inflections\")\n *  ;=> \"Inflections\"\n * \n *  (demodulize \"Inflections\")\n *  ;=> \"Inflections\"\n */\ninflections.core.demodulize = (function inflections$core$demodulize(x){\nif(cljs.core.truth_(x)){\nreturn inflections.core.coerce(x,clojure.string.replace(inflections.core.str_name(x),/^.*(::|\\.)/,\"\"));\n} else {\nreturn null;\n}\n});\n/**\n * Hyphenate x, which is the same as threading `x` through the str,\n *   underscore and dasherize fns.\n * \n *   Examples:\n * \n *  (hyphenate 'Continent)\n *  ; => \"continent\"\n * \n *  (hyphenate \"CountryFlag\")\n *  ; => \"country-flag\"\n */\ninflections.core.hyphenate = (function inflections$core$hyphenate(x){\nif(cljs.core.truth_(x)){\nreturn inflections.core.coerce(x,clojure.string.lower_case(clojure.string.replace(clojure.string.replace(clojure.string.replace(clojure.string.replace(inflections.core.str_name(x),/([A-Z]+)([A-Z][a-z])/,\"$1-$2\"),/([a-z\\d])([A-Z])/,\"$1-$2\"),/\\s+/,\"-\"),/_/,\"-\")));\n} else {\nreturn null;\n}\n});\n/**\n * Turns `x` into an ordinal string used to denote the position in an\n *   ordered sequence such as 1st, 2nd, 3rd, 4th, etc.\n * \n *   Examples:\n * \n *  (ordinalize \"1\")\n *  ;=> \"1st\"\n * \n *  (ordinalize \"23\")\n *  ;=> \"23rd\"\n */\ninflections.core.ordinalize = (function inflections$core$ordinalize(x){\nvar temp__5802__auto__ = no.en.core.parse_integer(x);\nif(cljs.core.truth_(temp__5802__auto__)){\nvar number = temp__5802__auto__;\nif(cljs.core.contains_QMARK_(cljs.core.set(cljs.core.range.cljs$core$IFn$_invoke$arity$2((11),(14))),cljs.core.mod(number,(100)))){\nreturn [cljs.core.str.cljs$core$IFn$_invoke$arity$1(number),\"th\"].join('');\n} else {\nvar modulus = cljs.core.mod(number,(10));\nif(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(modulus,(1))){\nreturn [cljs.core.str.cljs$core$IFn$_invoke$arity$1(number),\"st\"].join('');\n} else {\nif(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(modulus,(2))){\nreturn [cljs.core.str.cljs$core$IFn$_invoke$arity$1(number),\"nd\"].join('');\n} else {\nif(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(modulus,(3))){\nreturn [cljs.core.str.cljs$core$IFn$_invoke$arity$1(number),\"rd\"].join('');\n} else {\nreturn [cljs.core.str.cljs$core$IFn$_invoke$arity$1(number),\"th\"].join('');\n\n}\n}\n}\n}\n} else {\nreturn null;\n}\n});\n/**\n * Replaces special characters in `x` with the default separator\n *   \"-\". so that it may be used as part of a pretty URL.\n * \n *   Examples:\n * \n *  (parameterize \"Donald E. Knuth\")\n *  ; => \"donald-e-knuth\"\n * \n *  (parameterize \"Donald E. Knuth\" \"_\")\n *  ; => \"donald_e_knuth\"\n */\ninflections.core.parameterize = (function inflections$core$parameterize(var_args){\nvar args__5775__auto__ = [];\nvar len__5769__auto___42014 = arguments.length;\nvar i__5770__auto___42015 = (0);\nwhile(true){\nif((i__5770__auto___42015 < len__5769__auto___42014)){\nargs__5775__auto__.push((arguments[i__5770__auto___42015]));\n\nvar G__42016 = (i__5770__auto___42015 + (1));\ni__5770__auto___42015 = G__42016;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__5776__auto__ = ((((1) < args__5775__auto__.length))?(new cljs.core.IndexedSeq(args__5775__auto__.slice((1)),(0),null)):null);\nreturn inflections.core.parameterize.cljs$core$IFn$_invoke$arity$variadic((arguments[(0)]),argseq__5776__auto__);\n});\n\n(inflections.core.parameterize.cljs$core$IFn$_invoke$arity$variadic = (function (x,p__41711){\nvar vec__41712 = p__41711;\nvar sep = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__41712,(0),null);\nif(cljs.core.truth_(x)){\nvar sep__$1 = (function (){var or__5045__auto__ = sep;\nif(cljs.core.truth_(or__5045__auto__)){\nreturn or__5045__auto__;\n} else {\nreturn \"-\";\n}\n})();\nreturn clojure.string.lower_case(clojure.string.replace(clojure.string.replace(clojure.string.replace(clojure.string.replace(inflections.core.str_name(x),/[^A-Za-z0-9]+/,sep__$1),/\\++/,sep__$1),cljs.core.re_pattern([cljs.core.str.cljs$core$IFn$_invoke$arity$1(sep__$1),\"{2,}\"].join('')),sep__$1),cljs.core.re_pattern([\"(?i)(^\",cljs.core.str.cljs$core$IFn$_invoke$arity$1(sep__$1),\")|(\",cljs.core.str.cljs$core$IFn$_invoke$arity$1(sep__$1),\"$)\"].join('')),\"\"));\n} else {\nreturn null;\n}\n}));\n\n(inflections.core.parameterize.cljs$lang$maxFixedArity = (1));\n\n/** @this {Function} */\n(inflections.core.parameterize.cljs$lang$applyTo = (function (seq41702){\nvar G__41703 = cljs.core.first(seq41702);\nvar seq41702__$1 = cljs.core.next(seq41702);\nvar self__5754__auto__ = this;\nreturn self__5754__auto__.cljs$core$IFn$_invoke$arity$variadic(G__41703,seq41702__$1);\n}));\n\n/**\n * Attempts to pluralize the word unless count is 1. If plural is\n *   supplied, it will use that when count is > 1, otherwise it will use\n *   the inflector to determine the plural form.\n */\ninflections.core.pluralize = (function inflections$core$pluralize(var_args){\nvar args__5775__auto__ = [];\nvar len__5769__auto___42019 = arguments.length;\nvar i__5770__auto___42020 = (0);\nwhile(true){\nif((i__5770__auto___42020 < len__5769__auto___42019)){\nargs__5775__auto__.push((arguments[i__5770__auto___42020]));\n\nvar G__42022 = (i__5770__auto___42020 + (1));\ni__5770__auto___42020 = G__42022;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__5776__auto__ = ((((2) < args__5775__auto__.length))?(new cljs.core.IndexedSeq(args__5775__auto__.slice((2)),(0),null)):null);\nreturn inflections.core.pluralize.cljs$core$IFn$_invoke$arity$variadic((arguments[(0)]),(arguments[(1)]),argseq__5776__auto__);\n});\n\n(inflections.core.pluralize.cljs$core$IFn$_invoke$arity$variadic = (function (count,singular,p__41740){\nvar vec__41741 = p__41740;\nvar plural = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__41741,(0),null);\nreturn [cljs.core.str.cljs$core$IFn$_invoke$arity$1(count),\" \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(((cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2((1),count))?singular:(function (){var or__5045__auto__ = plural;\nif(cljs.core.truth_(or__5045__auto__)){\nreturn or__5045__auto__;\n} else {\nreturn inflections.core.plural(singular);\n}\n})()))].join('');\n}));\n\n(inflections.core.pluralize.cljs$lang$maxFixedArity = (2));\n\n/** @this {Function} */\n(inflections.core.pluralize.cljs$lang$applyTo = (function (seq41727){\nvar G__41728 = cljs.core.first(seq41727);\nvar seq41727__$1 = cljs.core.next(seq41727);\nvar G__41729 = cljs.core.first(seq41727__$1);\nvar seq41727__$2 = cljs.core.next(seq41727__$1);\nvar self__5754__auto__ = this;\nreturn self__5754__auto__.cljs$core$IFn$_invoke$arity$variadic(G__41728,G__41729,seq41727__$2);\n}));\n\n/**\n * The reverse of camel-case. Makes an underscored, lowercase form from\n *   the expression in the string.\n * \n *   Examples:\n * \n *  (underscore \"ActiveRecord\")\n *  ;=> \"active_record\"\n * \n *  (underscore \"ActiveRecord::Errors\")\n *  ;=> \"active_record::errors\"\n */\ninflections.core.underscore = (function inflections$core$underscore(x){\nif(cljs.core.truth_(x)){\nreturn inflections.core.coerce(x,clojure.string.lower_case(clojure.string.replace(clojure.string.replace(clojure.string.replace(inflections.core.str_name(x),/([A-Z\\d]+)([A-Z][a-z])/,\"$1_$2\"),/([a-z\\d])([A-Z])/,\"$1_$2\"),/-/,\"_\")));\n} else {\nreturn null;\n}\n});\n/**\n * Converts `x` into a foreign key. The default separator \"_\" is\n *   placed between the name and \"id\".\n * \n * \n *   Examples:\n * \n *  (foreign-key \"Message\")\n *  ;=> \"message_id\"\n * \n *  (foreign-key \"Message\" false)\n *  ;=> \"messageid\"\n * \n *  (foreign-key \"Admin::Post\")\n *  ;=> \"post_id\"\n */\ninflections.core.foreign_key = (function inflections$core$foreign_key(var_args){\nvar args__5775__auto__ = [];\nvar len__5769__auto___42024 = arguments.length;\nvar i__5770__auto___42025 = (0);\nwhile(true){\nif((i__5770__auto___42025 < len__5769__auto___42024)){\nargs__5775__auto__.push((arguments[i__5770__auto___42025]));\n\nvar G__42028 = (i__5770__auto___42025 + (1));\ni__5770__auto___42025 = G__42028;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__5776__auto__ = ((((1) < args__5775__auto__.length))?(new cljs.core.IndexedSeq(args__5775__auto__.slice((1)),(0),null)):null);\nreturn inflections.core.foreign_key.cljs$core$IFn$_invoke$arity$variadic((arguments[(0)]),argseq__5776__auto__);\n});\n\n(inflections.core.foreign_key.cljs$core$IFn$_invoke$arity$variadic = (function (x,p__41781){\nvar vec__41784 = p__41781;\nvar sep = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__41784,(0),null);\nvar x_SINGLEQUOTE_ = inflections.core.str_name(x);\nif(clojure.string.blank_QMARK_(x_SINGLEQUOTE_)){\nreturn null;\n} else {\nreturn inflections.core.coerce(x,[cljs.core.str.cljs$core$IFn$_invoke$arity$1(inflections.core.underscore(inflections.core.hyphenate(inflections.core.singular(inflections.core.demodulize(x_SINGLEQUOTE_))))),cljs.core.str.cljs$core$IFn$_invoke$arity$1((function (){var or__5045__auto__ = sep;\nif(cljs.core.truth_(or__5045__auto__)){\nreturn or__5045__auto__;\n} else {\nreturn \"_\";\n}\n})()),\"id\"].join(''));\n}\n}));\n\n(inflections.core.foreign_key.cljs$lang$maxFixedArity = (1));\n\n/** @this {Function} */\n(inflections.core.foreign_key.cljs$lang$applyTo = (function (seq41769){\nvar G__41770 = cljs.core.first(seq41769);\nvar seq41769__$1 = cljs.core.next(seq41769);\nvar self__5754__auto__ = this;\nreturn self__5754__auto__.cljs$core$IFn$_invoke$arity$variadic(G__41770,seq41769__$1);\n}));\n\n/**\n * Recursively transform all keys in the map `m` by applying `f` on them.\n */\ninflections.core.transform_keys = (function inflections$core$transform_keys(m,f){\nif(cljs.core.map_QMARK_(m)){\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$3((function (memo,key){\nvar value = cljs.core.get.cljs$core$IFn$_invoke$arity$2(m,key);\nreturn cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(memo,key),(f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(key) : f.call(null,key)),((cljs.core.map_QMARK_(value))?(inflections.core.transform_keys.cljs$core$IFn$_invoke$arity$2 ? inflections.core.transform_keys.cljs$core$IFn$_invoke$arity$2(value,f) : inflections.core.transform_keys.call(null,value,f)):((cljs.core.vector_QMARK_(value))?cljs.core.mapv.cljs$core$IFn$_invoke$arity$2((function (p1__41804_SHARP_){\nreturn (inflections.core.transform_keys.cljs$core$IFn$_invoke$arity$2 ? inflections.core.transform_keys.cljs$core$IFn$_invoke$arity$2(p1__41804_SHARP_,f) : inflections.core.transform_keys.call(null,p1__41804_SHARP_,f));\n}),value):((cljs.core.sequential_QMARK_(value))?cljs.core.map.cljs$core$IFn$_invoke$arity$2((function (p1__41805_SHARP_){\nreturn (inflections.core.transform_keys.cljs$core$IFn$_invoke$arity$2 ? inflections.core.transform_keys.cljs$core$IFn$_invoke$arity$2(p1__41805_SHARP_,f) : inflections.core.transform_keys.call(null,p1__41805_SHARP_,f));\n}),value):value\n))));\n}),m,cljs.core.keys(m));\n} else {\nreturn m;\n}\n});\n/**\n * Recursively transform all map values of m by applying f on them.\n */\ninflections.core.transform_values = (function inflections$core$transform_values(m,f){\nif(cljs.core.map_QMARK_(m)){\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$3((function (memo,key){\nvar value = cljs.core.get.cljs$core$IFn$_invoke$arity$2(m,key);\nreturn cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(memo,key,((cljs.core.map_QMARK_(value))?(inflections.core.transform_values.cljs$core$IFn$_invoke$arity$2 ? inflections.core.transform_values.cljs$core$IFn$_invoke$arity$2(value,f) : inflections.core.transform_values.call(null,value,f)):(f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(value) : f.call(null,value))));\n}),m,cljs.core.keys(m));\n} else {\nreturn m;\n}\n});\n/**\n * Recursively apply camel-case on all keys of m.\n */\ninflections.core.camel_case_keys = (function inflections$core$camel_case_keys(var_args){\nvar args__5775__auto__ = [];\nvar len__5769__auto___42038 = arguments.length;\nvar i__5770__auto___42039 = (0);\nwhile(true){\nif((i__5770__auto___42039 < len__5769__auto___42038)){\nargs__5775__auto__.push((arguments[i__5770__auto___42039]));\n\nvar G__42042 = (i__5770__auto___42039 + (1));\ni__5770__auto___42039 = G__42042;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__5776__auto__ = ((((1) < args__5775__auto__.length))?(new cljs.core.IndexedSeq(args__5775__auto__.slice((1)),(0),null)):null);\nreturn inflections.core.camel_case_keys.cljs$core$IFn$_invoke$arity$variadic((arguments[(0)]),argseq__5776__auto__);\n});\n\n(inflections.core.camel_case_keys.cljs$core$IFn$_invoke$arity$variadic = (function (m,p__41826){\nvar vec__41827 = p__41826;\nvar mode = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__41827,(0),null);\nreturn clojure.walk.keywordize_keys(inflections.core.transform_keys(m,(function (p1__41819_SHARP_){\nreturn inflections.core.camel_case.cljs$core$IFn$_invoke$arity$variadic(p1__41819_SHARP_,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([mode], 0));\n})));\n}));\n\n(inflections.core.camel_case_keys.cljs$lang$maxFixedArity = (1));\n\n/** @this {Function} */\n(inflections.core.camel_case_keys.cljs$lang$applyTo = (function (seq41822){\nvar G__41823 = cljs.core.first(seq41822);\nvar seq41822__$1 = cljs.core.next(seq41822);\nvar self__5754__auto__ = this;\nreturn self__5754__auto__.cljs$core$IFn$_invoke$arity$variadic(G__41823,seq41822__$1);\n}));\n\n/**\n * Recursively apply hyphenate on all keys of m.\n */\ninflections.core.hyphenate_keys = (function inflections$core$hyphenate_keys(m){\nreturn inflections.core.transform_keys(m,inflections.core.hyphenate);\n});\n/**\n * Recursively apply hyphenate on all values of m.\n */\ninflections.core.hyphenate_values = (function inflections$core$hyphenate_values(m){\nreturn inflections.core.transform_values(m,inflections.core.hyphenate);\n});\n/**\n * Recursively transform all keys of m into strings.\n */\ninflections.core.stringify_keys = (function inflections$core$stringify_keys(m){\nreturn inflections.core.transform_keys(m,(function (p1__41845_SHARP_){\nif((p1__41845_SHARP_ instanceof cljs.core.Keyword)){\nreturn inflections.core.str_name(p1__41845_SHARP_);\n} else {\nreturn cljs.core.str.cljs$core$IFn$_invoke$arity$1(p1__41845_SHARP_);\n}\n}));\n});\n/**\n * Recursively transform all values of m into strings.\n */\ninflections.core.stringify_values = (function inflections$core$stringify_values(m){\nreturn inflections.core.transform_values(m,(function (p1__41856_SHARP_){\nif((p1__41856_SHARP_ instanceof cljs.core.Keyword)){\nreturn inflections.core.str_name(p1__41856_SHARP_);\n} else {\nreturn cljs.core.str.cljs$core$IFn$_invoke$arity$1(p1__41856_SHARP_);\n}\n}));\n});\n/**\n * Recursively apply underscore on all keys of m.\n */\ninflections.core.underscore_keys = (function inflections$core$underscore_keys(m){\nreturn inflections.core.transform_keys(m,inflections.core.underscore);\n});\n/**\n * Initialize the Inflections library with defaults.\n */\ninflections.core.init_inflections_BANG_ = (function inflections$core$init_inflections_BANG_(){\ninflections.core.init_plural_rules_BANG_();\n\ninflections.core.init_singular_rules_BANG_();\n\nreturn inflections.core.init_irregular_words_BANG_();\n});\ninflections.core.init_inflections_BANG_();\n","~:ns-info",["^ ","~:rename-macros",null,"~:renames",["^ "],"~:meta",["^ ","~:file","inflections/core.cljc","~:line",1,"~:column",5,"~:end-line",1,"~:end-column",21],"~:ns-aliases",["^ ","~$cljs.loader","~$shadow.loader","~$clojure.core","~$cljs.core","~$clojure.spec.gen.alpha","~$cljs.spec.gen.alpha","~$clojure.pprint","~$cljs.pprint","~$clojure.core.match","~$cljs.core.match"],"~:use-macros",null,"~:excludes",["~#set",["~$replace"]],"~:name","~$inflections.core","~:reader-aliases",["^ "],"~:op","~:ns","~:imports",null,"~:requires",["^ ","~$clojure.string","^Q","~$clojure.walk","^R","~$no.en.core","^S","^?","^?","~$goog","^T"],"~:seen",["^H",["~:require"]],"~:uses",["^ ","~$blank?","^Q","~$lower-case","^Q","~$upper-case","^Q","^I","^Q","~$split","^Q","~$join","^Q","~$keywordize-keys","^R","~$parse-integer","^S"],"~:require-macros",["^ ","^?","^?"],"~:form",["~#list",["~$ns","^K",["^15",["~:refer-clojure","~:exclude",["^I"]]],["^15",["^V",["^Q","~:refer",["^X","^Y","^Z","^I","^[","^10"]],["^R","^19",["^11"]],["^S","^19",["^12"]]]]]],"~:flags",["^ ","^V",["^H",[]]],"~:js-deps",["^ "],"~:deps",["^T","^?","^Q","^R","^S"]],"^N","^K","~:resource-id",["~:shadow.build.classpath/resource","inflections/core.cljc"],"~:compiled-at",1692612518576,"^L",["^ ","^Q","^Q","^R","^R","^S","^S","^?","^?","^T","^T"],"~:resource-name","inflections/core.cljc","~:warnings",[],"~:source","(ns inflections.core\n  (:refer-clojure :exclude [replace])\n  (:require [clojure.string :refer [blank? lower-case upper-case replace split join]]\n            [clojure.walk :refer [keywordize-keys]]\n            [no.en.core :refer [parse-integer]]))\n\n(defn coerce\n  \"Coerce the string `s` to the type of `obj`.\"\n  [obj s]\n  (cond\n    (keyword? obj)\n    (keyword s)\n    (symbol? obj)\n    (symbol s)\n    :else s))\n\n;; RULES\n\n(defrecord Rule [pattern replacement])\n\n(defn add-rule! [rules rule]\n  (if-not (contains? (set (deref rules)) rule)\n    (swap! rules conj rule)))\n\n(defn slurp-rules\n  \"Returns a seq of rules, where the pattern and replacement must be\n  given in pairs of two elements.\"\n  [& patterns-and-replacements]\n  (map #(apply ->Rule %) (partition 2 patterns-and-replacements)))\n\n(defn resolve-rule [rule word]\n  (when (and rule word)\n    (let [pattern (:pattern rule)\n          replacement (:replacement rule)]\n      (if (re-find pattern word)\n        (replace word pattern replacement)))))\n\n(defn resolve-rules [rules word]\n  (first (keep #(resolve-rule % word) rules)))\n\n(defn reset-rules!\n  \"Resets the list of plural rules.\"\n  [rules] (reset! rules []))\n\n(defn str-name\n  \"Same as `clojure.core/name`, but keeps the namespace for keywords\n  and symbols.\"\n  [x]\n  (cond\n    (nil? x)\n    x\n    (string? x)\n    x\n    (or (keyword? x)\n        (symbol? x))\n    (if-let [ns (namespace x)]\n      (str ns \"/\" (name x))\n      (name x))))\n\n(def ^{:dynamic true} *uncountable-words*\n  (atom #{\"air\" \"alcohol\" \"art\" \"blood\" \"butter\" \"cheese\" \"chewing\" \"coffee\"\n          \"confusion\" \"cotton\" \"education\" \"electricity\" \"entertainment\" \"equipment\"\n          \"experience\" \"fiction\" \"fish\" \"food\" \"forgiveness\" \"fresh\" \"gold\" \"gossip\" \"grass\"\n          \"ground\" \"gum\" \"happiness\" \"history\" \"homework\" \"honey\" \"ice\" \"information\" \"jam\"\n          \"knowledge\" \"lightning\" \"liquid\" \"literature\" \"love\" \"luck\" \"luggage\" \"meat\" \"milk\"\n          \"mist\" \"money\" \"music\" \"news\" \"oil\" \"oxygen\" \"paper\" \"patience\" \"peanut\" \"pepper\"\n          \"petrol\" \"pork\" \"power\" \"pressure\" \"research\" \"rice\" \"sadness\" \"series\" \"sheep\"\n          \"shopping\" \"silver\" \"snow\" \"space\" \"species\" \"speed\" \"steam\" \"sugar\" \"sunshine\" \"tea\"\n          \"tennis\" \"thunder\" \"time\" \"toothpaste\" \"traffic\" \"up\" \"vinegar\" \"washing\" \"wine\"\n          \"wood\" \"wool\"}))\n\n(def ^{:dynamic true} *acronyms*\n  (atom {\"hst\" \"HST\"\n         \"nasa\" \"NASA\"}))\n\n(defn acronym\n  \"Returns the the acronym for `s` if it is one, otherwise nil.\"\n  [s]\n  (when s\n    (some->> (str-name s)\n             (lower-case)\n             (get @*acronyms*)\n             (coerce s))))\n\n(defn add-acronym!\n  \"Adds `word` to the set of `*acronyms*`.\"\n  [word] (swap! *acronyms* assoc (lower-case (str-name word)) (str-name word)))\n\n(defn delete-acronym!\n  \"Delete `word` from the set of `*acronyms*`.\"\n  [word] (swap! *acronyms* dissoc (lower-case (str-name word))))\n\n(defn countable?\n  \"Returns true if `s` is countable, otherwise false.\"\n  [s]\n  (when s (not (contains? @*uncountable-words* (lower-case (str-name s))))))\n\n(defn uncountable?\n  \"Returns true if `x` is uncountable, otherwise false.\"\n  [x]\n  (when x (not (countable? x))))\n\n(defn add-uncountable!\n  \"Adds `word` to the set of `*uncountable-words*`.\"\n  [word] (swap! *uncountable-words* conj (lower-case (str-name word))))\n\n(defn delete-uncountable!\n  \"Delete `word` from the set of `*uncountable-words*`.\"\n  [word] (swap! *uncountable-words* disj (lower-case (str-name word))))\n\n;; PLURAL\n\n(def ^{:dynamic true} *plural-rules*\n  (atom []))\n\n(defn plural\n  \"Returns the plural of s.\"\n  [s]\n  (let [s (str-name s)]\n    (if (or (blank? s)\n            (uncountable? s))\n      s (resolve-rules (rseq @*plural-rules*) s))))\n\n(defn plural!\n  \"Define rule(s) to map words from singular to plural.\\n\n  Examples: (plural! #\\\"$(?i)\\\" \\\"s\\\")\n            (plural! #\\\"(ax|test)is$(?i)\\\" \\\"$1es\\\"\n                     #\\\"(octop|vir)us$(?i)\\\" \\\"$1i\\\")\"\n  [& patterns-and-replacements]\n  (doseq [rule (apply slurp-rules patterns-and-replacements)]\n    (add-rule! *plural-rules* rule)))\n\n(defn init-plural-rules! []\n  (plural!\n   #\"(?i)$\" \"s\"\n   #\"(?i)s$\" \"s\"\n   #\"(?i)(ax|test)is$\" \"$1es\"\n   #\"(?i)(octop|vir)us$\" \"$1i\"\n   #\"(?i)(alias|status)$\" \"$1es\"\n   #\"(?i)(bu)s$\" \"$1ses\"\n   #\"(?i)(buffal|tomat)o$\" \"$1oes\"\n   #\"(?i)([ti])um$\" \"$1a\"\n   #\"(?i)sis$\" \"ses\"\n   #\"(?i)(?:([^f])fe|([lr])f)$\" \"$1$2ves\"\n   #\"(?i)(hive)$\" \"$1s\"\n   #\"(?i)([^aeiouy]|qu)y$\" \"$1ies\"\n   #\"(?i)(x|ch|ss|sh)$\" \"$1es\"\n   #\"(?i)(matr|vert|ind)(?:ix|ex)$\" \"$1ices\"\n   #\"(?i)([m|l])ouse$\" \"$1ice\"\n   #\"(?i)^(ox)$\" \"$1en\"\n   #\"(?i)(quiz)$\" \"$1zes\"))\n\n;; SINGULAR\n\n(def ^{:dynamic true} *singular-rules*\n  (atom []))\n\n(defn singular\n  \"Returns the singular of s.\"\n  [s]\n  (let [s' (str-name s)]\n    (if-not (uncountable? s')\n      (coerce s (or (resolve-rules (rseq @*singular-rules*) s') s'))\n      s)))\n\n(defn singular!\n  \"Define rule(s) to map words from singular to plural.\\n\n  Examples: (singular! #\\\"(n)ews$(?i)\\\" \\\"$1ews\\\")\n            (singular! #\\\"(m)ovies$(?i)\\\" \\\"$1ovie\\\"\n                       #\\\"([m|l])ice$(?i)\\\" \\\"$1ouse\\\")\"\n  [& patterns-and-replacements]\n  (doseq [rule (apply slurp-rules patterns-and-replacements)]\n    (add-rule! *singular-rules* rule)))\n\n(defn init-singular-rules! []\n  (singular!\n   #\"(?i)s$\" \"\"\n   #\"(?i)(ss)$\" \"$1\"\n   #\"(?i)(n)ews$\" \"$1ews\"\n   #\"(?i)([ti])a$\" \"$1um\"\n   #\"(?i)((a)naly|(b)a|(d)iagno|(p)arenthe|(p)rogno|(s)ynop|(t)he)(sis|ses)$\" \"$1$2sis\"\n   #\"(?i)(^analy)(sis|ses)$\" \"$1sis\"\n   #\"(?i)([^f])ves$\" \"$1fe\"\n   #\"(?i)(hive)s$\" \"$1\"\n   #\"(?i)(tive)s$\" \"$1\"\n   #\"(?i)([lr])ves$\" \"$1f\"\n   #\"(?i)([^aeiouy]|qu)ies$\" \"$1y\"\n   #\"(?i)(s)eries$\" \"$1eries\"\n   #\"(?i)(m)ovies$\" \"$1ovie\"\n   #\"(?i)(x|ch|ss|sh)es$\" \"$1\"\n   #\"(?i)([m|l])ice$\" \"$1ouse\"\n   #\"(?i)(bus)(es)?$\" \"$1\"\n   #\"(?i)(o)es$\" \"$1\"\n   #\"(?i)(shoe)s$\" \"$1\"\n   #\"(?i)(cris|ax|test)(is|es)$\" \"$1is\"\n   #\"(?i)(octop|vir)(us|i)$\" \"$1us\"\n   #\"(?i)(alias|status)(es)?$\" \"$1\"\n   #\"(?i)^(ox)en\" \"$1\"\n   #\"(?i)(vert|ind)ices$\" \"$1ex\"\n   #\"(?i)(matr)ices$\" \"$1ix\"\n   #\"(?i)(quiz)zes$\" \"$1\"\n   #\"(?i)(database)s$\" \"$1\"))\n\n;; IRREGULAR\n\n(def ^{:dynamic true} *irregular-words*\n  (atom (sorted-set)))\n\n(defn irregular?\n  \"Returns true if `word` is an irregular word, otherwise false.\"\n  [word]\n  (when word\n    (contains? @*irregular-words* (lower-case (str-name word)))))\n\n(defn add-irregular!\n  \"Add `singular` and `plural` to the set of `*irregular-words*`.\"\n  [singular plural]\n  (let [singular (lower-case (str-name singular))\n        plural (lower-case (str-name plural))]\n    (delete-uncountable! singular)\n    (delete-uncountable! plural)\n    (singular! (re-pattern (str \"^\" plural \"$\")) singular)\n    (plural! (re-pattern (str \"^\" singular \"$\")) plural)\n    (swap! *irregular-words* conj singular)\n    (swap! *irregular-words* conj plural)))\n\n(defn delete-irregular!\n  \"Delete `singular` and `plural` from the set of *irregular-words*.\"\n  [singular plural]\n  (let [singular (lower-case (str-name singular))\n        plural (lower-case (str-name plural))]\n    (swap! *irregular-words* disj singular)\n    (swap! *irregular-words* disj plural)))\n\n(defn init-irregular-words! []\n  (doall\n   (map #(add-irregular! (first %) (second %))\n        [[\"amenity\" \"amenities\"]\n         [\"child\" \"children\"]\n         [\"cow\" \"kine\"]\n         [\"foot\" \"feet\"]\n         [\"louse\" \"lice\"]\n         [\"mailman\" \"mailmen\"]\n         [\"man\" \"men\"]\n         [\"mouse\" \"mice\"]\n         [\"move\" \"moves\"]\n         [\"ox\" \"oxen\"]\n         [\"person\" \"people\"]\n         [\"sex\" \"sexes\"]\n         [\"tooth\" \"teeth\"]\n         [\"woman\" \"women\"]])))\n\n(defn camel-case\n  \"Convert `word` to camel case. By default, camel-case converts to\n  UpperCamelCase. If the argument to camel-case is set to :lower then\n  camel-case produces lowerCamelCase.\n\n  Examples:\n\n    (camel-case \\\"active_record\\\")\n    ;=> \\\"ActiveRecord\\\"\n\n    (camel-case \\\"active_record\\\" :lower)\n    ;=> \\\"activeRecord\\\"\n\n    (camel-case \\\"active_record/errors\\\")\n    ;=> \\\"ActiveRecord/Errors\\\"\n\n    (camel-case \\\"active_record/errors\\\" :lower)\n    ;=> \\\"activeRecord/Errors\\\"\"\n  [word & [mode]]\n  (when word\n    (->> (let [word (str-name word)]\n           (cond\n             (= mode :lower) (camel-case word lower-case)\n             (= mode :upper) (camel-case word upper-case)\n             (fn? mode) (str (mode (str (first word)))\n                             (apply str (rest (camel-case word nil))))\n             :else (-> (replace word #\"/(.?)\" #(str \"/\" (upper-case (nth % 1))))\n                       (replace #\"(^|_|-)(.)\"\n                                #?(:clj\n                                   #(str (if (#{\\_ \\-} (nth % 1))\n                                           (nth % 1))\n                                         (upper-case (nth % 2)))\n                                   :cljs\n                                   #(let [[_ _ letter-to-uppercase] %]\n                                      (upper-case letter-to-uppercase)))))))\n         (coerce word))))\n\n(defn capitalize\n  \"Convert the first letter in `word` to upper case.\n\n  Examples:\n\n    (capitalize \\\"hello\\\")\n    ;=> \\\"Hello\\\"\n\n    (capitalize \\\"HELLO\\\")\n    ;=> \\\"Hello\\\"\n\n    (capitalize \\\"abc123\\\")\n    ;=> \\\"Abc123\\\"\"\n  [word]\n  (when word\n    (if-let [acronym (acronym word)]\n      acronym\n      (let [word' (str-name word)]\n        (->> (str (upper-case (str (first word')))\n                  (when (next word') (lower-case (subs word' 1))))\n             (coerce word))))))\n\n(defn titleize\n  \"Convert `s` into a title.\"\n  [s]\n  (when s\n    (join \" \" (map capitalize (split (str-name s) #\"[-_./ ]\")))))\n\n(defn dasherize\n  \"Replaces all underscores in `s` with dashes.\n\n  Examples:\n\n    (dasherize \\\"puni_puni\\\")\n    ;=> \\\"puni-puni\\\"\"\n  [s]\n  (when s\n    (->> (replace (str-name s) #\"_\" \"-\")\n         (coerce s))))\n\n(defn demodulize\n  \"Removes the module part from `x`.\n\n  Examples:\n\n    (demodulize \\\"inflections.MyRecord\\\")\n    ;=> \\\"MyRecord\\\"\n\n    (demodulize \\\"ActiveRecord::CoreExtensions::String::Inflections\\\")\n    ;=> \\\"Inflections\\\"\n\n    (demodulize \\\"Inflections\\\")\n    ;=> \\\"Inflections\\\"\"\n  [x]\n  (when x\n    (->> (replace (str-name x) #\"^.*(::|\\.)\" \"\")\n         (coerce x))))\n\n(defn hyphenate\n  \"Hyphenate x, which is the same as threading `x` through the str,\n  underscore and dasherize fns.\n\n  Examples:\n\n    (hyphenate 'Continent)\n    ; => \\\"continent\\\"\n\n    (hyphenate \\\"CountryFlag\\\")\n    ; => \\\"country-flag\\\"\"\n  [x]\n  (when x\n    (->> (-> (str-name x)\n             (replace #\"([A-Z]+)([A-Z][a-z])\" \"$1-$2\")\n             (replace #\"([a-z\\d])([A-Z])\" \"$1-$2\")\n             (replace #\"\\s+\" \"-\")\n             (replace #\"_\" \"-\")\n             (lower-case))\n         (coerce x))))\n\n(defn ordinalize\n  \"Turns `x` into an ordinal string used to denote the position in an\n  ordered sequence such as 1st, 2nd, 3rd, 4th, etc.\n\n  Examples:\n\n    (ordinalize \\\"1\\\")\n    ;=> \\\"1st\\\"\n\n    (ordinalize \\\"23\\\")\n    ;=> \\\"23rd\\\"\"\n  [x]\n  (if-let [number (parse-integer x)]\n    (if (contains? (set (range 11 14)) (mod number 100))\n      (str number \"th\")\n      (let [modulus (mod number 10)]\n        (cond\n          (= modulus 1) (str number \"st\")\n          (= modulus 2) (str number \"nd\")\n          (= modulus 3) (str number \"rd\")\n          :else (str number \"th\"))))))\n\n(defn parameterize\n  \"Replaces special characters in `x` with the default separator\n  \\\"-\\\". so that it may be used as part of a pretty URL.\n\n  Examples:\n\n    (parameterize \\\"Donald E. Knuth\\\")\n    ; => \\\"donald-e-knuth\\\"\n\n    (parameterize \\\"Donald E. Knuth\\\" \\\"_\\\")\n    ; => \\\"donald_e_knuth\\\"\"\n  [x & [sep]]\n  (when x\n    (let [sep (or sep \"-\")]\n      (-> (str-name x)\n          #?(:clj (replace #\"(?i)[^a-z0-9]+\" sep)\n             :cljs (replace #\"[^A-Za-z0-9]+\" sep))\n          (replace #\"\\++\" sep)\n          (replace (re-pattern (str sep \"{2,}\")) sep)\n          (replace (re-pattern (str \"(?i)(^\" sep \")|(\" sep \"$)\")) \"\")\n          lower-case))))\n\n(defn pluralize\n  \"Attempts to pluralize the word unless count is 1. If plural is\n  supplied, it will use that when count is > 1, otherwise it will use\n  the inflector to determine the plural form.\"\n  [count singular & [plural]]\n  (str count \" \" (if (= 1 count) singular (or plural (inflections.core/plural singular)))))\n\n(defn underscore\n  \"The reverse of camel-case. Makes an underscored, lowercase form from\n  the expression in the string.\n\n  Examples:\n\n    (underscore \\\"ActiveRecord\\\")\n    ;=> \\\"active_record\\\"\n\n    (underscore \\\"ActiveRecord::Errors\\\")\n    ;=> \\\"active_record::errors\\\"\"\n  [x]\n  (when x\n    (->> (-> (str-name x)\n             (replace #\"([A-Z\\d]+)([A-Z][a-z])\" \"$1_$2\")\n             (replace #\"([a-z\\d])([A-Z])\" \"$1_$2\")\n             (replace #\"-\" \"_\")\n             lower-case)\n         (coerce x))))\n\n(defn foreign-key\n  \"Converts `x` into a foreign key. The default separator \\\"_\\\" is\n  placed between the name and \\\"id\\\".\n\n\n  Examples:\n\n    (foreign-key \\\"Message\\\")\n    ;=> \\\"message_id\\\"\n\n    (foreign-key \\\"Message\\\" false)\n    ;=> \\\"messageid\\\"\n\n    (foreign-key \\\"Admin::Post\\\")\n    ;=> \\\"post_id\\\"\"\n  [x & [sep]]\n  (let [x' (str-name x)]\n    (when-not (blank? x')\n      (->> (str (underscore (hyphenate (singular (demodulize x'))))\n                (or sep \"_\") \"id\")\n           (coerce x)))))\n\n;; TRANSFORMATIONS ON MAPS\n\n(defn transform-keys\n  \"Recursively transform all keys in the map `m` by applying `f` on them.\"\n  [m f]\n  (if (map? m)\n    (reduce\n     (fn [memo key]\n       (let [value (get m key)]\n         (-> (dissoc memo key)\n             (assoc (f key)\n                    (cond\n                      (map? value)\n                      (transform-keys value f)\n                      (vector? value)\n                      (mapv #(transform-keys % f) value)\n                      (sequential? value)\n                      (map #(transform-keys % f) value)\n                      :else value)))))\n     m (keys m))\n    m))\n\n(defn transform-values\n  \"Recursively transform all map values of m by applying f on them.\"\n  [m f]\n  (if (map? m)\n    (reduce\n     (fn [memo key]\n       (let [value (get m key)]\n         (assoc memo key (if (map? value) (transform-values value f) (f value)))))\n     m (keys m))\n    m))\n\n(defn camel-case-keys\n  \"Recursively apply camel-case on all keys of m.\"\n  [m & [mode]]\n  (-> (transform-keys m #(camel-case %1 mode))\n      (keywordize-keys)))\n\n(defn hyphenate-keys\n  \"Recursively apply hyphenate on all keys of m.\"\n  [m] (transform-keys m hyphenate))\n\n(defn hyphenate-values\n  \"Recursively apply hyphenate on all values of m.\"\n  [m] (transform-values m hyphenate))\n\n(defn stringify-keys\n  \"Recursively transform all keys of m into strings.\"\n  [m] (transform-keys m #(if (keyword? %) (str-name %) (str %))))\n\n(defn stringify-values\n  \"Recursively transform all values of m into strings.\"\n  [m] (transform-values m #(if (keyword? %) (str-name %) (str %))))\n\n(defn underscore-keys\n  \"Recursively apply underscore on all keys of m.\"\n  [m] (transform-keys m underscore))\n\n(defn init-inflections!\n  \"Initialize the Inflections library with defaults.\"\n  []\n  (init-plural-rules!)\n  (init-singular-rules!)\n  (init-irregular-words!))\n\n(init-inflections!)\n","~:reader-features",["^H",["~:cljs-release","~:cljs"]],"~:cljc",true,"~:source-map-compact",["^ ","mappings","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","names",["inflections.core/coerce","obj","s","cljs.core/Keyword","cljs.core.keyword","cljs.core/Symbol","cljs.core.symbol","this__5343__auto__","k__5344__auto__","this__5345__auto__","k41475","else__5346__auto__","G__41481","pattern","replacement","cljs.core.get","__extmap","this__5363__auto__","f__5364__auto__","init__5365__auto__","cljs.core.reduce","ret__5366__auto__","p__41483","vec__41484","k__5367__auto__","cljs.core.nth","v__5368__auto__","this__5358__auto__","writer__5359__auto__","opts__5360__auto__","pr-pair__5361__auto__","keyval__5362__auto__","cljs.core/pr-sequential-writer","cljs.core.concat","cljs.core/PersistentVector","G__41474","cljs.core/RecordIter","cljs.core/-iterator","cljs.core/nil-iter","this__5341__auto__","__meta","this__5338__auto__","__hash","this__5347__auto__","cljs.core/count","this__5339__auto__","h__5154__auto__","coll__5340__auto__","cljs.core/hash-unordered-coll","this41476","other41477","cljs.core._EQ_","this__5353__auto__","k__5354__auto__","cljs.core/contains?","cljs.core.dissoc","cljs.core/-with-meta","cljs.core.into","cljs.core/not-empty","this__5350__auto__","G__41502","this__5351__auto__","k__5352__auto__","pred__41503","cljs.core/keyword-identical?","expr__41504","cljs.core.assoc","this__5356__auto__","cljs.core/seq","cljs.core/MapEntry","this__5342__auto__","this__5348__auto__","entry__5349__auto__","cljs.core/vector?","cljs.core/-nth","cljs.core/-conj","inflections.core/Rule","this__5389__auto__","cljs.core/List","writer__5390__auto__","cljs.core/-write","G__41479","extmap__5385__auto__","G__41516","cljs.core/record?","inflections.core/->Rule","inflections.core/map->Rule","inflections.core/add-rule!","rules","rule","cljs.core/set","cljs.core/deref","cljs.core.swap_BANG_","cljs.core/conj","var_args","args__5775__auto__","len__5769__auto__","i__5770__auto__","argseq__5776__auto__","cljs.core/IndexedSeq","inflections.core/slurp-rules","seq41522","self__5755__auto__","patterns-and-replacements","p1__41521#","cljs.core.map","cljs.core.apply","cljs.core.partition","inflections.core/resolve-rule","word","and__5043__auto__","cljs.core/re-find","clojure.string/replace","inflections.core/resolve-rules","cljs.core/first","p1__41525#","cljs.core.keep","inflections.core/reset-rules!","cljs.core/reset!","inflections.core/str-name","x","temp__5802__auto__","ns","cljs.core/namespace","cljs.core/name","inflections.core/*uncountable-words*","cljs.core.atom","inflections.core/*acronyms*","inflections.core/acronym","G__41532","clojure.string/lower-case","inflections.core/add-acronym!","cljs.core/assoc","inflections.core/delete-acronym!","cljs.core/dissoc","inflections.core/countable?","inflections.core/uncountable?","cljs.core/not","inflections.core/add-uncountable!","inflections.core/delete-uncountable!","cljs.core/disj","inflections.core/*plural-rules*","inflections.core/plural","or__5045__auto__","clojure.string/blank?","cljs.core/rseq","inflections.core/plural!","seq41537","seq__41538","chunk__41539","count__41540","i__41541","temp__5804__auto__","cljs.core/chunked-seq?","c__5568__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/next","inflections.core/init-plural-rules!","inflections.core.plural_BANG_","inflections.core/*singular-rules*","inflections.core/singular","s'","inflections.core/singular!","seq41549","seq__41551","chunk__41552","count__41553","i__41554","inflections.core/init-singular-rules!","inflections.core.singular_BANG_","inflections.core/*irregular-words*","cljs.core/sorted-set","inflections.core/irregular?","inflections.core/add-irregular!","singular","plural","cljs.core/re-pattern","inflections.core/delete-irregular!","inflections.core/init-irregular-words!","cljs.core.doall","p1__41594#","cljs.core/second","inflections.core/camel-case","p__41615","vec__41616","seq41604","G__41605","self__5754__auto__","mode","inflections.core.camel_case","clojure.string/upper-case","cljs.core/fn?","G__41628","cljs.core/str","cljs.core/rest","p1__41601#","p1__41603#","vec__41629","_","letter-to-uppercase","inflections.core/capitalize","acronym","word'","cljs.core.subs","inflections.core/titleize","clojure.string.join","clojure.string.split","inflections.core/dasherize","inflections.core/demodulize","inflections.core/hyphenate","inflections.core/ordinalize","number","no.en.core/parse-integer","cljs.core.range","cljs.core/mod","modulus","inflections.core/parameterize","p__41711","vec__41712","seq41702","G__41703","sep","inflections.core/pluralize","p__41740","vec__41741","seq41727","G__41728","G__41729","count","inflections.core/underscore","inflections.core/foreign-key","p__41781","vec__41784","seq41769","G__41770","x'","inflections.core/transform-keys","m","f","cljs.core/map?","memo","key","value","p1__41804#","cljs.core.mapv","cljs.core/sequential?","p1__41805#","cljs.core/keys","inflections.core/transform-values","inflections.core/camel-case-keys","p__41826","vec__41827","seq41822","G__41823","p1__41819#","clojure.walk/keywordize-keys","inflections.core/hyphenate-keys","inflections.core/hyphenate-values","inflections.core/stringify-keys","p1__41845#","inflections.core/stringify-values","p1__41856#","inflections.core/underscore-keys","inflections.core/init-inflections!"]],"~:used-vars",["^H",["~$cljs.core/keep","~$clojure.string/join","~$inflections.core/init-plural-rules!","~$cljs.core/rest","~$cljs.core/keyword","~$cljs.core/str","~$inflections.core/reset-rules!","~$cljs.core/sequential?","~$inflections.core/hyphenate-keys","~$inflections.core/acronym","~$clojure.string/upper-case","~$cljs.core/pr-sequential-writer","~$inflections.core/underscore-keys","~$inflections.core/plural","~$clojure.string/split","~$cljs.core/vector?","~$clojure.string/blank?","~$no.en.core/parse-integer","~$cljs.core/=","~$cljs.core/keys","~$cljs.core/-assoc","~$inflections.core/add-rule!","~$cljs.core/doall","~$cljs.core/-write","~$cljs.core/IndexedSeq","~$cljs.core/-iterator","~$cljs.core/count","~$cljs.core/deref","~$cljs.core/reduce","~$cljs.core/seq","~$cljs.core/chunk-first","~$inflections.core/singular","~$cljs.core/apply","~$cljs.core/Keyword","~$cljs.core/mapv","~$inflections.core/titleize","~$cljs.core/MapEntry","~$cljs.core/dissoc","~$cljs.core/keyword-identical?","~$cljs.core/chunk-rest","~$inflections.core/foreign-key","~$cljs.core/atom","~$cljs.core/-with-meta","~$cljs.core/concat","~$inflections.core/str-name","~$inflections.core/hyphenate-values","~$inflections.core/delete-irregular!","~$cljs.core/set","~$inflections.core/demodulize","~$cljs.core/contains?","~$cljs.core/into","~$cljs.core/map?","~$cljs.core/reset!","~$cljs.core/sorted-set","~$cljs.core/conj","~$inflections.core/*singular-rules*","~$inflections.core/*irregular-words*","~$cljs.core/re-pattern","~$cljs.core/-conj","~$inflections.core/init-irregular-words!","~$cljs.core/namespace","~$inflections.core/delete-acronym!","~$inflections.core/plural!","~$cljs.core/map","~$inflections.core/transform-values","~$cljs.core/fn?","~$cljs.core/PersistentVector","~$inflections.core/pluralize","~$cljs.core/List","~$cljs.core/swap!","~$inflections.core/camel-case","~$inflections.core/add-acronym!","~$cljs.core/get","~$inflections.core/hyphenate","~$inflections.core/->Rule","~$cljs.core/-nth","~$cljs.core/partition","~$inflections.core/Rule","~$cljs.core/not-empty","~$inflections.core/irregular?","~$inflections.core/uncountable?","~$inflections.core/add-uncountable!","~$inflections.core/camel-case-keys","~$cljs.core/symbol","~$cljs.core/mod","~$inflections.core/transform-keys","~$cljs.core/record?","~$cljs.core/re-find","~$inflections.core/ordinalize","~$cljs.core/rseq","~$cljs.core/-lookup","~$inflections.core/parameterize","~$cljs.core/nth","~$inflections.core/underscore","~$cljs.core/second","~$inflections.core/dasherize","~$inflections.core/coerce","~$inflections.core/stringify-keys","~$cljs.core/nil-iter","~$clojure.string/replace","~$inflections.core/singular!","~$clojure.string/lower-case","~$cljs.core/next","~$inflections.core/countable?","~$cljs.core/RecordIter","~$inflections.core/resolve-rule","~$inflections.core/add-irregular!","~$cljs.core/not","~$inflections.core/*plural-rules*","~$cljs.core/disj","~$inflections.core/resolve-rules","~$cljs.core/assoc","~$inflections.core/*acronyms*","~$cljs.core/Symbol","~$cljs.core/range","~$inflections.core/map->Rule","~$inflections.core/init-singular-rules!","~$cljs.core/hash-unordered-coll","~$inflections.core/init-inflections!","~$clojure.walk/keywordize-keys","~$inflections.core/*uncountable-words*","~$cljs.core/first","~$inflections.core/slurp-rules","~$cljs.core/name","~$cljs.core/subs","~$inflections.core/delete-uncountable!","~$inflections.core/stringify-values","~$cljs.core/chunked-seq?","~$inflections.core/capitalize"]]],"~:cache-keys",["~#cmap",[["^1>","goog/dom/tagname.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","~:shadow.build.compiler/resolve",["^ ","~:require-id",null,"~:deps-ids",["^H",[]],"~:deps-syms",["^T","~$goog.dom.HtmlElement"]]],["^1>","goog/labs/useragent/platform.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4J",["^ ","^4K",null,"^4L",["^H",[]],"^4M",["^T","~$goog.string.internal","~$goog.labs.userAgent.util","~$goog.labs.userAgent.highEntropy.highEntropyValue","~$goog.labs.userAgent.highEntropy.highEntropyData","~$goog.labs.userAgent"]]],["^1>","goog/crypt/crypt.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4J",["^ ","^4K",null,"^4L",["^H",[]],"^4M",["^T","~$goog.asserts","~$goog.async.throwException"]]],["^1>","cljs/tools/reader/impl/utils.cljs"],["927809dcb44fa726e4969d993e3e733636d95ebb","^4J",["^ ","^4K",null,"^4L",["^H",[]],"^4M",["^T","^?","^Q","~$goog.string"]]],["^1>","goog/html/trustedtypes.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4J",["^ ","^4K",null,"^4L",["^H",[]],"^4M",["^T"]]],["^1>","goog/labs/useragent/browser.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4J",["^ ","^4K",null,"^4L",["^H",[]],"^4M",["^T","^4P","^4Q","^4T","^4O","^4R","^4S"]]],["^1>","goog/html/safeurl.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4J",["^ ","^4K",null,"^4L",["^H",[]],"^4M",["^T","^4T","~$goog.fs.url","~$goog.html.TrustedResourceUrl","~$goog.string.Const","~$goog.string.TypedString","^4O"]]],["^1>","goog/array/array.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4J",["^ ","^4K",null,"^4L",["^H",[]],"^4M",["^T","^4T"]]],["^1>","goog/useragent/useragent.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4J",["^ ","^4K",null,"^4L",["^H",[]],"^4M",["^T","~$goog.labs.userAgent.browser","~$goog.labs.userAgent.engine","~$goog.labs.userAgent.platform","^4P","~$goog.reflect","^4O"]]],["^1>","goog/debug/error.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4J",["^ ","^4K",null,"^4L",["^H",[]],"^4M",["^T"]]],["^1>","goog/flags/flags.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4J",["^ ","^4K",null,"^4L",["^H",[]],"^4M",["^T"]]],["^1>","cljs/tools/reader/edn.cljs"],["927809dcb44fa726e4969d993e3e733636d95ebb","^4J",["^ ","^4K",null,"^4L",["^H",[]],"^4M",["^T","^?","~$cljs.tools.reader.impl.errors","~$cljs.tools.reader.reader-types","~$cljs.tools.reader.impl.utils","~$cljs.tools.reader.impl.commons","~$cljs.tools.reader","^4V","~$goog.string.StringBuffer"]]],["^1>","goog/dom/nodetype.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4J",["^ ","^4K",null,"^4L",["^H",[]],"^4M",["^T"]]],["^1>","cljs/tools/reader/impl/inspect.cljs"],["927809dcb44fa726e4969d993e3e733636d95ebb","^4J",["^ ","^4K",null,"^4L",["^H",[]],"^4M",["^T","^?"]]],["^1>","goog/labs/useragent/highentropy/highentropyvalue.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4J",["^ ","^4K",null,"^4L",["^H",[]],"^4M",["^T","^4P","^4O"]]],["^1>","cljs/tools/reader.cljs"],["927809dcb44fa726e4969d993e3e733636d95ebb","^4J",["^ ","^4K",null,"^4L",["^H",[]],"^4M",["^T","^?","^54","^55","^56","^53","~$goog.array","^4V","^58"]]],["^1>","goog/string/typedstring.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4J",["^ ","^4K",null,"^4L",["^H",[]],"^4M",["^T"]]],["^1>","goog/object/object.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4J",["^ ","^4K",null,"^4L",["^H",[]],"^4M",["^T"]]],["^1>","goog/dom/asserts.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4J",["^ ","^4K",null,"^4L",["^H",[]],"^4M",["^T","^4T"]]],"~:SHADOW-TIMESTAMP",[1689947046000,1689947046000,1689947050000],["^1>","goog/math/long.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4J",["^ ","^4K",null,"^4L",["^H",[]],"^4M",["^T","^4T","^52"]]],["^1>","goog/html/trustedresourceurl.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4J",["^ ","^4K",null,"^4L",["^H",[]],"^4M",["^T","^4T","~$goog.fs.blob","^4W","~$goog.html.SafeScript","~$goog.html.trustedtypes","^4Y","^4Z"]]],["^1>","goog/string/internal.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4J",["^ ","^4K",null,"^4L",["^H",[]],"^4M",["^T"]]],["^1>","goog/functions/functions.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4J",["^ ","^4K",null,"^4L",["^H",[]],"^4M",["^T"]]],["^1>","goog/html/safestyle.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4J",["^ ","^4K",null,"^4L",["^H",[]],"^4M",["^T","^4Y","~$goog.html.SafeUrl","^4Z","^4T","^4O"]]],["^1>","goog/dom/safe.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4J",["^ ","^4K",null,"^4L",["^H",[]],"^4M",["^T","^4T","~$goog.asserts.dom","~$goog.dom.asserts","~$goog.functions","~$goog.html.SafeHtml","^5<","~$goog.html.SafeStyle","^5>","^4X","~$goog.html.uncheckedconversions","^4Y","^4O"]]],["^1>","goog/asserts/dom.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4J",["^ ","^4K",null,"^4L",["^H",[]],"^4M",["^T","~$goog.dom.TagName","^4T","~$goog.dom.element"]]],["^1>","clojure/walk.cljs"],["bc14df6666853ed869d7b88aaa864111c65d0c7f","^4J",["^ ","^4K",null,"^4L",["^H",[]],"^4M",["^T","^?"]]],["^1>","goog/useragent/product.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4J",["^ ","^4K",null,"^4L",["^H",[]],"^4M",["^T","^4[","^51","~$goog.userAgent"]]],["^1>","goog/html/safehtml.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4J",["^ ","^4K",null,"^4L",["^H",[]],"^4M",["^T","^4Y","^5<","^5C","~$goog.html.SafeStyleSheet","^5>","^5E","^4X","^4Z","^4T","^4[","^59","~$goog.object","^4O","~$goog.dom.tags","^5="]]],["^1>","goog/dom/tags.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4J",["^ ","^4K",null,"^4L",["^H",[]],"^4M",["^T","^5I"]]],["^1>","goog/labs/useragent/engine.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4J",["^ ","^4K",null,"^4L",["^H",[]],"^4M",["^T","^59","^4O","^4P"]]],["^1>","goog/fs/blob.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4J",["^ ","^4K",null,"^4L",["^H",[]],"^4M",["^T"]]],["^1>","cljs/reader.cljs"],["bc14df6666853ed869d7b88aaa864111c65d0c7f","^4J",["^ ","^4K",null,"^4L",["^H",[]],"^4M",["^T","^?","^5I","^57","~$cljs.tools.reader.edn","^58"]]],["^1>","goog/asserts/asserts.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4J",["^ ","^4K",null,"^4L",["^H",[]],"^4M",["^T","~$goog.debug.Error","~$goog.dom.NodeType"]]],["^1>","goog/uri/uri.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4J",["^ ","^4K",null,"^4L",["^H",[]],"^4M",["^T","^59","^4T","~$goog.collections.maps","^4V","~$goog.structs","~$goog.uri.utils","~$goog.uri.utils.ComponentIndex","~$goog.uri.utils.StandardQueryParam"]]],["^1>","goog/labs/useragent/highentropy/highentropydata.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4J",["^ ","^4K",null,"^4L",["^H",[]],"^4M",["^T","^4Q"]]],["^1>","goog/collections/maps.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4J",["^ ","^4K",null,"^4L",["^H",[]],"^4M",["^T"]]],["^1>","goog/fs/url.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4J",["^ ","^4K",null,"^4L",["^H",[]],"^4M",["^T"]]],["^1>","goog/base.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4J",["^ ","^4K",null,"^4L",["^H",[]],"^4M",[]]],["^1>","goog/structs/structs.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4J",["^ ","^4K",null,"^4L",["^H",[]],"^4M",["^T","^59","^5I"]]],["^1>","cljs/tools/reader/impl/errors.cljs"],["927809dcb44fa726e4969d993e3e733636d95ebb","^4J",["^ ","^4K",null,"^4L",["^H",[]],"^4M",["^T","^?","^54","^Q","~$cljs.tools.reader.impl.inspect"]]],["^1>","clojure/string.cljs"],["bc14df6666853ed869d7b88aaa864111c65d0c7f","^4J",["^ ","^4K",null,"^4L",["^H",[]],"^4M",["^T","^?","^4V","^58"]]],["^1>","no/en/core.cljc"],["46f67eeb6381165553708d8db01fec220d5f7054","^4J",["^ ","^4K",null,"^4L",["^H",[]],"^4M",["^T","^?","^Q","~$cljs.reader","~$goog.crypt.base64"]]],["^1>","goog/string/string.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4J",["^ ","^4K",null,"^4L",["^H",[]],"^4M",["^T","~$goog.dom.safe","^5D","^4Y","^4O"]]],["^1>","goog/reflect/reflect.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4J",["^ ","^4K",null,"^4L",["^H",[]],"^4M",["^T"]]],["^1>","goog/labs/useragent/util.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4J",["^ ","^4K",null,"^4L",["^H",[]],"^4M",["^T","^4O","^4S"]]],["^1>","goog/string/stringbuffer.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4J",["^ ","^4K",null,"^4L",["^H",[]],"^4M",["^T"]]],["^1>","cljs/tools/reader/reader_types.cljs"],["927809dcb44fa726e4969d993e3e733636d95ebb","^4J",["^ ","^4K",null,"^4L",["^H",[]],"^4M",["^T","^?","^55","^4V","^58"]]],["^1>","inflections/core.cljc"],["e6e3e2ec7855d2e49589935dde6e494c75e7673f","^4J",["^ ","^4K",null,"^4L",["^H",[]],"^4M",["^T","^?","^Q","^R","^S"]]],["^1>","goog/labs/useragent/useragent.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4J",["^ ","^4K",null,"^4L",["^H",[]],"^4M",["^T","~$goog.flags"]]],["^1>","goog/dom/element.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4J",["^ ","^4K",null,"^4L",["^H",[]],"^4M",["^T","^5M","^5E"]]],["^1>","goog/html/uncheckedconversions.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4J",["^ ","^4K",null,"^4L",["^H",[]],"^4M",["^T","^4T","^5B","^5<","^5C","^5H","^5>","^4X","^4Y","^4O"]]],["^1>","cljs/tools/reader/impl/commons.cljs"],["927809dcb44fa726e4969d993e3e733636d95ebb","^4J",["^ ","^4K",null,"^4L",["^H",[]],"^4M",["^T","^?","^53","^54","^55"]]],["^1>","goog/dom/htmlelement.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4J",["^ ","^4K",null,"^4L",["^H",[]],"^4M",["^T"]]],["^1>","cljs/core.cljs"],["bc14df6666853ed869d7b88aaa864111c65d0c7f","^4J",["^ ","^4K",null,"^4L",["^H",[]],"^4M",["^T","~$goog.math.Long","~$goog.math.Integer","^4V","^5I","^59","~$goog.Uri","^58"]]],["^1>","goog/html/safescript.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4J",["^ ","^4K",null,"^4L",["^H",[]],"^4M",["^T","^4Y","^4Z","^5=","^4T"]]],["^1>","goog/async/throwexception.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4J",["^ ","^4K",null,"^4L",["^H",[]],"^4M",["^T"]]],["^1>","goog/html/safestylesheet.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4J",["^ ","^4K",null,"^4L",["^H",[]],"^4M",["^T","^4Y","^5C","^4Z","^5I","^4T","^4O"]]],["^1>","goog/math/integer.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4J",["^ ","^4K",null,"^4L",["^H",[]],"^4M",["^T","^52"]]],["^1>","goog/uri/utils.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4J",["^ ","^4K",null,"^4L",["^H",[]],"^4M",["^T","^4T","^4V"]]],["^1>","goog/string/const.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4J",["^ ","^4K",null,"^4L",["^H",[]],"^4M",["^T","^4T","^4Z"]]],["^1>","goog/crypt/base64.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^4J",["^ ","^4K",null,"^4L",["^H",[]],"^4M",["^T","^4T","~$goog.crypt","^4O","^5G","~$goog.userAgent.product"]]]]],"~:clj-info",["^ ","jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/analyzer/impl.cljc",1689947050000,"jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/source_map/base64_vlq.clj",1689947050000,"jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/instant.clj",1689947050000,"jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/externs.clj",1689947050000,"jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/vendor/clojure/tools/reader/default_data_readers.clj",1689947050000,"jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/compiler.cljc",1689947050000,"jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/reader.clj",1689947050000,"jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/env.cljc",1689947050000,"jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/analyzer/impl/namespaces.cljc",1689947050000,"jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/source_map.clj",1689947050000,"jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/util.cljc",1689947050000,"jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/analyzer.cljc",1689947050000,"jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/analyzer/passes.cljc",1689947050000,"jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/vendor/clojure/data/json.clj",1689947050000,"jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/source_map/base64.clj",1689947050000,"jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/vendor/clojure/tools/reader/reader_types.clj",1689947050000,"jar:file:/root/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/set.clj",1689946092000,"jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/vendor/clojure/tools/reader/impl/inspect.clj",1689947050000,"jar:file:/root/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/string.clj",1689946092000,"jar:file:/root/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/core.clj",1689946092000,"jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/analyzer/passes/and_or.cljc",1689947050000,"jar:file:/root/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/pprint.clj",1689946092000,"jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/js_deps.cljc",1689947050000,"jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/core.cljc",1689947050000,"jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/vendor/clojure/tools/reader.clj",1689947050000,"jar:file:/root/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/edn.clj",1689946092000,"jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/vendor/clojure/tools/reader/impl/errors.clj",1689947050000,"jar:file:/root/.m2/repository/org/clojure/clojurescript/1.11.60/clojurescript-1.11.60.jar!/cljs/tagged_literals.cljc",1689947050000,"jar:file:/root/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/java/io.clj",1689946092000,"jar:file:/root/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/instant.clj",1689946092000,"jar:file:/root/.m2/repository/org/clojure/tools.reader/1.3.6/tools.reader-1.3.6.jar!/cljs/tools/reader/reader_types.clj",1689946174000],"~:analyzer",["^ ","^3",null,"^4",["^ "],"^5",["^ ","^6","inflections/core.cljc","^7",1,"^8",5,"^9",1,"^:",21],"^;",["^ ","^<","^=","^>","^?","^@","^A","^B","^C","^D","^E"],"^F",null,"^G",["^H",["^I"]],"^J","^K","^L",["^ "],"^O",null,"^P",["^ ","^Q","^Q","^R","^R","^S","^S","^?","^?","^T","^T"],"^U",["^H",["^V"]],"^W",["^ ","^X","^Q","^Y","^Q","^Z","^Q","^I","^Q","^[","^Q","^10","^Q","^11","^R","^12","^S"],"~:defs",["^ ","~$plural!",["^ ","~:protocol-inline",null,"^5",["^ ","^6","inflections/core.cljc","^7",124,"^8",7,"^9",124,"^:",14,"~:arglists",["^15",["~$quote",["^15",[["~$&","~$patterns-and-replacements"]]]]],"~:doc","Define rule(s) to map words from singular to plural.\n\n  Examples: (plural! #\"$(?i)\" \"s\")\n            (plural! #\"(ax|test)is$(?i)\" \"$1es\"\n                     #\"(octop|vir)us$(?i)\" \"$1i\")","~:top-fn",["^ ","~:variadic?",true,"~:fixed-arity",0,"~:max-fixed-arity",0,"~:method-params",[["^15",["^6W"]]],"^6U",["^15",[["~$&","^6W"]]],"~:arglists-meta",["^15",[null]]]],"^J","^31","^6","inflections/core.cljc","^:",14,"^6Y",["^ ","^6Z",true,"^6[",0,"^70",0,"^71",[["^15",["^6W"]]],"^6U",["^15",[["~$&","^6W"]]],"^72",["^15",[null]]],"^71",[["^15",["^6W"]]],"~:protocol-impl",null,"^6[",0,"^72",["^15",[null]],"^8",1,"^6Z",true,"~:methods",[["^ ","^6[",0,"^6Z",true,"~:tag","~$clj-nil"]],"^7",124,"~:ret-tag","~$any","^9",124,"^70",0,"~:fn-var",true,"^6U",["^15",[["~$&","^6W"]]],"^6X","Define rule(s) to map words from singular to plural.\n\n  Examples: (plural! #\"$(?i)\" \"s\")\n            (plural! #\"(ax|test)is$(?i)\" \"$1es\"\n                     #\"(octop|vir)us$(?i)\" \"$1i\")"],"~$titleize",["^ ","^6T",null,"^5",["^ ","^6","inflections/core.cljc","^7",312,"^8",7,"^9",312,"^:",15,"^6U",["^15",["^6V",["^15",[["~$s"]]]]],"^6X","Convert `s` into a title."],"^J","^2B","^6","inflections/core.cljc","^:",15,"^71",["^15",[["~$s"]]],"^73",null,"^72",["^15",[null,null]],"^8",1,"^6Z",false,"^7",312,"^77",["^H",["~$string","^76"]],"^9",312,"^70",1,"^79",true,"^6U",["^15",["^6V",["^15",[["~$s"]]]]],"^6X","Convert `s` into a title."],"~$resolve-rules",["^ ","^6T",null,"^5",["^ ","^6","inflections/core.cljc","^7",38,"^8",7,"^9",38,"^:",20,"^6U",["^15",["^6V",["^15",[["~$rules","~$word"]]]]]],"^J","^45","^6","inflections/core.cljc","^:",20,"^71",["^15",[["^7=","^7>"]]],"^73",null,"^72",["^15",[null,null]],"^8",1,"^6Z",false,"^7",38,"^77",["^H",["^78","^76"]],"^9",38,"^70",2,"^79",true,"^6U",["^15",["^6V",["^15",[["^7=","^7>"]]]]]],"~$transform-values",["^ ","^6T",null,"^5",["^ ","^6","inflections/core.cljc","^7",484,"^8",7,"^9",484,"^:",23,"^6U",["^15",["^6V",["^15",[["~$m","~$f"]]]]],"^6X","Recursively transform all map values of m by applying f on them."],"^J","^33","^6","inflections/core.cljc","^:",23,"^71",["^15",[["~$m","~$f"]]],"^73",null,"^72",["^15",[null,null]],"^8",1,"^6Z",false,"^7",484,"^77",["^H",[null,"^78"]],"^9",484,"^70",2,"^79",true,"^6U",["^15",["^6V",["^15",[["~$m","~$f"]]]]],"^6X","Recursively transform all map values of m by applying f on them."],"~$add-irregular!",["^ ","^6T",null,"^5",["^ ","^6","inflections/core.cljc","^7",215,"^8",7,"^9",215,"^:",21,"^6U",["^15",["^6V",["^15",[["~$singular","~$plural"]]]]],"^6X","Add `singular` and `plural` to the set of `*irregular-words*`."],"^J","^41","^6","inflections/core.cljc","^:",21,"^71",["^15",[["^7A","^7B"]]],"^73",null,"^72",["^15",[null,null]],"^8",1,"^6Z",false,"^7",215,"^77",["^H",[null,"^78"]],"^9",215,"^70",2,"^79",true,"^6U",["^15",["^6V",["^15",[["^7A","^7B"]]]]],"^6X","Add `singular` and `plural` to the set of `*irregular-words*`."],"~$init-singular-rules!",["^ ","^6T",null,"^5",["^ ","^6","inflections/core.cljc","^7",175,"^8",7,"^9",175,"^:",27,"^6U",["^15",["^6V",["^15",[[]]]]]],"^J","^4;","^6","inflections/core.cljc","^:",27,"^71",["^15",[[]]],"^73",null,"^72",["^15",[null,null]],"^8",1,"^6Z",false,"^7",175,"^77","^76","^9",175,"^70",0,"^79",true,"^6U",["^15",["^6V",["^15",[[]]]]]],"~$stringify-values",["^ ","^6T",null,"^5",["^ ","^6","inflections/core.cljc","^7",513,"^8",7,"^9",513,"^:",23,"^6U",["^15",["^6V",["^15",[["~$m"]]]]],"^6X","Recursively transform all values of m into strings."],"^J","^4E","^6","inflections/core.cljc","^:",23,"^71",["^15",[["~$m"]]],"^73",null,"^72",["^15",[null,null]],"^8",1,"^6Z",false,"^7",513,"^77",["^H",[null,"^78"]],"^9",513,"^70",1,"^79",true,"^6U",["^15",["^6V",["^15",[["~$m"]]]]],"^6X","Recursively transform all values of m into strings."],"~$capitalize",["^ ","^6T",null,"^5",["^ ","^6","inflections/core.cljc","^7",290,"^8",7,"^9",290,"^:",17,"^6U",["^15",["^6V",["^15",[["^7>"]]]]],"^6X","Convert the first letter in `word` to upper case.\n\n  Examples:\n\n    (capitalize \"hello\")\n    ;=> \"Hello\"\n\n    (capitalize \"HELLO\")\n    ;=> \"Hello\"\n\n    (capitalize \"abc123\")\n    ;=> \"Abc123\""],"^J","^4G","^6","inflections/core.cljc","^:",17,"^71",["^15",[["^7>"]]],"^73",null,"^72",["^15",[null,null]],"^8",1,"^6Z",false,"^7",290,"^77",["^H",[null,"^78","^2@","^48","^76"]],"^9",290,"^70",1,"^79",true,"^6U",["^15",["^6V",["^15",[["^7>"]]]]],"^6X","Convert the first letter in `word` to upper case.\n\n  Examples:\n\n    (capitalize \"hello\")\n    ;=> \"Hello\"\n\n    (capitalize \"HELLO\")\n    ;=> \"Hello\"\n\n    (capitalize \"abc123\")\n    ;=> \"Abc123\""],"~$slurp-rules",["^ ","^6T",null,"^5",["^ ","^6","inflections/core.cljc","^7",25,"^8",7,"^9",25,"^:",18,"^6U",["^15",["^6V",["^15",[["~$&","^6W"]]]]],"^6X","Returns a seq of rules, where the pattern and replacement must be\n  given in pairs of two elements.","^6Y",["^ ","^6Z",true,"^6[",0,"^70",0,"^71",[["^15",["^6W"]]],"^6U",["^15",[["~$&","^6W"]]],"^72",["^15",[null]]]],"^J","^4A","^6","inflections/core.cljc","^:",18,"^6Y",["^ ","^6Z",true,"^6[",0,"^70",0,"^71",[["^15",["^6W"]]],"^6U",["^15",[["~$&","^6W"]]],"^72",["^15",[null]]],"^71",[["^15",["^6W"]]],"^73",null,"^6[",0,"^72",["^15",[null]],"^8",1,"^6Z",true,"^74",[["^ ","^6[",0,"^6Z",true,"^75","~$cljs.core/LazySeq"]],"^7",25,"^77","^78","^9",25,"^70",0,"^79",true,"^6U",["^15",[["~$&","^6W"]]],"^6X","Returns a seq of rules, where the pattern and replacement must be\n  given in pairs of two elements."],"~$delete-uncountable!",["^ ","^6T",null,"^5",["^ ","^6","inflections/core.cljc","^7",107,"^8",7,"^9",107,"^:",26,"^6U",["^15",["^6V",["^15",[["^7>"]]]]],"^6X","Delete `word` from the set of `*uncountable-words*`."],"^J","^4D","^6","inflections/core.cljc","^:",26,"^71",["^15",[["^7>"]]],"^73",null,"^72",["^15",[null,null]],"^8",1,"^6Z",false,"^7",107,"^77",["^H",[null,"^78"]],"^9",107,"^70",1,"^79",true,"^6U",["^15",["^6V",["^15",[["^7>"]]]]],"^6X","Delete `word` from the set of `*uncountable-words*`."],"~$init-inflections!",["^ ","^6T",null,"^5",["^ ","^6","inflections/core.cljc","^7",521,"^8",7,"^9",521,"^:",24,"^6U",["^15",["^6V",["^15",[[]]]]],"^6X","Initialize the Inflections library with defaults."],"^J","^4=","^6","inflections/core.cljc","^:",24,"^71",["^15",[[]]],"^73",null,"^72",["^15",[null,null]],"^8",1,"^6Z",false,"^7",521,"^77","^78","^9",521,"^70",0,"^79",true,"^6U",["^15",["^6V",["^15",[[]]]]],"^6X","Initialize the Inflections library with defaults."],"~$*singular-rules*",["^ ","^5",["^ ","^6","inflections/core.cljc","^7",155,"^8",23,"^9",155,"^:",39,"~:dynamic",true],"^J","^2V","^6","inflections/core.cljc","^:",39,"^8",1,"^7K",true,"^7",155,"^9",155,"^75","^78"],"~$*uncountable-words*",["^ ","^5",["^ ","^6","inflections/core.cljc","^7",60,"^8",23,"^9",60,"^:",42,"^7K",true],"^J","^4?","^6","inflections/core.cljc","^:",42,"^8",1,"^7K",true,"^7",60,"^9",60,"^75","^78"],"~$hyphenate",["^ ","^6T",null,"^5",["^ ","^6","inflections/core.cljc","^7",348,"^8",7,"^9",348,"^:",16,"^6U",["^15",["^6V",["^15",[["~$x"]]]]],"^6X","Hyphenate x, which is the same as threading `x` through the str,\n  underscore and dasherize fns.\n\n  Examples:\n\n    (hyphenate 'Continent)\n    ; => \"continent\"\n\n    (hyphenate \"CountryFlag\")\n    ; => \"country-flag\""],"^J","^3<","^6","inflections/core.cljc","^:",16,"^71",["^15",[["~$x"]]],"^73",null,"^72",["^15",[null,null]],"^8",1,"^6Z",false,"^7",348,"^77",["^H",[null,"^78","^2@","^48","^76"]],"^9",348,"^70",1,"^79",true,"^6U",["^15",["^6V",["^15",[["~$x"]]]]],"^6X","Hyphenate x, which is the same as threading `x` through the str,\n  underscore and dasherize fns.\n\n  Examples:\n\n    (hyphenate 'Continent)\n    ; => \"continent\"\n\n    (hyphenate \"CountryFlag\")\n    ; => \"country-flag\""],"~$countable?",["^ ","^6T",null,"^5",["^ ","^6","inflections/core.cljc","^7",93,"^8",7,"^9",93,"^:",17,"^6U",["^15",["^6V",["^15",[["~$s"]]]]],"^6X","Returns true if `s` is countable, otherwise false."],"^J","^3Z","^6","inflections/core.cljc","^:",17,"^71",["^15",[["~$s"]]],"^73",null,"^72",["^15",[null,null]],"^8",1,"^6Z",false,"^7",93,"^77",["^H",["~$boolean","^76"]],"^9",93,"^70",1,"^79",true,"^6U",["^15",["^6V",["^15",[["~$s"]]]]],"^6X","Returns true if `s` is countable, otherwise false."],"~$hyphenate-keys",["^ ","^6T",null,"^5",["^ ","^6","inflections/core.cljc","^7",501,"^8",7,"^9",501,"^:",21,"^6U",["^15",["^6V",["^15",[["~$m"]]]]],"^6X","Recursively apply hyphenate on all keys of m."],"^J","^1S","^6","inflections/core.cljc","^:",21,"^71",["^15",[["~$m"]]],"^73",null,"^72",["^15",[null,null]],"^8",1,"^6Z",false,"^7",501,"^77",["^H",[null,"^78"]],"^9",501,"^70",1,"^79",true,"^6U",["^15",["^6V",["^15",[["~$m"]]]]],"^6X","Recursively apply hyphenate on all keys of m."],"~$init-plural-rules!",["^ ","^6T",null,"^5",["^ ","^6","inflections/core.cljc","^7",133,"^8",7,"^9",133,"^:",25,"^6U",["^15",["^6V",["^15",[[]]]]]],"^J","^1M","^6","inflections/core.cljc","^:",25,"^71",["^15",[[]]],"^73",null,"^72",["^15",[null,null]],"^8",1,"^6Z",false,"^7",133,"^77","^76","^9",133,"^70",0,"^79",true,"^6U",["^15",["^6V",["^15",[[]]]]]],"~$irregular?",["^ ","^6T",null,"^5",["^ ","^6","inflections/core.cljc","^7",209,"^8",7,"^9",209,"^:",17,"^6U",["^15",["^6V",["^15",[["^7>"]]]]],"^6X","Returns true if `word` is an irregular word, otherwise false."],"^J","^3B","^6","inflections/core.cljc","^:",17,"^71",["^15",[["^7>"]]],"^73",null,"^72",["^15",[null,null]],"^8",1,"^6Z",false,"^7",209,"^77",["^H",["^7O","^76"]],"^9",209,"^70",1,"^79",true,"^6U",["^15",["^6V",["^15",[["^7>"]]]]],"^6X","Returns true if `word` is an irregular word, otherwise false."],"~$Rule",["^ ","~:num-fields",2,"~:protocols",["^H",["~$cljs.core/IRecord","~$cljs.core/IKVReduce","~$cljs.core/IEquiv","~$cljs.core/IHash","~$cljs.core/ICollection","~$cljs.core/ICounted","~$cljs.core/ISeqable","~$cljs.core/IMeta","~$cljs.core/ICloneable","~$cljs.core/IPrintWithWriter","~$cljs.core/IIterable","~$cljs.core/IWithMeta","~$cljs.core/IAssociative","~$cljs.core/IMap","~$cljs.core/ILookup"]],"^J","^3@","^6","inflections/core.cljc","^:",16,"~:type",true,"^8",12,"~:internal-ctor",true,"^7",19,"~:record",true,"^9",19,"^75","~$function","~:skip-protocol-flag",["^H",["^7V","^7W","^7X","^7Y","^7Z","^7[","^80","^81","^82","^83","^84","^85","^86","^87","^88"]]],"~$transform-keys",["^ ","^6T",null,"^5",["^ ","^6","inflections/core.cljc","^7",464,"^8",7,"^9",464,"^:",21,"^6U",["^15",["^6V",["^15",[["~$m","~$f"]]]]],"^6X","Recursively transform all keys in the map `m` by applying `f` on them."],"^J","^3H","^6","inflections/core.cljc","^:",21,"^71",["^15",[["~$m","~$f"]]],"^73",null,"^72",["^15",[null,null]],"^8",1,"^6Z",false,"^7",464,"^77",["^H",[null,"^78"]],"^9",464,"^70",2,"^79",true,"^6U",["^15",["^6V",["^15",[["~$m","~$f"]]]]],"^6X","Recursively transform all keys in the map `m` by applying `f` on them."],"~$->Rule",["^ ","^6T",null,"^5",["^ ","^6","inflections/core.cljc","^:",16,"^8",12,"^8:",true,"~:factory","~:positional","^7",19,"^9",19,"^6U",["^15",["^6V",["^15",[["~$pattern","~$replacement"]]]]],"^6X","Positional factory function for inflections.core/Rule."],"^J","^3=","^6","inflections/core.cljc","^:",16,"^71",["^15",[["^8B","^8C"]]],"^73",null,"^72",["^15",[null,null]],"^8",1,"^8:",true,"^6Z",false,"^8@","^8A","^7",19,"^77","^3@","^9",19,"^70",2,"^79",true,"^6U",["^15",["^6V",["^15",[["^8B","^8C"]]]]],"^6X","Positional factory function for inflections.core/Rule."],"~$acronym",["^ ","^6T",null,"^5",["^ ","^6","inflections/core.cljc","^7",76,"^8",7,"^9",76,"^:",14,"^6U",["^15",["^6V",["^15",[["~$s"]]]]],"^6X","Returns the the acronym for `s` if it is one, otherwise nil."],"^J","^1T","^6","inflections/core.cljc","^:",14,"^71",["^15",[["~$s"]]],"^73",null,"^72",["^15",[null,null]],"^8",1,"^6Z",false,"^7",76,"^77",["^H",[null,"^78","^2@","^48","^76"]],"^9",76,"^70",1,"^79",true,"^6U",["^15",["^6V",["^15",[["~$s"]]]]],"^6X","Returns the the acronym for `s` if it is one, otherwise nil."],"~$camel-case-keys",["^ ","^6T",null,"^5",["^ ","^6","inflections/core.cljc","^7",495,"^8",7,"^9",495,"^:",22,"^6U",["^15",["^6V",["^15",[["~$m","~$&",["~$mode"]]]]]],"^6X","Recursively apply camel-case on all keys of m.","^6Y",["^ ","^6Z",true,"^6[",1,"^70",1,"^71",[["^15",["~$m",["^8F"]]]],"^6U",["^15",[["~$m","~$&",["^8F"]]]],"^72",["^15",[null]]]],"^J","^3E","^6","inflections/core.cljc","^:",22,"^6Y",["^ ","^6Z",true,"^6[",1,"^70",1,"^71",[["^15",["~$m",["^8F"]]]],"^6U",["^15",[["~$m","~$&",["^8F"]]]],"^72",["^15",[null]]],"^71",[["^15",["~$m",["^8F"]]]],"^73",null,"^6[",1,"^72",["^15",[null]],"^8",1,"^6Z",true,"^74",[["^ ","^6[",1,"^6Z",true,"^75","^78"]],"^7",495,"^77","^78","^9",495,"^70",1,"^79",true,"^6U",["^15",[["~$m","~$&",["^8F"]]]],"^6X","Recursively apply camel-case on all keys of m."],"~$add-rule!",["^ ","^6T",null,"^5",["^ ","^6","inflections/core.cljc","^7",21,"^8",7,"^9",21,"^:",16,"^6U",["^15",["^6V",["^15",[["^7=","~$rule"]]]]]],"^J","^24","^6","inflections/core.cljc","^:",16,"^71",["^15",[["^7=","^8H"]]],"^73",null,"^72",["^15",[null,null]],"^8",1,"^6Z",false,"^7",21,"^77",["^H",[null,"^78","^76"]],"^9",21,"^70",2,"^79",true,"^6U",["^15",["^6V",["^15",[["^7=","^8H"]]]]]],"^7A",["^ ","^6T",null,"^5",["^ ","^6","inflections/core.cljc","^7",158,"^8",7,"^9",158,"^:",15,"^6U",["^15",["^6V",["^15",[["~$s"]]]]],"^6X","Returns the singular of s."],"^J","^2>","^6","inflections/core.cljc","^:",15,"^71",["^15",[["~$s"]]],"^73",null,"^72",["^15",[null,null]],"^8",1,"^6Z",false,"^7",158,"^77",["^H",[null,"^78","^2@","^48","^76"]],"^9",158,"^70",1,"^79",true,"^6U",["^15",["^6V",["^15",[["~$s"]]]]],"^6X","Returns the singular of s."],"~$parameterize",["^ ","^6T",null,"^5",["^ ","^6","inflections/core.cljc","^7",391,"^8",7,"^9",391,"^:",19,"^6U",["^15",["^6V",["^15",[["~$x","~$&",["~$sep"]]]]]],"^6X","Replaces special characters in `x` with the default separator\n  \"-\". so that it may be used as part of a pretty URL.\n\n  Examples:\n\n    (parameterize \"Donald E. Knuth\")\n    ; => \"donald-e-knuth\"\n\n    (parameterize \"Donald E. Knuth\" \"_\")\n    ; => \"donald_e_knuth\"","^6Y",["^ ","^6Z",true,"^6[",1,"^70",1,"^71",[["^15",["~$x",["^8J"]]]],"^6U",["^15",[["~$x","~$&",["^8J"]]]],"^72",["^15",[null]]]],"^J","^3N","^6","inflections/core.cljc","^:",19,"^6Y",["^ ","^6Z",true,"^6[",1,"^70",1,"^71",[["^15",["~$x",["^8J"]]]],"^6U",["^15",[["~$x","~$&",["^8J"]]]],"^72",["^15",[null]]],"^71",[["^15",["~$x",["^8J"]]]],"^73",null,"^6[",1,"^72",["^15",[null]],"^8",1,"^6Z",true,"^74",[["^ ","^6[",1,"^6Z",true,"^75",["^H",["^7;","^76"]]]],"^7",391,"^77","^78","^9",391,"^70",1,"^79",true,"^6U",["^15",[["~$x","~$&",["^8J"]]]],"^6X","Replaces special characters in `x` with the default separator\n  \"-\". so that it may be used as part of a pretty URL.\n\n  Examples:\n\n    (parameterize \"Donald E. Knuth\")\n    ; => \"donald-e-knuth\"\n\n    (parameterize \"Donald E. Knuth\" \"_\")\n    ; => \"donald_e_knuth\""],"~$*plural-rules*",["^ ","^5",["^ ","^6","inflections/core.cljc","^7",113,"^8",23,"^9",113,"^:",37,"^7K",true],"^J","^43","^6","inflections/core.cljc","^:",37,"^8",1,"^7K",true,"^7",113,"^9",113,"^75","^78"],"~$singular!",["^ ","^6T",null,"^5",["^ ","^6","inflections/core.cljc","^7",166,"^8",7,"^9",166,"^:",16,"^6U",["^15",["^6V",["^15",[["~$&","^6W"]]]]],"^6X","Define rule(s) to map words from singular to plural.\n\n  Examples: (singular! #\"(n)ews$(?i)\" \"$1ews\")\n            (singular! #\"(m)ovies$(?i)\" \"$1ovie\"\n                       #\"([m|l])ice$(?i)\" \"$1ouse\")","^6Y",["^ ","^6Z",true,"^6[",0,"^70",0,"^71",[["^15",["^6W"]]],"^6U",["^15",[["~$&","^6W"]]],"^72",["^15",[null]]]],"^J","^3W","^6","inflections/core.cljc","^:",16,"^6Y",["^ ","^6Z",true,"^6[",0,"^70",0,"^71",[["^15",["^6W"]]],"^6U",["^15",[["~$&","^6W"]]],"^72",["^15",[null]]],"^71",[["^15",["^6W"]]],"^73",null,"^6[",0,"^72",["^15",[null]],"^8",1,"^6Z",true,"^74",[["^ ","^6[",0,"^6Z",true,"^75","^76"]],"^7",166,"^77","^78","^9",166,"^70",0,"^79",true,"^6U",["^15",[["~$&","^6W"]]],"^6X","Define rule(s) to map words from singular to plural.\n\n  Examples: (singular! #\"(n)ews$(?i)\" \"$1ews\")\n            (singular! #\"(m)ovies$(?i)\" \"$1ovie\"\n                       #\"([m|l])ice$(?i)\" \"$1ouse\")"],"~$resolve-rule",["^ ","^6T",null,"^5",["^ ","^6","inflections/core.cljc","^7",31,"^8",7,"^9",31,"^:",19,"^6U",["^15",["^6V",["^15",[["^8H","^7>"]]]]]],"^J","^40","^6","inflections/core.cljc","^:",19,"^71",["^15",[["^8H","^7>"]]],"^73",null,"^72",["^15",[null,null]],"^8",1,"^6Z",false,"^7",31,"^77",["^H",["^7;","^76"]],"^9",31,"^70",2,"^79",true,"^6U",["^15",["^6V",["^15",[["^8H","^7>"]]]]]],"~$dasherize",["^ ","^6T",null,"^5",["^ ","^6","inflections/core.cljc","^7",318,"^8",7,"^9",318,"^:",16,"^6U",["^15",["^6V",["^15",[["~$s"]]]]],"^6X","Replaces all underscores in `s` with dashes.\n\n  Examples:\n\n    (dasherize \"puni_puni\")\n    ;=> \"puni-puni\""],"^J","^3R","^6","inflections/core.cljc","^:",16,"^71",["^15",[["~$s"]]],"^73",null,"^72",["^15",[null,null]],"^8",1,"^6Z",false,"^7",318,"^77",["^H",[null,"^78","^2@","^48","^76"]],"^9",318,"^70",1,"^79",true,"^6U",["^15",["^6V",["^15",[["~$s"]]]]],"^6X","Replaces all underscores in `s` with dashes.\n\n  Examples:\n\n    (dasherize \"puni_puni\")\n    ;=> \"puni-puni\""],"~$stringify-keys",["^ ","^6T",null,"^5",["^ ","^6","inflections/core.cljc","^7",509,"^8",7,"^9",509,"^:",21,"^6U",["^15",["^6V",["^15",[["~$m"]]]]],"^6X","Recursively transform all keys of m into strings."],"^J","^3T","^6","inflections/core.cljc","^:",21,"^71",["^15",[["~$m"]]],"^73",null,"^72",["^15",[null,null]],"^8",1,"^6Z",false,"^7",509,"^77",["^H",[null,"^78"]],"^9",509,"^70",1,"^79",true,"^6U",["^15",["^6V",["^15",[["~$m"]]]]],"^6X","Recursively transform all keys of m into strings."],"~$*acronyms*",["^ ","^5",["^ ","^6","inflections/core.cljc","^7",72,"^8",23,"^9",72,"^:",33,"^7K",true],"^J","^47","^6","inflections/core.cljc","^:",33,"^8",1,"^7K",true,"^7",72,"^9",72,"^75","^78"],"~$delete-irregular!",["^ ","^6T",null,"^5",["^ ","^6","inflections/core.cljc","^7",227,"^8",7,"^9",227,"^:",24,"^6U",["^15",["^6V",["^15",[["^7A","^7B"]]]]],"^6X","Delete `singular` and `plural` from the set of *irregular-words*."],"^J","^2M","^6","inflections/core.cljc","^:",24,"^71",["^15",[["^7A","^7B"]]],"^73",null,"^72",["^15",[null,null]],"^8",1,"^6Z",false,"^7",227,"^77",["^H",[null,"^78"]],"^9",227,"^70",2,"^79",true,"^6U",["^15",["^6V",["^15",[["^7A","^7B"]]]]],"^6X","Delete `singular` and `plural` from the set of *irregular-words*."],"~$map->Rule",["^ ","^6T",null,"^5",["^ ","^6","inflections/core.cljc","^:",16,"^8",12,"^8:",true,"^8@","~:map","^7",19,"^9",19,"^6U",["^15",["^6V",["^15",[["~$G__41479"]]]]],"^6X","Factory function for inflections.core/Rule, taking a map of keywords to field values."],"^J","^4:","^6","inflections/core.cljc","^:",16,"^71",["^15",[["^8T"]]],"^73",null,"^72",["^15",[null,null]],"^8",1,"^8:",true,"^6Z",false,"^8@","^8S","^7",19,"^77","^3@","^9",19,"^70",1,"^79",true,"^6U",["^15",["^6V",["^15",[["^8T"]]]]],"^6X","Factory function for inflections.core/Rule, taking a map of keywords to field values."],"~$underscore-keys",["^ ","^6T",null,"^5",["^ ","^6","inflections/core.cljc","^7",517,"^8",7,"^9",517,"^:",22,"^6U",["^15",["^6V",["^15",[["~$m"]]]]],"^6X","Recursively apply underscore on all keys of m."],"^J","^1W","^6","inflections/core.cljc","^:",22,"^71",["^15",[["~$m"]]],"^73",null,"^72",["^15",[null,null]],"^8",1,"^6Z",false,"^7",517,"^77",["^H",[null,"^78"]],"^9",517,"^70",1,"^79",true,"^6U",["^15",["^6V",["^15",[["~$m"]]]]],"^6X","Recursively apply underscore on all keys of m."],"~$*irregular-words*",["^ ","^5",["^ ","^6","inflections/core.cljc","^7",206,"^8",23,"^9",206,"^:",40,"^7K",true],"^J","^2W","^6","inflections/core.cljc","^:",40,"^8",1,"^7K",true,"^7",206,"^9",206,"^75","^78"],"~$delete-acronym!",["^ ","^6T",null,"^5",["^ ","^6","inflections/core.cljc","^7",89,"^8",7,"^9",89,"^:",22,"^6U",["^15",["^6V",["^15",[["^7>"]]]]],"^6X","Delete `word` from the set of `*acronyms*`."],"^J","^30","^6","inflections/core.cljc","^:",22,"^71",["^15",[["^7>"]]],"^73",null,"^72",["^15",[null,null]],"^8",1,"^6Z",false,"^7",89,"^77",["^H",[null,"^78"]],"^9",89,"^70",1,"^79",true,"^6U",["^15",["^6V",["^15",[["^7>"]]]]],"^6X","Delete `word` from the set of `*acronyms*`."],"~$reset-rules!",["^ ","^6T",null,"^5",["^ ","^6","inflections/core.cljc","^7",41,"^8",7,"^9",41,"^:",19,"^6U",["^15",["^6V",["^15",[["^7="]]]]],"^6X","Resets the list of plural rules."],"^J","^1Q","^6","inflections/core.cljc","^:",19,"^71",["^15",[["^7="]]],"^73",null,"^72",["^15",[null,null]],"^8",1,"^6Z",false,"^7",41,"^77",["^H",[null,"^78"]],"^9",41,"^70",1,"^79",true,"^6U",["^15",["^6V",["^15",[["^7="]]]]],"^6X","Resets the list of plural rules."],"~$demodulize",["^ ","^6T",null,"^5",["^ ","^6","inflections/core.cljc","^7",330,"^8",7,"^9",330,"^:",17,"^6U",["^15",["^6V",["^15",[["~$x"]]]]],"^6X","Removes the module part from `x`.\n\n  Examples:\n\n    (demodulize \"inflections.MyRecord\")\n    ;=> \"MyRecord\"\n\n    (demodulize \"ActiveRecord::CoreExtensions::String::Inflections\")\n    ;=> \"Inflections\"\n\n    (demodulize \"Inflections\")\n    ;=> \"Inflections\""],"^J","^2O","^6","inflections/core.cljc","^:",17,"^71",["^15",[["~$x"]]],"^73",null,"^72",["^15",[null,null]],"^8",1,"^6Z",false,"^7",330,"^77",["^H",[null,"^78","^2@","^48","^76"]],"^9",330,"^70",1,"^79",true,"^6U",["^15",["^6V",["^15",[["~$x"]]]]],"^6X","Removes the module part from `x`.\n\n  Examples:\n\n    (demodulize \"inflections.MyRecord\")\n    ;=> \"MyRecord\"\n\n    (demodulize \"ActiveRecord::CoreExtensions::String::Inflections\")\n    ;=> \"Inflections\"\n\n    (demodulize \"Inflections\")\n    ;=> \"Inflections\""],"~$init-irregular-words!",["^ ","^6T",null,"^5",["^ ","^6","inflections/core.cljc","^7",235,"^8",7,"^9",235,"^:",28,"^6U",["^15",["^6V",["^15",[[]]]]]],"^J","^2Z","^6","inflections/core.cljc","^:",28,"^71",["^15",[[]]],"^73",null,"^72",["^15",[null,null]],"^8",1,"^6Z",false,"^7",235,"^77","^78","^9",235,"^70",0,"^79",true,"^6U",["^15",["^6V",["^15",[[]]]]]],"~$add-acronym!",["^ ","^6T",null,"^5",["^ ","^6","inflections/core.cljc","^7",85,"^8",7,"^9",85,"^:",19,"^6U",["^15",["^6V",["^15",[["^7>"]]]]],"^6X","Adds `word` to the set of `*acronyms*`."],"^J","^3:","^6","inflections/core.cljc","^:",19,"^71",["^15",[["^7>"]]],"^73",null,"^72",["^15",[null,null]],"^8",1,"^6Z",false,"^7",85,"^77",["^H",[null,"^78"]],"^9",85,"^70",1,"^79",true,"^6U",["^15",["^6V",["^15",[["^7>"]]]]],"^6X","Adds `word` to the set of `*acronyms*`."],"~$uncountable?",["^ ","^6T",null,"^5",["^ ","^6","inflections/core.cljc","^7",98,"^8",7,"^9",98,"^:",19,"^6U",["^15",["^6V",["^15",[["~$x"]]]]],"^6X","Returns true if `x` is uncountable, otherwise false."],"^J","^3C","^6","inflections/core.cljc","^:",19,"^71",["^15",[["~$x"]]],"^73",null,"^72",["^15",[null,null]],"^8",1,"^6Z",false,"^7",98,"^77",["^H",["^7O","^76"]],"^9",98,"^70",1,"^79",true,"^6U",["^15",["^6V",["^15",[["~$x"]]]]],"^6X","Returns true if `x` is uncountable, otherwise false."],"~$pluralize",["^ ","^6T",null,"^5",["^ ","^6","inflections/core.cljc","^7",413,"^8",7,"^9",413,"^:",16,"^6U",["^15",["^6V",["^15",[["~$count","^7A","~$&",["^7B"]]]]]],"^6X","Attempts to pluralize the word unless count is 1. If plural is\n  supplied, it will use that when count is > 1, otherwise it will use\n  the inflector to determine the plural form.","^6Y",["^ ","^6Z",true,"^6[",2,"^70",2,"^71",[["^15",["^92","^7A",["^7B"]]]],"^6U",["^15",[["^92","^7A","~$&",["^7B"]]]],"^72",["^15",[null]]]],"^J","^36","^6","inflections/core.cljc","^:",16,"^6Y",["^ ","^6Z",true,"^6[",2,"^70",2,"^71",[["^15",["^92","^7A",["^7B"]]]],"^6U",["^15",[["^92","^7A","~$&",["^7B"]]]],"^72",["^15",[null]]],"^71",[["^15",["^92","^7A",["^7B"]]]],"^73",null,"^6[",2,"^72",["^15",[null]],"^8",1,"^6Z",true,"^74",[["^ ","^6[",2,"^6Z",true,"^75","^7;"]],"^7",413,"^77","^78","^9",413,"^70",2,"^79",true,"^6U",["^15",[["^92","^7A","~$&",["^7B"]]]],"^6X","Attempts to pluralize the word unless count is 1. If plural is\n  supplied, it will use that when count is > 1, otherwise it will use\n  the inflector to determine the plural form."],"~$camel-case",["^ ","^6T",null,"^5",["^ ","^6","inflections/core.cljc","^7",253,"^8",7,"^9",253,"^:",17,"^6U",["^15",["^6V",["^15",[["^7>","~$&",["^8F"]]]]]],"^6X","Convert `word` to camel case. By default, camel-case converts to\n  UpperCamelCase. If the argument to camel-case is set to :lower then\n  camel-case produces lowerCamelCase.\n\n  Examples:\n\n    (camel-case \"active_record\")\n    ;=> \"ActiveRecord\"\n\n    (camel-case \"active_record\" :lower)\n    ;=> \"activeRecord\"\n\n    (camel-case \"active_record/errors\")\n    ;=> \"ActiveRecord/Errors\"\n\n    (camel-case \"active_record/errors\" :lower)\n    ;=> \"activeRecord/Errors\"","^6Y",["^ ","^6Z",true,"^6[",1,"^70",1,"^71",[["^15",["^7>",["^8F"]]]],"^6U",["^15",[["^7>","~$&",["^8F"]]]],"^72",["^15",[null]]]],"^J","^39","^6","inflections/core.cljc","^:",17,"^6Y",["^ ","^6Z",true,"^6[",1,"^70",1,"^71",[["^15",["^7>",["^8F"]]]],"^6U",["^15",[["^7>","~$&",["^8F"]]]],"^72",["^15",[null]]],"^71",[["^15",["^7>",["^8F"]]]],"^73",null,"^6[",1,"^72",["^15",[null]],"^8",1,"^6Z",true,"^74",[["^ ","^6[",1,"^6Z",true,"^75",["^H",[null,"^78","^2@","^48","^76"]]]],"^7",253,"^77","^78","^9",253,"^70",1,"^79",true,"^6U",["^15",[["^7>","~$&",["^8F"]]]],"^6X","Convert `word` to camel case. By default, camel-case converts to\n  UpperCamelCase. If the argument to camel-case is set to :lower then\n  camel-case produces lowerCamelCase.\n\n  Examples:\n\n    (camel-case \"active_record\")\n    ;=> \"ActiveRecord\"\n\n    (camel-case \"active_record\" :lower)\n    ;=> \"activeRecord\"\n\n    (camel-case \"active_record/errors\")\n    ;=> \"ActiveRecord/Errors\"\n\n    (camel-case \"active_record/errors\" :lower)\n    ;=> \"activeRecord/Errors\""],"^7B",["^ ","^6T",null,"^5",["^ ","^6","inflections/core.cljc","^7",116,"^8",7,"^9",116,"^:",13,"^6U",["^15",["^6V",["^15",[["~$s"]]]]],"^6X","Returns the plural of s."],"^J","^1X","^6","inflections/core.cljc","^:",13,"^71",["^15",[["~$s"]]],"^73",null,"^72",["^15",[null,null]],"^8",1,"^6Z",false,"^7",116,"^77",["^H",["^78","^7;","^76"]],"^9",116,"^70",1,"^79",true,"^6U",["^15",["^6V",["^15",[["~$s"]]]]],"^6X","Returns the plural of s."],"~$add-uncountable!",["^ ","^6T",null,"^5",["^ ","^6","inflections/core.cljc","^7",103,"^8",7,"^9",103,"^:",23,"^6U",["^15",["^6V",["^15",[["^7>"]]]]],"^6X","Adds `word` to the set of `*uncountable-words*`."],"^J","^3D","^6","inflections/core.cljc","^:",23,"^71",["^15",[["^7>"]]],"^73",null,"^72",["^15",[null,null]],"^8",1,"^6Z",false,"^7",103,"^77",["^H",[null,"^78"]],"^9",103,"^70",1,"^79",true,"^6U",["^15",["^6V",["^15",[["^7>"]]]]],"^6X","Adds `word` to the set of `*uncountable-words*`."],"~$ordinalize",["^ ","^6T",null,"^5",["^ ","^6","inflections/core.cljc","^7",369,"^8",7,"^9",369,"^:",17,"^6U",["^15",["^6V",["^15",[["~$x"]]]]],"^6X","Turns `x` into an ordinal string used to denote the position in an\n  ordered sequence such as 1st, 2nd, 3rd, 4th, etc.\n\n  Examples:\n\n    (ordinalize \"1\")\n    ;=> \"1st\"\n\n    (ordinalize \"23\")\n    ;=> \"23rd\""],"^J","^3K","^6","inflections/core.cljc","^:",17,"^71",["^15",[["~$x"]]],"^73",null,"^72",["^15",[null,null]],"^8",1,"^6Z",false,"^7",369,"^77",["^H",["^7;","^76"]],"^9",369,"^70",1,"^79",true,"^6U",["^15",["^6V",["^15",[["~$x"]]]]],"^6X","Turns `x` into an ordinal string used to denote the position in an\n  ordered sequence such as 1st, 2nd, 3rd, 4th, etc.\n\n  Examples:\n\n    (ordinalize \"1\")\n    ;=> \"1st\"\n\n    (ordinalize \"23\")\n    ;=> \"23rd\""],"~$hyphenate-values",["^ ","^6T",null,"^5",["^ ","^6","inflections/core.cljc","^7",505,"^8",7,"^9",505,"^:",23,"^6U",["^15",["^6V",["^15",[["~$m"]]]]],"^6X","Recursively apply hyphenate on all values of m."],"^J","^2L","^6","inflections/core.cljc","^:",23,"^71",["^15",[["~$m"]]],"^73",null,"^72",["^15",[null,null]],"^8",1,"^6Z",false,"^7",505,"^77",["^H",[null,"^78"]],"^9",505,"^70",1,"^79",true,"^6U",["^15",["^6V",["^15",[["~$m"]]]]],"^6X","Recursively apply hyphenate on all values of m."],"~$str-name",["^ ","^6T",null,"^5",["^ ","^6","inflections/core.cljc","^7",45,"^8",7,"^9",45,"^:",15,"^6U",["^15",["^6V",["^15",[["~$x"]]]]],"^6X","Same as `clojure.core/name`, but keeps the namespace for keywords\n  and symbols."],"^J","^2K","^6","inflections/core.cljc","^:",15,"^71",["^15",[["~$x"]]],"^73",null,"^72",["^15",[null,null]],"^8",1,"^6Z",false,"^7",45,"^77",["^H",["^7;","^76"]],"^9",45,"^70",1,"^79",true,"^6U",["^15",["^6V",["^15",[["~$x"]]]]],"^6X","Same as `clojure.core/name`, but keeps the namespace for keywords\n  and symbols."],"~$underscore",["^ ","^6T",null,"^5",["^ ","^6","inflections/core.cljc","^7",420,"^8",7,"^9",420,"^:",17,"^6U",["^15",["^6V",["^15",[["~$x"]]]]],"^6X","The reverse of camel-case. Makes an underscored, lowercase form from\n  the expression in the string.\n\n  Examples:\n\n    (underscore \"ActiveRecord\")\n    ;=> \"active_record\"\n\n    (underscore \"ActiveRecord::Errors\")\n    ;=> \"active_record::errors\""],"^J","^3P","^6","inflections/core.cljc","^:",17,"^71",["^15",[["~$x"]]],"^73",null,"^72",["^15",[null,null]],"^8",1,"^6Z",false,"^7",420,"^77",["^H",[null,"^78","^2@","^48","^76"]],"^9",420,"^70",1,"^79",true,"^6U",["^15",["^6V",["^15",[["~$x"]]]]],"^6X","The reverse of camel-case. Makes an underscored, lowercase form from\n  the expression in the string.\n\n  Examples:\n\n    (underscore \"ActiveRecord\")\n    ;=> \"active_record\"\n\n    (underscore \"ActiveRecord::Errors\")\n    ;=> \"active_record::errors\""],"~$foreign-key",["^ ","^6T",null,"^5",["^ ","^6","inflections/core.cljc","^7",440,"^8",7,"^9",440,"^:",18,"^6U",["^15",["^6V",["^15",[["~$x","~$&",["^8J"]]]]]],"^6X","Converts `x` into a foreign key. The default separator \"_\" is\n  placed between the name and \"id\".\n\n\n  Examples:\n\n    (foreign-key \"Message\")\n    ;=> \"message_id\"\n\n    (foreign-key \"Message\" false)\n    ;=> \"messageid\"\n\n    (foreign-key \"Admin::Post\")\n    ;=> \"post_id\"","^6Y",["^ ","^6Z",true,"^6[",1,"^70",1,"^71",[["^15",["~$x",["^8J"]]]],"^6U",["^15",[["~$x","~$&",["^8J"]]]],"^72",["^15",[null]]]],"^J","^2G","^6","inflections/core.cljc","^:",18,"^6Y",["^ ","^6Z",true,"^6[",1,"^70",1,"^71",[["^15",["~$x",["^8J"]]]],"^6U",["^15",[["~$x","~$&",["^8J"]]]],"^72",["^15",[null]]],"^71",[["^15",["~$x",["^8J"]]]],"^73",null,"^6[",1,"^72",["^15",[null]],"^8",1,"^6Z",true,"^74",[["^ ","^6[",1,"^6Z",true,"^75",["^H",[null,"^78","^2@","^48","^76"]]]],"^7",440,"^77","^78","^9",440,"^70",1,"^79",true,"^6U",["^15",[["~$x","~$&",["^8J"]]]],"^6X","Converts `x` into a foreign key. The default separator \"_\" is\n  placed between the name and \"id\".\n\n\n  Examples:\n\n    (foreign-key \"Message\")\n    ;=> \"message_id\"\n\n    (foreign-key \"Message\" false)\n    ;=> \"messageid\"\n\n    (foreign-key \"Admin::Post\")\n    ;=> \"post_id\""],"~$coerce",["^ ","^6T",null,"^5",["^ ","^6","inflections/core.cljc","^7",7,"^8",7,"^9",7,"^:",13,"^6U",["^15",["^6V",["^15",[["~$obj","~$s"]]]]],"^6X","Coerce the string `s` to the type of `obj`."],"^J","^3S","^6","inflections/core.cljc","^:",13,"^71",["^15",[["^9;","~$s"]]],"^73",null,"^72",["^15",[null,null]],"^8",1,"^6Z",false,"^7",7,"^77",["^H",[null,"^78","^2@","^48","^76"]],"^9",7,"^70",2,"^79",true,"^6U",["^15",["^6V",["^15",[["^9;","~$s"]]]]],"^6X","Coerce the string `s` to the type of `obj`."]],"^13",["^ ","^?","^?"],"~:cljs.analyzer/constants",["^ ","^U",["^H",["~:upper","~:else","^8B","~:replacement","^8C","~:lower","~:pattern"]],"~:order",["^9>","^9A","^9?","^8B","^8C","^9@","^9="]],"^1:",["^ ","^V",["^H",[]]],"^1;",["^ "],"^1<",["^T","^?","^Q","^R","^S"]],"^N","^K","~:ns-specs",["^ "],"~:ns-spec-vars",["^H",[]],"~:compiler-options",["^4I",[["^9E","~:static-fns"],true,["^9E","~:shadow-tweaks"],null,["^9E","~:source-map-inline"],null,["^9E","~:elide-asserts"],true,["^9E","~:optimize-constants"],null,["^9E","^1A"],null,["^9E","~:external-config"],null,["^9E","~:tooling-config"],null,["^9E","~:emit-constants"],null,["^9E","~:load-tests"],false,["^9E","~:form-size-threshold"],null,["^9E","~:global-goog-object&array"],null,["^9E","~:data-readers"],null,["^9E","~:infer-externs"],"~:auto",["^9E","^1C"],["^H",["^1D"]],["~:js-options","~:js-provider"],"^V",["~:mode"],"~:release",["^9E","~:fn-invoke-direct"],null,["^9E","~:source-map"],null]]]