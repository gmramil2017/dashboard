{"version":3,"file":"index.module.js","sources":["../src/api.ts","../src/index.ts"],"sourcesContent":["/*\n * Copyright (c) 2021 Snowplow Analytics Ltd, 2010 Anthon Pang\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are met:\n *\n * 1. Redistributions of source code must retain the above copyright notice, this\n *    list of conditions and the following disclaimer.\n *\n * 2. Redistributions in binary form must reproduce the above copyright notice,\n *    this list of conditions and the following disclaimer in the documentation\n *    and/or other materials provided with the distribution.\n *\n * 3. Neither the name of the copyright holder nor the names of its\n *    contributors may be used to endorse or promote products derived from\n *    this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\n * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\n * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\n * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\nimport {\n  dispatchToTrackers,\n  ActivityTrackingConfiguration,\n  ActivityTrackingConfigurationCallback,\n  ActivityCallback,\n  ActivityCallbackData,\n  BrowserPlugin,\n  BrowserPluginConfiguration,\n  DisableAnonymousTrackingConfiguration,\n  EnableAnonymousTrackingConfiguration,\n  AnonymousTrackingOptions,\n  FlushBufferConfiguration,\n  PageViewEvent,\n  ClearUserDataConfiguration,\n} from '@snowplow/browser-tracker-core';\nimport {\n  buildSelfDescribingEvent,\n  buildStructEvent,\n  CommonEventProperties,\n  ConditionalContextProvider,\n  ContextPrimitive,\n  ContextGenerator,\n  FilterProvider,\n  RuleSetProvider,\n  SelfDescribingEvent,\n  SelfDescribingJson,\n  StructuredEvent,\n  ContextEvent,\n  ContextFilter,\n  RuleSet,\n} from '@snowplow/tracker-core';\n\nexport {\n  ActivityTrackingConfiguration,\n  ActivityTrackingConfigurationCallback,\n  ActivityCallback,\n  ActivityCallbackData,\n  BrowserPlugin,\n  BrowserPluginConfiguration,\n  FlushBufferConfiguration,\n  PageViewEvent,\n  EnableAnonymousTrackingConfiguration,\n  DisableAnonymousTrackingConfiguration,\n  AnonymousTrackingOptions,\n  ClearUserDataConfiguration,\n  ConditionalContextProvider,\n  ContextPrimitive,\n  SelfDescribingEvent,\n  SelfDescribingJson,\n  CommonEventProperties,\n  StructuredEvent,\n  ContextGenerator,\n  FilterProvider,\n  RuleSetProvider,\n  ContextEvent,\n  ContextFilter,\n  RuleSet,\n};\n\n/**\n * Expires current session and starts a new session.\n *\n * @param trackers - The tracker identifiers which will have their session refreshed\n */\nexport function newSession(trackers?: Array<string>) {\n  dispatchToTrackers(trackers, (t) => {\n    t.newSession();\n  });\n}\n\n/**\n * Override referrer\n *\n * @param url - Custom Referrer which will be used as override\n * @param trackers - The tracker identifiers which will be configured\n */\nexport function setReferrerUrl(url: string, trackers?: Array<string>) {\n  dispatchToTrackers(trackers, (t) => {\n    t.setReferrerUrl(url);\n  });\n}\n\n/**\n * Override url\n *\n * @param url - Custom URL which will be used as override\n * @param trackers - The tracker identifiers which will be configured\n */\nexport function setCustomUrl(url: string, trackers?: Array<string>) {\n  dispatchToTrackers(trackers, (t) => {\n    t.setCustomUrl(url);\n  });\n}\n\n/**\n * Override document.title\n *\n * @param title - Document title which will be used as override\n * @param trackers - The tracker identifiers which will be configured\n */\nexport function setDocumentTitle(title: string, trackers?: Array<string>) {\n  dispatchToTrackers(trackers, (t) => {\n    t.setDocumentTitle(title);\n  });\n}\n\n/**\n * Strip hash tag (or anchor) from URL\n *\n * @param enable - Whether to enable stripping of hash\n * @param trackers - The tracker identifiers which will be configured\n */\nexport function discardHashTag(enable: boolean, trackers?: Array<string>) {\n  dispatchToTrackers(trackers, (t) => {\n    t.discardHashTag(enable);\n  });\n}\n\n/**\n * Strip braces from URL\n *\n * @param enable - Whther to enable stripping of braces\n * @param trackers - The tracker identifiers which will be configured\n */\nexport function discardBrace(enable: boolean, trackers?: Array<string>) {\n  dispatchToTrackers(trackers, (t) => {\n    t.discardBrace(enable);\n  });\n}\n\n/**\n * Set first-party cookie path\n *\n * @param path - The path which will be used when setting cookies\n * @param trackers - The tracker identifiers which will be configured\n */\nexport function setCookiePath(path: string, trackers?: Array<string>) {\n  dispatchToTrackers(trackers, (t) => {\n    t.setCookiePath(path);\n  });\n}\n\n/**\n * Set visitor cookie timeout (in seconds)\n *\n * @param timeout - The timeout until cookies will expire\n * @param trackers - The tracker identifiers which will be configured\n */\nexport function setVisitorCookieTimeout(timeout: number, trackers?: Array<string>) {\n  dispatchToTrackers(trackers, (t) => {\n    t.setVisitorCookieTimeout(timeout);\n  });\n}\n\n/**\n * Enable querystring decoration for links pasing a filter\n *\n * @param crossDomainLinker - Function used to determine which links to decorate\n * @param trackers - The tracker identifiers which will be configured\n */\nexport function crossDomainLinker(\n  crossDomainLinkerCriterion: (elt: HTMLAnchorElement | HTMLAreaElement) => boolean,\n  trackers?: Array<string>\n) {\n  dispatchToTrackers(trackers, (t) => {\n    t.crossDomainLinker(crossDomainLinkerCriterion);\n  });\n}\n\n/**\n * Enables page activity tracking (sends page pings to the Collector regularly).\n *\n * @param configuration - The activity tracking configuration\n * @param trackers - The tracker identifiers which will be configured\n */\nexport function enableActivityTracking(configuration: ActivityTrackingConfiguration, trackers?: Array<string>) {\n  dispatchToTrackers(trackers, (t) => {\n    t.enableActivityTracking(configuration);\n  });\n}\n\n/**\n * Enables page activity tracking (replaces collector ping with callback).\n *\n * @param configuration - The activity tracking callback configuration\n * @param trackers - The tracker identifiers which will be configured\n */\nexport function enableActivityTrackingCallback(\n  configuration: ActivityTrackingConfiguration & ActivityTrackingConfigurationCallback,\n  trackers?: Array<string>\n) {\n  dispatchToTrackers(trackers, (t) => {\n    t.enableActivityTrackingCallback(configuration);\n  });\n}\n\n/**\n * Triggers the activityHandler manually to allow external user defined activity. i.e. While watching a video\n *\n * @param trackers - The tracker identifiers which will be updated\n */\nexport function updatePageActivity(trackers?: Array<string>) {\n  dispatchToTrackers(trackers, (t) => {\n    t.updatePageActivity();\n  });\n}\n\n/**\n * Sets the opt out cookie.\n *\n * @param name - of the opt out cookie\n * @param trackers - The tracker identifiers which will be configured\n */\nexport function setOptOutCookie(name?: string | null, trackers?: Array<string>) {\n  dispatchToTrackers(trackers, (t) => {\n    t.setOptOutCookie(name);\n  });\n}\n\n/**\n * Set the business-defined user ID for this user.\n *\n * @param userId - The business-defined user ID\n * @param trackers - The tracker identifiers which will be configured\n */\nexport function setUserId(userId?: string | null, trackers?: Array<string>) {\n  dispatchToTrackers(trackers, (t) => {\n    t.setUserId(userId);\n  });\n}\n\n/**\n * Set the business-defined user ID for this user using the location querystring.\n *\n * @param querystringField - Name of a querystring name-value pair\n * @param trackers - The tracker identifiers which will be configured\n */\nexport function setUserIdFromLocation(querystringField: string, trackers?: Array<string>) {\n  dispatchToTrackers(trackers, (t) => {\n    t.setUserIdFromLocation(querystringField);\n  });\n}\n\n/**\n * Set the business-defined user ID for this user using the referrer querystring.\n *\n * @param querystringField - Name of a querystring name-value pair\n * @param trackers - The tracker identifiers which will be configured\n */\nexport function setUserIdFromReferrer(querystringField: string, trackers?: Array<string>) {\n  dispatchToTrackers(trackers, (t) => {\n    t.setUserIdFromReferrer(querystringField);\n  });\n}\n\n/**\n * Set the business-defined user ID for this user to the value of a cookie.\n *\n * @param cookieName - Name of the cookie whose value will be assigned to businessUserId\n * @param trackers - The tracker identifiers which will be configured\n */\nexport function setUserIdFromCookie(cookieName: string, trackers?: Array<string>) {\n  dispatchToTrackers(trackers, (t) => {\n    t.setUserIdFromCookie(cookieName);\n  });\n}\n\n/**\n * Specify the Snowplow collector URL. Specific http or https to force it\n * or leave it off to match the website protocol.\n *\n * @param collectorUrl - The collector URL, with or without protocol\n * @param trackers - The tracker identifiers which will be configured\n */\nexport function setCollectorUrl(collectorUrl: string, trackers?: Array<string>) {\n  dispatchToTrackers(trackers, (t) => {\n    t.setCollectorUrl(collectorUrl);\n  });\n}\n\n/**\n * Set the buffer size\n * Can be useful if you want to stop batching requests to ensure events start\n * sending closer to event creation\n *\n * @param newBufferSize - The value with which to update the bufferSize to\n * @param trackers - The tracker identifiers which will be flushed\n */\nexport function setBufferSize(newBufferSize: number, trackers?: Array<string>) {\n  dispatchToTrackers(trackers, (t) => {\n    t.setBufferSize(newBufferSize);\n  });\n}\n\n/**\n * Send all events in the outQueue\n * Only need to use this when sending events with a bufferSize of at least 2\n *\n * @param configuration - The configuration to use following flushing the buffer\n * @param trackers - The tracker identifiers which will be flushed\n */\nexport function flushBuffer(configuration?: FlushBufferConfiguration, trackers?: Array<string>) {\n  dispatchToTrackers(trackers, (t) => {\n    t.flushBuffer(configuration);\n  });\n}\n\n/**\n * Track a visit to a web page\n *\n * @param event - The Page View Event properties\n * @param trackers - The tracker identifiers which the event will be sent to\n */\nexport function trackPageView(event?: PageViewEvent & CommonEventProperties, trackers?: Array<string>) {\n  dispatchToTrackers(trackers, (t) => {\n    t.trackPageView(event);\n  });\n}\n\n/**\n * Track a structured event\n * A classic style of event tracking, allows for easier movement between analytics\n * systems. A loosely typed event, creating a Self Describing event is preferred, but\n * useful for interoperability.\n *\n * @param event - The Structured Event properties\n * @param trackers - The tracker identifiers which the event will be sent to\n */\nexport function trackStructEvent(event: StructuredEvent & CommonEventProperties, trackers?: Array<string>) {\n  dispatchToTrackers(trackers, (t) => {\n    t.core.track(buildStructEvent(event), event.context, event.timestamp);\n  });\n}\n\n/**\n * Track a self-describing event happening on this page.\n * A custom event type, allowing for an event to be tracked using your own custom schema\n * and a data object which conforms to the supplied schema\n *\n * @param event - The event information\n * @param trackers - The tracker identifiers which the event will be sent to\n */\nexport function trackSelfDescribingEvent(event: SelfDescribingEvent & CommonEventProperties, trackers?: Array<string>) {\n  dispatchToTrackers(trackers, (t) => {\n    t.core.track(buildSelfDescribingEvent({ event: event.event }), event.context, event.timestamp);\n  });\n}\n\n/**\n * All provided contexts will be sent with every event\n *\n * @param contexts - An array of contexts or conditional contexts\n * @param trackers - The tracker identifiers which the global contexts will be added to\n */\nexport function addGlobalContexts(\n  contexts: Array<ConditionalContextProvider | ContextPrimitive>,\n  trackers?: Array<string>\n) {\n  dispatchToTrackers(trackers, (t) => {\n    t.core.addGlobalContexts(contexts);\n  });\n}\n\n/**\n * All provided contexts will no longer be sent with every event\n *\n * @param contexts - An array of contexts or conditional contexts\n * @param trackers - The tracker identifiers which the global contexts will be remove from\n */\nexport function removeGlobalContexts(\n  contexts: Array<ConditionalContextProvider | ContextPrimitive>,\n  trackers?: Array<string>\n) {\n  dispatchToTrackers(trackers, (t) => {\n    t.core.removeGlobalContexts(contexts);\n  });\n}\n\n/**\n * Clear all global contexts that are sent with events\n *\n * @param trackers - The tracker identifiers which the global contexts will be cleared from\n */\nexport function clearGlobalContexts(trackers?: Array<string>) {\n  dispatchToTrackers(trackers, (t) => {\n    t.core.clearGlobalContexts();\n  });\n}\n\n/**\n * Stop regenerating `pageViewId` (available from `web_page` context)\n *\n * @param trackers - The tracker identifiers which the event will preserve their Page View Ids\n */\nexport function preservePageViewId(trackers?: Array<string>) {\n  dispatchToTrackers(trackers, (t) => {\n    t.preservePageViewId();\n  });\n}\n\n/**\n * Disables anonymous tracking if active (ie. tracker initialized with `anonymousTracking`)\n * For stateStorageStrategy override, uses supplied value first,\n * falls back to one defined in initial config, otherwise uses cookieAndLocalStorage.\n *\n * @param configuration - The configuration for disabling anonymous tracking\n * @param trackers - The tracker identifiers which the event will be sent to\n */\nexport function disableAnonymousTracking(\n  configuration?: DisableAnonymousTrackingConfiguration,\n  trackers?: Array<string>\n) {\n  dispatchToTrackers(trackers, (t) => {\n    t.disableAnonymousTracking(configuration);\n  });\n}\n\n/**\n * Enables anonymous tracking (ie. tracker initialized without `anonymousTracking`)\n *\n * @param configuration - The configuration for enabling anonymous tracking\n * @param trackers - The tracker identifiers which the event will be sent to\n */\nexport function enableAnonymousTracking(\n  configuration?: EnableAnonymousTrackingConfiguration,\n  trackers?: Array<string>\n) {\n  dispatchToTrackers(trackers, (t) => {\n    t.enableAnonymousTracking(configuration);\n  });\n}\n\n/**\n * Clears all cookies and local storage containing user and session identifiers\n *\n * @param trackers - The tracker identifiers which the event will be sent to\n */\nexport function clearUserData(configuration?: ClearUserDataConfiguration, trackers?: Array<string>) {\n  dispatchToTrackers(trackers, (t) => {\n    t.clearUserData(configuration);\n  });\n}\n\n/**\n * Add a plugin into the plugin collection after trackers have already been initialised\n *\n * @param configuration - The plugin to add\n * @param trackers - The tracker identifiers which the plugin will be added to\n */\nexport function addPlugin(configuration: BrowserPluginConfiguration, trackers?: Array<string>) {\n  dispatchToTrackers(trackers, (t) => {\n    t.addPlugin(configuration);\n  });\n}\n","/*\n * Copyright (c) 2021 Snowplow Analytics Ltd, 2010 Anthon Pang\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are met:\n *\n * 1. Redistributions of source code must retain the above copyright notice, this\n *    list of conditions and the following disclaimer.\n *\n * 2. Redistributions in binary form must reproduce the above copyright notice,\n *    this list of conditions and the following disclaimer in the documentation\n *    and/or other materials provided with the distribution.\n *\n * 3. Neither the name of the copyright holder nor the names of its\n *    contributors may be used to endorse or promote products derived from\n *    this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\n * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\n * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\n * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\nimport {\n  createSharedState,\n  addTracker,\n  TrackerConfiguration,\n  BrowserTracker,\n  CookieSameSite,\n  Platform,\n  EventMethod,\n  StateStorageStrategy,\n} from '@snowplow/browser-tracker-core';\nimport { version } from '@snowplow/tracker-core';\n\nconst state = typeof window !== 'undefined' ? createSharedState() : undefined;\n\n/**\n * Initialise a new tracker\n *\n * @param trackerId - The tracker id - also known as tracker namespace\n * @param endpoint - Collector endpoint in the form collector.mysite.com\n */\nexport function newTracker(trackerId: string, endpoint: string): BrowserTracker;\n/**\n * Initialise a new tracker\n *\n * @param trackerId - The tracker id - also known as tracker namespace\n * @param endpoint - Collector endpoint in the form collector.mysite.com\n * @param configuration - The initialisation options of the tracker\n */\nexport function newTracker(trackerId: string, endpoint: string, configuration: TrackerConfiguration): BrowserTracker;\n/**\n * Initialise a new tracker\n *\n * @param trackerId - The tracker id - also known as tracker namespace\n * @param endpoint - Collector endpoint in the form collector.mysite.com\n * @param configuration - The initialisation options of the tracker\n */\nexport function newTracker(trackerId: string, endpoint: string, configuration: TrackerConfiguration = {}) {\n  if (state) {\n    return addTracker(trackerId, trackerId, `js-${version}`, endpoint, state, configuration);\n  } else {\n    return undefined;\n  }\n}\n\nexport { BrowserTracker, TrackerConfiguration, CookieSameSite, Platform, EventMethod, StateStorageStrategy };\nexport { version };\nexport * from './api';\n"],"names":[],"mappings":"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"}