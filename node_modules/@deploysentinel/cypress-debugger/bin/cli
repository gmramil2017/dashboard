#!/usr/bin/env node

const humanInterval = require('human-interval');
const runnerPJson = require('@deploysentinel/cypress-runner/package.json');
const semver = require('semver');
const { api, utils } = require('@deploysentinel/debugger-core');
const {
  getBinaryVersion,
} = require('@deploysentinel/cypress-runner/dist/patch');
const { run } = require('@deploysentinel/cypress-runner/dist/index');
const { spawn } = require('@deploysentinel/cypress-runner/dist/cy2-beta');

const pjson = require('../package.json');

// patch deploysentinel env
process.env.CYPRESS_RECORD_KEY =
  process.env.CYPRESS_DEPLOYSENTINEL_KEY || process.env.CYPRESS_RECORD_KEY;

process.env.CYPRESS_API_URL =
  process.env.CYPRESS_API_URL || 'https://api.deploysentinel.com';

// patch cypress env
process.env.API_RETRY_INTERVALS = [
  humanInterval('30 seconds'),
  humanInterval('60 seconds'),
  humanInterval('2 minutes'),
  humanInterval('3 minutes'),
  humanInterval('4 minutes'),
  humanInterval('5 minutes'),
].join(',');

// debug flag
if (process.env.DEBUG === 'ds') {
  process.env.DEBUG = [
    'ds',
    'cypress:net-stubbing*',
    'cypress:network:*',
    'cypress:server:cloud:*',
  ].join(',');
}

const setCustomEnvs = () => {
  // Set up ELECTRON_EXTRA_LAUNCH_ARGS if not present
  if (!process.env.ELECTRON_EXTRA_LAUNCH_ARGS) {
    console.log(
      'Setting ELECTRON_EXTRA_LAUNCH_ARGS = "--remote-debugging-port=40500"',
    );
    process.env.ELECTRON_EXTRA_LAUNCH_ARGS = '--remote-debugging-port=40500';
  } else if (
    !process.env.ELECTRON_EXTRA_LAUNCH_ARGS.includes('--remote-debugging-port')
  ) {
    console.log(
      'Adding "--remote-debugging-port=40500" to ELECTRON_EXTRA_LAUNCH_ARGS',
    );
    process.env.ELECTRON_EXTRA_LAUNCH_ARGS += ' --remote-debugging-port=40500';
  }

  // bypass proxy
  process.env.NO_PROXY = [
    ...(process.env.NO_PROXY ? process.env.NO_PROXY.split(',') : []),
    '.com',
  ].join(',');
};

const initLogger = () => {
  let logger;
  // init logger
  if (process.env.CYPRESS_DEPLOYSENTINEL_KEY) {
    const apiClient = new api.APIClientBase({
      apiKey: process.env.CYPRESS_DEPLOYSENTINEL_KEY,
      baseUrl: 'https://api.deploysentinel.com/ci',
      buildId: null,
      debuggerVersion: pjson.version,
      verbose: true,
    });
    logger = new api.Logger(apiClient, true);

    logger.info({
      location: 'cli',
      message: 'Init logger successfully',
      meta: {
        runnerVersion: runnerPJson.version,
      },
    });
  }

  return logger;
};

// main (inline cypress-runner/src/cli.ts)
const cypressCLI = async () => {
  setCustomEnvs();
  const logger = initLogger();

  try {
    const version = await getBinaryVersion();

    if (version && semver.gt(version, '12.0.2')) {
      await spawn(process.env.CYPRESS_API_URL);
      return;
    }

    await run();
  } catch (e) {
    // make sure the error log is sent out
    await logger?.error({
      location: 'cypressCLI:catch',
      message: e,
      meta: {
        runnerVersion: runnerPJson.version,
      },
    });
    throw e;
  }
};

const uploadLogFileCLI = async filePath => {
  if (!filePath) {
    console.log('Please provide the log file path');
    return;
  }

  const logger = initLogger();
  console.log(`Start uploading file: ${filePath}`);
  const ts = Date.now();
  try {
    await utils.LogsFileUploader.uploadLogFile(filePath, logger);
  } catch (e) {
    // make sure the error log is sent out
    await logger?.error({
      location: 'uploadLogFileCLI:catch',
      message: e,
      meta: {
        runnerVersion: runnerPJson.version,
      },
    });
    throw e;
  } finally {
    console.log(`Finished file upload in ${Date.now() - ts} ms`);
  }
};

//---------------------------------------------
//----------------- MAIN ----------------------
//---------------------------------------------
const args = process.argv.slice(2);

// TODO: add description
if (args[0] === 'upload-logs') {
  uploadLogFileCLI(args[1]).catch(error => {
    console.error(error);
    process.exit(1);
  });
} else {
  cypressCLI().catch(error => {
    console.error(error);
    process.exit(1);
  });
}
