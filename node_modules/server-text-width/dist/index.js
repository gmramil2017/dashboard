"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.init = void 0;
var base64chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
var base64codes = {};
for (var index = 0; index < base64chars.length; index++) {
    base64codes[base64chars[index]] = index;
}
function base64ToFloat(str) {
    var integer = base64codes[str[0]];
    var fract64 = base64codes[str[1]];
    var fractional = fract64 / 64;
    return integer + fractional;
}
function init(charactersTable) {
    var lookupTable = function (char, options) {
        var code = char.charCodeAt(0);
        for (var row in charactersTable) {
            var _a = row.split('|'), font = _a[0], size = _a[1], weight = _a[2], start16 = _a[3];
            if ((options === null || options === void 0 ? void 0 : options.fontName) && options.fontName !== font) {
                continue;
            }
            if ((options === null || options === void 0 ? void 0 : options.fontSize) && options.fontSize !== size) {
                continue;
            }
            if ((options === null || options === void 0 ? void 0 : options.fontWeight) && options.fontWeight !== weight) {
                continue;
            }
            var data = charactersTable[row];
            var start = parseInt(start16, 16);
            var end = start + data.length / 2;
            if (start <= code && code <= end) {
                var pos = (code - start) * 2;
                return base64ToFloat(data.slice(pos, pos + 2));
            }
        }
    };
    var getTextWidth = function (text, options) {
        return Array.from(text).reduce(function (sum, item) { return sum + (lookupTable(item, options) || 0); }, 0);
    };
    return { getTextWidth: getTextWidth };
}
exports.init = init;
