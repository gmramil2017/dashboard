import ProtocolClient from "./client";
import { Options, OriginalSourceEntry, RecordingMetadata, SourceMapEntry } from "./types";
declare class ReplayClient {
    client: ProtocolClient | undefined;
    clientReady: {
        promise: Promise<boolean>;
        resolve: (value: boolean) => void;
        reject: (reason?: any) => void;
    };
    initConnection(server: string, accessToken?: string, verbose?: boolean, agent?: any): Promise<boolean>;
    connectionBeginRecordingUpload(id: string, buildId: string, size: number): Promise<{
        recordingId: string;
        uploadLink: string;
    }>;
    buildRecordingMetadata(metadata: Record<string, unknown>, _opts?: Options): Promise<RecordingMetadata>;
    setRecordingMetadata(id: string, metadata: RecordingMetadata): Promise<void>;
    connectionProcessRecording(recordingId: string): void;
    connectionWaitForProcessed(recordingId: string): Promise<unknown>;
    connectionReportCrash(data: any): Promise<void>;
    uploadRecording(path: string, uploadLink: string, size: number): Promise<void>;
    connectionEndRecordingUpload(recordingId: string): Promise<void>;
    connectionUploadSourcemap(recordingId: string, metadata: SourceMapEntry, content: string): Promise<string>;
    connectionUploadOriginalSource(recordingId: string, parentId: string, metadata: OriginalSourceEntry, content: string): Promise<void>;
    createResource(content: string): Promise<{
        token: string;
        saltedHash: string;
    }>;
    closeConnection(): void;
}
export { ReplayClient };
//# sourceMappingURL=upload.d.ts.map