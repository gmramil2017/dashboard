"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const superstruct_1 = require("superstruct");
const isUuid = require("is-uuid");
const env_1 = require("../env");
const testError = (0, superstruct_1.object)({
    name: (0, superstruct_1.string)(),
    message: (0, superstruct_1.string)(),
    line: (0, superstruct_1.optional)((0, superstruct_1.number)()),
    column: (0, superstruct_1.optional)((0, superstruct_1.number)()),
});
const userActionEvent = (0, superstruct_1.object)({
    data: (0, superstruct_1.object)({
        id: (0, superstruct_1.string)(),
        parentId: (0, superstruct_1.nullable)((0, superstruct_1.string)()),
        category: (0, superstruct_1.enums)(["assertion", "command", "other"]),
        command: (0, superstruct_1.object)({
            arguments: (0, superstruct_1.array)((0, superstruct_1.string)()),
            name: (0, superstruct_1.string)(),
        }),
        scope: (0, superstruct_1.nullable)((0, superstruct_1.array)((0, superstruct_1.string)())),
        error: (0, superstruct_1.nullable)(testError),
    }),
});
const testResult = (0, superstruct_1.enums)(["failed", "passed", "skipped", "timedOut", "unknown"]);
const test_v2_0_0 = (0, superstruct_1.object)({
    events: (0, superstruct_1.object)({
        afterAll: (0, superstruct_1.array)(userActionEvent),
        afterEach: (0, superstruct_1.array)(userActionEvent),
        beforeAll: (0, superstruct_1.array)(userActionEvent),
        beforeEach: (0, superstruct_1.array)(userActionEvent),
        main: (0, superstruct_1.array)(userActionEvent),
    }),
    approximateDuration: (0, superstruct_1.number)(),
    result: testResult,
    source: (0, superstruct_1.object)({
        scope: (0, superstruct_1.array)((0, superstruct_1.string)()),
        title: (0, superstruct_1.string)(),
    }),
    error: (0, superstruct_1.nullable)(testError),
});
const v2_0_0 = (0, superstruct_1.object)({
    approximateDuration: (0, superstruct_1.number)(),
    environment: (0, superstruct_1.object)({
        errors: (0, superstruct_1.defaulted)((0, superstruct_1.array)((0, superstruct_1.object)({
            code: (0, superstruct_1.number)(),
            detail: (0, superstruct_1.nullable)((0, superstruct_1.string)()),
            name: (0, superstruct_1.string)(),
            message: (0, superstruct_1.string)(),
        })), []),
        pluginVersion: (0, superstruct_1.string)(),
        testRunner: (0, superstruct_1.object)({
            name: (0, superstruct_1.string)(),
            version: (0, superstruct_1.string)(),
        }),
    }),
    result: testResult,
    resultCounts: (0, superstruct_1.record)(testResult, (0, superstruct_1.number)()),
    schemaVersion: (0, superstruct_1.defaulted)((0, superstruct_1.string)(), () => "2.0.0"),
    source: (0, superstruct_1.object)({
        path: (0, superstruct_1.string)(),
        title: (0, superstruct_1.string)(),
    }),
    tests: (0, superstruct_1.array)(test_v2_0_0),
    run: (0, superstruct_1.defaulted)((0, superstruct_1.object)({
        id: (0, superstruct_1.defaulted)((0, superstruct_1.define)("uuid", (v) => isUuid.v4(v)), (0, env_1.firstEnvValueOf)("REPLAY_METADATA_TEST_RUN_ID", "RECORD_REPLAY_METADATA_TEST_RUN_ID", "RECORD_REPLAY_TEST_RUN_ID")),
        title: (0, superstruct_1.optional)((0, superstruct_1.defaulted)((0, superstruct_1.string)(), (0, env_1.firstEnvValueOf)("REPLAY_METADATA_TEST_RUN_TITLE", "RECORD_REPLAY_METADATA_TEST_RUN_TITLE"))),
        mode: (0, superstruct_1.optional)((0, superstruct_1.defaulted)((0, superstruct_1.string)(), (0, env_1.firstEnvValueOf)("REPLAY_METADATA_TEST_RUN_MODE", "RECORD_REPLAY_METADATA_TEST_RUN_MODE"))),
    }), {}),
});
const test_v2_1_0 = (0, superstruct_1.assign)(test_v2_0_0, (0, superstruct_1.object)({
    id: (0, superstruct_1.number)(),
    attempt: (0, superstruct_1.number)(),
}));
const v2_1_0 = (0, superstruct_1.assign)(v2_0_0, (0, superstruct_1.object)({
    tests: (0, superstruct_1.array)(test_v2_1_0),
}));
exports.default = {
    "2.1.0": v2_1_0,
    "2.0.0": v2_0_0,
};
//# sourceMappingURL=v2.js.map