import { Infer } from "superstruct";
declare const testResult: import("superstruct").Struct<"failed" | "unknown" | "passed" | "timedOut" | "skipped", {
    failed: "failed";
    unknown: "unknown";
    passed: "passed";
    timedOut: "timedOut";
    skipped: "skipped";
}>;
declare const testError: import("superstruct").Struct<{
    message: string;
    line?: number | undefined;
    column?: number | undefined;
}, {
    message: import("superstruct").Struct<string, null>;
    line: import("superstruct").Struct<number | undefined, null>;
    column: import("superstruct").Struct<number | undefined, null>;
}>;
declare const test: import("superstruct").Struct<{
    title: string;
    result: "failed" | "unknown" | "passed" | "timedOut" | "skipped";
    error?: {
        message: string;
        line?: number | undefined;
        column?: number | undefined;
    } | undefined;
    id?: string | undefined;
    path?: string[] | undefined;
    parentId?: string | undefined;
    relativePath?: string | undefined;
    relativeStartTime?: number | undefined;
    duration?: number | undefined;
    steps?: any[] | undefined;
}, {
    id: import("superstruct").Struct<string | undefined, null>;
    parentId: import("superstruct").Struct<string | undefined, null>;
    title: import("superstruct").Struct<string, null>;
    path: import("superstruct").Struct<string[] | undefined, import("superstruct").Struct<string, null>>;
    relativePath: import("superstruct").Struct<string | undefined, null>;
    result: import("superstruct").Struct<"failed" | "unknown" | "passed" | "timedOut" | "skipped", {
        failed: "failed";
        unknown: "unknown";
        passed: "passed";
        timedOut: "timedOut";
        skipped: "skipped";
    }>;
    error: import("superstruct").Struct<{
        message: string;
        line?: number | undefined;
        column?: number | undefined;
    } | undefined, {
        message: import("superstruct").Struct<string, null>;
        line: import("superstruct").Struct<number | undefined, null>;
        column: import("superstruct").Struct<number | undefined, null>;
    }>;
    relativeStartTime: import("superstruct").Struct<number | undefined, null>;
    duration: import("superstruct").Struct<number | undefined, null>;
    steps: import("superstruct").Struct<any[] | undefined, import("superstruct").Struct<any, null>>;
}>;
declare const v1_0_0: import("superstruct").Struct<{
    title: string;
    version: number;
    result: string;
    reporterErrors: any[];
    file?: string | undefined;
    path?: string[] | undefined;
    suite?: string | undefined;
    hooks?: {
        title: string;
        path: string[];
        steps?: any[] | undefined;
    }[] | undefined;
    tests?: {
        title: string;
        result: "failed" | "unknown" | "passed" | "timedOut" | "skipped";
        error?: {
            message: string;
            line?: number | undefined;
            column?: number | undefined;
        } | undefined;
        id?: string | undefined;
        path?: string[] | undefined;
        parentId?: string | undefined;
        relativePath?: string | undefined;
        relativeStartTime?: number | undefined;
        duration?: number | undefined;
        steps?: any[] | undefined;
    }[] | undefined;
    runner?: {
        name?: string | undefined;
        version?: string | undefined;
        plugin?: string | undefined;
    } | undefined;
    run?: {
        id: unknown;
        title?: string | undefined;
        mode?: string | undefined;
    } | undefined;
}, {
    suite: import("superstruct").Struct<string | undefined, null>;
    file: import("superstruct").Struct<string | undefined, null>;
    title: import("superstruct").Struct<string, null>;
    path: import("superstruct").Struct<string[] | undefined, import("superstruct").Struct<string, null>>;
    result: import("superstruct").Struct<string, {
        [x: string]: string;
    }>;
    hooks: import("superstruct").Struct<{
        title: string;
        path: string[];
        steps?: any[] | undefined;
    }[] | undefined, import("superstruct").Struct<{
        title: string;
        path: string[];
        steps?: any[] | undefined;
    }, {
        title: import("superstruct").Struct<string, null>;
        path: import("superstruct").Struct<string[], import("superstruct").Struct<string, null>>;
        steps: import("superstruct").Struct<any[] | undefined, import("superstruct").Struct<any, null>>;
    }>>;
    tests: import("superstruct").Struct<{
        title: string;
        result: "failed" | "unknown" | "passed" | "timedOut" | "skipped";
        error?: {
            message: string;
            line?: number | undefined;
            column?: number | undefined;
        } | undefined;
        id?: string | undefined;
        path?: string[] | undefined;
        parentId?: string | undefined;
        relativePath?: string | undefined;
        relativeStartTime?: number | undefined;
        duration?: number | undefined;
        steps?: any[] | undefined;
    }[] | undefined, import("superstruct").Struct<{
        title: string;
        result: "failed" | "unknown" | "passed" | "timedOut" | "skipped";
        error?: {
            message: string;
            line?: number | undefined;
            column?: number | undefined;
        } | undefined;
        id?: string | undefined;
        path?: string[] | undefined;
        parentId?: string | undefined;
        relativePath?: string | undefined;
        relativeStartTime?: number | undefined;
        duration?: number | undefined;
        steps?: any[] | undefined;
    }, {
        id: import("superstruct").Struct<string | undefined, null>;
        parentId: import("superstruct").Struct<string | undefined, null>;
        title: import("superstruct").Struct<string, null>;
        path: import("superstruct").Struct<string[] | undefined, import("superstruct").Struct<string, null>>;
        relativePath: import("superstruct").Struct<string | undefined, null>;
        result: import("superstruct").Struct<"failed" | "unknown" | "passed" | "timedOut" | "skipped", {
            failed: "failed";
            unknown: "unknown";
            passed: "passed";
            timedOut: "timedOut";
            skipped: "skipped";
        }>;
        error: import("superstruct").Struct<{
            message: string;
            line?: number | undefined;
            column?: number | undefined;
        } | undefined, {
            message: import("superstruct").Struct<string, null>;
            line: import("superstruct").Struct<number | undefined, null>;
            column: import("superstruct").Struct<number | undefined, null>;
        }>;
        relativeStartTime: import("superstruct").Struct<number | undefined, null>;
        duration: import("superstruct").Struct<number | undefined, null>;
        steps: import("superstruct").Struct<any[] | undefined, import("superstruct").Struct<any, null>>;
    }>>;
    runner: import("superstruct").Struct<{
        name?: string | undefined;
        version?: string | undefined;
        plugin?: string | undefined;
    } | undefined, {
        name: import("superstruct").Struct<string | undefined, null>;
        version: import("superstruct").Struct<string | undefined, null>;
        plugin: import("superstruct").Struct<string | undefined, null>;
    }>;
    run: import("superstruct").Struct<{
        id: unknown;
        title?: string | undefined;
        mode?: string | undefined;
    } | undefined, {
        id: import("superstruct").Struct<unknown, null>;
        title: import("superstruct").Struct<string | undefined, null>;
        mode: import("superstruct").Struct<string | undefined, null>;
    }>;
    reporterErrors: import("superstruct").Struct<any[], import("superstruct").Struct<any, null>>;
    version: import("superstruct").Struct<number, null>;
}>;
export declare namespace TestMetadataV1 {
    type UserActionEvent = any;
    type Test = Infer<typeof test>;
    type TestResult = Infer<typeof testResult>;
    type TestRun = Infer<typeof v1_0_0>;
    type TestError = Infer<typeof testError>;
}
declare const _default: {
    "1.0.0": import("superstruct").Struct<{
        title: string;
        version: number;
        result: string;
        reporterErrors: any[];
        file?: string | undefined;
        path?: string[] | undefined;
        suite?: string | undefined;
        hooks?: {
            title: string;
            path: string[];
            steps?: any[] | undefined;
        }[] | undefined;
        tests?: {
            title: string;
            result: "failed" | "unknown" | "passed" | "timedOut" | "skipped";
            error?: {
                message: string;
                line?: number | undefined;
                column?: number | undefined;
            } | undefined;
            id?: string | undefined;
            path?: string[] | undefined;
            parentId?: string | undefined;
            relativePath?: string | undefined;
            relativeStartTime?: number | undefined;
            duration?: number | undefined;
            steps?: any[] | undefined;
        }[] | undefined;
        runner?: {
            name?: string | undefined;
            version?: string | undefined;
            plugin?: string | undefined;
        } | undefined;
        run?: {
            id: unknown;
            title?: string | undefined;
            mode?: string | undefined;
        } | undefined;
    }, {
        suite: import("superstruct").Struct<string | undefined, null>;
        file: import("superstruct").Struct<string | undefined, null>;
        title: import("superstruct").Struct<string, null>;
        path: import("superstruct").Struct<string[] | undefined, import("superstruct").Struct<string, null>>;
        result: import("superstruct").Struct<string, {
            [x: string]: string;
        }>;
        hooks: import("superstruct").Struct<{
            title: string;
            path: string[];
            steps?: any[] | undefined;
        }[] | undefined, import("superstruct").Struct<{
            title: string;
            path: string[];
            steps?: any[] | undefined;
        }, {
            title: import("superstruct").Struct<string, null>;
            path: import("superstruct").Struct<string[], import("superstruct").Struct<string, null>>;
            steps: import("superstruct").Struct<any[] | undefined, import("superstruct").Struct<any, null>>;
        }>>;
        tests: import("superstruct").Struct<{
            title: string;
            result: "failed" | "unknown" | "passed" | "timedOut" | "skipped";
            error?: {
                message: string;
                line?: number | undefined;
                column?: number | undefined;
            } | undefined;
            id?: string | undefined;
            path?: string[] | undefined;
            parentId?: string | undefined;
            relativePath?: string | undefined;
            relativeStartTime?: number | undefined;
            duration?: number | undefined;
            steps?: any[] | undefined;
        }[] | undefined, import("superstruct").Struct<{
            title: string;
            result: "failed" | "unknown" | "passed" | "timedOut" | "skipped";
            error?: {
                message: string;
                line?: number | undefined;
                column?: number | undefined;
            } | undefined;
            id?: string | undefined;
            path?: string[] | undefined;
            parentId?: string | undefined;
            relativePath?: string | undefined;
            relativeStartTime?: number | undefined;
            duration?: number | undefined;
            steps?: any[] | undefined;
        }, {
            id: import("superstruct").Struct<string | undefined, null>;
            parentId: import("superstruct").Struct<string | undefined, null>;
            title: import("superstruct").Struct<string, null>;
            path: import("superstruct").Struct<string[] | undefined, import("superstruct").Struct<string, null>>;
            relativePath: import("superstruct").Struct<string | undefined, null>;
            result: import("superstruct").Struct<"failed" | "unknown" | "passed" | "timedOut" | "skipped", {
                failed: "failed";
                unknown: "unknown";
                passed: "passed";
                timedOut: "timedOut";
                skipped: "skipped";
            }>;
            error: import("superstruct").Struct<{
                message: string;
                line?: number | undefined;
                column?: number | undefined;
            } | undefined, {
                message: import("superstruct").Struct<string, null>;
                line: import("superstruct").Struct<number | undefined, null>;
                column: import("superstruct").Struct<number | undefined, null>;
            }>;
            relativeStartTime: import("superstruct").Struct<number | undefined, null>;
            duration: import("superstruct").Struct<number | undefined, null>;
            steps: import("superstruct").Struct<any[] | undefined, import("superstruct").Struct<any, null>>;
        }>>;
        runner: import("superstruct").Struct<{
            name?: string | undefined;
            version?: string | undefined;
            plugin?: string | undefined;
        } | undefined, {
            name: import("superstruct").Struct<string | undefined, null>;
            version: import("superstruct").Struct<string | undefined, null>;
            plugin: import("superstruct").Struct<string | undefined, null>;
        }>;
        run: import("superstruct").Struct<{
            id: unknown;
            title?: string | undefined;
            mode?: string | undefined;
        } | undefined, {
            id: import("superstruct").Struct<unknown, null>;
            title: import("superstruct").Struct<string | undefined, null>;
            mode: import("superstruct").Struct<string | undefined, null>;
        }>;
        reporterErrors: import("superstruct").Struct<any[], import("superstruct").Struct<any, null>>;
        version: import("superstruct").Struct<number, null>;
    }>;
};
export default _default;
//# sourceMappingURL=v1.d.ts.map