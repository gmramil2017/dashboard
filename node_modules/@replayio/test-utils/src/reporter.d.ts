import type { TestMetadataV1, TestMetadataV2 } from "@replayio/replay/metadata/test";
export interface ReplayReporterConfig {
    runTitle?: string;
    metadata?: Record<string, any> | string;
}
export interface TestRunner {
    name: string;
    version: string;
    plugin: string;
}
type UserActionEvent = ReplayReporter["schemaVersion"] extends "1.0.0" ? TestMetadataV1.UserActionEvent : TestMetadataV2.UserActionEvent;
type Test = ReplayReporter["schemaVersion"] extends "1.0.0" ? TestMetadataV1.Test : TestMetadataV2.Test;
type TestResult = ReplayReporter["schemaVersion"] extends "1.0.0" ? TestMetadataV1.TestResult : TestMetadataV2.TestResult;
type TestError = ReplayReporter["schemaVersion"] extends "1.0.0" ? TestMetadataV1.TestError : TestMetadataV2.TestError;
type TestRun = ReplayReporter["schemaVersion"] extends "1.0.0" ? TestMetadataV1.TestRun : TestMetadataV2.TestRun;
export declare class ReporterError extends Error {
    code: number;
    detail: any;
    constructor(code: number, message: string, detail?: any);
    valueOf(): {
        code: number;
        name: string;
        message: string;
        detail: any;
    };
}
declare class ReplayReporter {
    baseId: any;
    baseMetadata: Record<string, any> | null;
    schemaVersion: string;
    runTitle?: string;
    runner: TestRunner;
    errors: ReporterError[];
    constructor(runner: TestRunner, schemaVersion: string);
    getResultFromResultCounts(resultCounts: TestRun["resultCounts"]): TestResult;
    summarizeResults(tests: Test[]): {
        approximateDuration: number;
        resultCounts: Record<"failed" | "unknown" | "passed" | "timedOut" | "skipped", number>;
    };
    getTestId(source?: Test["source"]): any;
    parseConfig(config?: ReplayReporterConfig, metadataKey?: string): void;
    addError(err: Error | ReporterError): void;
    setDiagnosticMetadata(metadata: Record<string, unknown>): void;
    onTestSuiteBegin(config?: ReplayReporterConfig, metadataKey?: string): void;
    onTestBegin(source?: Test["source"], metadataFilePath?: string): void;
    onTestEnd({ tests, specFile, replayTitle, extraMetadata, }: {
        tests: Test[];
        specFile: string;
        replayTitle?: string;
        extraMetadata?: Record<string, unknown>;
    }): {
        test: TestRun;
    } | undefined;
}
export default ReplayReporter;
export type { UserActionEvent, Test, TestResult, TestError, TestMetadataV1, TestMetadataV2 };
//# sourceMappingURL=reporter.d.ts.map