/// <reference types="cypress" />
import { TestMetadataV2 } from "@replayio/test-utils";
import type { StepEvent } from "./support";
type Test = TestMetadataV2.Test;
export declare function mapStateToResult(state: CypressCommandLine.TestResult["state"]): Test["result"];
declare function getTestsFromResults(resultTests: CypressCommandLine.TestResult[]): {
    error: {
        message: string;
        name: string;
        line?: number | undefined;
        column?: number | undefined;
    } | null;
    id: number;
    source: {
        title: string;
        scope: string[];
    };
    result: "failed" | "passed" | "unknown" | "timedOut" | "skipped";
    events: {
        main: {
            data: {
                error: {
                    message: string;
                    name: string;
                    line?: number | undefined;
                    column?: number | undefined;
                } | null;
                id: string;
                command: {
                    name: string;
                    arguments: string[];
                };
                parentId: string | null;
                category: "other" | "command" | "assertion";
                scope: string[] | null;
            };
        }[];
        beforeAll: {
            data: {
                error: {
                    message: string;
                    name: string;
                    line?: number | undefined;
                    column?: number | undefined;
                } | null;
                id: string;
                command: {
                    name: string;
                    arguments: string[];
                };
                parentId: string | null;
                category: "other" | "command" | "assertion";
                scope: string[] | null;
            };
        }[];
        afterAll: {
            data: {
                error: {
                    message: string;
                    name: string;
                    line?: number | undefined;
                    column?: number | undefined;
                } | null;
                id: string;
                command: {
                    name: string;
                    arguments: string[];
                };
                parentId: string | null;
                category: "other" | "command" | "assertion";
                scope: string[] | null;
            };
        }[];
        afterEach: {
            data: {
                error: {
                    message: string;
                    name: string;
                    line?: number | undefined;
                    column?: number | undefined;
                } | null;
                id: string;
                command: {
                    name: string;
                    arguments: string[];
                };
                parentId: string | null;
                category: "other" | "command" | "assertion";
                scope: string[] | null;
            };
        }[];
        beforeEach: {
            data: {
                error: {
                    message: string;
                    name: string;
                    line?: number | undefined;
                    column?: number | undefined;
                } | null;
                id: string;
                command: {
                    name: string;
                    arguments: string[];
                };
                parentId: string | null;
                category: "other" | "command" | "assertion";
                scope: string[] | null;
            };
        }[];
    };
    approximateDuration: number;
    attempt: number;
}[];
declare function sortSteps(steps: StepEvent[]): StepEvent[];
declare function groupStepsByTest(tests: Test[], steps: StepEvent[]): Test[];
export { groupStepsByTest, getTestsFromResults, sortSteps };
//# sourceMappingURL=steps.d.ts.map